// soc_system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system_mm_interconnect_0 (
		input  wire        PLL_Shared_outclk0_clk,                                           //                                         PLL_Shared_outclk0.clk
		input  wire        PLL_Shared_outclk1_clk,                                           //                                         PLL_Shared_outclk1.clk
		input  wire        SysAudio_Audio_Clock_audio_clk_clk,                               //                             SysAudio_Audio_Clock_audio_clk.clk
		input  wire        PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset,                //                PIO_LEDs_Shared_reset_reset_bridge_in_reset.reset
		input  wire        SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset,        //        SDRAM_Controller_Shared_reset_reset_bridge_in_reset.reset
		input  wire        SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset,            //            SysAudio_Audio_Core_reset_reset_bridge_in_reset.reset
		input  wire        SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset,               //               SysAudio_NIOS_II_reset_reset_bridge_in_reset.reset
		input  wire        SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset, // SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset.reset
		input  wire [26:0] SysAudio_NIOS_II_data_master_address,                             //                               SysAudio_NIOS_II_data_master.address
		output wire        SysAudio_NIOS_II_data_master_waitrequest,                         //                                                           .waitrequest
		input  wire [3:0]  SysAudio_NIOS_II_data_master_byteenable,                          //                                                           .byteenable
		input  wire        SysAudio_NIOS_II_data_master_read,                                //                                                           .read
		output wire [31:0] SysAudio_NIOS_II_data_master_readdata,                            //                                                           .readdata
		output wire        SysAudio_NIOS_II_data_master_readdatavalid,                       //                                                           .readdatavalid
		input  wire        SysAudio_NIOS_II_data_master_write,                               //                                                           .write
		input  wire [31:0] SysAudio_NIOS_II_data_master_writedata,                           //                                                           .writedata
		input  wire        SysAudio_NIOS_II_data_master_debugaccess,                         //                                                           .debugaccess
		input  wire [26:0] SysAudio_NIOS_II_instruction_master_address,                      //                        SysAudio_NIOS_II_instruction_master.address
		output wire        SysAudio_NIOS_II_instruction_master_waitrequest,                  //                                                           .waitrequest
		input  wire        SysAudio_NIOS_II_instruction_master_read,                         //                                                           .read
		output wire [31:0] SysAudio_NIOS_II_instruction_master_readdata,                     //                                                           .readdata
		output wire        SysAudio_NIOS_II_instruction_master_readdatavalid,                //                                                           .readdatavalid
		input  wire [31:0] SysSigProc_HW_accelerator_avalon_master_address,                  //                    SysSigProc_HW_accelerator_avalon_master.address
		output wire        SysSigProc_HW_accelerator_avalon_master_waitrequest,              //                                                           .waitrequest
		input  wire [3:0]  SysSigProc_HW_accelerator_avalon_master_byteenable,               //                                                           .byteenable
		input  wire        SysSigProc_HW_accelerator_avalon_master_read,                     //                                                           .read
		output wire [31:0] SysSigProc_HW_accelerator_avalon_master_readdata,                 //                                                           .readdata
		input  wire        SysSigProc_HW_accelerator_avalon_master_write,                    //                                                           .write
		input  wire [31:0] SysSigProc_HW_accelerator_avalon_master_writedata,                //                                                           .writedata
		input  wire [26:0] SysSigProc_NIOS_II_data_master_address,                           //                             SysSigProc_NIOS_II_data_master.address
		output wire        SysSigProc_NIOS_II_data_master_waitrequest,                       //                                                           .waitrequest
		input  wire [3:0]  SysSigProc_NIOS_II_data_master_byteenable,                        //                                                           .byteenable
		input  wire        SysSigProc_NIOS_II_data_master_read,                              //                                                           .read
		output wire [31:0] SysSigProc_NIOS_II_data_master_readdata,                          //                                                           .readdata
		output wire        SysSigProc_NIOS_II_data_master_readdatavalid,                     //                                                           .readdatavalid
		input  wire        SysSigProc_NIOS_II_data_master_write,                             //                                                           .write
		input  wire [31:0] SysSigProc_NIOS_II_data_master_writedata,                         //                                                           .writedata
		input  wire        SysSigProc_NIOS_II_data_master_debugaccess,                       //                                                           .debugaccess
		input  wire [26:0] SysSigProc_NIOS_II_instruction_master_address,                    //                      SysSigProc_NIOS_II_instruction_master.address
		output wire        SysSigProc_NIOS_II_instruction_master_waitrequest,                //                                                           .waitrequest
		input  wire        SysSigProc_NIOS_II_instruction_master_read,                       //                                                           .read
		output wire [31:0] SysSigProc_NIOS_II_instruction_master_readdata,                   //                                                           .readdata
		output wire        SysSigProc_NIOS_II_instruction_master_readdatavalid,              //                                                           .readdatavalid
		output wire [1:0]  Mailbox_AudioToSigProc_avmm_msg_receiver_address,                 //                   Mailbox_AudioToSigProc_avmm_msg_receiver.address
		output wire        Mailbox_AudioToSigProc_avmm_msg_receiver_write,                   //                                                           .write
		output wire        Mailbox_AudioToSigProc_avmm_msg_receiver_read,                    //                                                           .read
		input  wire [31:0] Mailbox_AudioToSigProc_avmm_msg_receiver_readdata,                //                                                           .readdata
		output wire [31:0] Mailbox_AudioToSigProc_avmm_msg_receiver_writedata,               //                                                           .writedata
		output wire [1:0]  Mailbox_AudioToSigProc_avmm_msg_sender_address,                   //                     Mailbox_AudioToSigProc_avmm_msg_sender.address
		output wire        Mailbox_AudioToSigProc_avmm_msg_sender_write,                     //                                                           .write
		output wire        Mailbox_AudioToSigProc_avmm_msg_sender_read,                      //                                                           .read
		input  wire [31:0] Mailbox_AudioToSigProc_avmm_msg_sender_readdata,                  //                                                           .readdata
		output wire [31:0] Mailbox_AudioToSigProc_avmm_msg_sender_writedata,                 //                                                           .writedata
		input  wire        Mailbox_AudioToSigProc_avmm_msg_sender_waitrequest,               //                                                           .waitrequest
		output wire [1:0]  Mailbox_SigProcToAudio_avmm_msg_receiver_address,                 //                   Mailbox_SigProcToAudio_avmm_msg_receiver.address
		output wire        Mailbox_SigProcToAudio_avmm_msg_receiver_write,                   //                                                           .write
		output wire        Mailbox_SigProcToAudio_avmm_msg_receiver_read,                    //                                                           .read
		input  wire [31:0] Mailbox_SigProcToAudio_avmm_msg_receiver_readdata,                //                                                           .readdata
		output wire [31:0] Mailbox_SigProcToAudio_avmm_msg_receiver_writedata,               //                                                           .writedata
		output wire [1:0]  Mailbox_SigProcToAudio_avmm_msg_sender_address,                   //                     Mailbox_SigProcToAudio_avmm_msg_sender.address
		output wire        Mailbox_SigProcToAudio_avmm_msg_sender_write,                     //                                                           .write
		output wire        Mailbox_SigProcToAudio_avmm_msg_sender_read,                      //                                                           .read
		input  wire [31:0] Mailbox_SigProcToAudio_avmm_msg_sender_readdata,                  //                                                           .readdata
		output wire [31:0] Mailbox_SigProcToAudio_avmm_msg_sender_writedata,                 //                                                           .writedata
		input  wire        Mailbox_SigProcToAudio_avmm_msg_sender_waitrequest,               //                                                           .waitrequest
		output wire [1:0]  PIO_1st_7seg_s1_address,                                          //                                            PIO_1st_7seg_s1.address
		output wire        PIO_1st_7seg_s1_write,                                            //                                                           .write
		input  wire [31:0] PIO_1st_7seg_s1_readdata,                                         //                                                           .readdata
		output wire [31:0] PIO_1st_7seg_s1_writedata,                                        //                                                           .writedata
		output wire        PIO_1st_7seg_s1_chipselect,                                       //                                                           .chipselect
		output wire [1:0]  PIO_2nd_7seg_s1_address,                                          //                                            PIO_2nd_7seg_s1.address
		output wire        PIO_2nd_7seg_s1_write,                                            //                                                           .write
		input  wire [31:0] PIO_2nd_7seg_s1_readdata,                                         //                                                           .readdata
		output wire [31:0] PIO_2nd_7seg_s1_writedata,                                        //                                                           .writedata
		output wire        PIO_2nd_7seg_s1_chipselect,                                       //                                                           .chipselect
		output wire [1:0]  PIO_3rd_7seg_s1_address,                                          //                                            PIO_3rd_7seg_s1.address
		output wire        PIO_3rd_7seg_s1_write,                                            //                                                           .write
		input  wire [31:0] PIO_3rd_7seg_s1_readdata,                                         //                                                           .readdata
		output wire [31:0] PIO_3rd_7seg_s1_writedata,                                        //                                                           .writedata
		output wire        PIO_3rd_7seg_s1_chipselect,                                       //                                                           .chipselect
		output wire [2:0]  PIO_Debug_s1_address,                                             //                                               PIO_Debug_s1.address
		output wire        PIO_Debug_s1_write,                                               //                                                           .write
		input  wire [31:0] PIO_Debug_s1_readdata,                                            //                                                           .readdata
		output wire [31:0] PIO_Debug_s1_writedata,                                           //                                                           .writedata
		output wire        PIO_Debug_s1_chipselect,                                          //                                                           .chipselect
		output wire [1:0]  PIO_LEDs_Shared_s1_address,                                       //                                         PIO_LEDs_Shared_s1.address
		output wire        PIO_LEDs_Shared_s1_write,                                         //                                                           .write
		input  wire [31:0] PIO_LEDs_Shared_s1_readdata,                                      //                                                           .readdata
		output wire [31:0] PIO_LEDs_Shared_s1_writedata,                                     //                                                           .writedata
		output wire        PIO_LEDs_Shared_s1_chipselect,                                    //                                                           .chipselect
		output wire [1:0]  PIO_Switches_s1_address,                                          //                                            PIO_Switches_s1.address
		output wire        PIO_Switches_s1_write,                                            //                                                           .write
		input  wire [31:0] PIO_Switches_s1_readdata,                                         //                                                           .readdata
		output wire [31:0] PIO_Switches_s1_writedata,                                        //                                                           .writedata
		output wire        PIO_Switches_s1_chipselect,                                       //                                                           .chipselect
		output wire [24:0] SDRAM_Controller_Shared_s1_address,                               //                                 SDRAM_Controller_Shared_s1.address
		output wire        SDRAM_Controller_Shared_s1_write,                                 //                                                           .write
		output wire        SDRAM_Controller_Shared_s1_read,                                  //                                                           .read
		input  wire [15:0] SDRAM_Controller_Shared_s1_readdata,                              //                                                           .readdata
		output wire [15:0] SDRAM_Controller_Shared_s1_writedata,                             //                                                           .writedata
		output wire [1:0]  SDRAM_Controller_Shared_s1_byteenable,                            //                                                           .byteenable
		input  wire        SDRAM_Controller_Shared_s1_readdatavalid,                         //                                                           .readdatavalid
		input  wire        SDRAM_Controller_Shared_s1_waitrequest,                           //                                                           .waitrequest
		output wire        SDRAM_Controller_Shared_s1_chipselect,                            //                                                           .chipselect
		output wire [1:0]  SysAudio_Audio_Core_avalon_audio_slave_address,                   //                     SysAudio_Audio_Core_avalon_audio_slave.address
		output wire        SysAudio_Audio_Core_avalon_audio_slave_write,                     //                                                           .write
		output wire        SysAudio_Audio_Core_avalon_audio_slave_read,                      //                                                           .read
		input  wire [31:0] SysAudio_Audio_Core_avalon_audio_slave_readdata,                  //                                                           .readdata
		output wire [31:0] SysAudio_Audio_Core_avalon_audio_slave_writedata,                 //                                                           .writedata
		output wire        SysAudio_Audio_Core_avalon_audio_slave_chipselect,                //                                                           .chipselect
		output wire [1:0]  SysAudio_AV_Config_avalon_av_config_slave_address,                //                  SysAudio_AV_Config_avalon_av_config_slave.address
		output wire        SysAudio_AV_Config_avalon_av_config_slave_write,                  //                                                           .write
		output wire        SysAudio_AV_Config_avalon_av_config_slave_read,                   //                                                           .read
		input  wire [31:0] SysAudio_AV_Config_avalon_av_config_slave_readdata,               //                                                           .readdata
		output wire [31:0] SysAudio_AV_Config_avalon_av_config_slave_writedata,              //                                                           .writedata
		output wire [3:0]  SysAudio_AV_Config_avalon_av_config_slave_byteenable,             //                                                           .byteenable
		input  wire        SysAudio_AV_Config_avalon_av_config_slave_waitrequest,            //                                                           .waitrequest
		output wire [0:0]  SysAudio_JTAG_UART_avalon_jtag_slave_address,                     //                       SysAudio_JTAG_UART_avalon_jtag_slave.address
		output wire        SysAudio_JTAG_UART_avalon_jtag_slave_write,                       //                                                           .write
		output wire        SysAudio_JTAG_UART_avalon_jtag_slave_read,                        //                                                           .read
		input  wire [31:0] SysAudio_JTAG_UART_avalon_jtag_slave_readdata,                    //                                                           .readdata
		output wire [31:0] SysAudio_JTAG_UART_avalon_jtag_slave_writedata,                   //                                                           .writedata
		input  wire        SysAudio_JTAG_UART_avalon_jtag_slave_waitrequest,                 //                                                           .waitrequest
		output wire        SysAudio_JTAG_UART_avalon_jtag_slave_chipselect,                  //                                                           .chipselect
		output wire [8:0]  SysAudio_NIOS_II_debug_mem_slave_address,                         //                           SysAudio_NIOS_II_debug_mem_slave.address
		output wire        SysAudio_NIOS_II_debug_mem_slave_write,                           //                                                           .write
		output wire        SysAudio_NIOS_II_debug_mem_slave_read,                            //                                                           .read
		input  wire [31:0] SysAudio_NIOS_II_debug_mem_slave_readdata,                        //                                                           .readdata
		output wire [31:0] SysAudio_NIOS_II_debug_mem_slave_writedata,                       //                                                           .writedata
		output wire [3:0]  SysAudio_NIOS_II_debug_mem_slave_byteenable,                      //                                                           .byteenable
		input  wire        SysAudio_NIOS_II_debug_mem_slave_waitrequest,                     //                                                           .waitrequest
		output wire        SysAudio_NIOS_II_debug_mem_slave_debugaccess,                     //                                                           .debugaccess
		output wire [14:0] SysAudio_Onchip_Memory_s1_address,                                //                                  SysAudio_Onchip_Memory_s1.address
		output wire        SysAudio_Onchip_Memory_s1_write,                                  //                                                           .write
		input  wire [31:0] SysAudio_Onchip_Memory_s1_readdata,                               //                                                           .readdata
		output wire [31:0] SysAudio_Onchip_Memory_s1_writedata,                              //                                                           .writedata
		output wire [3:0]  SysAudio_Onchip_Memory_s1_byteenable,                             //                                                           .byteenable
		output wire        SysAudio_Onchip_Memory_s1_chipselect,                             //                                                           .chipselect
		output wire        SysAudio_Onchip_Memory_s1_clken,                                  //                                                           .clken
		output wire [4:0]  SysAudio_Performance_Counter_control_slave_address,               //                 SysAudio_Performance_Counter_control_slave.address
		output wire        SysAudio_Performance_Counter_control_slave_write,                 //                                                           .write
		input  wire [31:0] SysAudio_Performance_Counter_control_slave_readdata,              //                                                           .readdata
		output wire [31:0] SysAudio_Performance_Counter_control_slave_writedata,             //                                                           .writedata
		output wire        SysAudio_Performance_Counter_control_slave_begintransfer,         //                                                           .begintransfer
		output wire [2:0]  SysSigProc_HW_accelerator_as_address,                             //                               SysSigProc_HW_accelerator_as.address
		output wire        SysSigProc_HW_accelerator_as_write,                               //                                                           .write
		output wire        SysSigProc_HW_accelerator_as_read,                                //                                                           .read
		input  wire [31:0] SysSigProc_HW_accelerator_as_readdata,                            //                                                           .readdata
		output wire [31:0] SysSigProc_HW_accelerator_as_writedata,                           //                                                           .writedata
		output wire [0:0]  SysSigProc_JTAG_UART_avalon_jtag_slave_address,                   //                     SysSigProc_JTAG_UART_avalon_jtag_slave.address
		output wire        SysSigProc_JTAG_UART_avalon_jtag_slave_write,                     //                                                           .write
		output wire        SysSigProc_JTAG_UART_avalon_jtag_slave_read,                      //                                                           .read
		input  wire [31:0] SysSigProc_JTAG_UART_avalon_jtag_slave_readdata,                  //                                                           .readdata
		output wire [31:0] SysSigProc_JTAG_UART_avalon_jtag_slave_writedata,                 //                                                           .writedata
		input  wire        SysSigProc_JTAG_UART_avalon_jtag_slave_waitrequest,               //                                                           .waitrequest
		output wire        SysSigProc_JTAG_UART_avalon_jtag_slave_chipselect,                //                                                           .chipselect
		output wire [8:0]  SysSigProc_NIOS_II_debug_mem_slave_address,                       //                         SysSigProc_NIOS_II_debug_mem_slave.address
		output wire        SysSigProc_NIOS_II_debug_mem_slave_write,                         //                                                           .write
		output wire        SysSigProc_NIOS_II_debug_mem_slave_read,                          //                                                           .read
		input  wire [31:0] SysSigProc_NIOS_II_debug_mem_slave_readdata,                      //                                                           .readdata
		output wire [31:0] SysSigProc_NIOS_II_debug_mem_slave_writedata,                     //                                                           .writedata
		output wire [3:0]  SysSigProc_NIOS_II_debug_mem_slave_byteenable,                    //                                                           .byteenable
		input  wire        SysSigProc_NIOS_II_debug_mem_slave_waitrequest,                   //                                                           .waitrequest
		output wire        SysSigProc_NIOS_II_debug_mem_slave_debugaccess,                   //                                                           .debugaccess
		output wire [14:0] SysSigProc_Onchip_Memory_s1_address,                              //                                SysSigProc_Onchip_Memory_s1.address
		output wire        SysSigProc_Onchip_Memory_s1_write,                                //                                                           .write
		input  wire [31:0] SysSigProc_Onchip_Memory_s1_readdata,                             //                                                           .readdata
		output wire [31:0] SysSigProc_Onchip_Memory_s1_writedata,                            //                                                           .writedata
		output wire [3:0]  SysSigProc_Onchip_Memory_s1_byteenable,                           //                                                           .byteenable
		output wire        SysSigProc_Onchip_Memory_s1_chipselect,                           //                                                           .chipselect
		output wire        SysSigProc_Onchip_Memory_s1_clken,                                //                                                           .clken
		output wire [4:0]  SysSigProc_Performance_Counter_control_slave_address,             //               SysSigProc_Performance_Counter_control_slave.address
		output wire        SysSigProc_Performance_Counter_control_slave_write,               //                                                           .write
		input  wire [31:0] SysSigProc_Performance_Counter_control_slave_readdata,            //                                                           .readdata
		output wire [31:0] SysSigProc_Performance_Counter_control_slave_writedata,           //                                                           .writedata
		output wire        SysSigProc_Performance_Counter_control_slave_begintransfer        //                                                           .begintransfer
	);

	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_waitrequest;   // SysSigProc_HW_accelerator_avalon_master_agent:av_waitrequest -> SysSigProc_HW_accelerator_avalon_master_translator:uav_waitrequest
	wire   [31:0] syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdata;      // SysSigProc_HW_accelerator_avalon_master_agent:av_readdata -> SysSigProc_HW_accelerator_avalon_master_translator:uav_readdata
	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_debugaccess;   // SysSigProc_HW_accelerator_avalon_master_translator:uav_debugaccess -> SysSigProc_HW_accelerator_avalon_master_agent:av_debugaccess
	wire   [31:0] syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_address;       // SysSigProc_HW_accelerator_avalon_master_translator:uav_address -> SysSigProc_HW_accelerator_avalon_master_agent:av_address
	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_read;          // SysSigProc_HW_accelerator_avalon_master_translator:uav_read -> SysSigProc_HW_accelerator_avalon_master_agent:av_read
	wire    [3:0] syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_byteenable;    // SysSigProc_HW_accelerator_avalon_master_translator:uav_byteenable -> SysSigProc_HW_accelerator_avalon_master_agent:av_byteenable
	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdatavalid; // SysSigProc_HW_accelerator_avalon_master_agent:av_readdatavalid -> SysSigProc_HW_accelerator_avalon_master_translator:uav_readdatavalid
	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_lock;          // SysSigProc_HW_accelerator_avalon_master_translator:uav_lock -> SysSigProc_HW_accelerator_avalon_master_agent:av_lock
	wire          syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_write;         // SysSigProc_HW_accelerator_avalon_master_translator:uav_write -> SysSigProc_HW_accelerator_avalon_master_agent:av_write
	wire   [31:0] syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_writedata;     // SysSigProc_HW_accelerator_avalon_master_translator:uav_writedata -> SysSigProc_HW_accelerator_avalon_master_agent:av_writedata
	wire    [2:0] syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_burstcount;    // SysSigProc_HW_accelerator_avalon_master_translator:uav_burstcount -> SysSigProc_HW_accelerator_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                          // rsp_mux:src_valid -> SysSigProc_HW_accelerator_avalon_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                                           // rsp_mux:src_data -> SysSigProc_HW_accelerator_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                          // SysSigProc_HW_accelerator_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [21:0] rsp_mux_src_channel;                                                                        // rsp_mux:src_channel -> SysSigProc_HW_accelerator_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                  // rsp_mux:src_startofpacket -> SysSigProc_HW_accelerator_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                    // rsp_mux:src_endofpacket -> SysSigProc_HW_accelerator_avalon_master_agent:rp_endofpacket
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest;              // SysAudio_NIOS_II_data_master_agent:av_waitrequest -> SysAudio_NIOS_II_data_master_translator:uav_waitrequest
	wire   [31:0] sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdata;                 // SysAudio_NIOS_II_data_master_agent:av_readdata -> SysAudio_NIOS_II_data_master_translator:uav_readdata
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess;              // SysAudio_NIOS_II_data_master_translator:uav_debugaccess -> SysAudio_NIOS_II_data_master_agent:av_debugaccess
	wire   [31:0] sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_address;                  // SysAudio_NIOS_II_data_master_translator:uav_address -> SysAudio_NIOS_II_data_master_agent:av_address
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_read;                     // SysAudio_NIOS_II_data_master_translator:uav_read -> SysAudio_NIOS_II_data_master_agent:av_read
	wire    [3:0] sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_byteenable;               // SysAudio_NIOS_II_data_master_translator:uav_byteenable -> SysAudio_NIOS_II_data_master_agent:av_byteenable
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid;            // SysAudio_NIOS_II_data_master_agent:av_readdatavalid -> SysAudio_NIOS_II_data_master_translator:uav_readdatavalid
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_lock;                     // SysAudio_NIOS_II_data_master_translator:uav_lock -> SysAudio_NIOS_II_data_master_agent:av_lock
	wire          sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_write;                    // SysAudio_NIOS_II_data_master_translator:uav_write -> SysAudio_NIOS_II_data_master_agent:av_write
	wire   [31:0] sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_writedata;                // SysAudio_NIOS_II_data_master_translator:uav_writedata -> SysAudio_NIOS_II_data_master_agent:av_writedata
	wire    [2:0] sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_burstcount;               // SysAudio_NIOS_II_data_master_translator:uav_burstcount -> SysAudio_NIOS_II_data_master_agent:av_burstcount
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest;            // SysSigProc_NIOS_II_data_master_agent:av_waitrequest -> SysSigProc_NIOS_II_data_master_translator:uav_waitrequest
	wire   [31:0] syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdata;               // SysSigProc_NIOS_II_data_master_agent:av_readdata -> SysSigProc_NIOS_II_data_master_translator:uav_readdata
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess;            // SysSigProc_NIOS_II_data_master_translator:uav_debugaccess -> SysSigProc_NIOS_II_data_master_agent:av_debugaccess
	wire   [31:0] syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_address;                // SysSigProc_NIOS_II_data_master_translator:uav_address -> SysSigProc_NIOS_II_data_master_agent:av_address
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_read;                   // SysSigProc_NIOS_II_data_master_translator:uav_read -> SysSigProc_NIOS_II_data_master_agent:av_read
	wire    [3:0] syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_byteenable;             // SysSigProc_NIOS_II_data_master_translator:uav_byteenable -> SysSigProc_NIOS_II_data_master_agent:av_byteenable
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid;          // SysSigProc_NIOS_II_data_master_agent:av_readdatavalid -> SysSigProc_NIOS_II_data_master_translator:uav_readdatavalid
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_lock;                   // SysSigProc_NIOS_II_data_master_translator:uav_lock -> SysSigProc_NIOS_II_data_master_agent:av_lock
	wire          syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_write;                  // SysSigProc_NIOS_II_data_master_translator:uav_write -> SysSigProc_NIOS_II_data_master_agent:av_write
	wire   [31:0] syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_writedata;              // SysSigProc_NIOS_II_data_master_translator:uav_writedata -> SysSigProc_NIOS_II_data_master_agent:av_writedata
	wire    [2:0] syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_burstcount;             // SysSigProc_NIOS_II_data_master_translator:uav_burstcount -> SysSigProc_NIOS_II_data_master_agent:av_burstcount
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest;       // SysAudio_NIOS_II_instruction_master_agent:av_waitrequest -> SysAudio_NIOS_II_instruction_master_translator:uav_waitrequest
	wire   [31:0] sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata;          // SysAudio_NIOS_II_instruction_master_agent:av_readdata -> SysAudio_NIOS_II_instruction_master_translator:uav_readdata
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess;       // SysAudio_NIOS_II_instruction_master_translator:uav_debugaccess -> SysAudio_NIOS_II_instruction_master_agent:av_debugaccess
	wire   [31:0] sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_address;           // SysAudio_NIOS_II_instruction_master_translator:uav_address -> SysAudio_NIOS_II_instruction_master_agent:av_address
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_read;              // SysAudio_NIOS_II_instruction_master_translator:uav_read -> SysAudio_NIOS_II_instruction_master_agent:av_read
	wire    [3:0] sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable;        // SysAudio_NIOS_II_instruction_master_translator:uav_byteenable -> SysAudio_NIOS_II_instruction_master_agent:av_byteenable
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid;     // SysAudio_NIOS_II_instruction_master_agent:av_readdatavalid -> SysAudio_NIOS_II_instruction_master_translator:uav_readdatavalid
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_lock;              // SysAudio_NIOS_II_instruction_master_translator:uav_lock -> SysAudio_NIOS_II_instruction_master_agent:av_lock
	wire          sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_write;             // SysAudio_NIOS_II_instruction_master_translator:uav_write -> SysAudio_NIOS_II_instruction_master_agent:av_write
	wire   [31:0] sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata;         // SysAudio_NIOS_II_instruction_master_translator:uav_writedata -> SysAudio_NIOS_II_instruction_master_agent:av_writedata
	wire    [2:0] sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount;        // SysAudio_NIOS_II_instruction_master_translator:uav_burstcount -> SysAudio_NIOS_II_instruction_master_agent:av_burstcount
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest;     // SysSigProc_NIOS_II_instruction_master_agent:av_waitrequest -> SysSigProc_NIOS_II_instruction_master_translator:uav_waitrequest
	wire   [31:0] syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata;        // SysSigProc_NIOS_II_instruction_master_agent:av_readdata -> SysSigProc_NIOS_II_instruction_master_translator:uav_readdata
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess;     // SysSigProc_NIOS_II_instruction_master_translator:uav_debugaccess -> SysSigProc_NIOS_II_instruction_master_agent:av_debugaccess
	wire   [31:0] syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_address;         // SysSigProc_NIOS_II_instruction_master_translator:uav_address -> SysSigProc_NIOS_II_instruction_master_agent:av_address
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_read;            // SysSigProc_NIOS_II_instruction_master_translator:uav_read -> SysSigProc_NIOS_II_instruction_master_agent:av_read
	wire    [3:0] syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable;      // SysSigProc_NIOS_II_instruction_master_translator:uav_byteenable -> SysSigProc_NIOS_II_instruction_master_agent:av_byteenable
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid;   // SysSigProc_NIOS_II_instruction_master_agent:av_readdatavalid -> SysSigProc_NIOS_II_instruction_master_translator:uav_readdatavalid
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_lock;            // SysSigProc_NIOS_II_instruction_master_translator:uav_lock -> SysSigProc_NIOS_II_instruction_master_agent:av_lock
	wire          syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_write;           // SysSigProc_NIOS_II_instruction_master_translator:uav_write -> SysSigProc_NIOS_II_instruction_master_agent:av_write
	wire   [31:0] syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata;       // SysSigProc_NIOS_II_instruction_master_translator:uav_writedata -> SysSigProc_NIOS_II_instruction_master_agent:av_writedata
	wire    [2:0] syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount;      // SysSigProc_NIOS_II_instruction_master_translator:uav_burstcount -> SysSigProc_NIOS_II_instruction_master_agent:av_burstcount
	wire   [15:0] sdram_controller_shared_s1_agent_m0_readdata;                                               // SDRAM_Controller_Shared_s1_translator:uav_readdata -> SDRAM_Controller_Shared_s1_agent:m0_readdata
	wire          sdram_controller_shared_s1_agent_m0_waitrequest;                                            // SDRAM_Controller_Shared_s1_translator:uav_waitrequest -> SDRAM_Controller_Shared_s1_agent:m0_waitrequest
	wire          sdram_controller_shared_s1_agent_m0_debugaccess;                                            // SDRAM_Controller_Shared_s1_agent:m0_debugaccess -> SDRAM_Controller_Shared_s1_translator:uav_debugaccess
	wire   [31:0] sdram_controller_shared_s1_agent_m0_address;                                                // SDRAM_Controller_Shared_s1_agent:m0_address -> SDRAM_Controller_Shared_s1_translator:uav_address
	wire    [1:0] sdram_controller_shared_s1_agent_m0_byteenable;                                             // SDRAM_Controller_Shared_s1_agent:m0_byteenable -> SDRAM_Controller_Shared_s1_translator:uav_byteenable
	wire          sdram_controller_shared_s1_agent_m0_read;                                                   // SDRAM_Controller_Shared_s1_agent:m0_read -> SDRAM_Controller_Shared_s1_translator:uav_read
	wire          sdram_controller_shared_s1_agent_m0_readdatavalid;                                          // SDRAM_Controller_Shared_s1_translator:uav_readdatavalid -> SDRAM_Controller_Shared_s1_agent:m0_readdatavalid
	wire          sdram_controller_shared_s1_agent_m0_lock;                                                   // SDRAM_Controller_Shared_s1_agent:m0_lock -> SDRAM_Controller_Shared_s1_translator:uav_lock
	wire   [15:0] sdram_controller_shared_s1_agent_m0_writedata;                                              // SDRAM_Controller_Shared_s1_agent:m0_writedata -> SDRAM_Controller_Shared_s1_translator:uav_writedata
	wire          sdram_controller_shared_s1_agent_m0_write;                                                  // SDRAM_Controller_Shared_s1_agent:m0_write -> SDRAM_Controller_Shared_s1_translator:uav_write
	wire    [1:0] sdram_controller_shared_s1_agent_m0_burstcount;                                             // SDRAM_Controller_Shared_s1_agent:m0_burstcount -> SDRAM_Controller_Shared_s1_translator:uav_burstcount
	wire          sdram_controller_shared_s1_agent_rf_source_valid;                                           // SDRAM_Controller_Shared_s1_agent:rf_source_valid -> SDRAM_Controller_Shared_s1_agent_rsp_fifo:in_valid
	wire   [94:0] sdram_controller_shared_s1_agent_rf_source_data;                                            // SDRAM_Controller_Shared_s1_agent:rf_source_data -> SDRAM_Controller_Shared_s1_agent_rsp_fifo:in_data
	wire          sdram_controller_shared_s1_agent_rf_source_ready;                                           // SDRAM_Controller_Shared_s1_agent_rsp_fifo:in_ready -> SDRAM_Controller_Shared_s1_agent:rf_source_ready
	wire          sdram_controller_shared_s1_agent_rf_source_startofpacket;                                   // SDRAM_Controller_Shared_s1_agent:rf_source_startofpacket -> SDRAM_Controller_Shared_s1_agent_rsp_fifo:in_startofpacket
	wire          sdram_controller_shared_s1_agent_rf_source_endofpacket;                                     // SDRAM_Controller_Shared_s1_agent:rf_source_endofpacket -> SDRAM_Controller_Shared_s1_agent_rsp_fifo:in_endofpacket
	wire          sdram_controller_shared_s1_agent_rsp_fifo_out_valid;                                        // SDRAM_Controller_Shared_s1_agent_rsp_fifo:out_valid -> SDRAM_Controller_Shared_s1_agent:rf_sink_valid
	wire   [94:0] sdram_controller_shared_s1_agent_rsp_fifo_out_data;                                         // SDRAM_Controller_Shared_s1_agent_rsp_fifo:out_data -> SDRAM_Controller_Shared_s1_agent:rf_sink_data
	wire          sdram_controller_shared_s1_agent_rsp_fifo_out_ready;                                        // SDRAM_Controller_Shared_s1_agent:rf_sink_ready -> SDRAM_Controller_Shared_s1_agent_rsp_fifo:out_ready
	wire          sdram_controller_shared_s1_agent_rsp_fifo_out_startofpacket;                                // SDRAM_Controller_Shared_s1_agent_rsp_fifo:out_startofpacket -> SDRAM_Controller_Shared_s1_agent:rf_sink_startofpacket
	wire          sdram_controller_shared_s1_agent_rsp_fifo_out_endofpacket;                                  // SDRAM_Controller_Shared_s1_agent_rsp_fifo:out_endofpacket -> SDRAM_Controller_Shared_s1_agent:rf_sink_endofpacket
	wire          sdram_controller_shared_s1_agent_rdata_fifo_src_valid;                                      // SDRAM_Controller_Shared_s1_agent:rdata_fifo_src_valid -> SDRAM_Controller_Shared_s1_agent_rdata_fifo:in_valid
	wire   [17:0] sdram_controller_shared_s1_agent_rdata_fifo_src_data;                                       // SDRAM_Controller_Shared_s1_agent:rdata_fifo_src_data -> SDRAM_Controller_Shared_s1_agent_rdata_fifo:in_data
	wire          sdram_controller_shared_s1_agent_rdata_fifo_src_ready;                                      // SDRAM_Controller_Shared_s1_agent_rdata_fifo:in_ready -> SDRAM_Controller_Shared_s1_agent:rdata_fifo_src_ready
	wire   [31:0] syssigproc_hw_accelerator_as_agent_m0_readdata;                                             // SysSigProc_HW_accelerator_as_translator:uav_readdata -> SysSigProc_HW_accelerator_as_agent:m0_readdata
	wire          syssigproc_hw_accelerator_as_agent_m0_waitrequest;                                          // SysSigProc_HW_accelerator_as_translator:uav_waitrequest -> SysSigProc_HW_accelerator_as_agent:m0_waitrequest
	wire          syssigproc_hw_accelerator_as_agent_m0_debugaccess;                                          // SysSigProc_HW_accelerator_as_agent:m0_debugaccess -> SysSigProc_HW_accelerator_as_translator:uav_debugaccess
	wire   [31:0] syssigproc_hw_accelerator_as_agent_m0_address;                                              // SysSigProc_HW_accelerator_as_agent:m0_address -> SysSigProc_HW_accelerator_as_translator:uav_address
	wire    [3:0] syssigproc_hw_accelerator_as_agent_m0_byteenable;                                           // SysSigProc_HW_accelerator_as_agent:m0_byteenable -> SysSigProc_HW_accelerator_as_translator:uav_byteenable
	wire          syssigproc_hw_accelerator_as_agent_m0_read;                                                 // SysSigProc_HW_accelerator_as_agent:m0_read -> SysSigProc_HW_accelerator_as_translator:uav_read
	wire          syssigproc_hw_accelerator_as_agent_m0_readdatavalid;                                        // SysSigProc_HW_accelerator_as_translator:uav_readdatavalid -> SysSigProc_HW_accelerator_as_agent:m0_readdatavalid
	wire          syssigproc_hw_accelerator_as_agent_m0_lock;                                                 // SysSigProc_HW_accelerator_as_agent:m0_lock -> SysSigProc_HW_accelerator_as_translator:uav_lock
	wire   [31:0] syssigproc_hw_accelerator_as_agent_m0_writedata;                                            // SysSigProc_HW_accelerator_as_agent:m0_writedata -> SysSigProc_HW_accelerator_as_translator:uav_writedata
	wire          syssigproc_hw_accelerator_as_agent_m0_write;                                                // SysSigProc_HW_accelerator_as_agent:m0_write -> SysSigProc_HW_accelerator_as_translator:uav_write
	wire    [2:0] syssigproc_hw_accelerator_as_agent_m0_burstcount;                                           // SysSigProc_HW_accelerator_as_agent:m0_burstcount -> SysSigProc_HW_accelerator_as_translator:uav_burstcount
	wire          syssigproc_hw_accelerator_as_agent_rf_source_valid;                                         // SysSigProc_HW_accelerator_as_agent:rf_source_valid -> SysSigProc_HW_accelerator_as_agent_rsp_fifo:in_valid
	wire  [112:0] syssigproc_hw_accelerator_as_agent_rf_source_data;                                          // SysSigProc_HW_accelerator_as_agent:rf_source_data -> SysSigProc_HW_accelerator_as_agent_rsp_fifo:in_data
	wire          syssigproc_hw_accelerator_as_agent_rf_source_ready;                                         // SysSigProc_HW_accelerator_as_agent_rsp_fifo:in_ready -> SysSigProc_HW_accelerator_as_agent:rf_source_ready
	wire          syssigproc_hw_accelerator_as_agent_rf_source_startofpacket;                                 // SysSigProc_HW_accelerator_as_agent:rf_source_startofpacket -> SysSigProc_HW_accelerator_as_agent_rsp_fifo:in_startofpacket
	wire          syssigproc_hw_accelerator_as_agent_rf_source_endofpacket;                                   // SysSigProc_HW_accelerator_as_agent:rf_source_endofpacket -> SysSigProc_HW_accelerator_as_agent_rsp_fifo:in_endofpacket
	wire          syssigproc_hw_accelerator_as_agent_rsp_fifo_out_valid;                                      // SysSigProc_HW_accelerator_as_agent_rsp_fifo:out_valid -> SysSigProc_HW_accelerator_as_agent:rf_sink_valid
	wire  [112:0] syssigproc_hw_accelerator_as_agent_rsp_fifo_out_data;                                       // SysSigProc_HW_accelerator_as_agent_rsp_fifo:out_data -> SysSigProc_HW_accelerator_as_agent:rf_sink_data
	wire          syssigproc_hw_accelerator_as_agent_rsp_fifo_out_ready;                                      // SysSigProc_HW_accelerator_as_agent:rf_sink_ready -> SysSigProc_HW_accelerator_as_agent_rsp_fifo:out_ready
	wire          syssigproc_hw_accelerator_as_agent_rsp_fifo_out_startofpacket;                              // SysSigProc_HW_accelerator_as_agent_rsp_fifo:out_startofpacket -> SysSigProc_HW_accelerator_as_agent:rf_sink_startofpacket
	wire          syssigproc_hw_accelerator_as_agent_rsp_fifo_out_endofpacket;                                // SysSigProc_HW_accelerator_as_agent_rsp_fifo:out_endofpacket -> SysSigProc_HW_accelerator_as_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                      // cmd_mux_001:src_valid -> SysSigProc_HW_accelerator_as_agent:cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                                       // cmd_mux_001:src_data -> SysSigProc_HW_accelerator_as_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                      // SysSigProc_HW_accelerator_as_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [21:0] cmd_mux_001_src_channel;                                                                    // cmd_mux_001:src_channel -> SysSigProc_HW_accelerator_as_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                              // cmd_mux_001:src_startofpacket -> SysSigProc_HW_accelerator_as_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                // cmd_mux_001:src_endofpacket -> SysSigProc_HW_accelerator_as_agent:cp_endofpacket
	wire   [31:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                   // SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                // SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_address;                                    // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_address -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                 // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_read;                                       // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_read -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                              // SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_lock;                                       // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_lock -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                  // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_write;                                      // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_write -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                 // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> SysSigProc_JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                               // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                               // SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                       // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                         // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                            // SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                             // SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                            // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                    // SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                      // SysSigProc_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                      // cmd_mux_002:src_valid -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                                       // cmd_mux_002:src_data -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                      // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [21:0] cmd_mux_002_src_channel;                                                                    // cmd_mux_002:src_channel -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                              // cmd_mux_002:src_startofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                // cmd_mux_002:src_endofpacket -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdata;                                 // Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_readdata -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_readdata
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_waitrequest;                              // Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_waitrequest -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_waitrequest
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_debugaccess;                              // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_debugaccess -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_debugaccess
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_address;                                  // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_address -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_byteenable;                               // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_byteenable -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_byteenable
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_read;                                     // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_read -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_read
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdatavalid;                            // Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_readdatavalid -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_lock;                                     // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_lock -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_writedata;                                // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_writedata -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_writedata
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_write;                                    // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_write -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_burstcount;                               // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:m0_burstcount -> Mailbox_AudioToSigProc_avmm_msg_receiver_translator:uav_burstcount
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_valid;                             // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_source_valid -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [112:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_data;                              // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_source_data -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_ready;                             // Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:in_ready -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_source_ready
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_startofpacket;                     // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_source_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_endofpacket;                       // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_source_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:out_valid -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_sink_valid
	wire  [112:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:out_data -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_sink_data
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_sink_ready -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // Mailbox_AudioToSigProc_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                      // cmd_mux_003:src_valid -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                                       // cmd_mux_003:src_data -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                      // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [21:0] cmd_mux_003_src_channel;                                                                    // cmd_mux_003:src_channel -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                              // cmd_mux_003:src_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                // cmd_mux_003:src_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:cp_endofpacket
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdata;                                   // Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_readdata -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_readdata
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_waitrequest;                                // Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_waitrequest -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_waitrequest
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_debugaccess;                                // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_debugaccess -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_debugaccess
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_address;                                    // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_address -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_address
	wire    [3:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_byteenable;                                 // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_byteenable -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_byteenable
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_read;                                       // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_read -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_read
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdatavalid;                              // Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_readdatavalid -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_readdatavalid
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_lock;                                       // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_lock -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_writedata;                                  // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_writedata -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_writedata
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_write;                                      // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_write -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_write
	wire    [2:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_burstcount;                                 // Mailbox_SigProcToAudio_avmm_msg_sender_agent:m0_burstcount -> Mailbox_SigProcToAudio_avmm_msg_sender_translator:uav_burstcount
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_valid;                               // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_source_valid -> Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [112:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_data;                                // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_source_data -> Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_ready;                               // Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:in_ready -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_source_ready
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_startofpacket;                       // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_source_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_endofpacket;                         // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_source_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:out_valid -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_sink_valid
	wire  [112:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_data;                             // Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:out_data -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_sink_data
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_sink_ready -> Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // Mailbox_SigProcToAudio_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                      // cmd_mux_004:src_valid -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_valid
	wire  [111:0] cmd_mux_004_src_data;                                                                       // cmd_mux_004:src_data -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                      // Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [21:0] cmd_mux_004_src_channel;                                                                    // cmd_mux_004:src_channel -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                              // cmd_mux_004:src_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                // cmd_mux_004:src_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] syssigproc_performance_counter_control_slave_agent_m0_readdata;                             // SysSigProc_Performance_Counter_control_slave_translator:uav_readdata -> SysSigProc_Performance_Counter_control_slave_agent:m0_readdata
	wire          syssigproc_performance_counter_control_slave_agent_m0_waitrequest;                          // SysSigProc_Performance_Counter_control_slave_translator:uav_waitrequest -> SysSigProc_Performance_Counter_control_slave_agent:m0_waitrequest
	wire          syssigproc_performance_counter_control_slave_agent_m0_debugaccess;                          // SysSigProc_Performance_Counter_control_slave_agent:m0_debugaccess -> SysSigProc_Performance_Counter_control_slave_translator:uav_debugaccess
	wire   [31:0] syssigproc_performance_counter_control_slave_agent_m0_address;                              // SysSigProc_Performance_Counter_control_slave_agent:m0_address -> SysSigProc_Performance_Counter_control_slave_translator:uav_address
	wire    [3:0] syssigproc_performance_counter_control_slave_agent_m0_byteenable;                           // SysSigProc_Performance_Counter_control_slave_agent:m0_byteenable -> SysSigProc_Performance_Counter_control_slave_translator:uav_byteenable
	wire          syssigproc_performance_counter_control_slave_agent_m0_read;                                 // SysSigProc_Performance_Counter_control_slave_agent:m0_read -> SysSigProc_Performance_Counter_control_slave_translator:uav_read
	wire          syssigproc_performance_counter_control_slave_agent_m0_readdatavalid;                        // SysSigProc_Performance_Counter_control_slave_translator:uav_readdatavalid -> SysSigProc_Performance_Counter_control_slave_agent:m0_readdatavalid
	wire          syssigproc_performance_counter_control_slave_agent_m0_lock;                                 // SysSigProc_Performance_Counter_control_slave_agent:m0_lock -> SysSigProc_Performance_Counter_control_slave_translator:uav_lock
	wire   [31:0] syssigproc_performance_counter_control_slave_agent_m0_writedata;                            // SysSigProc_Performance_Counter_control_slave_agent:m0_writedata -> SysSigProc_Performance_Counter_control_slave_translator:uav_writedata
	wire          syssigproc_performance_counter_control_slave_agent_m0_write;                                // SysSigProc_Performance_Counter_control_slave_agent:m0_write -> SysSigProc_Performance_Counter_control_slave_translator:uav_write
	wire    [2:0] syssigproc_performance_counter_control_slave_agent_m0_burstcount;                           // SysSigProc_Performance_Counter_control_slave_agent:m0_burstcount -> SysSigProc_Performance_Counter_control_slave_translator:uav_burstcount
	wire          syssigproc_performance_counter_control_slave_agent_rf_source_valid;                         // SysSigProc_Performance_Counter_control_slave_agent:rf_source_valid -> SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] syssigproc_performance_counter_control_slave_agent_rf_source_data;                          // SysSigProc_Performance_Counter_control_slave_agent:rf_source_data -> SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:in_data
	wire          syssigproc_performance_counter_control_slave_agent_rf_source_ready;                         // SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:in_ready -> SysSigProc_Performance_Counter_control_slave_agent:rf_source_ready
	wire          syssigproc_performance_counter_control_slave_agent_rf_source_startofpacket;                 // SysSigProc_Performance_Counter_control_slave_agent:rf_source_startofpacket -> SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire          syssigproc_performance_counter_control_slave_agent_rf_source_endofpacket;                   // SysSigProc_Performance_Counter_control_slave_agent:rf_source_endofpacket -> SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire          syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_valid;                      // SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:out_valid -> SysSigProc_Performance_Counter_control_slave_agent:rf_sink_valid
	wire  [112:0] syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_data;                       // SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:out_data -> SysSigProc_Performance_Counter_control_slave_agent:rf_sink_data
	wire          syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_ready;                      // SysSigProc_Performance_Counter_control_slave_agent:rf_sink_ready -> SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:out_ready
	wire          syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;              // SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:out_startofpacket -> SysSigProc_Performance_Counter_control_slave_agent:rf_sink_startofpacket
	wire          syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;                // SysSigProc_Performance_Counter_control_slave_agent_rsp_fifo:out_endofpacket -> SysSigProc_Performance_Counter_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                      // cmd_mux_005:src_valid -> SysSigProc_Performance_Counter_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                                       // cmd_mux_005:src_data -> SysSigProc_Performance_Counter_control_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                      // SysSigProc_Performance_Counter_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [21:0] cmd_mux_005_src_channel;                                                                    // cmd_mux_005:src_channel -> SysSigProc_Performance_Counter_control_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                              // cmd_mux_005:src_startofpacket -> SysSigProc_Performance_Counter_control_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                // cmd_mux_005:src_endofpacket -> SysSigProc_Performance_Counter_control_slave_agent:cp_endofpacket
	wire   [31:0] syssigproc_nios_ii_debug_mem_slave_agent_m0_readdata;                                       // SysSigProc_NIOS_II_debug_mem_slave_translator:uav_readdata -> SysSigProc_NIOS_II_debug_mem_slave_agent:m0_readdata
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_waitrequest;                                    // SysSigProc_NIOS_II_debug_mem_slave_translator:uav_waitrequest -> SysSigProc_NIOS_II_debug_mem_slave_agent:m0_waitrequest
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_debugaccess;                                    // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_debugaccess -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] syssigproc_nios_ii_debug_mem_slave_agent_m0_address;                                        // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_address -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_address
	wire    [3:0] syssigproc_nios_ii_debug_mem_slave_agent_m0_byteenable;                                     // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_byteenable -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_byteenable
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_read;                                           // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_read -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_read
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_readdatavalid;                                  // SysSigProc_NIOS_II_debug_mem_slave_translator:uav_readdatavalid -> SysSigProc_NIOS_II_debug_mem_slave_agent:m0_readdatavalid
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_lock;                                           // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_lock -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_lock
	wire   [31:0] syssigproc_nios_ii_debug_mem_slave_agent_m0_writedata;                                      // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_writedata -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_writedata
	wire          syssigproc_nios_ii_debug_mem_slave_agent_m0_write;                                          // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_write -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_write
	wire    [2:0] syssigproc_nios_ii_debug_mem_slave_agent_m0_burstcount;                                     // SysSigProc_NIOS_II_debug_mem_slave_agent:m0_burstcount -> SysSigProc_NIOS_II_debug_mem_slave_translator:uav_burstcount
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rf_source_valid;                                   // SysSigProc_NIOS_II_debug_mem_slave_agent:rf_source_valid -> SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] syssigproc_nios_ii_debug_mem_slave_agent_rf_source_data;                                    // SysSigProc_NIOS_II_debug_mem_slave_agent:rf_source_data -> SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_data
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rf_source_ready;                                   // SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_ready -> SysSigProc_NIOS_II_debug_mem_slave_agent:rf_source_ready
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rf_source_startofpacket;                           // SysSigProc_NIOS_II_debug_mem_slave_agent:rf_source_startofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rf_source_endofpacket;                             // SysSigProc_NIOS_II_debug_mem_slave_agent:rf_source_endofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid;                                // SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_valid -> SysSigProc_NIOS_II_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data;                                 // SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_data -> SysSigProc_NIOS_II_debug_mem_slave_agent:rf_sink_data
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready;                                // SysSigProc_NIOS_II_debug_mem_slave_agent:rf_sink_ready -> SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                        // SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent:rf_sink_startofpacket
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                          // SysSigProc_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                      // cmd_mux_006:src_valid -> SysSigProc_NIOS_II_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                                       // cmd_mux_006:src_data -> SysSigProc_NIOS_II_debug_mem_slave_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                      // SysSigProc_NIOS_II_debug_mem_slave_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [21:0] cmd_mux_006_src_channel;                                                                    // cmd_mux_006:src_channel -> SysSigProc_NIOS_II_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                              // cmd_mux_006:src_startofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                // cmd_mux_006:src_endofpacket -> SysSigProc_NIOS_II_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] syssigproc_onchip_memory_s1_agent_m0_readdata;                                              // SysSigProc_Onchip_Memory_s1_translator:uav_readdata -> SysSigProc_Onchip_Memory_s1_agent:m0_readdata
	wire          syssigproc_onchip_memory_s1_agent_m0_waitrequest;                                           // SysSigProc_Onchip_Memory_s1_translator:uav_waitrequest -> SysSigProc_Onchip_Memory_s1_agent:m0_waitrequest
	wire          syssigproc_onchip_memory_s1_agent_m0_debugaccess;                                           // SysSigProc_Onchip_Memory_s1_agent:m0_debugaccess -> SysSigProc_Onchip_Memory_s1_translator:uav_debugaccess
	wire   [31:0] syssigproc_onchip_memory_s1_agent_m0_address;                                               // SysSigProc_Onchip_Memory_s1_agent:m0_address -> SysSigProc_Onchip_Memory_s1_translator:uav_address
	wire    [3:0] syssigproc_onchip_memory_s1_agent_m0_byteenable;                                            // SysSigProc_Onchip_Memory_s1_agent:m0_byteenable -> SysSigProc_Onchip_Memory_s1_translator:uav_byteenable
	wire          syssigproc_onchip_memory_s1_agent_m0_read;                                                  // SysSigProc_Onchip_Memory_s1_agent:m0_read -> SysSigProc_Onchip_Memory_s1_translator:uav_read
	wire          syssigproc_onchip_memory_s1_agent_m0_readdatavalid;                                         // SysSigProc_Onchip_Memory_s1_translator:uav_readdatavalid -> SysSigProc_Onchip_Memory_s1_agent:m0_readdatavalid
	wire          syssigproc_onchip_memory_s1_agent_m0_lock;                                                  // SysSigProc_Onchip_Memory_s1_agent:m0_lock -> SysSigProc_Onchip_Memory_s1_translator:uav_lock
	wire   [31:0] syssigproc_onchip_memory_s1_agent_m0_writedata;                                             // SysSigProc_Onchip_Memory_s1_agent:m0_writedata -> SysSigProc_Onchip_Memory_s1_translator:uav_writedata
	wire          syssigproc_onchip_memory_s1_agent_m0_write;                                                 // SysSigProc_Onchip_Memory_s1_agent:m0_write -> SysSigProc_Onchip_Memory_s1_translator:uav_write
	wire    [2:0] syssigproc_onchip_memory_s1_agent_m0_burstcount;                                            // SysSigProc_Onchip_Memory_s1_agent:m0_burstcount -> SysSigProc_Onchip_Memory_s1_translator:uav_burstcount
	wire          syssigproc_onchip_memory_s1_agent_rf_source_valid;                                          // SysSigProc_Onchip_Memory_s1_agent:rf_source_valid -> SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:in_valid
	wire  [112:0] syssigproc_onchip_memory_s1_agent_rf_source_data;                                           // SysSigProc_Onchip_Memory_s1_agent:rf_source_data -> SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:in_data
	wire          syssigproc_onchip_memory_s1_agent_rf_source_ready;                                          // SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:in_ready -> SysSigProc_Onchip_Memory_s1_agent:rf_source_ready
	wire          syssigproc_onchip_memory_s1_agent_rf_source_startofpacket;                                  // SysSigProc_Onchip_Memory_s1_agent:rf_source_startofpacket -> SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          syssigproc_onchip_memory_s1_agent_rf_source_endofpacket;                                    // SysSigProc_Onchip_Memory_s1_agent:rf_source_endofpacket -> SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          syssigproc_onchip_memory_s1_agent_rsp_fifo_out_valid;                                       // SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:out_valid -> SysSigProc_Onchip_Memory_s1_agent:rf_sink_valid
	wire  [112:0] syssigproc_onchip_memory_s1_agent_rsp_fifo_out_data;                                        // SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:out_data -> SysSigProc_Onchip_Memory_s1_agent:rf_sink_data
	wire          syssigproc_onchip_memory_s1_agent_rsp_fifo_out_ready;                                       // SysSigProc_Onchip_Memory_s1_agent:rf_sink_ready -> SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:out_ready
	wire          syssigproc_onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                               // SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:out_startofpacket -> SysSigProc_Onchip_Memory_s1_agent:rf_sink_startofpacket
	wire          syssigproc_onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                 // SysSigProc_Onchip_Memory_s1_agent_rsp_fifo:out_endofpacket -> SysSigProc_Onchip_Memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                      // cmd_mux_007:src_valid -> SysSigProc_Onchip_Memory_s1_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                                       // cmd_mux_007:src_data -> SysSigProc_Onchip_Memory_s1_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                      // SysSigProc_Onchip_Memory_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [21:0] cmd_mux_007_src_channel;                                                                    // cmd_mux_007:src_channel -> SysSigProc_Onchip_Memory_s1_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                              // cmd_mux_007:src_startofpacket -> SysSigProc_Onchip_Memory_s1_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                // cmd_mux_007:src_endofpacket -> SysSigProc_Onchip_Memory_s1_agent:cp_endofpacket
	wire   [31:0] pio_leds_shared_s1_agent_m0_readdata;                                                       // PIO_LEDs_Shared_s1_translator:uav_readdata -> PIO_LEDs_Shared_s1_agent:m0_readdata
	wire          pio_leds_shared_s1_agent_m0_waitrequest;                                                    // PIO_LEDs_Shared_s1_translator:uav_waitrequest -> PIO_LEDs_Shared_s1_agent:m0_waitrequest
	wire          pio_leds_shared_s1_agent_m0_debugaccess;                                                    // PIO_LEDs_Shared_s1_agent:m0_debugaccess -> PIO_LEDs_Shared_s1_translator:uav_debugaccess
	wire   [31:0] pio_leds_shared_s1_agent_m0_address;                                                        // PIO_LEDs_Shared_s1_agent:m0_address -> PIO_LEDs_Shared_s1_translator:uav_address
	wire    [3:0] pio_leds_shared_s1_agent_m0_byteenable;                                                     // PIO_LEDs_Shared_s1_agent:m0_byteenable -> PIO_LEDs_Shared_s1_translator:uav_byteenable
	wire          pio_leds_shared_s1_agent_m0_read;                                                           // PIO_LEDs_Shared_s1_agent:m0_read -> PIO_LEDs_Shared_s1_translator:uav_read
	wire          pio_leds_shared_s1_agent_m0_readdatavalid;                                                  // PIO_LEDs_Shared_s1_translator:uav_readdatavalid -> PIO_LEDs_Shared_s1_agent:m0_readdatavalid
	wire          pio_leds_shared_s1_agent_m0_lock;                                                           // PIO_LEDs_Shared_s1_agent:m0_lock -> PIO_LEDs_Shared_s1_translator:uav_lock
	wire   [31:0] pio_leds_shared_s1_agent_m0_writedata;                                                      // PIO_LEDs_Shared_s1_agent:m0_writedata -> PIO_LEDs_Shared_s1_translator:uav_writedata
	wire          pio_leds_shared_s1_agent_m0_write;                                                          // PIO_LEDs_Shared_s1_agent:m0_write -> PIO_LEDs_Shared_s1_translator:uav_write
	wire    [2:0] pio_leds_shared_s1_agent_m0_burstcount;                                                     // PIO_LEDs_Shared_s1_agent:m0_burstcount -> PIO_LEDs_Shared_s1_translator:uav_burstcount
	wire          pio_leds_shared_s1_agent_rf_source_valid;                                                   // PIO_LEDs_Shared_s1_agent:rf_source_valid -> PIO_LEDs_Shared_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_leds_shared_s1_agent_rf_source_data;                                                    // PIO_LEDs_Shared_s1_agent:rf_source_data -> PIO_LEDs_Shared_s1_agent_rsp_fifo:in_data
	wire          pio_leds_shared_s1_agent_rf_source_ready;                                                   // PIO_LEDs_Shared_s1_agent_rsp_fifo:in_ready -> PIO_LEDs_Shared_s1_agent:rf_source_ready
	wire          pio_leds_shared_s1_agent_rf_source_startofpacket;                                           // PIO_LEDs_Shared_s1_agent:rf_source_startofpacket -> PIO_LEDs_Shared_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_leds_shared_s1_agent_rf_source_endofpacket;                                             // PIO_LEDs_Shared_s1_agent:rf_source_endofpacket -> PIO_LEDs_Shared_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_leds_shared_s1_agent_rsp_fifo_out_valid;                                                // PIO_LEDs_Shared_s1_agent_rsp_fifo:out_valid -> PIO_LEDs_Shared_s1_agent:rf_sink_valid
	wire  [112:0] pio_leds_shared_s1_agent_rsp_fifo_out_data;                                                 // PIO_LEDs_Shared_s1_agent_rsp_fifo:out_data -> PIO_LEDs_Shared_s1_agent:rf_sink_data
	wire          pio_leds_shared_s1_agent_rsp_fifo_out_ready;                                                // PIO_LEDs_Shared_s1_agent:rf_sink_ready -> PIO_LEDs_Shared_s1_agent_rsp_fifo:out_ready
	wire          pio_leds_shared_s1_agent_rsp_fifo_out_startofpacket;                                        // PIO_LEDs_Shared_s1_agent_rsp_fifo:out_startofpacket -> PIO_LEDs_Shared_s1_agent:rf_sink_startofpacket
	wire          pio_leds_shared_s1_agent_rsp_fifo_out_endofpacket;                                          // PIO_LEDs_Shared_s1_agent_rsp_fifo:out_endofpacket -> PIO_LEDs_Shared_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                      // cmd_mux_008:src_valid -> PIO_LEDs_Shared_s1_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                                       // cmd_mux_008:src_data -> PIO_LEDs_Shared_s1_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                      // PIO_LEDs_Shared_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [21:0] cmd_mux_008_src_channel;                                                                    // cmd_mux_008:src_channel -> PIO_LEDs_Shared_s1_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                              // cmd_mux_008:src_startofpacket -> PIO_LEDs_Shared_s1_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                // cmd_mux_008:src_endofpacket -> PIO_LEDs_Shared_s1_agent:cp_endofpacket
	wire   [31:0] pio_switches_s1_agent_m0_readdata;                                                          // PIO_Switches_s1_translator:uav_readdata -> PIO_Switches_s1_agent:m0_readdata
	wire          pio_switches_s1_agent_m0_waitrequest;                                                       // PIO_Switches_s1_translator:uav_waitrequest -> PIO_Switches_s1_agent:m0_waitrequest
	wire          pio_switches_s1_agent_m0_debugaccess;                                                       // PIO_Switches_s1_agent:m0_debugaccess -> PIO_Switches_s1_translator:uav_debugaccess
	wire   [31:0] pio_switches_s1_agent_m0_address;                                                           // PIO_Switches_s1_agent:m0_address -> PIO_Switches_s1_translator:uav_address
	wire    [3:0] pio_switches_s1_agent_m0_byteenable;                                                        // PIO_Switches_s1_agent:m0_byteenable -> PIO_Switches_s1_translator:uav_byteenable
	wire          pio_switches_s1_agent_m0_read;                                                              // PIO_Switches_s1_agent:m0_read -> PIO_Switches_s1_translator:uav_read
	wire          pio_switches_s1_agent_m0_readdatavalid;                                                     // PIO_Switches_s1_translator:uav_readdatavalid -> PIO_Switches_s1_agent:m0_readdatavalid
	wire          pio_switches_s1_agent_m0_lock;                                                              // PIO_Switches_s1_agent:m0_lock -> PIO_Switches_s1_translator:uav_lock
	wire   [31:0] pio_switches_s1_agent_m0_writedata;                                                         // PIO_Switches_s1_agent:m0_writedata -> PIO_Switches_s1_translator:uav_writedata
	wire          pio_switches_s1_agent_m0_write;                                                             // PIO_Switches_s1_agent:m0_write -> PIO_Switches_s1_translator:uav_write
	wire    [2:0] pio_switches_s1_agent_m0_burstcount;                                                        // PIO_Switches_s1_agent:m0_burstcount -> PIO_Switches_s1_translator:uav_burstcount
	wire          pio_switches_s1_agent_rf_source_valid;                                                      // PIO_Switches_s1_agent:rf_source_valid -> PIO_Switches_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_switches_s1_agent_rf_source_data;                                                       // PIO_Switches_s1_agent:rf_source_data -> PIO_Switches_s1_agent_rsp_fifo:in_data
	wire          pio_switches_s1_agent_rf_source_ready;                                                      // PIO_Switches_s1_agent_rsp_fifo:in_ready -> PIO_Switches_s1_agent:rf_source_ready
	wire          pio_switches_s1_agent_rf_source_startofpacket;                                              // PIO_Switches_s1_agent:rf_source_startofpacket -> PIO_Switches_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_switches_s1_agent_rf_source_endofpacket;                                                // PIO_Switches_s1_agent:rf_source_endofpacket -> PIO_Switches_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_switches_s1_agent_rsp_fifo_out_valid;                                                   // PIO_Switches_s1_agent_rsp_fifo:out_valid -> PIO_Switches_s1_agent:rf_sink_valid
	wire  [112:0] pio_switches_s1_agent_rsp_fifo_out_data;                                                    // PIO_Switches_s1_agent_rsp_fifo:out_data -> PIO_Switches_s1_agent:rf_sink_data
	wire          pio_switches_s1_agent_rsp_fifo_out_ready;                                                   // PIO_Switches_s1_agent:rf_sink_ready -> PIO_Switches_s1_agent_rsp_fifo:out_ready
	wire          pio_switches_s1_agent_rsp_fifo_out_startofpacket;                                           // PIO_Switches_s1_agent_rsp_fifo:out_startofpacket -> PIO_Switches_s1_agent:rf_sink_startofpacket
	wire          pio_switches_s1_agent_rsp_fifo_out_endofpacket;                                             // PIO_Switches_s1_agent_rsp_fifo:out_endofpacket -> PIO_Switches_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                      // cmd_mux_009:src_valid -> PIO_Switches_s1_agent:cp_valid
	wire  [111:0] cmd_mux_009_src_data;                                                                       // cmd_mux_009:src_data -> PIO_Switches_s1_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                      // PIO_Switches_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [21:0] cmd_mux_009_src_channel;                                                                    // cmd_mux_009:src_channel -> PIO_Switches_s1_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                              // cmd_mux_009:src_startofpacket -> PIO_Switches_s1_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                // cmd_mux_009:src_endofpacket -> PIO_Switches_s1_agent:cp_endofpacket
	wire   [31:0] pio_1st_7seg_s1_agent_m0_readdata;                                                          // PIO_1st_7seg_s1_translator:uav_readdata -> PIO_1st_7seg_s1_agent:m0_readdata
	wire          pio_1st_7seg_s1_agent_m0_waitrequest;                                                       // PIO_1st_7seg_s1_translator:uav_waitrequest -> PIO_1st_7seg_s1_agent:m0_waitrequest
	wire          pio_1st_7seg_s1_agent_m0_debugaccess;                                                       // PIO_1st_7seg_s1_agent:m0_debugaccess -> PIO_1st_7seg_s1_translator:uav_debugaccess
	wire   [31:0] pio_1st_7seg_s1_agent_m0_address;                                                           // PIO_1st_7seg_s1_agent:m0_address -> PIO_1st_7seg_s1_translator:uav_address
	wire    [3:0] pio_1st_7seg_s1_agent_m0_byteenable;                                                        // PIO_1st_7seg_s1_agent:m0_byteenable -> PIO_1st_7seg_s1_translator:uav_byteenable
	wire          pio_1st_7seg_s1_agent_m0_read;                                                              // PIO_1st_7seg_s1_agent:m0_read -> PIO_1st_7seg_s1_translator:uav_read
	wire          pio_1st_7seg_s1_agent_m0_readdatavalid;                                                     // PIO_1st_7seg_s1_translator:uav_readdatavalid -> PIO_1st_7seg_s1_agent:m0_readdatavalid
	wire          pio_1st_7seg_s1_agent_m0_lock;                                                              // PIO_1st_7seg_s1_agent:m0_lock -> PIO_1st_7seg_s1_translator:uav_lock
	wire   [31:0] pio_1st_7seg_s1_agent_m0_writedata;                                                         // PIO_1st_7seg_s1_agent:m0_writedata -> PIO_1st_7seg_s1_translator:uav_writedata
	wire          pio_1st_7seg_s1_agent_m0_write;                                                             // PIO_1st_7seg_s1_agent:m0_write -> PIO_1st_7seg_s1_translator:uav_write
	wire    [2:0] pio_1st_7seg_s1_agent_m0_burstcount;                                                        // PIO_1st_7seg_s1_agent:m0_burstcount -> PIO_1st_7seg_s1_translator:uav_burstcount
	wire          pio_1st_7seg_s1_agent_rf_source_valid;                                                      // PIO_1st_7seg_s1_agent:rf_source_valid -> PIO_1st_7seg_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_1st_7seg_s1_agent_rf_source_data;                                                       // PIO_1st_7seg_s1_agent:rf_source_data -> PIO_1st_7seg_s1_agent_rsp_fifo:in_data
	wire          pio_1st_7seg_s1_agent_rf_source_ready;                                                      // PIO_1st_7seg_s1_agent_rsp_fifo:in_ready -> PIO_1st_7seg_s1_agent:rf_source_ready
	wire          pio_1st_7seg_s1_agent_rf_source_startofpacket;                                              // PIO_1st_7seg_s1_agent:rf_source_startofpacket -> PIO_1st_7seg_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_1st_7seg_s1_agent_rf_source_endofpacket;                                                // PIO_1st_7seg_s1_agent:rf_source_endofpacket -> PIO_1st_7seg_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_1st_7seg_s1_agent_rsp_fifo_out_valid;                                                   // PIO_1st_7seg_s1_agent_rsp_fifo:out_valid -> PIO_1st_7seg_s1_agent:rf_sink_valid
	wire  [112:0] pio_1st_7seg_s1_agent_rsp_fifo_out_data;                                                    // PIO_1st_7seg_s1_agent_rsp_fifo:out_data -> PIO_1st_7seg_s1_agent:rf_sink_data
	wire          pio_1st_7seg_s1_agent_rsp_fifo_out_ready;                                                   // PIO_1st_7seg_s1_agent:rf_sink_ready -> PIO_1st_7seg_s1_agent_rsp_fifo:out_ready
	wire          pio_1st_7seg_s1_agent_rsp_fifo_out_startofpacket;                                           // PIO_1st_7seg_s1_agent_rsp_fifo:out_startofpacket -> PIO_1st_7seg_s1_agent:rf_sink_startofpacket
	wire          pio_1st_7seg_s1_agent_rsp_fifo_out_endofpacket;                                             // PIO_1st_7seg_s1_agent_rsp_fifo:out_endofpacket -> PIO_1st_7seg_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                      // cmd_mux_010:src_valid -> PIO_1st_7seg_s1_agent:cp_valid
	wire  [111:0] cmd_mux_010_src_data;                                                                       // cmd_mux_010:src_data -> PIO_1st_7seg_s1_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                      // PIO_1st_7seg_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [21:0] cmd_mux_010_src_channel;                                                                    // cmd_mux_010:src_channel -> PIO_1st_7seg_s1_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                              // cmd_mux_010:src_startofpacket -> PIO_1st_7seg_s1_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                // cmd_mux_010:src_endofpacket -> PIO_1st_7seg_s1_agent:cp_endofpacket
	wire   [31:0] pio_2nd_7seg_s1_agent_m0_readdata;                                                          // PIO_2nd_7seg_s1_translator:uav_readdata -> PIO_2nd_7seg_s1_agent:m0_readdata
	wire          pio_2nd_7seg_s1_agent_m0_waitrequest;                                                       // PIO_2nd_7seg_s1_translator:uav_waitrequest -> PIO_2nd_7seg_s1_agent:m0_waitrequest
	wire          pio_2nd_7seg_s1_agent_m0_debugaccess;                                                       // PIO_2nd_7seg_s1_agent:m0_debugaccess -> PIO_2nd_7seg_s1_translator:uav_debugaccess
	wire   [31:0] pio_2nd_7seg_s1_agent_m0_address;                                                           // PIO_2nd_7seg_s1_agent:m0_address -> PIO_2nd_7seg_s1_translator:uav_address
	wire    [3:0] pio_2nd_7seg_s1_agent_m0_byteenable;                                                        // PIO_2nd_7seg_s1_agent:m0_byteenable -> PIO_2nd_7seg_s1_translator:uav_byteenable
	wire          pio_2nd_7seg_s1_agent_m0_read;                                                              // PIO_2nd_7seg_s1_agent:m0_read -> PIO_2nd_7seg_s1_translator:uav_read
	wire          pio_2nd_7seg_s1_agent_m0_readdatavalid;                                                     // PIO_2nd_7seg_s1_translator:uav_readdatavalid -> PIO_2nd_7seg_s1_agent:m0_readdatavalid
	wire          pio_2nd_7seg_s1_agent_m0_lock;                                                              // PIO_2nd_7seg_s1_agent:m0_lock -> PIO_2nd_7seg_s1_translator:uav_lock
	wire   [31:0] pio_2nd_7seg_s1_agent_m0_writedata;                                                         // PIO_2nd_7seg_s1_agent:m0_writedata -> PIO_2nd_7seg_s1_translator:uav_writedata
	wire          pio_2nd_7seg_s1_agent_m0_write;                                                             // PIO_2nd_7seg_s1_agent:m0_write -> PIO_2nd_7seg_s1_translator:uav_write
	wire    [2:0] pio_2nd_7seg_s1_agent_m0_burstcount;                                                        // PIO_2nd_7seg_s1_agent:m0_burstcount -> PIO_2nd_7seg_s1_translator:uav_burstcount
	wire          pio_2nd_7seg_s1_agent_rf_source_valid;                                                      // PIO_2nd_7seg_s1_agent:rf_source_valid -> PIO_2nd_7seg_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_2nd_7seg_s1_agent_rf_source_data;                                                       // PIO_2nd_7seg_s1_agent:rf_source_data -> PIO_2nd_7seg_s1_agent_rsp_fifo:in_data
	wire          pio_2nd_7seg_s1_agent_rf_source_ready;                                                      // PIO_2nd_7seg_s1_agent_rsp_fifo:in_ready -> PIO_2nd_7seg_s1_agent:rf_source_ready
	wire          pio_2nd_7seg_s1_agent_rf_source_startofpacket;                                              // PIO_2nd_7seg_s1_agent:rf_source_startofpacket -> PIO_2nd_7seg_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_2nd_7seg_s1_agent_rf_source_endofpacket;                                                // PIO_2nd_7seg_s1_agent:rf_source_endofpacket -> PIO_2nd_7seg_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_2nd_7seg_s1_agent_rsp_fifo_out_valid;                                                   // PIO_2nd_7seg_s1_agent_rsp_fifo:out_valid -> PIO_2nd_7seg_s1_agent:rf_sink_valid
	wire  [112:0] pio_2nd_7seg_s1_agent_rsp_fifo_out_data;                                                    // PIO_2nd_7seg_s1_agent_rsp_fifo:out_data -> PIO_2nd_7seg_s1_agent:rf_sink_data
	wire          pio_2nd_7seg_s1_agent_rsp_fifo_out_ready;                                                   // PIO_2nd_7seg_s1_agent:rf_sink_ready -> PIO_2nd_7seg_s1_agent_rsp_fifo:out_ready
	wire          pio_2nd_7seg_s1_agent_rsp_fifo_out_startofpacket;                                           // PIO_2nd_7seg_s1_agent_rsp_fifo:out_startofpacket -> PIO_2nd_7seg_s1_agent:rf_sink_startofpacket
	wire          pio_2nd_7seg_s1_agent_rsp_fifo_out_endofpacket;                                             // PIO_2nd_7seg_s1_agent_rsp_fifo:out_endofpacket -> PIO_2nd_7seg_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                      // cmd_mux_011:src_valid -> PIO_2nd_7seg_s1_agent:cp_valid
	wire  [111:0] cmd_mux_011_src_data;                                                                       // cmd_mux_011:src_data -> PIO_2nd_7seg_s1_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                      // PIO_2nd_7seg_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [21:0] cmd_mux_011_src_channel;                                                                    // cmd_mux_011:src_channel -> PIO_2nd_7seg_s1_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                              // cmd_mux_011:src_startofpacket -> PIO_2nd_7seg_s1_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                // cmd_mux_011:src_endofpacket -> PIO_2nd_7seg_s1_agent:cp_endofpacket
	wire   [31:0] pio_3rd_7seg_s1_agent_m0_readdata;                                                          // PIO_3rd_7seg_s1_translator:uav_readdata -> PIO_3rd_7seg_s1_agent:m0_readdata
	wire          pio_3rd_7seg_s1_agent_m0_waitrequest;                                                       // PIO_3rd_7seg_s1_translator:uav_waitrequest -> PIO_3rd_7seg_s1_agent:m0_waitrequest
	wire          pio_3rd_7seg_s1_agent_m0_debugaccess;                                                       // PIO_3rd_7seg_s1_agent:m0_debugaccess -> PIO_3rd_7seg_s1_translator:uav_debugaccess
	wire   [31:0] pio_3rd_7seg_s1_agent_m0_address;                                                           // PIO_3rd_7seg_s1_agent:m0_address -> PIO_3rd_7seg_s1_translator:uav_address
	wire    [3:0] pio_3rd_7seg_s1_agent_m0_byteenable;                                                        // PIO_3rd_7seg_s1_agent:m0_byteenable -> PIO_3rd_7seg_s1_translator:uav_byteenable
	wire          pio_3rd_7seg_s1_agent_m0_read;                                                              // PIO_3rd_7seg_s1_agent:m0_read -> PIO_3rd_7seg_s1_translator:uav_read
	wire          pio_3rd_7seg_s1_agent_m0_readdatavalid;                                                     // PIO_3rd_7seg_s1_translator:uav_readdatavalid -> PIO_3rd_7seg_s1_agent:m0_readdatavalid
	wire          pio_3rd_7seg_s1_agent_m0_lock;                                                              // PIO_3rd_7seg_s1_agent:m0_lock -> PIO_3rd_7seg_s1_translator:uav_lock
	wire   [31:0] pio_3rd_7seg_s1_agent_m0_writedata;                                                         // PIO_3rd_7seg_s1_agent:m0_writedata -> PIO_3rd_7seg_s1_translator:uav_writedata
	wire          pio_3rd_7seg_s1_agent_m0_write;                                                             // PIO_3rd_7seg_s1_agent:m0_write -> PIO_3rd_7seg_s1_translator:uav_write
	wire    [2:0] pio_3rd_7seg_s1_agent_m0_burstcount;                                                        // PIO_3rd_7seg_s1_agent:m0_burstcount -> PIO_3rd_7seg_s1_translator:uav_burstcount
	wire          pio_3rd_7seg_s1_agent_rf_source_valid;                                                      // PIO_3rd_7seg_s1_agent:rf_source_valid -> PIO_3rd_7seg_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_3rd_7seg_s1_agent_rf_source_data;                                                       // PIO_3rd_7seg_s1_agent:rf_source_data -> PIO_3rd_7seg_s1_agent_rsp_fifo:in_data
	wire          pio_3rd_7seg_s1_agent_rf_source_ready;                                                      // PIO_3rd_7seg_s1_agent_rsp_fifo:in_ready -> PIO_3rd_7seg_s1_agent:rf_source_ready
	wire          pio_3rd_7seg_s1_agent_rf_source_startofpacket;                                              // PIO_3rd_7seg_s1_agent:rf_source_startofpacket -> PIO_3rd_7seg_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_3rd_7seg_s1_agent_rf_source_endofpacket;                                                // PIO_3rd_7seg_s1_agent:rf_source_endofpacket -> PIO_3rd_7seg_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_3rd_7seg_s1_agent_rsp_fifo_out_valid;                                                   // PIO_3rd_7seg_s1_agent_rsp_fifo:out_valid -> PIO_3rd_7seg_s1_agent:rf_sink_valid
	wire  [112:0] pio_3rd_7seg_s1_agent_rsp_fifo_out_data;                                                    // PIO_3rd_7seg_s1_agent_rsp_fifo:out_data -> PIO_3rd_7seg_s1_agent:rf_sink_data
	wire          pio_3rd_7seg_s1_agent_rsp_fifo_out_ready;                                                   // PIO_3rd_7seg_s1_agent:rf_sink_ready -> PIO_3rd_7seg_s1_agent_rsp_fifo:out_ready
	wire          pio_3rd_7seg_s1_agent_rsp_fifo_out_startofpacket;                                           // PIO_3rd_7seg_s1_agent_rsp_fifo:out_startofpacket -> PIO_3rd_7seg_s1_agent:rf_sink_startofpacket
	wire          pio_3rd_7seg_s1_agent_rsp_fifo_out_endofpacket;                                             // PIO_3rd_7seg_s1_agent_rsp_fifo:out_endofpacket -> PIO_3rd_7seg_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                      // cmd_mux_012:src_valid -> PIO_3rd_7seg_s1_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                                       // cmd_mux_012:src_data -> PIO_3rd_7seg_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                      // PIO_3rd_7seg_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [21:0] cmd_mux_012_src_channel;                                                                    // cmd_mux_012:src_channel -> PIO_3rd_7seg_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                              // cmd_mux_012:src_startofpacket -> PIO_3rd_7seg_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                // cmd_mux_012:src_endofpacket -> PIO_3rd_7seg_s1_agent:cp_endofpacket
	wire   [31:0] pio_debug_s1_agent_m0_readdata;                                                             // PIO_Debug_s1_translator:uav_readdata -> PIO_Debug_s1_agent:m0_readdata
	wire          pio_debug_s1_agent_m0_waitrequest;                                                          // PIO_Debug_s1_translator:uav_waitrequest -> PIO_Debug_s1_agent:m0_waitrequest
	wire          pio_debug_s1_agent_m0_debugaccess;                                                          // PIO_Debug_s1_agent:m0_debugaccess -> PIO_Debug_s1_translator:uav_debugaccess
	wire   [31:0] pio_debug_s1_agent_m0_address;                                                              // PIO_Debug_s1_agent:m0_address -> PIO_Debug_s1_translator:uav_address
	wire    [3:0] pio_debug_s1_agent_m0_byteenable;                                                           // PIO_Debug_s1_agent:m0_byteenable -> PIO_Debug_s1_translator:uav_byteenable
	wire          pio_debug_s1_agent_m0_read;                                                                 // PIO_Debug_s1_agent:m0_read -> PIO_Debug_s1_translator:uav_read
	wire          pio_debug_s1_agent_m0_readdatavalid;                                                        // PIO_Debug_s1_translator:uav_readdatavalid -> PIO_Debug_s1_agent:m0_readdatavalid
	wire          pio_debug_s1_agent_m0_lock;                                                                 // PIO_Debug_s1_agent:m0_lock -> PIO_Debug_s1_translator:uav_lock
	wire   [31:0] pio_debug_s1_agent_m0_writedata;                                                            // PIO_Debug_s1_agent:m0_writedata -> PIO_Debug_s1_translator:uav_writedata
	wire          pio_debug_s1_agent_m0_write;                                                                // PIO_Debug_s1_agent:m0_write -> PIO_Debug_s1_translator:uav_write
	wire    [2:0] pio_debug_s1_agent_m0_burstcount;                                                           // PIO_Debug_s1_agent:m0_burstcount -> PIO_Debug_s1_translator:uav_burstcount
	wire          pio_debug_s1_agent_rf_source_valid;                                                         // PIO_Debug_s1_agent:rf_source_valid -> PIO_Debug_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_debug_s1_agent_rf_source_data;                                                          // PIO_Debug_s1_agent:rf_source_data -> PIO_Debug_s1_agent_rsp_fifo:in_data
	wire          pio_debug_s1_agent_rf_source_ready;                                                         // PIO_Debug_s1_agent_rsp_fifo:in_ready -> PIO_Debug_s1_agent:rf_source_ready
	wire          pio_debug_s1_agent_rf_source_startofpacket;                                                 // PIO_Debug_s1_agent:rf_source_startofpacket -> PIO_Debug_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_debug_s1_agent_rf_source_endofpacket;                                                   // PIO_Debug_s1_agent:rf_source_endofpacket -> PIO_Debug_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_debug_s1_agent_rsp_fifo_out_valid;                                                      // PIO_Debug_s1_agent_rsp_fifo:out_valid -> PIO_Debug_s1_agent:rf_sink_valid
	wire  [112:0] pio_debug_s1_agent_rsp_fifo_out_data;                                                       // PIO_Debug_s1_agent_rsp_fifo:out_data -> PIO_Debug_s1_agent:rf_sink_data
	wire          pio_debug_s1_agent_rsp_fifo_out_ready;                                                      // PIO_Debug_s1_agent:rf_sink_ready -> PIO_Debug_s1_agent_rsp_fifo:out_ready
	wire          pio_debug_s1_agent_rsp_fifo_out_startofpacket;                                              // PIO_Debug_s1_agent_rsp_fifo:out_startofpacket -> PIO_Debug_s1_agent:rf_sink_startofpacket
	wire          pio_debug_s1_agent_rsp_fifo_out_endofpacket;                                                // PIO_Debug_s1_agent_rsp_fifo:out_endofpacket -> PIO_Debug_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                      // cmd_mux_013:src_valid -> PIO_Debug_s1_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                                       // cmd_mux_013:src_data -> PIO_Debug_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                      // PIO_Debug_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [21:0] cmd_mux_013_src_channel;                                                                    // cmd_mux_013:src_channel -> PIO_Debug_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                              // cmd_mux_013:src_startofpacket -> PIO_Debug_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                // cmd_mux_013:src_endofpacket -> PIO_Debug_s1_agent:cp_endofpacket
	wire   [31:0] sysaudio_audio_core_avalon_audio_slave_agent_m0_readdata;                                   // SysAudio_Audio_Core_avalon_audio_slave_translator:uav_readdata -> SysAudio_Audio_Core_avalon_audio_slave_agent:m0_readdata
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_waitrequest;                                // SysAudio_Audio_Core_avalon_audio_slave_translator:uav_waitrequest -> SysAudio_Audio_Core_avalon_audio_slave_agent:m0_waitrequest
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_debugaccess;                                // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_debugaccess -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_debugaccess
	wire   [31:0] sysaudio_audio_core_avalon_audio_slave_agent_m0_address;                                    // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_address -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_address
	wire    [3:0] sysaudio_audio_core_avalon_audio_slave_agent_m0_byteenable;                                 // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_byteenable -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_byteenable
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_read;                                       // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_read -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_read
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_readdatavalid;                              // SysAudio_Audio_Core_avalon_audio_slave_translator:uav_readdatavalid -> SysAudio_Audio_Core_avalon_audio_slave_agent:m0_readdatavalid
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_lock;                                       // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_lock -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_lock
	wire   [31:0] sysaudio_audio_core_avalon_audio_slave_agent_m0_writedata;                                  // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_writedata -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_writedata
	wire          sysaudio_audio_core_avalon_audio_slave_agent_m0_write;                                      // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_write -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_write
	wire    [2:0] sysaudio_audio_core_avalon_audio_slave_agent_m0_burstcount;                                 // SysAudio_Audio_Core_avalon_audio_slave_agent:m0_burstcount -> SysAudio_Audio_Core_avalon_audio_slave_translator:uav_burstcount
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rf_source_valid;                               // SysAudio_Audio_Core_avalon_audio_slave_agent:rf_source_valid -> SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_audio_core_avalon_audio_slave_agent_rf_source_data;                                // SysAudio_Audio_Core_avalon_audio_slave_agent:rf_source_data -> SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:in_data
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rf_source_ready;                               // SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:in_ready -> SysAudio_Audio_Core_avalon_audio_slave_agent:rf_source_ready
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rf_source_startofpacket;                       // SysAudio_Audio_Core_avalon_audio_slave_agent:rf_source_startofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rf_source_endofpacket;                         // SysAudio_Audio_Core_avalon_audio_slave_agent:rf_source_endofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_valid;                            // SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:out_valid -> SysAudio_Audio_Core_avalon_audio_slave_agent:rf_sink_valid
	wire  [112:0] sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_data;                             // SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:out_data -> SysAudio_Audio_Core_avalon_audio_slave_agent:rf_sink_data
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_ready;                            // SysAudio_Audio_Core_avalon_audio_slave_agent:rf_sink_ready -> SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:out_ready
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_startofpacket;                    // SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:out_startofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent:rf_sink_startofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_endofpacket;                      // SysAudio_Audio_Core_avalon_audio_slave_agent_rsp_fifo:out_endofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent:rf_sink_endofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_valid;                          // SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_src_valid -> SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_data;                           // SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_src_data -> SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:in_data
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_ready;                          // SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:in_ready -> SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                                      // cmd_mux_014:src_valid -> SysAudio_Audio_Core_avalon_audio_slave_agent:cp_valid
	wire  [111:0] cmd_mux_014_src_data;                                                                       // cmd_mux_014:src_data -> SysAudio_Audio_Core_avalon_audio_slave_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                      // SysAudio_Audio_Core_avalon_audio_slave_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [21:0] cmd_mux_014_src_channel;                                                                    // cmd_mux_014:src_channel -> SysAudio_Audio_Core_avalon_audio_slave_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                              // cmd_mux_014:src_startofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                // cmd_mux_014:src_endofpacket -> SysAudio_Audio_Core_avalon_audio_slave_agent:cp_endofpacket
	wire   [31:0] sysaudio_av_config_avalon_av_config_slave_agent_m0_readdata;                                // SysAudio_AV_Config_avalon_av_config_slave_translator:uav_readdata -> SysAudio_AV_Config_avalon_av_config_slave_agent:m0_readdata
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_waitrequest;                             // SysAudio_AV_Config_avalon_av_config_slave_translator:uav_waitrequest -> SysAudio_AV_Config_avalon_av_config_slave_agent:m0_waitrequest
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_debugaccess;                             // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_debugaccess -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_debugaccess
	wire   [31:0] sysaudio_av_config_avalon_av_config_slave_agent_m0_address;                                 // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_address -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_address
	wire    [3:0] sysaudio_av_config_avalon_av_config_slave_agent_m0_byteenable;                              // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_byteenable -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_byteenable
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_read;                                    // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_read -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_read
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_readdatavalid;                           // SysAudio_AV_Config_avalon_av_config_slave_translator:uav_readdatavalid -> SysAudio_AV_Config_avalon_av_config_slave_agent:m0_readdatavalid
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_lock;                                    // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_lock -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_lock
	wire   [31:0] sysaudio_av_config_avalon_av_config_slave_agent_m0_writedata;                               // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_writedata -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_writedata
	wire          sysaudio_av_config_avalon_av_config_slave_agent_m0_write;                                   // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_write -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_write
	wire    [2:0] sysaudio_av_config_avalon_av_config_slave_agent_m0_burstcount;                              // SysAudio_AV_Config_avalon_av_config_slave_agent:m0_burstcount -> SysAudio_AV_Config_avalon_av_config_slave_translator:uav_burstcount
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rf_source_valid;                            // SysAudio_AV_Config_avalon_av_config_slave_agent:rf_source_valid -> SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_av_config_avalon_av_config_slave_agent_rf_source_data;                             // SysAudio_AV_Config_avalon_av_config_slave_agent:rf_source_data -> SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_data
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rf_source_ready;                            // SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_ready -> SysAudio_AV_Config_avalon_av_config_slave_agent:rf_source_ready
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rf_source_startofpacket;                    // SysAudio_AV_Config_avalon_av_config_slave_agent:rf_source_startofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rf_source_endofpacket;                      // SysAudio_AV_Config_avalon_av_config_slave_agent:rf_source_endofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid;                         // SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_valid -> SysAudio_AV_Config_avalon_av_config_slave_agent:rf_sink_valid
	wire  [112:0] sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_data;                          // SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_data -> SysAudio_AV_Config_avalon_av_config_slave_agent:rf_sink_data
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready;                         // SysAudio_AV_Config_avalon_av_config_slave_agent:rf_sink_ready -> SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_ready
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket;                 // SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_startofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent:rf_sink_startofpacket
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket;                   // SysAudio_AV_Config_avalon_av_config_slave_agent_rsp_fifo:out_endofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                      // cmd_mux_015:src_valid -> SysAudio_AV_Config_avalon_av_config_slave_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                                       // cmd_mux_015:src_data -> SysAudio_AV_Config_avalon_av_config_slave_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                      // SysAudio_AV_Config_avalon_av_config_slave_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [21:0] cmd_mux_015_src_channel;                                                                    // cmd_mux_015:src_channel -> SysAudio_AV_Config_avalon_av_config_slave_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                              // cmd_mux_015:src_startofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                // cmd_mux_015:src_endofpacket -> SysAudio_AV_Config_avalon_av_config_slave_agent:cp_endofpacket
	wire   [31:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                     // SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_readdata -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_readdata
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                  // SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_waitrequest -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_waitrequest
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                  // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_debugaccess -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_address;                                      // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_address -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_address
	wire    [3:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                   // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_byteenable -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_byteenable
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_read;                                         // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_read -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_read
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                // SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_readdatavalid -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_readdatavalid
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_lock;                                         // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_lock -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                    // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_writedata -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_writedata
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_write;                                        // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_write -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_write
	wire    [2:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                   // SysAudio_JTAG_UART_avalon_jtag_slave_agent:m0_burstcount -> SysAudio_JTAG_UART_avalon_jtag_slave_translator:uav_burstcount
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                 // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_source_valid -> SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                  // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_source_data -> SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                 // SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_ready -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_source_ready
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                         // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_source_startofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                           // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_source_endofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                              // SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_valid -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                               // SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_data -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_sink_data
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                              // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_sink_ready -> SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                      // SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                        // SysAudio_JTAG_UART_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                                      // cmd_mux_016:src_valid -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_016_src_data;                                                                       // cmd_mux_016:src_data -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                                      // SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [21:0] cmd_mux_016_src_channel;                                                                    // cmd_mux_016:src_channel -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                              // cmd_mux_016:src_startofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                                // cmd_mux_016:src_endofpacket -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:cp_endofpacket
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdata;                                 // Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_readdata -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_readdata
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_waitrequest;                              // Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_waitrequest -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_waitrequest
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_debugaccess;                              // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_debugaccess -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_debugaccess
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_address;                                  // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_address -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_byteenable;                               // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_byteenable -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_byteenable
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_read;                                     // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_read -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_read
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdatavalid;                            // Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_readdatavalid -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_lock;                                     // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_lock -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_writedata;                                // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_writedata -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_writedata
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_write;                                    // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_write -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_burstcount;                               // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:m0_burstcount -> Mailbox_SigProcToAudio_avmm_msg_receiver_translator:uav_burstcount
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_valid;                             // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_source_valid -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire  [112:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_data;                              // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_source_data -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_ready;                             // Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:in_ready -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_source_ready
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_startofpacket;                     // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_source_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_endofpacket;                       // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_source_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_valid;                          // Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:out_valid -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_sink_valid
	wire  [112:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_data;                           // Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:out_data -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_sink_data
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_ready;                          // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_sink_ready -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket;                  // Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;                    // Mailbox_SigProcToAudio_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire          cmd_mux_017_src_valid;                                                                      // cmd_mux_017:src_valid -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_valid
	wire  [111:0] cmd_mux_017_src_data;                                                                       // cmd_mux_017:src_data -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                                      // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [21:0] cmd_mux_017_src_channel;                                                                    // cmd_mux_017:src_channel -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                              // cmd_mux_017:src_startofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                                // cmd_mux_017:src_endofpacket -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:cp_endofpacket
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdata;                                   // Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_readdata -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_readdata
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_waitrequest;                                // Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_waitrequest -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_waitrequest
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_debugaccess;                                // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_debugaccess -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_debugaccess
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_sender_agent_m0_address;                                    // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_address -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_address
	wire    [3:0] mailbox_audiotosigproc_avmm_msg_sender_agent_m0_byteenable;                                 // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_byteenable -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_byteenable
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_read;                                       // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_read -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_read
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdatavalid;                              // Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_readdatavalid -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_readdatavalid
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_lock;                                       // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_lock -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mailbox_audiotosigproc_avmm_msg_sender_agent_m0_writedata;                                  // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_writedata -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_writedata
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_m0_write;                                      // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_write -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_write
	wire    [2:0] mailbox_audiotosigproc_avmm_msg_sender_agent_m0_burstcount;                                 // Mailbox_AudioToSigProc_avmm_msg_sender_agent:m0_burstcount -> Mailbox_AudioToSigProc_avmm_msg_sender_translator:uav_burstcount
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_valid;                               // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_source_valid -> Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire  [112:0] mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_data;                                // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_source_data -> Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_ready;                               // Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:in_ready -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_source_ready
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_startofpacket;                       // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_source_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_endofpacket;                         // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_source_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_valid;                            // Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:out_valid -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_sink_valid
	wire  [112:0] mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_data;                             // Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:out_data -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_sink_data
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_ready;                            // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_sink_ready -> Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;                    // Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;                      // Mailbox_AudioToSigProc_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rf_sink_endofpacket
	wire          cmd_mux_018_src_valid;                                                                      // cmd_mux_018:src_valid -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_valid
	wire  [111:0] cmd_mux_018_src_data;                                                                       // cmd_mux_018:src_data -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                                      // Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [21:0] cmd_mux_018_src_channel;                                                                    // cmd_mux_018:src_channel -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                              // cmd_mux_018:src_startofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                                // cmd_mux_018:src_endofpacket -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:cp_endofpacket
	wire   [31:0] sysaudio_performance_counter_control_slave_agent_m0_readdata;                               // SysAudio_Performance_Counter_control_slave_translator:uav_readdata -> SysAudio_Performance_Counter_control_slave_agent:m0_readdata
	wire          sysaudio_performance_counter_control_slave_agent_m0_waitrequest;                            // SysAudio_Performance_Counter_control_slave_translator:uav_waitrequest -> SysAudio_Performance_Counter_control_slave_agent:m0_waitrequest
	wire          sysaudio_performance_counter_control_slave_agent_m0_debugaccess;                            // SysAudio_Performance_Counter_control_slave_agent:m0_debugaccess -> SysAudio_Performance_Counter_control_slave_translator:uav_debugaccess
	wire   [31:0] sysaudio_performance_counter_control_slave_agent_m0_address;                                // SysAudio_Performance_Counter_control_slave_agent:m0_address -> SysAudio_Performance_Counter_control_slave_translator:uav_address
	wire    [3:0] sysaudio_performance_counter_control_slave_agent_m0_byteenable;                             // SysAudio_Performance_Counter_control_slave_agent:m0_byteenable -> SysAudio_Performance_Counter_control_slave_translator:uav_byteenable
	wire          sysaudio_performance_counter_control_slave_agent_m0_read;                                   // SysAudio_Performance_Counter_control_slave_agent:m0_read -> SysAudio_Performance_Counter_control_slave_translator:uav_read
	wire          sysaudio_performance_counter_control_slave_agent_m0_readdatavalid;                          // SysAudio_Performance_Counter_control_slave_translator:uav_readdatavalid -> SysAudio_Performance_Counter_control_slave_agent:m0_readdatavalid
	wire          sysaudio_performance_counter_control_slave_agent_m0_lock;                                   // SysAudio_Performance_Counter_control_slave_agent:m0_lock -> SysAudio_Performance_Counter_control_slave_translator:uav_lock
	wire   [31:0] sysaudio_performance_counter_control_slave_agent_m0_writedata;                              // SysAudio_Performance_Counter_control_slave_agent:m0_writedata -> SysAudio_Performance_Counter_control_slave_translator:uav_writedata
	wire          sysaudio_performance_counter_control_slave_agent_m0_write;                                  // SysAudio_Performance_Counter_control_slave_agent:m0_write -> SysAudio_Performance_Counter_control_slave_translator:uav_write
	wire    [2:0] sysaudio_performance_counter_control_slave_agent_m0_burstcount;                             // SysAudio_Performance_Counter_control_slave_agent:m0_burstcount -> SysAudio_Performance_Counter_control_slave_translator:uav_burstcount
	wire          sysaudio_performance_counter_control_slave_agent_rf_source_valid;                           // SysAudio_Performance_Counter_control_slave_agent:rf_source_valid -> SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_performance_counter_control_slave_agent_rf_source_data;                            // SysAudio_Performance_Counter_control_slave_agent:rf_source_data -> SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:in_data
	wire          sysaudio_performance_counter_control_slave_agent_rf_source_ready;                           // SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:in_ready -> SysAudio_Performance_Counter_control_slave_agent:rf_source_ready
	wire          sysaudio_performance_counter_control_slave_agent_rf_source_startofpacket;                   // SysAudio_Performance_Counter_control_slave_agent:rf_source_startofpacket -> SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_performance_counter_control_slave_agent_rf_source_endofpacket;                     // SysAudio_Performance_Counter_control_slave_agent:rf_source_endofpacket -> SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_valid;                        // SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:out_valid -> SysAudio_Performance_Counter_control_slave_agent:rf_sink_valid
	wire  [112:0] sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_data;                         // SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:out_data -> SysAudio_Performance_Counter_control_slave_agent:rf_sink_data
	wire          sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_ready;                        // SysAudio_Performance_Counter_control_slave_agent:rf_sink_ready -> SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:out_ready
	wire          sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket;                // SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:out_startofpacket -> SysAudio_Performance_Counter_control_slave_agent:rf_sink_startofpacket
	wire          sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket;                  // SysAudio_Performance_Counter_control_slave_agent_rsp_fifo:out_endofpacket -> SysAudio_Performance_Counter_control_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_019_src_valid;                                                                      // cmd_mux_019:src_valid -> SysAudio_Performance_Counter_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_019_src_data;                                                                       // cmd_mux_019:src_data -> SysAudio_Performance_Counter_control_slave_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                                      // SysAudio_Performance_Counter_control_slave_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [21:0] cmd_mux_019_src_channel;                                                                    // cmd_mux_019:src_channel -> SysAudio_Performance_Counter_control_slave_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                              // cmd_mux_019:src_startofpacket -> SysAudio_Performance_Counter_control_slave_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                                // cmd_mux_019:src_endofpacket -> SysAudio_Performance_Counter_control_slave_agent:cp_endofpacket
	wire   [31:0] sysaudio_nios_ii_debug_mem_slave_agent_m0_readdata;                                         // SysAudio_NIOS_II_debug_mem_slave_translator:uav_readdata -> SysAudio_NIOS_II_debug_mem_slave_agent:m0_readdata
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_waitrequest;                                      // SysAudio_NIOS_II_debug_mem_slave_translator:uav_waitrequest -> SysAudio_NIOS_II_debug_mem_slave_agent:m0_waitrequest
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_debugaccess;                                      // SysAudio_NIOS_II_debug_mem_slave_agent:m0_debugaccess -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] sysaudio_nios_ii_debug_mem_slave_agent_m0_address;                                          // SysAudio_NIOS_II_debug_mem_slave_agent:m0_address -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_address
	wire    [3:0] sysaudio_nios_ii_debug_mem_slave_agent_m0_byteenable;                                       // SysAudio_NIOS_II_debug_mem_slave_agent:m0_byteenable -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_byteenable
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_read;                                             // SysAudio_NIOS_II_debug_mem_slave_agent:m0_read -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_read
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_readdatavalid;                                    // SysAudio_NIOS_II_debug_mem_slave_translator:uav_readdatavalid -> SysAudio_NIOS_II_debug_mem_slave_agent:m0_readdatavalid
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_lock;                                             // SysAudio_NIOS_II_debug_mem_slave_agent:m0_lock -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_lock
	wire   [31:0] sysaudio_nios_ii_debug_mem_slave_agent_m0_writedata;                                        // SysAudio_NIOS_II_debug_mem_slave_agent:m0_writedata -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_writedata
	wire          sysaudio_nios_ii_debug_mem_slave_agent_m0_write;                                            // SysAudio_NIOS_II_debug_mem_slave_agent:m0_write -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_write
	wire    [2:0] sysaudio_nios_ii_debug_mem_slave_agent_m0_burstcount;                                       // SysAudio_NIOS_II_debug_mem_slave_agent:m0_burstcount -> SysAudio_NIOS_II_debug_mem_slave_translator:uav_burstcount
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rf_source_valid;                                     // SysAudio_NIOS_II_debug_mem_slave_agent:rf_source_valid -> SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_nios_ii_debug_mem_slave_agent_rf_source_data;                                      // SysAudio_NIOS_II_debug_mem_slave_agent:rf_source_data -> SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_data
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rf_source_ready;                                     // SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_ready -> SysAudio_NIOS_II_debug_mem_slave_agent:rf_source_ready
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rf_source_startofpacket;                             // SysAudio_NIOS_II_debug_mem_slave_agent:rf_source_startofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rf_source_endofpacket;                               // SysAudio_NIOS_II_debug_mem_slave_agent:rf_source_endofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid;                                  // SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_valid -> SysAudio_NIOS_II_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data;                                   // SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_data -> SysAudio_NIOS_II_debug_mem_slave_agent:rf_sink_data
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready;                                  // SysAudio_NIOS_II_debug_mem_slave_agent:rf_sink_ready -> SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                          // SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent:rf_sink_startofpacket
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                            // SysAudio_NIOS_II_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_020_src_valid;                                                                      // cmd_mux_020:src_valid -> SysAudio_NIOS_II_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_020_src_data;                                                                       // cmd_mux_020:src_data -> SysAudio_NIOS_II_debug_mem_slave_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                                      // SysAudio_NIOS_II_debug_mem_slave_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [21:0] cmd_mux_020_src_channel;                                                                    // cmd_mux_020:src_channel -> SysAudio_NIOS_II_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                              // cmd_mux_020:src_startofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                                // cmd_mux_020:src_endofpacket -> SysAudio_NIOS_II_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] sysaudio_onchip_memory_s1_agent_m0_readdata;                                                // SysAudio_Onchip_Memory_s1_translator:uav_readdata -> SysAudio_Onchip_Memory_s1_agent:m0_readdata
	wire          sysaudio_onchip_memory_s1_agent_m0_waitrequest;                                             // SysAudio_Onchip_Memory_s1_translator:uav_waitrequest -> SysAudio_Onchip_Memory_s1_agent:m0_waitrequest
	wire          sysaudio_onchip_memory_s1_agent_m0_debugaccess;                                             // SysAudio_Onchip_Memory_s1_agent:m0_debugaccess -> SysAudio_Onchip_Memory_s1_translator:uav_debugaccess
	wire   [31:0] sysaudio_onchip_memory_s1_agent_m0_address;                                                 // SysAudio_Onchip_Memory_s1_agent:m0_address -> SysAudio_Onchip_Memory_s1_translator:uav_address
	wire    [3:0] sysaudio_onchip_memory_s1_agent_m0_byteenable;                                              // SysAudio_Onchip_Memory_s1_agent:m0_byteenable -> SysAudio_Onchip_Memory_s1_translator:uav_byteenable
	wire          sysaudio_onchip_memory_s1_agent_m0_read;                                                    // SysAudio_Onchip_Memory_s1_agent:m0_read -> SysAudio_Onchip_Memory_s1_translator:uav_read
	wire          sysaudio_onchip_memory_s1_agent_m0_readdatavalid;                                           // SysAudio_Onchip_Memory_s1_translator:uav_readdatavalid -> SysAudio_Onchip_Memory_s1_agent:m0_readdatavalid
	wire          sysaudio_onchip_memory_s1_agent_m0_lock;                                                    // SysAudio_Onchip_Memory_s1_agent:m0_lock -> SysAudio_Onchip_Memory_s1_translator:uav_lock
	wire   [31:0] sysaudio_onchip_memory_s1_agent_m0_writedata;                                               // SysAudio_Onchip_Memory_s1_agent:m0_writedata -> SysAudio_Onchip_Memory_s1_translator:uav_writedata
	wire          sysaudio_onchip_memory_s1_agent_m0_write;                                                   // SysAudio_Onchip_Memory_s1_agent:m0_write -> SysAudio_Onchip_Memory_s1_translator:uav_write
	wire    [2:0] sysaudio_onchip_memory_s1_agent_m0_burstcount;                                              // SysAudio_Onchip_Memory_s1_agent:m0_burstcount -> SysAudio_Onchip_Memory_s1_translator:uav_burstcount
	wire          sysaudio_onchip_memory_s1_agent_rf_source_valid;                                            // SysAudio_Onchip_Memory_s1_agent:rf_source_valid -> SysAudio_Onchip_Memory_s1_agent_rsp_fifo:in_valid
	wire  [112:0] sysaudio_onchip_memory_s1_agent_rf_source_data;                                             // SysAudio_Onchip_Memory_s1_agent:rf_source_data -> SysAudio_Onchip_Memory_s1_agent_rsp_fifo:in_data
	wire          sysaudio_onchip_memory_s1_agent_rf_source_ready;                                            // SysAudio_Onchip_Memory_s1_agent_rsp_fifo:in_ready -> SysAudio_Onchip_Memory_s1_agent:rf_source_ready
	wire          sysaudio_onchip_memory_s1_agent_rf_source_startofpacket;                                    // SysAudio_Onchip_Memory_s1_agent:rf_source_startofpacket -> SysAudio_Onchip_Memory_s1_agent_rsp_fifo:in_startofpacket
	wire          sysaudio_onchip_memory_s1_agent_rf_source_endofpacket;                                      // SysAudio_Onchip_Memory_s1_agent:rf_source_endofpacket -> SysAudio_Onchip_Memory_s1_agent_rsp_fifo:in_endofpacket
	wire          sysaudio_onchip_memory_s1_agent_rsp_fifo_out_valid;                                         // SysAudio_Onchip_Memory_s1_agent_rsp_fifo:out_valid -> SysAudio_Onchip_Memory_s1_agent:rf_sink_valid
	wire  [112:0] sysaudio_onchip_memory_s1_agent_rsp_fifo_out_data;                                          // SysAudio_Onchip_Memory_s1_agent_rsp_fifo:out_data -> SysAudio_Onchip_Memory_s1_agent:rf_sink_data
	wire          sysaudio_onchip_memory_s1_agent_rsp_fifo_out_ready;                                         // SysAudio_Onchip_Memory_s1_agent:rf_sink_ready -> SysAudio_Onchip_Memory_s1_agent_rsp_fifo:out_ready
	wire          sysaudio_onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                                 // SysAudio_Onchip_Memory_s1_agent_rsp_fifo:out_startofpacket -> SysAudio_Onchip_Memory_s1_agent:rf_sink_startofpacket
	wire          sysaudio_onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                   // SysAudio_Onchip_Memory_s1_agent_rsp_fifo:out_endofpacket -> SysAudio_Onchip_Memory_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_021_src_valid;                                                                      // cmd_mux_021:src_valid -> SysAudio_Onchip_Memory_s1_agent:cp_valid
	wire  [111:0] cmd_mux_021_src_data;                                                                       // cmd_mux_021:src_data -> SysAudio_Onchip_Memory_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                                      // SysAudio_Onchip_Memory_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [21:0] cmd_mux_021_src_channel;                                                                    // cmd_mux_021:src_channel -> SysAudio_Onchip_Memory_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                              // cmd_mux_021:src_startofpacket -> SysAudio_Onchip_Memory_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                                // cmd_mux_021:src_endofpacket -> SysAudio_Onchip_Memory_s1_agent:cp_endofpacket
	wire          syssigproc_hw_accelerator_avalon_master_agent_cp_valid;                                     // SysSigProc_HW_accelerator_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] syssigproc_hw_accelerator_avalon_master_agent_cp_data;                                      // SysSigProc_HW_accelerator_avalon_master_agent:cp_data -> router:sink_data
	wire          syssigproc_hw_accelerator_avalon_master_agent_cp_ready;                                     // router:sink_ready -> SysSigProc_HW_accelerator_avalon_master_agent:cp_ready
	wire          syssigproc_hw_accelerator_avalon_master_agent_cp_startofpacket;                             // SysSigProc_HW_accelerator_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          syssigproc_hw_accelerator_avalon_master_agent_cp_endofpacket;                               // SysSigProc_HW_accelerator_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                           // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                                            // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                           // cmd_demux:sink_ready -> router:src_ready
	wire   [21:0] router_src_channel;                                                                         // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                   // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                     // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          sysaudio_nios_ii_data_master_agent_cp_valid;                                                // SysAudio_NIOS_II_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] sysaudio_nios_ii_data_master_agent_cp_data;                                                 // SysAudio_NIOS_II_data_master_agent:cp_data -> router_001:sink_data
	wire          sysaudio_nios_ii_data_master_agent_cp_ready;                                                // router_001:sink_ready -> SysAudio_NIOS_II_data_master_agent:cp_ready
	wire          sysaudio_nios_ii_data_master_agent_cp_startofpacket;                                        // SysAudio_NIOS_II_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          sysaudio_nios_ii_data_master_agent_cp_endofpacket;                                          // SysAudio_NIOS_II_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          syssigproc_nios_ii_data_master_agent_cp_valid;                                              // SysSigProc_NIOS_II_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] syssigproc_nios_ii_data_master_agent_cp_data;                                               // SysSigProc_NIOS_II_data_master_agent:cp_data -> router_002:sink_data
	wire          syssigproc_nios_ii_data_master_agent_cp_ready;                                              // router_002:sink_ready -> SysSigProc_NIOS_II_data_master_agent:cp_ready
	wire          syssigproc_nios_ii_data_master_agent_cp_startofpacket;                                      // SysSigProc_NIOS_II_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          syssigproc_nios_ii_data_master_agent_cp_endofpacket;                                        // SysSigProc_NIOS_II_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          sysaudio_nios_ii_instruction_master_agent_cp_valid;                                         // SysAudio_NIOS_II_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [111:0] sysaudio_nios_ii_instruction_master_agent_cp_data;                                          // SysAudio_NIOS_II_instruction_master_agent:cp_data -> router_003:sink_data
	wire          sysaudio_nios_ii_instruction_master_agent_cp_ready;                                         // router_003:sink_ready -> SysAudio_NIOS_II_instruction_master_agent:cp_ready
	wire          sysaudio_nios_ii_instruction_master_agent_cp_startofpacket;                                 // SysAudio_NIOS_II_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          sysaudio_nios_ii_instruction_master_agent_cp_endofpacket;                                   // SysAudio_NIOS_II_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          syssigproc_nios_ii_instruction_master_agent_cp_valid;                                       // SysSigProc_NIOS_II_instruction_master_agent:cp_valid -> router_004:sink_valid
	wire  [111:0] syssigproc_nios_ii_instruction_master_agent_cp_data;                                        // SysSigProc_NIOS_II_instruction_master_agent:cp_data -> router_004:sink_data
	wire          syssigproc_nios_ii_instruction_master_agent_cp_ready;                                       // router_004:sink_ready -> SysSigProc_NIOS_II_instruction_master_agent:cp_ready
	wire          syssigproc_nios_ii_instruction_master_agent_cp_startofpacket;                               // SysSigProc_NIOS_II_instruction_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          syssigproc_nios_ii_instruction_master_agent_cp_endofpacket;                                 // SysSigProc_NIOS_II_instruction_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          sdram_controller_shared_s1_agent_rp_valid;                                                  // SDRAM_Controller_Shared_s1_agent:rp_valid -> router_005:sink_valid
	wire   [93:0] sdram_controller_shared_s1_agent_rp_data;                                                   // SDRAM_Controller_Shared_s1_agent:rp_data -> router_005:sink_data
	wire          sdram_controller_shared_s1_agent_rp_ready;                                                  // router_005:sink_ready -> SDRAM_Controller_Shared_s1_agent:rp_ready
	wire          sdram_controller_shared_s1_agent_rp_startofpacket;                                          // SDRAM_Controller_Shared_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          sdram_controller_shared_s1_agent_rp_endofpacket;                                            // SDRAM_Controller_Shared_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          syssigproc_hw_accelerator_as_agent_rp_valid;                                                // SysSigProc_HW_accelerator_as_agent:rp_valid -> router_006:sink_valid
	wire  [111:0] syssigproc_hw_accelerator_as_agent_rp_data;                                                 // SysSigProc_HW_accelerator_as_agent:rp_data -> router_006:sink_data
	wire          syssigproc_hw_accelerator_as_agent_rp_ready;                                                // router_006:sink_ready -> SysSigProc_HW_accelerator_as_agent:rp_ready
	wire          syssigproc_hw_accelerator_as_agent_rp_startofpacket;                                        // SysSigProc_HW_accelerator_as_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          syssigproc_hw_accelerator_as_agent_rp_endofpacket;                                          // SysSigProc_HW_accelerator_as_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                       // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_006_src_data;                                                                        // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                       // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [21:0] router_006_src_channel;                                                                     // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                               // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                 // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_valid;                                      // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_007:sink_valid
	wire  [111:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_data;                                       // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_007:sink_data
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_ready;                                      // router_007:sink_ready -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                              // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                       // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_007_src_data;                                                                        // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                       // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [21:0] router_007_src_channel;                                                                     // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                               // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                 // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_valid;                                    // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rp_valid -> router_008:sink_valid
	wire  [111:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_data;                                     // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rp_data -> router_008:sink_data
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_ready;                                    // router_008:sink_ready -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rp_ready
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_startofpacket;                            // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_endofpacket;                              // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                       // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_008_src_data;                                                                        // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                       // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [21:0] router_008_src_channel;                                                                     // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                               // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                 // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_valid;                                      // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rp_valid -> router_009:sink_valid
	wire  [111:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_data;                                       // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rp_data -> router_009:sink_data
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_ready;                                      // router_009:sink_ready -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rp_ready
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_startofpacket;                              // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_endofpacket;                                // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                       // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [111:0] router_009_src_data;                                                                        // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                       // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [21:0] router_009_src_channel;                                                                     // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                               // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                 // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          syssigproc_performance_counter_control_slave_agent_rp_valid;                                // SysSigProc_Performance_Counter_control_slave_agent:rp_valid -> router_010:sink_valid
	wire  [111:0] syssigproc_performance_counter_control_slave_agent_rp_data;                                 // SysSigProc_Performance_Counter_control_slave_agent:rp_data -> router_010:sink_data
	wire          syssigproc_performance_counter_control_slave_agent_rp_ready;                                // router_010:sink_ready -> SysSigProc_Performance_Counter_control_slave_agent:rp_ready
	wire          syssigproc_performance_counter_control_slave_agent_rp_startofpacket;                        // SysSigProc_Performance_Counter_control_slave_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          syssigproc_performance_counter_control_slave_agent_rp_endofpacket;                          // SysSigProc_Performance_Counter_control_slave_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                       // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_010_src_data;                                                                        // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                       // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [21:0] router_010_src_channel;                                                                     // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                               // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                 // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rp_valid;                                          // SysSigProc_NIOS_II_debug_mem_slave_agent:rp_valid -> router_011:sink_valid
	wire  [111:0] syssigproc_nios_ii_debug_mem_slave_agent_rp_data;                                           // SysSigProc_NIOS_II_debug_mem_slave_agent:rp_data -> router_011:sink_data
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rp_ready;                                          // router_011:sink_ready -> SysSigProc_NIOS_II_debug_mem_slave_agent:rp_ready
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rp_startofpacket;                                  // SysSigProc_NIOS_II_debug_mem_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rp_endofpacket;                                    // SysSigProc_NIOS_II_debug_mem_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                       // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_011_src_data;                                                                        // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                       // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [21:0] router_011_src_channel;                                                                     // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                               // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                 // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          syssigproc_onchip_memory_s1_agent_rp_valid;                                                 // SysSigProc_Onchip_Memory_s1_agent:rp_valid -> router_012:sink_valid
	wire  [111:0] syssigproc_onchip_memory_s1_agent_rp_data;                                                  // SysSigProc_Onchip_Memory_s1_agent:rp_data -> router_012:sink_data
	wire          syssigproc_onchip_memory_s1_agent_rp_ready;                                                 // router_012:sink_ready -> SysSigProc_Onchip_Memory_s1_agent:rp_ready
	wire          syssigproc_onchip_memory_s1_agent_rp_startofpacket;                                         // SysSigProc_Onchip_Memory_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          syssigproc_onchip_memory_s1_agent_rp_endofpacket;                                           // SysSigProc_Onchip_Memory_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                       // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_012_src_data;                                                                        // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                       // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [21:0] router_012_src_channel;                                                                     // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                               // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                 // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          pio_leds_shared_s1_agent_rp_valid;                                                          // PIO_LEDs_Shared_s1_agent:rp_valid -> router_013:sink_valid
	wire  [111:0] pio_leds_shared_s1_agent_rp_data;                                                           // PIO_LEDs_Shared_s1_agent:rp_data -> router_013:sink_data
	wire          pio_leds_shared_s1_agent_rp_ready;                                                          // router_013:sink_ready -> PIO_LEDs_Shared_s1_agent:rp_ready
	wire          pio_leds_shared_s1_agent_rp_startofpacket;                                                  // PIO_LEDs_Shared_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          pio_leds_shared_s1_agent_rp_endofpacket;                                                    // PIO_LEDs_Shared_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                       // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_013_src_data;                                                                        // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                       // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [21:0] router_013_src_channel;                                                                     // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                               // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                 // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          pio_switches_s1_agent_rp_valid;                                                             // PIO_Switches_s1_agent:rp_valid -> router_014:sink_valid
	wire  [111:0] pio_switches_s1_agent_rp_data;                                                              // PIO_Switches_s1_agent:rp_data -> router_014:sink_data
	wire          pio_switches_s1_agent_rp_ready;                                                             // router_014:sink_ready -> PIO_Switches_s1_agent:rp_ready
	wire          pio_switches_s1_agent_rp_startofpacket;                                                     // PIO_Switches_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          pio_switches_s1_agent_rp_endofpacket;                                                       // PIO_Switches_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                       // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [111:0] router_014_src_data;                                                                        // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                                       // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [21:0] router_014_src_channel;                                                                     // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                               // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                 // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          pio_1st_7seg_s1_agent_rp_valid;                                                             // PIO_1st_7seg_s1_agent:rp_valid -> router_015:sink_valid
	wire  [111:0] pio_1st_7seg_s1_agent_rp_data;                                                              // PIO_1st_7seg_s1_agent:rp_data -> router_015:sink_data
	wire          pio_1st_7seg_s1_agent_rp_ready;                                                             // router_015:sink_ready -> PIO_1st_7seg_s1_agent:rp_ready
	wire          pio_1st_7seg_s1_agent_rp_startofpacket;                                                     // PIO_1st_7seg_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          pio_1st_7seg_s1_agent_rp_endofpacket;                                                       // PIO_1st_7seg_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                       // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [111:0] router_015_src_data;                                                                        // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                                       // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [21:0] router_015_src_channel;                                                                     // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                               // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                 // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          pio_2nd_7seg_s1_agent_rp_valid;                                                             // PIO_2nd_7seg_s1_agent:rp_valid -> router_016:sink_valid
	wire  [111:0] pio_2nd_7seg_s1_agent_rp_data;                                                              // PIO_2nd_7seg_s1_agent:rp_data -> router_016:sink_data
	wire          pio_2nd_7seg_s1_agent_rp_ready;                                                             // router_016:sink_ready -> PIO_2nd_7seg_s1_agent:rp_ready
	wire          pio_2nd_7seg_s1_agent_rp_startofpacket;                                                     // PIO_2nd_7seg_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          pio_2nd_7seg_s1_agent_rp_endofpacket;                                                       // PIO_2nd_7seg_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                       // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [111:0] router_016_src_data;                                                                        // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                                       // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [21:0] router_016_src_channel;                                                                     // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                               // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                 // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          pio_3rd_7seg_s1_agent_rp_valid;                                                             // PIO_3rd_7seg_s1_agent:rp_valid -> router_017:sink_valid
	wire  [111:0] pio_3rd_7seg_s1_agent_rp_data;                                                              // PIO_3rd_7seg_s1_agent:rp_data -> router_017:sink_data
	wire          pio_3rd_7seg_s1_agent_rp_ready;                                                             // router_017:sink_ready -> PIO_3rd_7seg_s1_agent:rp_ready
	wire          pio_3rd_7seg_s1_agent_rp_startofpacket;                                                     // PIO_3rd_7seg_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          pio_3rd_7seg_s1_agent_rp_endofpacket;                                                       // PIO_3rd_7seg_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                       // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_017_src_data;                                                                        // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                                       // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [21:0] router_017_src_channel;                                                                     // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                               // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                 // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          pio_debug_s1_agent_rp_valid;                                                                // PIO_Debug_s1_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] pio_debug_s1_agent_rp_data;                                                                 // PIO_Debug_s1_agent:rp_data -> router_018:sink_data
	wire          pio_debug_s1_agent_rp_ready;                                                                // router_018:sink_ready -> PIO_Debug_s1_agent:rp_ready
	wire          pio_debug_s1_agent_rp_startofpacket;                                                        // PIO_Debug_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          pio_debug_s1_agent_rp_endofpacket;                                                          // PIO_Debug_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                       // router_018:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_018_src_data;                                                                        // router_018:src_data -> rsp_demux_013:sink_data
	wire          router_018_src_ready;                                                                       // rsp_demux_013:sink_ready -> router_018:src_ready
	wire   [21:0] router_018_src_channel;                                                                     // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_startofpacket;                                                               // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                 // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rp_valid;                                      // SysAudio_Audio_Core_avalon_audio_slave_agent:rp_valid -> router_019:sink_valid
	wire  [111:0] sysaudio_audio_core_avalon_audio_slave_agent_rp_data;                                       // SysAudio_Audio_Core_avalon_audio_slave_agent:rp_data -> router_019:sink_data
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rp_ready;                                      // router_019:sink_ready -> SysAudio_Audio_Core_avalon_audio_slave_agent:rp_ready
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rp_startofpacket;                              // SysAudio_Audio_Core_avalon_audio_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rp_endofpacket;                                // SysAudio_Audio_Core_avalon_audio_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                       // router_019:src_valid -> rsp_demux_014:sink_valid
	wire  [111:0] router_019_src_data;                                                                        // router_019:src_data -> rsp_demux_014:sink_data
	wire          router_019_src_ready;                                                                       // rsp_demux_014:sink_ready -> router_019:src_ready
	wire   [21:0] router_019_src_channel;                                                                     // router_019:src_channel -> rsp_demux_014:sink_channel
	wire          router_019_src_startofpacket;                                                               // router_019:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                 // router_019:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rp_valid;                                   // SysAudio_AV_Config_avalon_av_config_slave_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] sysaudio_av_config_avalon_av_config_slave_agent_rp_data;                                    // SysAudio_AV_Config_avalon_av_config_slave_agent:rp_data -> router_020:sink_data
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rp_ready;                                   // router_020:sink_ready -> SysAudio_AV_Config_avalon_av_config_slave_agent:rp_ready
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rp_startofpacket;                           // SysAudio_AV_Config_avalon_av_config_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rp_endofpacket;                             // SysAudio_AV_Config_avalon_av_config_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                       // router_020:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_020_src_data;                                                                        // router_020:src_data -> rsp_demux_015:sink_data
	wire          router_020_src_ready;                                                                       // rsp_demux_015:sink_ready -> router_020:src_ready
	wire   [21:0] router_020_src_channel;                                                                     // router_020:src_channel -> rsp_demux_015:sink_channel
	wire          router_020_src_startofpacket;                                                               // router_020:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                 // router_020:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_valid;                                        // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rp_valid -> router_021:sink_valid
	wire  [111:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_data;                                         // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rp_data -> router_021:sink_data
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_ready;                                        // router_021:sink_ready -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rp_ready
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                  // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                                       // router_021:src_valid -> rsp_demux_016:sink_valid
	wire  [111:0] router_021_src_data;                                                                        // router_021:src_data -> rsp_demux_016:sink_data
	wire          router_021_src_ready;                                                                       // rsp_demux_016:sink_ready -> router_021:src_ready
	wire   [21:0] router_021_src_channel;                                                                     // router_021:src_channel -> rsp_demux_016:sink_channel
	wire          router_021_src_startofpacket;                                                               // router_021:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_021_src_endofpacket;                                                                 // router_021:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_valid;                                    // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rp_valid -> router_022:sink_valid
	wire  [111:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_data;                                     // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rp_data -> router_022:sink_data
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_ready;                                    // router_022:sink_ready -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rp_ready
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_startofpacket;                            // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_endofpacket;                              // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                                       // router_022:src_valid -> rsp_demux_017:sink_valid
	wire  [111:0] router_022_src_data;                                                                        // router_022:src_data -> rsp_demux_017:sink_data
	wire          router_022_src_ready;                                                                       // rsp_demux_017:sink_ready -> router_022:src_ready
	wire   [21:0] router_022_src_channel;                                                                     // router_022:src_channel -> rsp_demux_017:sink_channel
	wire          router_022_src_startofpacket;                                                               // router_022:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_022_src_endofpacket;                                                                 // router_022:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rp_valid;                                      // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rp_valid -> router_023:sink_valid
	wire  [111:0] mailbox_audiotosigproc_avmm_msg_sender_agent_rp_data;                                       // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rp_data -> router_023:sink_data
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rp_ready;                                      // router_023:sink_ready -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rp_ready
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rp_startofpacket;                              // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rp_endofpacket;                                // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                                       // router_023:src_valid -> rsp_demux_018:sink_valid
	wire  [111:0] router_023_src_data;                                                                        // router_023:src_data -> rsp_demux_018:sink_data
	wire          router_023_src_ready;                                                                       // rsp_demux_018:sink_ready -> router_023:src_ready
	wire   [21:0] router_023_src_channel;                                                                     // router_023:src_channel -> rsp_demux_018:sink_channel
	wire          router_023_src_startofpacket;                                                               // router_023:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_023_src_endofpacket;                                                                 // router_023:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          sysaudio_performance_counter_control_slave_agent_rp_valid;                                  // SysAudio_Performance_Counter_control_slave_agent:rp_valid -> router_024:sink_valid
	wire  [111:0] sysaudio_performance_counter_control_slave_agent_rp_data;                                   // SysAudio_Performance_Counter_control_slave_agent:rp_data -> router_024:sink_data
	wire          sysaudio_performance_counter_control_slave_agent_rp_ready;                                  // router_024:sink_ready -> SysAudio_Performance_Counter_control_slave_agent:rp_ready
	wire          sysaudio_performance_counter_control_slave_agent_rp_startofpacket;                          // SysAudio_Performance_Counter_control_slave_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          sysaudio_performance_counter_control_slave_agent_rp_endofpacket;                            // SysAudio_Performance_Counter_control_slave_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                                       // router_024:src_valid -> rsp_demux_019:sink_valid
	wire  [111:0] router_024_src_data;                                                                        // router_024:src_data -> rsp_demux_019:sink_data
	wire          router_024_src_ready;                                                                       // rsp_demux_019:sink_ready -> router_024:src_ready
	wire   [21:0] router_024_src_channel;                                                                     // router_024:src_channel -> rsp_demux_019:sink_channel
	wire          router_024_src_startofpacket;                                                               // router_024:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_024_src_endofpacket;                                                                 // router_024:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rp_valid;                                            // SysAudio_NIOS_II_debug_mem_slave_agent:rp_valid -> router_025:sink_valid
	wire  [111:0] sysaudio_nios_ii_debug_mem_slave_agent_rp_data;                                             // SysAudio_NIOS_II_debug_mem_slave_agent:rp_data -> router_025:sink_data
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rp_ready;                                            // router_025:sink_ready -> SysAudio_NIOS_II_debug_mem_slave_agent:rp_ready
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rp_startofpacket;                                    // SysAudio_NIOS_II_debug_mem_slave_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rp_endofpacket;                                      // SysAudio_NIOS_II_debug_mem_slave_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                                       // router_025:src_valid -> rsp_demux_020:sink_valid
	wire  [111:0] router_025_src_data;                                                                        // router_025:src_data -> rsp_demux_020:sink_data
	wire          router_025_src_ready;                                                                       // rsp_demux_020:sink_ready -> router_025:src_ready
	wire   [21:0] router_025_src_channel;                                                                     // router_025:src_channel -> rsp_demux_020:sink_channel
	wire          router_025_src_startofpacket;                                                               // router_025:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_025_src_endofpacket;                                                                 // router_025:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          sysaudio_onchip_memory_s1_agent_rp_valid;                                                   // SysAudio_Onchip_Memory_s1_agent:rp_valid -> router_026:sink_valid
	wire  [111:0] sysaudio_onchip_memory_s1_agent_rp_data;                                                    // SysAudio_Onchip_Memory_s1_agent:rp_data -> router_026:sink_data
	wire          sysaudio_onchip_memory_s1_agent_rp_ready;                                                   // router_026:sink_ready -> SysAudio_Onchip_Memory_s1_agent:rp_ready
	wire          sysaudio_onchip_memory_s1_agent_rp_startofpacket;                                           // SysAudio_Onchip_Memory_s1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          sysaudio_onchip_memory_s1_agent_rp_endofpacket;                                             // SysAudio_Onchip_Memory_s1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                                       // router_026:src_valid -> rsp_demux_021:sink_valid
	wire  [111:0] router_026_src_data;                                                                        // router_026:src_data -> rsp_demux_021:sink_data
	wire          router_026_src_ready;                                                                       // rsp_demux_021:sink_ready -> router_026:src_ready
	wire   [21:0] router_026_src_channel;                                                                     // router_026:src_channel -> rsp_demux_021:sink_channel
	wire          router_026_src_startofpacket;                                                               // router_026:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_026_src_endofpacket;                                                                 // router_026:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          router_001_src_valid;                                                                       // router_001:src_valid -> SysAudio_NIOS_II_data_master_limiter:cmd_sink_valid
	wire  [111:0] router_001_src_data;                                                                        // router_001:src_data -> SysAudio_NIOS_II_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                                       // SysAudio_NIOS_II_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire   [21:0] router_001_src_channel;                                                                     // router_001:src_channel -> SysAudio_NIOS_II_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                               // router_001:src_startofpacket -> SysAudio_NIOS_II_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                                 // router_001:src_endofpacket -> SysAudio_NIOS_II_data_master_limiter:cmd_sink_endofpacket
	wire  [111:0] sysaudio_nios_ii_data_master_limiter_cmd_src_data;                                          // SysAudio_NIOS_II_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire          sysaudio_nios_ii_data_master_limiter_cmd_src_ready;                                         // cmd_demux_001:sink_ready -> SysAudio_NIOS_II_data_master_limiter:cmd_src_ready
	wire   [21:0] sysaudio_nios_ii_data_master_limiter_cmd_src_channel;                                       // SysAudio_NIOS_II_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire          sysaudio_nios_ii_data_master_limiter_cmd_src_startofpacket;                                 // SysAudio_NIOS_II_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          sysaudio_nios_ii_data_master_limiter_cmd_src_endofpacket;                                   // SysAudio_NIOS_II_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                                      // rsp_mux_001:src_valid -> SysAudio_NIOS_II_data_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_001_src_data;                                                                       // rsp_mux_001:src_data -> SysAudio_NIOS_II_data_master_limiter:rsp_sink_data
	wire          rsp_mux_001_src_ready;                                                                      // SysAudio_NIOS_II_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire   [21:0] rsp_mux_001_src_channel;                                                                    // rsp_mux_001:src_channel -> SysAudio_NIOS_II_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_001_src_startofpacket;                                                              // rsp_mux_001:src_startofpacket -> SysAudio_NIOS_II_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                // rsp_mux_001:src_endofpacket -> SysAudio_NIOS_II_data_master_limiter:rsp_sink_endofpacket
	wire          sysaudio_nios_ii_data_master_limiter_rsp_src_valid;                                         // SysAudio_NIOS_II_data_master_limiter:rsp_src_valid -> SysAudio_NIOS_II_data_master_agent:rp_valid
	wire  [111:0] sysaudio_nios_ii_data_master_limiter_rsp_src_data;                                          // SysAudio_NIOS_II_data_master_limiter:rsp_src_data -> SysAudio_NIOS_II_data_master_agent:rp_data
	wire          sysaudio_nios_ii_data_master_limiter_rsp_src_ready;                                         // SysAudio_NIOS_II_data_master_agent:rp_ready -> SysAudio_NIOS_II_data_master_limiter:rsp_src_ready
	wire   [21:0] sysaudio_nios_ii_data_master_limiter_rsp_src_channel;                                       // SysAudio_NIOS_II_data_master_limiter:rsp_src_channel -> SysAudio_NIOS_II_data_master_agent:rp_channel
	wire          sysaudio_nios_ii_data_master_limiter_rsp_src_startofpacket;                                 // SysAudio_NIOS_II_data_master_limiter:rsp_src_startofpacket -> SysAudio_NIOS_II_data_master_agent:rp_startofpacket
	wire          sysaudio_nios_ii_data_master_limiter_rsp_src_endofpacket;                                   // SysAudio_NIOS_II_data_master_limiter:rsp_src_endofpacket -> SysAudio_NIOS_II_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                                       // router_002:src_valid -> SysSigProc_NIOS_II_data_master_limiter:cmd_sink_valid
	wire  [111:0] router_002_src_data;                                                                        // router_002:src_data -> SysSigProc_NIOS_II_data_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                                       // SysSigProc_NIOS_II_data_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire   [21:0] router_002_src_channel;                                                                     // router_002:src_channel -> SysSigProc_NIOS_II_data_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                               // router_002:src_startofpacket -> SysSigProc_NIOS_II_data_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                                 // router_002:src_endofpacket -> SysSigProc_NIOS_II_data_master_limiter:cmd_sink_endofpacket
	wire  [111:0] syssigproc_nios_ii_data_master_limiter_cmd_src_data;                                        // SysSigProc_NIOS_II_data_master_limiter:cmd_src_data -> cmd_demux_002:sink_data
	wire          syssigproc_nios_ii_data_master_limiter_cmd_src_ready;                                       // cmd_demux_002:sink_ready -> SysSigProc_NIOS_II_data_master_limiter:cmd_src_ready
	wire   [21:0] syssigproc_nios_ii_data_master_limiter_cmd_src_channel;                                     // SysSigProc_NIOS_II_data_master_limiter:cmd_src_channel -> cmd_demux_002:sink_channel
	wire          syssigproc_nios_ii_data_master_limiter_cmd_src_startofpacket;                               // SysSigProc_NIOS_II_data_master_limiter:cmd_src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          syssigproc_nios_ii_data_master_limiter_cmd_src_endofpacket;                                 // SysSigProc_NIOS_II_data_master_limiter:cmd_src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                                      // rsp_mux_002:src_valid -> SysSigProc_NIOS_II_data_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_002_src_data;                                                                       // rsp_mux_002:src_data -> SysSigProc_NIOS_II_data_master_limiter:rsp_sink_data
	wire          rsp_mux_002_src_ready;                                                                      // SysSigProc_NIOS_II_data_master_limiter:rsp_sink_ready -> rsp_mux_002:src_ready
	wire   [21:0] rsp_mux_002_src_channel;                                                                    // rsp_mux_002:src_channel -> SysSigProc_NIOS_II_data_master_limiter:rsp_sink_channel
	wire          rsp_mux_002_src_startofpacket;                                                              // rsp_mux_002:src_startofpacket -> SysSigProc_NIOS_II_data_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                // rsp_mux_002:src_endofpacket -> SysSigProc_NIOS_II_data_master_limiter:rsp_sink_endofpacket
	wire          syssigproc_nios_ii_data_master_limiter_rsp_src_valid;                                       // SysSigProc_NIOS_II_data_master_limiter:rsp_src_valid -> SysSigProc_NIOS_II_data_master_agent:rp_valid
	wire  [111:0] syssigproc_nios_ii_data_master_limiter_rsp_src_data;                                        // SysSigProc_NIOS_II_data_master_limiter:rsp_src_data -> SysSigProc_NIOS_II_data_master_agent:rp_data
	wire          syssigproc_nios_ii_data_master_limiter_rsp_src_ready;                                       // SysSigProc_NIOS_II_data_master_agent:rp_ready -> SysSigProc_NIOS_II_data_master_limiter:rsp_src_ready
	wire   [21:0] syssigproc_nios_ii_data_master_limiter_rsp_src_channel;                                     // SysSigProc_NIOS_II_data_master_limiter:rsp_src_channel -> SysSigProc_NIOS_II_data_master_agent:rp_channel
	wire          syssigproc_nios_ii_data_master_limiter_rsp_src_startofpacket;                               // SysSigProc_NIOS_II_data_master_limiter:rsp_src_startofpacket -> SysSigProc_NIOS_II_data_master_agent:rp_startofpacket
	wire          syssigproc_nios_ii_data_master_limiter_rsp_src_endofpacket;                                 // SysSigProc_NIOS_II_data_master_limiter:rsp_src_endofpacket -> SysSigProc_NIOS_II_data_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                                       // router_003:src_valid -> SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_valid
	wire  [111:0] router_003_src_data;                                                                        // router_003:src_data -> SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                       // SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [21:0] router_003_src_channel;                                                                     // router_003:src_channel -> SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                               // router_003:src_startofpacket -> SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                 // router_003:src_endofpacket -> SysAudio_NIOS_II_instruction_master_limiter:cmd_sink_endofpacket
	wire  [111:0] sysaudio_nios_ii_instruction_master_limiter_cmd_src_data;                                   // SysAudio_NIOS_II_instruction_master_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          sysaudio_nios_ii_instruction_master_limiter_cmd_src_ready;                                  // cmd_demux_003:sink_ready -> SysAudio_NIOS_II_instruction_master_limiter:cmd_src_ready
	wire   [21:0] sysaudio_nios_ii_instruction_master_limiter_cmd_src_channel;                                // SysAudio_NIOS_II_instruction_master_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          sysaudio_nios_ii_instruction_master_limiter_cmd_src_startofpacket;                          // SysAudio_NIOS_II_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          sysaudio_nios_ii_instruction_master_limiter_cmd_src_endofpacket;                            // SysAudio_NIOS_II_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                      // rsp_mux_003:src_valid -> SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_003_src_data;                                                                       // rsp_mux_003:src_data -> SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                      // SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [21:0] rsp_mux_003_src_channel;                                                                    // rsp_mux_003:src_channel -> SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                              // rsp_mux_003:src_startofpacket -> SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                // rsp_mux_003:src_endofpacket -> SysAudio_NIOS_II_instruction_master_limiter:rsp_sink_endofpacket
	wire          sysaudio_nios_ii_instruction_master_limiter_rsp_src_valid;                                  // SysAudio_NIOS_II_instruction_master_limiter:rsp_src_valid -> SysAudio_NIOS_II_instruction_master_agent:rp_valid
	wire  [111:0] sysaudio_nios_ii_instruction_master_limiter_rsp_src_data;                                   // SysAudio_NIOS_II_instruction_master_limiter:rsp_src_data -> SysAudio_NIOS_II_instruction_master_agent:rp_data
	wire          sysaudio_nios_ii_instruction_master_limiter_rsp_src_ready;                                  // SysAudio_NIOS_II_instruction_master_agent:rp_ready -> SysAudio_NIOS_II_instruction_master_limiter:rsp_src_ready
	wire   [21:0] sysaudio_nios_ii_instruction_master_limiter_rsp_src_channel;                                // SysAudio_NIOS_II_instruction_master_limiter:rsp_src_channel -> SysAudio_NIOS_II_instruction_master_agent:rp_channel
	wire          sysaudio_nios_ii_instruction_master_limiter_rsp_src_startofpacket;                          // SysAudio_NIOS_II_instruction_master_limiter:rsp_src_startofpacket -> SysAudio_NIOS_II_instruction_master_agent:rp_startofpacket
	wire          sysaudio_nios_ii_instruction_master_limiter_rsp_src_endofpacket;                            // SysAudio_NIOS_II_instruction_master_limiter:rsp_src_endofpacket -> SysAudio_NIOS_II_instruction_master_agent:rp_endofpacket
	wire          router_004_src_valid;                                                                       // router_004:src_valid -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_valid
	wire  [111:0] router_004_src_data;                                                                        // router_004:src_data -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_data
	wire          router_004_src_ready;                                                                       // SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_ready -> router_004:src_ready
	wire   [21:0] router_004_src_channel;                                                                     // router_004:src_channel -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_channel
	wire          router_004_src_startofpacket;                                                               // router_004:src_startofpacket -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_004_src_endofpacket;                                                                 // router_004:src_endofpacket -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_sink_endofpacket
	wire  [111:0] syssigproc_nios_ii_instruction_master_limiter_cmd_src_data;                                 // SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_data -> cmd_demux_004:sink_data
	wire          syssigproc_nios_ii_instruction_master_limiter_cmd_src_ready;                                // cmd_demux_004:sink_ready -> SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_ready
	wire   [21:0] syssigproc_nios_ii_instruction_master_limiter_cmd_src_channel;                              // SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_channel -> cmd_demux_004:sink_channel
	wire          syssigproc_nios_ii_instruction_master_limiter_cmd_src_startofpacket;                        // SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          syssigproc_nios_ii_instruction_master_limiter_cmd_src_endofpacket;                          // SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          rsp_mux_004_src_valid;                                                                      // rsp_mux_004:src_valid -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_valid
	wire  [111:0] rsp_mux_004_src_data;                                                                       // rsp_mux_004:src_data -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_data
	wire          rsp_mux_004_src_ready;                                                                      // SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_ready -> rsp_mux_004:src_ready
	wire   [21:0] rsp_mux_004_src_channel;                                                                    // rsp_mux_004:src_channel -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_channel
	wire          rsp_mux_004_src_startofpacket;                                                              // rsp_mux_004:src_startofpacket -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                // rsp_mux_004:src_endofpacket -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_sink_endofpacket
	wire          syssigproc_nios_ii_instruction_master_limiter_rsp_src_valid;                                // SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_valid -> SysSigProc_NIOS_II_instruction_master_agent:rp_valid
	wire  [111:0] syssigproc_nios_ii_instruction_master_limiter_rsp_src_data;                                 // SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_data -> SysSigProc_NIOS_II_instruction_master_agent:rp_data
	wire          syssigproc_nios_ii_instruction_master_limiter_rsp_src_ready;                                // SysSigProc_NIOS_II_instruction_master_agent:rp_ready -> SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_ready
	wire   [21:0] syssigproc_nios_ii_instruction_master_limiter_rsp_src_channel;                              // SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_channel -> SysSigProc_NIOS_II_instruction_master_agent:rp_channel
	wire          syssigproc_nios_ii_instruction_master_limiter_rsp_src_startofpacket;                        // SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_startofpacket -> SysSigProc_NIOS_II_instruction_master_agent:rp_startofpacket
	wire          syssigproc_nios_ii_instruction_master_limiter_rsp_src_endofpacket;                          // SysSigProc_NIOS_II_instruction_master_limiter:rsp_src_endofpacket -> SysSigProc_NIOS_II_instruction_master_agent:rp_endofpacket
	wire          sdram_controller_shared_s1_burst_adapter_source0_valid;                                     // SDRAM_Controller_Shared_s1_burst_adapter:source0_valid -> SDRAM_Controller_Shared_s1_agent:cp_valid
	wire   [93:0] sdram_controller_shared_s1_burst_adapter_source0_data;                                      // SDRAM_Controller_Shared_s1_burst_adapter:source0_data -> SDRAM_Controller_Shared_s1_agent:cp_data
	wire          sdram_controller_shared_s1_burst_adapter_source0_ready;                                     // SDRAM_Controller_Shared_s1_agent:cp_ready -> SDRAM_Controller_Shared_s1_burst_adapter:source0_ready
	wire   [21:0] sdram_controller_shared_s1_burst_adapter_source0_channel;                                   // SDRAM_Controller_Shared_s1_burst_adapter:source0_channel -> SDRAM_Controller_Shared_s1_agent:cp_channel
	wire          sdram_controller_shared_s1_burst_adapter_source0_startofpacket;                             // SDRAM_Controller_Shared_s1_burst_adapter:source0_startofpacket -> SDRAM_Controller_Shared_s1_agent:cp_startofpacket
	wire          sdram_controller_shared_s1_burst_adapter_source0_endofpacket;                               // SDRAM_Controller_Shared_s1_burst_adapter:source0_endofpacket -> SDRAM_Controller_Shared_s1_agent:cp_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                   // cmd_demux_001:src1_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                                    // cmd_demux_001:src1_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_001_src1_ready;                                                                   // cmd_mux_008:sink0_ready -> cmd_demux_001:src1_ready
	wire   [21:0] cmd_demux_001_src1_channel;                                                                 // cmd_demux_001:src1_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_001_src1_startofpacket;                                                           // cmd_demux_001:src1_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                             // cmd_demux_001:src1_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                   // cmd_demux_001:src2_valid -> cmd_mux_009:sink0_valid
	wire  [111:0] cmd_demux_001_src2_data;                                                                    // cmd_demux_001:src2_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_001_src2_ready;                                                                   // cmd_mux_009:sink0_ready -> cmd_demux_001:src2_ready
	wire   [21:0] cmd_demux_001_src2_channel;                                                                 // cmd_demux_001:src2_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_001_src2_startofpacket;                                                           // cmd_demux_001:src2_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                             // cmd_demux_001:src2_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                                   // cmd_demux_001:src3_valid -> cmd_mux_010:sink0_valid
	wire  [111:0] cmd_demux_001_src3_data;                                                                    // cmd_demux_001:src3_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_001_src3_ready;                                                                   // cmd_mux_010:sink0_ready -> cmd_demux_001:src3_ready
	wire   [21:0] cmd_demux_001_src3_channel;                                                                 // cmd_demux_001:src3_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_001_src3_startofpacket;                                                           // cmd_demux_001:src3_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                             // cmd_demux_001:src3_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                                   // cmd_demux_001:src4_valid -> cmd_mux_011:sink0_valid
	wire  [111:0] cmd_demux_001_src4_data;                                                                    // cmd_demux_001:src4_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_001_src4_ready;                                                                   // cmd_mux_011:sink0_ready -> cmd_demux_001:src4_ready
	wire   [21:0] cmd_demux_001_src4_channel;                                                                 // cmd_demux_001:src4_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_001_src4_startofpacket;                                                           // cmd_demux_001:src4_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                             // cmd_demux_001:src4_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_001_src5_valid;                                                                   // cmd_demux_001:src5_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_001_src5_data;                                                                    // cmd_demux_001:src5_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_001_src5_ready;                                                                   // cmd_mux_012:sink0_ready -> cmd_demux_001:src5_ready
	wire   [21:0] cmd_demux_001_src5_channel;                                                                 // cmd_demux_001:src5_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_001_src5_startofpacket;                                                           // cmd_demux_001:src5_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_001_src5_endofpacket;                                                             // cmd_demux_001:src5_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_001_src7_valid;                                                                   // cmd_demux_001:src7_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_001_src7_data;                                                                    // cmd_demux_001:src7_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_001_src7_ready;                                                                   // cmd_mux_015:sink0_ready -> cmd_demux_001:src7_ready
	wire   [21:0] cmd_demux_001_src7_channel;                                                                 // cmd_demux_001:src7_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_001_src7_startofpacket;                                                           // cmd_demux_001:src7_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_001_src7_endofpacket;                                                             // cmd_demux_001:src7_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src8_valid;                                                                   // cmd_demux_001:src8_valid -> cmd_mux_016:sink0_valid
	wire  [111:0] cmd_demux_001_src8_data;                                                                    // cmd_demux_001:src8_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_001_src8_ready;                                                                   // cmd_mux_016:sink0_ready -> cmd_demux_001:src8_ready
	wire   [21:0] cmd_demux_001_src8_channel;                                                                 // cmd_demux_001:src8_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_001_src8_startofpacket;                                                           // cmd_demux_001:src8_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_001_src8_endofpacket;                                                             // cmd_demux_001:src8_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_001_src9_valid;                                                                   // cmd_demux_001:src9_valid -> cmd_mux_017:sink0_valid
	wire  [111:0] cmd_demux_001_src9_data;                                                                    // cmd_demux_001:src9_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_001_src9_ready;                                                                   // cmd_mux_017:sink0_ready -> cmd_demux_001:src9_ready
	wire   [21:0] cmd_demux_001_src9_channel;                                                                 // cmd_demux_001:src9_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_001_src9_startofpacket;                                                           // cmd_demux_001:src9_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_001_src9_endofpacket;                                                             // cmd_demux_001:src9_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_001_src10_valid;                                                                  // cmd_demux_001:src10_valid -> cmd_mux_018:sink0_valid
	wire  [111:0] cmd_demux_001_src10_data;                                                                   // cmd_demux_001:src10_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_001_src10_ready;                                                                  // cmd_mux_018:sink0_ready -> cmd_demux_001:src10_ready
	wire   [21:0] cmd_demux_001_src10_channel;                                                                // cmd_demux_001:src10_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_001_src10_startofpacket;                                                          // cmd_demux_001:src10_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_001_src10_endofpacket;                                                            // cmd_demux_001:src10_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_001_src11_valid;                                                                  // cmd_demux_001:src11_valid -> cmd_mux_019:sink0_valid
	wire  [111:0] cmd_demux_001_src11_data;                                                                   // cmd_demux_001:src11_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_001_src11_ready;                                                                  // cmd_mux_019:sink0_ready -> cmd_demux_001:src11_ready
	wire   [21:0] cmd_demux_001_src11_channel;                                                                // cmd_demux_001:src11_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_001_src11_startofpacket;                                                          // cmd_demux_001:src11_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_001_src11_endofpacket;                                                            // cmd_demux_001:src11_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_001_src12_valid;                                                                  // cmd_demux_001:src12_valid -> cmd_mux_020:sink0_valid
	wire  [111:0] cmd_demux_001_src12_data;                                                                   // cmd_demux_001:src12_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_001_src12_ready;                                                                  // cmd_mux_020:sink0_ready -> cmd_demux_001:src12_ready
	wire   [21:0] cmd_demux_001_src12_channel;                                                                // cmd_demux_001:src12_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_001_src12_startofpacket;                                                          // cmd_demux_001:src12_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_001_src12_endofpacket;                                                            // cmd_demux_001:src12_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_001_src13_valid;                                                                  // cmd_demux_001:src13_valid -> cmd_mux_021:sink0_valid
	wire  [111:0] cmd_demux_001_src13_data;                                                                   // cmd_demux_001:src13_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_001_src13_ready;                                                                  // cmd_mux_021:sink0_ready -> cmd_demux_001:src13_ready
	wire   [21:0] cmd_demux_001_src13_channel;                                                                // cmd_demux_001:src13_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_001_src13_startofpacket;                                                          // cmd_demux_001:src13_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_001_src13_endofpacket;                                                            // cmd_demux_001:src13_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                   // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_002_src1_data;                                                                    // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                   // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire   [21:0] cmd_demux_002_src1_channel;                                                                 // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                           // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                             // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                   // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_002_src2_data;                                                                    // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                   // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire   [21:0] cmd_demux_002_src2_channel;                                                                 // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                           // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                             // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                   // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_002_src3_data;                                                                    // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                   // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire   [21:0] cmd_demux_002_src3_channel;                                                                 // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                           // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                             // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                   // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [111:0] cmd_demux_002_src4_data;                                                                    // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                   // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire   [21:0] cmd_demux_002_src4_channel;                                                                 // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                           // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                             // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_002_src5_valid;                                                                   // cmd_demux_002:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_002_src5_data;                                                                    // cmd_demux_002:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_002_src5_ready;                                                                   // cmd_mux_005:sink0_ready -> cmd_demux_002:src5_ready
	wire   [21:0] cmd_demux_002_src5_channel;                                                                 // cmd_demux_002:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_002_src5_startofpacket;                                                           // cmd_demux_002:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_002_src5_endofpacket;                                                             // cmd_demux_002:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_002_src6_valid;                                                                   // cmd_demux_002:src6_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] cmd_demux_002_src6_data;                                                                    // cmd_demux_002:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_002_src6_ready;                                                                   // cmd_mux_006:sink0_ready -> cmd_demux_002:src6_ready
	wire   [21:0] cmd_demux_002_src6_channel;                                                                 // cmd_demux_002:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_002_src6_startofpacket;                                                           // cmd_demux_002:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_002_src6_endofpacket;                                                             // cmd_demux_002:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_002_src7_valid;                                                                   // cmd_demux_002:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_002_src7_data;                                                                    // cmd_demux_002:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_002_src7_ready;                                                                   // cmd_mux_007:sink0_ready -> cmd_demux_002:src7_ready
	wire   [21:0] cmd_demux_002_src7_channel;                                                                 // cmd_demux_002:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_002_src7_startofpacket;                                                           // cmd_demux_002:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_002_src7_endofpacket;                                                             // cmd_demux_002:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_002_src8_valid;                                                                   // cmd_demux_002:src8_valid -> cmd_mux_008:sink1_valid
	wire  [111:0] cmd_demux_002_src8_data;                                                                    // cmd_demux_002:src8_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_002_src8_ready;                                                                   // cmd_mux_008:sink1_ready -> cmd_demux_002:src8_ready
	wire   [21:0] cmd_demux_002_src8_channel;                                                                 // cmd_demux_002:src8_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_002_src8_startofpacket;                                                           // cmd_demux_002:src8_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_002_src8_endofpacket;                                                             // cmd_demux_002:src8_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_002_src9_valid;                                                                   // cmd_demux_002:src9_valid -> cmd_mux_009:sink1_valid
	wire  [111:0] cmd_demux_002_src9_data;                                                                    // cmd_demux_002:src9_data -> cmd_mux_009:sink1_data
	wire          cmd_demux_002_src9_ready;                                                                   // cmd_mux_009:sink1_ready -> cmd_demux_002:src9_ready
	wire   [21:0] cmd_demux_002_src9_channel;                                                                 // cmd_demux_002:src9_channel -> cmd_mux_009:sink1_channel
	wire          cmd_demux_002_src9_startofpacket;                                                           // cmd_demux_002:src9_startofpacket -> cmd_mux_009:sink1_startofpacket
	wire          cmd_demux_002_src9_endofpacket;                                                             // cmd_demux_002:src9_endofpacket -> cmd_mux_009:sink1_endofpacket
	wire          cmd_demux_002_src10_valid;                                                                  // cmd_demux_002:src10_valid -> cmd_mux_010:sink1_valid
	wire  [111:0] cmd_demux_002_src10_data;                                                                   // cmd_demux_002:src10_data -> cmd_mux_010:sink1_data
	wire          cmd_demux_002_src10_ready;                                                                  // cmd_mux_010:sink1_ready -> cmd_demux_002:src10_ready
	wire   [21:0] cmd_demux_002_src10_channel;                                                                // cmd_demux_002:src10_channel -> cmd_mux_010:sink1_channel
	wire          cmd_demux_002_src10_startofpacket;                                                          // cmd_demux_002:src10_startofpacket -> cmd_mux_010:sink1_startofpacket
	wire          cmd_demux_002_src10_endofpacket;                                                            // cmd_demux_002:src10_endofpacket -> cmd_mux_010:sink1_endofpacket
	wire          cmd_demux_002_src11_valid;                                                                  // cmd_demux_002:src11_valid -> cmd_mux_011:sink1_valid
	wire  [111:0] cmd_demux_002_src11_data;                                                                   // cmd_demux_002:src11_data -> cmd_mux_011:sink1_data
	wire          cmd_demux_002_src11_ready;                                                                  // cmd_mux_011:sink1_ready -> cmd_demux_002:src11_ready
	wire   [21:0] cmd_demux_002_src11_channel;                                                                // cmd_demux_002:src11_channel -> cmd_mux_011:sink1_channel
	wire          cmd_demux_002_src11_startofpacket;                                                          // cmd_demux_002:src11_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          cmd_demux_002_src11_endofpacket;                                                            // cmd_demux_002:src11_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_002_src12_valid;                                                                  // cmd_demux_002:src12_valid -> cmd_mux_012:sink1_valid
	wire  [111:0] cmd_demux_002_src12_data;                                                                   // cmd_demux_002:src12_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_002_src12_ready;                                                                  // cmd_mux_012:sink1_ready -> cmd_demux_002:src12_ready
	wire   [21:0] cmd_demux_002_src12_channel;                                                                // cmd_demux_002:src12_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_002_src12_startofpacket;                                                          // cmd_demux_002:src12_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_002_src12_endofpacket;                                                            // cmd_demux_002:src12_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_002_src13_valid;                                                                  // cmd_demux_002:src13_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_002_src13_data;                                                                   // cmd_demux_002:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_002_src13_ready;                                                                  // cmd_mux_013:sink0_ready -> cmd_demux_002:src13_ready
	wire   [21:0] cmd_demux_002_src13_channel;                                                                // cmd_demux_002:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_002_src13_startofpacket;                                                          // cmd_demux_002:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_002_src13_endofpacket;                                                            // cmd_demux_002:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                   // cmd_demux_003:src0_valid -> cmd_mux_020:sink1_valid
	wire  [111:0] cmd_demux_003_src0_data;                                                                    // cmd_demux_003:src0_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_003_src0_ready;                                                                   // cmd_mux_020:sink1_ready -> cmd_demux_003:src0_ready
	wire   [21:0] cmd_demux_003_src0_channel;                                                                 // cmd_demux_003:src0_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_003_src0_startofpacket;                                                           // cmd_demux_003:src0_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                             // cmd_demux_003:src0_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                   // cmd_demux_003:src1_valid -> cmd_mux_021:sink1_valid
	wire  [111:0] cmd_demux_003_src1_data;                                                                    // cmd_demux_003:src1_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                   // cmd_mux_021:sink1_ready -> cmd_demux_003:src1_ready
	wire   [21:0] cmd_demux_003_src1_channel;                                                                 // cmd_demux_003:src1_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                           // cmd_demux_003:src1_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                             // cmd_demux_003:src1_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                   // cmd_demux_004:src0_valid -> cmd_mux_006:sink1_valid
	wire  [111:0] cmd_demux_004_src0_data;                                                                    // cmd_demux_004:src0_data -> cmd_mux_006:sink1_data
	wire          cmd_demux_004_src0_ready;                                                                   // cmd_mux_006:sink1_ready -> cmd_demux_004:src0_ready
	wire   [21:0] cmd_demux_004_src0_channel;                                                                 // cmd_demux_004:src0_channel -> cmd_mux_006:sink1_channel
	wire          cmd_demux_004_src0_startofpacket;                                                           // cmd_demux_004:src0_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                             // cmd_demux_004:src0_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_004_src1_valid;                                                                   // cmd_demux_004:src1_valid -> cmd_mux_007:sink1_valid
	wire  [111:0] cmd_demux_004_src1_data;                                                                    // cmd_demux_004:src1_data -> cmd_mux_007:sink1_data
	wire          cmd_demux_004_src1_ready;                                                                   // cmd_mux_007:sink1_ready -> cmd_demux_004:src1_ready
	wire   [21:0] cmd_demux_004_src1_channel;                                                                 // cmd_demux_004:src1_channel -> cmd_mux_007:sink1_channel
	wire          cmd_demux_004_src1_startofpacket;                                                           // cmd_demux_004:src1_startofpacket -> cmd_mux_007:sink1_startofpacket
	wire          cmd_demux_004_src1_endofpacket;                                                             // cmd_demux_004:src1_endofpacket -> cmd_mux_007:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                   // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                                    // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                   // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire   [21:0] rsp_demux_001_src0_channel;                                                                 // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                           // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                             // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                   // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                                    // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                   // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire   [21:0] rsp_demux_002_src0_channel;                                                                 // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                           // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                             // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                   // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                                    // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                   // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire   [21:0] rsp_demux_003_src0_channel;                                                                 // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                           // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                             // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                   // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [111:0] rsp_demux_004_src0_data;                                                                    // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                   // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire   [21:0] rsp_demux_004_src0_channel;                                                                 // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                           // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                             // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                   // rsp_demux_005:src0_valid -> rsp_mux_002:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                                    // rsp_demux_005:src0_data -> rsp_mux_002:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                   // rsp_mux_002:sink5_ready -> rsp_demux_005:src0_ready
	wire   [21:0] rsp_demux_005_src0_channel;                                                                 // rsp_demux_005:src0_channel -> rsp_mux_002:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                           // rsp_demux_005:src0_startofpacket -> rsp_mux_002:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                             // rsp_demux_005:src0_endofpacket -> rsp_mux_002:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                   // rsp_demux_006:src0_valid -> rsp_mux_002:sink6_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                                    // rsp_demux_006:src0_data -> rsp_mux_002:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                   // rsp_mux_002:sink6_ready -> rsp_demux_006:src0_ready
	wire   [21:0] rsp_demux_006_src0_channel;                                                                 // rsp_demux_006:src0_channel -> rsp_mux_002:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                           // rsp_demux_006:src0_startofpacket -> rsp_mux_002:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                             // rsp_demux_006:src0_endofpacket -> rsp_mux_002:sink6_endofpacket
	wire          rsp_demux_006_src1_valid;                                                                   // rsp_demux_006:src1_valid -> rsp_mux_004:sink0_valid
	wire  [111:0] rsp_demux_006_src1_data;                                                                    // rsp_demux_006:src1_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_006_src1_ready;                                                                   // rsp_mux_004:sink0_ready -> rsp_demux_006:src1_ready
	wire   [21:0] rsp_demux_006_src1_channel;                                                                 // rsp_demux_006:src1_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_006_src1_startofpacket;                                                           // rsp_demux_006:src1_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                                             // rsp_demux_006:src1_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                   // rsp_demux_007:src0_valid -> rsp_mux_002:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                                    // rsp_demux_007:src0_data -> rsp_mux_002:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                   // rsp_mux_002:sink7_ready -> rsp_demux_007:src0_ready
	wire   [21:0] rsp_demux_007_src0_channel;                                                                 // rsp_demux_007:src0_channel -> rsp_mux_002:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                           // rsp_demux_007:src0_startofpacket -> rsp_mux_002:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                             // rsp_demux_007:src0_endofpacket -> rsp_mux_002:sink7_endofpacket
	wire          rsp_demux_007_src1_valid;                                                                   // rsp_demux_007:src1_valid -> rsp_mux_004:sink1_valid
	wire  [111:0] rsp_demux_007_src1_data;                                                                    // rsp_demux_007:src1_data -> rsp_mux_004:sink1_data
	wire          rsp_demux_007_src1_ready;                                                                   // rsp_mux_004:sink1_ready -> rsp_demux_007:src1_ready
	wire   [21:0] rsp_demux_007_src1_channel;                                                                 // rsp_demux_007:src1_channel -> rsp_mux_004:sink1_channel
	wire          rsp_demux_007_src1_startofpacket;                                                           // rsp_demux_007:src1_startofpacket -> rsp_mux_004:sink1_startofpacket
	wire          rsp_demux_007_src1_endofpacket;                                                             // rsp_demux_007:src1_endofpacket -> rsp_mux_004:sink1_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                   // rsp_demux_008:src0_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                                    // rsp_demux_008:src0_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_008_src0_ready;                                                                   // rsp_mux_001:sink1_ready -> rsp_demux_008:src0_ready
	wire   [21:0] rsp_demux_008_src0_channel;                                                                 // rsp_demux_008:src0_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_008_src0_startofpacket;                                                           // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                             // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                   // rsp_demux_008:src1_valid -> rsp_mux_002:sink8_valid
	wire  [111:0] rsp_demux_008_src1_data;                                                                    // rsp_demux_008:src1_data -> rsp_mux_002:sink8_data
	wire          rsp_demux_008_src1_ready;                                                                   // rsp_mux_002:sink8_ready -> rsp_demux_008:src1_ready
	wire   [21:0] rsp_demux_008_src1_channel;                                                                 // rsp_demux_008:src1_channel -> rsp_mux_002:sink8_channel
	wire          rsp_demux_008_src1_startofpacket;                                                           // rsp_demux_008:src1_startofpacket -> rsp_mux_002:sink8_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                             // rsp_demux_008:src1_endofpacket -> rsp_mux_002:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                   // rsp_demux_009:src0_valid -> rsp_mux_001:sink2_valid
	wire  [111:0] rsp_demux_009_src0_data;                                                                    // rsp_demux_009:src0_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_009_src0_ready;                                                                   // rsp_mux_001:sink2_ready -> rsp_demux_009:src0_ready
	wire   [21:0] rsp_demux_009_src0_channel;                                                                 // rsp_demux_009:src0_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_009_src0_startofpacket;                                                           // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                             // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_009_src1_valid;                                                                   // rsp_demux_009:src1_valid -> rsp_mux_002:sink9_valid
	wire  [111:0] rsp_demux_009_src1_data;                                                                    // rsp_demux_009:src1_data -> rsp_mux_002:sink9_data
	wire          rsp_demux_009_src1_ready;                                                                   // rsp_mux_002:sink9_ready -> rsp_demux_009:src1_ready
	wire   [21:0] rsp_demux_009_src1_channel;                                                                 // rsp_demux_009:src1_channel -> rsp_mux_002:sink9_channel
	wire          rsp_demux_009_src1_startofpacket;                                                           // rsp_demux_009:src1_startofpacket -> rsp_mux_002:sink9_startofpacket
	wire          rsp_demux_009_src1_endofpacket;                                                             // rsp_demux_009:src1_endofpacket -> rsp_mux_002:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                   // rsp_demux_010:src0_valid -> rsp_mux_001:sink3_valid
	wire  [111:0] rsp_demux_010_src0_data;                                                                    // rsp_demux_010:src0_data -> rsp_mux_001:sink3_data
	wire          rsp_demux_010_src0_ready;                                                                   // rsp_mux_001:sink3_ready -> rsp_demux_010:src0_ready
	wire   [21:0] rsp_demux_010_src0_channel;                                                                 // rsp_demux_010:src0_channel -> rsp_mux_001:sink3_channel
	wire          rsp_demux_010_src0_startofpacket;                                                           // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                             // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_010_src1_valid;                                                                   // rsp_demux_010:src1_valid -> rsp_mux_002:sink10_valid
	wire  [111:0] rsp_demux_010_src1_data;                                                                    // rsp_demux_010:src1_data -> rsp_mux_002:sink10_data
	wire          rsp_demux_010_src1_ready;                                                                   // rsp_mux_002:sink10_ready -> rsp_demux_010:src1_ready
	wire   [21:0] rsp_demux_010_src1_channel;                                                                 // rsp_demux_010:src1_channel -> rsp_mux_002:sink10_channel
	wire          rsp_demux_010_src1_startofpacket;                                                           // rsp_demux_010:src1_startofpacket -> rsp_mux_002:sink10_startofpacket
	wire          rsp_demux_010_src1_endofpacket;                                                             // rsp_demux_010:src1_endofpacket -> rsp_mux_002:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                   // rsp_demux_011:src0_valid -> rsp_mux_001:sink4_valid
	wire  [111:0] rsp_demux_011_src0_data;                                                                    // rsp_demux_011:src0_data -> rsp_mux_001:sink4_data
	wire          rsp_demux_011_src0_ready;                                                                   // rsp_mux_001:sink4_ready -> rsp_demux_011:src0_ready
	wire   [21:0] rsp_demux_011_src0_channel;                                                                 // rsp_demux_011:src0_channel -> rsp_mux_001:sink4_channel
	wire          rsp_demux_011_src0_startofpacket;                                                           // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                             // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                   // rsp_demux_011:src1_valid -> rsp_mux_002:sink11_valid
	wire  [111:0] rsp_demux_011_src1_data;                                                                    // rsp_demux_011:src1_data -> rsp_mux_002:sink11_data
	wire          rsp_demux_011_src1_ready;                                                                   // rsp_mux_002:sink11_ready -> rsp_demux_011:src1_ready
	wire   [21:0] rsp_demux_011_src1_channel;                                                                 // rsp_demux_011:src1_channel -> rsp_mux_002:sink11_channel
	wire          rsp_demux_011_src1_startofpacket;                                                           // rsp_demux_011:src1_startofpacket -> rsp_mux_002:sink11_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                             // rsp_demux_011:src1_endofpacket -> rsp_mux_002:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                   // rsp_demux_012:src0_valid -> rsp_mux_001:sink5_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                                    // rsp_demux_012:src0_data -> rsp_mux_001:sink5_data
	wire          rsp_demux_012_src0_ready;                                                                   // rsp_mux_001:sink5_ready -> rsp_demux_012:src0_ready
	wire   [21:0] rsp_demux_012_src0_channel;                                                                 // rsp_demux_012:src0_channel -> rsp_mux_001:sink5_channel
	wire          rsp_demux_012_src0_startofpacket;                                                           // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                             // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                   // rsp_demux_012:src1_valid -> rsp_mux_002:sink12_valid
	wire  [111:0] rsp_demux_012_src1_data;                                                                    // rsp_demux_012:src1_data -> rsp_mux_002:sink12_data
	wire          rsp_demux_012_src1_ready;                                                                   // rsp_mux_002:sink12_ready -> rsp_demux_012:src1_ready
	wire   [21:0] rsp_demux_012_src1_channel;                                                                 // rsp_demux_012:src1_channel -> rsp_mux_002:sink12_channel
	wire          rsp_demux_012_src1_startofpacket;                                                           // rsp_demux_012:src1_startofpacket -> rsp_mux_002:sink12_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                             // rsp_demux_012:src1_endofpacket -> rsp_mux_002:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                   // rsp_demux_013:src0_valid -> rsp_mux_002:sink13_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                                    // rsp_demux_013:src0_data -> rsp_mux_002:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                   // rsp_mux_002:sink13_ready -> rsp_demux_013:src0_ready
	wire   [21:0] rsp_demux_013_src0_channel;                                                                 // rsp_demux_013:src0_channel -> rsp_mux_002:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                           // rsp_demux_013:src0_startofpacket -> rsp_mux_002:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                             // rsp_demux_013:src0_endofpacket -> rsp_mux_002:sink13_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                   // rsp_demux_015:src0_valid -> rsp_mux_001:sink7_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                                    // rsp_demux_015:src0_data -> rsp_mux_001:sink7_data
	wire          rsp_demux_015_src0_ready;                                                                   // rsp_mux_001:sink7_ready -> rsp_demux_015:src0_ready
	wire   [21:0] rsp_demux_015_src0_channel;                                                                 // rsp_demux_015:src0_channel -> rsp_mux_001:sink7_channel
	wire          rsp_demux_015_src0_startofpacket;                                                           // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                             // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire          rsp_demux_016_src0_valid;                                                                   // rsp_demux_016:src0_valid -> rsp_mux_001:sink8_valid
	wire  [111:0] rsp_demux_016_src0_data;                                                                    // rsp_demux_016:src0_data -> rsp_mux_001:sink8_data
	wire          rsp_demux_016_src0_ready;                                                                   // rsp_mux_001:sink8_ready -> rsp_demux_016:src0_ready
	wire   [21:0] rsp_demux_016_src0_channel;                                                                 // rsp_demux_016:src0_channel -> rsp_mux_001:sink8_channel
	wire          rsp_demux_016_src0_startofpacket;                                                           // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                             // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire          rsp_demux_017_src0_valid;                                                                   // rsp_demux_017:src0_valid -> rsp_mux_001:sink9_valid
	wire  [111:0] rsp_demux_017_src0_data;                                                                    // rsp_demux_017:src0_data -> rsp_mux_001:sink9_data
	wire          rsp_demux_017_src0_ready;                                                                   // rsp_mux_001:sink9_ready -> rsp_demux_017:src0_ready
	wire   [21:0] rsp_demux_017_src0_channel;                                                                 // rsp_demux_017:src0_channel -> rsp_mux_001:sink9_channel
	wire          rsp_demux_017_src0_startofpacket;                                                           // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                             // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire          rsp_demux_018_src0_valid;                                                                   // rsp_demux_018:src0_valid -> rsp_mux_001:sink10_valid
	wire  [111:0] rsp_demux_018_src0_data;                                                                    // rsp_demux_018:src0_data -> rsp_mux_001:sink10_data
	wire          rsp_demux_018_src0_ready;                                                                   // rsp_mux_001:sink10_ready -> rsp_demux_018:src0_ready
	wire   [21:0] rsp_demux_018_src0_channel;                                                                 // rsp_demux_018:src0_channel -> rsp_mux_001:sink10_channel
	wire          rsp_demux_018_src0_startofpacket;                                                           // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                             // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire          rsp_demux_019_src0_valid;                                                                   // rsp_demux_019:src0_valid -> rsp_mux_001:sink11_valid
	wire  [111:0] rsp_demux_019_src0_data;                                                                    // rsp_demux_019:src0_data -> rsp_mux_001:sink11_data
	wire          rsp_demux_019_src0_ready;                                                                   // rsp_mux_001:sink11_ready -> rsp_demux_019:src0_ready
	wire   [21:0] rsp_demux_019_src0_channel;                                                                 // rsp_demux_019:src0_channel -> rsp_mux_001:sink11_channel
	wire          rsp_demux_019_src0_startofpacket;                                                           // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                             // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire          rsp_demux_020_src0_valid;                                                                   // rsp_demux_020:src0_valid -> rsp_mux_001:sink12_valid
	wire  [111:0] rsp_demux_020_src0_data;                                                                    // rsp_demux_020:src0_data -> rsp_mux_001:sink12_data
	wire          rsp_demux_020_src0_ready;                                                                   // rsp_mux_001:sink12_ready -> rsp_demux_020:src0_ready
	wire   [21:0] rsp_demux_020_src0_channel;                                                                 // rsp_demux_020:src0_channel -> rsp_mux_001:sink12_channel
	wire          rsp_demux_020_src0_startofpacket;                                                           // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                             // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire          rsp_demux_020_src1_valid;                                                                   // rsp_demux_020:src1_valid -> rsp_mux_003:sink0_valid
	wire  [111:0] rsp_demux_020_src1_data;                                                                    // rsp_demux_020:src1_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_020_src1_ready;                                                                   // rsp_mux_003:sink0_ready -> rsp_demux_020:src1_ready
	wire   [21:0] rsp_demux_020_src1_channel;                                                                 // rsp_demux_020:src1_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_020_src1_startofpacket;                                                           // rsp_demux_020:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                             // rsp_demux_020:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_021_src0_valid;                                                                   // rsp_demux_021:src0_valid -> rsp_mux_001:sink13_valid
	wire  [111:0] rsp_demux_021_src0_data;                                                                    // rsp_demux_021:src0_data -> rsp_mux_001:sink13_data
	wire          rsp_demux_021_src0_ready;                                                                   // rsp_mux_001:sink13_ready -> rsp_demux_021:src0_ready
	wire   [21:0] rsp_demux_021_src0_channel;                                                                 // rsp_demux_021:src0_channel -> rsp_mux_001:sink13_channel
	wire          rsp_demux_021_src0_startofpacket;                                                           // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                             // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire          rsp_demux_021_src1_valid;                                                                   // rsp_demux_021:src1_valid -> rsp_mux_003:sink1_valid
	wire  [111:0] rsp_demux_021_src1_data;                                                                    // rsp_demux_021:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_021_src1_ready;                                                                   // rsp_mux_003:sink1_ready -> rsp_demux_021:src1_ready
	wire   [21:0] rsp_demux_021_src1_channel;                                                                 // rsp_demux_021:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_021_src1_startofpacket;                                                           // rsp_demux_021:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                             // rsp_demux_021:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          router_005_src_valid;                                                                       // router_005:src_valid -> SDRAM_Controller_Shared_s1_rsp_width_adapter:in_valid
	wire   [93:0] router_005_src_data;                                                                        // router_005:src_data -> SDRAM_Controller_Shared_s1_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                                       // SDRAM_Controller_Shared_s1_rsp_width_adapter:in_ready -> router_005:src_ready
	wire   [21:0] router_005_src_channel;                                                                     // router_005:src_channel -> SDRAM_Controller_Shared_s1_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                                               // router_005:src_startofpacket -> SDRAM_Controller_Shared_s1_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                                                 // router_005:src_endofpacket -> SDRAM_Controller_Shared_s1_rsp_width_adapter:in_endofpacket
	wire          sdram_controller_shared_s1_rsp_width_adapter_src_valid;                                     // SDRAM_Controller_Shared_s1_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [111:0] sdram_controller_shared_s1_rsp_width_adapter_src_data;                                      // SDRAM_Controller_Shared_s1_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire          sdram_controller_shared_s1_rsp_width_adapter_src_ready;                                     // rsp_demux:sink_ready -> SDRAM_Controller_Shared_s1_rsp_width_adapter:out_ready
	wire   [21:0] sdram_controller_shared_s1_rsp_width_adapter_src_channel;                                   // SDRAM_Controller_Shared_s1_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire          sdram_controller_shared_s1_rsp_width_adapter_src_startofpacket;                             // SDRAM_Controller_Shared_s1_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire          sdram_controller_shared_s1_rsp_width_adapter_src_endofpacket;                               // SDRAM_Controller_Shared_s1_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                          // cmd_mux:src_valid -> SDRAM_Controller_Shared_s1_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_src_data;                                                                           // cmd_mux:src_data -> SDRAM_Controller_Shared_s1_cmd_width_adapter:in_data
	wire          cmd_mux_src_ready;                                                                          // SDRAM_Controller_Shared_s1_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire   [21:0] cmd_mux_src_channel;                                                                        // cmd_mux:src_channel -> SDRAM_Controller_Shared_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_src_startofpacket;                                                                  // cmd_mux:src_startofpacket -> SDRAM_Controller_Shared_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                    // cmd_mux:src_endofpacket -> SDRAM_Controller_Shared_s1_cmd_width_adapter:in_endofpacket
	wire          sdram_controller_shared_s1_cmd_width_adapter_src_valid;                                     // SDRAM_Controller_Shared_s1_cmd_width_adapter:out_valid -> SDRAM_Controller_Shared_s1_burst_adapter:sink0_valid
	wire   [93:0] sdram_controller_shared_s1_cmd_width_adapter_src_data;                                      // SDRAM_Controller_Shared_s1_cmd_width_adapter:out_data -> SDRAM_Controller_Shared_s1_burst_adapter:sink0_data
	wire          sdram_controller_shared_s1_cmd_width_adapter_src_ready;                                     // SDRAM_Controller_Shared_s1_burst_adapter:sink0_ready -> SDRAM_Controller_Shared_s1_cmd_width_adapter:out_ready
	wire   [21:0] sdram_controller_shared_s1_cmd_width_adapter_src_channel;                                   // SDRAM_Controller_Shared_s1_cmd_width_adapter:out_channel -> SDRAM_Controller_Shared_s1_burst_adapter:sink0_channel
	wire          sdram_controller_shared_s1_cmd_width_adapter_src_startofpacket;                             // SDRAM_Controller_Shared_s1_cmd_width_adapter:out_startofpacket -> SDRAM_Controller_Shared_s1_burst_adapter:sink0_startofpacket
	wire          sdram_controller_shared_s1_cmd_width_adapter_src_endofpacket;                               // SDRAM_Controller_Shared_s1_cmd_width_adapter:out_endofpacket -> SDRAM_Controller_Shared_s1_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                       // cmd_demux:src0_valid -> crosser:in_valid
	wire  [111:0] cmd_demux_src0_data;                                                                        // cmd_demux:src0_data -> crosser:in_data
	wire          cmd_demux_src0_ready;                                                                       // crosser:in_ready -> cmd_demux:src0_ready
	wire   [21:0] cmd_demux_src0_channel;                                                                     // cmd_demux:src0_channel -> crosser:in_channel
	wire          cmd_demux_src0_startofpacket;                                                               // cmd_demux:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                 // cmd_demux:src0_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                          // crosser:out_valid -> cmd_mux:sink0_valid
	wire  [111:0] crosser_out_data;                                                                           // crosser:out_data -> cmd_mux:sink0_data
	wire          crosser_out_ready;                                                                          // cmd_mux:sink0_ready -> crosser:out_ready
	wire   [21:0] crosser_out_channel;                                                                        // crosser:out_channel -> cmd_mux:sink0_channel
	wire          crosser_out_startofpacket;                                                                  // crosser:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                                    // crosser:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                   // cmd_demux_001:src0_valid -> crosser_001:in_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                                    // cmd_demux_001:src0_data -> crosser_001:in_data
	wire          cmd_demux_001_src0_ready;                                                                   // crosser_001:in_ready -> cmd_demux_001:src0_ready
	wire   [21:0] cmd_demux_001_src0_channel;                                                                 // cmd_demux_001:src0_channel -> crosser_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                           // cmd_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                             // cmd_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                                      // crosser_001:out_valid -> cmd_mux:sink1_valid
	wire  [111:0] crosser_001_out_data;                                                                       // crosser_001:out_data -> cmd_mux:sink1_data
	wire          crosser_001_out_ready;                                                                      // cmd_mux:sink1_ready -> crosser_001:out_ready
	wire   [21:0] crosser_001_out_channel;                                                                    // crosser_001:out_channel -> cmd_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                                              // crosser_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                                // crosser_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_001_src6_valid;                                                                   // cmd_demux_001:src6_valid -> crosser_002:in_valid
	wire  [111:0] cmd_demux_001_src6_data;                                                                    // cmd_demux_001:src6_data -> crosser_002:in_data
	wire          cmd_demux_001_src6_ready;                                                                   // crosser_002:in_ready -> cmd_demux_001:src6_ready
	wire   [21:0] cmd_demux_001_src6_channel;                                                                 // cmd_demux_001:src6_channel -> crosser_002:in_channel
	wire          cmd_demux_001_src6_startofpacket;                                                           // cmd_demux_001:src6_startofpacket -> crosser_002:in_startofpacket
	wire          cmd_demux_001_src6_endofpacket;                                                             // cmd_demux_001:src6_endofpacket -> crosser_002:in_endofpacket
	wire          crosser_002_out_valid;                                                                      // crosser_002:out_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] crosser_002_out_data;                                                                       // crosser_002:out_data -> cmd_mux_014:sink0_data
	wire          crosser_002_out_ready;                                                                      // cmd_mux_014:sink0_ready -> crosser_002:out_ready
	wire   [21:0] crosser_002_out_channel;                                                                    // crosser_002:out_channel -> cmd_mux_014:sink0_channel
	wire          crosser_002_out_startofpacket;                                                              // crosser_002:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          crosser_002_out_endofpacket;                                                                // crosser_002:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                   // cmd_demux_002:src0_valid -> crosser_003:in_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                                    // cmd_demux_002:src0_data -> crosser_003:in_data
	wire          cmd_demux_002_src0_ready;                                                                   // crosser_003:in_ready -> cmd_demux_002:src0_ready
	wire   [21:0] cmd_demux_002_src0_channel;                                                                 // cmd_demux_002:src0_channel -> crosser_003:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                                           // cmd_demux_002:src0_startofpacket -> crosser_003:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                             // cmd_demux_002:src0_endofpacket -> crosser_003:in_endofpacket
	wire          crosser_003_out_valid;                                                                      // crosser_003:out_valid -> cmd_mux:sink2_valid
	wire  [111:0] crosser_003_out_data;                                                                       // crosser_003:out_data -> cmd_mux:sink2_data
	wire          crosser_003_out_ready;                                                                      // cmd_mux:sink2_ready -> crosser_003:out_ready
	wire   [21:0] crosser_003_out_channel;                                                                    // crosser_003:out_channel -> cmd_mux:sink2_channel
	wire          crosser_003_out_startofpacket;                                                              // crosser_003:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire          crosser_003_out_endofpacket;                                                                // crosser_003:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                                       // rsp_demux:src0_valid -> crosser_004:in_valid
	wire  [111:0] rsp_demux_src0_data;                                                                        // rsp_demux:src0_data -> crosser_004:in_data
	wire          rsp_demux_src0_ready;                                                                       // crosser_004:in_ready -> rsp_demux:src0_ready
	wire   [21:0] rsp_demux_src0_channel;                                                                     // rsp_demux:src0_channel -> crosser_004:in_channel
	wire          rsp_demux_src0_startofpacket;                                                               // rsp_demux:src0_startofpacket -> crosser_004:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                 // rsp_demux:src0_endofpacket -> crosser_004:in_endofpacket
	wire          crosser_004_out_valid;                                                                      // crosser_004:out_valid -> rsp_mux:sink0_valid
	wire  [111:0] crosser_004_out_data;                                                                       // crosser_004:out_data -> rsp_mux:sink0_data
	wire          crosser_004_out_ready;                                                                      // rsp_mux:sink0_ready -> crosser_004:out_ready
	wire   [21:0] crosser_004_out_channel;                                                                    // crosser_004:out_channel -> rsp_mux:sink0_channel
	wire          crosser_004_out_startofpacket;                                                              // crosser_004:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          crosser_004_out_endofpacket;                                                                // crosser_004:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                       // rsp_demux:src1_valid -> crosser_005:in_valid
	wire  [111:0] rsp_demux_src1_data;                                                                        // rsp_demux:src1_data -> crosser_005:in_data
	wire          rsp_demux_src1_ready;                                                                       // crosser_005:in_ready -> rsp_demux:src1_ready
	wire   [21:0] rsp_demux_src1_channel;                                                                     // rsp_demux:src1_channel -> crosser_005:in_channel
	wire          rsp_demux_src1_startofpacket;                                                               // rsp_demux:src1_startofpacket -> crosser_005:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                 // rsp_demux:src1_endofpacket -> crosser_005:in_endofpacket
	wire          crosser_005_out_valid;                                                                      // crosser_005:out_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] crosser_005_out_data;                                                                       // crosser_005:out_data -> rsp_mux_001:sink0_data
	wire          crosser_005_out_ready;                                                                      // rsp_mux_001:sink0_ready -> crosser_005:out_ready
	wire   [21:0] crosser_005_out_channel;                                                                    // crosser_005:out_channel -> rsp_mux_001:sink0_channel
	wire          crosser_005_out_startofpacket;                                                              // crosser_005:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          crosser_005_out_endofpacket;                                                                // crosser_005:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                       // rsp_demux:src2_valid -> crosser_006:in_valid
	wire  [111:0] rsp_demux_src2_data;                                                                        // rsp_demux:src2_data -> crosser_006:in_data
	wire          rsp_demux_src2_ready;                                                                       // crosser_006:in_ready -> rsp_demux:src2_ready
	wire   [21:0] rsp_demux_src2_channel;                                                                     // rsp_demux:src2_channel -> crosser_006:in_channel
	wire          rsp_demux_src2_startofpacket;                                                               // rsp_demux:src2_startofpacket -> crosser_006:in_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                 // rsp_demux:src2_endofpacket -> crosser_006:in_endofpacket
	wire          crosser_006_out_valid;                                                                      // crosser_006:out_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] crosser_006_out_data;                                                                       // crosser_006:out_data -> rsp_mux_002:sink0_data
	wire          crosser_006_out_ready;                                                                      // rsp_mux_002:sink0_ready -> crosser_006:out_ready
	wire   [21:0] crosser_006_out_channel;                                                                    // crosser_006:out_channel -> rsp_mux_002:sink0_channel
	wire          crosser_006_out_startofpacket;                                                              // crosser_006:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          crosser_006_out_endofpacket;                                                                // crosser_006:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                   // rsp_demux_014:src0_valid -> crosser_007:in_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                                    // rsp_demux_014:src0_data -> crosser_007:in_data
	wire          rsp_demux_014_src0_ready;                                                                   // crosser_007:in_ready -> rsp_demux_014:src0_ready
	wire   [21:0] rsp_demux_014_src0_channel;                                                                 // rsp_demux_014:src0_channel -> crosser_007:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                           // rsp_demux_014:src0_startofpacket -> crosser_007:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                             // rsp_demux_014:src0_endofpacket -> crosser_007:in_endofpacket
	wire          crosser_007_out_valid;                                                                      // crosser_007:out_valid -> rsp_mux_001:sink6_valid
	wire  [111:0] crosser_007_out_data;                                                                       // crosser_007:out_data -> rsp_mux_001:sink6_data
	wire          crosser_007_out_ready;                                                                      // rsp_mux_001:sink6_ready -> crosser_007:out_ready
	wire   [21:0] crosser_007_out_channel;                                                                    // crosser_007:out_channel -> rsp_mux_001:sink6_channel
	wire          crosser_007_out_startofpacket;                                                              // crosser_007:out_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire          crosser_007_out_endofpacket;                                                                // crosser_007:out_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire   [21:0] sysaudio_nios_ii_data_master_limiter_cmd_valid_data;                                        // SysAudio_NIOS_II_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid
	wire   [21:0] syssigproc_nios_ii_data_master_limiter_cmd_valid_data;                                      // SysSigProc_NIOS_II_data_master_limiter:cmd_src_valid -> cmd_demux_002:sink_valid
	wire   [21:0] sysaudio_nios_ii_instruction_master_limiter_cmd_valid_data;                                 // SysAudio_NIOS_II_instruction_master_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire   [21:0] syssigproc_nios_ii_instruction_master_limiter_cmd_valid_data;                               // SysSigProc_NIOS_II_instruction_master_limiter:cmd_src_valid -> cmd_demux_004:sink_valid
	wire          sdram_controller_shared_s1_agent_rdata_fifo_out_valid;                                      // SDRAM_Controller_Shared_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [17:0] sdram_controller_shared_s1_agent_rdata_fifo_out_data;                                       // SDRAM_Controller_Shared_s1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          sdram_controller_shared_s1_agent_rdata_fifo_out_ready;                                      // avalon_st_adapter:in_0_ready -> SDRAM_Controller_Shared_s1_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                                              // avalon_st_adapter:out_0_valid -> SDRAM_Controller_Shared_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_out_0_data;                                                               // avalon_st_adapter:out_0_data -> SDRAM_Controller_Shared_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                              // SDRAM_Controller_Shared_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                              // avalon_st_adapter:out_0_error -> SDRAM_Controller_Shared_s1_agent:rdata_fifo_sink_error
	wire          syssigproc_hw_accelerator_as_agent_rdata_fifo_src_valid;                                    // SysSigProc_HW_accelerator_as_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] syssigproc_hw_accelerator_as_agent_rdata_fifo_src_data;                                     // SysSigProc_HW_accelerator_as_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          syssigproc_hw_accelerator_as_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_001:in_0_ready -> SysSigProc_HW_accelerator_as_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                          // avalon_st_adapter_001:out_0_valid -> SysSigProc_HW_accelerator_as_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                           // avalon_st_adapter_001:out_0_data -> SysSigProc_HW_accelerator_as_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                          // SysSigProc_HW_accelerator_as_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                          // avalon_st_adapter_001:out_0_error -> SysSigProc_HW_accelerator_as_agent:rdata_fifo_sink_error
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                          // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                           // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_002:in_0_ready -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                          // avalon_st_adapter_002:out_0_valid -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                           // avalon_st_adapter_002:out_0_data -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                          // SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                          // avalon_st_adapter_002:out_0_error -> SysSigProc_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_003:in_0_ready -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                          // avalon_st_adapter_003:out_0_valid -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                           // avalon_st_adapter_003:out_0_data -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                          // Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                          // avalon_st_adapter_003:out_0_error -> Mailbox_AudioToSigProc_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_data;                           // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                          // avalon_st_adapter_004:out_0_valid -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                           // avalon_st_adapter_004:out_0_data -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                          // Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                          // avalon_st_adapter_004:out_0_error -> Mailbox_SigProcToAudio_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_valid;                    // SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_data;                     // SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_ready;                    // avalon_st_adapter_005:in_0_ready -> SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                          // avalon_st_adapter_005:out_0_valid -> SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                           // avalon_st_adapter_005:out_0_data -> SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                          // SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                          // avalon_st_adapter_005:out_0_error -> SysSigProc_Performance_Counter_control_slave_agent:rdata_fifo_sink_error
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid;                              // SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data;                               // SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_006:in_0_ready -> SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                          // avalon_st_adapter_006:out_0_valid -> SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                           // avalon_st_adapter_006:out_0_data -> SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                          // SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                          // avalon_st_adapter_006:out_0_error -> SysSigProc_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          syssigproc_onchip_memory_s1_agent_rdata_fifo_src_valid;                                     // SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] syssigproc_onchip_memory_s1_agent_rdata_fifo_src_data;                                      // SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          syssigproc_onchip_memory_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                          // avalon_st_adapter_007:out_0_valid -> SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                           // avalon_st_adapter_007:out_0_data -> SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                          // SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                          // avalon_st_adapter_007:out_0_error -> SysSigProc_Onchip_Memory_s1_agent:rdata_fifo_sink_error
	wire          pio_leds_shared_s1_agent_rdata_fifo_src_valid;                                              // PIO_LEDs_Shared_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] pio_leds_shared_s1_agent_rdata_fifo_src_data;                                               // PIO_LEDs_Shared_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          pio_leds_shared_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_008:in_0_ready -> PIO_LEDs_Shared_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                          // avalon_st_adapter_008:out_0_valid -> PIO_LEDs_Shared_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                           // avalon_st_adapter_008:out_0_data -> PIO_LEDs_Shared_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                          // PIO_LEDs_Shared_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                          // avalon_st_adapter_008:out_0_error -> PIO_LEDs_Shared_s1_agent:rdata_fifo_sink_error
	wire          pio_switches_s1_agent_rdata_fifo_src_valid;                                                 // PIO_Switches_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] pio_switches_s1_agent_rdata_fifo_src_data;                                                  // PIO_Switches_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          pio_switches_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_009:in_0_ready -> PIO_Switches_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                          // avalon_st_adapter_009:out_0_valid -> PIO_Switches_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                           // avalon_st_adapter_009:out_0_data -> PIO_Switches_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                          // PIO_Switches_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                          // avalon_st_adapter_009:out_0_error -> PIO_Switches_s1_agent:rdata_fifo_sink_error
	wire          pio_1st_7seg_s1_agent_rdata_fifo_src_valid;                                                 // PIO_1st_7seg_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] pio_1st_7seg_s1_agent_rdata_fifo_src_data;                                                  // PIO_1st_7seg_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          pio_1st_7seg_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_010:in_0_ready -> PIO_1st_7seg_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                          // avalon_st_adapter_010:out_0_valid -> PIO_1st_7seg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                           // avalon_st_adapter_010:out_0_data -> PIO_1st_7seg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                          // PIO_1st_7seg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                          // avalon_st_adapter_010:out_0_error -> PIO_1st_7seg_s1_agent:rdata_fifo_sink_error
	wire          pio_2nd_7seg_s1_agent_rdata_fifo_src_valid;                                                 // PIO_2nd_7seg_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] pio_2nd_7seg_s1_agent_rdata_fifo_src_data;                                                  // PIO_2nd_7seg_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          pio_2nd_7seg_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_011:in_0_ready -> PIO_2nd_7seg_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                          // avalon_st_adapter_011:out_0_valid -> PIO_2nd_7seg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                           // avalon_st_adapter_011:out_0_data -> PIO_2nd_7seg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                          // PIO_2nd_7seg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                          // avalon_st_adapter_011:out_0_error -> PIO_2nd_7seg_s1_agent:rdata_fifo_sink_error
	wire          pio_3rd_7seg_s1_agent_rdata_fifo_src_valid;                                                 // PIO_3rd_7seg_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] pio_3rd_7seg_s1_agent_rdata_fifo_src_data;                                                  // PIO_3rd_7seg_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          pio_3rd_7seg_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_012:in_0_ready -> PIO_3rd_7seg_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                          // avalon_st_adapter_012:out_0_valid -> PIO_3rd_7seg_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                           // avalon_st_adapter_012:out_0_data -> PIO_3rd_7seg_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                          // PIO_3rd_7seg_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                          // avalon_st_adapter_012:out_0_error -> PIO_3rd_7seg_s1_agent:rdata_fifo_sink_error
	wire          pio_debug_s1_agent_rdata_fifo_src_valid;                                                    // PIO_Debug_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] pio_debug_s1_agent_rdata_fifo_src_data;                                                     // PIO_Debug_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          pio_debug_s1_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_013:in_0_ready -> PIO_Debug_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                          // avalon_st_adapter_013:out_0_valid -> PIO_Debug_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                           // avalon_st_adapter_013:out_0_data -> PIO_Debug_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                          // PIO_Debug_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                          // avalon_st_adapter_013:out_0_error -> PIO_Debug_s1_agent:rdata_fifo_sink_error
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_valid;                          // SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_data;                           // SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_014:in_0_data
	wire          sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_014:in_0_ready -> SysAudio_Audio_Core_avalon_audio_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                          // avalon_st_adapter_014:out_0_valid -> SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                           // avalon_st_adapter_014:out_0_data -> SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                          // SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                          // avalon_st_adapter_014:out_0_error -> SysAudio_Audio_Core_avalon_audio_slave_agent:rdata_fifo_sink_error
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid;                       // SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_data;                        // SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready;                       // avalon_st_adapter_015:in_0_ready -> SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                          // avalon_st_adapter_015:out_0_valid -> SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                           // avalon_st_adapter_015:out_0_data -> SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                          // SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                          // avalon_st_adapter_015:out_0_error -> SysAudio_AV_Config_avalon_av_config_slave_agent:rdata_fifo_sink_error
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                            // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                             // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_016:in_0_ready -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                          // avalon_st_adapter_016:out_0_valid -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                           // avalon_st_adapter_016:out_0_data -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                          // SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                          // avalon_st_adapter_016:out_0_error -> SysAudio_JTAG_UART_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_valid;                        // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [33:0] mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_data;                         // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire          mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_ready;                        // avalon_st_adapter_017:in_0_ready -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_017_out_0_valid;                                                          // avalon_st_adapter_017:out_0_valid -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_017_out_0_data;                                                           // avalon_st_adapter_017:out_0_data -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_017_out_0_ready;                                                          // Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire    [0:0] avalon_st_adapter_017_out_0_error;                                                          // avalon_st_adapter_017:out_0_error -> Mailbox_SigProcToAudio_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_valid;                          // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [33:0] mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_data;                           // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire          mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_018:in_0_ready -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_018_out_0_valid;                                                          // avalon_st_adapter_018:out_0_valid -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_018_out_0_data;                                                           // avalon_st_adapter_018:out_0_data -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_018_out_0_ready;                                                          // Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire    [0:0] avalon_st_adapter_018_out_0_error;                                                          // avalon_st_adapter_018:out_0_error -> Mailbox_AudioToSigProc_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_valid;                      // SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [33:0] sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_data;                       // SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire          sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_ready;                      // avalon_st_adapter_019:in_0_ready -> SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_019_out_0_valid;                                                          // avalon_st_adapter_019:out_0_valid -> SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_019_out_0_data;                                                           // avalon_st_adapter_019:out_0_data -> SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_019_out_0_ready;                                                          // SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire    [0:0] avalon_st_adapter_019_out_0_error;                                                          // avalon_st_adapter_019:out_0_error -> SysAudio_Performance_Counter_control_slave_agent:rdata_fifo_sink_error
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid;                                // SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_020:in_0_valid
	wire   [33:0] sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data;                                 // SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_020:in_0_data
	wire          sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_020:in_0_ready -> SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_020_out_0_valid;                                                          // avalon_st_adapter_020:out_0_valid -> SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_020_out_0_data;                                                           // avalon_st_adapter_020:out_0_data -> SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_020_out_0_ready;                                                          // SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_020:out_0_ready
	wire    [0:0] avalon_st_adapter_020_out_0_error;                                                          // avalon_st_adapter_020:out_0_error -> SysAudio_NIOS_II_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          sysaudio_onchip_memory_s1_agent_rdata_fifo_src_valid;                                       // SysAudio_Onchip_Memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_021:in_0_valid
	wire   [33:0] sysaudio_onchip_memory_s1_agent_rdata_fifo_src_data;                                        // SysAudio_Onchip_Memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_021:in_0_data
	wire          sysaudio_onchip_memory_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_021:in_0_ready -> SysAudio_Onchip_Memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_021_out_0_valid;                                                          // avalon_st_adapter_021:out_0_valid -> SysAudio_Onchip_Memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_021_out_0_data;                                                           // avalon_st_adapter_021:out_0_data -> SysAudio_Onchip_Memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_021_out_0_ready;                                                          // SysAudio_Onchip_Memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_021:out_0_ready
	wire    [0:0] avalon_st_adapter_021_out_0_error;                                                          // avalon_st_adapter_021:out_0_error -> SysAudio_Onchip_Memory_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) syssigproc_hw_accelerator_avalon_master_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                                                     //                       clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SysSigProc_HW_accelerator_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SysSigProc_HW_accelerator_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (SysSigProc_HW_accelerator_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (SysSigProc_HW_accelerator_avalon_master_read),                                               //                          .read
		.av_readdata            (SysSigProc_HW_accelerator_avalon_master_readdata),                                           //                          .readdata
		.av_write               (SysSigProc_HW_accelerator_avalon_master_write),                                              //                          .write
		.av_writedata           (SysSigProc_HW_accelerator_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                                       //               (terminated)
		.av_readdatavalid       (),                                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                                       //               (terminated)
		.uav_clken              (),                                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                                      //               (terminated)
		.av_response            (),                                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sysaudio_nios_ii_data_master_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                                          //                       clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SysAudio_NIOS_II_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SysAudio_NIOS_II_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (SysAudio_NIOS_II_data_master_byteenable),                                         //                          .byteenable
		.av_read                (SysAudio_NIOS_II_data_master_read),                                               //                          .read
		.av_readdata            (SysAudio_NIOS_II_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (SysAudio_NIOS_II_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (SysAudio_NIOS_II_data_master_write),                                              //                          .write
		.av_writedata           (SysAudio_NIOS_II_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (SysAudio_NIOS_II_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                            //               (terminated)
		.uav_clken              (),                                                                                //               (terminated)
		.av_clken               (1'b1),                                                                            //               (terminated)
		.uav_response           (2'b00),                                                                           //               (terminated)
		.av_response            (),                                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) syssigproc_nios_ii_data_master_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                                            //                       clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SysSigProc_NIOS_II_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SysSigProc_NIOS_II_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (SysSigProc_NIOS_II_data_master_byteenable),                                         //                          .byteenable
		.av_read                (SysSigProc_NIOS_II_data_master_read),                                               //                          .read
		.av_readdata            (SysSigProc_NIOS_II_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (SysSigProc_NIOS_II_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (SysSigProc_NIOS_II_data_master_write),                                              //                          .write
		.av_writedata           (SysSigProc_NIOS_II_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (SysSigProc_NIOS_II_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                              //               (terminated)
		.uav_clken              (),                                                                                  //               (terminated)
		.av_clken               (1'b1),                                                                              //               (terminated)
		.uav_response           (2'b00),                                                                             //               (terminated)
		.av_response            (),                                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sysaudio_nios_ii_instruction_master_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                                                 //                       clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SysAudio_NIOS_II_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SysAudio_NIOS_II_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (SysAudio_NIOS_II_instruction_master_read),                                               //                          .read
		.av_readdata            (SysAudio_NIOS_II_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (SysAudio_NIOS_II_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                   //               (terminated)
		.av_byteenable          (4'b1111),                                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                   //               (terminated)
		.av_begintransfer       (1'b0),                                                                                   //               (terminated)
		.av_chipselect          (1'b0),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                                   //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                   //               (terminated)
		.av_lock                (1'b0),                                                                                   //               (terminated)
		.av_debugaccess         (1'b0),                                                                                   //               (terminated)
		.uav_clken              (),                                                                                       //               (terminated)
		.av_clken               (1'b1),                                                                                   //               (terminated)
		.uav_response           (2'b00),                                                                                  //               (terminated)
		.av_response            (),                                                                                       //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                   //               (terminated)
		.av_writeresponsevalid  ()                                                                                        //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (27),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) syssigproc_nios_ii_instruction_master_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                                                   //                       clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (SysSigProc_NIOS_II_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (SysSigProc_NIOS_II_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (SysSigProc_NIOS_II_instruction_master_read),                                               //                          .read
		.av_readdata            (SysSigProc_NIOS_II_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (SysSigProc_NIOS_II_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                                     //               (terminated)
		.av_write               (1'b0),                                                                                     //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                     //               (terminated)
		.av_lock                (1'b0),                                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                                     //               (terminated)
		.uav_clken              (),                                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                                    //               (terminated)
		.av_response            (),                                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                                          //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sdram_controller_shared_s1_translator (
		.clk                    (PLL_Shared_outclk1_clk),                                    //                      clk.clk
		.reset                  (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sdram_controller_shared_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sdram_controller_shared_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sdram_controller_shared_s1_agent_m0_read),                  //                         .read
		.uav_write              (sdram_controller_shared_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sdram_controller_shared_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sdram_controller_shared_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sdram_controller_shared_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sdram_controller_shared_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sdram_controller_shared_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sdram_controller_shared_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sdram_controller_shared_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (SDRAM_Controller_Shared_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (SDRAM_Controller_Shared_s1_write),                          //                         .write
		.av_read                (SDRAM_Controller_Shared_s1_read),                           //                         .read
		.av_readdata            (SDRAM_Controller_Shared_s1_readdata),                       //                         .readdata
		.av_writedata           (SDRAM_Controller_Shared_s1_writedata),                      //                         .writedata
		.av_byteenable          (SDRAM_Controller_Shared_s1_byteenable),                     //                         .byteenable
		.av_readdatavalid       (SDRAM_Controller_Shared_s1_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (SDRAM_Controller_Shared_s1_waitrequest),                    //                         .waitrequest
		.av_chipselect          (SDRAM_Controller_Shared_s1_chipselect),                     //                         .chipselect
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) syssigproc_hw_accelerator_as_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (syssigproc_hw_accelerator_as_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (syssigproc_hw_accelerator_as_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (syssigproc_hw_accelerator_as_agent_m0_read),                       //                         .read
		.uav_write              (syssigproc_hw_accelerator_as_agent_m0_write),                      //                         .write
		.uav_waitrequest        (syssigproc_hw_accelerator_as_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (syssigproc_hw_accelerator_as_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (syssigproc_hw_accelerator_as_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (syssigproc_hw_accelerator_as_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (syssigproc_hw_accelerator_as_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (syssigproc_hw_accelerator_as_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (syssigproc_hw_accelerator_as_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (SysSigProc_HW_accelerator_as_address),                             //      avalon_anti_slave_0.address
		.av_write               (SysSigProc_HW_accelerator_as_write),                               //                         .write
		.av_read                (SysSigProc_HW_accelerator_as_read),                                //                         .read
		.av_readdata            (SysSigProc_HW_accelerator_as_readdata),                            //                         .readdata
		.av_writedata           (SysSigProc_HW_accelerator_as_writedata),                           //                         .writedata
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) syssigproc_jtag_uart_avalon_jtag_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_read),             //                         .read
		.uav_write              (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_write),            //                         .write
		.uav_waitrequest        (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_writedata),        //                         .writedata
		.uav_lock               (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (SysSigProc_JTAG_UART_avalon_jtag_slave_address),                   //      avalon_anti_slave_0.address
		.av_write               (SysSigProc_JTAG_UART_avalon_jtag_slave_write),                     //                         .write
		.av_read                (SysSigProc_JTAG_UART_avalon_jtag_slave_read),                      //                         .read
		.av_readdata            (SysSigProc_JTAG_UART_avalon_jtag_slave_readdata),                  //                         .readdata
		.av_writedata           (SysSigProc_JTAG_UART_avalon_jtag_slave_writedata),                 //                         .writedata
		.av_waitrequest         (SysSigProc_JTAG_UART_avalon_jtag_slave_waitrequest),               //                         .waitrequest
		.av_chipselect          (SysSigProc_JTAG_UART_avalon_jtag_slave_chipselect),                //                         .chipselect
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_audiotosigproc_avmm_msg_receiver_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                          //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Mailbox_AudioToSigProc_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (Mailbox_AudioToSigProc_avmm_msg_receiver_write),                  //                         .write
		.av_read                (Mailbox_AudioToSigProc_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (Mailbox_AudioToSigProc_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (Mailbox_AudioToSigProc_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                                //              (terminated)
		.av_beginbursttransfer  (),                                                                //              (terminated)
		.av_burstcount          (),                                                                //              (terminated)
		.av_byteenable          (),                                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                                            //              (terminated)
		.av_waitrequest         (1'b0),                                                            //              (terminated)
		.av_writebyteenable     (),                                                                //              (terminated)
		.av_lock                (),                                                                //              (terminated)
		.av_chipselect          (),                                                                //              (terminated)
		.av_clken               (),                                                                //              (terminated)
		.uav_clken              (1'b0),                                                            //              (terminated)
		.av_debugaccess         (),                                                                //              (terminated)
		.av_outputenable        (),                                                                //              (terminated)
		.uav_response           (),                                                                //              (terminated)
		.av_response            (2'b00),                                                           //              (terminated)
		.uav_writeresponsevalid (),                                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_sigproctoaudio_avmm_msg_sender_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_read),             //                         .read
		.uav_write              (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_write),            //                         .write
		.uav_waitrequest        (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_writedata),        //                         .writedata
		.uav_lock               (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (Mailbox_SigProcToAudio_avmm_msg_sender_address),                   //      avalon_anti_slave_0.address
		.av_write               (Mailbox_SigProcToAudio_avmm_msg_sender_write),                     //                         .write
		.av_read                (Mailbox_SigProcToAudio_avmm_msg_sender_read),                      //                         .read
		.av_readdata            (Mailbox_SigProcToAudio_avmm_msg_sender_readdata),                  //                         .readdata
		.av_writedata           (Mailbox_SigProcToAudio_avmm_msg_sender_writedata),                 //                         .writedata
		.av_waitrequest         (Mailbox_SigProcToAudio_avmm_msg_sender_waitrequest),               //                         .waitrequest
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) syssigproc_performance_counter_control_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                              //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (syssigproc_performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (syssigproc_performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (syssigproc_performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write              (syssigproc_performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (syssigproc_performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (syssigproc_performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (syssigproc_performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (syssigproc_performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (syssigproc_performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (syssigproc_performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (syssigproc_performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysSigProc_Performance_Counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysSigProc_Performance_Counter_control_slave_write),                  //                         .write
		.av_readdata            (SysSigProc_Performance_Counter_control_slave_readdata),               //                         .readdata
		.av_writedata           (SysSigProc_Performance_Counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (SysSigProc_Performance_Counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                                    //              (terminated)
		.av_burstcount          (),                                                                    //              (terminated)
		.av_byteenable          (),                                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                                //              (terminated)
		.av_waitrequest         (1'b0),                                                                //              (terminated)
		.av_writebyteenable     (),                                                                    //              (terminated)
		.av_lock                (),                                                                    //              (terminated)
		.av_chipselect          (),                                                                    //              (terminated)
		.av_clken               (),                                                                    //              (terminated)
		.uav_clken              (1'b0),                                                                //              (terminated)
		.av_debugaccess         (),                                                                    //              (terminated)
		.av_outputenable        (),                                                                    //              (terminated)
		.uav_response           (),                                                                    //              (terminated)
		.av_response            (2'b00),                                                               //              (terminated)
		.uav_writeresponsevalid (),                                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) syssigproc_nios_ii_debug_mem_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (syssigproc_nios_ii_debug_mem_slave_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (syssigproc_nios_ii_debug_mem_slave_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (syssigproc_nios_ii_debug_mem_slave_agent_m0_read),                 //                         .read
		.uav_write              (syssigproc_nios_ii_debug_mem_slave_agent_m0_write),                //                         .write
		.uav_waitrequest        (syssigproc_nios_ii_debug_mem_slave_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (syssigproc_nios_ii_debug_mem_slave_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (syssigproc_nios_ii_debug_mem_slave_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (syssigproc_nios_ii_debug_mem_slave_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (syssigproc_nios_ii_debug_mem_slave_agent_m0_writedata),            //                         .writedata
		.uav_lock               (syssigproc_nios_ii_debug_mem_slave_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (syssigproc_nios_ii_debug_mem_slave_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (SysSigProc_NIOS_II_debug_mem_slave_address),                       //      avalon_anti_slave_0.address
		.av_write               (SysSigProc_NIOS_II_debug_mem_slave_write),                         //                         .write
		.av_read                (SysSigProc_NIOS_II_debug_mem_slave_read),                          //                         .read
		.av_readdata            (SysSigProc_NIOS_II_debug_mem_slave_readdata),                      //                         .readdata
		.av_writedata           (SysSigProc_NIOS_II_debug_mem_slave_writedata),                     //                         .writedata
		.av_byteenable          (SysSigProc_NIOS_II_debug_mem_slave_byteenable),                    //                         .byteenable
		.av_waitrequest         (SysSigProc_NIOS_II_debug_mem_slave_waitrequest),                   //                         .waitrequest
		.av_debugaccess         (SysSigProc_NIOS_II_debug_mem_slave_debugaccess),                   //                         .debugaccess
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) syssigproc_onchip_memory_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (syssigproc_onchip_memory_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (syssigproc_onchip_memory_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (syssigproc_onchip_memory_s1_agent_m0_read),                        //                         .read
		.uav_write              (syssigproc_onchip_memory_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (syssigproc_onchip_memory_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (syssigproc_onchip_memory_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (syssigproc_onchip_memory_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (syssigproc_onchip_memory_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (syssigproc_onchip_memory_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (syssigproc_onchip_memory_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (syssigproc_onchip_memory_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (SysSigProc_Onchip_Memory_s1_address),                              //      avalon_anti_slave_0.address
		.av_write               (SysSigProc_Onchip_Memory_s1_write),                                //                         .write
		.av_readdata            (SysSigProc_Onchip_Memory_s1_readdata),                             //                         .readdata
		.av_writedata           (SysSigProc_Onchip_Memory_s1_writedata),                            //                         .writedata
		.av_byteenable          (SysSigProc_Onchip_Memory_s1_byteenable),                           //                         .byteenable
		.av_chipselect          (SysSigProc_Onchip_Memory_s1_chipselect),                           //                         .chipselect
		.av_clken               (SysSigProc_Onchip_Memory_s1_clken),                                //                         .clken
		.av_read                (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_leds_shared_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                            //                      clk.clk
		.reset                  (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_leds_shared_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pio_leds_shared_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pio_leds_shared_s1_agent_m0_read),                  //                         .read
		.uav_write              (pio_leds_shared_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pio_leds_shared_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pio_leds_shared_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pio_leds_shared_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pio_leds_shared_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pio_leds_shared_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pio_leds_shared_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pio_leds_shared_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (PIO_LEDs_Shared_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (PIO_LEDs_Shared_s1_write),                          //                         .write
		.av_readdata            (PIO_LEDs_Shared_s1_readdata),                       //                         .readdata
		.av_writedata           (PIO_LEDs_Shared_s1_writedata),                      //                         .writedata
		.av_chipselect          (PIO_LEDs_Shared_s1_chipselect),                     //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_switches_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                            //                      clk.clk
		.reset                  (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_switches_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (pio_switches_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (pio_switches_s1_agent_m0_read),                     //                         .read
		.uav_write              (pio_switches_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (pio_switches_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (pio_switches_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (pio_switches_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (pio_switches_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (pio_switches_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (pio_switches_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (pio_switches_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (PIO_Switches_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (PIO_Switches_s1_write),                             //                         .write
		.av_readdata            (PIO_Switches_s1_readdata),                          //                         .readdata
		.av_writedata           (PIO_Switches_s1_writedata),                         //                         .writedata
		.av_chipselect          (PIO_Switches_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_1st_7seg_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                             //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_1st_7seg_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pio_1st_7seg_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pio_1st_7seg_s1_agent_m0_read),                      //                         .read
		.uav_write              (pio_1st_7seg_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pio_1st_7seg_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pio_1st_7seg_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pio_1st_7seg_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pio_1st_7seg_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pio_1st_7seg_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pio_1st_7seg_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pio_1st_7seg_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (PIO_1st_7seg_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (PIO_1st_7seg_s1_write),                              //                         .write
		.av_readdata            (PIO_1st_7seg_s1_readdata),                           //                         .readdata
		.av_writedata           (PIO_1st_7seg_s1_writedata),                          //                         .writedata
		.av_chipselect          (PIO_1st_7seg_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_2nd_7seg_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                             //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_2nd_7seg_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pio_2nd_7seg_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pio_2nd_7seg_s1_agent_m0_read),                      //                         .read
		.uav_write              (pio_2nd_7seg_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pio_2nd_7seg_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pio_2nd_7seg_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pio_2nd_7seg_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pio_2nd_7seg_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pio_2nd_7seg_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pio_2nd_7seg_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pio_2nd_7seg_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (PIO_2nd_7seg_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (PIO_2nd_7seg_s1_write),                              //                         .write
		.av_readdata            (PIO_2nd_7seg_s1_readdata),                           //                         .readdata
		.av_writedata           (PIO_2nd_7seg_s1_writedata),                          //                         .writedata
		.av_chipselect          (PIO_2nd_7seg_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_3rd_7seg_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                             //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_3rd_7seg_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pio_3rd_7seg_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pio_3rd_7seg_s1_agent_m0_read),                      //                         .read
		.uav_write              (pio_3rd_7seg_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pio_3rd_7seg_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pio_3rd_7seg_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pio_3rd_7seg_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pio_3rd_7seg_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pio_3rd_7seg_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pio_3rd_7seg_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pio_3rd_7seg_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (PIO_3rd_7seg_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (PIO_3rd_7seg_s1_write),                              //                         .write
		.av_readdata            (PIO_3rd_7seg_s1_readdata),                           //                         .readdata
		.av_writedata           (PIO_3rd_7seg_s1_writedata),                          //                         .writedata
		.av_chipselect          (PIO_3rd_7seg_s1_chipselect),                         //                         .chipselect
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_debug_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_debug_s1_agent_m0_address),                                    // avalon_universal_slave_0.address
		.uav_burstcount         (pio_debug_s1_agent_m0_burstcount),                                 //                         .burstcount
		.uav_read               (pio_debug_s1_agent_m0_read),                                       //                         .read
		.uav_write              (pio_debug_s1_agent_m0_write),                                      //                         .write
		.uav_waitrequest        (pio_debug_s1_agent_m0_waitrequest),                                //                         .waitrequest
		.uav_readdatavalid      (pio_debug_s1_agent_m0_readdatavalid),                              //                         .readdatavalid
		.uav_byteenable         (pio_debug_s1_agent_m0_byteenable),                                 //                         .byteenable
		.uav_readdata           (pio_debug_s1_agent_m0_readdata),                                   //                         .readdata
		.uav_writedata          (pio_debug_s1_agent_m0_writedata),                                  //                         .writedata
		.uav_lock               (pio_debug_s1_agent_m0_lock),                                       //                         .lock
		.uav_debugaccess        (pio_debug_s1_agent_m0_debugaccess),                                //                         .debugaccess
		.av_address             (PIO_Debug_s1_address),                                             //      avalon_anti_slave_0.address
		.av_write               (PIO_Debug_s1_write),                                               //                         .write
		.av_readdata            (PIO_Debug_s1_readdata),                                            //                         .readdata
		.av_writedata           (PIO_Debug_s1_writedata),                                           //                         .writedata
		.av_chipselect          (PIO_Debug_s1_chipselect),                                          //                         .chipselect
		.av_read                (),                                                                 //              (terminated)
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_audio_core_avalon_audio_slave_translator (
		.clk                    (SysAudio_Audio_Clock_audio_clk_clk),                            //                      clk.clk
		.reset                  (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address            (sysaudio_audio_core_avalon_audio_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_audio_core_avalon_audio_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysaudio_audio_core_avalon_audio_slave_agent_m0_read),          //                         .read
		.uav_write              (sysaudio_audio_core_avalon_audio_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysaudio_audio_core_avalon_audio_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysaudio_audio_core_avalon_audio_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysaudio_audio_core_avalon_audio_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysaudio_audio_core_avalon_audio_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysaudio_audio_core_avalon_audio_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysaudio_audio_core_avalon_audio_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysaudio_audio_core_avalon_audio_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysAudio_Audio_Core_avalon_audio_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysAudio_Audio_Core_avalon_audio_slave_write),                  //                         .write
		.av_read                (SysAudio_Audio_Core_avalon_audio_slave_read),                   //                         .read
		.av_readdata            (SysAudio_Audio_Core_avalon_audio_slave_readdata),               //                         .readdata
		.av_writedata           (SysAudio_Audio_Core_avalon_audio_slave_writedata),              //                         .writedata
		.av_chipselect          (SysAudio_Audio_Core_avalon_audio_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_waitrequest         (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_av_config_avalon_av_config_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),               //                    reset.reset
		.uav_address            (sysaudio_av_config_avalon_av_config_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_av_config_avalon_av_config_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysaudio_av_config_avalon_av_config_slave_agent_m0_read),          //                         .read
		.uav_write              (sysaudio_av_config_avalon_av_config_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysaudio_av_config_avalon_av_config_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysaudio_av_config_avalon_av_config_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysaudio_av_config_avalon_av_config_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysaudio_av_config_avalon_av_config_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysaudio_av_config_avalon_av_config_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysaudio_av_config_avalon_av_config_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysaudio_av_config_avalon_av_config_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysAudio_AV_Config_avalon_av_config_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysAudio_AV_Config_avalon_av_config_slave_write),                  //                         .write
		.av_read                (SysAudio_AV_Config_avalon_av_config_slave_read),                   //                         .read
		.av_readdata            (SysAudio_AV_Config_avalon_av_config_slave_readdata),               //                         .readdata
		.av_writedata           (SysAudio_AV_Config_avalon_av_config_slave_writedata),              //                         .writedata
		.av_byteenable          (SysAudio_AV_Config_avalon_av_config_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (SysAudio_AV_Config_avalon_av_config_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_jtag_uart_avalon_jtag_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                      //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysAudio_JTAG_UART_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysAudio_JTAG_UART_avalon_jtag_slave_write),                  //                         .write
		.av_read                (SysAudio_JTAG_UART_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (SysAudio_JTAG_UART_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (SysAudio_JTAG_UART_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (SysAudio_JTAG_UART_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (SysAudio_JTAG_UART_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_sigproctoaudio_avmm_msg_receiver_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                           //                      clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_read),           //                         .read
		.uav_write              (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_write),          //                         .write
		.uav_waitrequest        (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_writedata),      //                         .writedata
		.uav_lock               (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (Mailbox_SigProcToAudio_avmm_msg_receiver_address),                 //      avalon_anti_slave_0.address
		.av_write               (Mailbox_SigProcToAudio_avmm_msg_receiver_write),                   //                         .write
		.av_read                (Mailbox_SigProcToAudio_avmm_msg_receiver_read),                    //                         .read
		.av_readdata            (Mailbox_SigProcToAudio_avmm_msg_receiver_readdata),                //                         .readdata
		.av_writedata           (Mailbox_SigProcToAudio_avmm_msg_receiver_writedata),               //                         .writedata
		.av_begintransfer       (),                                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                                 //              (terminated)
		.av_burstcount          (),                                                                 //              (terminated)
		.av_byteenable          (),                                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                                             //              (terminated)
		.av_waitrequest         (1'b0),                                                             //              (terminated)
		.av_writebyteenable     (),                                                                 //              (terminated)
		.av_lock                (),                                                                 //              (terminated)
		.av_chipselect          (),                                                                 //              (terminated)
		.av_clken               (),                                                                 //              (terminated)
		.uav_clken              (1'b0),                                                             //              (terminated)
		.av_debugaccess         (),                                                                 //              (terminated)
		.av_outputenable        (),                                                                 //              (terminated)
		.uav_response           (),                                                                 //              (terminated)
		.av_response            (2'b00),                                                            //              (terminated)
		.uav_writeresponsevalid (),                                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_audiotosigproc_avmm_msg_sender_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                        //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (Mailbox_AudioToSigProc_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (Mailbox_AudioToSigProc_avmm_msg_sender_write),                  //                         .write
		.av_read                (Mailbox_AudioToSigProc_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (Mailbox_AudioToSigProc_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (Mailbox_AudioToSigProc_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (Mailbox_AudioToSigProc_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                              //              (terminated)
		.av_beginbursttransfer  (),                                                              //              (terminated)
		.av_burstcount          (),                                                              //              (terminated)
		.av_byteenable          (),                                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                                          //              (terminated)
		.av_writebyteenable     (),                                                              //              (terminated)
		.av_lock                (),                                                              //              (terminated)
		.av_chipselect          (),                                                              //              (terminated)
		.av_clken               (),                                                              //              (terminated)
		.uav_clken              (1'b0),                                                          //              (terminated)
		.av_debugaccess         (),                                                              //              (terminated)
		.av_outputenable        (),                                                              //              (terminated)
		.uav_response           (),                                                              //              (terminated)
		.av_response            (2'b00),                                                         //              (terminated)
		.uav_writeresponsevalid (),                                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_performance_counter_control_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                            //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address            (sysaudio_performance_counter_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_performance_counter_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysaudio_performance_counter_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysaudio_performance_counter_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysaudio_performance_counter_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysaudio_performance_counter_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysaudio_performance_counter_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysaudio_performance_counter_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysaudio_performance_counter_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysaudio_performance_counter_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysaudio_performance_counter_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysAudio_Performance_Counter_control_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysAudio_Performance_Counter_control_slave_write),                  //                         .write
		.av_readdata            (SysAudio_Performance_Counter_control_slave_readdata),               //                         .readdata
		.av_writedata           (SysAudio_Performance_Counter_control_slave_writedata),              //                         .writedata
		.av_begintransfer       (SysAudio_Performance_Counter_control_slave_begintransfer),          //                         .begintransfer
		.av_read                (),                                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                                  //              (terminated)
		.av_burstcount          (),                                                                  //              (terminated)
		.av_byteenable          (),                                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                                              //              (terminated)
		.av_waitrequest         (1'b0),                                                              //              (terminated)
		.av_writebyteenable     (),                                                                  //              (terminated)
		.av_lock                (),                                                                  //              (terminated)
		.av_chipselect          (),                                                                  //              (terminated)
		.av_clken               (),                                                                  //              (terminated)
		.uav_clken              (1'b0),                                                              //              (terminated)
		.av_debugaccess         (),                                                                  //              (terminated)
		.av_outputenable        (),                                                                  //              (terminated)
		.uav_response           (),                                                                  //              (terminated)
		.av_response            (2'b00),                                                             //              (terminated)
		.uav_writeresponsevalid (),                                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_nios_ii_debug_mem_slave_translator (
		.clk                    (PLL_Shared_outclk0_clk),                                  //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (sysaudio_nios_ii_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_nios_ii_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysaudio_nios_ii_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (sysaudio_nios_ii_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysaudio_nios_ii_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysaudio_nios_ii_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysaudio_nios_ii_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysaudio_nios_ii_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysaudio_nios_ii_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysaudio_nios_ii_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysaudio_nios_ii_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (SysAudio_NIOS_II_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (SysAudio_NIOS_II_debug_mem_slave_write),                  //                         .write
		.av_read                (SysAudio_NIOS_II_debug_mem_slave_read),                   //                         .read
		.av_readdata            (SysAudio_NIOS_II_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (SysAudio_NIOS_II_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (SysAudio_NIOS_II_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (SysAudio_NIOS_II_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (SysAudio_NIOS_II_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                        //              (terminated)
		.av_beginbursttransfer  (),                                                        //              (terminated)
		.av_burstcount          (),                                                        //              (terminated)
		.av_readdatavalid       (1'b0),                                                    //              (terminated)
		.av_writebyteenable     (),                                                        //              (terminated)
		.av_lock                (),                                                        //              (terminated)
		.av_chipselect          (),                                                        //              (terminated)
		.av_clken               (),                                                        //              (terminated)
		.uav_clken              (1'b0),                                                    //              (terminated)
		.av_outputenable        (),                                                        //              (terminated)
		.uav_response           (),                                                        //              (terminated)
		.av_response            (2'b00),                                                   //              (terminated)
		.uav_writeresponsevalid (),                                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (15),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysaudio_onchip_memory_s1_translator (
		.clk                    (PLL_Shared_outclk0_clk),                             //                      clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysaudio_onchip_memory_s1_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (sysaudio_onchip_memory_s1_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (sysaudio_onchip_memory_s1_agent_m0_read),            //                         .read
		.uav_write              (sysaudio_onchip_memory_s1_agent_m0_write),           //                         .write
		.uav_waitrequest        (sysaudio_onchip_memory_s1_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (sysaudio_onchip_memory_s1_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (sysaudio_onchip_memory_s1_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (sysaudio_onchip_memory_s1_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (sysaudio_onchip_memory_s1_agent_m0_writedata),       //                         .writedata
		.uav_lock               (sysaudio_onchip_memory_s1_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (sysaudio_onchip_memory_s1_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (SysAudio_Onchip_Memory_s1_address),                  //      avalon_anti_slave_0.address
		.av_write               (SysAudio_Onchip_Memory_s1_write),                    //                         .write
		.av_readdata            (SysAudio_Onchip_Memory_s1_readdata),                 //                         .readdata
		.av_writedata           (SysAudio_Onchip_Memory_s1_writedata),                //                         .writedata
		.av_byteenable          (SysAudio_Onchip_Memory_s1_byteenable),               //                         .byteenable
		.av_chipselect          (SysAudio_Onchip_Memory_s1_chipselect),               //                         .chipselect
		.av_clken               (SysAudio_Onchip_Memory_s1_clken),                    //                         .clken
		.av_read                (),                                                   //              (terminated)
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_waitrequest         (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) syssigproc_hw_accelerator_avalon_master_agent (
		.clk                   (PLL_Shared_outclk0_clk),                                                                     //       clk.clk
		.reset                 (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (syssigproc_hw_accelerator_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (syssigproc_hw_accelerator_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (syssigproc_hw_accelerator_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (syssigproc_hw_accelerator_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (syssigproc_hw_accelerator_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (syssigproc_hw_accelerator_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                          //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                           //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                        //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                    //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                          //          .ready
		.av_response           (),                                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysaudio_nios_ii_data_master_agent (
		.clk                   (PLL_Shared_outclk0_clk),                                                          //       clk.clk
		.reset                 (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sysaudio_nios_ii_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sysaudio_nios_ii_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sysaudio_nios_ii_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sysaudio_nios_ii_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sysaudio_nios_ii_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sysaudio_nios_ii_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (sysaudio_nios_ii_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (sysaudio_nios_ii_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (sysaudio_nios_ii_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (sysaudio_nios_ii_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (sysaudio_nios_ii_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (sysaudio_nios_ii_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                // (terminated)
		.av_writeresponsevalid ()                                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) syssigproc_nios_ii_data_master_agent (
		.clk                   (PLL_Shared_outclk0_clk),                                                            //       clk.clk
		.reset                 (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (syssigproc_nios_ii_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (syssigproc_nios_ii_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (syssigproc_nios_ii_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (syssigproc_nios_ii_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (syssigproc_nios_ii_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (syssigproc_nios_ii_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (syssigproc_nios_ii_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (syssigproc_nios_ii_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (syssigproc_nios_ii_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (syssigproc_nios_ii_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (syssigproc_nios_ii_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (syssigproc_nios_ii_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sysaudio_nios_ii_instruction_master_agent (
		.clk                   (PLL_Shared_outclk0_clk),                                                                 //       clk.clk
		.reset                 (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sysaudio_nios_ii_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sysaudio_nios_ii_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sysaudio_nios_ii_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sysaudio_nios_ii_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sysaudio_nios_ii_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sysaudio_nios_ii_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (sysaudio_nios_ii_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (sysaudio_nios_ii_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (sysaudio_nios_ii_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (sysaudio_nios_ii_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (sysaudio_nios_ii_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (sysaudio_nios_ii_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) syssigproc_nios_ii_instruction_master_agent (
		.clk                   (PLL_Shared_outclk0_clk),                                                                   //       clk.clk
		.reset                 (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (syssigproc_nios_ii_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (syssigproc_nios_ii_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (syssigproc_nios_ii_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (syssigproc_nios_ii_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (syssigproc_nios_ii_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (syssigproc_nios_ii_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (syssigproc_nios_ii_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (syssigproc_nios_ii_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (syssigproc_nios_ii_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (syssigproc_nios_ii_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (syssigproc_nios_ii_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (syssigproc_nios_ii_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sdram_controller_shared_s1_agent (
		.clk                     (PLL_Shared_outclk1_clk),                                         //             clk.clk
		.reset                   (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (sdram_controller_shared_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sdram_controller_shared_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sdram_controller_shared_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sdram_controller_shared_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sdram_controller_shared_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (sdram_controller_shared_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sdram_controller_shared_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sdram_controller_shared_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (sdram_controller_shared_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sdram_controller_shared_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (sdram_controller_shared_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (sdram_controller_shared_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sdram_controller_shared_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (sdram_controller_shared_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (sdram_controller_shared_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (sdram_controller_shared_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sdram_controller_shared_s1_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sdram_controller_shared_s1_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sdram_controller_shared_s1_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sdram_controller_shared_s1_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sdram_controller_shared_s1_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sdram_controller_shared_s1_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sdram_controller_shared_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sdram_controller_shared_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sdram_controller_shared_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sdram_controller_shared_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sdram_controller_shared_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sdram_controller_shared_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sdram_controller_shared_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sdram_controller_shared_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sdram_controller_shared_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sdram_controller_shared_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (sdram_controller_shared_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sdram_controller_shared_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sdram_controller_shared_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_shared_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk1_clk),                                      //       clk.clk
		.reset             (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sdram_controller_shared_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sdram_controller_shared_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sdram_controller_shared_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sdram_controller_shared_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sdram_controller_shared_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sdram_controller_shared_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sdram_controller_shared_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sdram_controller_shared_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sdram_controller_shared_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sdram_controller_shared_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sdram_controller_shared_s1_agent_rdata_fifo (
		.clk               (PLL_Shared_outclk1_clk),                                    //       clk.clk
		.reset             (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sdram_controller_shared_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sdram_controller_shared_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sdram_controller_shared_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sdram_controller_shared_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sdram_controller_shared_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sdram_controller_shared_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) syssigproc_hw_accelerator_as_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                           //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (syssigproc_hw_accelerator_as_agent_m0_address),                    //              m0.address
		.m0_burstcount           (syssigproc_hw_accelerator_as_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (syssigproc_hw_accelerator_as_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (syssigproc_hw_accelerator_as_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (syssigproc_hw_accelerator_as_agent_m0_lock),                       //                .lock
		.m0_readdata             (syssigproc_hw_accelerator_as_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (syssigproc_hw_accelerator_as_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (syssigproc_hw_accelerator_as_agent_m0_read),                       //                .read
		.m0_waitrequest          (syssigproc_hw_accelerator_as_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (syssigproc_hw_accelerator_as_agent_m0_writedata),                  //                .writedata
		.m0_write                (syssigproc_hw_accelerator_as_agent_m0_write),                      //                .write
		.rp_endofpacket          (syssigproc_hw_accelerator_as_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (syssigproc_hw_accelerator_as_agent_rp_ready),                      //                .ready
		.rp_valid                (syssigproc_hw_accelerator_as_agent_rp_valid),                      //                .valid
		.rp_data                 (syssigproc_hw_accelerator_as_agent_rp_data),                       //                .data
		.rp_startofpacket        (syssigproc_hw_accelerator_as_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                          //                .channel
		.rf_sink_ready           (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (syssigproc_hw_accelerator_as_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (syssigproc_hw_accelerator_as_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (syssigproc_hw_accelerator_as_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (syssigproc_hw_accelerator_as_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (syssigproc_hw_accelerator_as_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) syssigproc_hw_accelerator_as_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (syssigproc_hw_accelerator_as_agent_rf_source_data),                //        in.data
		.in_valid          (syssigproc_hw_accelerator_as_agent_rf_source_valid),               //          .valid
		.in_ready          (syssigproc_hw_accelerator_as_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (syssigproc_hw_accelerator_as_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (syssigproc_hw_accelerator_as_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (syssigproc_hw_accelerator_as_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) syssigproc_jtag_uart_avalon_jtag_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                  //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (syssigproc_jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                                 //                .channel
		.rf_sink_ready           (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                  //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (syssigproc_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (syssigproc_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_audiotosigproc_avmm_msg_receiver_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                    //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_audiotosigproc_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                                   //                .channel
		.rf_sink_ready           (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                    //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_audiotosigproc_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_audiotosigproc_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_sigproctoaudio_avmm_msg_sender_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                  //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_sigproctoaudio_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                                 //                .channel
		.rf_sink_ready           (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                  //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_sigproctoaudio_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_sigproctoaudio_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) syssigproc_performance_counter_control_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                        //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (syssigproc_performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (syssigproc_performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (syssigproc_performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (syssigproc_performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (syssigproc_performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (syssigproc_performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (syssigproc_performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (syssigproc_performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (syssigproc_performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (syssigproc_performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (syssigproc_performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (syssigproc_performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (syssigproc_performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (syssigproc_performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (syssigproc_performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (syssigproc_performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                                         //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                                         //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                                          //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                                                   //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                                       //                .channel
		.rf_sink_ready           (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (syssigproc_performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (syssigproc_performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (syssigproc_performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (syssigproc_performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (syssigproc_performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                                             //                .error
		.rdata_fifo_src_ready    (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) syssigproc_performance_counter_control_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                        //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (syssigproc_performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (syssigproc_performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (syssigproc_performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (syssigproc_performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (syssigproc_performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (syssigproc_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                         // (terminated)
		.csr_read          (1'b0),                                                                          // (terminated)
		.csr_write         (1'b0),                                                                          // (terminated)
		.csr_readdata      (),                                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                          // (terminated)
		.almost_full_data  (),                                                                              // (terminated)
		.almost_empty_data (),                                                                              // (terminated)
		.in_empty          (1'b0),                                                                          // (terminated)
		.out_empty         (),                                                                              // (terminated)
		.in_error          (1'b0),                                                                          // (terminated)
		.out_error         (),                                                                              // (terminated)
		.in_channel        (1'b0),                                                                          // (terminated)
		.out_channel       ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) syssigproc_nios_ii_debug_mem_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                              //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (syssigproc_nios_ii_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (syssigproc_nios_ii_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (syssigproc_nios_ii_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (syssigproc_nios_ii_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (syssigproc_nios_ii_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (syssigproc_nios_ii_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (syssigproc_nios_ii_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (syssigproc_nios_ii_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (syssigproc_nios_ii_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (syssigproc_nios_ii_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (syssigproc_nios_ii_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (syssigproc_nios_ii_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (syssigproc_nios_ii_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (syssigproc_nios_ii_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (syssigproc_nios_ii_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (syssigproc_nios_ii_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                             //                .channel
		.rf_sink_ready           (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                              //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (syssigproc_nios_ii_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (syssigproc_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) syssigproc_onchip_memory_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                           //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (syssigproc_onchip_memory_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (syssigproc_onchip_memory_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (syssigproc_onchip_memory_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (syssigproc_onchip_memory_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (syssigproc_onchip_memory_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (syssigproc_onchip_memory_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (syssigproc_onchip_memory_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (syssigproc_onchip_memory_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (syssigproc_onchip_memory_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (syssigproc_onchip_memory_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (syssigproc_onchip_memory_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (syssigproc_onchip_memory_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (syssigproc_onchip_memory_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (syssigproc_onchip_memory_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (syssigproc_onchip_memory_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (syssigproc_onchip_memory_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                          //                .channel
		.rf_sink_ready           (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (syssigproc_onchip_memory_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (syssigproc_onchip_memory_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (syssigproc_onchip_memory_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (syssigproc_onchip_memory_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (syssigproc_onchip_memory_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) syssigproc_onchip_memory_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (syssigproc_onchip_memory_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (syssigproc_onchip_memory_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (syssigproc_onchip_memory_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (syssigproc_onchip_memory_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (syssigproc_onchip_memory_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (syssigproc_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_leds_shared_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                              //             clk.clk
		.reset                   (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pio_leds_shared_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pio_leds_shared_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pio_leds_shared_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pio_leds_shared_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pio_leds_shared_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pio_leds_shared_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pio_leds_shared_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pio_leds_shared_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pio_leds_shared_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pio_leds_shared_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pio_leds_shared_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pio_leds_shared_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pio_leds_shared_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pio_leds_shared_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pio_leds_shared_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pio_leds_shared_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                             //                .channel
		.rf_sink_ready           (pio_leds_shared_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pio_leds_shared_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pio_leds_shared_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pio_leds_shared_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pio_leds_shared_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pio_leds_shared_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pio_leds_shared_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pio_leds_shared_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pio_leds_shared_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pio_leds_shared_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (pio_leds_shared_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_leds_shared_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pio_leds_shared_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_leds_shared_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                              //       clk.clk
		.reset             (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pio_leds_shared_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pio_leds_shared_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pio_leds_shared_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pio_leds_shared_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pio_leds_shared_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pio_leds_shared_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pio_leds_shared_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pio_leds_shared_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pio_leds_shared_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pio_leds_shared_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_switches_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                            //             clk.clk
		.reset                   (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_switches_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (pio_switches_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (pio_switches_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (pio_switches_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (pio_switches_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (pio_switches_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (pio_switches_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (pio_switches_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (pio_switches_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (pio_switches_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (pio_switches_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (pio_switches_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (pio_switches_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (pio_switches_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (pio_switches_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (pio_switches_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_009_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                           //                .channel
		.rf_sink_ready           (pio_switches_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (pio_switches_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (pio_switches_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (pio_switches_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (pio_switches_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (pio_switches_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (pio_switches_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (pio_switches_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (pio_switches_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (pio_switches_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pio_switches_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_switches_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (pio_switches_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_switches_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset             (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_switches_s1_agent_rf_source_data),              //        in.data
		.in_valid          (pio_switches_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (pio_switches_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (pio_switches_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (pio_switches_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (pio_switches_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (pio_switches_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (pio_switches_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (pio_switches_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (pio_switches_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_1st_7seg_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                             //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_1st_7seg_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (pio_1st_7seg_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (pio_1st_7seg_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (pio_1st_7seg_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (pio_1st_7seg_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (pio_1st_7seg_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (pio_1st_7seg_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (pio_1st_7seg_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (pio_1st_7seg_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (pio_1st_7seg_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (pio_1st_7seg_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (pio_1st_7seg_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (pio_1st_7seg_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (pio_1st_7seg_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (pio_1st_7seg_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (pio_1st_7seg_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_010_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                            //                .channel
		.rf_sink_ready           (pio_1st_7seg_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (pio_1st_7seg_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (pio_1st_7seg_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (pio_1st_7seg_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (pio_1st_7seg_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (pio_1st_7seg_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (pio_1st_7seg_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (pio_1st_7seg_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (pio_1st_7seg_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (pio_1st_7seg_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_1st_7seg_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_1st_7seg_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (pio_1st_7seg_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_1st_7seg_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_1st_7seg_s1_agent_rf_source_data),               //        in.data
		.in_valid          (pio_1st_7seg_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (pio_1st_7seg_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pio_1st_7seg_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pio_1st_7seg_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pio_1st_7seg_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pio_1st_7seg_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pio_1st_7seg_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pio_1st_7seg_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pio_1st_7seg_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_2nd_7seg_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                             //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_2nd_7seg_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (pio_2nd_7seg_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (pio_2nd_7seg_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (pio_2nd_7seg_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (pio_2nd_7seg_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (pio_2nd_7seg_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (pio_2nd_7seg_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (pio_2nd_7seg_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (pio_2nd_7seg_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (pio_2nd_7seg_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (pio_2nd_7seg_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (pio_2nd_7seg_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (pio_2nd_7seg_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (pio_2nd_7seg_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (pio_2nd_7seg_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (pio_2nd_7seg_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_011_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                            //                .channel
		.rf_sink_ready           (pio_2nd_7seg_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (pio_2nd_7seg_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (pio_2nd_7seg_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (pio_2nd_7seg_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (pio_2nd_7seg_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (pio_2nd_7seg_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (pio_2nd_7seg_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (pio_2nd_7seg_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (pio_2nd_7seg_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (pio_2nd_7seg_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_2nd_7seg_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_2nd_7seg_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (pio_2nd_7seg_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_2nd_7seg_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_2nd_7seg_s1_agent_rf_source_data),               //        in.data
		.in_valid          (pio_2nd_7seg_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (pio_2nd_7seg_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pio_2nd_7seg_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pio_2nd_7seg_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pio_2nd_7seg_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pio_2nd_7seg_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pio_2nd_7seg_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pio_2nd_7seg_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pio_2nd_7seg_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_3rd_7seg_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                             //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_3rd_7seg_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (pio_3rd_7seg_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (pio_3rd_7seg_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (pio_3rd_7seg_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (pio_3rd_7seg_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (pio_3rd_7seg_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (pio_3rd_7seg_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (pio_3rd_7seg_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (pio_3rd_7seg_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (pio_3rd_7seg_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (pio_3rd_7seg_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (pio_3rd_7seg_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (pio_3rd_7seg_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (pio_3rd_7seg_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (pio_3rd_7seg_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (pio_3rd_7seg_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_012_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                            //                .channel
		.rf_sink_ready           (pio_3rd_7seg_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (pio_3rd_7seg_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (pio_3rd_7seg_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (pio_3rd_7seg_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (pio_3rd_7seg_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (pio_3rd_7seg_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (pio_3rd_7seg_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (pio_3rd_7seg_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (pio_3rd_7seg_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (pio_3rd_7seg_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (pio_3rd_7seg_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_3rd_7seg_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (pio_3rd_7seg_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_3rd_7seg_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_3rd_7seg_s1_agent_rf_source_data),               //        in.data
		.in_valid          (pio_3rd_7seg_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (pio_3rd_7seg_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pio_3rd_7seg_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pio_3rd_7seg_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pio_3rd_7seg_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pio_3rd_7seg_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pio_3rd_7seg_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pio_3rd_7seg_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pio_3rd_7seg_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_debug_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                           //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_debug_s1_agent_m0_address),                                    //              m0.address
		.m0_burstcount           (pio_debug_s1_agent_m0_burstcount),                                 //                .burstcount
		.m0_byteenable           (pio_debug_s1_agent_m0_byteenable),                                 //                .byteenable
		.m0_debugaccess          (pio_debug_s1_agent_m0_debugaccess),                                //                .debugaccess
		.m0_lock                 (pio_debug_s1_agent_m0_lock),                                       //                .lock
		.m0_readdata             (pio_debug_s1_agent_m0_readdata),                                   //                .readdata
		.m0_readdatavalid        (pio_debug_s1_agent_m0_readdatavalid),                              //                .readdatavalid
		.m0_read                 (pio_debug_s1_agent_m0_read),                                       //                .read
		.m0_waitrequest          (pio_debug_s1_agent_m0_waitrequest),                                //                .waitrequest
		.m0_writedata            (pio_debug_s1_agent_m0_writedata),                                  //                .writedata
		.m0_write                (pio_debug_s1_agent_m0_write),                                      //                .write
		.rp_endofpacket          (pio_debug_s1_agent_rp_endofpacket),                                //              rp.endofpacket
		.rp_ready                (pio_debug_s1_agent_rp_ready),                                      //                .ready
		.rp_valid                (pio_debug_s1_agent_rp_valid),                                      //                .valid
		.rp_data                 (pio_debug_s1_agent_rp_data),                                       //                .data
		.rp_startofpacket        (pio_debug_s1_agent_rp_startofpacket),                              //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_013_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                                          //                .channel
		.rf_sink_ready           (pio_debug_s1_agent_rsp_fifo_out_ready),                            //         rf_sink.ready
		.rf_sink_valid           (pio_debug_s1_agent_rsp_fifo_out_valid),                            //                .valid
		.rf_sink_startofpacket   (pio_debug_s1_agent_rsp_fifo_out_startofpacket),                    //                .startofpacket
		.rf_sink_endofpacket     (pio_debug_s1_agent_rsp_fifo_out_endofpacket),                      //                .endofpacket
		.rf_sink_data            (pio_debug_s1_agent_rsp_fifo_out_data),                             //                .data
		.rf_source_ready         (pio_debug_s1_agent_rf_source_ready),                               //       rf_source.ready
		.rf_source_valid         (pio_debug_s1_agent_rf_source_valid),                               //                .valid
		.rf_source_startofpacket (pio_debug_s1_agent_rf_source_startofpacket),                       //                .startofpacket
		.rf_source_endofpacket   (pio_debug_s1_agent_rf_source_endofpacket),                         //                .endofpacket
		.rf_source_data          (pio_debug_s1_agent_rf_source_data),                                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                                //                .error
		.rdata_fifo_src_ready    (pio_debug_s1_agent_rdata_fifo_src_ready),                          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_debug_s1_agent_rdata_fifo_src_valid),                          //                .valid
		.rdata_fifo_src_data     (pio_debug_s1_agent_rdata_fifo_src_data),                           //                .data
		.m0_response             (2'b00),                                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_debug_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_debug_s1_agent_rf_source_data),                                //        in.data
		.in_valid          (pio_debug_s1_agent_rf_source_valid),                               //          .valid
		.in_ready          (pio_debug_s1_agent_rf_source_ready),                               //          .ready
		.in_startofpacket  (pio_debug_s1_agent_rf_source_startofpacket),                       //          .startofpacket
		.in_endofpacket    (pio_debug_s1_agent_rf_source_endofpacket),                         //          .endofpacket
		.out_data          (pio_debug_s1_agent_rsp_fifo_out_data),                             //       out.data
		.out_valid         (pio_debug_s1_agent_rsp_fifo_out_valid),                            //          .valid
		.out_ready         (pio_debug_s1_agent_rsp_fifo_out_ready),                            //          .ready
		.out_startofpacket (pio_debug_s1_agent_rsp_fifo_out_startofpacket),                    //          .startofpacket
		.out_endofpacket   (pio_debug_s1_agent_rsp_fifo_out_endofpacket),                      //          .endofpacket
		.csr_address       (2'b00),                                                            // (terminated)
		.csr_read          (1'b0),                                                             // (terminated)
		.csr_write         (1'b0),                                                             // (terminated)
		.csr_readdata      (),                                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                             // (terminated)
		.almost_full_data  (),                                                                 // (terminated)
		.almost_empty_data (),                                                                 // (terminated)
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.in_error          (1'b0),                                                             // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_channel        (1'b0),                                                             // (terminated)
		.out_channel       ()                                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_audio_core_avalon_audio_slave_agent (
		.clk                     (SysAudio_Audio_Clock_audio_clk_clk),                                      //             clk.clk
		.reset                   (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (sysaudio_audio_core_avalon_audio_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_audio_core_avalon_audio_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_audio_core_avalon_audio_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_audio_core_avalon_audio_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_audio_core_avalon_audio_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_audio_core_avalon_audio_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_audio_core_avalon_audio_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_audio_core_avalon_audio_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_audio_core_avalon_audio_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_audio_core_avalon_audio_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_audio_core_avalon_audio_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_audio_core_avalon_audio_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_audio_core_avalon_audio_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_audio_core_avalon_audio_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_audio_core_avalon_audio_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_audio_core_avalon_audio_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_014_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                                                 //                .channel
		.rf_sink_ready           (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo (
		.clk               (SysAudio_Audio_Clock_audio_clk_clk),                                      //       clk.clk
		.reset             (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_audio_core_avalon_audio_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_audio_core_avalon_audio_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo (
		.clk               (SysAudio_Audio_Clock_audio_clk_clk),                                //       clk.clk
		.reset             (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_startofpacket  (1'b0),                                                              // (terminated)
		.in_endofpacket    (1'b0),                                                              // (terminated)
		.out_startofpacket (),                                                                  // (terminated)
		.out_endofpacket   (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_av_config_avalon_av_config_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                     //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                         //       clk_reset.reset
		.m0_address              (sysaudio_av_config_avalon_av_config_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_av_config_avalon_av_config_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_av_config_avalon_av_config_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_av_config_avalon_av_config_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_av_config_avalon_av_config_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_av_config_avalon_av_config_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_av_config_avalon_av_config_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_av_config_avalon_av_config_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_av_config_avalon_av_config_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_av_config_avalon_av_config_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_av_config_avalon_av_config_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_av_config_avalon_av_config_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_av_config_avalon_av_config_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_av_config_avalon_av_config_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_av_config_avalon_av_config_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_av_config_avalon_av_config_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                                      //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                                      //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                                       //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                                                //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                                    //                .channel
		.rf_sink_ready           (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                                          //                .error
		.rdata_fifo_src_ready    (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                     //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.in_data           (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_av_config_avalon_av_config_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_av_config_avalon_av_config_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                      // (terminated)
		.csr_read          (1'b0),                                                                       // (terminated)
		.csr_write         (1'b0),                                                                       // (terminated)
		.csr_readdata      (),                                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                       // (terminated)
		.almost_full_data  (),                                                                           // (terminated)
		.almost_empty_data (),                                                                           // (terminated)
		.in_empty          (1'b0),                                                                       // (terminated)
		.out_empty         (),                                                                           // (terminated)
		.in_error          (1'b0),                                                                       // (terminated)
		.out_error         (),                                                                           // (terminated)
		.in_channel        (1'b0),                                                                       // (terminated)
		.out_channel       ()                                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_jtag_uart_avalon_jtag_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                               //                .channel
		.rf_sink_ready           (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_sigproctoaudio_avmm_msg_receiver_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                    //             clk.clk
		.reset                   (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_sigproctoaudio_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                                                     //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                                                     //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                                      //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                                               //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                                                   //                .channel
		.rf_sink_ready           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                    //       clk.clk
		.reset             (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                     // (terminated)
		.csr_read          (1'b0),                                                                      // (terminated)
		.csr_write         (1'b0),                                                                      // (terminated)
		.csr_readdata      (),                                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                      // (terminated)
		.almost_full_data  (),                                                                          // (terminated)
		.almost_empty_data (),                                                                          // (terminated)
		.in_empty          (1'b0),                                                                      // (terminated)
		.out_empty         (),                                                                          // (terminated)
		.in_error          (1'b0),                                                                      // (terminated)
		.out_error         (),                                                                          // (terminated)
		.in_channel        (1'b0),                                                                      // (terminated)
		.out_channel       ()                                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_audiotosigproc_avmm_msg_sender_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                  //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_audiotosigproc_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                                   //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                                   //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                                    //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                                             //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                                                 //                .channel
		.rf_sink_ready           (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),                                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),                                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),                                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),                                       //                .error
		.rdata_fifo_src_ready    (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                  //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_audiotosigproc_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_audiotosigproc_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                   // (terminated)
		.csr_read          (1'b0),                                                                    // (terminated)
		.csr_write         (1'b0),                                                                    // (terminated)
		.csr_readdata      (),                                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                    // (terminated)
		.almost_full_data  (),                                                                        // (terminated)
		.almost_empty_data (),                                                                        // (terminated)
		.in_empty          (1'b0),                                                                    // (terminated)
		.out_empty         (),                                                                        // (terminated)
		.in_error          (1'b0),                                                                    // (terminated)
		.out_error         (),                                                                        // (terminated)
		.in_channel        (1'b0),                                                                    // (terminated)
		.out_channel       ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_performance_counter_control_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                                      //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (sysaudio_performance_counter_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_performance_counter_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_performance_counter_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_performance_counter_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_performance_counter_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_performance_counter_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_performance_counter_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_performance_counter_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_performance_counter_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_performance_counter_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_performance_counter_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_performance_counter_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_performance_counter_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_performance_counter_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_performance_counter_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_performance_counter_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                                       //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                                       //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                                        //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                                 //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                                     //                .channel
		.rf_sink_ready           (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_performance_counter_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_performance_counter_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_performance_counter_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_performance_counter_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_performance_counter_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),                                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),                                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),                                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),                                           //                .error
		.rdata_fifo_src_ready    (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_performance_counter_control_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                                      //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (sysaudio_performance_counter_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_performance_counter_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_performance_counter_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_performance_counter_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_performance_counter_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_performance_counter_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                       // (terminated)
		.csr_read          (1'b0),                                                                        // (terminated)
		.csr_write         (1'b0),                                                                        // (terminated)
		.csr_readdata      (),                                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                        // (terminated)
		.almost_full_data  (),                                                                            // (terminated)
		.almost_empty_data (),                                                                            // (terminated)
		.in_empty          (1'b0),                                                                        // (terminated)
		.out_empty         (),                                                                            // (terminated)
		.in_error          (1'b0),                                                                        // (terminated)
		.out_error         (),                                                                            // (terminated)
		.in_channel        (1'b0),                                                                        // (terminated)
		.out_channel       ()                                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_nios_ii_debug_mem_slave_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                            //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (sysaudio_nios_ii_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_nios_ii_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_nios_ii_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_nios_ii_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_nios_ii_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_nios_ii_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_nios_ii_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_nios_ii_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_nios_ii_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_nios_ii_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_nios_ii_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_nios_ii_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_nios_ii_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_nios_ii_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_nios_ii_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_nios_ii_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                             //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                             //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                              //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                       //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                           //                .channel
		.rf_sink_ready           (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_020_out_0_ready),                                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_020_out_0_valid),                                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_020_out_0_data),                                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_020_out_0_error),                                 //                .error
		.rdata_fifo_src_ready    (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                            //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_nios_ii_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_nios_ii_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysaudio_onchip_memory_s1_agent (
		.clk                     (PLL_Shared_outclk0_clk),                                     //             clk.clk
		.reset                   (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (sysaudio_onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysaudio_onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysaudio_onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysaudio_onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysaudio_onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysaudio_onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysaudio_onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysaudio_onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysaudio_onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysaudio_onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sysaudio_onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysaudio_onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysaudio_onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sysaudio_onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sysaudio_onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysaudio_onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                    //                .channel
		.rf_sink_ready           (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysaudio_onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysaudio_onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysaudio_onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysaudio_onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysaudio_onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_021_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_021_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_021_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_021_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysaudio_onchip_memory_s1_agent_rsp_fifo (
		.clk               (PLL_Shared_outclk0_clk),                                     //       clk.clk
		.reset             (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (sysaudio_onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sysaudio_onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sysaudio_onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysaudio_onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysaudio_onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysaudio_onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	soc_system_mm_interconnect_0_router router (
		.sink_ready         (syssigproc_hw_accelerator_avalon_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (syssigproc_hw_accelerator_avalon_master_agent_cp_valid),           //          .valid
		.sink_data          (syssigproc_hw_accelerator_avalon_master_agent_cp_data),            //          .data
		.sink_startofpacket (syssigproc_hw_accelerator_avalon_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (syssigproc_hw_accelerator_avalon_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                 //       src.ready
		.src_valid          (router_src_valid),                                                 //          .valid
		.src_data           (router_src_data),                                                  //          .data
		.src_channel        (router_src_channel),                                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sysaudio_nios_ii_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (sysaudio_nios_ii_data_master_agent_cp_valid),         //          .valid
		.sink_data          (sysaudio_nios_ii_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (sysaudio_nios_ii_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_nios_ii_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                              //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                                //       src.ready
		.src_valid          (router_001_src_valid),                                //          .valid
		.src_data           (router_001_src_data),                                 //          .data
		.src_channel        (router_001_src_channel),                              //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (syssigproc_nios_ii_data_master_agent_cp_ready),                    //      sink.ready
		.sink_valid         (syssigproc_nios_ii_data_master_agent_cp_valid),                    //          .valid
		.sink_data          (syssigproc_nios_ii_data_master_agent_cp_data),                     //          .data
		.sink_startofpacket (syssigproc_nios_ii_data_master_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (syssigproc_nios_ii_data_master_agent_cp_endofpacket),              //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                             //       src.ready
		.src_valid          (router_002_src_valid),                                             //          .valid
		.src_data           (router_002_src_data),                                              //          .data
		.src_channel        (router_002_src_channel),                                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (sysaudio_nios_ii_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (sysaudio_nios_ii_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (sysaudio_nios_ii_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (sysaudio_nios_ii_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_nios_ii_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                     //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                                       //       src.ready
		.src_valid          (router_003_src_valid),                                       //          .valid
		.src_data           (router_003_src_data),                                        //          .data
		.src_channel        (router_003_src_channel),                                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                  //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (syssigproc_nios_ii_instruction_master_agent_cp_ready),             //      sink.ready
		.sink_valid         (syssigproc_nios_ii_instruction_master_agent_cp_valid),             //          .valid
		.sink_data          (syssigproc_nios_ii_instruction_master_agent_cp_data),              //          .data
		.sink_startofpacket (syssigproc_nios_ii_instruction_master_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (syssigproc_nios_ii_instruction_master_agent_cp_endofpacket),       //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                             //       src.ready
		.src_valid          (router_004_src_valid),                                             //          .valid
		.src_data           (router_004_src_data),                                              //          .data
		.src_channel        (router_004_src_channel),                                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (sdram_controller_shared_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (sdram_controller_shared_s1_agent_rp_valid),                 //          .valid
		.sink_data          (sdram_controller_shared_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (sdram_controller_shared_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (sdram_controller_shared_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (PLL_Shared_outclk1_clk),                                    //       clk.clk
		.reset              (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                      //       src.ready
		.src_valid          (router_005_src_valid),                                      //          .valid
		.src_data           (router_005_src_data),                                       //          .data
		.src_channel        (router_005_src_channel),                                    //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                 //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (syssigproc_hw_accelerator_as_agent_rp_ready),                      //      sink.ready
		.sink_valid         (syssigproc_hw_accelerator_as_agent_rp_valid),                      //          .valid
		.sink_data          (syssigproc_hw_accelerator_as_agent_rp_data),                       //          .data
		.sink_startofpacket (syssigproc_hw_accelerator_as_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (syssigproc_hw_accelerator_as_agent_rp_endofpacket),                //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                             //       src.ready
		.src_valid          (router_006_src_valid),                                             //          .valid
		.src_data           (router_006_src_data),                                              //          .data
		.src_channel        (router_006_src_channel),                                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_ready),            //      sink.ready
		.sink_valid         (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_valid),            //          .valid
		.sink_data          (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_data),             //          .data
		.sink_startofpacket (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (syssigproc_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),      //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                             //       src.ready
		.src_valid          (router_007_src_valid),                                             //          .valid
		.src_data           (router_007_src_data),                                              //          .data
		.src_channel        (router_007_src_channel),                                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_008 (
		.sink_ready         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_ready),         //      sink.ready
		.sink_valid         (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.sink_data          (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_data),          //          .data
		.sink_startofpacket (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mailbox_audiotosigproc_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                          //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_008_src_ready),                                            //       src.ready
		.src_valid          (router_008_src_valid),                                            //          .valid
		.src_data           (router_008_src_data),                                             //          .data
		.src_channel        (router_008_src_channel),                                          //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_ready),            //      sink.ready
		.sink_valid         (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_valid),            //          .valid
		.sink_data          (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_data),             //          .data
		.sink_startofpacket (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (mailbox_sigproctoaudio_avmm_msg_sender_agent_rp_endofpacket),      //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                             //       src.ready
		.src_valid          (router_009_src_valid),                                             //          .valid
		.src_data           (router_009_src_data),                                              //          .data
		.src_channel        (router_009_src_channel),                                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_010 (
		.sink_ready         (syssigproc_performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (syssigproc_performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (syssigproc_performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (syssigproc_performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (syssigproc_performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                              //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_010_src_ready),                                                //       src.ready
		.src_valid          (router_010_src_valid),                                                //          .valid
		.src_data           (router_010_src_data),                                                 //          .data
		.src_channel        (router_010_src_channel),                                              //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                           //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (syssigproc_nios_ii_debug_mem_slave_agent_rp_ready),                //      sink.ready
		.sink_valid         (syssigproc_nios_ii_debug_mem_slave_agent_rp_valid),                //          .valid
		.sink_data          (syssigproc_nios_ii_debug_mem_slave_agent_rp_data),                 //          .data
		.sink_startofpacket (syssigproc_nios_ii_debug_mem_slave_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (syssigproc_nios_ii_debug_mem_slave_agent_rp_endofpacket),          //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                             //       src.ready
		.src_valid          (router_011_src_valid),                                             //          .valid
		.src_data           (router_011_src_data),                                              //          .data
		.src_channel        (router_011_src_channel),                                           //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_011 router_012 (
		.sink_ready         (syssigproc_onchip_memory_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (syssigproc_onchip_memory_s1_agent_rp_valid),                       //          .valid
		.sink_data          (syssigproc_onchip_memory_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (syssigproc_onchip_memory_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (syssigproc_onchip_memory_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                             //       src.ready
		.src_valid          (router_012_src_valid),                                             //          .valid
		.src_data           (router_012_src_data),                                              //          .data
		.src_channel        (router_012_src_channel),                                           //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (pio_leds_shared_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pio_leds_shared_s1_agent_rp_valid),                 //          .valid
		.sink_data          (pio_leds_shared_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (pio_leds_shared_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pio_leds_shared_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset              (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                              //       src.ready
		.src_valid          (router_013_src_valid),                              //          .valid
		.src_data           (router_013_src_data),                               //          .data
		.src_channel        (router_013_src_channel),                            //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_013 router_014 (
		.sink_ready         (pio_switches_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (pio_switches_s1_agent_rp_valid),                    //          .valid
		.sink_data          (pio_switches_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (pio_switches_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pio_switches_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset              (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                              //       src.ready
		.src_valid          (router_014_src_valid),                              //          .valid
		.src_data           (router_014_src_data),                               //          .data
		.src_channel        (router_014_src_channel),                            //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_013 router_015 (
		.sink_ready         (pio_1st_7seg_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pio_1st_7seg_s1_agent_rp_valid),                     //          .valid
		.sink_data          (pio_1st_7seg_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (pio_1st_7seg_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pio_1st_7seg_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                               //       src.ready
		.src_valid          (router_015_src_valid),                               //          .valid
		.src_data           (router_015_src_data),                                //          .data
		.src_channel        (router_015_src_channel),                             //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_013 router_016 (
		.sink_ready         (pio_2nd_7seg_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pio_2nd_7seg_s1_agent_rp_valid),                     //          .valid
		.sink_data          (pio_2nd_7seg_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (pio_2nd_7seg_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pio_2nd_7seg_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                               //       src.ready
		.src_valid          (router_016_src_valid),                               //          .valid
		.src_data           (router_016_src_data),                                //          .data
		.src_channel        (router_016_src_channel),                             //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_013 router_017 (
		.sink_ready         (pio_3rd_7seg_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pio_3rd_7seg_s1_agent_rp_valid),                     //          .valid
		.sink_data          (pio_3rd_7seg_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (pio_3rd_7seg_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pio_3rd_7seg_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                               //       src.ready
		.src_valid          (router_017_src_valid),                               //          .valid
		.src_data           (router_017_src_data),                                //          .data
		.src_channel        (router_017_src_channel),                             //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                          //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_006 router_018 (
		.sink_ready         (pio_debug_s1_agent_rp_ready),                                      //      sink.ready
		.sink_valid         (pio_debug_s1_agent_rp_valid),                                      //          .valid
		.sink_data          (pio_debug_s1_agent_rp_data),                                       //          .data
		.sink_startofpacket (pio_debug_s1_agent_rp_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (pio_debug_s1_agent_rp_endofpacket),                                //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                             //       src.ready
		.src_valid          (router_018_src_valid),                                             //          .valid
		.src_data           (router_018_src_data),                                              //          .data
		.src_channel        (router_018_src_channel),                                           //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (sysaudio_audio_core_avalon_audio_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysaudio_audio_core_avalon_audio_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysaudio_audio_core_avalon_audio_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysaudio_audio_core_avalon_audio_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_audio_core_avalon_audio_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (SysAudio_Audio_Clock_audio_clk_clk),                            //       clk.clk
		.reset              (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_019_src_ready),                                          //       src.ready
		.src_valid          (router_019_src_valid),                                          //          .valid
		.src_data           (router_019_src_data),                                           //          .data
		.src_channel        (router_019_src_channel),                                        //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_020 (
		.sink_ready         (sysaudio_av_config_avalon_av_config_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysaudio_av_config_avalon_av_config_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysaudio_av_config_avalon_av_config_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysaudio_av_config_avalon_av_config_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_av_config_avalon_av_config_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.src_ready          (router_020_src_ready),                                             //       src.ready
		.src_valid          (router_020_src_valid),                                             //          .valid
		.src_data           (router_020_src_data),                                              //          .data
		.src_channel        (router_020_src_channel),                                           //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_021 (
		.sink_ready         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                      //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_021_src_ready),                                        //       src.ready
		.src_valid          (router_021_src_valid),                                        //          .valid
		.src_data           (router_021_src_data),                                         //          .data
		.src_channel        (router_021_src_channel),                                      //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_022 (
		.sink_ready         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_ready),          //      sink.ready
		.sink_valid         (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_valid),          //          .valid
		.sink_data          (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_data),           //          .data
		.sink_startofpacket (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rp_endofpacket),    //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_022_src_ready),                                             //       src.ready
		.src_valid          (router_022_src_valid),                                             //          .valid
		.src_data           (router_022_src_data),                                              //          .data
		.src_channel        (router_022_src_channel),                                           //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                                     //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_023 (
		.sink_ready         (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_ready),         //      sink.ready
		.sink_valid         (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_valid),         //          .valid
		.sink_data          (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_data),          //          .data
		.sink_startofpacket (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (mailbox_audiotosigproc_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                        //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_023_src_ready),                                          //       src.ready
		.src_valid          (router_023_src_valid),                                          //          .valid
		.src_data           (router_023_src_data),                                           //          .data
		.src_channel        (router_023_src_channel),                                        //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_019 router_024 (
		.sink_ready         (sysaudio_performance_counter_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysaudio_performance_counter_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysaudio_performance_counter_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysaudio_performance_counter_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_performance_counter_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                            //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_024_src_ready),                                              //       src.ready
		.src_valid          (router_024_src_valid),                                              //          .valid
		.src_data           (router_024_src_data),                                               //          .data
		.src_channel        (router_024_src_channel),                                            //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_025 router_025 (
		.sink_ready         (sysaudio_nios_ii_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysaudio_nios_ii_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysaudio_nios_ii_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysaudio_nios_ii_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysaudio_nios_ii_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                                  //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_025_src_ready),                                    //       src.ready
		.src_valid          (router_025_src_valid),                                    //          .valid
		.src_data           (router_025_src_data),                                     //          .data
		.src_channel        (router_025_src_channel),                                  //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                            //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                               //          .endofpacket
	);

	soc_system_mm_interconnect_0_router_025 router_026 (
		.sink_ready         (sysaudio_onchip_memory_s1_agent_rp_ready),           //      sink.ready
		.sink_valid         (sysaudio_onchip_memory_s1_agent_rp_valid),           //          .valid
		.sink_data          (sysaudio_onchip_memory_s1_agent_rp_data),            //          .data
		.sink_startofpacket (sysaudio_onchip_memory_s1_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (sysaudio_onchip_memory_s1_agent_rp_endofpacket),     //          .endofpacket
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                               //       src.ready
		.src_valid          (router_026_src_valid),                               //          .valid
		.src_data           (router_026_src_data),                                //          .data
		.src_channel        (router_026_src_channel),                             //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sysaudio_nios_ii_data_master_limiter (
		.clk                    (PLL_Shared_outclk0_clk),                                     //       clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                                       //          .valid
		.cmd_sink_data          (router_001_src_data),                                        //          .data
		.cmd_sink_channel       (router_001_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (sysaudio_nios_ii_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sysaudio_nios_ii_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sysaudio_nios_ii_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sysaudio_nios_ii_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sysaudio_nios_ii_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (sysaudio_nios_ii_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sysaudio_nios_ii_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sysaudio_nios_ii_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sysaudio_nios_ii_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sysaudio_nios_ii_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sysaudio_nios_ii_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sysaudio_nios_ii_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) syssigproc_nios_ii_data_master_limiter (
		.clk                    (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                             //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                             //          .valid
		.cmd_sink_data          (router_002_src_data),                                              //          .data
		.cmd_sink_channel       (router_002_src_channel),                                           //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                                     //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                                       //          .endofpacket
		.cmd_src_ready          (syssigproc_nios_ii_data_master_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (syssigproc_nios_ii_data_master_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (syssigproc_nios_ii_data_master_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (syssigproc_nios_ii_data_master_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (syssigproc_nios_ii_data_master_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_002_src_ready),                                            //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_002_src_valid),                                            //          .valid
		.rsp_sink_channel       (rsp_mux_002_src_channel),                                          //          .channel
		.rsp_sink_data          (rsp_mux_002_src_data),                                             //          .data
		.rsp_sink_startofpacket (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.rsp_src_ready          (syssigproc_nios_ii_data_master_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (syssigproc_nios_ii_data_master_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (syssigproc_nios_ii_data_master_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (syssigproc_nios_ii_data_master_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (syssigproc_nios_ii_data_master_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (syssigproc_nios_ii_data_master_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (syssigproc_nios_ii_data_master_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) sysaudio_nios_ii_instruction_master_limiter (
		.clk                    (PLL_Shared_outclk0_clk),                                            //       clk.clk
		.reset                  (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                              //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                              //          .valid
		.cmd_sink_data          (router_003_src_data),                                               //          .data
		.cmd_sink_channel       (router_003_src_channel),                                            //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                                      //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                                        //          .endofpacket
		.cmd_src_ready          (sysaudio_nios_ii_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (sysaudio_nios_ii_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (sysaudio_nios_ii_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (sysaudio_nios_ii_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (sysaudio_nios_ii_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                                             //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                                           //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                                              //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                                       //          .endofpacket
		.rsp_src_ready          (sysaudio_nios_ii_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (sysaudio_nios_ii_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (sysaudio_nios_ii_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (sysaudio_nios_ii_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (sysaudio_nios_ii_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (sysaudio_nios_ii_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (sysaudio_nios_ii_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.VALID_WIDTH               (22),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) syssigproc_nios_ii_instruction_master_limiter (
		.clk                    (PLL_Shared_outclk0_clk),                                              //       clk.clk
		.reset                  (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.cmd_sink_ready         (router_004_src_ready),                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_004_src_valid),                                                //          .valid
		.cmd_sink_data          (router_004_src_data),                                                 //          .data
		.cmd_sink_channel       (router_004_src_channel),                                              //          .channel
		.cmd_sink_startofpacket (router_004_src_startofpacket),                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_004_src_endofpacket),                                          //          .endofpacket
		.cmd_src_ready          (syssigproc_nios_ii_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (syssigproc_nios_ii_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (syssigproc_nios_ii_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (syssigproc_nios_ii_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (syssigproc_nios_ii_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_004_src_ready),                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_004_src_valid),                                               //          .valid
		.rsp_sink_channel       (rsp_mux_004_src_channel),                                             //          .channel
		.rsp_sink_data          (rsp_mux_004_src_data),                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_004_src_startofpacket),                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_004_src_endofpacket),                                         //          .endofpacket
		.rsp_src_ready          (syssigproc_nios_ii_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (syssigproc_nios_ii_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (syssigproc_nios_ii_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (syssigproc_nios_ii_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (syssigproc_nios_ii_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (syssigproc_nios_ii_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (syssigproc_nios_ii_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sdram_controller_shared_s1_burst_adapter (
		.clk                   (PLL_Shared_outclk1_clk),                                         //       cr0.clk
		.reset                 (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sdram_controller_shared_s1_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sdram_controller_shared_s1_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sdram_controller_shared_s1_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sdram_controller_shared_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sdram_controller_shared_s1_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sdram_controller_shared_s1_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sdram_controller_shared_s1_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sdram_controller_shared_s1_burst_adapter_source0_data),          //          .data
		.source0_channel       (sdram_controller_shared_s1_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sdram_controller_shared_s1_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sdram_controller_shared_s1_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sdram_controller_shared_s1_burst_adapter_source0_ready)          //          .ready
	);

	soc_system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                 //      sink.ready
		.sink_channel       (router_src_channel),                                               //          .channel
		.sink_data          (router_src_data),                                                  //          .data
		.sink_startofpacket (router_src_startofpacket),                                         //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                           //          .endofpacket
		.sink_valid         (router_src_valid),                                                 //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                             //          .valid
		.src0_data          (cmd_demux_src0_data),                                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                        //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (PLL_Shared_outclk0_clk),                                     //        clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),         //  clk_reset.reset
		.sink_ready          (sysaudio_nios_ii_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (sysaudio_nios_ii_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (sysaudio_nios_ii_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (sysaudio_nios_ii_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (sysaudio_nios_ii_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (sysaudio_nios_ii_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_001_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_001_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_001_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_001_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_001_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_001_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_001_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_001_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_001_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_001_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_001_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),                            //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                                  //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                                  //           .valid
		.src11_data          (cmd_demux_001_src11_data),                                   //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                                //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),                          //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),                            //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                                  //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                                  //           .valid
		.src12_data          (cmd_demux_001_src12_data),                                   //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                                //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),                          //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),                            //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                                  //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                                  //           .valid
		.src13_data          (cmd_demux_001_src13_data),                                   //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                                //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),                          //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket)                             //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //        clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (syssigproc_nios_ii_data_master_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (syssigproc_nios_ii_data_master_limiter_cmd_src_channel),           //           .channel
		.sink_data           (syssigproc_nios_ii_data_master_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (syssigproc_nios_ii_data_master_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (syssigproc_nios_ii_data_master_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (syssigproc_nios_ii_data_master_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_002_src0_ready),                                         //       src0.ready
		.src0_valid          (cmd_demux_002_src0_valid),                                         //           .valid
		.src0_data           (cmd_demux_002_src0_data),                                          //           .data
		.src0_channel        (cmd_demux_002_src0_channel),                                       //           .channel
		.src0_startofpacket  (cmd_demux_002_src0_startofpacket),                                 //           .startofpacket
		.src0_endofpacket    (cmd_demux_002_src0_endofpacket),                                   //           .endofpacket
		.src1_ready          (cmd_demux_002_src1_ready),                                         //       src1.ready
		.src1_valid          (cmd_demux_002_src1_valid),                                         //           .valid
		.src1_data           (cmd_demux_002_src1_data),                                          //           .data
		.src1_channel        (cmd_demux_002_src1_channel),                                       //           .channel
		.src1_startofpacket  (cmd_demux_002_src1_startofpacket),                                 //           .startofpacket
		.src1_endofpacket    (cmd_demux_002_src1_endofpacket),                                   //           .endofpacket
		.src2_ready          (cmd_demux_002_src2_ready),                                         //       src2.ready
		.src2_valid          (cmd_demux_002_src2_valid),                                         //           .valid
		.src2_data           (cmd_demux_002_src2_data),                                          //           .data
		.src2_channel        (cmd_demux_002_src2_channel),                                       //           .channel
		.src2_startofpacket  (cmd_demux_002_src2_startofpacket),                                 //           .startofpacket
		.src2_endofpacket    (cmd_demux_002_src2_endofpacket),                                   //           .endofpacket
		.src3_ready          (cmd_demux_002_src3_ready),                                         //       src3.ready
		.src3_valid          (cmd_demux_002_src3_valid),                                         //           .valid
		.src3_data           (cmd_demux_002_src3_data),                                          //           .data
		.src3_channel        (cmd_demux_002_src3_channel),                                       //           .channel
		.src3_startofpacket  (cmd_demux_002_src3_startofpacket),                                 //           .startofpacket
		.src3_endofpacket    (cmd_demux_002_src3_endofpacket),                                   //           .endofpacket
		.src4_ready          (cmd_demux_002_src4_ready),                                         //       src4.ready
		.src4_valid          (cmd_demux_002_src4_valid),                                         //           .valid
		.src4_data           (cmd_demux_002_src4_data),                                          //           .data
		.src4_channel        (cmd_demux_002_src4_channel),                                       //           .channel
		.src4_startofpacket  (cmd_demux_002_src4_startofpacket),                                 //           .startofpacket
		.src4_endofpacket    (cmd_demux_002_src4_endofpacket),                                   //           .endofpacket
		.src5_ready          (cmd_demux_002_src5_ready),                                         //       src5.ready
		.src5_valid          (cmd_demux_002_src5_valid),                                         //           .valid
		.src5_data           (cmd_demux_002_src5_data),                                          //           .data
		.src5_channel        (cmd_demux_002_src5_channel),                                       //           .channel
		.src5_startofpacket  (cmd_demux_002_src5_startofpacket),                                 //           .startofpacket
		.src5_endofpacket    (cmd_demux_002_src5_endofpacket),                                   //           .endofpacket
		.src6_ready          (cmd_demux_002_src6_ready),                                         //       src6.ready
		.src6_valid          (cmd_demux_002_src6_valid),                                         //           .valid
		.src6_data           (cmd_demux_002_src6_data),                                          //           .data
		.src6_channel        (cmd_demux_002_src6_channel),                                       //           .channel
		.src6_startofpacket  (cmd_demux_002_src6_startofpacket),                                 //           .startofpacket
		.src6_endofpacket    (cmd_demux_002_src6_endofpacket),                                   //           .endofpacket
		.src7_ready          (cmd_demux_002_src7_ready),                                         //       src7.ready
		.src7_valid          (cmd_demux_002_src7_valid),                                         //           .valid
		.src7_data           (cmd_demux_002_src7_data),                                          //           .data
		.src7_channel        (cmd_demux_002_src7_channel),                                       //           .channel
		.src7_startofpacket  (cmd_demux_002_src7_startofpacket),                                 //           .startofpacket
		.src7_endofpacket    (cmd_demux_002_src7_endofpacket),                                   //           .endofpacket
		.src8_ready          (cmd_demux_002_src8_ready),                                         //       src8.ready
		.src8_valid          (cmd_demux_002_src8_valid),                                         //           .valid
		.src8_data           (cmd_demux_002_src8_data),                                          //           .data
		.src8_channel        (cmd_demux_002_src8_channel),                                       //           .channel
		.src8_startofpacket  (cmd_demux_002_src8_startofpacket),                                 //           .startofpacket
		.src8_endofpacket    (cmd_demux_002_src8_endofpacket),                                   //           .endofpacket
		.src9_ready          (cmd_demux_002_src9_ready),                                         //       src9.ready
		.src9_valid          (cmd_demux_002_src9_valid),                                         //           .valid
		.src9_data           (cmd_demux_002_src9_data),                                          //           .data
		.src9_channel        (cmd_demux_002_src9_channel),                                       //           .channel
		.src9_startofpacket  (cmd_demux_002_src9_startofpacket),                                 //           .startofpacket
		.src9_endofpacket    (cmd_demux_002_src9_endofpacket),                                   //           .endofpacket
		.src10_ready         (cmd_demux_002_src10_ready),                                        //      src10.ready
		.src10_valid         (cmd_demux_002_src10_valid),                                        //           .valid
		.src10_data          (cmd_demux_002_src10_data),                                         //           .data
		.src10_channel       (cmd_demux_002_src10_channel),                                      //           .channel
		.src10_startofpacket (cmd_demux_002_src10_startofpacket),                                //           .startofpacket
		.src10_endofpacket   (cmd_demux_002_src10_endofpacket),                                  //           .endofpacket
		.src11_ready         (cmd_demux_002_src11_ready),                                        //      src11.ready
		.src11_valid         (cmd_demux_002_src11_valid),                                        //           .valid
		.src11_data          (cmd_demux_002_src11_data),                                         //           .data
		.src11_channel       (cmd_demux_002_src11_channel),                                      //           .channel
		.src11_startofpacket (cmd_demux_002_src11_startofpacket),                                //           .startofpacket
		.src11_endofpacket   (cmd_demux_002_src11_endofpacket),                                  //           .endofpacket
		.src12_ready         (cmd_demux_002_src12_ready),                                        //      src12.ready
		.src12_valid         (cmd_demux_002_src12_valid),                                        //           .valid
		.src12_data          (cmd_demux_002_src12_data),                                         //           .data
		.src12_channel       (cmd_demux_002_src12_channel),                                      //           .channel
		.src12_startofpacket (cmd_demux_002_src12_startofpacket),                                //           .startofpacket
		.src12_endofpacket   (cmd_demux_002_src12_endofpacket),                                  //           .endofpacket
		.src13_ready         (cmd_demux_002_src13_ready),                                        //      src13.ready
		.src13_valid         (cmd_demux_002_src13_valid),                                        //           .valid
		.src13_data          (cmd_demux_002_src13_data),                                         //           .data
		.src13_channel       (cmd_demux_002_src13_channel),                                      //           .channel
		.src13_startofpacket (cmd_demux_002_src13_startofpacket),                                //           .startofpacket
		.src13_endofpacket   (cmd_demux_002_src13_endofpacket)                                   //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_003 (
		.clk                (PLL_Shared_outclk0_clk),                                            //        clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                //  clk_reset.reset
		.sink_ready         (sysaudio_nios_ii_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (sysaudio_nios_ii_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (sysaudio_nios_ii_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (sysaudio_nios_ii_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (sysaudio_nios_ii_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (sysaudio_nios_ii_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_003_src0_ready),                                          //       src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                          //           .valid
		.src0_data          (cmd_demux_003_src0_data),                                           //           .data
		.src0_channel       (cmd_demux_003_src0_channel),                                        //           .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                                  //           .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                                    //           .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                          //       src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                          //           .valid
		.src1_data          (cmd_demux_003_src1_data),                                           //           .data
		.src1_channel       (cmd_demux_003_src1_channel),                                        //           .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                                  //           .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)                                     //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux_003 cmd_demux_004 (
		.clk                (PLL_Shared_outclk0_clk),                                              //        clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    //  clk_reset.reset
		.sink_ready         (syssigproc_nios_ii_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (syssigproc_nios_ii_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (syssigproc_nios_ii_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (syssigproc_nios_ii_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (syssigproc_nios_ii_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (syssigproc_nios_ii_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_004_src0_ready),                                            //       src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                            //           .valid
		.src0_data          (cmd_demux_004_src0_data),                                             //           .data
		.src0_channel       (cmd_demux_004_src0_channel),                                          //           .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket),                                      //           .endofpacket
		.src1_ready         (cmd_demux_004_src1_ready),                                            //       src1.ready
		.src1_valid         (cmd_demux_004_src1_valid),                                            //           .valid
		.src1_data          (cmd_demux_004_src1_data),                                             //           .data
		.src1_channel       (cmd_demux_004_src1_channel),                                          //           .channel
		.src1_startofpacket (cmd_demux_004_src1_startofpacket),                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_004_src1_endofpacket)                                       //           .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (PLL_Shared_outclk1_clk),                                    //       clk.clk
		.reset               (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                         //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                         //          .valid
		.sink0_channel       (crosser_out_channel),                                       //          .channel
		.sink0_data          (crosser_out_data),                                          //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket),                                   //          .endofpacket
		.sink1_ready         (crosser_001_out_ready),                                     //     sink1.ready
		.sink1_valid         (crosser_001_out_valid),                                     //          .valid
		.sink1_channel       (crosser_001_out_channel),                                   //          .channel
		.sink1_data          (crosser_001_out_data),                                      //          .data
		.sink1_startofpacket (crosser_001_out_startofpacket),                             //          .startofpacket
		.sink1_endofpacket   (crosser_001_out_endofpacket),                               //          .endofpacket
		.sink2_ready         (crosser_003_out_ready),                                     //     sink2.ready
		.sink2_valid         (crosser_003_out_valid),                                     //          .valid
		.sink2_channel       (crosser_003_out_channel),                                   //          .channel
		.sink2_data          (crosser_003_out_data),                                      //          .data
		.sink2_startofpacket (crosser_003_out_startofpacket),                             //          .startofpacket
		.sink2_endofpacket   (crosser_003_out_endofpacket)                                //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                            //          .valid
		.src_data            (cmd_mux_001_src_data),                                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                            //          .valid
		.src_data            (cmd_mux_002_src_data),                                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                            //          .valid
		.src_data            (cmd_mux_004_src_data),                                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                            //          .valid
		.src_data            (cmd_mux_005_src_data),                                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src5_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src5_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src5_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src5_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src5_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src5_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_006 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                            //          .valid
		.src_data            (cmd_mux_006_src_data),                                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src6_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src6_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src6_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src6_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src6_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src6_endofpacket),                                   //          .endofpacket
		.sink1_ready         (cmd_demux_004_src0_ready),                                         //     sink1.ready
		.sink1_valid         (cmd_demux_004_src0_valid),                                         //          .valid
		.sink1_channel       (cmd_demux_004_src0_channel),                                       //          .channel
		.sink1_data          (cmd_demux_004_src0_data),                                          //          .data
		.sink1_startofpacket (cmd_demux_004_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_007 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                            //          .valid
		.src_data            (cmd_mux_007_src_data),                                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src7_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_002_src7_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_002_src7_channel),                                       //          .channel
		.sink0_data          (cmd_demux_002_src7_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_002_src7_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src7_endofpacket),                                   //          .endofpacket
		.sink1_ready         (cmd_demux_004_src1_ready),                                         //     sink1.ready
		.sink1_valid         (cmd_demux_004_src1_valid),                                         //          .valid
		.sink1_channel       (cmd_demux_004_src1_channel),                                       //          .channel
		.sink1_data          (cmd_demux_004_src1_data),                                          //          .data
		.sink1_startofpacket (cmd_demux_004_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_004_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_008 (
		.clk                 (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset               (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                             //          .valid
		.src_data            (cmd_mux_008_src_data),                              //          .data
		.src_channel         (cmd_mux_008_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_002_src8_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_002_src8_valid),                          //          .valid
		.sink1_channel       (cmd_demux_002_src8_channel),                        //          .channel
		.sink1_data          (cmd_demux_002_src8_data),                           //          .data
		.sink1_startofpacket (cmd_demux_002_src8_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src8_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_009 (
		.clk                 (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset               (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                             //          .valid
		.src_data            (cmd_mux_009_src_data),                              //          .data
		.src_channel         (cmd_mux_009_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_002_src9_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_002_src9_valid),                          //          .valid
		.sink1_channel       (cmd_demux_002_src9_channel),                        //          .channel
		.sink1_data          (cmd_demux_002_src9_data),                           //          .data
		.sink1_startofpacket (cmd_demux_002_src9_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src9_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_010 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                              //          .valid
		.src_data            (cmd_mux_010_src_data),                               //          .data
		.src_channel         (cmd_mux_010_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_002_src10_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_002_src10_valid),                          //          .valid
		.sink1_channel       (cmd_demux_002_src10_channel),                        //          .channel
		.sink1_data          (cmd_demux_002_src10_data),                           //          .data
		.sink1_startofpacket (cmd_demux_002_src10_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src10_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_011 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                              //          .valid
		.src_data            (cmd_mux_011_src_data),                               //          .data
		.src_channel         (cmd_mux_011_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_002_src11_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_002_src11_valid),                          //          .valid
		.sink1_channel       (cmd_demux_002_src11_channel),                        //          .channel
		.sink1_data          (cmd_demux_002_src11_data),                           //          .data
		.sink1_startofpacket (cmd_demux_002_src11_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src11_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_012 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                              //          .valid
		.src_data            (cmd_mux_012_src_data),                               //          .data
		.src_channel         (cmd_mux_012_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_002_src12_ready),                          //     sink1.ready
		.sink1_valid         (cmd_demux_002_src12_valid),                          //          .valid
		.sink1_channel       (cmd_demux_002_src12_channel),                        //          .channel
		.sink1_data          (cmd_demux_002_src12_data),                           //          .data
		.sink1_startofpacket (cmd_demux_002_src12_startofpacket),                  //          .startofpacket
		.sink1_endofpacket   (cmd_demux_002_src12_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                            //          .valid
		.src_data            (cmd_mux_013_src_data),                                             //          .data
		.src_channel         (cmd_mux_013_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_002_src13_ready),                                        //     sink0.ready
		.sink0_valid         (cmd_demux_002_src13_valid),                                        //          .valid
		.sink0_channel       (cmd_demux_002_src13_channel),                                      //          .channel
		.sink0_data          (cmd_demux_002_src13_data),                                         //          .data
		.sink0_startofpacket (cmd_demux_002_src13_startofpacket),                                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src13_endofpacket)                                   //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (SysAudio_Audio_Clock_audio_clk_clk),                    //       clk.clk
		.reset               (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                 //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                 //          .valid
		.src_data            (cmd_mux_014_src_data),                                  //          .data
		.src_channel         (cmd_mux_014_src_channel),                               //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                         //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                           //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                 //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                 //          .valid
		.sink0_channel       (crosser_002_out_channel),                               //          .channel
		.sink0_data          (crosser_002_out_data),                                  //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                         //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                            //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                              //          .valid
		.src_data            (cmd_mux_015_src_data),                               //          .data
		.src_channel         (cmd_mux_015_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                              //          .valid
		.src_data            (cmd_mux_016_src_data),                               //          .data
		.src_channel         (cmd_mux_016_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                                            //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                                            //          .valid
		.src_data            (cmd_mux_017_src_data),                                             //          .data
		.src_channel         (cmd_mux_017_src_channel),                                          //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                                         //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                                         //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                                       //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                                          //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                              //          .valid
		.src_data            (cmd_mux_018_src_data),                               //          .data
		.src_channel         (cmd_mux_018_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                              //          .valid
		.src_data            (cmd_mux_019_src_data),                               //          .data
		.src_channel         (cmd_mux_019_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_020 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                              //          .valid
		.src_data            (cmd_mux_020_src_data),                               //          .data
		.src_channel         (cmd_mux_020_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_003_src0_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src0_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src0_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src0_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_mux_006 cmd_mux_021 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                              //          .valid
		.src_data            (cmd_mux_021_src_data),                               //          .data
		.src_channel         (cmd_mux_021_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                          //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                        //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                           //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                           //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                           //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                         //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                            //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (PLL_Shared_outclk1_clk),                                         //       clk.clk
		.reset              (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sdram_controller_shared_s1_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sdram_controller_shared_s1_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sdram_controller_shared_s1_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sdram_controller_shared_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sdram_controller_shared_s1_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sdram_controller_shared_s1_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                           //          .valid
		.src1_data          (rsp_demux_src1_data),                                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                     //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                           //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                           //          .valid
		.src2_data          (rsp_demux_src2_data),                                            //          .data
		.src2_channel       (rsp_demux_src2_channel),                                         //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                                   //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket)                                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_001 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                             //      sink.ready
		.sink_channel       (router_006_src_channel),                                           //          .channel
		.sink_data          (router_006_src_data),                                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_002 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                             //      sink.ready
		.sink_channel       (router_007_src_channel),                                           //          .channel
		.sink_data          (router_007_src_data),                                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_003 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                               //      sink.ready
		.sink_channel       (router_008_src_channel),                             //          .channel
		.sink_data          (router_008_src_data),                                //          .data
		.sink_startofpacket (router_008_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_008_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_004 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                             //      sink.ready
		.sink_channel       (router_009_src_channel),                                           //          .channel
		.sink_data          (router_009_src_data),                                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_005 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                             //      sink.ready
		.sink_channel       (router_010_src_channel),                                           //          .channel
		.sink_data          (router_010_src_data),                                              //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_010_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_006 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                             //      sink.ready
		.sink_channel       (router_011_src_channel),                                           //          .channel
		.sink_data          (router_011_src_data),                                              //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_011_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_006_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_006_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_007 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                             //      sink.ready
		.sink_channel       (router_012_src_channel),                                           //          .channel
		.sink_data          (router_012_src_data),                                              //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_012_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.src1_ready         (rsp_demux_007_src1_ready),                                         //      src1.ready
		.src1_valid         (rsp_demux_007_src1_valid),                                         //          .valid
		.src1_data          (rsp_demux_007_src1_data),                                          //          .data
		.src1_channel       (rsp_demux_007_src1_channel),                                       //          .channel
		.src1_startofpacket (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_007_src1_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_008 (
		.clk                (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset              (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                              //      sink.ready
		.sink_channel       (router_013_src_channel),                            //          .channel
		.sink_data          (router_013_src_data),                               //          .data
		.sink_startofpacket (router_013_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_013_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_008_src0_data),                           //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_008_src1_data),                           //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_009 (
		.clk                (PLL_Shared_outclk0_clk),                            //       clk.clk
		.reset              (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                              //      sink.ready
		.sink_channel       (router_014_src_channel),                            //          .channel
		.sink_data          (router_014_src_data),                               //          .data
		.sink_startofpacket (router_014_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_014_src_valid),                              //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_009_src0_data),                           //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_009_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_009_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_009_src1_data),                           //          .data
		.src1_channel       (rsp_demux_009_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_009_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_009_src1_endofpacket)                     //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_010 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                               //      sink.ready
		.sink_channel       (router_015_src_channel),                             //          .channel
		.sink_data          (router_015_src_data),                                //          .data
		.sink_startofpacket (router_015_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_015_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_010_src0_data),                            //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_010_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_010_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_010_src1_data),                            //          .data
		.src1_channel       (rsp_demux_010_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_010_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_010_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_011 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                               //      sink.ready
		.sink_channel       (router_016_src_channel),                             //          .channel
		.sink_data          (router_016_src_data),                                //          .data
		.sink_startofpacket (router_016_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_016_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_011_src0_data),                            //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_011_src1_data),                            //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_012 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                               //      sink.ready
		.sink_channel       (router_017_src_channel),                             //          .channel
		.sink_data          (router_017_src_data),                                //          .data
		.sink_startofpacket (router_017_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_017_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_012_src0_data),                            //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_012_src1_data),                            //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_013 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                             //      sink.ready
		.sink_channel       (router_018_src_channel),                                           //          .channel
		.sink_data          (router_018_src_data),                                              //          .data
		.sink_startofpacket (router_018_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_018_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_014 rsp_demux_014 (
		.clk                (SysAudio_Audio_Clock_audio_clk_clk),                    //       clk.clk
		.reset              (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                                  //      sink.ready
		.sink_channel       (router_019_src_channel),                                //          .channel
		.sink_data          (router_019_src_data),                                   //          .data
		.sink_startofpacket (router_019_src_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                            //          .endofpacket
		.sink_valid         (router_019_src_valid),                                  //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                              //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                              //          .valid
		.src0_data          (rsp_demux_014_src0_data),                               //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                            //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                      //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                         //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_015 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                               //      sink.ready
		.sink_channel       (router_020_src_channel),                             //          .channel
		.sink_data          (router_020_src_data),                                //          .data
		.sink_startofpacket (router_020_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_020_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_015_src0_data),                            //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_016 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                               //      sink.ready
		.sink_channel       (router_021_src_channel),                             //          .channel
		.sink_data          (router_021_src_data),                                //          .data
		.sink_startofpacket (router_021_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_021_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_016_src0_data),                            //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_017 (
		.clk                (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset              (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                                             //      sink.ready
		.sink_channel       (router_022_src_channel),                                           //          .channel
		.sink_data          (router_022_src_data),                                              //          .data
		.sink_startofpacket (router_022_src_startofpacket),                                     //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                                       //          .endofpacket
		.sink_valid         (router_022_src_valid),                                             //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_017_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_018 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                               //      sink.ready
		.sink_channel       (router_023_src_channel),                             //          .channel
		.sink_data          (router_023_src_data),                                //          .data
		.sink_startofpacket (router_023_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_023_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_018_src0_data),                            //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_cmd_demux rsp_demux_019 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                               //      sink.ready
		.sink_channel       (router_024_src_channel),                             //          .channel
		.sink_data          (router_024_src_data),                                //          .data
		.sink_startofpacket (router_024_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_024_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_019_src0_data),                            //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_020 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                               //      sink.ready
		.sink_channel       (router_025_src_channel),                             //          .channel
		.sink_data          (router_025_src_data),                                //          .data
		.sink_startofpacket (router_025_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_025_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_020_src0_data),                            //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_020_src1_data),                            //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_demux_006 rsp_demux_021 (
		.clk                (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset              (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                               //      sink.ready
		.sink_channel       (router_026_src_channel),                             //          .channel
		.sink_data          (router_026_src_data),                                //          .data
		.sink_startofpacket (router_026_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_026_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_021_src0_data),                            //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_021_src1_data),                            //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                //          .valid
		.src_data            (rsp_mux_src_data),                                                 //          .data
		.src_channel         (rsp_mux_src_channel),                                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (crosser_004_out_ready),                                            //     sink0.ready
		.sink0_valid         (crosser_004_out_valid),                                            //          .valid
		.sink0_channel       (crosser_004_out_channel),                                          //          .channel
		.sink0_data          (crosser_004_out_data),                                             //          .data
		.sink0_startofpacket (crosser_004_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket   (crosser_004_out_endofpacket)                                       //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset                (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                              //          .valid
		.src_data             (rsp_mux_001_src_data),                               //          .data
		.src_channel          (rsp_mux_001_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (crosser_005_out_ready),                              //     sink0.ready
		.sink0_valid          (crosser_005_out_valid),                              //          .valid
		.sink0_channel        (crosser_005_out_channel),                            //          .channel
		.sink0_data           (crosser_005_out_data),                               //          .data
		.sink0_startofpacket  (crosser_005_out_startofpacket),                      //          .startofpacket
		.sink0_endofpacket    (crosser_005_out_endofpacket),                        //          .endofpacket
		.sink1_ready          (rsp_demux_008_src0_ready),                           //     sink1.ready
		.sink1_valid          (rsp_demux_008_src0_valid),                           //          .valid
		.sink1_channel        (rsp_demux_008_src0_channel),                         //          .channel
		.sink1_data           (rsp_demux_008_src0_data),                            //          .data
		.sink1_startofpacket  (rsp_demux_008_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket    (rsp_demux_008_src0_endofpacket),                     //          .endofpacket
		.sink2_ready          (rsp_demux_009_src0_ready),                           //     sink2.ready
		.sink2_valid          (rsp_demux_009_src0_valid),                           //          .valid
		.sink2_channel        (rsp_demux_009_src0_channel),                         //          .channel
		.sink2_data           (rsp_demux_009_src0_data),                            //          .data
		.sink2_startofpacket  (rsp_demux_009_src0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket    (rsp_demux_009_src0_endofpacket),                     //          .endofpacket
		.sink3_ready          (rsp_demux_010_src0_ready),                           //     sink3.ready
		.sink3_valid          (rsp_demux_010_src0_valid),                           //          .valid
		.sink3_channel        (rsp_demux_010_src0_channel),                         //          .channel
		.sink3_data           (rsp_demux_010_src0_data),                            //          .data
		.sink3_startofpacket  (rsp_demux_010_src0_startofpacket),                   //          .startofpacket
		.sink3_endofpacket    (rsp_demux_010_src0_endofpacket),                     //          .endofpacket
		.sink4_ready          (rsp_demux_011_src0_ready),                           //     sink4.ready
		.sink4_valid          (rsp_demux_011_src0_valid),                           //          .valid
		.sink4_channel        (rsp_demux_011_src0_channel),                         //          .channel
		.sink4_data           (rsp_demux_011_src0_data),                            //          .data
		.sink4_startofpacket  (rsp_demux_011_src0_startofpacket),                   //          .startofpacket
		.sink4_endofpacket    (rsp_demux_011_src0_endofpacket),                     //          .endofpacket
		.sink5_ready          (rsp_demux_012_src0_ready),                           //     sink5.ready
		.sink5_valid          (rsp_demux_012_src0_valid),                           //          .valid
		.sink5_channel        (rsp_demux_012_src0_channel),                         //          .channel
		.sink5_data           (rsp_demux_012_src0_data),                            //          .data
		.sink5_startofpacket  (rsp_demux_012_src0_startofpacket),                   //          .startofpacket
		.sink5_endofpacket    (rsp_demux_012_src0_endofpacket),                     //          .endofpacket
		.sink6_ready          (crosser_007_out_ready),                              //     sink6.ready
		.sink6_valid          (crosser_007_out_valid),                              //          .valid
		.sink6_channel        (crosser_007_out_channel),                            //          .channel
		.sink6_data           (crosser_007_out_data),                               //          .data
		.sink6_startofpacket  (crosser_007_out_startofpacket),                      //          .startofpacket
		.sink6_endofpacket    (crosser_007_out_endofpacket),                        //          .endofpacket
		.sink7_ready          (rsp_demux_015_src0_ready),                           //     sink7.ready
		.sink7_valid          (rsp_demux_015_src0_valid),                           //          .valid
		.sink7_channel        (rsp_demux_015_src0_channel),                         //          .channel
		.sink7_data           (rsp_demux_015_src0_data),                            //          .data
		.sink7_startofpacket  (rsp_demux_015_src0_startofpacket),                   //          .startofpacket
		.sink7_endofpacket    (rsp_demux_015_src0_endofpacket),                     //          .endofpacket
		.sink8_ready          (rsp_demux_016_src0_ready),                           //     sink8.ready
		.sink8_valid          (rsp_demux_016_src0_valid),                           //          .valid
		.sink8_channel        (rsp_demux_016_src0_channel),                         //          .channel
		.sink8_data           (rsp_demux_016_src0_data),                            //          .data
		.sink8_startofpacket  (rsp_demux_016_src0_startofpacket),                   //          .startofpacket
		.sink8_endofpacket    (rsp_demux_016_src0_endofpacket),                     //          .endofpacket
		.sink9_ready          (rsp_demux_017_src0_ready),                           //     sink9.ready
		.sink9_valid          (rsp_demux_017_src0_valid),                           //          .valid
		.sink9_channel        (rsp_demux_017_src0_channel),                         //          .channel
		.sink9_data           (rsp_demux_017_src0_data),                            //          .data
		.sink9_startofpacket  (rsp_demux_017_src0_startofpacket),                   //          .startofpacket
		.sink9_endofpacket    (rsp_demux_017_src0_endofpacket),                     //          .endofpacket
		.sink10_ready         (rsp_demux_018_src0_ready),                           //    sink10.ready
		.sink10_valid         (rsp_demux_018_src0_valid),                           //          .valid
		.sink10_channel       (rsp_demux_018_src0_channel),                         //          .channel
		.sink10_data          (rsp_demux_018_src0_data),                            //          .data
		.sink10_startofpacket (rsp_demux_018_src0_startofpacket),                   //          .startofpacket
		.sink10_endofpacket   (rsp_demux_018_src0_endofpacket),                     //          .endofpacket
		.sink11_ready         (rsp_demux_019_src0_ready),                           //    sink11.ready
		.sink11_valid         (rsp_demux_019_src0_valid),                           //          .valid
		.sink11_channel       (rsp_demux_019_src0_channel),                         //          .channel
		.sink11_data          (rsp_demux_019_src0_data),                            //          .data
		.sink11_startofpacket (rsp_demux_019_src0_startofpacket),                   //          .startofpacket
		.sink11_endofpacket   (rsp_demux_019_src0_endofpacket),                     //          .endofpacket
		.sink12_ready         (rsp_demux_020_src0_ready),                           //    sink12.ready
		.sink12_valid         (rsp_demux_020_src0_valid),                           //          .valid
		.sink12_channel       (rsp_demux_020_src0_channel),                         //          .channel
		.sink12_data          (rsp_demux_020_src0_data),                            //          .data
		.sink12_startofpacket (rsp_demux_020_src0_startofpacket),                   //          .startofpacket
		.sink12_endofpacket   (rsp_demux_020_src0_endofpacket),                     //          .endofpacket
		.sink13_ready         (rsp_demux_021_src0_ready),                           //    sink13.ready
		.sink13_valid         (rsp_demux_021_src0_valid),                           //          .valid
		.sink13_channel       (rsp_demux_021_src0_channel),                         //          .channel
		.sink13_data          (rsp_demux_021_src0_data),                            //          .data
		.sink13_startofpacket (rsp_demux_021_src0_startofpacket),                   //          .startofpacket
		.sink13_endofpacket   (rsp_demux_021_src0_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                  (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset                (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_002_src_ready),                                            //       src.ready
		.src_valid            (rsp_mux_002_src_valid),                                            //          .valid
		.src_data             (rsp_mux_002_src_data),                                             //          .data
		.src_channel          (rsp_mux_002_src_channel),                                          //          .channel
		.src_startofpacket    (rsp_mux_002_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket      (rsp_mux_002_src_endofpacket),                                      //          .endofpacket
		.sink0_ready          (crosser_006_out_ready),                                            //     sink0.ready
		.sink0_valid          (crosser_006_out_valid),                                            //          .valid
		.sink0_channel        (crosser_006_out_channel),                                          //          .channel
		.sink0_data           (crosser_006_out_data),                                             //          .data
		.sink0_startofpacket  (crosser_006_out_startofpacket),                                    //          .startofpacket
		.sink0_endofpacket    (crosser_006_out_endofpacket),                                      //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                         //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                         //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                       //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                          //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                   //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                         //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                       //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                         //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                       //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                         //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                       //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                         //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                       //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src1_ready),                                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src1_valid),                                         //          .valid
		.sink8_channel        (rsp_demux_008_src1_channel),                                       //          .channel
		.sink8_data           (rsp_demux_008_src1_data),                                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src1_startofpacket),                                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src1_endofpacket),                                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src1_ready),                                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src1_valid),                                         //          .valid
		.sink9_channel        (rsp_demux_009_src1_channel),                                       //          .channel
		.sink9_data           (rsp_demux_009_src1_data),                                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src1_startofpacket),                                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src1_endofpacket),                                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src1_ready),                                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src1_valid),                                         //          .valid
		.sink10_channel       (rsp_demux_010_src1_channel),                                       //          .channel
		.sink10_data          (rsp_demux_010_src1_data),                                          //          .data
		.sink10_startofpacket (rsp_demux_010_src1_startofpacket),                                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src1_endofpacket),                                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src1_ready),                                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src1_valid),                                         //          .valid
		.sink11_channel       (rsp_demux_011_src1_channel),                                       //          .channel
		.sink11_data          (rsp_demux_011_src1_data),                                          //          .data
		.sink11_startofpacket (rsp_demux_011_src1_startofpacket),                                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src1_endofpacket),                                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src1_ready),                                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src1_valid),                                         //          .valid
		.sink12_channel       (rsp_demux_012_src1_channel),                                       //          .channel
		.sink12_data          (rsp_demux_012_src1_data),                                          //          .data
		.sink12_startofpacket (rsp_demux_012_src1_startofpacket),                                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src1_endofpacket),                                   //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                         //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                         //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                       //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                          //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket)                                    //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_003 (
		.clk                 (PLL_Shared_outclk0_clk),                             //       clk.clk
		.reset               (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                              //          .valid
		.src_data            (rsp_mux_003_src_data),                               //          .data
		.src_channel         (rsp_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_020_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_020_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_020_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_020_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_020_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_020_src1_endofpacket),                     //          .endofpacket
		.sink1_ready         (rsp_demux_021_src1_ready),                           //     sink1.ready
		.sink1_valid         (rsp_demux_021_src1_valid),                           //          .valid
		.sink1_channel       (rsp_demux_021_src1_channel),                         //          .channel
		.sink1_data          (rsp_demux_021_src1_data),                            //          .data
		.sink1_startofpacket (rsp_demux_021_src1_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_021_src1_endofpacket)                      //          .endofpacket
	);

	soc_system_mm_interconnect_0_rsp_mux_003 rsp_mux_004 (
		.clk                 (PLL_Shared_outclk0_clk),                                           //       clk.clk
		.reset               (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                            //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                            //          .valid
		.src_data            (rsp_mux_004_src_data),                                             //          .data
		.src_channel         (rsp_mux_004_src_channel),                                          //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                      //          .endofpacket
		.sink0_ready         (rsp_demux_006_src1_ready),                                         //     sink0.ready
		.sink0_valid         (rsp_demux_006_src1_valid),                                         //          .valid
		.sink0_channel       (rsp_demux_006_src1_channel),                                       //          .channel
		.sink0_data          (rsp_demux_006_src1_data),                                          //          .data
		.sink0_startofpacket (rsp_demux_006_src1_startofpacket),                                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_006_src1_endofpacket),                                   //          .endofpacket
		.sink1_ready         (rsp_demux_007_src1_ready),                                         //     sink1.ready
		.sink1_valid         (rsp_demux_007_src1_valid),                                         //          .valid
		.sink1_channel       (rsp_demux_007_src1_channel),                                       //          .channel
		.sink1_data          (rsp_demux_007_src1_data),                                          //          .data
		.sink1_startofpacket (rsp_demux_007_src1_startofpacket),                                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_007_src1_endofpacket)                                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_shared_s1_rsp_width_adapter (
		.clk                  (PLL_Shared_outclk1_clk),                                         //       clk.clk
		.reset                (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_005_src_valid),                                           //      sink.valid
		.in_channel           (router_005_src_channel),                                         //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                   //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                     //          .endofpacket
		.in_ready             (router_005_src_ready),                                           //          .ready
		.in_data              (router_005_src_data),                                            //          .data
		.out_endofpacket      (sdram_controller_shared_s1_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_shared_s1_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_shared_s1_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_shared_s1_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_shared_s1_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_shared_s1_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sdram_controller_shared_s1_cmd_width_adapter (
		.clk                  (PLL_Shared_outclk1_clk),                                         //       clk.clk
		.reset                (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                                              //      sink.valid
		.in_channel           (cmd_mux_src_channel),                                            //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                                              //          .ready
		.in_data              (cmd_mux_src_data),                                               //          .data
		.out_endofpacket      (sdram_controller_shared_s1_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sdram_controller_shared_s1_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sdram_controller_shared_s1_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sdram_controller_shared_s1_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sdram_controller_shared_s1_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sdram_controller_shared_s1_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (PLL_Shared_outclk0_clk),                                           //        in_clk.clk
		.in_reset          (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk1_clk),                                           //       out_clk.clk
		.out_reset         (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                             //            in.ready
		.in_valid          (cmd_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                           //              .channel
		.in_data           (cmd_demux_src0_data),                                              //              .data
		.out_ready         (crosser_out_ready),                                                //           out.ready
		.out_valid         (crosser_out_valid),                                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                          //              .endofpacket
		.out_channel       (crosser_out_channel),                                              //              .channel
		.out_data          (crosser_out_data),                                                 //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (PLL_Shared_outclk0_clk),                                    //        in_clk.clk
		.in_reset          (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk1_clk),                                    //       out_clk.clk
		.out_reset         (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                  //            in.ready
		.in_valid          (cmd_demux_001_src0_valid),                                  //              .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                            //              .endofpacket
		.in_channel        (cmd_demux_001_src0_channel),                                //              .channel
		.in_data           (cmd_demux_001_src0_data),                                   //              .data
		.out_ready         (crosser_001_out_ready),                                     //           out.ready
		.out_valid         (crosser_001_out_valid),                                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //              .channel
		.out_data          (crosser_001_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (PLL_Shared_outclk0_clk),                                //        in_clk.clk
		.in_reset          (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),    //  in_clk_reset.reset
		.out_clk           (SysAudio_Audio_Clock_audio_clk_clk),                    //       out_clk.clk
		.out_reset         (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_001_src6_ready),                              //            in.ready
		.in_valid          (cmd_demux_001_src6_valid),                              //              .valid
		.in_startofpacket  (cmd_demux_001_src6_startofpacket),                      //              .startofpacket
		.in_endofpacket    (cmd_demux_001_src6_endofpacket),                        //              .endofpacket
		.in_channel        (cmd_demux_001_src6_channel),                            //              .channel
		.in_data           (cmd_demux_001_src6_data),                               //              .data
		.out_ready         (crosser_002_out_ready),                                 //           out.ready
		.out_valid         (crosser_002_out_valid),                                 //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_002_out_channel),                               //              .channel
		.out_data          (crosser_002_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (PLL_Shared_outclk0_clk),                                           //        in_clk.clk
		.in_reset          (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk1_clk),                                           //       out_clk.clk
		.out_reset         (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                         //            in.ready
		.in_valid          (cmd_demux_002_src0_valid),                                         //              .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                                 //              .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                                   //              .endofpacket
		.in_channel        (cmd_demux_002_src0_channel),                                       //              .channel
		.in_data           (cmd_demux_002_src0_data),                                          //              .data
		.out_ready         (crosser_003_out_ready),                                            //           out.ready
		.out_valid         (crosser_003_out_valid),                                            //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                          //              .channel
		.out_data          (crosser_003_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (PLL_Shared_outclk1_clk),                                           //        in_clk.clk
		.in_reset          (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk0_clk),                                           //       out_clk.clk
		.out_reset         (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src0_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src0_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                           //              .channel
		.in_data           (rsp_demux_src0_data),                                              //              .data
		.out_ready         (crosser_004_out_ready),                                            //           out.ready
		.out_valid         (crosser_004_out_valid),                                            //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_004_out_channel),                                          //              .channel
		.out_data          (crosser_004_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (PLL_Shared_outclk1_clk),                                    //        in_clk.clk
		.in_reset          (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk0_clk),                                    //       out_clk.clk
		.out_reset         (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),        // out_clk_reset.reset
		.in_ready          (rsp_demux_src1_ready),                                      //            in.ready
		.in_valid          (rsp_demux_src1_valid),                                      //              .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                              //              .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                                //              .endofpacket
		.in_channel        (rsp_demux_src1_channel),                                    //              .channel
		.in_data           (rsp_demux_src1_data),                                       //              .data
		.out_ready         (crosser_005_out_ready),                                     //           out.ready
		.out_valid         (crosser_005_out_valid),                                     //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_005_out_channel),                                   //              .channel
		.out_data          (crosser_005_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (PLL_Shared_outclk1_clk),                                           //        in_clk.clk
		.in_reset          (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset),        //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk0_clk),                                           //       out_clk.clk
		.out_reset         (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_src2_ready),                                             //            in.ready
		.in_valid          (rsp_demux_src2_valid),                                             //              .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                                     //              .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                                       //              .endofpacket
		.in_channel        (rsp_demux_src2_channel),                                           //              .channel
		.in_data           (rsp_demux_src2_data),                                              //              .data
		.out_ready         (crosser_006_out_ready),                                            //           out.ready
		.out_valid         (crosser_006_out_valid),                                            //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                                    //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                                      //              .endofpacket
		.out_channel       (crosser_006_out_channel),                                          //              .channel
		.out_data          (crosser_006_out_data),                                             //              .data
		.in_empty          (1'b0),                                                             //   (terminated)
		.in_error          (1'b0),                                                             //   (terminated)
		.out_empty         (),                                                                 //   (terminated)
		.out_error         ()                                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (SysAudio_Audio_Clock_audio_clk_clk),                    //        in_clk.clk
		.in_reset          (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (PLL_Shared_outclk0_clk),                                //       out_clk.clk
		.out_reset         (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),    // out_clk_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                              //            in.ready
		.in_valid          (rsp_demux_014_src0_valid),                              //              .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),                      //              .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                        //              .endofpacket
		.in_channel        (rsp_demux_014_src0_channel),                            //              .channel
		.in_data           (rsp_demux_014_src0_data),                               //              .data
		.out_ready         (crosser_007_out_ready),                                 //           out.ready
		.out_valid         (crosser_007_out_valid),                                 //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                         //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                           //              .endofpacket
		.out_channel       (crosser_007_out_channel),                               //              .channel
		.out_data          (crosser_007_out_data),                                  //              .data
		.in_empty          (1'b0),                                                  //   (terminated)
		.in_error          (1'b0),                                                  //   (terminated)
		.out_empty         (),                                                      //   (terminated)
		.out_error         ()                                                       //   (terminated)
	);

	soc_system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (PLL_Shared_outclk1_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (SDRAM_Controller_Shared_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sdram_controller_shared_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sdram_controller_shared_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sdram_controller_shared_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (syssigproc_hw_accelerator_as_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                                 //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (syssigproc_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_audiotosigproc_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_sigproctoaudio_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (syssigproc_performance_counter_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                                        //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (syssigproc_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                                 //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (syssigproc_onchip_memory_s1_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                                 //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_leds_shared_s1_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pio_leds_shared_s1_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pio_leds_shared_s1_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (PIO_LEDs_Shared_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_switches_s1_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (pio_switches_s1_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (pio_switches_s1_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_1st_7seg_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pio_1st_7seg_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pio_1st_7seg_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                   //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_2nd_7seg_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pio_2nd_7seg_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pio_2nd_7seg_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                   //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                             // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_3rd_7seg_s1_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pio_3rd_7seg_s1_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pio_3rd_7seg_s1_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                  //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                  //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                   //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_debug_s1_agent_rdata_fifo_src_data),                           //     in_0.data
		.in_0_valid     (pio_debug_s1_agent_rdata_fifo_src_valid),                          //         .valid
		.in_0_ready     (pio_debug_s1_agent_rdata_fifo_src_ready),                          //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                                //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                                //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                                 //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (SysAudio_Audio_Clock_audio_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (SysAudio_Audio_Core_reset_reset_bridge_in_reset_reset),             // in_rst_0.reset
		.in_0_data      (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysaudio_audio_core_avalon_audio_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                   // in_rst_0.reset
		.in_0_data      (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysaudio_av_config_avalon_av_config_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                                    //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                                    //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                                     //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysaudio_jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                                //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                              // in_clk_0.clk
		.in_rst_0_reset (SysSigProc_HW_accelerator_reset_sink_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_sigproctoaudio_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)                                    //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_audiotosigproc_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),                                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),                                 //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),                                 //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)                                  //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                                // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),                    // in_rst_0.reset
		.in_0_data      (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysaudio_performance_counter_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),                                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),                                     //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),                                     //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)                                      //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_020 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                                      // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysaudio_nios_ii_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_020_out_0_data),                            //    out_0.data
		.out_0_valid    (avalon_st_adapter_020_out_0_valid),                           //         .valid
		.out_0_ready    (avalon_st_adapter_020_out_0_ready),                           //         .ready
		.out_0_error    (avalon_st_adapter_020_out_0_error)                            //         .error
	);

	soc_system_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_021 (
		.in_clk_0_clk   (PLL_Shared_outclk0_clk),                               // in_clk_0.clk
		.in_rst_0_reset (SysAudio_NIOS_II_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysaudio_onchip_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_021_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_021_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_021_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_021_out_0_error)                     //         .error
	);

endmodule

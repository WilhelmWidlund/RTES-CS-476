
cpu_1_proj.elf:     file format elf32-littlenios2
cpu_1_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020244

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x000105f4 memsz 0x000105f4 flags r-x
    LOAD off    0x00011614 vaddr 0x04030614 paddr 0x040321f0 align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags rw-
    LOAD off    0x00013dcc vaddr 0x04033dcc paddr 0x04033dcc align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ffa0  04020244  04020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000430  040301e4  040301e4  000111e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bdc  04030614  040321f0  00011614  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  04033dcc  04033dcc  00013dcc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00000000  00000000  000131f0  2**0
                  CONTENTS
  7 .onchip_memory_1 00000000  04033f38  04033f38  000131f0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  00013218  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000242a3  00000000  00000000  00014110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009373  00000000  00000000  000383b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8f2  00000000  00000000  00041726  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000236c  00000000  00000000  0004d018  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003bb9  00000000  00000000  0004f384  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  00052f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006a7a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  0006a808  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f586  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0006f589  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f58e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f58f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006f590  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006f59b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006f5a6  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006f5b1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  0006f5bb  2**0
                  CONTENTS, READONLY
 27 .jdi          0000b01f  00000000  00000000  0006f5db  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000bbbae  00000000  00000000  0007a5fa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020244 l    d  .text	00000000 .text
040301e4 l    d  .rodata	00000000 .rodata
04030614 l    d  .rwdata	00000000 .rwdata
04033dcc l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_2	00000000 .sdram_controller_2
04033f38 l    d  .onchip_memory_1	00000000 .onchip_memory_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/miniproject_2/sw/nios/cpu_1_proj_bsp//obj/HAL/src/crt0.o
0402028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
040302fa l     O .rodata	00000010 zeroes.4404
04022ad8 l     F .text	000000bc __sbprintf
0403030a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04022ce8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04024818 l     F .text	00000008 __fp_unlock
0402482c l     F .text	0000019c __sinit.part.1
040249c8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04030614 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04030a58 l     O .rwdata	00000020 lc_ctype_charset
04030a38 l     O .rwdata	00000020 lc_message_charset
04030a78 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0403033c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027dc4 l     F .text	000000fc __sprint_r.part.0
04030470 l     O .rodata	00000010 blanks.4348
04030460 l     O .rodata	00000010 zeroes.4349
04029350 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0402d00c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0402d160 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402d18c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0402d518 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402d5f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402d6e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0402d8b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040321dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402db34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402dc68 l     F .text	00000034 alt_dev_reg
04031060 l     O .rwdata	00001060 jtag_uart_1
040320c0 l     O .rwdata	00000048 mailbox_simple_0
04032108 l     O .rwdata	00000048 mailbox_simple_1
04032150 l     O .rwdata	0000002c parallel_port_1
0403217c l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402df90 l     F .text	0000020c altera_avalon_jtag_uart_irq
0402e19c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0402e7d4 l     F .text	00000090 altera_avalon_mailbox_identify
0402e864 l     F .text	00000078 altera_avalon_mailbox_post
0402e8dc l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0402ea14 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402f3b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0402f6b8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0402f7f8 l     F .text	0000003c alt_get_errno
0402f834 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04033e04 g     O .bss	00000004 alt_instruction_exception_handler
04027408 g     F .text	00000074 _mprec_log10
0402eea8 g     F .text	00000150 altera_avalon_mailbox_send
040274f4 g     F .text	0000008c __any_on
040298ec g     F .text	00000054 _isatty_r
04030348 g     O .rodata	00000028 __mprec_tinytens
0402d7f4 g     F .text	0000007c alt_main
04020758 g     F .text	000000c0 _puts_r
04033e38 g     O .bss	00000100 alt_irq
04029940 g     F .text	00000060 _lseek_r
040321f0 g       *ABS*	00000000 __flash_rwdata_start
0402bb38 g     F .text	00000088 .hidden __eqdf2
04033f38 g       *ABS*	00000000 __alt_heap_start
0402071c g     F .text	0000003c printf
040204a0 g     F .text	0000005c setup_switch_interrupts
04029b58 g     F .text	0000009c _wcrtomb_r
04027c84 g     F .text	0000005c __sseek
04024b68 g     F .text	00000010 __sinit
04029a00 g     F .text	00000140 __swbuf_r
04025630 g     F .text	0000007c _setlocale_r
040249d0 g     F .text	00000068 __sfmoreglue
0402d894 g     F .text	00000024 __malloc_unlock
04026300 g     F .text	0000015c memmove
04024b50 g     F .text	00000018 _cleanup
04026584 g     F .text	000000a8 _Balloc
0402bbc0 g     F .text	000000dc .hidden __gtdf2
0402fbf0 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
04029890 g     F .text	0000005c _fstat_r
04033df0 g     O .bss	00000004 errno
04027c00 g     F .text	00000008 __seofread
04020360 g     F .text	00000050 receive_callback
04033dfc g     O .bss	00000004 alt_argv
0403a1a8 g       *ABS*	00000000 _gp
0402db04 g     F .text	00000030 usleep
0402eff8 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04030ee0 g     O .rwdata	00000180 alt_fd_list
0402f558 g     F .text	00000090 alt_find_dev
040261b8 g     F .text	00000148 memcpy
04024820 g     F .text	0000000c _cleanup_r
0402ce24 g     F .text	000000dc .hidden __floatsidf
0402f77c g     F .text	0000007c alt_io_redirect
0402bc9c g     F .text	000000f4 .hidden __ltdf2
040301e4 g       *ABS*	00000000 __DTOR_END__
04020818 g     F .text	00000014 puts
0402f61c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0402eabc g     F .text	00000078 altera_avalon_mailbox_simple_init
04027ae4 g     F .text	00000074 __fpclassifyd
04027364 g     F .text	000000a4 __ratio
04029334 g     F .text	0000001c __vfiprintf_internal
0402e394 g     F .text	0000021c altera_avalon_jtag_uart_read
040206ec g     F .text	00000030 _printf_r
0402a8e8 g     F .text	00000064 .hidden __udivsi3
0402d554 g     F .text	000000a4 isatty
04030398 g     O .rodata	000000c8 __mprec_tens
0402ee30 g     F .text	00000078 altera_avalon_mailbox_status
0402ed18 g     F .text	00000118 altera_avalon_mailbox_close
040256ac g     F .text	0000000c __locale_charset
0402fdc0 g     F .text	00000090 alt_icache_flush
04033dec g     O .bss	00000004 __malloc_top_pad
040321b0 g     O .rwdata	00000004 __mb_cur_max
040256dc g     F .text	0000000c _localeconv_r
04026990 g     F .text	0000003c __i2b
04024fec g     F .text	000004bc __sfvwrite_r
04027b58 g     F .text	00000054 _sbrk_r
040299a0 g     F .text	00000060 _read_r
040321d0 g     O .rwdata	00000004 alt_max_fd
04029584 g     F .text	000000f0 _fclose_r
040247e8 g     F .text	00000030 fflush
04033de8 g     O .bss	00000004 __malloc_max_sbrked_mem
0402a9a4 g     F .text	000008ac .hidden __adddf3
04020450 g     F .text	00000050 isr_switches
0402710c g     F .text	0000010c __b2d
0402a2b8 g     F .text	00000538 .hidden __umoddi3
0402d720 g     F .text	000000d4 lseek
040321a8 g     O .rwdata	00000004 _global_impure_ptr
04027580 g     F .text	00000564 _realloc_r
04033f38 g       *ABS*	00000000 __bss_end
0402d428 g     F .text	000000f0 alt_iic_isr_register
0402fae8 g     F .text	00000108 alt_tick
04029d40 g     F .text	00000578 .hidden __udivdi3
040297ec g     F .text	00000024 _fputwc_r
04030370 g     O .rodata	00000028 __mprec_bigtens
04026774 g     F .text	00000104 __s2b
0402cf00 g     F .text	000000a8 .hidden __floatunsidf
04026e4c g     F .text	00000060 __mcmp
04024b88 g     F .text	00000018 __fp_lock_all
0402d3dc g     F .text	0000004c alt_ic_irq_enabled
0402fa4c g     F .text	0000009c alt_alarm_stop
04033df4 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
04030eb8 g     O .rwdata	00000028 alt_dev_null
0402d118 g     F .text	00000048 alt_dcache_flush_all
04026878 g     F .text	00000068 __hi0bits
04033dd0 g     O .bss	00000008 mail
0402cda4 g     F .text	00000080 .hidden __fixdfsi
040321f0 g       *ABS*	00000000 __ram_rwdata_end
040321c8 g     O .rwdata	00000008 alt_dev_list
0402db70 g     F .text	000000f8 write
04030614 g       *ABS*	00000000 __ram_rodata_end
0402d1c8 g     F .text	000000b0 fstat
0402bc9c g     F .text	000000f4 .hidden __ledf2
04026bc4 g     F .text	00000140 __pow5mult
04027ed8 g     F .text	0000145c ___vfiprintf_internal_r
04033de0 g     O .bss	00000004 __nlocale_changed
0402a94c g     F .text	00000058 .hidden __umodsi3
04033f38 g       *ABS*	00000000 end
0402ded0 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040301e4 g       *ABS*	00000000 __CTOR_LIST__
04040000 g       *ABS*	00000000 __alt_stack_pointer
0402cfa8 g     F .text	00000064 .hidden __clzsi2
0402e5b0 g     F .text	00000224 altera_avalon_jtag_uart_write
04024b78 g     F .text	00000004 __sfp_lock_acquire
040260d4 g     F .text	000000e4 memchr
040208c4 g     F .text	000021f8 ___vfprintf_internal_r
04020408 g     F .text	00000048 choose_task
04024cdc g     F .text	00000310 _free_r
040256b8 g     F .text	00000010 __locale_mb_cur_max
04030030 g     F .text	00000180 __call_exitprocs
04033ddc g     O .bss	00000004 __mlocale_changed
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory_1
040321b4 g     O .rwdata	00000004 __malloc_sbrk_base
04020244 g     F .text	0000004c _start
04033e08 g     O .bss	00000004 _alt_tick_rate
04026d04 g     F .text	00000148 __lshift
04033e0c g     O .bss	00000004 _alt_nticks
0402d8f4 g     F .text	000000fc read
0402dcd4 g     F .text	00000098 alt_sys_init
0402ff18 g     F .text	00000118 __register_exitproc
040203b0 g     F .text	00000058 receive_mail
040269cc g     F .text	000001f8 __multiply
0402e23c g     F .text	00000068 altera_avalon_jtag_uart_close
04030614 g       *ABS*	00000000 __ram_rwdata_start
040301e4 g       *ABS*	00000000 __ram_rodata_start
04033e10 g     O .bss	00000028 __malloc_current_mallinfo
04027218 g     F .text	0000014c __d2b
0402dd6c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0402fd1c g     F .text	000000a4 alt_get_fd
0402f260 g     F .text	00000158 alt_busy_sleep
0402946c g     F .text	00000054 _close_r
0402fe9c g     F .text	0000007c memcmp
0402de2c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04033f38 g       *ABS*	00000000 __alt_stack_base
0402de7c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04022b94 g     F .text	00000154 __swsetup_r
0402b250 g     F .text	000008e8 .hidden __divdf3
04024a38 g     F .text	00000118 __sfp
0402747c g     F .text	00000078 __copybits
04030ab0 g     O .rwdata	00000408 __malloc_av_
04024b84 g     F .text	00000004 __sinit_lock_release
0402bd90 g     F .text	00000718 .hidden __muldf3
040204fc g     F .text	00000118 overall_function
04027bac g     F .text	00000054 __sread
0402fc14 g     F .text	00000108 alt_find_file
0402f3f4 g     F .text	000000a4 alt_dev_llist_insert
0402d870 g     F .text	00000024 __malloc_lock
0402da54 g     F .text	000000b0 sbrk
0402478c g     F .text	0000005c _fflush_r
040294c0 g     F .text	000000c4 _calloc_r
04033dcc g     O .bss	00000004 choice
04033dcc g       *ABS*	00000000 __bss_start
0402645c g     F .text	00000128 memset
040206b0 g     F .text	0000003c main
04033e00 g     O .bss	00000004 alt_envp
04033de4 g     O .bss	00000004 __malloc_max_total_mem
0402ddcc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04029b40 g     F .text	00000018 __swbuf
04020290 g     F .text	00000054 send_callback
04027ce0 g     F .text	00000008 __sclose
04040000 g       *ABS*	00000000 __alt_heap_limit
04029674 g     F .text	00000014 fclose
04022ee8 g     F .text	00001688 _dtoa_r
040258c8 g     F .text	0000080c _malloc_r
04029cb4 g     F .text	00000030 __ascii_wctomb
040321d4 g     O .rwdata	00000004 alt_errno
040254a8 g     F .text	000000c4 _fwalk
0402a7f0 g     F .text	00000084 .hidden __divsi3
04024bb8 g     F .text	00000124 _malloc_trim_r
040301e4 g       *ABS*	00000000 __CTOR_END__
04027ce8 g     F .text	000000dc strcmp
040301e4 g       *ABS*	00000000 __flash_rodata_start
040301e4 g       *ABS*	00000000 __DTOR_LIST__
0402bb38 g     F .text	00000088 .hidden __nedf2
0402dc9c g     F .text	00000038 alt_irq_init
0402d9f0 g     F .text	00000064 alt_release_fd
04030480 g     O .rodata	00000100 .hidden __clz_tab
04033dd8 g     O .bss	00000004 _PathLocale
0402fe50 g     F .text	00000014 atexit
0402940c g     F .text	00000060 _write_r
040256e8 g     F .text	00000018 setlocale
040321ac g     O .rwdata	00000004 _impure_ptr
04033df8 g     O .bss	00000004 alt_argc
04024570 g     F .text	0000021c __sflush_r
0402f4f8 g     F .text	00000060 _do_dtors
040256d4 g     F .text	00000008 __locale_cjk_lang
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
04020020 g       .exceptions	00000000 alt_irq_entry
040270a8 g     F .text	00000064 __ulp
04024ba0 g     F .text	00000018 __fp_unlock_all
040321c0 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
04025700 g     F .text	0000000c localeconv
040202e4 g     F .text	0000007c send_mail
0402d278 g     F .text	00000050 alt_ic_isr_register
040321f0 g       *ABS*	00000000 _edata
04033f38 g       *ABS*	00000000 _end
04029688 g     F .text	00000164 __fputwc
04020244 g       *ABS*	00000000 __ram_exceptions_end
0402e2a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402d350 g     F .text	0000008c alt_ic_irq_disable
040321e0 g     O .rwdata	00000008 alt_mailbox_simple_list
04027c08 g     F .text	0000007c __swrite
040321b8 g     O .rwdata	00000004 __malloc_trim_threshold
040256c8 g     F .text	0000000c __locale_msgcharset
0402fe64 g     F .text	00000038 exit
0402556c g     F .text	000000c4 _fwalk_reent
04026eac g     F .text	000001fc __mdiff
0402a874 g     F .text	00000074 .hidden __modsi3
04040000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04024b7c g     F .text	00000004 __sfp_lock_release
04020614 g     F .text	0000009c c_comp_function
0402eb34 g     F .text	000001e4 altera_avalon_mailbox_open
040301b0 g     F .text	00000034 _exit
0402f134 g     F .text	0000012c alt_alarm_start
0402570c g     F .text	000001bc __smakebuf_r
0402082c g     F .text	00000098 strlen
0402f8f8 g     F .text	00000154 open
0402bbc0 g     F .text	000000dc .hidden __gedf2
040321bc g     O .rwdata	00000004 __wctomb
04027ec0 g     F .text	00000018 __sprint_r
0402f5e8 g     F .text	00000034 alt_icache_flush_all
040321d8 g     O .rwdata	00000004 alt_priority_mask
0402d2c8 g     F .text	00000088 alt_ic_irq_enable
04022abc g     F .text	0000001c __vfprintf_internal
04029ce4 g     F .text	0000005c _wctomb_r
0402c4a8 g     F .text	000008fc .hidden __subdf3
040268e0 g     F .text	000000b0 __lo0bits
040321e8 g     O .rwdata	00000008 alt_alarm_list
0402f498 g     F .text	00000060 _do_ctors
04029bf4 g     F .text	000000c0 wcrtomb
0402d048 g     F .text	000000d0 close
0402d660 g     F .text	00000084 alt_load
04029810 g     F .text	00000080 fputwc
04024b80 g     F .text	00000004 __sinit_lock_acquire
04026654 g     F .text	00000120 __multadd
0402662c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409114 	ori	at,at,580
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	008100f4 	movhi	r2,1027
 4020140:	108f8e04 	addi	r2,r2,15928
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100f4 	movhi	r2,1027
 4020158:	108f8e04 	addi	r2,r2,15928
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e4:	000531fa 	rdctl	r2,exception
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201ec:	e0bffd17 	ldw	r2,-12(fp)
 40201f0:	10801f0c 	andi	r2,r2,124
 40201f4:	1004d0ba 	srli	r2,r2,2
 40201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40201fc:	0005333a 	rdctl	r2,badaddr
 4020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020204:	d0a71717 	ldw	r2,-25508(gp)
 4020208:	10000726 	beq	r2,zero,4020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402020c:	d0a71717 	ldw	r2,-25508(gp)
 4020210:	e0fffd17 	ldw	r3,-12(fp)
 4020214:	e1bffe17 	ldw	r6,-8(fp)
 4020218:	e17fff17 	ldw	r5,-4(fp)
 402021c:	1809883a 	mov	r4,r3
 4020220:	103ee83a 	callr	r2
 4020224:	00000206 	br	4020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402022c:	0005883a 	mov	r2,zero
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

Disassembly of section .text:

04020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 402024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020250:	00bffd16 	blt	zero,r2,4020248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020254:	06c10134 	movhi	sp,1028
    ori sp, sp, %lo(__alt_stack_pointer)
 4020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 402025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4020260:	d6a86a14 	ori	gp,gp,41384
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4020268:	108f7314 	ori	r2,r2,15820

    movhi r3, %hi(__bss_end)
 402026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4020270:	18cfce14 	ori	r3,r3,16184

    beq r2, r3, 1f
 4020274:	10c00326 	beq	r2,r3,4020284 <_start+0x40>

0:
    stw zero, (r2)
 4020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 402027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020280:	10fffd36 	bltu	r2,r3,4020278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020284:	402d6600 	call	402d660 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020288:	402d7f40 	call	402d7f4 <alt_main>

0402028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 402028c:	003fff06 	br	402028c <__alt_data_end+0xfffe028c>

04020290 <send_callback>:
// ----------------- Function definitions -------------------------------------

// ----------------- Mailbox functions ----------------------------------------

void send_callback(void* report, int status)
{
 4020290:	defffc04 	addi	sp,sp,-16
 4020294:	dfc00315 	stw	ra,12(sp)
 4020298:	df000215 	stw	fp,8(sp)
 402029c:	df000204 	addi	fp,sp,8
 40202a0:	e13ffe15 	stw	r4,-8(fp)
 40202a4:	e17fff15 	stw	r5,-4(fp)
	if(!status)
 40202a8:	e0bfff17 	ldw	r2,-4(fp)
 40202ac:	1000041e 	bne	r2,zero,40202c0 <send_callback+0x30>
	{
		printf("Sending completed.\n");
 40202b0:	010100f4 	movhi	r4,1027
 40202b4:	21007904 	addi	r4,r4,484
 40202b8:	40208180 	call	4020818 <puts>
	}
	else
	{
		printf("Sending error.\n");
	}
}
 40202bc:	00000306 	br	40202cc <send_callback+0x3c>
	{
		printf("Sending completed.\n");
	}
	else
	{
		printf("Sending error.\n");
 40202c0:	010100f4 	movhi	r4,1027
 40202c4:	21007e04 	addi	r4,r4,504
 40202c8:	40208180 	call	4020818 <puts>
	}
}
 40202cc:	0001883a 	nop
 40202d0:	e037883a 	mov	sp,fp
 40202d4:	dfc00117 	ldw	ra,4(sp)
 40202d8:	df000017 	ldw	fp,0(sp)
 40202dc:	dec00204 	addi	sp,sp,8
 40202e0:	f800283a 	ret

040202e4 <send_mail>:

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
 40202e4:	defff904 	addi	sp,sp,-28
 40202e8:	dfc00615 	stw	ra,24(sp)
 40202ec:	df000515 	stw	fp,20(sp)
 40202f0:	df000504 	addi	fp,sp,20
 40202f4:	e13ffe15 	stw	r4,-8(fp)
 40202f8:	e17fff15 	stw	r5,-4(fp)
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/Mailbox_SigProcToAudio", send_callback, NULL);
 40202fc:	000d883a 	mov	r6,zero
 4020300:	014100b4 	movhi	r5,1026
 4020304:	2940a404 	addi	r5,r5,656
 4020308:	010100f4 	movhi	r4,1027
 402030c:	21008204 	addi	r4,r4,520
 4020310:	402eb340 	call	402eb34 <altera_avalon_mailbox_open>
 4020314:	e0bffb15 	stw	r2,-20(fp)
	// Create mail "envelope"
	alt_u32 mail[2] = {start_addr, storage_length};
 4020318:	e0bffe17 	ldw	r2,-8(fp)
 402031c:	e0bffc15 	stw	r2,-16(fp)
 4020320:	e0bfff17 	ldw	r2,-4(fp)
 4020324:	e0bffd15 	stw	r2,-12(fp)
	// Send message
	altera_avalon_mailbox_send(mailbox_SigProcToAudio, mail, 0, POLL);
 4020328:	e0bffc04 	addi	r2,fp,-16
 402032c:	01c00044 	movi	r7,1
 4020330:	000d883a 	mov	r6,zero
 4020334:	100b883a 	mov	r5,r2
 4020338:	e13ffb17 	ldw	r4,-20(fp)
 402033c:	402eea80 	call	402eea8 <altera_avalon_mailbox_send>
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_SigProcToAudio);
 4020340:	e13ffb17 	ldw	r4,-20(fp)
 4020344:	402ed180 	call	402ed18 <altera_avalon_mailbox_close>
}
 4020348:	0001883a 	nop
 402034c:	e037883a 	mov	sp,fp
 4020350:	dfc00117 	ldw	ra,4(sp)
 4020354:	df000017 	ldw	fp,0(sp)
 4020358:	dec00204 	addi	sp,sp,8
 402035c:	f800283a 	ret

04020360 <receive_callback>:

void receive_callback(void* message)
{
 4020360:	defffd04 	addi	sp,sp,-12
 4020364:	dfc00215 	stw	ra,8(sp)
 4020368:	df000115 	stw	fp,4(sp)
 402036c:	df000104 	addi	fp,sp,4
 4020370:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4020374:	e0bfff17 	ldw	r2,-4(fp)
 4020378:	10000426 	beq	r2,zero,402038c <receive_callback+0x2c>
	{
		printf("Receiving completed.\n");
 402037c:	010100f4 	movhi	r4,1027
 4020380:	21008904 	addi	r4,r4,548
 4020384:	40208180 	call	4020818 <puts>
	}
	else
	{
		printf("Receiving error.\n");
	}
}
 4020388:	00000306 	br	4020398 <receive_callback+0x38>
	{
		printf("Receiving completed.\n");
	}
	else
	{
		printf("Receiving error.\n");
 402038c:	010100f4 	movhi	r4,1027
 4020390:	21008f04 	addi	r4,r4,572
 4020394:	40208180 	call	4020818 <puts>
	}
}
 4020398:	0001883a 	nop
 402039c:	e037883a 	mov	sp,fp
 40203a0:	dfc00117 	ldw	ra,4(sp)
 40203a4:	df000017 	ldw	fp,0(sp)
 40203a8:	dec00204 	addi	sp,sp,8
 40203ac:	f800283a 	ret

040203b0 <receive_mail>:

void receive_mail()
{
 40203b0:	defffd04 	addi	sp,sp,-12
 40203b4:	dfc00215 	stw	ra,8(sp)
 40203b8:	df000115 	stw	fp,4(sp)
 40203bc:	df000104 	addi	fp,sp,4
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/Mailbox_AudioToSigProc", NULL, receive_callback);
 40203c0:	018100b4 	movhi	r6,1026
 40203c4:	3180d804 	addi	r6,r6,864
 40203c8:	000b883a 	mov	r5,zero
 40203cc:	010100f4 	movhi	r4,1027
 40203d0:	21009404 	addi	r4,r4,592
 40203d4:	402eb340 	call	402eb34 <altera_avalon_mailbox_open>
 40203d8:	e0bfff15 	stw	r2,-4(fp)

	altera_avalon_mailbox_retrieve_poll(mailbox_AudioToSigProc, mail, 0);
 40203dc:	000d883a 	mov	r6,zero
 40203e0:	d1670a04 	addi	r5,gp,-25560
 40203e4:	e13fff17 	ldw	r4,-4(fp)
 40203e8:	402eff80 	call	402eff8 <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 40203ec:	402d1180 	call	402d118 <alt_dcache_flush_all>
}
 40203f0:	0001883a 	nop
 40203f4:	e037883a 	mov	sp,fp
 40203f8:	dfc00117 	ldw	ra,4(sp)
 40203fc:	df000017 	ldw	fp,0(sp)
 4020400:	dec00204 	addi	sp,sp,8
 4020404:	f800283a 	ret

04020408 <choose_task>:

// ----------------- Interrupt and task choosing functions -------------------------


void choose_task(int task)
{
 4020408:	defffd04 	addi	sp,sp,-12
 402040c:	dfc00215 	stw	ra,8(sp)
 4020410:	df000115 	stw	fp,4(sp)
 4020414:	df000104 	addi	fp,sp,4
 4020418:	e13fff15 	stw	r4,-4(fp)
	if(task == 1)
 402041c:	e0bfff17 	ldw	r2,-4(fp)
 4020420:	10800058 	cmpnei	r2,r2,1
 4020424:	1000041e 	bne	r2,zero,4020438 <choose_task+0x30>
	{
		// First switch (SW0)
		//overall_function(1);
		printf("Interrupt test on CPU %d\n", NIOS2_CPU_ID_VALUE);
 4020428:	01400044 	movi	r5,1
 402042c:	010100f4 	movhi	r4,1027
 4020430:	21009b04 	addi	r4,r4,620
 4020434:	402071c0 	call	402071c <printf>
	else if(task == 4)
	{
		// Third switch (SW2)
		// Etc. add as needed...
	}
}
 4020438:	0001883a 	nop
 402043c:	e037883a 	mov	sp,fp
 4020440:	dfc00117 	ldw	ra,4(sp)
 4020444:	df000017 	ldw	fp,0(sp)
 4020448:	dec00204 	addi	sp,sp,8
 402044c:	f800283a 	ret

04020450 <isr_switches>:

void isr_switches(void* context)
{
 4020450:	defffd04 	addi	sp,sp,-12
 4020454:	df000215 	stw	fp,8(sp)
 4020458:	df000204 	addi	fp,sp,8
 402045c:	e13fff15 	stw	r4,-4(fp)
	// Read interrupt source
	uint8_t pinvals = IORD_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG);
 4020460:	00810134 	movhi	r2,1028
 4020464:	10841b04 	addi	r2,r2,4204
 4020468:	10800023 	ldbuio	r2,0(r2)
 402046c:	10803fcc 	andi	r2,r2,255
 4020470:	e0bffe05 	stb	r2,-8(fp)
	// Save choice
	choice = (int)pinvals;
 4020474:	e0bffe03 	ldbu	r2,-8(fp)
 4020478:	d0a70915 	stw	r2,-25564(gp)
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG, pinvals);
 402047c:	e0fffe03 	ldbu	r3,-8(fp)
 4020480:	00810134 	movhi	r2,1028
 4020484:	10841b04 	addi	r2,r2,4204
 4020488:	10c00025 	stbio	r3,0(r2)
}
 402048c:	0001883a 	nop
 4020490:	e037883a 	mov	sp,fp
 4020494:	df000017 	ldw	fp,0(sp)
 4020498:	dec00104 	addi	sp,sp,4
 402049c:	f800283a 	ret

040204a0 <setup_switch_interrupts>:

void setup_switch_interrupts(uint8_t chosen_switches)
{
 40204a0:	defffc04 	addi	sp,sp,-16
 40204a4:	dfc00315 	stw	ra,12(sp)
 40204a8:	df000215 	stw	fp,8(sp)
 40204ac:	df000204 	addi	fp,sp,8
 40204b0:	2005883a 	mov	r2,r4
 40204b4:	e0bfff05 	stb	r2,-4(fp)
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
 40204b8:	e0ffff03 	ldbu	r3,-4(fp)
 40204bc:	00810134 	movhi	r2,1028
 40204c0:	10841a04 	addi	r2,r2,4200
 40204c4:	10c00025 	stbio	r3,0(r2)
	alt_ic_isr_register(PIO_2_IRQ_INTERRUPT_CONTROLLER_ID, PIO_2_IRQ, isr_switches, NULL, NULL);
 40204c8:	d8000015 	stw	zero,0(sp)
 40204cc:	000f883a 	mov	r7,zero
 40204d0:	018100b4 	movhi	r6,1026
 40204d4:	31811404 	addi	r6,r6,1104
 40204d8:	01400104 	movi	r5,4
 40204dc:	0009883a 	mov	r4,zero
 40204e0:	402d2780 	call	402d278 <alt_ic_isr_register>
	return;
 40204e4:	0001883a 	nop
}
 40204e8:	e037883a 	mov	sp,fp
 40204ec:	dfc00117 	ldw	ra,4(sp)
 40204f0:	df000017 	ldw	fp,0(sp)
 40204f4:	dec00204 	addi	sp,sp,8
 40204f8:	f800283a 	ret

040204fc <overall_function>:

// --------------------- DMA/Custom Instruction function -----------------------

void overall_function(int choice)
{
 40204fc:	defff404 	addi	sp,sp,-48
 4020500:	dfc00b15 	stw	ra,44(sp)
 4020504:	df000a15 	stw	fp,40(sp)
 4020508:	df000a04 	addi	fp,sp,40
 402050c:	e13fff15 	stw	r4,-4(fp)
	int op_type;
	receive_mail();
 4020510:	40203b00 	call	40203b0 <receive_mail>
	if(IORD_32DIRECT(PIO_2_BASE, 0)&0x100 == 0)
 4020514:	00810134 	movhi	r2,1028
 4020518:	10841804 	addi	r2,r2,4192
 402051c:	10800037 	ldwio	r2,0(r2)
	{
		op_type = 0;
	}
	else
	{
		op_type = 1;
 4020520:	00800044 	movi	r2,1
 4020524:	e0bff615 	stw	r2,-40(fp)
	}
	int total_snippets = mail[1];
 4020528:	d0a70b17 	ldw	r2,-25556(gp)
 402052c:	e0bff715 	stw	r2,-36(fp)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
 4020530:	008bb804 	movi	r2,12000
 4020534:	e0bff815 	stw	r2,-32(fp)
	int handled_snippets = 0;
 4020538:	e03ff915 	stw	zero,-28(fp)
	int memory_size = total_snippets*words_per_snippet*4;
 402053c:	e0fff717 	ldw	r3,-36(fp)
 4020540:	e0bff817 	ldw	r2,-32(fp)
 4020544:	1885383a 	mul	r2,r3,r2
 4020548:	1085883a 	add	r2,r2,r2
 402054c:	1085883a 	add	r2,r2,r2
 4020550:	e0bffa15 	stw	r2,-24(fp)
	int *start_storage_address = mail[0] + memory_size;
 4020554:	d0e70a17 	ldw	r3,-25560(gp)
 4020558:	e0bffa17 	ldw	r2,-24(fp)
 402055c:	1885883a 	add	r2,r3,r2
 4020560:	e0bffb15 	stw	r2,-20(fp)
	while(handled_snippets < total_snippets)
 4020564:	00001d06 	br	40205dc <overall_function+0xe0>
	{
		receive_mail();
 4020568:	40203b00 	call	40203b0 <receive_mail>
		// Prepare parameters
		int *snippet_starting_address = mail[0];
 402056c:	d0a70a17 	ldw	r2,-25560(gp)
 4020570:	e0bffc15 	stw	r2,-16(fp)
		int *snippet_storage_address = start_storage_address + handled_snippets*words_per_snippet*4;
 4020574:	e0fff917 	ldw	r3,-28(fp)
 4020578:	e0bff817 	ldw	r2,-32(fp)
 402057c:	1885383a 	mul	r2,r3,r2
 4020580:	1004913a 	slli	r2,r2,4
 4020584:	1007883a 	mov	r3,r2
 4020588:	e0bffb17 	ldw	r2,-20(fp)
 402058c:	10c5883a 	add	r2,r2,r3
 4020590:	e0bffd15 	stw	r2,-12(fp)
		int snippet_word_count = mail[1];
 4020594:	d0a70b17 	ldw	r2,-25556(gp)
 4020598:	e0bffe15 	stw	r2,-8(fp)
		// Turn on LED 9, signifying that signal processing is in progress
		//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 512);
		if(choice == 1)
 402059c:	e0bfff17 	ldw	r2,-4(fp)
 40205a0:	10800058 	cmpnei	r2,r2,1
 40205a4:	1000051e 	bne	r2,zero,40205bc <overall_function+0xc0>
		{
			// TODO: call accelerator
			printf("At call accelerator: handled_snippets = %i\n", handled_snippets);
 40205a8:	e17ff917 	ldw	r5,-28(fp)
 40205ac:	010100f4 	movhi	r4,1027
 40205b0:	2100a204 	addi	r4,r4,648
 40205b4:	402071c0 	call	402071c <printf>
 40205b8:	00000806 	br	40205dc <overall_function+0xe0>

		}
		else if(choice == 2)
 40205bc:	e0bfff17 	ldw	r2,-4(fp)
 40205c0:	108000a0 	cmpeqi	r2,r2,2
 40205c4:	1000051e 	bne	r2,zero,40205dc <overall_function+0xe0>
			// Call custom instruction
		}
		else
		{
			// call C comparison function
			c_comp_function(snippet_starting_address, snippet_storage_address, snippet_word_count, op_type);
 40205c8:	e1fff617 	ldw	r7,-40(fp)
 40205cc:	e1bffe17 	ldw	r6,-8(fp)
 40205d0:	e17ffd17 	ldw	r5,-12(fp)
 40205d4:	e13ffc17 	ldw	r4,-16(fp)
 40205d8:	40206140 	call	4020614 <c_comp_function>
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
	int handled_snippets = 0;
	int memory_size = total_snippets*words_per_snippet*4;
	int *start_storage_address = mail[0] + memory_size;
	while(handled_snippets < total_snippets)
 40205dc:	e0fff917 	ldw	r3,-28(fp)
 40205e0:	e0bff717 	ldw	r2,-36(fp)
 40205e4:	18bfe016 	blt	r3,r2,4020568 <__alt_data_end+0xfffe0568>
			c_comp_function(snippet_starting_address, snippet_storage_address, snippet_word_count, op_type);
		}
		// Turn off LED 9, signifying that signal processing is done
		//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0);
	}
	send_mail((alt_u32)start_storage_address, (alt_u32)memory_size);
 40205e8:	e0bffb17 	ldw	r2,-20(fp)
 40205ec:	e0fffa17 	ldw	r3,-24(fp)
 40205f0:	180b883a 	mov	r5,r3
 40205f4:	1009883a 	mov	r4,r2
 40205f8:	40202e40 	call	40202e4 <send_mail>
}
 40205fc:	0001883a 	nop
 4020600:	e037883a 	mov	sp,fp
 4020604:	dfc00117 	ldw	ra,4(sp)
 4020608:	df000017 	ldw	fp,0(sp)
 402060c:	dec00204 	addi	sp,sp,8
 4020610:	f800283a 	ret

04020614 <c_comp_function>:

void c_comp_function(alt_u32 *start_addr, alt_u32 *store_addr, alt_u32 word_count, int op_type)
{
 4020614:	defffa04 	addi	sp,sp,-24
 4020618:	df000515 	stw	fp,20(sp)
 402061c:	df000504 	addi	fp,sp,20
 4020620:	e13ffc15 	stw	r4,-16(fp)
 4020624:	e17ffd15 	stw	r5,-12(fp)
 4020628:	e1bffe15 	stw	r6,-8(fp)
 402062c:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 data;
	while(word_count > 0)
 4020630:	00001806 	br	4020694 <c_comp_function+0x80>
	{
		// Load data
		data = IORD_32DIRECT(start_addr, 0);
 4020634:	e0bffc17 	ldw	r2,-16(fp)
 4020638:	10800037 	ldwio	r2,0(r2)
 402063c:	e0bffb15 	stw	r2,-20(fp)
		// Perform operation
		data = (signed)data;
		if(op_type == 0)
 4020640:	e0bfff17 	ldw	r2,-4(fp)
 4020644:	1000041e 	bne	r2,zero,4020658 <c_comp_function+0x44>
		{
			data = (data >> 1);
 4020648:	e0bffb17 	ldw	r2,-20(fp)
 402064c:	1004d07a 	srli	r2,r2,1
 4020650:	e0bffb15 	stw	r2,-20(fp)
 4020654:	00000306 	br	4020664 <c_comp_function+0x50>
		}
		else
		{
			data = (data << 1);
 4020658:	e0bffb17 	ldw	r2,-20(fp)
 402065c:	1085883a 	add	r2,r2,r2
 4020660:	e0bffb15 	stw	r2,-20(fp)
		}
		// Store data
		IOWR_32DIRECT(store_addr, 0, (alt_u32)data);
 4020664:	e0fffb17 	ldw	r3,-20(fp)
 4020668:	e0bffd17 	ldw	r2,-12(fp)
 402066c:	10c00035 	stwio	r3,0(r2)
		// Update variables
		start_addr += 4;
 4020670:	e0bffc17 	ldw	r2,-16(fp)
 4020674:	10800404 	addi	r2,r2,16
 4020678:	e0bffc15 	stw	r2,-16(fp)
		store_addr += 4;
 402067c:	e0bffd17 	ldw	r2,-12(fp)
 4020680:	10800404 	addi	r2,r2,16
 4020684:	e0bffd15 	stw	r2,-12(fp)
		word_count --;
 4020688:	e0bffe17 	ldw	r2,-8(fp)
 402068c:	10bfffc4 	addi	r2,r2,-1
 4020690:	e0bffe15 	stw	r2,-8(fp)
}

void c_comp_function(alt_u32 *start_addr, alt_u32 *store_addr, alt_u32 word_count, int op_type)
{
	alt_u32 data;
	while(word_count > 0)
 4020694:	e0bffe17 	ldw	r2,-8(fp)
 4020698:	103fe61e 	bne	r2,zero,4020634 <__alt_data_end+0xfffe0634>
		// Update variables
		start_addr += 4;
		store_addr += 4;
		word_count --;
	}
}
 402069c:	0001883a 	nop
 40206a0:	e037883a 	mov	sp,fp
 40206a4:	df000017 	ldw	fp,0(sp)
 40206a8:	dec00104 	addi	sp,sp,4
 40206ac:	f800283a 	ret

040206b0 <main>:

// ----------------------- Main function ----------------------------------

int main()
{
 40206b0:	defffe04 	addi	sp,sp,-8
 40206b4:	dfc00115 	stw	ra,4(sp)
 40206b8:	df000015 	stw	fp,0(sp)
 40206bc:	d839883a 	mov	fp,sp
	// Setup interrupts on the first 4 switches
	setup_switch_interrupts(0x7);
 40206c0:	010001c4 	movi	r4,7
 40206c4:	40204a00 	call	40204a0 <setup_switch_interrupts>

	// Wait for switches
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 40206c8:	0100fa04 	movi	r4,1000
 40206cc:	402db040 	call	402db04 <usleep>
		if(choice != 0)
 40206d0:	d0a70917 	ldw	r2,-25564(gp)
 40206d4:	103ffc26 	beq	r2,zero,40206c8 <__alt_data_end+0xfffe06c8>
		{
			choose_task(choice);
 40206d8:	d0a70917 	ldw	r2,-25564(gp)
 40206dc:	1009883a 	mov	r4,r2
 40206e0:	40204080 	call	4020408 <choose_task>
			choice = 0x0;
 40206e4:	d0270915 	stw	zero,-25564(gp)
		}
	};
 40206e8:	003ff706 	br	40206c8 <__alt_data_end+0xfffe06c8>

040206ec <_printf_r>:
 40206ec:	defffd04 	addi	sp,sp,-12
 40206f0:	2805883a 	mov	r2,r5
 40206f4:	dfc00015 	stw	ra,0(sp)
 40206f8:	d9800115 	stw	r6,4(sp)
 40206fc:	d9c00215 	stw	r7,8(sp)
 4020700:	21400217 	ldw	r5,8(r4)
 4020704:	d9c00104 	addi	r7,sp,4
 4020708:	100d883a 	mov	r6,r2
 402070c:	40208c40 	call	40208c4 <___vfprintf_internal_r>
 4020710:	dfc00017 	ldw	ra,0(sp)
 4020714:	dec00304 	addi	sp,sp,12
 4020718:	f800283a 	ret

0402071c <printf>:
 402071c:	defffc04 	addi	sp,sp,-16
 4020720:	dfc00015 	stw	ra,0(sp)
 4020724:	d9400115 	stw	r5,4(sp)
 4020728:	d9800215 	stw	r6,8(sp)
 402072c:	d9c00315 	stw	r7,12(sp)
 4020730:	008100f4 	movhi	r2,1027
 4020734:	10886b04 	addi	r2,r2,8620
 4020738:	10800017 	ldw	r2,0(r2)
 402073c:	200b883a 	mov	r5,r4
 4020740:	d9800104 	addi	r6,sp,4
 4020744:	11000217 	ldw	r4,8(r2)
 4020748:	4022abc0 	call	4022abc <__vfprintf_internal>
 402074c:	dfc00017 	ldw	ra,0(sp)
 4020750:	dec00404 	addi	sp,sp,16
 4020754:	f800283a 	ret

04020758 <_puts_r>:
 4020758:	defff604 	addi	sp,sp,-40
 402075c:	dc000715 	stw	r16,28(sp)
 4020760:	2021883a 	mov	r16,r4
 4020764:	2809883a 	mov	r4,r5
 4020768:	dc400815 	stw	r17,32(sp)
 402076c:	dfc00915 	stw	ra,36(sp)
 4020770:	2823883a 	mov	r17,r5
 4020774:	402082c0 	call	402082c <strlen>
 4020778:	10c00044 	addi	r3,r2,1
 402077c:	d8800115 	stw	r2,4(sp)
 4020780:	008100f4 	movhi	r2,1027
 4020784:	1080ad04 	addi	r2,r2,692
 4020788:	d8800215 	stw	r2,8(sp)
 402078c:	00800044 	movi	r2,1
 4020790:	d8800315 	stw	r2,12(sp)
 4020794:	00800084 	movi	r2,2
 4020798:	dc400015 	stw	r17,0(sp)
 402079c:	d8c00615 	stw	r3,24(sp)
 40207a0:	dec00415 	stw	sp,16(sp)
 40207a4:	d8800515 	stw	r2,20(sp)
 40207a8:	80000226 	beq	r16,zero,40207b4 <_puts_r+0x5c>
 40207ac:	80800e17 	ldw	r2,56(r16)
 40207b0:	10001426 	beq	r2,zero,4020804 <_puts_r+0xac>
 40207b4:	81400217 	ldw	r5,8(r16)
 40207b8:	2880030b 	ldhu	r2,12(r5)
 40207bc:	10c8000c 	andi	r3,r2,8192
 40207c0:	1800061e 	bne	r3,zero,40207dc <_puts_r+0x84>
 40207c4:	29001917 	ldw	r4,100(r5)
 40207c8:	00f7ffc4 	movi	r3,-8193
 40207cc:	10880014 	ori	r2,r2,8192
 40207d0:	20c6703a 	and	r3,r4,r3
 40207d4:	2880030d 	sth	r2,12(r5)
 40207d8:	28c01915 	stw	r3,100(r5)
 40207dc:	d9800404 	addi	r6,sp,16
 40207e0:	8009883a 	mov	r4,r16
 40207e4:	4024fec0 	call	4024fec <__sfvwrite_r>
 40207e8:	1000091e 	bne	r2,zero,4020810 <_puts_r+0xb8>
 40207ec:	00800284 	movi	r2,10
 40207f0:	dfc00917 	ldw	ra,36(sp)
 40207f4:	dc400817 	ldw	r17,32(sp)
 40207f8:	dc000717 	ldw	r16,28(sp)
 40207fc:	dec00a04 	addi	sp,sp,40
 4020800:	f800283a 	ret
 4020804:	8009883a 	mov	r4,r16
 4020808:	4024b680 	call	4024b68 <__sinit>
 402080c:	003fe906 	br	40207b4 <__alt_data_end+0xfffe07b4>
 4020810:	00bfffc4 	movi	r2,-1
 4020814:	003ff606 	br	40207f0 <__alt_data_end+0xfffe07f0>

04020818 <puts>:
 4020818:	008100f4 	movhi	r2,1027
 402081c:	10886b04 	addi	r2,r2,8620
 4020820:	200b883a 	mov	r5,r4
 4020824:	11000017 	ldw	r4,0(r2)
 4020828:	40207581 	jmpi	4020758 <_puts_r>

0402082c <strlen>:
 402082c:	208000cc 	andi	r2,r4,3
 4020830:	10002026 	beq	r2,zero,40208b4 <strlen+0x88>
 4020834:	20800007 	ldb	r2,0(r4)
 4020838:	10002026 	beq	r2,zero,40208bc <strlen+0x90>
 402083c:	2005883a 	mov	r2,r4
 4020840:	00000206 	br	402084c <strlen+0x20>
 4020844:	10c00007 	ldb	r3,0(r2)
 4020848:	18001826 	beq	r3,zero,40208ac <strlen+0x80>
 402084c:	10800044 	addi	r2,r2,1
 4020850:	10c000cc 	andi	r3,r2,3
 4020854:	183ffb1e 	bne	r3,zero,4020844 <__alt_data_end+0xfffe0844>
 4020858:	10c00017 	ldw	r3,0(r2)
 402085c:	01ffbff4 	movhi	r7,65279
 4020860:	39ffbfc4 	addi	r7,r7,-257
 4020864:	00ca303a 	nor	r5,zero,r3
 4020868:	01a02074 	movhi	r6,32897
 402086c:	19c7883a 	add	r3,r3,r7
 4020870:	31a02004 	addi	r6,r6,-32640
 4020874:	1946703a 	and	r3,r3,r5
 4020878:	1986703a 	and	r3,r3,r6
 402087c:	1800091e 	bne	r3,zero,40208a4 <strlen+0x78>
 4020880:	10800104 	addi	r2,r2,4
 4020884:	10c00017 	ldw	r3,0(r2)
 4020888:	19cb883a 	add	r5,r3,r7
 402088c:	00c6303a 	nor	r3,zero,r3
 4020890:	28c6703a 	and	r3,r5,r3
 4020894:	1986703a 	and	r3,r3,r6
 4020898:	183ff926 	beq	r3,zero,4020880 <__alt_data_end+0xfffe0880>
 402089c:	00000106 	br	40208a4 <strlen+0x78>
 40208a0:	10800044 	addi	r2,r2,1
 40208a4:	10c00007 	ldb	r3,0(r2)
 40208a8:	183ffd1e 	bne	r3,zero,40208a0 <__alt_data_end+0xfffe08a0>
 40208ac:	1105c83a 	sub	r2,r2,r4
 40208b0:	f800283a 	ret
 40208b4:	2005883a 	mov	r2,r4
 40208b8:	003fe706 	br	4020858 <__alt_data_end+0xfffe0858>
 40208bc:	0005883a 	mov	r2,zero
 40208c0:	f800283a 	ret

040208c4 <___vfprintf_internal_r>:
 40208c4:	deffb804 	addi	sp,sp,-288
 40208c8:	dfc04715 	stw	ra,284(sp)
 40208cc:	ddc04515 	stw	r23,276(sp)
 40208d0:	dd404315 	stw	r21,268(sp)
 40208d4:	d9002c15 	stw	r4,176(sp)
 40208d8:	282f883a 	mov	r23,r5
 40208dc:	302b883a 	mov	r21,r6
 40208e0:	d9c02d15 	stw	r7,180(sp)
 40208e4:	df004615 	stw	fp,280(sp)
 40208e8:	dd804415 	stw	r22,272(sp)
 40208ec:	dd004215 	stw	r20,264(sp)
 40208f0:	dcc04115 	stw	r19,260(sp)
 40208f4:	dc804015 	stw	r18,256(sp)
 40208f8:	dc403f15 	stw	r17,252(sp)
 40208fc:	dc003e15 	stw	r16,248(sp)
 4020900:	40256dc0 	call	40256dc <_localeconv_r>
 4020904:	10800017 	ldw	r2,0(r2)
 4020908:	1009883a 	mov	r4,r2
 402090c:	d8803415 	stw	r2,208(sp)
 4020910:	402082c0 	call	402082c <strlen>
 4020914:	d8803715 	stw	r2,220(sp)
 4020918:	d8802c17 	ldw	r2,176(sp)
 402091c:	10000226 	beq	r2,zero,4020928 <___vfprintf_internal_r+0x64>
 4020920:	10800e17 	ldw	r2,56(r2)
 4020924:	1000f926 	beq	r2,zero,4020d0c <___vfprintf_internal_r+0x448>
 4020928:	b880030b 	ldhu	r2,12(r23)
 402092c:	10c8000c 	andi	r3,r2,8192
 4020930:	1800061e 	bne	r3,zero,402094c <___vfprintf_internal_r+0x88>
 4020934:	b9001917 	ldw	r4,100(r23)
 4020938:	00f7ffc4 	movi	r3,-8193
 402093c:	10880014 	ori	r2,r2,8192
 4020940:	20c6703a 	and	r3,r4,r3
 4020944:	b880030d 	sth	r2,12(r23)
 4020948:	b8c01915 	stw	r3,100(r23)
 402094c:	10c0020c 	andi	r3,r2,8
 4020950:	1800c126 	beq	r3,zero,4020c58 <___vfprintf_internal_r+0x394>
 4020954:	b8c00417 	ldw	r3,16(r23)
 4020958:	1800bf26 	beq	r3,zero,4020c58 <___vfprintf_internal_r+0x394>
 402095c:	1080068c 	andi	r2,r2,26
 4020960:	00c00284 	movi	r3,10
 4020964:	10c0c426 	beq	r2,r3,4020c78 <___vfprintf_internal_r+0x3b4>
 4020968:	d8c00404 	addi	r3,sp,16
 402096c:	050100f4 	movhi	r20,1027
 4020970:	d9001e04 	addi	r4,sp,120
 4020974:	a500be84 	addi	r20,r20,762
 4020978:	d8c01e15 	stw	r3,120(sp)
 402097c:	d8002015 	stw	zero,128(sp)
 4020980:	d8001f15 	stw	zero,124(sp)
 4020984:	d8003315 	stw	zero,204(sp)
 4020988:	d8003615 	stw	zero,216(sp)
 402098c:	d8003815 	stw	zero,224(sp)
 4020990:	1811883a 	mov	r8,r3
 4020994:	d8003915 	stw	zero,228(sp)
 4020998:	d8003a15 	stw	zero,232(sp)
 402099c:	d8002f15 	stw	zero,188(sp)
 40209a0:	d9002815 	stw	r4,160(sp)
 40209a4:	a8800007 	ldb	r2,0(r21)
 40209a8:	10027b26 	beq	r2,zero,4021398 <___vfprintf_internal_r+0xad4>
 40209ac:	00c00944 	movi	r3,37
 40209b0:	a821883a 	mov	r16,r21
 40209b4:	10c0021e 	bne	r2,r3,40209c0 <___vfprintf_internal_r+0xfc>
 40209b8:	00001406 	br	4020a0c <___vfprintf_internal_r+0x148>
 40209bc:	10c00326 	beq	r2,r3,40209cc <___vfprintf_internal_r+0x108>
 40209c0:	84000044 	addi	r16,r16,1
 40209c4:	80800007 	ldb	r2,0(r16)
 40209c8:	103ffc1e 	bne	r2,zero,40209bc <__alt_data_end+0xfffe09bc>
 40209cc:	8563c83a 	sub	r17,r16,r21
 40209d0:	88000e26 	beq	r17,zero,4020a0c <___vfprintf_internal_r+0x148>
 40209d4:	d8c02017 	ldw	r3,128(sp)
 40209d8:	d8801f17 	ldw	r2,124(sp)
 40209dc:	45400015 	stw	r21,0(r8)
 40209e0:	1c47883a 	add	r3,r3,r17
 40209e4:	10800044 	addi	r2,r2,1
 40209e8:	d8c02015 	stw	r3,128(sp)
 40209ec:	44400115 	stw	r17,4(r8)
 40209f0:	d8801f15 	stw	r2,124(sp)
 40209f4:	00c001c4 	movi	r3,7
 40209f8:	1880a716 	blt	r3,r2,4020c98 <___vfprintf_internal_r+0x3d4>
 40209fc:	42000204 	addi	r8,r8,8
 4020a00:	d9402f17 	ldw	r5,188(sp)
 4020a04:	2c4b883a 	add	r5,r5,r17
 4020a08:	d9402f15 	stw	r5,188(sp)
 4020a0c:	80800007 	ldb	r2,0(r16)
 4020a10:	1000a826 	beq	r2,zero,4020cb4 <___vfprintf_internal_r+0x3f0>
 4020a14:	84400047 	ldb	r17,1(r16)
 4020a18:	00bfffc4 	movi	r2,-1
 4020a1c:	85400044 	addi	r21,r16,1
 4020a20:	d8002785 	stb	zero,158(sp)
 4020a24:	0007883a 	mov	r3,zero
 4020a28:	000f883a 	mov	r7,zero
 4020a2c:	d8802915 	stw	r2,164(sp)
 4020a30:	d8003115 	stw	zero,196(sp)
 4020a34:	0025883a 	mov	r18,zero
 4020a38:	01401604 	movi	r5,88
 4020a3c:	01800244 	movi	r6,9
 4020a40:	02800a84 	movi	r10,42
 4020a44:	02401b04 	movi	r9,108
 4020a48:	ad400044 	addi	r21,r21,1
 4020a4c:	88bff804 	addi	r2,r17,-32
 4020a50:	28830436 	bltu	r5,r2,4021664 <___vfprintf_internal_r+0xda0>
 4020a54:	100490ba 	slli	r2,r2,2
 4020a58:	010100b4 	movhi	r4,1026
 4020a5c:	21029b04 	addi	r4,r4,2668
 4020a60:	1105883a 	add	r2,r2,r4
 4020a64:	10800017 	ldw	r2,0(r2)
 4020a68:	1000683a 	jmp	r2
 4020a6c:	04021584 	movi	r16,2134
 4020a70:	04021664 	muli	r16,zero,2137
 4020a74:	04021664 	muli	r16,zero,2137
 4020a78:	040215a4 	muli	r16,zero,2134
 4020a7c:	04021664 	muli	r16,zero,2137
 4020a80:	04021664 	muli	r16,zero,2137
 4020a84:	04021664 	muli	r16,zero,2137
 4020a88:	04021664 	muli	r16,zero,2137
 4020a8c:	04021664 	muli	r16,zero,2137
 4020a90:	04021664 	muli	r16,zero,2137
 4020a94:	04020d18 	cmpnei	r16,zero,2100
 4020a98:	040214c0 	call	40214c <__alt_mem_sdram_controller_2+0x40214c>
 4020a9c:	04021664 	muli	r16,zero,2137
 4020aa0:	04020be0 	cmpeqi	r16,zero,2095
 4020aa4:	04020d40 	call	4020d4 <__alt_mem_sdram_controller_2+0x4020d4>
 4020aa8:	04021664 	muli	r16,zero,2137
 4020aac:	04020d80 	call	4020d8 <__alt_mem_sdram_controller_2+0x4020d8>
 4020ab0:	04020d8c 	andi	r16,zero,2102
 4020ab4:	04020d8c 	andi	r16,zero,2102
 4020ab8:	04020d8c 	andi	r16,zero,2102
 4020abc:	04020d8c 	andi	r16,zero,2102
 4020ac0:	04020d8c 	andi	r16,zero,2102
 4020ac4:	04020d8c 	andi	r16,zero,2102
 4020ac8:	04020d8c 	andi	r16,zero,2102
 4020acc:	04020d8c 	andi	r16,zero,2102
 4020ad0:	04020d8c 	andi	r16,zero,2102
 4020ad4:	04021664 	muli	r16,zero,2137
 4020ad8:	04021664 	muli	r16,zero,2137
 4020adc:	04021664 	muli	r16,zero,2137
 4020ae0:	04021664 	muli	r16,zero,2137
 4020ae4:	04021664 	muli	r16,zero,2137
 4020ae8:	04021664 	muli	r16,zero,2137
 4020aec:	04021664 	muli	r16,zero,2137
 4020af0:	04021664 	muli	r16,zero,2137
 4020af4:	04021664 	muli	r16,zero,2137
 4020af8:	04021664 	muli	r16,zero,2137
 4020afc:	04020dc0 	call	4020dc <__alt_mem_sdram_controller_2+0x4020dc>
 4020b00:	04020e7c 	xorhi	r16,zero,2105
 4020b04:	04021664 	muli	r16,zero,2137
 4020b08:	04020e7c 	xorhi	r16,zero,2105
 4020b0c:	04021664 	muli	r16,zero,2137
 4020b10:	04021664 	muli	r16,zero,2137
 4020b14:	04021664 	muli	r16,zero,2137
 4020b18:	04021664 	muli	r16,zero,2137
 4020b1c:	04020f1c 	xori	r16,zero,2108
 4020b20:	04021664 	muli	r16,zero,2137
 4020b24:	04021664 	muli	r16,zero,2137
 4020b28:	04020f28 	cmpgeui	r16,zero,2108
 4020b2c:	04021664 	muli	r16,zero,2137
 4020b30:	04021664 	muli	r16,zero,2137
 4020b34:	04021664 	muli	r16,zero,2137
 4020b38:	04021664 	muli	r16,zero,2137
 4020b3c:	04021664 	muli	r16,zero,2137
 4020b40:	040213a0 	cmpeqi	r16,zero,2126
 4020b44:	04021664 	muli	r16,zero,2137
 4020b48:	04021664 	muli	r16,zero,2137
 4020b4c:	04021400 	call	402140 <__alt_mem_sdram_controller_2+0x402140>
 4020b50:	04021664 	muli	r16,zero,2137
 4020b54:	04021664 	muli	r16,zero,2137
 4020b58:	04021664 	muli	r16,zero,2137
 4020b5c:	04021664 	muli	r16,zero,2137
 4020b60:	04021664 	muli	r16,zero,2137
 4020b64:	04021664 	muli	r16,zero,2137
 4020b68:	04021664 	muli	r16,zero,2137
 4020b6c:	04021664 	muli	r16,zero,2137
 4020b70:	04021664 	muli	r16,zero,2137
 4020b74:	04021664 	muli	r16,zero,2137
 4020b78:	04021610 	cmplti	r16,zero,2136
 4020b7c:	040215b0 	cmpltui	r16,zero,2134
 4020b80:	04020e7c 	xorhi	r16,zero,2105
 4020b84:	04020e7c 	xorhi	r16,zero,2105
 4020b88:	04020e7c 	xorhi	r16,zero,2105
 4020b8c:	040215c0 	call	40215c <__alt_mem_sdram_controller_2+0x40215c>
 4020b90:	040215b0 	cmpltui	r16,zero,2134
 4020b94:	04021664 	muli	r16,zero,2137
 4020b98:	04021664 	muli	r16,zero,2137
 4020b9c:	040215cc 	andi	r16,zero,2135
 4020ba0:	04021664 	muli	r16,zero,2137
 4020ba4:	040215dc 	xori	r16,zero,2135
 4020ba8:	040214b0 	cmpltui	r16,zero,2130
 4020bac:	04020bec 	andhi	r16,zero,2095
 4020bb0:	040214d0 	cmplti	r16,zero,2131
 4020bb4:	04021664 	muli	r16,zero,2137
 4020bb8:	040214dc 	xori	r16,zero,2131
 4020bbc:	04021664 	muli	r16,zero,2137
 4020bc0:	04021538 	rdprs	r16,zero,2132
 4020bc4:	04021664 	muli	r16,zero,2137
 4020bc8:	04021664 	muli	r16,zero,2137
 4020bcc:	04021548 	cmpgei	r16,zero,2133
 4020bd0:	d9003117 	ldw	r4,196(sp)
 4020bd4:	d8802d15 	stw	r2,180(sp)
 4020bd8:	0109c83a 	sub	r4,zero,r4
 4020bdc:	d9003115 	stw	r4,196(sp)
 4020be0:	94800114 	ori	r18,r18,4
 4020be4:	ac400007 	ldb	r17,0(r21)
 4020be8:	003f9706 	br	4020a48 <__alt_data_end+0xfffe0a48>
 4020bec:	00800c04 	movi	r2,48
 4020bf0:	d9002d17 	ldw	r4,180(sp)
 4020bf4:	d9402917 	ldw	r5,164(sp)
 4020bf8:	d8802705 	stb	r2,156(sp)
 4020bfc:	00801e04 	movi	r2,120
 4020c00:	d8802745 	stb	r2,157(sp)
 4020c04:	d8002785 	stb	zero,158(sp)
 4020c08:	20c00104 	addi	r3,r4,4
 4020c0c:	24c00017 	ldw	r19,0(r4)
 4020c10:	002d883a 	mov	r22,zero
 4020c14:	90800094 	ori	r2,r18,2
 4020c18:	28029a16 	blt	r5,zero,4021684 <___vfprintf_internal_r+0xdc0>
 4020c1c:	00bfdfc4 	movi	r2,-129
 4020c20:	90a4703a 	and	r18,r18,r2
 4020c24:	d8c02d15 	stw	r3,180(sp)
 4020c28:	94800094 	ori	r18,r18,2
 4020c2c:	9802871e 	bne	r19,zero,402164c <___vfprintf_internal_r+0xd88>
 4020c30:	008100f4 	movhi	r2,1027
 4020c34:	1080b704 	addi	r2,r2,732
 4020c38:	d8803915 	stw	r2,228(sp)
 4020c3c:	04401e04 	movi	r17,120
 4020c40:	d8802917 	ldw	r2,164(sp)
 4020c44:	0039883a 	mov	fp,zero
 4020c48:	1001e926 	beq	r2,zero,40213f0 <___vfprintf_internal_r+0xb2c>
 4020c4c:	0027883a 	mov	r19,zero
 4020c50:	002d883a 	mov	r22,zero
 4020c54:	00020506 	br	402146c <___vfprintf_internal_r+0xba8>
 4020c58:	d9002c17 	ldw	r4,176(sp)
 4020c5c:	b80b883a 	mov	r5,r23
 4020c60:	4022b940 	call	4022b94 <__swsetup_r>
 4020c64:	1005ac1e 	bne	r2,zero,4022318 <___vfprintf_internal_r+0x1a54>
 4020c68:	b880030b 	ldhu	r2,12(r23)
 4020c6c:	00c00284 	movi	r3,10
 4020c70:	1080068c 	andi	r2,r2,26
 4020c74:	10ff3c1e 	bne	r2,r3,4020968 <__alt_data_end+0xfffe0968>
 4020c78:	b880038f 	ldh	r2,14(r23)
 4020c7c:	103f3a16 	blt	r2,zero,4020968 <__alt_data_end+0xfffe0968>
 4020c80:	d9c02d17 	ldw	r7,180(sp)
 4020c84:	d9002c17 	ldw	r4,176(sp)
 4020c88:	a80d883a 	mov	r6,r21
 4020c8c:	b80b883a 	mov	r5,r23
 4020c90:	4022ad80 	call	4022ad8 <__sbprintf>
 4020c94:	00001106 	br	4020cdc <___vfprintf_internal_r+0x418>
 4020c98:	d9002c17 	ldw	r4,176(sp)
 4020c9c:	d9801e04 	addi	r6,sp,120
 4020ca0:	b80b883a 	mov	r5,r23
 4020ca4:	4027ec00 	call	4027ec0 <__sprint_r>
 4020ca8:	1000081e 	bne	r2,zero,4020ccc <___vfprintf_internal_r+0x408>
 4020cac:	da000404 	addi	r8,sp,16
 4020cb0:	003f5306 	br	4020a00 <__alt_data_end+0xfffe0a00>
 4020cb4:	d8802017 	ldw	r2,128(sp)
 4020cb8:	10000426 	beq	r2,zero,4020ccc <___vfprintf_internal_r+0x408>
 4020cbc:	d9002c17 	ldw	r4,176(sp)
 4020cc0:	d9801e04 	addi	r6,sp,120
 4020cc4:	b80b883a 	mov	r5,r23
 4020cc8:	4027ec00 	call	4027ec0 <__sprint_r>
 4020ccc:	b880030b 	ldhu	r2,12(r23)
 4020cd0:	1080100c 	andi	r2,r2,64
 4020cd4:	1005901e 	bne	r2,zero,4022318 <___vfprintf_internal_r+0x1a54>
 4020cd8:	d8802f17 	ldw	r2,188(sp)
 4020cdc:	dfc04717 	ldw	ra,284(sp)
 4020ce0:	df004617 	ldw	fp,280(sp)
 4020ce4:	ddc04517 	ldw	r23,276(sp)
 4020ce8:	dd804417 	ldw	r22,272(sp)
 4020cec:	dd404317 	ldw	r21,268(sp)
 4020cf0:	dd004217 	ldw	r20,264(sp)
 4020cf4:	dcc04117 	ldw	r19,260(sp)
 4020cf8:	dc804017 	ldw	r18,256(sp)
 4020cfc:	dc403f17 	ldw	r17,252(sp)
 4020d00:	dc003e17 	ldw	r16,248(sp)
 4020d04:	dec04804 	addi	sp,sp,288
 4020d08:	f800283a 	ret
 4020d0c:	d9002c17 	ldw	r4,176(sp)
 4020d10:	4024b680 	call	4024b68 <__sinit>
 4020d14:	003f0406 	br	4020928 <__alt_data_end+0xfffe0928>
 4020d18:	d8802d17 	ldw	r2,180(sp)
 4020d1c:	d9002d17 	ldw	r4,180(sp)
 4020d20:	10800017 	ldw	r2,0(r2)
 4020d24:	d8803115 	stw	r2,196(sp)
 4020d28:	20800104 	addi	r2,r4,4
 4020d2c:	d9003117 	ldw	r4,196(sp)
 4020d30:	203fa716 	blt	r4,zero,4020bd0 <__alt_data_end+0xfffe0bd0>
 4020d34:	d8802d15 	stw	r2,180(sp)
 4020d38:	ac400007 	ldb	r17,0(r21)
 4020d3c:	003f4206 	br	4020a48 <__alt_data_end+0xfffe0a48>
 4020d40:	ac400007 	ldb	r17,0(r21)
 4020d44:	aac00044 	addi	r11,r21,1
 4020d48:	8a872826 	beq	r17,r10,40229ec <___vfprintf_internal_r+0x2128>
 4020d4c:	88bff404 	addi	r2,r17,-48
 4020d50:	0009883a 	mov	r4,zero
 4020d54:	30867d36 	bltu	r6,r2,402274c <___vfprintf_internal_r+0x1e88>
 4020d58:	5c400007 	ldb	r17,0(r11)
 4020d5c:	210002a4 	muli	r4,r4,10
 4020d60:	5d400044 	addi	r21,r11,1
 4020d64:	a817883a 	mov	r11,r21
 4020d68:	2089883a 	add	r4,r4,r2
 4020d6c:	88bff404 	addi	r2,r17,-48
 4020d70:	30bff92e 	bgeu	r6,r2,4020d58 <__alt_data_end+0xfffe0d58>
 4020d74:	2005c916 	blt	r4,zero,402249c <___vfprintf_internal_r+0x1bd8>
 4020d78:	d9002915 	stw	r4,164(sp)
 4020d7c:	003f3306 	br	4020a4c <__alt_data_end+0xfffe0a4c>
 4020d80:	94802014 	ori	r18,r18,128
 4020d84:	ac400007 	ldb	r17,0(r21)
 4020d88:	003f2f06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 4020d8c:	a809883a 	mov	r4,r21
 4020d90:	d8003115 	stw	zero,196(sp)
 4020d94:	88bff404 	addi	r2,r17,-48
 4020d98:	0017883a 	mov	r11,zero
 4020d9c:	24400007 	ldb	r17,0(r4)
 4020da0:	5ac002a4 	muli	r11,r11,10
 4020da4:	ad400044 	addi	r21,r21,1
 4020da8:	a809883a 	mov	r4,r21
 4020dac:	12d7883a 	add	r11,r2,r11
 4020db0:	88bff404 	addi	r2,r17,-48
 4020db4:	30bff92e 	bgeu	r6,r2,4020d9c <__alt_data_end+0xfffe0d9c>
 4020db8:	dac03115 	stw	r11,196(sp)
 4020dbc:	003f2306 	br	4020a4c <__alt_data_end+0xfffe0a4c>
 4020dc0:	18c03fcc 	andi	r3,r3,255
 4020dc4:	18072b1e 	bne	r3,zero,4022a74 <___vfprintf_internal_r+0x21b0>
 4020dc8:	94800414 	ori	r18,r18,16
 4020dcc:	9080080c 	andi	r2,r18,32
 4020dd0:	10037b26 	beq	r2,zero,4021bc0 <___vfprintf_internal_r+0x12fc>
 4020dd4:	d9402d17 	ldw	r5,180(sp)
 4020dd8:	28800117 	ldw	r2,4(r5)
 4020ddc:	2cc00017 	ldw	r19,0(r5)
 4020de0:	29400204 	addi	r5,r5,8
 4020de4:	d9402d15 	stw	r5,180(sp)
 4020de8:	102d883a 	mov	r22,r2
 4020dec:	10044b16 	blt	r2,zero,4021f1c <___vfprintf_internal_r+0x1658>
 4020df0:	d9402917 	ldw	r5,164(sp)
 4020df4:	df002783 	ldbu	fp,158(sp)
 4020df8:	2803bc16 	blt	r5,zero,4021cec <___vfprintf_internal_r+0x1428>
 4020dfc:	00ffdfc4 	movi	r3,-129
 4020e00:	9d84b03a 	or	r2,r19,r22
 4020e04:	90e4703a 	and	r18,r18,r3
 4020e08:	10017726 	beq	r2,zero,40213e8 <___vfprintf_internal_r+0xb24>
 4020e0c:	b0038326 	beq	r22,zero,4021c1c <___vfprintf_internal_r+0x1358>
 4020e10:	dc402a15 	stw	r17,168(sp)
 4020e14:	dc001e04 	addi	r16,sp,120
 4020e18:	b023883a 	mov	r17,r22
 4020e1c:	402d883a 	mov	r22,r8
 4020e20:	9809883a 	mov	r4,r19
 4020e24:	880b883a 	mov	r5,r17
 4020e28:	01800284 	movi	r6,10
 4020e2c:	000f883a 	mov	r7,zero
 4020e30:	402a2b80 	call	402a2b8 <__umoddi3>
 4020e34:	10800c04 	addi	r2,r2,48
 4020e38:	843fffc4 	addi	r16,r16,-1
 4020e3c:	9809883a 	mov	r4,r19
 4020e40:	880b883a 	mov	r5,r17
 4020e44:	80800005 	stb	r2,0(r16)
 4020e48:	01800284 	movi	r6,10
 4020e4c:	000f883a 	mov	r7,zero
 4020e50:	4029d400 	call	4029d40 <__udivdi3>
 4020e54:	1027883a 	mov	r19,r2
 4020e58:	10c4b03a 	or	r2,r2,r3
 4020e5c:	1823883a 	mov	r17,r3
 4020e60:	103fef1e 	bne	r2,zero,4020e20 <__alt_data_end+0xfffe0e20>
 4020e64:	d8c02817 	ldw	r3,160(sp)
 4020e68:	dc402a17 	ldw	r17,168(sp)
 4020e6c:	b011883a 	mov	r8,r22
 4020e70:	1c07c83a 	sub	r3,r3,r16
 4020e74:	d8c02e15 	stw	r3,184(sp)
 4020e78:	00005906 	br	4020fe0 <___vfprintf_internal_r+0x71c>
 4020e7c:	18c03fcc 	andi	r3,r3,255
 4020e80:	1806fa1e 	bne	r3,zero,4022a6c <___vfprintf_internal_r+0x21a8>
 4020e84:	9080020c 	andi	r2,r18,8
 4020e88:	10048a26 	beq	r2,zero,40220b4 <___vfprintf_internal_r+0x17f0>
 4020e8c:	d8c02d17 	ldw	r3,180(sp)
 4020e90:	d9002d17 	ldw	r4,180(sp)
 4020e94:	d9402d17 	ldw	r5,180(sp)
 4020e98:	18c00017 	ldw	r3,0(r3)
 4020e9c:	21000117 	ldw	r4,4(r4)
 4020ea0:	29400204 	addi	r5,r5,8
 4020ea4:	d8c03615 	stw	r3,216(sp)
 4020ea8:	d9003815 	stw	r4,224(sp)
 4020eac:	d9402d15 	stw	r5,180(sp)
 4020eb0:	d9003617 	ldw	r4,216(sp)
 4020eb4:	d9403817 	ldw	r5,224(sp)
 4020eb8:	da003d15 	stw	r8,244(sp)
 4020ebc:	04000044 	movi	r16,1
 4020ec0:	4027ae40 	call	4027ae4 <__fpclassifyd>
 4020ec4:	da003d17 	ldw	r8,244(sp)
 4020ec8:	14041f1e 	bne	r2,r16,4021f48 <___vfprintf_internal_r+0x1684>
 4020ecc:	d9003617 	ldw	r4,216(sp)
 4020ed0:	d9403817 	ldw	r5,224(sp)
 4020ed4:	000d883a 	mov	r6,zero
 4020ed8:	000f883a 	mov	r7,zero
 4020edc:	402bc9c0 	call	402bc9c <__ledf2>
 4020ee0:	da003d17 	ldw	r8,244(sp)
 4020ee4:	1005be16 	blt	r2,zero,40225e0 <___vfprintf_internal_r+0x1d1c>
 4020ee8:	df002783 	ldbu	fp,158(sp)
 4020eec:	008011c4 	movi	r2,71
 4020ef0:	1445330e 	bge	r2,r17,40223c0 <___vfprintf_internal_r+0x1afc>
 4020ef4:	040100f4 	movhi	r16,1027
 4020ef8:	8400af04 	addi	r16,r16,700
 4020efc:	00c000c4 	movi	r3,3
 4020f00:	00bfdfc4 	movi	r2,-129
 4020f04:	d8c02a15 	stw	r3,168(sp)
 4020f08:	90a4703a 	and	r18,r18,r2
 4020f0c:	d8c02e15 	stw	r3,184(sp)
 4020f10:	d8002915 	stw	zero,164(sp)
 4020f14:	d8003215 	stw	zero,200(sp)
 4020f18:	00003706 	br	4020ff8 <___vfprintf_internal_r+0x734>
 4020f1c:	94800214 	ori	r18,r18,8
 4020f20:	ac400007 	ldb	r17,0(r21)
 4020f24:	003ec806 	br	4020a48 <__alt_data_end+0xfffe0a48>
 4020f28:	18c03fcc 	andi	r3,r3,255
 4020f2c:	1806db1e 	bne	r3,zero,4022a9c <___vfprintf_internal_r+0x21d8>
 4020f30:	94800414 	ori	r18,r18,16
 4020f34:	9080080c 	andi	r2,r18,32
 4020f38:	1002d826 	beq	r2,zero,4021a9c <___vfprintf_internal_r+0x11d8>
 4020f3c:	d9402d17 	ldw	r5,180(sp)
 4020f40:	d8c02917 	ldw	r3,164(sp)
 4020f44:	d8002785 	stb	zero,158(sp)
 4020f48:	28800204 	addi	r2,r5,8
 4020f4c:	2cc00017 	ldw	r19,0(r5)
 4020f50:	2d800117 	ldw	r22,4(r5)
 4020f54:	18048f16 	blt	r3,zero,4022194 <___vfprintf_internal_r+0x18d0>
 4020f58:	013fdfc4 	movi	r4,-129
 4020f5c:	9d86b03a 	or	r3,r19,r22
 4020f60:	d8802d15 	stw	r2,180(sp)
 4020f64:	9124703a 	and	r18,r18,r4
 4020f68:	1802d91e 	bne	r3,zero,4021ad0 <___vfprintf_internal_r+0x120c>
 4020f6c:	d8c02917 	ldw	r3,164(sp)
 4020f70:	0039883a 	mov	fp,zero
 4020f74:	1805c326 	beq	r3,zero,4022684 <___vfprintf_internal_r+0x1dc0>
 4020f78:	0027883a 	mov	r19,zero
 4020f7c:	002d883a 	mov	r22,zero
 4020f80:	dc001e04 	addi	r16,sp,120
 4020f84:	9806d0fa 	srli	r3,r19,3
 4020f88:	b008977a 	slli	r4,r22,29
 4020f8c:	b02cd0fa 	srli	r22,r22,3
 4020f90:	9cc001cc 	andi	r19,r19,7
 4020f94:	98800c04 	addi	r2,r19,48
 4020f98:	843fffc4 	addi	r16,r16,-1
 4020f9c:	20e6b03a 	or	r19,r4,r3
 4020fa0:	80800005 	stb	r2,0(r16)
 4020fa4:	9d86b03a 	or	r3,r19,r22
 4020fa8:	183ff61e 	bne	r3,zero,4020f84 <__alt_data_end+0xfffe0f84>
 4020fac:	90c0004c 	andi	r3,r18,1
 4020fb0:	18013b26 	beq	r3,zero,40214a0 <___vfprintf_internal_r+0xbdc>
 4020fb4:	10803fcc 	andi	r2,r2,255
 4020fb8:	1080201c 	xori	r2,r2,128
 4020fbc:	10bfe004 	addi	r2,r2,-128
 4020fc0:	00c00c04 	movi	r3,48
 4020fc4:	10c13626 	beq	r2,r3,40214a0 <___vfprintf_internal_r+0xbdc>
 4020fc8:	80ffffc5 	stb	r3,-1(r16)
 4020fcc:	d8c02817 	ldw	r3,160(sp)
 4020fd0:	80bfffc4 	addi	r2,r16,-1
 4020fd4:	1021883a 	mov	r16,r2
 4020fd8:	1887c83a 	sub	r3,r3,r2
 4020fdc:	d8c02e15 	stw	r3,184(sp)
 4020fe0:	d8802e17 	ldw	r2,184(sp)
 4020fe4:	d9002917 	ldw	r4,164(sp)
 4020fe8:	1100010e 	bge	r2,r4,4020ff0 <___vfprintf_internal_r+0x72c>
 4020fec:	2005883a 	mov	r2,r4
 4020ff0:	d8802a15 	stw	r2,168(sp)
 4020ff4:	d8003215 	stw	zero,200(sp)
 4020ff8:	e7003fcc 	andi	fp,fp,255
 4020ffc:	e700201c 	xori	fp,fp,128
 4021000:	e73fe004 	addi	fp,fp,-128
 4021004:	e0000326 	beq	fp,zero,4021014 <___vfprintf_internal_r+0x750>
 4021008:	d8c02a17 	ldw	r3,168(sp)
 402100c:	18c00044 	addi	r3,r3,1
 4021010:	d8c02a15 	stw	r3,168(sp)
 4021014:	90c0008c 	andi	r3,r18,2
 4021018:	d8c02b15 	stw	r3,172(sp)
 402101c:	18000326 	beq	r3,zero,402102c <___vfprintf_internal_r+0x768>
 4021020:	d8c02a17 	ldw	r3,168(sp)
 4021024:	18c00084 	addi	r3,r3,2
 4021028:	d8c02a15 	stw	r3,168(sp)
 402102c:	90c0210c 	andi	r3,r18,132
 4021030:	d8c03015 	stw	r3,192(sp)
 4021034:	1801a31e 	bne	r3,zero,40216c4 <___vfprintf_internal_r+0xe00>
 4021038:	d9003117 	ldw	r4,196(sp)
 402103c:	d8c02a17 	ldw	r3,168(sp)
 4021040:	20e7c83a 	sub	r19,r4,r3
 4021044:	04c19f0e 	bge	zero,r19,40216c4 <___vfprintf_internal_r+0xe00>
 4021048:	02400404 	movi	r9,16
 402104c:	d8c02017 	ldw	r3,128(sp)
 4021050:	d8801f17 	ldw	r2,124(sp)
 4021054:	4cc50d0e 	bge	r9,r19,402248c <___vfprintf_internal_r+0x1bc8>
 4021058:	014100f4 	movhi	r5,1027
 402105c:	2940c284 	addi	r5,r5,778
 4021060:	dc403b15 	stw	r17,236(sp)
 4021064:	d9403515 	stw	r5,212(sp)
 4021068:	9823883a 	mov	r17,r19
 402106c:	482d883a 	mov	r22,r9
 4021070:	9027883a 	mov	r19,r18
 4021074:	070001c4 	movi	fp,7
 4021078:	8025883a 	mov	r18,r16
 402107c:	dc002c17 	ldw	r16,176(sp)
 4021080:	00000306 	br	4021090 <___vfprintf_internal_r+0x7cc>
 4021084:	8c7ffc04 	addi	r17,r17,-16
 4021088:	42000204 	addi	r8,r8,8
 402108c:	b440130e 	bge	r22,r17,40210dc <___vfprintf_internal_r+0x818>
 4021090:	010100f4 	movhi	r4,1027
 4021094:	18c00404 	addi	r3,r3,16
 4021098:	10800044 	addi	r2,r2,1
 402109c:	2100c284 	addi	r4,r4,778
 40210a0:	41000015 	stw	r4,0(r8)
 40210a4:	45800115 	stw	r22,4(r8)
 40210a8:	d8c02015 	stw	r3,128(sp)
 40210ac:	d8801f15 	stw	r2,124(sp)
 40210b0:	e0bff40e 	bge	fp,r2,4021084 <__alt_data_end+0xfffe1084>
 40210b4:	d9801e04 	addi	r6,sp,120
 40210b8:	b80b883a 	mov	r5,r23
 40210bc:	8009883a 	mov	r4,r16
 40210c0:	4027ec00 	call	4027ec0 <__sprint_r>
 40210c4:	103f011e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40210c8:	8c7ffc04 	addi	r17,r17,-16
 40210cc:	d8c02017 	ldw	r3,128(sp)
 40210d0:	d8801f17 	ldw	r2,124(sp)
 40210d4:	da000404 	addi	r8,sp,16
 40210d8:	b47fed16 	blt	r22,r17,4021090 <__alt_data_end+0xfffe1090>
 40210dc:	9021883a 	mov	r16,r18
 40210e0:	9825883a 	mov	r18,r19
 40210e4:	8827883a 	mov	r19,r17
 40210e8:	dc403b17 	ldw	r17,236(sp)
 40210ec:	d9403517 	ldw	r5,212(sp)
 40210f0:	98c7883a 	add	r3,r19,r3
 40210f4:	10800044 	addi	r2,r2,1
 40210f8:	41400015 	stw	r5,0(r8)
 40210fc:	44c00115 	stw	r19,4(r8)
 4021100:	d8c02015 	stw	r3,128(sp)
 4021104:	d8801f15 	stw	r2,124(sp)
 4021108:	010001c4 	movi	r4,7
 402110c:	2082a316 	blt	r4,r2,4021b9c <___vfprintf_internal_r+0x12d8>
 4021110:	df002787 	ldb	fp,158(sp)
 4021114:	42000204 	addi	r8,r8,8
 4021118:	e0000c26 	beq	fp,zero,402114c <___vfprintf_internal_r+0x888>
 402111c:	d8801f17 	ldw	r2,124(sp)
 4021120:	d9002784 	addi	r4,sp,158
 4021124:	18c00044 	addi	r3,r3,1
 4021128:	10800044 	addi	r2,r2,1
 402112c:	41000015 	stw	r4,0(r8)
 4021130:	01000044 	movi	r4,1
 4021134:	41000115 	stw	r4,4(r8)
 4021138:	d8c02015 	stw	r3,128(sp)
 402113c:	d8801f15 	stw	r2,124(sp)
 4021140:	010001c4 	movi	r4,7
 4021144:	20823c16 	blt	r4,r2,4021a38 <___vfprintf_internal_r+0x1174>
 4021148:	42000204 	addi	r8,r8,8
 402114c:	d8802b17 	ldw	r2,172(sp)
 4021150:	10000c26 	beq	r2,zero,4021184 <___vfprintf_internal_r+0x8c0>
 4021154:	d8801f17 	ldw	r2,124(sp)
 4021158:	d9002704 	addi	r4,sp,156
 402115c:	18c00084 	addi	r3,r3,2
 4021160:	10800044 	addi	r2,r2,1
 4021164:	41000015 	stw	r4,0(r8)
 4021168:	01000084 	movi	r4,2
 402116c:	41000115 	stw	r4,4(r8)
 4021170:	d8c02015 	stw	r3,128(sp)
 4021174:	d8801f15 	stw	r2,124(sp)
 4021178:	010001c4 	movi	r4,7
 402117c:	20823616 	blt	r4,r2,4021a58 <___vfprintf_internal_r+0x1194>
 4021180:	42000204 	addi	r8,r8,8
 4021184:	d9003017 	ldw	r4,192(sp)
 4021188:	00802004 	movi	r2,128
 402118c:	20819926 	beq	r4,r2,40217f4 <___vfprintf_internal_r+0xf30>
 4021190:	d9402917 	ldw	r5,164(sp)
 4021194:	d8802e17 	ldw	r2,184(sp)
 4021198:	28adc83a 	sub	r22,r5,r2
 402119c:	0580310e 	bge	zero,r22,4021264 <___vfprintf_internal_r+0x9a0>
 40211a0:	07000404 	movi	fp,16
 40211a4:	d8801f17 	ldw	r2,124(sp)
 40211a8:	e584140e 	bge	fp,r22,40221fc <___vfprintf_internal_r+0x1938>
 40211ac:	014100f4 	movhi	r5,1027
 40211b0:	2940be84 	addi	r5,r5,762
 40211b4:	dc402915 	stw	r17,164(sp)
 40211b8:	d9402b15 	stw	r5,172(sp)
 40211bc:	b023883a 	mov	r17,r22
 40211c0:	04c001c4 	movi	r19,7
 40211c4:	a82d883a 	mov	r22,r21
 40211c8:	902b883a 	mov	r21,r18
 40211cc:	8025883a 	mov	r18,r16
 40211d0:	dc002c17 	ldw	r16,176(sp)
 40211d4:	00000306 	br	40211e4 <___vfprintf_internal_r+0x920>
 40211d8:	8c7ffc04 	addi	r17,r17,-16
 40211dc:	42000204 	addi	r8,r8,8
 40211e0:	e440110e 	bge	fp,r17,4021228 <___vfprintf_internal_r+0x964>
 40211e4:	18c00404 	addi	r3,r3,16
 40211e8:	10800044 	addi	r2,r2,1
 40211ec:	45000015 	stw	r20,0(r8)
 40211f0:	47000115 	stw	fp,4(r8)
 40211f4:	d8c02015 	stw	r3,128(sp)
 40211f8:	d8801f15 	stw	r2,124(sp)
 40211fc:	98bff60e 	bge	r19,r2,40211d8 <__alt_data_end+0xfffe11d8>
 4021200:	d9801e04 	addi	r6,sp,120
 4021204:	b80b883a 	mov	r5,r23
 4021208:	8009883a 	mov	r4,r16
 402120c:	4027ec00 	call	4027ec0 <__sprint_r>
 4021210:	103eae1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021214:	8c7ffc04 	addi	r17,r17,-16
 4021218:	d8c02017 	ldw	r3,128(sp)
 402121c:	d8801f17 	ldw	r2,124(sp)
 4021220:	da000404 	addi	r8,sp,16
 4021224:	e47fef16 	blt	fp,r17,40211e4 <__alt_data_end+0xfffe11e4>
 4021228:	9021883a 	mov	r16,r18
 402122c:	a825883a 	mov	r18,r21
 4021230:	b02b883a 	mov	r21,r22
 4021234:	882d883a 	mov	r22,r17
 4021238:	dc402917 	ldw	r17,164(sp)
 402123c:	d9002b17 	ldw	r4,172(sp)
 4021240:	1d87883a 	add	r3,r3,r22
 4021244:	10800044 	addi	r2,r2,1
 4021248:	41000015 	stw	r4,0(r8)
 402124c:	45800115 	stw	r22,4(r8)
 4021250:	d8c02015 	stw	r3,128(sp)
 4021254:	d8801f15 	stw	r2,124(sp)
 4021258:	010001c4 	movi	r4,7
 402125c:	2081ee16 	blt	r4,r2,4021a18 <___vfprintf_internal_r+0x1154>
 4021260:	42000204 	addi	r8,r8,8
 4021264:	9080400c 	andi	r2,r18,256
 4021268:	1001181e 	bne	r2,zero,40216cc <___vfprintf_internal_r+0xe08>
 402126c:	d9402e17 	ldw	r5,184(sp)
 4021270:	d8801f17 	ldw	r2,124(sp)
 4021274:	44000015 	stw	r16,0(r8)
 4021278:	1947883a 	add	r3,r3,r5
 402127c:	10800044 	addi	r2,r2,1
 4021280:	41400115 	stw	r5,4(r8)
 4021284:	d8c02015 	stw	r3,128(sp)
 4021288:	d8801f15 	stw	r2,124(sp)
 402128c:	010001c4 	movi	r4,7
 4021290:	2081d316 	blt	r4,r2,40219e0 <___vfprintf_internal_r+0x111c>
 4021294:	42000204 	addi	r8,r8,8
 4021298:	9480010c 	andi	r18,r18,4
 402129c:	90003226 	beq	r18,zero,4021368 <___vfprintf_internal_r+0xaa4>
 40212a0:	d9403117 	ldw	r5,196(sp)
 40212a4:	d8802a17 	ldw	r2,168(sp)
 40212a8:	28a1c83a 	sub	r16,r5,r2
 40212ac:	04002e0e 	bge	zero,r16,4021368 <___vfprintf_internal_r+0xaa4>
 40212b0:	04400404 	movi	r17,16
 40212b4:	d8801f17 	ldw	r2,124(sp)
 40212b8:	8c04a20e 	bge	r17,r16,4022544 <___vfprintf_internal_r+0x1c80>
 40212bc:	014100f4 	movhi	r5,1027
 40212c0:	2940c284 	addi	r5,r5,778
 40212c4:	d9403515 	stw	r5,212(sp)
 40212c8:	048001c4 	movi	r18,7
 40212cc:	dcc02c17 	ldw	r19,176(sp)
 40212d0:	00000306 	br	40212e0 <___vfprintf_internal_r+0xa1c>
 40212d4:	843ffc04 	addi	r16,r16,-16
 40212d8:	42000204 	addi	r8,r8,8
 40212dc:	8c00130e 	bge	r17,r16,402132c <___vfprintf_internal_r+0xa68>
 40212e0:	010100f4 	movhi	r4,1027
 40212e4:	18c00404 	addi	r3,r3,16
 40212e8:	10800044 	addi	r2,r2,1
 40212ec:	2100c284 	addi	r4,r4,778
 40212f0:	41000015 	stw	r4,0(r8)
 40212f4:	44400115 	stw	r17,4(r8)
 40212f8:	d8c02015 	stw	r3,128(sp)
 40212fc:	d8801f15 	stw	r2,124(sp)
 4021300:	90bff40e 	bge	r18,r2,40212d4 <__alt_data_end+0xfffe12d4>
 4021304:	d9801e04 	addi	r6,sp,120
 4021308:	b80b883a 	mov	r5,r23
 402130c:	9809883a 	mov	r4,r19
 4021310:	4027ec00 	call	4027ec0 <__sprint_r>
 4021314:	103e6d1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021318:	843ffc04 	addi	r16,r16,-16
 402131c:	d8c02017 	ldw	r3,128(sp)
 4021320:	d8801f17 	ldw	r2,124(sp)
 4021324:	da000404 	addi	r8,sp,16
 4021328:	8c3fed16 	blt	r17,r16,40212e0 <__alt_data_end+0xfffe12e0>
 402132c:	d9403517 	ldw	r5,212(sp)
 4021330:	1c07883a 	add	r3,r3,r16
 4021334:	10800044 	addi	r2,r2,1
 4021338:	41400015 	stw	r5,0(r8)
 402133c:	44000115 	stw	r16,4(r8)
 4021340:	d8c02015 	stw	r3,128(sp)
 4021344:	d8801f15 	stw	r2,124(sp)
 4021348:	010001c4 	movi	r4,7
 402134c:	2080060e 	bge	r4,r2,4021368 <___vfprintf_internal_r+0xaa4>
 4021350:	d9002c17 	ldw	r4,176(sp)
 4021354:	d9801e04 	addi	r6,sp,120
 4021358:	b80b883a 	mov	r5,r23
 402135c:	4027ec00 	call	4027ec0 <__sprint_r>
 4021360:	103e5a1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021364:	d8c02017 	ldw	r3,128(sp)
 4021368:	d8803117 	ldw	r2,196(sp)
 402136c:	d9002a17 	ldw	r4,168(sp)
 4021370:	1100010e 	bge	r2,r4,4021378 <___vfprintf_internal_r+0xab4>
 4021374:	2005883a 	mov	r2,r4
 4021378:	d9402f17 	ldw	r5,188(sp)
 402137c:	288b883a 	add	r5,r5,r2
 4021380:	d9402f15 	stw	r5,188(sp)
 4021384:	18019e1e 	bne	r3,zero,4021a00 <___vfprintf_internal_r+0x113c>
 4021388:	a8800007 	ldb	r2,0(r21)
 402138c:	d8001f15 	stw	zero,124(sp)
 4021390:	da000404 	addi	r8,sp,16
 4021394:	103d851e 	bne	r2,zero,40209ac <__alt_data_end+0xfffe09ac>
 4021398:	a821883a 	mov	r16,r21
 402139c:	003d9b06 	br	4020a0c <__alt_data_end+0xfffe0a0c>
 40213a0:	18c03fcc 	andi	r3,r3,255
 40213a4:	1805c11e 	bne	r3,zero,4022aac <___vfprintf_internal_r+0x21e8>
 40213a8:	94800414 	ori	r18,r18,16
 40213ac:	9080080c 	andi	r2,r18,32
 40213b0:	10020c26 	beq	r2,zero,4021be4 <___vfprintf_internal_r+0x1320>
 40213b4:	d8802d17 	ldw	r2,180(sp)
 40213b8:	d9002917 	ldw	r4,164(sp)
 40213bc:	d8002785 	stb	zero,158(sp)
 40213c0:	10c00204 	addi	r3,r2,8
 40213c4:	14c00017 	ldw	r19,0(r2)
 40213c8:	15800117 	ldw	r22,4(r2)
 40213cc:	20040f16 	blt	r4,zero,402240c <___vfprintf_internal_r+0x1b48>
 40213d0:	013fdfc4 	movi	r4,-129
 40213d4:	9d84b03a 	or	r2,r19,r22
 40213d8:	d8c02d15 	stw	r3,180(sp)
 40213dc:	9124703a 	and	r18,r18,r4
 40213e0:	0039883a 	mov	fp,zero
 40213e4:	103e891e 	bne	r2,zero,4020e0c <__alt_data_end+0xfffe0e0c>
 40213e8:	d9002917 	ldw	r4,164(sp)
 40213ec:	2002c11e 	bne	r4,zero,4021ef4 <___vfprintf_internal_r+0x1630>
 40213f0:	d8002915 	stw	zero,164(sp)
 40213f4:	d8002e15 	stw	zero,184(sp)
 40213f8:	dc001e04 	addi	r16,sp,120
 40213fc:	003ef806 	br	4020fe0 <__alt_data_end+0xfffe0fe0>
 4021400:	18c03fcc 	andi	r3,r3,255
 4021404:	18059d1e 	bne	r3,zero,4022a7c <___vfprintf_internal_r+0x21b8>
 4021408:	014100f4 	movhi	r5,1027
 402140c:	2940b204 	addi	r5,r5,712
 4021410:	d9403915 	stw	r5,228(sp)
 4021414:	9080080c 	andi	r2,r18,32
 4021418:	10005226 	beq	r2,zero,4021564 <___vfprintf_internal_r+0xca0>
 402141c:	d8802d17 	ldw	r2,180(sp)
 4021420:	14c00017 	ldw	r19,0(r2)
 4021424:	15800117 	ldw	r22,4(r2)
 4021428:	10800204 	addi	r2,r2,8
 402142c:	d8802d15 	stw	r2,180(sp)
 4021430:	9080004c 	andi	r2,r18,1
 4021434:	10019026 	beq	r2,zero,4021a78 <___vfprintf_internal_r+0x11b4>
 4021438:	9d84b03a 	or	r2,r19,r22
 402143c:	10036926 	beq	r2,zero,40221e4 <___vfprintf_internal_r+0x1920>
 4021440:	d8c02917 	ldw	r3,164(sp)
 4021444:	00800c04 	movi	r2,48
 4021448:	d8802705 	stb	r2,156(sp)
 402144c:	dc402745 	stb	r17,157(sp)
 4021450:	d8002785 	stb	zero,158(sp)
 4021454:	90800094 	ori	r2,r18,2
 4021458:	18045d16 	blt	r3,zero,40225d0 <___vfprintf_internal_r+0x1d0c>
 402145c:	00bfdfc4 	movi	r2,-129
 4021460:	90a4703a 	and	r18,r18,r2
 4021464:	94800094 	ori	r18,r18,2
 4021468:	0039883a 	mov	fp,zero
 402146c:	d9003917 	ldw	r4,228(sp)
 4021470:	dc001e04 	addi	r16,sp,120
 4021474:	988003cc 	andi	r2,r19,15
 4021478:	b006973a 	slli	r3,r22,28
 402147c:	2085883a 	add	r2,r4,r2
 4021480:	9826d13a 	srli	r19,r19,4
 4021484:	10800003 	ldbu	r2,0(r2)
 4021488:	b02cd13a 	srli	r22,r22,4
 402148c:	843fffc4 	addi	r16,r16,-1
 4021490:	1ce6b03a 	or	r19,r3,r19
 4021494:	80800005 	stb	r2,0(r16)
 4021498:	9d84b03a 	or	r2,r19,r22
 402149c:	103ff51e 	bne	r2,zero,4021474 <__alt_data_end+0xfffe1474>
 40214a0:	d8c02817 	ldw	r3,160(sp)
 40214a4:	1c07c83a 	sub	r3,r3,r16
 40214a8:	d8c02e15 	stw	r3,184(sp)
 40214ac:	003ecc06 	br	4020fe0 <__alt_data_end+0xfffe0fe0>
 40214b0:	18c03fcc 	andi	r3,r3,255
 40214b4:	183e9f26 	beq	r3,zero,4020f34 <__alt_data_end+0xfffe0f34>
 40214b8:	d9c02785 	stb	r7,158(sp)
 40214bc:	003e9d06 	br	4020f34 <__alt_data_end+0xfffe0f34>
 40214c0:	00c00044 	movi	r3,1
 40214c4:	01c00ac4 	movi	r7,43
 40214c8:	ac400007 	ldb	r17,0(r21)
 40214cc:	003d5e06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40214d0:	94800814 	ori	r18,r18,32
 40214d4:	ac400007 	ldb	r17,0(r21)
 40214d8:	003d5b06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40214dc:	d8c02d17 	ldw	r3,180(sp)
 40214e0:	d8002785 	stb	zero,158(sp)
 40214e4:	1c000017 	ldw	r16,0(r3)
 40214e8:	1cc00104 	addi	r19,r3,4
 40214ec:	80041926 	beq	r16,zero,4022554 <___vfprintf_internal_r+0x1c90>
 40214f0:	d9002917 	ldw	r4,164(sp)
 40214f4:	2003d016 	blt	r4,zero,4022438 <___vfprintf_internal_r+0x1b74>
 40214f8:	200d883a 	mov	r6,r4
 40214fc:	000b883a 	mov	r5,zero
 4021500:	8009883a 	mov	r4,r16
 4021504:	da003d15 	stw	r8,244(sp)
 4021508:	40260d40 	call	40260d4 <memchr>
 402150c:	da003d17 	ldw	r8,244(sp)
 4021510:	10045426 	beq	r2,zero,4022664 <___vfprintf_internal_r+0x1da0>
 4021514:	1405c83a 	sub	r2,r2,r16
 4021518:	d8802e15 	stw	r2,184(sp)
 402151c:	1003cc16 	blt	r2,zero,4022450 <___vfprintf_internal_r+0x1b8c>
 4021520:	df002783 	ldbu	fp,158(sp)
 4021524:	d8802a15 	stw	r2,168(sp)
 4021528:	dcc02d15 	stw	r19,180(sp)
 402152c:	d8002915 	stw	zero,164(sp)
 4021530:	d8003215 	stw	zero,200(sp)
 4021534:	003eb006 	br	4020ff8 <__alt_data_end+0xfffe0ff8>
 4021538:	18c03fcc 	andi	r3,r3,255
 402153c:	183f9b26 	beq	r3,zero,40213ac <__alt_data_end+0xfffe13ac>
 4021540:	d9c02785 	stb	r7,158(sp)
 4021544:	003f9906 	br	40213ac <__alt_data_end+0xfffe13ac>
 4021548:	18c03fcc 	andi	r3,r3,255
 402154c:	1805551e 	bne	r3,zero,4022aa4 <___vfprintf_internal_r+0x21e0>
 4021550:	014100f4 	movhi	r5,1027
 4021554:	2940b704 	addi	r5,r5,732
 4021558:	d9403915 	stw	r5,228(sp)
 402155c:	9080080c 	andi	r2,r18,32
 4021560:	103fae1e 	bne	r2,zero,402141c <__alt_data_end+0xfffe141c>
 4021564:	9080040c 	andi	r2,r18,16
 4021568:	1002de26 	beq	r2,zero,40220e4 <___vfprintf_internal_r+0x1820>
 402156c:	d8c02d17 	ldw	r3,180(sp)
 4021570:	002d883a 	mov	r22,zero
 4021574:	1cc00017 	ldw	r19,0(r3)
 4021578:	18c00104 	addi	r3,r3,4
 402157c:	d8c02d15 	stw	r3,180(sp)
 4021580:	003fab06 	br	4021430 <__alt_data_end+0xfffe1430>
 4021584:	38803fcc 	andi	r2,r7,255
 4021588:	1080201c 	xori	r2,r2,128
 402158c:	10bfe004 	addi	r2,r2,-128
 4021590:	1002d21e 	bne	r2,zero,40220dc <___vfprintf_internal_r+0x1818>
 4021594:	00c00044 	movi	r3,1
 4021598:	01c00804 	movi	r7,32
 402159c:	ac400007 	ldb	r17,0(r21)
 40215a0:	003d2906 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40215a4:	94800054 	ori	r18,r18,1
 40215a8:	ac400007 	ldb	r17,0(r21)
 40215ac:	003d2606 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40215b0:	18c03fcc 	andi	r3,r3,255
 40215b4:	183e0526 	beq	r3,zero,4020dcc <__alt_data_end+0xfffe0dcc>
 40215b8:	d9c02785 	stb	r7,158(sp)
 40215bc:	003e0306 	br	4020dcc <__alt_data_end+0xfffe0dcc>
 40215c0:	94801014 	ori	r18,r18,64
 40215c4:	ac400007 	ldb	r17,0(r21)
 40215c8:	003d1f06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40215cc:	ac400007 	ldb	r17,0(r21)
 40215d0:	8a438726 	beq	r17,r9,40223f0 <___vfprintf_internal_r+0x1b2c>
 40215d4:	94800414 	ori	r18,r18,16
 40215d8:	003d1b06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40215dc:	18c03fcc 	andi	r3,r3,255
 40215e0:	1805341e 	bne	r3,zero,4022ab4 <___vfprintf_internal_r+0x21f0>
 40215e4:	9080080c 	andi	r2,r18,32
 40215e8:	1002cd26 	beq	r2,zero,4022120 <___vfprintf_internal_r+0x185c>
 40215ec:	d9402d17 	ldw	r5,180(sp)
 40215f0:	d9002f17 	ldw	r4,188(sp)
 40215f4:	28800017 	ldw	r2,0(r5)
 40215f8:	2007d7fa 	srai	r3,r4,31
 40215fc:	29400104 	addi	r5,r5,4
 4021600:	d9402d15 	stw	r5,180(sp)
 4021604:	11000015 	stw	r4,0(r2)
 4021608:	10c00115 	stw	r3,4(r2)
 402160c:	003ce506 	br	40209a4 <__alt_data_end+0xfffe09a4>
 4021610:	d8c02d17 	ldw	r3,180(sp)
 4021614:	d9002d17 	ldw	r4,180(sp)
 4021618:	d8002785 	stb	zero,158(sp)
 402161c:	18800017 	ldw	r2,0(r3)
 4021620:	21000104 	addi	r4,r4,4
 4021624:	00c00044 	movi	r3,1
 4021628:	d8c02a15 	stw	r3,168(sp)
 402162c:	d8801405 	stb	r2,80(sp)
 4021630:	d9002d15 	stw	r4,180(sp)
 4021634:	d8c02e15 	stw	r3,184(sp)
 4021638:	d8002915 	stw	zero,164(sp)
 402163c:	d8003215 	stw	zero,200(sp)
 4021640:	dc001404 	addi	r16,sp,80
 4021644:	0039883a 	mov	fp,zero
 4021648:	003e7206 	br	4021014 <__alt_data_end+0xfffe1014>
 402164c:	010100f4 	movhi	r4,1027
 4021650:	2100b704 	addi	r4,r4,732
 4021654:	0039883a 	mov	fp,zero
 4021658:	d9003915 	stw	r4,228(sp)
 402165c:	04401e04 	movi	r17,120
 4021660:	003f8206 	br	402146c <__alt_data_end+0xfffe146c>
 4021664:	18c03fcc 	andi	r3,r3,255
 4021668:	1805061e 	bne	r3,zero,4022a84 <___vfprintf_internal_r+0x21c0>
 402166c:	883d9126 	beq	r17,zero,4020cb4 <__alt_data_end+0xfffe0cb4>
 4021670:	00c00044 	movi	r3,1
 4021674:	d8c02a15 	stw	r3,168(sp)
 4021678:	dc401405 	stb	r17,80(sp)
 402167c:	d8002785 	stb	zero,158(sp)
 4021680:	003fec06 	br	4021634 <__alt_data_end+0xfffe1634>
 4021684:	014100f4 	movhi	r5,1027
 4021688:	2940b704 	addi	r5,r5,732
 402168c:	d9403915 	stw	r5,228(sp)
 4021690:	d8c02d15 	stw	r3,180(sp)
 4021694:	1025883a 	mov	r18,r2
 4021698:	04401e04 	movi	r17,120
 402169c:	9d84b03a 	or	r2,r19,r22
 40216a0:	1000fc1e 	bne	r2,zero,4021a94 <___vfprintf_internal_r+0x11d0>
 40216a4:	0039883a 	mov	fp,zero
 40216a8:	00800084 	movi	r2,2
 40216ac:	10803fcc 	andi	r2,r2,255
 40216b0:	00c00044 	movi	r3,1
 40216b4:	10c20f26 	beq	r2,r3,4021ef4 <___vfprintf_internal_r+0x1630>
 40216b8:	00c00084 	movi	r3,2
 40216bc:	10fd6326 	beq	r2,r3,4020c4c <__alt_data_end+0xfffe0c4c>
 40216c0:	003e2d06 	br	4020f78 <__alt_data_end+0xfffe0f78>
 40216c4:	d8c02017 	ldw	r3,128(sp)
 40216c8:	003e9306 	br	4021118 <__alt_data_end+0xfffe1118>
 40216cc:	00801944 	movi	r2,101
 40216d0:	14407e0e 	bge	r2,r17,40218cc <___vfprintf_internal_r+0x1008>
 40216d4:	d9003617 	ldw	r4,216(sp)
 40216d8:	d9403817 	ldw	r5,224(sp)
 40216dc:	000d883a 	mov	r6,zero
 40216e0:	000f883a 	mov	r7,zero
 40216e4:	d8c03c15 	stw	r3,240(sp)
 40216e8:	da003d15 	stw	r8,244(sp)
 40216ec:	402bb380 	call	402bb38 <__eqdf2>
 40216f0:	d8c03c17 	ldw	r3,240(sp)
 40216f4:	da003d17 	ldw	r8,244(sp)
 40216f8:	1000f71e 	bne	r2,zero,4021ad8 <___vfprintf_internal_r+0x1214>
 40216fc:	d8801f17 	ldw	r2,124(sp)
 4021700:	010100f4 	movhi	r4,1027
 4021704:	2100be04 	addi	r4,r4,760
 4021708:	18c00044 	addi	r3,r3,1
 402170c:	10800044 	addi	r2,r2,1
 4021710:	41000015 	stw	r4,0(r8)
 4021714:	01000044 	movi	r4,1
 4021718:	41000115 	stw	r4,4(r8)
 402171c:	d8c02015 	stw	r3,128(sp)
 4021720:	d8801f15 	stw	r2,124(sp)
 4021724:	010001c4 	movi	r4,7
 4021728:	2082b816 	blt	r4,r2,402220c <___vfprintf_internal_r+0x1948>
 402172c:	42000204 	addi	r8,r8,8
 4021730:	d8802617 	ldw	r2,152(sp)
 4021734:	d9403317 	ldw	r5,204(sp)
 4021738:	11400216 	blt	r2,r5,4021744 <___vfprintf_internal_r+0xe80>
 402173c:	9080004c 	andi	r2,r18,1
 4021740:	103ed526 	beq	r2,zero,4021298 <__alt_data_end+0xfffe1298>
 4021744:	d8803717 	ldw	r2,220(sp)
 4021748:	d9003417 	ldw	r4,208(sp)
 402174c:	d9403717 	ldw	r5,220(sp)
 4021750:	1887883a 	add	r3,r3,r2
 4021754:	d8801f17 	ldw	r2,124(sp)
 4021758:	41000015 	stw	r4,0(r8)
 402175c:	41400115 	stw	r5,4(r8)
 4021760:	10800044 	addi	r2,r2,1
 4021764:	d8c02015 	stw	r3,128(sp)
 4021768:	d8801f15 	stw	r2,124(sp)
 402176c:	010001c4 	movi	r4,7
 4021770:	20832916 	blt	r4,r2,4022418 <___vfprintf_internal_r+0x1b54>
 4021774:	42000204 	addi	r8,r8,8
 4021778:	d8803317 	ldw	r2,204(sp)
 402177c:	143fffc4 	addi	r16,r2,-1
 4021780:	043ec50e 	bge	zero,r16,4021298 <__alt_data_end+0xfffe1298>
 4021784:	04400404 	movi	r17,16
 4021788:	d8801f17 	ldw	r2,124(sp)
 402178c:	8c00880e 	bge	r17,r16,40219b0 <___vfprintf_internal_r+0x10ec>
 4021790:	014100f4 	movhi	r5,1027
 4021794:	2940be84 	addi	r5,r5,762
 4021798:	d9402b15 	stw	r5,172(sp)
 402179c:	058001c4 	movi	r22,7
 40217a0:	dcc02c17 	ldw	r19,176(sp)
 40217a4:	00000306 	br	40217b4 <___vfprintf_internal_r+0xef0>
 40217a8:	42000204 	addi	r8,r8,8
 40217ac:	843ffc04 	addi	r16,r16,-16
 40217b0:	8c00820e 	bge	r17,r16,40219bc <___vfprintf_internal_r+0x10f8>
 40217b4:	18c00404 	addi	r3,r3,16
 40217b8:	10800044 	addi	r2,r2,1
 40217bc:	45000015 	stw	r20,0(r8)
 40217c0:	44400115 	stw	r17,4(r8)
 40217c4:	d8c02015 	stw	r3,128(sp)
 40217c8:	d8801f15 	stw	r2,124(sp)
 40217cc:	b0bff60e 	bge	r22,r2,40217a8 <__alt_data_end+0xfffe17a8>
 40217d0:	d9801e04 	addi	r6,sp,120
 40217d4:	b80b883a 	mov	r5,r23
 40217d8:	9809883a 	mov	r4,r19
 40217dc:	4027ec00 	call	4027ec0 <__sprint_r>
 40217e0:	103d3a1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40217e4:	d8c02017 	ldw	r3,128(sp)
 40217e8:	d8801f17 	ldw	r2,124(sp)
 40217ec:	da000404 	addi	r8,sp,16
 40217f0:	003fee06 	br	40217ac <__alt_data_end+0xfffe17ac>
 40217f4:	d9403117 	ldw	r5,196(sp)
 40217f8:	d8802a17 	ldw	r2,168(sp)
 40217fc:	28adc83a 	sub	r22,r5,r2
 4021800:	05be630e 	bge	zero,r22,4021190 <__alt_data_end+0xfffe1190>
 4021804:	07000404 	movi	fp,16
 4021808:	d8801f17 	ldw	r2,124(sp)
 402180c:	e5838f0e 	bge	fp,r22,402264c <___vfprintf_internal_r+0x1d88>
 4021810:	014100f4 	movhi	r5,1027
 4021814:	2940be84 	addi	r5,r5,762
 4021818:	dc403015 	stw	r17,192(sp)
 402181c:	d9402b15 	stw	r5,172(sp)
 4021820:	b023883a 	mov	r17,r22
 4021824:	04c001c4 	movi	r19,7
 4021828:	a82d883a 	mov	r22,r21
 402182c:	902b883a 	mov	r21,r18
 4021830:	8025883a 	mov	r18,r16
 4021834:	dc002c17 	ldw	r16,176(sp)
 4021838:	00000306 	br	4021848 <___vfprintf_internal_r+0xf84>
 402183c:	8c7ffc04 	addi	r17,r17,-16
 4021840:	42000204 	addi	r8,r8,8
 4021844:	e440110e 	bge	fp,r17,402188c <___vfprintf_internal_r+0xfc8>
 4021848:	18c00404 	addi	r3,r3,16
 402184c:	10800044 	addi	r2,r2,1
 4021850:	45000015 	stw	r20,0(r8)
 4021854:	47000115 	stw	fp,4(r8)
 4021858:	d8c02015 	stw	r3,128(sp)
 402185c:	d8801f15 	stw	r2,124(sp)
 4021860:	98bff60e 	bge	r19,r2,402183c <__alt_data_end+0xfffe183c>
 4021864:	d9801e04 	addi	r6,sp,120
 4021868:	b80b883a 	mov	r5,r23
 402186c:	8009883a 	mov	r4,r16
 4021870:	4027ec00 	call	4027ec0 <__sprint_r>
 4021874:	103d151e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021878:	8c7ffc04 	addi	r17,r17,-16
 402187c:	d8c02017 	ldw	r3,128(sp)
 4021880:	d8801f17 	ldw	r2,124(sp)
 4021884:	da000404 	addi	r8,sp,16
 4021888:	e47fef16 	blt	fp,r17,4021848 <__alt_data_end+0xfffe1848>
 402188c:	9021883a 	mov	r16,r18
 4021890:	a825883a 	mov	r18,r21
 4021894:	b02b883a 	mov	r21,r22
 4021898:	882d883a 	mov	r22,r17
 402189c:	dc403017 	ldw	r17,192(sp)
 40218a0:	d9002b17 	ldw	r4,172(sp)
 40218a4:	1d87883a 	add	r3,r3,r22
 40218a8:	10800044 	addi	r2,r2,1
 40218ac:	41000015 	stw	r4,0(r8)
 40218b0:	45800115 	stw	r22,4(r8)
 40218b4:	d8c02015 	stw	r3,128(sp)
 40218b8:	d8801f15 	stw	r2,124(sp)
 40218bc:	010001c4 	movi	r4,7
 40218c0:	20818e16 	blt	r4,r2,4021efc <___vfprintf_internal_r+0x1638>
 40218c4:	42000204 	addi	r8,r8,8
 40218c8:	003e3106 	br	4021190 <__alt_data_end+0xfffe1190>
 40218cc:	d9403317 	ldw	r5,204(sp)
 40218d0:	00800044 	movi	r2,1
 40218d4:	18c00044 	addi	r3,r3,1
 40218d8:	1141530e 	bge	r2,r5,4021e28 <___vfprintf_internal_r+0x1564>
 40218dc:	dc401f17 	ldw	r17,124(sp)
 40218e0:	00800044 	movi	r2,1
 40218e4:	40800115 	stw	r2,4(r8)
 40218e8:	8c400044 	addi	r17,r17,1
 40218ec:	44000015 	stw	r16,0(r8)
 40218f0:	d8c02015 	stw	r3,128(sp)
 40218f4:	dc401f15 	stw	r17,124(sp)
 40218f8:	008001c4 	movi	r2,7
 40218fc:	14416b16 	blt	r2,r17,4021eac <___vfprintf_internal_r+0x15e8>
 4021900:	42000204 	addi	r8,r8,8
 4021904:	d8803717 	ldw	r2,220(sp)
 4021908:	d9003417 	ldw	r4,208(sp)
 402190c:	8c400044 	addi	r17,r17,1
 4021910:	10c7883a 	add	r3,r2,r3
 4021914:	40800115 	stw	r2,4(r8)
 4021918:	41000015 	stw	r4,0(r8)
 402191c:	d8c02015 	stw	r3,128(sp)
 4021920:	dc401f15 	stw	r17,124(sp)
 4021924:	008001c4 	movi	r2,7
 4021928:	14416916 	blt	r2,r17,4021ed0 <___vfprintf_internal_r+0x160c>
 402192c:	45800204 	addi	r22,r8,8
 4021930:	d9003617 	ldw	r4,216(sp)
 4021934:	d9403817 	ldw	r5,224(sp)
 4021938:	000d883a 	mov	r6,zero
 402193c:	000f883a 	mov	r7,zero
 4021940:	d8c03c15 	stw	r3,240(sp)
 4021944:	402bb380 	call	402bb38 <__eqdf2>
 4021948:	d8c03c17 	ldw	r3,240(sp)
 402194c:	1000bc26 	beq	r2,zero,4021c40 <___vfprintf_internal_r+0x137c>
 4021950:	d9403317 	ldw	r5,204(sp)
 4021954:	84000044 	addi	r16,r16,1
 4021958:	8c400044 	addi	r17,r17,1
 402195c:	28bfffc4 	addi	r2,r5,-1
 4021960:	1887883a 	add	r3,r3,r2
 4021964:	b0800115 	stw	r2,4(r22)
 4021968:	b4000015 	stw	r16,0(r22)
 402196c:	d8c02015 	stw	r3,128(sp)
 4021970:	dc401f15 	stw	r17,124(sp)
 4021974:	008001c4 	movi	r2,7
 4021978:	14414316 	blt	r2,r17,4021e88 <___vfprintf_internal_r+0x15c4>
 402197c:	b5800204 	addi	r22,r22,8
 4021980:	d9003a17 	ldw	r4,232(sp)
 4021984:	df0022c4 	addi	fp,sp,139
 4021988:	8c400044 	addi	r17,r17,1
 402198c:	20c7883a 	add	r3,r4,r3
 4021990:	b7000015 	stw	fp,0(r22)
 4021994:	b1000115 	stw	r4,4(r22)
 4021998:	d8c02015 	stw	r3,128(sp)
 402199c:	dc401f15 	stw	r17,124(sp)
 40219a0:	008001c4 	movi	r2,7
 40219a4:	14400e16 	blt	r2,r17,40219e0 <___vfprintf_internal_r+0x111c>
 40219a8:	b2000204 	addi	r8,r22,8
 40219ac:	003e3a06 	br	4021298 <__alt_data_end+0xfffe1298>
 40219b0:	010100f4 	movhi	r4,1027
 40219b4:	2100be84 	addi	r4,r4,762
 40219b8:	d9002b15 	stw	r4,172(sp)
 40219bc:	d9002b17 	ldw	r4,172(sp)
 40219c0:	1c07883a 	add	r3,r3,r16
 40219c4:	44000115 	stw	r16,4(r8)
 40219c8:	41000015 	stw	r4,0(r8)
 40219cc:	10800044 	addi	r2,r2,1
 40219d0:	d8c02015 	stw	r3,128(sp)
 40219d4:	d8801f15 	stw	r2,124(sp)
 40219d8:	010001c4 	movi	r4,7
 40219dc:	20be2d0e 	bge	r4,r2,4021294 <__alt_data_end+0xfffe1294>
 40219e0:	d9002c17 	ldw	r4,176(sp)
 40219e4:	d9801e04 	addi	r6,sp,120
 40219e8:	b80b883a 	mov	r5,r23
 40219ec:	4027ec00 	call	4027ec0 <__sprint_r>
 40219f0:	103cb61e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40219f4:	d8c02017 	ldw	r3,128(sp)
 40219f8:	da000404 	addi	r8,sp,16
 40219fc:	003e2606 	br	4021298 <__alt_data_end+0xfffe1298>
 4021a00:	d9002c17 	ldw	r4,176(sp)
 4021a04:	d9801e04 	addi	r6,sp,120
 4021a08:	b80b883a 	mov	r5,r23
 4021a0c:	4027ec00 	call	4027ec0 <__sprint_r>
 4021a10:	103e5d26 	beq	r2,zero,4021388 <__alt_data_end+0xfffe1388>
 4021a14:	003cad06 	br	4020ccc <__alt_data_end+0xfffe0ccc>
 4021a18:	d9002c17 	ldw	r4,176(sp)
 4021a1c:	d9801e04 	addi	r6,sp,120
 4021a20:	b80b883a 	mov	r5,r23
 4021a24:	4027ec00 	call	4027ec0 <__sprint_r>
 4021a28:	103ca81e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021a2c:	d8c02017 	ldw	r3,128(sp)
 4021a30:	da000404 	addi	r8,sp,16
 4021a34:	003e0b06 	br	4021264 <__alt_data_end+0xfffe1264>
 4021a38:	d9002c17 	ldw	r4,176(sp)
 4021a3c:	d9801e04 	addi	r6,sp,120
 4021a40:	b80b883a 	mov	r5,r23
 4021a44:	4027ec00 	call	4027ec0 <__sprint_r>
 4021a48:	103ca01e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021a4c:	d8c02017 	ldw	r3,128(sp)
 4021a50:	da000404 	addi	r8,sp,16
 4021a54:	003dbd06 	br	402114c <__alt_data_end+0xfffe114c>
 4021a58:	d9002c17 	ldw	r4,176(sp)
 4021a5c:	d9801e04 	addi	r6,sp,120
 4021a60:	b80b883a 	mov	r5,r23
 4021a64:	4027ec00 	call	4027ec0 <__sprint_r>
 4021a68:	103c981e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021a6c:	d8c02017 	ldw	r3,128(sp)
 4021a70:	da000404 	addi	r8,sp,16
 4021a74:	003dc306 	br	4021184 <__alt_data_end+0xfffe1184>
 4021a78:	d8802917 	ldw	r2,164(sp)
 4021a7c:	d8002785 	stb	zero,158(sp)
 4021a80:	103f0616 	blt	r2,zero,402169c <__alt_data_end+0xfffe169c>
 4021a84:	00ffdfc4 	movi	r3,-129
 4021a88:	9d84b03a 	or	r2,r19,r22
 4021a8c:	90e4703a 	and	r18,r18,r3
 4021a90:	103c6b26 	beq	r2,zero,4020c40 <__alt_data_end+0xfffe0c40>
 4021a94:	0039883a 	mov	fp,zero
 4021a98:	003e7406 	br	402146c <__alt_data_end+0xfffe146c>
 4021a9c:	9080040c 	andi	r2,r18,16
 4021aa0:	1001b326 	beq	r2,zero,4022170 <___vfprintf_internal_r+0x18ac>
 4021aa4:	d9002d17 	ldw	r4,180(sp)
 4021aa8:	d9402917 	ldw	r5,164(sp)
 4021aac:	d8002785 	stb	zero,158(sp)
 4021ab0:	20800104 	addi	r2,r4,4
 4021ab4:	24c00017 	ldw	r19,0(r4)
 4021ab8:	002d883a 	mov	r22,zero
 4021abc:	2801b516 	blt	r5,zero,4022194 <___vfprintf_internal_r+0x18d0>
 4021ac0:	00ffdfc4 	movi	r3,-129
 4021ac4:	d8802d15 	stw	r2,180(sp)
 4021ac8:	90e4703a 	and	r18,r18,r3
 4021acc:	983d2726 	beq	r19,zero,4020f6c <__alt_data_end+0xfffe0f6c>
 4021ad0:	0039883a 	mov	fp,zero
 4021ad4:	003d2a06 	br	4020f80 <__alt_data_end+0xfffe0f80>
 4021ad8:	dc402617 	ldw	r17,152(sp)
 4021adc:	0441d30e 	bge	zero,r17,402222c <___vfprintf_internal_r+0x1968>
 4021ae0:	dc403217 	ldw	r17,200(sp)
 4021ae4:	d8803317 	ldw	r2,204(sp)
 4021ae8:	1440010e 	bge	r2,r17,4021af0 <___vfprintf_internal_r+0x122c>
 4021aec:	1023883a 	mov	r17,r2
 4021af0:	04400a0e 	bge	zero,r17,4021b1c <___vfprintf_internal_r+0x1258>
 4021af4:	d8801f17 	ldw	r2,124(sp)
 4021af8:	1c47883a 	add	r3,r3,r17
 4021afc:	44000015 	stw	r16,0(r8)
 4021b00:	10800044 	addi	r2,r2,1
 4021b04:	44400115 	stw	r17,4(r8)
 4021b08:	d8c02015 	stw	r3,128(sp)
 4021b0c:	d8801f15 	stw	r2,124(sp)
 4021b10:	010001c4 	movi	r4,7
 4021b14:	20826516 	blt	r4,r2,40224ac <___vfprintf_internal_r+0x1be8>
 4021b18:	42000204 	addi	r8,r8,8
 4021b1c:	88026116 	blt	r17,zero,40224a4 <___vfprintf_internal_r+0x1be0>
 4021b20:	d9003217 	ldw	r4,200(sp)
 4021b24:	2463c83a 	sub	r17,r4,r17
 4021b28:	04407b0e 	bge	zero,r17,4021d18 <___vfprintf_internal_r+0x1454>
 4021b2c:	05800404 	movi	r22,16
 4021b30:	d8801f17 	ldw	r2,124(sp)
 4021b34:	b4419d0e 	bge	r22,r17,40221ac <___vfprintf_internal_r+0x18e8>
 4021b38:	010100f4 	movhi	r4,1027
 4021b3c:	2100be84 	addi	r4,r4,762
 4021b40:	d9002b15 	stw	r4,172(sp)
 4021b44:	070001c4 	movi	fp,7
 4021b48:	dcc02c17 	ldw	r19,176(sp)
 4021b4c:	00000306 	br	4021b5c <___vfprintf_internal_r+0x1298>
 4021b50:	42000204 	addi	r8,r8,8
 4021b54:	8c7ffc04 	addi	r17,r17,-16
 4021b58:	b441970e 	bge	r22,r17,40221b8 <___vfprintf_internal_r+0x18f4>
 4021b5c:	18c00404 	addi	r3,r3,16
 4021b60:	10800044 	addi	r2,r2,1
 4021b64:	45000015 	stw	r20,0(r8)
 4021b68:	45800115 	stw	r22,4(r8)
 4021b6c:	d8c02015 	stw	r3,128(sp)
 4021b70:	d8801f15 	stw	r2,124(sp)
 4021b74:	e0bff60e 	bge	fp,r2,4021b50 <__alt_data_end+0xfffe1b50>
 4021b78:	d9801e04 	addi	r6,sp,120
 4021b7c:	b80b883a 	mov	r5,r23
 4021b80:	9809883a 	mov	r4,r19
 4021b84:	4027ec00 	call	4027ec0 <__sprint_r>
 4021b88:	103c501e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021b8c:	d8c02017 	ldw	r3,128(sp)
 4021b90:	d8801f17 	ldw	r2,124(sp)
 4021b94:	da000404 	addi	r8,sp,16
 4021b98:	003fee06 	br	4021b54 <__alt_data_end+0xfffe1b54>
 4021b9c:	d9002c17 	ldw	r4,176(sp)
 4021ba0:	d9801e04 	addi	r6,sp,120
 4021ba4:	b80b883a 	mov	r5,r23
 4021ba8:	4027ec00 	call	4027ec0 <__sprint_r>
 4021bac:	103c471e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021bb0:	d8c02017 	ldw	r3,128(sp)
 4021bb4:	df002787 	ldb	fp,158(sp)
 4021bb8:	da000404 	addi	r8,sp,16
 4021bbc:	003d5606 	br	4021118 <__alt_data_end+0xfffe1118>
 4021bc0:	9080040c 	andi	r2,r18,16
 4021bc4:	10016126 	beq	r2,zero,402214c <___vfprintf_internal_r+0x1888>
 4021bc8:	d8802d17 	ldw	r2,180(sp)
 4021bcc:	14c00017 	ldw	r19,0(r2)
 4021bd0:	10800104 	addi	r2,r2,4
 4021bd4:	d8802d15 	stw	r2,180(sp)
 4021bd8:	982dd7fa 	srai	r22,r19,31
 4021bdc:	b005883a 	mov	r2,r22
 4021be0:	003c8206 	br	4020dec <__alt_data_end+0xfffe0dec>
 4021be4:	9080040c 	andi	r2,r18,16
 4021be8:	10003526 	beq	r2,zero,4021cc0 <___vfprintf_internal_r+0x13fc>
 4021bec:	d9402d17 	ldw	r5,180(sp)
 4021bf0:	d8c02917 	ldw	r3,164(sp)
 4021bf4:	d8002785 	stb	zero,158(sp)
 4021bf8:	28800104 	addi	r2,r5,4
 4021bfc:	2cc00017 	ldw	r19,0(r5)
 4021c00:	002d883a 	mov	r22,zero
 4021c04:	18003716 	blt	r3,zero,4021ce4 <___vfprintf_internal_r+0x1420>
 4021c08:	00ffdfc4 	movi	r3,-129
 4021c0c:	d8802d15 	stw	r2,180(sp)
 4021c10:	90e4703a 	and	r18,r18,r3
 4021c14:	0039883a 	mov	fp,zero
 4021c18:	983df326 	beq	r19,zero,40213e8 <__alt_data_end+0xfffe13e8>
 4021c1c:	00800244 	movi	r2,9
 4021c20:	14fc7b36 	bltu	r2,r19,4020e10 <__alt_data_end+0xfffe0e10>
 4021c24:	d8c02817 	ldw	r3,160(sp)
 4021c28:	dc001dc4 	addi	r16,sp,119
 4021c2c:	9cc00c04 	addi	r19,r19,48
 4021c30:	1c07c83a 	sub	r3,r3,r16
 4021c34:	dcc01dc5 	stb	r19,119(sp)
 4021c38:	d8c02e15 	stw	r3,184(sp)
 4021c3c:	003ce806 	br	4020fe0 <__alt_data_end+0xfffe0fe0>
 4021c40:	d8803317 	ldw	r2,204(sp)
 4021c44:	143fffc4 	addi	r16,r2,-1
 4021c48:	043f4d0e 	bge	zero,r16,4021980 <__alt_data_end+0xfffe1980>
 4021c4c:	07000404 	movi	fp,16
 4021c50:	e400810e 	bge	fp,r16,4021e58 <___vfprintf_internal_r+0x1594>
 4021c54:	014100f4 	movhi	r5,1027
 4021c58:	2940be84 	addi	r5,r5,762
 4021c5c:	d9402b15 	stw	r5,172(sp)
 4021c60:	01c001c4 	movi	r7,7
 4021c64:	dcc02c17 	ldw	r19,176(sp)
 4021c68:	00000306 	br	4021c78 <___vfprintf_internal_r+0x13b4>
 4021c6c:	b5800204 	addi	r22,r22,8
 4021c70:	843ffc04 	addi	r16,r16,-16
 4021c74:	e4007b0e 	bge	fp,r16,4021e64 <___vfprintf_internal_r+0x15a0>
 4021c78:	18c00404 	addi	r3,r3,16
 4021c7c:	8c400044 	addi	r17,r17,1
 4021c80:	b5000015 	stw	r20,0(r22)
 4021c84:	b7000115 	stw	fp,4(r22)
 4021c88:	d8c02015 	stw	r3,128(sp)
 4021c8c:	dc401f15 	stw	r17,124(sp)
 4021c90:	3c7ff60e 	bge	r7,r17,4021c6c <__alt_data_end+0xfffe1c6c>
 4021c94:	d9801e04 	addi	r6,sp,120
 4021c98:	b80b883a 	mov	r5,r23
 4021c9c:	9809883a 	mov	r4,r19
 4021ca0:	d9c03c15 	stw	r7,240(sp)
 4021ca4:	4027ec00 	call	4027ec0 <__sprint_r>
 4021ca8:	d9c03c17 	ldw	r7,240(sp)
 4021cac:	103c071e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021cb0:	d8c02017 	ldw	r3,128(sp)
 4021cb4:	dc401f17 	ldw	r17,124(sp)
 4021cb8:	dd800404 	addi	r22,sp,16
 4021cbc:	003fec06 	br	4021c70 <__alt_data_end+0xfffe1c70>
 4021cc0:	9080100c 	andi	r2,r18,64
 4021cc4:	d8002785 	stb	zero,158(sp)
 4021cc8:	10010e26 	beq	r2,zero,4022104 <___vfprintf_internal_r+0x1840>
 4021ccc:	d9002d17 	ldw	r4,180(sp)
 4021cd0:	d9402917 	ldw	r5,164(sp)
 4021cd4:	002d883a 	mov	r22,zero
 4021cd8:	20800104 	addi	r2,r4,4
 4021cdc:	24c0000b 	ldhu	r19,0(r4)
 4021ce0:	283fc90e 	bge	r5,zero,4021c08 <__alt_data_end+0xfffe1c08>
 4021ce4:	d8802d15 	stw	r2,180(sp)
 4021ce8:	0039883a 	mov	fp,zero
 4021cec:	9d84b03a 	or	r2,r19,r22
 4021cf0:	103c461e 	bne	r2,zero,4020e0c <__alt_data_end+0xfffe0e0c>
 4021cf4:	00800044 	movi	r2,1
 4021cf8:	003e6c06 	br	40216ac <__alt_data_end+0xfffe16ac>
 4021cfc:	d9002c17 	ldw	r4,176(sp)
 4021d00:	d9801e04 	addi	r6,sp,120
 4021d04:	b80b883a 	mov	r5,r23
 4021d08:	4027ec00 	call	4027ec0 <__sprint_r>
 4021d0c:	103bef1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021d10:	d8c02017 	ldw	r3,128(sp)
 4021d14:	da000404 	addi	r8,sp,16
 4021d18:	d9003217 	ldw	r4,200(sp)
 4021d1c:	d8802617 	ldw	r2,152(sp)
 4021d20:	d9403317 	ldw	r5,204(sp)
 4021d24:	8123883a 	add	r17,r16,r4
 4021d28:	11400216 	blt	r2,r5,4021d34 <___vfprintf_internal_r+0x1470>
 4021d2c:	9100004c 	andi	r4,r18,1
 4021d30:	20000d26 	beq	r4,zero,4021d68 <___vfprintf_internal_r+0x14a4>
 4021d34:	d9003717 	ldw	r4,220(sp)
 4021d38:	d9403417 	ldw	r5,208(sp)
 4021d3c:	1907883a 	add	r3,r3,r4
 4021d40:	d9001f17 	ldw	r4,124(sp)
 4021d44:	41400015 	stw	r5,0(r8)
 4021d48:	d9403717 	ldw	r5,220(sp)
 4021d4c:	21000044 	addi	r4,r4,1
 4021d50:	d8c02015 	stw	r3,128(sp)
 4021d54:	41400115 	stw	r5,4(r8)
 4021d58:	d9001f15 	stw	r4,124(sp)
 4021d5c:	014001c4 	movi	r5,7
 4021d60:	2901e816 	blt	r5,r4,4022504 <___vfprintf_internal_r+0x1c40>
 4021d64:	42000204 	addi	r8,r8,8
 4021d68:	d9003317 	ldw	r4,204(sp)
 4021d6c:	8121883a 	add	r16,r16,r4
 4021d70:	2085c83a 	sub	r2,r4,r2
 4021d74:	8461c83a 	sub	r16,r16,r17
 4021d78:	1400010e 	bge	r2,r16,4021d80 <___vfprintf_internal_r+0x14bc>
 4021d7c:	1021883a 	mov	r16,r2
 4021d80:	04000a0e 	bge	zero,r16,4021dac <___vfprintf_internal_r+0x14e8>
 4021d84:	d9001f17 	ldw	r4,124(sp)
 4021d88:	1c07883a 	add	r3,r3,r16
 4021d8c:	44400015 	stw	r17,0(r8)
 4021d90:	21000044 	addi	r4,r4,1
 4021d94:	44000115 	stw	r16,4(r8)
 4021d98:	d8c02015 	stw	r3,128(sp)
 4021d9c:	d9001f15 	stw	r4,124(sp)
 4021da0:	014001c4 	movi	r5,7
 4021da4:	2901fb16 	blt	r5,r4,4022594 <___vfprintf_internal_r+0x1cd0>
 4021da8:	42000204 	addi	r8,r8,8
 4021dac:	8001f716 	blt	r16,zero,402258c <___vfprintf_internal_r+0x1cc8>
 4021db0:	1421c83a 	sub	r16,r2,r16
 4021db4:	043d380e 	bge	zero,r16,4021298 <__alt_data_end+0xfffe1298>
 4021db8:	04400404 	movi	r17,16
 4021dbc:	d8801f17 	ldw	r2,124(sp)
 4021dc0:	8c3efb0e 	bge	r17,r16,40219b0 <__alt_data_end+0xfffe19b0>
 4021dc4:	014100f4 	movhi	r5,1027
 4021dc8:	2940be84 	addi	r5,r5,762
 4021dcc:	d9402b15 	stw	r5,172(sp)
 4021dd0:	058001c4 	movi	r22,7
 4021dd4:	dcc02c17 	ldw	r19,176(sp)
 4021dd8:	00000306 	br	4021de8 <___vfprintf_internal_r+0x1524>
 4021ddc:	42000204 	addi	r8,r8,8
 4021de0:	843ffc04 	addi	r16,r16,-16
 4021de4:	8c3ef50e 	bge	r17,r16,40219bc <__alt_data_end+0xfffe19bc>
 4021de8:	18c00404 	addi	r3,r3,16
 4021dec:	10800044 	addi	r2,r2,1
 4021df0:	45000015 	stw	r20,0(r8)
 4021df4:	44400115 	stw	r17,4(r8)
 4021df8:	d8c02015 	stw	r3,128(sp)
 4021dfc:	d8801f15 	stw	r2,124(sp)
 4021e00:	b0bff60e 	bge	r22,r2,4021ddc <__alt_data_end+0xfffe1ddc>
 4021e04:	d9801e04 	addi	r6,sp,120
 4021e08:	b80b883a 	mov	r5,r23
 4021e0c:	9809883a 	mov	r4,r19
 4021e10:	4027ec00 	call	4027ec0 <__sprint_r>
 4021e14:	103bad1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021e18:	d8c02017 	ldw	r3,128(sp)
 4021e1c:	d8801f17 	ldw	r2,124(sp)
 4021e20:	da000404 	addi	r8,sp,16
 4021e24:	003fee06 	br	4021de0 <__alt_data_end+0xfffe1de0>
 4021e28:	9088703a 	and	r4,r18,r2
 4021e2c:	203eab1e 	bne	r4,zero,40218dc <__alt_data_end+0xfffe18dc>
 4021e30:	dc401f17 	ldw	r17,124(sp)
 4021e34:	40800115 	stw	r2,4(r8)
 4021e38:	44000015 	stw	r16,0(r8)
 4021e3c:	8c400044 	addi	r17,r17,1
 4021e40:	d8c02015 	stw	r3,128(sp)
 4021e44:	dc401f15 	stw	r17,124(sp)
 4021e48:	008001c4 	movi	r2,7
 4021e4c:	14400e16 	blt	r2,r17,4021e88 <___vfprintf_internal_r+0x15c4>
 4021e50:	45800204 	addi	r22,r8,8
 4021e54:	003eca06 	br	4021980 <__alt_data_end+0xfffe1980>
 4021e58:	010100f4 	movhi	r4,1027
 4021e5c:	2100be84 	addi	r4,r4,762
 4021e60:	d9002b15 	stw	r4,172(sp)
 4021e64:	d8802b17 	ldw	r2,172(sp)
 4021e68:	1c07883a 	add	r3,r3,r16
 4021e6c:	8c400044 	addi	r17,r17,1
 4021e70:	b0800015 	stw	r2,0(r22)
 4021e74:	b4000115 	stw	r16,4(r22)
 4021e78:	d8c02015 	stw	r3,128(sp)
 4021e7c:	dc401f15 	stw	r17,124(sp)
 4021e80:	008001c4 	movi	r2,7
 4021e84:	147ebd0e 	bge	r2,r17,402197c <__alt_data_end+0xfffe197c>
 4021e88:	d9002c17 	ldw	r4,176(sp)
 4021e8c:	d9801e04 	addi	r6,sp,120
 4021e90:	b80b883a 	mov	r5,r23
 4021e94:	4027ec00 	call	4027ec0 <__sprint_r>
 4021e98:	103b8c1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021e9c:	d8c02017 	ldw	r3,128(sp)
 4021ea0:	dc401f17 	ldw	r17,124(sp)
 4021ea4:	dd800404 	addi	r22,sp,16
 4021ea8:	003eb506 	br	4021980 <__alt_data_end+0xfffe1980>
 4021eac:	d9002c17 	ldw	r4,176(sp)
 4021eb0:	d9801e04 	addi	r6,sp,120
 4021eb4:	b80b883a 	mov	r5,r23
 4021eb8:	4027ec00 	call	4027ec0 <__sprint_r>
 4021ebc:	103b831e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021ec0:	d8c02017 	ldw	r3,128(sp)
 4021ec4:	dc401f17 	ldw	r17,124(sp)
 4021ec8:	da000404 	addi	r8,sp,16
 4021ecc:	003e8d06 	br	4021904 <__alt_data_end+0xfffe1904>
 4021ed0:	d9002c17 	ldw	r4,176(sp)
 4021ed4:	d9801e04 	addi	r6,sp,120
 4021ed8:	b80b883a 	mov	r5,r23
 4021edc:	4027ec00 	call	4027ec0 <__sprint_r>
 4021ee0:	103b7a1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021ee4:	d8c02017 	ldw	r3,128(sp)
 4021ee8:	dc401f17 	ldw	r17,124(sp)
 4021eec:	dd800404 	addi	r22,sp,16
 4021ef0:	003e8f06 	br	4021930 <__alt_data_end+0xfffe1930>
 4021ef4:	0027883a 	mov	r19,zero
 4021ef8:	003f4a06 	br	4021c24 <__alt_data_end+0xfffe1c24>
 4021efc:	d9002c17 	ldw	r4,176(sp)
 4021f00:	d9801e04 	addi	r6,sp,120
 4021f04:	b80b883a 	mov	r5,r23
 4021f08:	4027ec00 	call	4027ec0 <__sprint_r>
 4021f0c:	103b6f1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4021f10:	d8c02017 	ldw	r3,128(sp)
 4021f14:	da000404 	addi	r8,sp,16
 4021f18:	003c9d06 	br	4021190 <__alt_data_end+0xfffe1190>
 4021f1c:	04e7c83a 	sub	r19,zero,r19
 4021f20:	9804c03a 	cmpne	r2,r19,zero
 4021f24:	05adc83a 	sub	r22,zero,r22
 4021f28:	b0adc83a 	sub	r22,r22,r2
 4021f2c:	d8802917 	ldw	r2,164(sp)
 4021f30:	07000b44 	movi	fp,45
 4021f34:	df002785 	stb	fp,158(sp)
 4021f38:	10017b16 	blt	r2,zero,4022528 <___vfprintf_internal_r+0x1c64>
 4021f3c:	00bfdfc4 	movi	r2,-129
 4021f40:	90a4703a 	and	r18,r18,r2
 4021f44:	003bb106 	br	4020e0c <__alt_data_end+0xfffe0e0c>
 4021f48:	d9003617 	ldw	r4,216(sp)
 4021f4c:	d9403817 	ldw	r5,224(sp)
 4021f50:	da003d15 	stw	r8,244(sp)
 4021f54:	4027ae40 	call	4027ae4 <__fpclassifyd>
 4021f58:	da003d17 	ldw	r8,244(sp)
 4021f5c:	1000f026 	beq	r2,zero,4022320 <___vfprintf_internal_r+0x1a5c>
 4021f60:	d9002917 	ldw	r4,164(sp)
 4021f64:	05bff7c4 	movi	r22,-33
 4021f68:	00bfffc4 	movi	r2,-1
 4021f6c:	8dac703a 	and	r22,r17,r22
 4021f70:	20820026 	beq	r4,r2,4022774 <___vfprintf_internal_r+0x1eb0>
 4021f74:	008011c4 	movi	r2,71
 4021f78:	b081f726 	beq	r22,r2,4022758 <___vfprintf_internal_r+0x1e94>
 4021f7c:	d9003817 	ldw	r4,224(sp)
 4021f80:	90c04014 	ori	r3,r18,256
 4021f84:	d8c02b15 	stw	r3,172(sp)
 4021f88:	20021516 	blt	r4,zero,40227e0 <___vfprintf_internal_r+0x1f1c>
 4021f8c:	dcc03817 	ldw	r19,224(sp)
 4021f90:	d8002a05 	stb	zero,168(sp)
 4021f94:	00801984 	movi	r2,102
 4021f98:	8881f926 	beq	r17,r2,4022780 <___vfprintf_internal_r+0x1ebc>
 4021f9c:	00801184 	movi	r2,70
 4021fa0:	88821c26 	beq	r17,r2,4022814 <___vfprintf_internal_r+0x1f50>
 4021fa4:	00801144 	movi	r2,69
 4021fa8:	b081ef26 	beq	r22,r2,4022768 <___vfprintf_internal_r+0x1ea4>
 4021fac:	d8c02917 	ldw	r3,164(sp)
 4021fb0:	d8802104 	addi	r2,sp,132
 4021fb4:	d8800315 	stw	r2,12(sp)
 4021fb8:	d9403617 	ldw	r5,216(sp)
 4021fbc:	d8802504 	addi	r2,sp,148
 4021fc0:	d9002c17 	ldw	r4,176(sp)
 4021fc4:	d8800215 	stw	r2,8(sp)
 4021fc8:	d8802604 	addi	r2,sp,152
 4021fcc:	d8c00015 	stw	r3,0(sp)
 4021fd0:	d8800115 	stw	r2,4(sp)
 4021fd4:	01c00084 	movi	r7,2
 4021fd8:	980d883a 	mov	r6,r19
 4021fdc:	d8c03c15 	stw	r3,240(sp)
 4021fe0:	da003d15 	stw	r8,244(sp)
 4021fe4:	4022ee80 	call	4022ee8 <_dtoa_r>
 4021fe8:	1021883a 	mov	r16,r2
 4021fec:	008019c4 	movi	r2,103
 4021ff0:	d8c03c17 	ldw	r3,240(sp)
 4021ff4:	da003d17 	ldw	r8,244(sp)
 4021ff8:	88817126 	beq	r17,r2,40225c0 <___vfprintf_internal_r+0x1cfc>
 4021ffc:	008011c4 	movi	r2,71
 4022000:	88829226 	beq	r17,r2,4022a4c <___vfprintf_internal_r+0x2188>
 4022004:	80f9883a 	add	fp,r16,r3
 4022008:	d9003617 	ldw	r4,216(sp)
 402200c:	000d883a 	mov	r6,zero
 4022010:	000f883a 	mov	r7,zero
 4022014:	980b883a 	mov	r5,r19
 4022018:	da003d15 	stw	r8,244(sp)
 402201c:	402bb380 	call	402bb38 <__eqdf2>
 4022020:	da003d17 	ldw	r8,244(sp)
 4022024:	10018d26 	beq	r2,zero,402265c <___vfprintf_internal_r+0x1d98>
 4022028:	d8802117 	ldw	r2,132(sp)
 402202c:	1700062e 	bgeu	r2,fp,4022048 <___vfprintf_internal_r+0x1784>
 4022030:	01000c04 	movi	r4,48
 4022034:	10c00044 	addi	r3,r2,1
 4022038:	d8c02115 	stw	r3,132(sp)
 402203c:	11000005 	stb	r4,0(r2)
 4022040:	d8802117 	ldw	r2,132(sp)
 4022044:	173ffb36 	bltu	r2,fp,4022034 <__alt_data_end+0xfffe2034>
 4022048:	1405c83a 	sub	r2,r2,r16
 402204c:	d8803315 	stw	r2,204(sp)
 4022050:	008011c4 	movi	r2,71
 4022054:	b0817626 	beq	r22,r2,4022630 <___vfprintf_internal_r+0x1d6c>
 4022058:	00801944 	movi	r2,101
 402205c:	1442810e 	bge	r2,r17,4022a64 <___vfprintf_internal_r+0x21a0>
 4022060:	d8c02617 	ldw	r3,152(sp)
 4022064:	00801984 	movi	r2,102
 4022068:	d8c03215 	stw	r3,200(sp)
 402206c:	8881fe26 	beq	r17,r2,4022868 <___vfprintf_internal_r+0x1fa4>
 4022070:	d8c03217 	ldw	r3,200(sp)
 4022074:	d9003317 	ldw	r4,204(sp)
 4022078:	1901dd16 	blt	r3,r4,40227f0 <___vfprintf_internal_r+0x1f2c>
 402207c:	9480004c 	andi	r18,r18,1
 4022080:	90022b1e 	bne	r18,zero,4022930 <___vfprintf_internal_r+0x206c>
 4022084:	1805883a 	mov	r2,r3
 4022088:	18028016 	blt	r3,zero,4022a8c <___vfprintf_internal_r+0x21c8>
 402208c:	d8c03217 	ldw	r3,200(sp)
 4022090:	044019c4 	movi	r17,103
 4022094:	d8c02e15 	stw	r3,184(sp)
 4022098:	df002a07 	ldb	fp,168(sp)
 402209c:	e001531e 	bne	fp,zero,40225ec <___vfprintf_internal_r+0x1d28>
 40220a0:	df002783 	ldbu	fp,158(sp)
 40220a4:	d8802a15 	stw	r2,168(sp)
 40220a8:	dc802b17 	ldw	r18,172(sp)
 40220ac:	d8002915 	stw	zero,164(sp)
 40220b0:	003bd106 	br	4020ff8 <__alt_data_end+0xfffe0ff8>
 40220b4:	d8802d17 	ldw	r2,180(sp)
 40220b8:	d8c02d17 	ldw	r3,180(sp)
 40220bc:	d9002d17 	ldw	r4,180(sp)
 40220c0:	10800017 	ldw	r2,0(r2)
 40220c4:	18c00117 	ldw	r3,4(r3)
 40220c8:	21000204 	addi	r4,r4,8
 40220cc:	d8803615 	stw	r2,216(sp)
 40220d0:	d8c03815 	stw	r3,224(sp)
 40220d4:	d9002d15 	stw	r4,180(sp)
 40220d8:	003b7506 	br	4020eb0 <__alt_data_end+0xfffe0eb0>
 40220dc:	ac400007 	ldb	r17,0(r21)
 40220e0:	003a5906 	br	4020a48 <__alt_data_end+0xfffe0a48>
 40220e4:	9080100c 	andi	r2,r18,64
 40220e8:	1000a826 	beq	r2,zero,402238c <___vfprintf_internal_r+0x1ac8>
 40220ec:	d9002d17 	ldw	r4,180(sp)
 40220f0:	002d883a 	mov	r22,zero
 40220f4:	24c0000b 	ldhu	r19,0(r4)
 40220f8:	21000104 	addi	r4,r4,4
 40220fc:	d9002d15 	stw	r4,180(sp)
 4022100:	003ccb06 	br	4021430 <__alt_data_end+0xfffe1430>
 4022104:	d8c02d17 	ldw	r3,180(sp)
 4022108:	d9002917 	ldw	r4,164(sp)
 402210c:	002d883a 	mov	r22,zero
 4022110:	18800104 	addi	r2,r3,4
 4022114:	1cc00017 	ldw	r19,0(r3)
 4022118:	203ebb0e 	bge	r4,zero,4021c08 <__alt_data_end+0xfffe1c08>
 402211c:	003ef106 	br	4021ce4 <__alt_data_end+0xfffe1ce4>
 4022120:	9080040c 	andi	r2,r18,16
 4022124:	1000921e 	bne	r2,zero,4022370 <___vfprintf_internal_r+0x1aac>
 4022128:	9480100c 	andi	r18,r18,64
 402212c:	90013926 	beq	r18,zero,4022614 <___vfprintf_internal_r+0x1d50>
 4022130:	d9002d17 	ldw	r4,180(sp)
 4022134:	d9402f17 	ldw	r5,188(sp)
 4022138:	20800017 	ldw	r2,0(r4)
 402213c:	21000104 	addi	r4,r4,4
 4022140:	d9002d15 	stw	r4,180(sp)
 4022144:	1140000d 	sth	r5,0(r2)
 4022148:	003a1606 	br	40209a4 <__alt_data_end+0xfffe09a4>
 402214c:	9080100c 	andi	r2,r18,64
 4022150:	10008026 	beq	r2,zero,4022354 <___vfprintf_internal_r+0x1a90>
 4022154:	d8c02d17 	ldw	r3,180(sp)
 4022158:	1cc0000f 	ldh	r19,0(r3)
 402215c:	18c00104 	addi	r3,r3,4
 4022160:	d8c02d15 	stw	r3,180(sp)
 4022164:	982dd7fa 	srai	r22,r19,31
 4022168:	b005883a 	mov	r2,r22
 402216c:	003b1f06 	br	4020dec <__alt_data_end+0xfffe0dec>
 4022170:	9080100c 	andi	r2,r18,64
 4022174:	d8002785 	stb	zero,158(sp)
 4022178:	10008a1e 	bne	r2,zero,40223a4 <___vfprintf_internal_r+0x1ae0>
 402217c:	d9402d17 	ldw	r5,180(sp)
 4022180:	d8c02917 	ldw	r3,164(sp)
 4022184:	002d883a 	mov	r22,zero
 4022188:	28800104 	addi	r2,r5,4
 402218c:	2cc00017 	ldw	r19,0(r5)
 4022190:	183e4b0e 	bge	r3,zero,4021ac0 <__alt_data_end+0xfffe1ac0>
 4022194:	9d86b03a 	or	r3,r19,r22
 4022198:	d8802d15 	stw	r2,180(sp)
 402219c:	183e4c1e 	bne	r3,zero,4021ad0 <__alt_data_end+0xfffe1ad0>
 40221a0:	0039883a 	mov	fp,zero
 40221a4:	0005883a 	mov	r2,zero
 40221a8:	003d4006 	br	40216ac <__alt_data_end+0xfffe16ac>
 40221ac:	014100f4 	movhi	r5,1027
 40221b0:	2940be84 	addi	r5,r5,762
 40221b4:	d9402b15 	stw	r5,172(sp)
 40221b8:	d9402b17 	ldw	r5,172(sp)
 40221bc:	1c47883a 	add	r3,r3,r17
 40221c0:	10800044 	addi	r2,r2,1
 40221c4:	41400015 	stw	r5,0(r8)
 40221c8:	44400115 	stw	r17,4(r8)
 40221cc:	d8c02015 	stw	r3,128(sp)
 40221d0:	d8801f15 	stw	r2,124(sp)
 40221d4:	010001c4 	movi	r4,7
 40221d8:	20bec816 	blt	r4,r2,4021cfc <__alt_data_end+0xfffe1cfc>
 40221dc:	42000204 	addi	r8,r8,8
 40221e0:	003ecd06 	br	4021d18 <__alt_data_end+0xfffe1d18>
 40221e4:	d9002917 	ldw	r4,164(sp)
 40221e8:	d8002785 	stb	zero,158(sp)
 40221ec:	203d2d16 	blt	r4,zero,40216a4 <__alt_data_end+0xfffe16a4>
 40221f0:	00bfdfc4 	movi	r2,-129
 40221f4:	90a4703a 	and	r18,r18,r2
 40221f8:	003a9106 	br	4020c40 <__alt_data_end+0xfffe0c40>
 40221fc:	010100f4 	movhi	r4,1027
 4022200:	2100be84 	addi	r4,r4,762
 4022204:	d9002b15 	stw	r4,172(sp)
 4022208:	003c0c06 	br	402123c <__alt_data_end+0xfffe123c>
 402220c:	d9002c17 	ldw	r4,176(sp)
 4022210:	d9801e04 	addi	r6,sp,120
 4022214:	b80b883a 	mov	r5,r23
 4022218:	4027ec00 	call	4027ec0 <__sprint_r>
 402221c:	103aab1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4022220:	d8c02017 	ldw	r3,128(sp)
 4022224:	da000404 	addi	r8,sp,16
 4022228:	003d4106 	br	4021730 <__alt_data_end+0xfffe1730>
 402222c:	d8801f17 	ldw	r2,124(sp)
 4022230:	014100f4 	movhi	r5,1027
 4022234:	01000044 	movi	r4,1
 4022238:	18c00044 	addi	r3,r3,1
 402223c:	10800044 	addi	r2,r2,1
 4022240:	2940be04 	addi	r5,r5,760
 4022244:	41000115 	stw	r4,4(r8)
 4022248:	41400015 	stw	r5,0(r8)
 402224c:	d8c02015 	stw	r3,128(sp)
 4022250:	d8801f15 	stw	r2,124(sp)
 4022254:	010001c4 	movi	r4,7
 4022258:	20805c16 	blt	r4,r2,40223cc <___vfprintf_internal_r+0x1b08>
 402225c:	42000204 	addi	r8,r8,8
 4022260:	8800041e 	bne	r17,zero,4022274 <___vfprintf_internal_r+0x19b0>
 4022264:	d8803317 	ldw	r2,204(sp)
 4022268:	1000021e 	bne	r2,zero,4022274 <___vfprintf_internal_r+0x19b0>
 402226c:	9080004c 	andi	r2,r18,1
 4022270:	103c0926 	beq	r2,zero,4021298 <__alt_data_end+0xfffe1298>
 4022274:	d9003717 	ldw	r4,220(sp)
 4022278:	d8801f17 	ldw	r2,124(sp)
 402227c:	d9403417 	ldw	r5,208(sp)
 4022280:	20c7883a 	add	r3,r4,r3
 4022284:	10800044 	addi	r2,r2,1
 4022288:	41000115 	stw	r4,4(r8)
 402228c:	41400015 	stw	r5,0(r8)
 4022290:	d8c02015 	stw	r3,128(sp)
 4022294:	d8801f15 	stw	r2,124(sp)
 4022298:	010001c4 	movi	r4,7
 402229c:	20812116 	blt	r4,r2,4022724 <___vfprintf_internal_r+0x1e60>
 40222a0:	42000204 	addi	r8,r8,8
 40222a4:	0463c83a 	sub	r17,zero,r17
 40222a8:	0440730e 	bge	zero,r17,4022478 <___vfprintf_internal_r+0x1bb4>
 40222ac:	05800404 	movi	r22,16
 40222b0:	b440860e 	bge	r22,r17,40224cc <___vfprintf_internal_r+0x1c08>
 40222b4:	014100f4 	movhi	r5,1027
 40222b8:	2940be84 	addi	r5,r5,762
 40222bc:	d9402b15 	stw	r5,172(sp)
 40222c0:	070001c4 	movi	fp,7
 40222c4:	dcc02c17 	ldw	r19,176(sp)
 40222c8:	00000306 	br	40222d8 <___vfprintf_internal_r+0x1a14>
 40222cc:	42000204 	addi	r8,r8,8
 40222d0:	8c7ffc04 	addi	r17,r17,-16
 40222d4:	b440800e 	bge	r22,r17,40224d8 <___vfprintf_internal_r+0x1c14>
 40222d8:	18c00404 	addi	r3,r3,16
 40222dc:	10800044 	addi	r2,r2,1
 40222e0:	45000015 	stw	r20,0(r8)
 40222e4:	45800115 	stw	r22,4(r8)
 40222e8:	d8c02015 	stw	r3,128(sp)
 40222ec:	d8801f15 	stw	r2,124(sp)
 40222f0:	e0bff60e 	bge	fp,r2,40222cc <__alt_data_end+0xfffe22cc>
 40222f4:	d9801e04 	addi	r6,sp,120
 40222f8:	b80b883a 	mov	r5,r23
 40222fc:	9809883a 	mov	r4,r19
 4022300:	4027ec00 	call	4027ec0 <__sprint_r>
 4022304:	103a711e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4022308:	d8c02017 	ldw	r3,128(sp)
 402230c:	d8801f17 	ldw	r2,124(sp)
 4022310:	da000404 	addi	r8,sp,16
 4022314:	003fee06 	br	40222d0 <__alt_data_end+0xfffe22d0>
 4022318:	00bfffc4 	movi	r2,-1
 402231c:	003a6f06 	br	4020cdc <__alt_data_end+0xfffe0cdc>
 4022320:	008011c4 	movi	r2,71
 4022324:	1440b816 	blt	r2,r17,4022608 <___vfprintf_internal_r+0x1d44>
 4022328:	040100f4 	movhi	r16,1027
 402232c:	8400b004 	addi	r16,r16,704
 4022330:	00c000c4 	movi	r3,3
 4022334:	00bfdfc4 	movi	r2,-129
 4022338:	d8c02a15 	stw	r3,168(sp)
 402233c:	90a4703a 	and	r18,r18,r2
 4022340:	df002783 	ldbu	fp,158(sp)
 4022344:	d8c02e15 	stw	r3,184(sp)
 4022348:	d8002915 	stw	zero,164(sp)
 402234c:	d8003215 	stw	zero,200(sp)
 4022350:	003b2906 	br	4020ff8 <__alt_data_end+0xfffe0ff8>
 4022354:	d9002d17 	ldw	r4,180(sp)
 4022358:	24c00017 	ldw	r19,0(r4)
 402235c:	21000104 	addi	r4,r4,4
 4022360:	d9002d15 	stw	r4,180(sp)
 4022364:	982dd7fa 	srai	r22,r19,31
 4022368:	b005883a 	mov	r2,r22
 402236c:	003a9f06 	br	4020dec <__alt_data_end+0xfffe0dec>
 4022370:	d9402d17 	ldw	r5,180(sp)
 4022374:	d8c02f17 	ldw	r3,188(sp)
 4022378:	28800017 	ldw	r2,0(r5)
 402237c:	29400104 	addi	r5,r5,4
 4022380:	d9402d15 	stw	r5,180(sp)
 4022384:	10c00015 	stw	r3,0(r2)
 4022388:	00398606 	br	40209a4 <__alt_data_end+0xfffe09a4>
 402238c:	d9402d17 	ldw	r5,180(sp)
 4022390:	002d883a 	mov	r22,zero
 4022394:	2cc00017 	ldw	r19,0(r5)
 4022398:	29400104 	addi	r5,r5,4
 402239c:	d9402d15 	stw	r5,180(sp)
 40223a0:	003c2306 	br	4021430 <__alt_data_end+0xfffe1430>
 40223a4:	d8c02d17 	ldw	r3,180(sp)
 40223a8:	d9002917 	ldw	r4,164(sp)
 40223ac:	002d883a 	mov	r22,zero
 40223b0:	18800104 	addi	r2,r3,4
 40223b4:	1cc0000b 	ldhu	r19,0(r3)
 40223b8:	203dc10e 	bge	r4,zero,4021ac0 <__alt_data_end+0xfffe1ac0>
 40223bc:	003f7506 	br	4022194 <__alt_data_end+0xfffe2194>
 40223c0:	040100f4 	movhi	r16,1027
 40223c4:	8400ae04 	addi	r16,r16,696
 40223c8:	003acc06 	br	4020efc <__alt_data_end+0xfffe0efc>
 40223cc:	d9002c17 	ldw	r4,176(sp)
 40223d0:	d9801e04 	addi	r6,sp,120
 40223d4:	b80b883a 	mov	r5,r23
 40223d8:	4027ec00 	call	4027ec0 <__sprint_r>
 40223dc:	103a3b1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40223e0:	dc402617 	ldw	r17,152(sp)
 40223e4:	d8c02017 	ldw	r3,128(sp)
 40223e8:	da000404 	addi	r8,sp,16
 40223ec:	003f9c06 	br	4022260 <__alt_data_end+0xfffe2260>
 40223f0:	ac400043 	ldbu	r17,1(r21)
 40223f4:	94800814 	ori	r18,r18,32
 40223f8:	ad400044 	addi	r21,r21,1
 40223fc:	8c403fcc 	andi	r17,r17,255
 4022400:	8c40201c 	xori	r17,r17,128
 4022404:	8c7fe004 	addi	r17,r17,-128
 4022408:	00398f06 	br	4020a48 <__alt_data_end+0xfffe0a48>
 402240c:	d8c02d15 	stw	r3,180(sp)
 4022410:	0039883a 	mov	fp,zero
 4022414:	003e3506 	br	4021cec <__alt_data_end+0xfffe1cec>
 4022418:	d9002c17 	ldw	r4,176(sp)
 402241c:	d9801e04 	addi	r6,sp,120
 4022420:	b80b883a 	mov	r5,r23
 4022424:	4027ec00 	call	4027ec0 <__sprint_r>
 4022428:	103a281e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 402242c:	d8c02017 	ldw	r3,128(sp)
 4022430:	da000404 	addi	r8,sp,16
 4022434:	003cd006 	br	4021778 <__alt_data_end+0xfffe1778>
 4022438:	8009883a 	mov	r4,r16
 402243c:	da003d15 	stw	r8,244(sp)
 4022440:	402082c0 	call	402082c <strlen>
 4022444:	d8802e15 	stw	r2,184(sp)
 4022448:	da003d17 	ldw	r8,244(sp)
 402244c:	103c340e 	bge	r2,zero,4021520 <__alt_data_end+0xfffe1520>
 4022450:	0005883a 	mov	r2,zero
 4022454:	003c3206 	br	4021520 <__alt_data_end+0xfffe1520>
 4022458:	d9002c17 	ldw	r4,176(sp)
 402245c:	d9801e04 	addi	r6,sp,120
 4022460:	b80b883a 	mov	r5,r23
 4022464:	4027ec00 	call	4027ec0 <__sprint_r>
 4022468:	103a181e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 402246c:	d8c02017 	ldw	r3,128(sp)
 4022470:	d8801f17 	ldw	r2,124(sp)
 4022474:	da000404 	addi	r8,sp,16
 4022478:	d9403317 	ldw	r5,204(sp)
 402247c:	10800044 	addi	r2,r2,1
 4022480:	44000015 	stw	r16,0(r8)
 4022484:	28c7883a 	add	r3,r5,r3
 4022488:	003b7d06 	br	4021280 <__alt_data_end+0xfffe1280>
 402248c:	010100f4 	movhi	r4,1027
 4022490:	2100c284 	addi	r4,r4,778
 4022494:	d9003515 	stw	r4,212(sp)
 4022498:	003b1406 	br	40210ec <__alt_data_end+0xfffe10ec>
 402249c:	013fffc4 	movi	r4,-1
 40224a0:	003a3506 	br	4020d78 <__alt_data_end+0xfffe0d78>
 40224a4:	0023883a 	mov	r17,zero
 40224a8:	003d9d06 	br	4021b20 <__alt_data_end+0xfffe1b20>
 40224ac:	d9002c17 	ldw	r4,176(sp)
 40224b0:	d9801e04 	addi	r6,sp,120
 40224b4:	b80b883a 	mov	r5,r23
 40224b8:	4027ec00 	call	4027ec0 <__sprint_r>
 40224bc:	103a031e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40224c0:	d8c02017 	ldw	r3,128(sp)
 40224c4:	da000404 	addi	r8,sp,16
 40224c8:	003d9406 	br	4021b1c <__alt_data_end+0xfffe1b1c>
 40224cc:	010100f4 	movhi	r4,1027
 40224d0:	2100be84 	addi	r4,r4,762
 40224d4:	d9002b15 	stw	r4,172(sp)
 40224d8:	d9002b17 	ldw	r4,172(sp)
 40224dc:	1c47883a 	add	r3,r3,r17
 40224e0:	10800044 	addi	r2,r2,1
 40224e4:	41000015 	stw	r4,0(r8)
 40224e8:	44400115 	stw	r17,4(r8)
 40224ec:	d8c02015 	stw	r3,128(sp)
 40224f0:	d8801f15 	stw	r2,124(sp)
 40224f4:	010001c4 	movi	r4,7
 40224f8:	20bfd716 	blt	r4,r2,4022458 <__alt_data_end+0xfffe2458>
 40224fc:	42000204 	addi	r8,r8,8
 4022500:	003fdd06 	br	4022478 <__alt_data_end+0xfffe2478>
 4022504:	d9002c17 	ldw	r4,176(sp)
 4022508:	d9801e04 	addi	r6,sp,120
 402250c:	b80b883a 	mov	r5,r23
 4022510:	4027ec00 	call	4027ec0 <__sprint_r>
 4022514:	1039ed1e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4022518:	d8802617 	ldw	r2,152(sp)
 402251c:	d8c02017 	ldw	r3,128(sp)
 4022520:	da000404 	addi	r8,sp,16
 4022524:	003e1006 	br	4021d68 <__alt_data_end+0xfffe1d68>
 4022528:	00800044 	movi	r2,1
 402252c:	10803fcc 	andi	r2,r2,255
 4022530:	00c00044 	movi	r3,1
 4022534:	10fa3526 	beq	r2,r3,4020e0c <__alt_data_end+0xfffe0e0c>
 4022538:	00c00084 	movi	r3,2
 402253c:	10fbcb26 	beq	r2,r3,402146c <__alt_data_end+0xfffe146c>
 4022540:	003a8f06 	br	4020f80 <__alt_data_end+0xfffe0f80>
 4022544:	010100f4 	movhi	r4,1027
 4022548:	2100c284 	addi	r4,r4,778
 402254c:	d9003515 	stw	r4,212(sp)
 4022550:	003b7606 	br	402132c <__alt_data_end+0xfffe132c>
 4022554:	d8802917 	ldw	r2,164(sp)
 4022558:	00c00184 	movi	r3,6
 402255c:	1880012e 	bgeu	r3,r2,4022564 <___vfprintf_internal_r+0x1ca0>
 4022560:	1805883a 	mov	r2,r3
 4022564:	d8802e15 	stw	r2,184(sp)
 4022568:	1000ef16 	blt	r2,zero,4022928 <___vfprintf_internal_r+0x2064>
 402256c:	040100f4 	movhi	r16,1027
 4022570:	d8802a15 	stw	r2,168(sp)
 4022574:	dcc02d15 	stw	r19,180(sp)
 4022578:	d8002915 	stw	zero,164(sp)
 402257c:	d8003215 	stw	zero,200(sp)
 4022580:	8400bc04 	addi	r16,r16,752
 4022584:	0039883a 	mov	fp,zero
 4022588:	003aa206 	br	4021014 <__alt_data_end+0xfffe1014>
 402258c:	0021883a 	mov	r16,zero
 4022590:	003e0706 	br	4021db0 <__alt_data_end+0xfffe1db0>
 4022594:	d9002c17 	ldw	r4,176(sp)
 4022598:	d9801e04 	addi	r6,sp,120
 402259c:	b80b883a 	mov	r5,r23
 40225a0:	4027ec00 	call	4027ec0 <__sprint_r>
 40225a4:	1039c91e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 40225a8:	d8802617 	ldw	r2,152(sp)
 40225ac:	d9403317 	ldw	r5,204(sp)
 40225b0:	d8c02017 	ldw	r3,128(sp)
 40225b4:	da000404 	addi	r8,sp,16
 40225b8:	2885c83a 	sub	r2,r5,r2
 40225bc:	003dfb06 	br	4021dac <__alt_data_end+0xfffe1dac>
 40225c0:	9080004c 	andi	r2,r18,1
 40225c4:	103e8f1e 	bne	r2,zero,4022004 <__alt_data_end+0xfffe2004>
 40225c8:	d8802117 	ldw	r2,132(sp)
 40225cc:	003e9e06 	br	4022048 <__alt_data_end+0xfffe2048>
 40225d0:	1025883a 	mov	r18,r2
 40225d4:	0039883a 	mov	fp,zero
 40225d8:	00800084 	movi	r2,2
 40225dc:	003fd306 	br	402252c <__alt_data_end+0xfffe252c>
 40225e0:	07000b44 	movi	fp,45
 40225e4:	df002785 	stb	fp,158(sp)
 40225e8:	003a4006 	br	4020eec <__alt_data_end+0xfffe0eec>
 40225ec:	00c00b44 	movi	r3,45
 40225f0:	d8c02785 	stb	r3,158(sp)
 40225f4:	d8802a15 	stw	r2,168(sp)
 40225f8:	dc802b17 	ldw	r18,172(sp)
 40225fc:	d8002915 	stw	zero,164(sp)
 4022600:	07000b44 	movi	fp,45
 4022604:	003a8006 	br	4021008 <__alt_data_end+0xfffe1008>
 4022608:	040100f4 	movhi	r16,1027
 402260c:	8400b104 	addi	r16,r16,708
 4022610:	003f4706 	br	4022330 <__alt_data_end+0xfffe2330>
 4022614:	d8c02d17 	ldw	r3,180(sp)
 4022618:	d9002f17 	ldw	r4,188(sp)
 402261c:	18800017 	ldw	r2,0(r3)
 4022620:	18c00104 	addi	r3,r3,4
 4022624:	d8c02d15 	stw	r3,180(sp)
 4022628:	11000015 	stw	r4,0(r2)
 402262c:	0038dd06 	br	40209a4 <__alt_data_end+0xfffe09a4>
 4022630:	dd802617 	ldw	r22,152(sp)
 4022634:	00bfff44 	movi	r2,-3
 4022638:	b0801c16 	blt	r22,r2,40226ac <___vfprintf_internal_r+0x1de8>
 402263c:	d9402917 	ldw	r5,164(sp)
 4022640:	2d801a16 	blt	r5,r22,40226ac <___vfprintf_internal_r+0x1de8>
 4022644:	dd803215 	stw	r22,200(sp)
 4022648:	003e8906 	br	4022070 <__alt_data_end+0xfffe2070>
 402264c:	010100f4 	movhi	r4,1027
 4022650:	2100be84 	addi	r4,r4,762
 4022654:	d9002b15 	stw	r4,172(sp)
 4022658:	003c9106 	br	40218a0 <__alt_data_end+0xfffe18a0>
 402265c:	e005883a 	mov	r2,fp
 4022660:	003e7906 	br	4022048 <__alt_data_end+0xfffe2048>
 4022664:	d9402917 	ldw	r5,164(sp)
 4022668:	df002783 	ldbu	fp,158(sp)
 402266c:	dcc02d15 	stw	r19,180(sp)
 4022670:	d9402a15 	stw	r5,168(sp)
 4022674:	d9402e15 	stw	r5,184(sp)
 4022678:	d8002915 	stw	zero,164(sp)
 402267c:	d8003215 	stw	zero,200(sp)
 4022680:	003a5d06 	br	4020ff8 <__alt_data_end+0xfffe0ff8>
 4022684:	9080004c 	andi	r2,r18,1
 4022688:	0039883a 	mov	fp,zero
 402268c:	10000426 	beq	r2,zero,40226a0 <___vfprintf_internal_r+0x1ddc>
 4022690:	00800c04 	movi	r2,48
 4022694:	dc001dc4 	addi	r16,sp,119
 4022698:	d8801dc5 	stb	r2,119(sp)
 402269c:	003b8006 	br	40214a0 <__alt_data_end+0xfffe14a0>
 40226a0:	d8002e15 	stw	zero,184(sp)
 40226a4:	dc001e04 	addi	r16,sp,120
 40226a8:	003a4d06 	br	4020fe0 <__alt_data_end+0xfffe0fe0>
 40226ac:	8c7fff84 	addi	r17,r17,-2
 40226b0:	b5bfffc4 	addi	r22,r22,-1
 40226b4:	dd802615 	stw	r22,152(sp)
 40226b8:	dc4022c5 	stb	r17,139(sp)
 40226bc:	b000bf16 	blt	r22,zero,40229bc <___vfprintf_internal_r+0x20f8>
 40226c0:	00800ac4 	movi	r2,43
 40226c4:	d8802305 	stb	r2,140(sp)
 40226c8:	00800244 	movi	r2,9
 40226cc:	15807016 	blt	r2,r22,4022890 <___vfprintf_internal_r+0x1fcc>
 40226d0:	00800c04 	movi	r2,48
 40226d4:	b5800c04 	addi	r22,r22,48
 40226d8:	d8802345 	stb	r2,141(sp)
 40226dc:	dd802385 	stb	r22,142(sp)
 40226e0:	d88023c4 	addi	r2,sp,143
 40226e4:	df0022c4 	addi	fp,sp,139
 40226e8:	d8c03317 	ldw	r3,204(sp)
 40226ec:	1739c83a 	sub	fp,r2,fp
 40226f0:	d9003317 	ldw	r4,204(sp)
 40226f4:	e0c7883a 	add	r3,fp,r3
 40226f8:	df003a15 	stw	fp,232(sp)
 40226fc:	d8c02e15 	stw	r3,184(sp)
 4022700:	00800044 	movi	r2,1
 4022704:	1100b30e 	bge	r2,r4,40229d4 <___vfprintf_internal_r+0x2110>
 4022708:	d8c02e17 	ldw	r3,184(sp)
 402270c:	18c00044 	addi	r3,r3,1
 4022710:	d8c02e15 	stw	r3,184(sp)
 4022714:	1805883a 	mov	r2,r3
 4022718:	1800ac16 	blt	r3,zero,40229cc <___vfprintf_internal_r+0x2108>
 402271c:	d8003215 	stw	zero,200(sp)
 4022720:	003e5d06 	br	4022098 <__alt_data_end+0xfffe2098>
 4022724:	d9002c17 	ldw	r4,176(sp)
 4022728:	d9801e04 	addi	r6,sp,120
 402272c:	b80b883a 	mov	r5,r23
 4022730:	4027ec00 	call	4027ec0 <__sprint_r>
 4022734:	1039651e 	bne	r2,zero,4020ccc <__alt_data_end+0xfffe0ccc>
 4022738:	dc402617 	ldw	r17,152(sp)
 402273c:	d8c02017 	ldw	r3,128(sp)
 4022740:	d8801f17 	ldw	r2,124(sp)
 4022744:	da000404 	addi	r8,sp,16
 4022748:	003ed606 	br	40222a4 <__alt_data_end+0xfffe22a4>
 402274c:	582b883a 	mov	r21,r11
 4022750:	d8002915 	stw	zero,164(sp)
 4022754:	0038bd06 	br	4020a4c <__alt_data_end+0xfffe0a4c>
 4022758:	d8802917 	ldw	r2,164(sp)
 402275c:	103e071e 	bne	r2,zero,4021f7c <__alt_data_end+0xfffe1f7c>
 4022760:	dc002915 	stw	r16,164(sp)
 4022764:	003e0506 	br	4021f7c <__alt_data_end+0xfffe1f7c>
 4022768:	d9002917 	ldw	r4,164(sp)
 402276c:	20c00044 	addi	r3,r4,1
 4022770:	003e0f06 	br	4021fb0 <__alt_data_end+0xfffe1fb0>
 4022774:	01400184 	movi	r5,6
 4022778:	d9402915 	stw	r5,164(sp)
 402277c:	003dff06 	br	4021f7c <__alt_data_end+0xfffe1f7c>
 4022780:	d8802104 	addi	r2,sp,132
 4022784:	d8800315 	stw	r2,12(sp)
 4022788:	d8802504 	addi	r2,sp,148
 402278c:	d8800215 	stw	r2,8(sp)
 4022790:	d8802604 	addi	r2,sp,152
 4022794:	d8800115 	stw	r2,4(sp)
 4022798:	d8802917 	ldw	r2,164(sp)
 402279c:	d9403617 	ldw	r5,216(sp)
 40227a0:	d9002c17 	ldw	r4,176(sp)
 40227a4:	d8800015 	stw	r2,0(sp)
 40227a8:	01c000c4 	movi	r7,3
 40227ac:	980d883a 	mov	r6,r19
 40227b0:	da003d15 	stw	r8,244(sp)
 40227b4:	4022ee80 	call	4022ee8 <_dtoa_r>
 40227b8:	d8c02917 	ldw	r3,164(sp)
 40227bc:	da003d17 	ldw	r8,244(sp)
 40227c0:	1021883a 	mov	r16,r2
 40227c4:	10f9883a 	add	fp,r2,r3
 40227c8:	81000007 	ldb	r4,0(r16)
 40227cc:	00800c04 	movi	r2,48
 40227d0:	20805e26 	beq	r4,r2,402294c <___vfprintf_internal_r+0x2088>
 40227d4:	d8c02617 	ldw	r3,152(sp)
 40227d8:	e0f9883a 	add	fp,fp,r3
 40227dc:	003e0a06 	br	4022008 <__alt_data_end+0xfffe2008>
 40227e0:	00c00b44 	movi	r3,45
 40227e4:	24e0003c 	xorhi	r19,r4,32768
 40227e8:	d8c02a05 	stb	r3,168(sp)
 40227ec:	003de906 	br	4021f94 <__alt_data_end+0xfffe1f94>
 40227f0:	d8c03217 	ldw	r3,200(sp)
 40227f4:	00c07a0e 	bge	zero,r3,40229e0 <___vfprintf_internal_r+0x211c>
 40227f8:	00800044 	movi	r2,1
 40227fc:	d9003317 	ldw	r4,204(sp)
 4022800:	1105883a 	add	r2,r2,r4
 4022804:	d8802e15 	stw	r2,184(sp)
 4022808:	10004e16 	blt	r2,zero,4022944 <___vfprintf_internal_r+0x2080>
 402280c:	044019c4 	movi	r17,103
 4022810:	003e2106 	br	4022098 <__alt_data_end+0xfffe2098>
 4022814:	d9002917 	ldw	r4,164(sp)
 4022818:	d8802104 	addi	r2,sp,132
 402281c:	d8800315 	stw	r2,12(sp)
 4022820:	d9000015 	stw	r4,0(sp)
 4022824:	d8802504 	addi	r2,sp,148
 4022828:	d9403617 	ldw	r5,216(sp)
 402282c:	d9002c17 	ldw	r4,176(sp)
 4022830:	d8800215 	stw	r2,8(sp)
 4022834:	d8802604 	addi	r2,sp,152
 4022838:	d8800115 	stw	r2,4(sp)
 402283c:	01c000c4 	movi	r7,3
 4022840:	980d883a 	mov	r6,r19
 4022844:	da003d15 	stw	r8,244(sp)
 4022848:	4022ee80 	call	4022ee8 <_dtoa_r>
 402284c:	d8c02917 	ldw	r3,164(sp)
 4022850:	da003d17 	ldw	r8,244(sp)
 4022854:	1021883a 	mov	r16,r2
 4022858:	00801184 	movi	r2,70
 402285c:	80f9883a 	add	fp,r16,r3
 4022860:	88bfd926 	beq	r17,r2,40227c8 <__alt_data_end+0xfffe27c8>
 4022864:	003de806 	br	4022008 <__alt_data_end+0xfffe2008>
 4022868:	d9002917 	ldw	r4,164(sp)
 402286c:	00c04d0e 	bge	zero,r3,40229a4 <___vfprintf_internal_r+0x20e0>
 4022870:	2000441e 	bne	r4,zero,4022984 <___vfprintf_internal_r+0x20c0>
 4022874:	9480004c 	andi	r18,r18,1
 4022878:	9000421e 	bne	r18,zero,4022984 <___vfprintf_internal_r+0x20c0>
 402287c:	1805883a 	mov	r2,r3
 4022880:	18007016 	blt	r3,zero,4022a44 <___vfprintf_internal_r+0x2180>
 4022884:	d8c03217 	ldw	r3,200(sp)
 4022888:	d8c02e15 	stw	r3,184(sp)
 402288c:	003e0206 	br	4022098 <__alt_data_end+0xfffe2098>
 4022890:	df0022c4 	addi	fp,sp,139
 4022894:	dc002915 	stw	r16,164(sp)
 4022898:	4027883a 	mov	r19,r8
 402289c:	e021883a 	mov	r16,fp
 40228a0:	b009883a 	mov	r4,r22
 40228a4:	01400284 	movi	r5,10
 40228a8:	402a8740 	call	402a874 <__modsi3>
 40228ac:	10800c04 	addi	r2,r2,48
 40228b0:	843fffc4 	addi	r16,r16,-1
 40228b4:	b009883a 	mov	r4,r22
 40228b8:	01400284 	movi	r5,10
 40228bc:	80800005 	stb	r2,0(r16)
 40228c0:	402a7f00 	call	402a7f0 <__divsi3>
 40228c4:	102d883a 	mov	r22,r2
 40228c8:	00800244 	movi	r2,9
 40228cc:	15bff416 	blt	r2,r22,40228a0 <__alt_data_end+0xfffe28a0>
 40228d0:	9811883a 	mov	r8,r19
 40228d4:	b0800c04 	addi	r2,r22,48
 40228d8:	8027883a 	mov	r19,r16
 40228dc:	997fffc4 	addi	r5,r19,-1
 40228e0:	98bfffc5 	stb	r2,-1(r19)
 40228e4:	dc002917 	ldw	r16,164(sp)
 40228e8:	2f006a2e 	bgeu	r5,fp,4022a94 <___vfprintf_internal_r+0x21d0>
 40228ec:	d9c02384 	addi	r7,sp,142
 40228f0:	3ccfc83a 	sub	r7,r7,r19
 40228f4:	d9002344 	addi	r4,sp,141
 40228f8:	e1cf883a 	add	r7,fp,r7
 40228fc:	00000106 	br	4022904 <___vfprintf_internal_r+0x2040>
 4022900:	28800003 	ldbu	r2,0(r5)
 4022904:	20800005 	stb	r2,0(r4)
 4022908:	21000044 	addi	r4,r4,1
 402290c:	29400044 	addi	r5,r5,1
 4022910:	393ffb1e 	bne	r7,r4,4022900 <__alt_data_end+0xfffe2900>
 4022914:	d8802304 	addi	r2,sp,140
 4022918:	14c5c83a 	sub	r2,r2,r19
 402291c:	d8c02344 	addi	r3,sp,141
 4022920:	1885883a 	add	r2,r3,r2
 4022924:	003f7006 	br	40226e8 <__alt_data_end+0xfffe26e8>
 4022928:	0005883a 	mov	r2,zero
 402292c:	003f0f06 	br	402256c <__alt_data_end+0xfffe256c>
 4022930:	d8c03217 	ldw	r3,200(sp)
 4022934:	18c00044 	addi	r3,r3,1
 4022938:	d8c02e15 	stw	r3,184(sp)
 402293c:	1805883a 	mov	r2,r3
 4022940:	183fb20e 	bge	r3,zero,402280c <__alt_data_end+0xfffe280c>
 4022944:	0005883a 	mov	r2,zero
 4022948:	003fb006 	br	402280c <__alt_data_end+0xfffe280c>
 402294c:	d9003617 	ldw	r4,216(sp)
 4022950:	000d883a 	mov	r6,zero
 4022954:	000f883a 	mov	r7,zero
 4022958:	980b883a 	mov	r5,r19
 402295c:	d8c03c15 	stw	r3,240(sp)
 4022960:	da003d15 	stw	r8,244(sp)
 4022964:	402bb380 	call	402bb38 <__eqdf2>
 4022968:	d8c03c17 	ldw	r3,240(sp)
 402296c:	da003d17 	ldw	r8,244(sp)
 4022970:	103f9826 	beq	r2,zero,40227d4 <__alt_data_end+0xfffe27d4>
 4022974:	00800044 	movi	r2,1
 4022978:	10c7c83a 	sub	r3,r2,r3
 402297c:	d8c02615 	stw	r3,152(sp)
 4022980:	003f9506 	br	40227d8 <__alt_data_end+0xfffe27d8>
 4022984:	d9002917 	ldw	r4,164(sp)
 4022988:	d8c03217 	ldw	r3,200(sp)
 402298c:	20800044 	addi	r2,r4,1
 4022990:	1885883a 	add	r2,r3,r2
 4022994:	d8802e15 	stw	r2,184(sp)
 4022998:	103dbf0e 	bge	r2,zero,4022098 <__alt_data_end+0xfffe2098>
 402299c:	0005883a 	mov	r2,zero
 40229a0:	003dbd06 	br	4022098 <__alt_data_end+0xfffe2098>
 40229a4:	2000211e 	bne	r4,zero,4022a2c <___vfprintf_internal_r+0x2168>
 40229a8:	9480004c 	andi	r18,r18,1
 40229ac:	90001f1e 	bne	r18,zero,4022a2c <___vfprintf_internal_r+0x2168>
 40229b0:	00800044 	movi	r2,1
 40229b4:	d8802e15 	stw	r2,184(sp)
 40229b8:	003db706 	br	4022098 <__alt_data_end+0xfffe2098>
 40229bc:	00800b44 	movi	r2,45
 40229c0:	05adc83a 	sub	r22,zero,r22
 40229c4:	d8802305 	stb	r2,140(sp)
 40229c8:	003f3f06 	br	40226c8 <__alt_data_end+0xfffe26c8>
 40229cc:	0005883a 	mov	r2,zero
 40229d0:	003f5206 	br	402271c <__alt_data_end+0xfffe271c>
 40229d4:	90a4703a 	and	r18,r18,r2
 40229d8:	903f4e26 	beq	r18,zero,4022714 <__alt_data_end+0xfffe2714>
 40229dc:	003f4a06 	br	4022708 <__alt_data_end+0xfffe2708>
 40229e0:	00800084 	movi	r2,2
 40229e4:	10c5c83a 	sub	r2,r2,r3
 40229e8:	003f8406 	br	40227fc <__alt_data_end+0xfffe27fc>
 40229ec:	d8802d17 	ldw	r2,180(sp)
 40229f0:	d9002d17 	ldw	r4,180(sp)
 40229f4:	ac400043 	ldbu	r17,1(r21)
 40229f8:	10800017 	ldw	r2,0(r2)
 40229fc:	582b883a 	mov	r21,r11
 4022a00:	d8802915 	stw	r2,164(sp)
 4022a04:	20800104 	addi	r2,r4,4
 4022a08:	d9002917 	ldw	r4,164(sp)
 4022a0c:	d8802d15 	stw	r2,180(sp)
 4022a10:	203e7a0e 	bge	r4,zero,40223fc <__alt_data_end+0xfffe23fc>
 4022a14:	8c403fcc 	andi	r17,r17,255
 4022a18:	00bfffc4 	movi	r2,-1
 4022a1c:	8c40201c 	xori	r17,r17,128
 4022a20:	d8802915 	stw	r2,164(sp)
 4022a24:	8c7fe004 	addi	r17,r17,-128
 4022a28:	00380706 	br	4020a48 <__alt_data_end+0xfffe0a48>
 4022a2c:	d8c02917 	ldw	r3,164(sp)
 4022a30:	18c00084 	addi	r3,r3,2
 4022a34:	d8c02e15 	stw	r3,184(sp)
 4022a38:	1805883a 	mov	r2,r3
 4022a3c:	183d960e 	bge	r3,zero,4022098 <__alt_data_end+0xfffe2098>
 4022a40:	003fd606 	br	402299c <__alt_data_end+0xfffe299c>
 4022a44:	0005883a 	mov	r2,zero
 4022a48:	003f8e06 	br	4022884 <__alt_data_end+0xfffe2884>
 4022a4c:	9080004c 	andi	r2,r18,1
 4022a50:	103f811e 	bne	r2,zero,4022858 <__alt_data_end+0xfffe2858>
 4022a54:	d8802117 	ldw	r2,132(sp)
 4022a58:	1405c83a 	sub	r2,r2,r16
 4022a5c:	d8803315 	stw	r2,204(sp)
 4022a60:	b47ef326 	beq	r22,r17,4022630 <__alt_data_end+0xfffe2630>
 4022a64:	dd802617 	ldw	r22,152(sp)
 4022a68:	003f1106 	br	40226b0 <__alt_data_end+0xfffe26b0>
 4022a6c:	d9c02785 	stb	r7,158(sp)
 4022a70:	00390406 	br	4020e84 <__alt_data_end+0xfffe0e84>
 4022a74:	d9c02785 	stb	r7,158(sp)
 4022a78:	0038d306 	br	4020dc8 <__alt_data_end+0xfffe0dc8>
 4022a7c:	d9c02785 	stb	r7,158(sp)
 4022a80:	003a6106 	br	4021408 <__alt_data_end+0xfffe1408>
 4022a84:	d9c02785 	stb	r7,158(sp)
 4022a88:	003af806 	br	402166c <__alt_data_end+0xfffe166c>
 4022a8c:	0005883a 	mov	r2,zero
 4022a90:	003d7e06 	br	402208c <__alt_data_end+0xfffe208c>
 4022a94:	d8802344 	addi	r2,sp,141
 4022a98:	003f1306 	br	40226e8 <__alt_data_end+0xfffe26e8>
 4022a9c:	d9c02785 	stb	r7,158(sp)
 4022aa0:	00392306 	br	4020f30 <__alt_data_end+0xfffe0f30>
 4022aa4:	d9c02785 	stb	r7,158(sp)
 4022aa8:	003aa906 	br	4021550 <__alt_data_end+0xfffe1550>
 4022aac:	d9c02785 	stb	r7,158(sp)
 4022ab0:	003a3d06 	br	40213a8 <__alt_data_end+0xfffe13a8>
 4022ab4:	d9c02785 	stb	r7,158(sp)
 4022ab8:	003aca06 	br	40215e4 <__alt_data_end+0xfffe15e4>

04022abc <__vfprintf_internal>:
 4022abc:	008100f4 	movhi	r2,1027
 4022ac0:	10886b04 	addi	r2,r2,8620
 4022ac4:	300f883a 	mov	r7,r6
 4022ac8:	280d883a 	mov	r6,r5
 4022acc:	200b883a 	mov	r5,r4
 4022ad0:	11000017 	ldw	r4,0(r2)
 4022ad4:	40208c41 	jmpi	40208c4 <___vfprintf_internal_r>

04022ad8 <__sbprintf>:
 4022ad8:	2880030b 	ldhu	r2,12(r5)
 4022adc:	2ac01917 	ldw	r11,100(r5)
 4022ae0:	2a80038b 	ldhu	r10,14(r5)
 4022ae4:	2a400717 	ldw	r9,28(r5)
 4022ae8:	2a000917 	ldw	r8,36(r5)
 4022aec:	defee204 	addi	sp,sp,-1144
 4022af0:	00c10004 	movi	r3,1024
 4022af4:	dc011a15 	stw	r16,1128(sp)
 4022af8:	10bfff4c 	andi	r2,r2,65533
 4022afc:	2821883a 	mov	r16,r5
 4022b00:	d8cb883a 	add	r5,sp,r3
 4022b04:	dc811c15 	stw	r18,1136(sp)
 4022b08:	dc411b15 	stw	r17,1132(sp)
 4022b0c:	dfc11d15 	stw	ra,1140(sp)
 4022b10:	2025883a 	mov	r18,r4
 4022b14:	d881030d 	sth	r2,1036(sp)
 4022b18:	dac11915 	stw	r11,1124(sp)
 4022b1c:	da81038d 	sth	r10,1038(sp)
 4022b20:	da410715 	stw	r9,1052(sp)
 4022b24:	da010915 	stw	r8,1060(sp)
 4022b28:	dec10015 	stw	sp,1024(sp)
 4022b2c:	dec10415 	stw	sp,1040(sp)
 4022b30:	d8c10215 	stw	r3,1032(sp)
 4022b34:	d8c10515 	stw	r3,1044(sp)
 4022b38:	d8010615 	stw	zero,1048(sp)
 4022b3c:	40208c40 	call	40208c4 <___vfprintf_internal_r>
 4022b40:	1023883a 	mov	r17,r2
 4022b44:	10000416 	blt	r2,zero,4022b58 <__sbprintf+0x80>
 4022b48:	d9410004 	addi	r5,sp,1024
 4022b4c:	9009883a 	mov	r4,r18
 4022b50:	402478c0 	call	402478c <_fflush_r>
 4022b54:	10000d1e 	bne	r2,zero,4022b8c <__sbprintf+0xb4>
 4022b58:	d881030b 	ldhu	r2,1036(sp)
 4022b5c:	1080100c 	andi	r2,r2,64
 4022b60:	10000326 	beq	r2,zero,4022b70 <__sbprintf+0x98>
 4022b64:	8080030b 	ldhu	r2,12(r16)
 4022b68:	10801014 	ori	r2,r2,64
 4022b6c:	8080030d 	sth	r2,12(r16)
 4022b70:	8805883a 	mov	r2,r17
 4022b74:	dfc11d17 	ldw	ra,1140(sp)
 4022b78:	dc811c17 	ldw	r18,1136(sp)
 4022b7c:	dc411b17 	ldw	r17,1132(sp)
 4022b80:	dc011a17 	ldw	r16,1128(sp)
 4022b84:	dec11e04 	addi	sp,sp,1144
 4022b88:	f800283a 	ret
 4022b8c:	047fffc4 	movi	r17,-1
 4022b90:	003ff106 	br	4022b58 <__alt_data_end+0xfffe2b58>

04022b94 <__swsetup_r>:
 4022b94:	008100f4 	movhi	r2,1027
 4022b98:	defffd04 	addi	sp,sp,-12
 4022b9c:	10886b04 	addi	r2,r2,8620
 4022ba0:	dc400115 	stw	r17,4(sp)
 4022ba4:	2023883a 	mov	r17,r4
 4022ba8:	11000017 	ldw	r4,0(r2)
 4022bac:	dc000015 	stw	r16,0(sp)
 4022bb0:	dfc00215 	stw	ra,8(sp)
 4022bb4:	2821883a 	mov	r16,r5
 4022bb8:	20000226 	beq	r4,zero,4022bc4 <__swsetup_r+0x30>
 4022bbc:	20800e17 	ldw	r2,56(r4)
 4022bc0:	10003126 	beq	r2,zero,4022c88 <__swsetup_r+0xf4>
 4022bc4:	8080030b 	ldhu	r2,12(r16)
 4022bc8:	10c0020c 	andi	r3,r2,8
 4022bcc:	1009883a 	mov	r4,r2
 4022bd0:	18000f26 	beq	r3,zero,4022c10 <__swsetup_r+0x7c>
 4022bd4:	80c00417 	ldw	r3,16(r16)
 4022bd8:	18001526 	beq	r3,zero,4022c30 <__swsetup_r+0x9c>
 4022bdc:	1100004c 	andi	r4,r2,1
 4022be0:	20001c1e 	bne	r4,zero,4022c54 <__swsetup_r+0xc0>
 4022be4:	1080008c 	andi	r2,r2,2
 4022be8:	1000291e 	bne	r2,zero,4022c90 <__swsetup_r+0xfc>
 4022bec:	80800517 	ldw	r2,20(r16)
 4022bf0:	80800215 	stw	r2,8(r16)
 4022bf4:	18001c26 	beq	r3,zero,4022c68 <__swsetup_r+0xd4>
 4022bf8:	0005883a 	mov	r2,zero
 4022bfc:	dfc00217 	ldw	ra,8(sp)
 4022c00:	dc400117 	ldw	r17,4(sp)
 4022c04:	dc000017 	ldw	r16,0(sp)
 4022c08:	dec00304 	addi	sp,sp,12
 4022c0c:	f800283a 	ret
 4022c10:	2080040c 	andi	r2,r4,16
 4022c14:	10002e26 	beq	r2,zero,4022cd0 <__swsetup_r+0x13c>
 4022c18:	2080010c 	andi	r2,r4,4
 4022c1c:	10001e1e 	bne	r2,zero,4022c98 <__swsetup_r+0x104>
 4022c20:	80c00417 	ldw	r3,16(r16)
 4022c24:	20800214 	ori	r2,r4,8
 4022c28:	8080030d 	sth	r2,12(r16)
 4022c2c:	183feb1e 	bne	r3,zero,4022bdc <__alt_data_end+0xfffe2bdc>
 4022c30:	1100a00c 	andi	r4,r2,640
 4022c34:	01408004 	movi	r5,512
 4022c38:	217fe826 	beq	r4,r5,4022bdc <__alt_data_end+0xfffe2bdc>
 4022c3c:	800b883a 	mov	r5,r16
 4022c40:	8809883a 	mov	r4,r17
 4022c44:	402570c0 	call	402570c <__smakebuf_r>
 4022c48:	8080030b 	ldhu	r2,12(r16)
 4022c4c:	80c00417 	ldw	r3,16(r16)
 4022c50:	003fe206 	br	4022bdc <__alt_data_end+0xfffe2bdc>
 4022c54:	80800517 	ldw	r2,20(r16)
 4022c58:	80000215 	stw	zero,8(r16)
 4022c5c:	0085c83a 	sub	r2,zero,r2
 4022c60:	80800615 	stw	r2,24(r16)
 4022c64:	183fe41e 	bne	r3,zero,4022bf8 <__alt_data_end+0xfffe2bf8>
 4022c68:	80c0030b 	ldhu	r3,12(r16)
 4022c6c:	0005883a 	mov	r2,zero
 4022c70:	1900200c 	andi	r4,r3,128
 4022c74:	203fe126 	beq	r4,zero,4022bfc <__alt_data_end+0xfffe2bfc>
 4022c78:	18c01014 	ori	r3,r3,64
 4022c7c:	80c0030d 	sth	r3,12(r16)
 4022c80:	00bfffc4 	movi	r2,-1
 4022c84:	003fdd06 	br	4022bfc <__alt_data_end+0xfffe2bfc>
 4022c88:	4024b680 	call	4024b68 <__sinit>
 4022c8c:	003fcd06 	br	4022bc4 <__alt_data_end+0xfffe2bc4>
 4022c90:	0005883a 	mov	r2,zero
 4022c94:	003fd606 	br	4022bf0 <__alt_data_end+0xfffe2bf0>
 4022c98:	81400c17 	ldw	r5,48(r16)
 4022c9c:	28000626 	beq	r5,zero,4022cb8 <__swsetup_r+0x124>
 4022ca0:	80801004 	addi	r2,r16,64
 4022ca4:	28800326 	beq	r5,r2,4022cb4 <__swsetup_r+0x120>
 4022ca8:	8809883a 	mov	r4,r17
 4022cac:	4024cdc0 	call	4024cdc <_free_r>
 4022cb0:	8100030b 	ldhu	r4,12(r16)
 4022cb4:	80000c15 	stw	zero,48(r16)
 4022cb8:	80c00417 	ldw	r3,16(r16)
 4022cbc:	00bff6c4 	movi	r2,-37
 4022cc0:	1108703a 	and	r4,r2,r4
 4022cc4:	80000115 	stw	zero,4(r16)
 4022cc8:	80c00015 	stw	r3,0(r16)
 4022ccc:	003fd506 	br	4022c24 <__alt_data_end+0xfffe2c24>
 4022cd0:	00800244 	movi	r2,9
 4022cd4:	88800015 	stw	r2,0(r17)
 4022cd8:	20801014 	ori	r2,r4,64
 4022cdc:	8080030d 	sth	r2,12(r16)
 4022ce0:	00bfffc4 	movi	r2,-1
 4022ce4:	003fc506 	br	4022bfc <__alt_data_end+0xfffe2bfc>

04022ce8 <quorem>:
 4022ce8:	defff704 	addi	sp,sp,-36
 4022cec:	dc800215 	stw	r18,8(sp)
 4022cf0:	20800417 	ldw	r2,16(r4)
 4022cf4:	2c800417 	ldw	r18,16(r5)
 4022cf8:	dfc00815 	stw	ra,32(sp)
 4022cfc:	ddc00715 	stw	r23,28(sp)
 4022d00:	dd800615 	stw	r22,24(sp)
 4022d04:	dd400515 	stw	r21,20(sp)
 4022d08:	dd000415 	stw	r20,16(sp)
 4022d0c:	dcc00315 	stw	r19,12(sp)
 4022d10:	dc400115 	stw	r17,4(sp)
 4022d14:	dc000015 	stw	r16,0(sp)
 4022d18:	14807116 	blt	r2,r18,4022ee0 <quorem+0x1f8>
 4022d1c:	94bfffc4 	addi	r18,r18,-1
 4022d20:	94ad883a 	add	r22,r18,r18
 4022d24:	b5ad883a 	add	r22,r22,r22
 4022d28:	2c400504 	addi	r17,r5,20
 4022d2c:	8da9883a 	add	r20,r17,r22
 4022d30:	25400504 	addi	r21,r4,20
 4022d34:	282f883a 	mov	r23,r5
 4022d38:	adad883a 	add	r22,r21,r22
 4022d3c:	a1400017 	ldw	r5,0(r20)
 4022d40:	2021883a 	mov	r16,r4
 4022d44:	b1000017 	ldw	r4,0(r22)
 4022d48:	29400044 	addi	r5,r5,1
 4022d4c:	402a8e80 	call	402a8e8 <__udivsi3>
 4022d50:	1027883a 	mov	r19,r2
 4022d54:	10002c26 	beq	r2,zero,4022e08 <quorem+0x120>
 4022d58:	a813883a 	mov	r9,r21
 4022d5c:	880b883a 	mov	r5,r17
 4022d60:	0009883a 	mov	r4,zero
 4022d64:	000d883a 	mov	r6,zero
 4022d68:	2a000017 	ldw	r8,0(r5)
 4022d6c:	49c00017 	ldw	r7,0(r9)
 4022d70:	29400104 	addi	r5,r5,4
 4022d74:	40bfffcc 	andi	r2,r8,65535
 4022d78:	14c5383a 	mul	r2,r2,r19
 4022d7c:	4010d43a 	srli	r8,r8,16
 4022d80:	38ffffcc 	andi	r3,r7,65535
 4022d84:	1105883a 	add	r2,r2,r4
 4022d88:	1008d43a 	srli	r4,r2,16
 4022d8c:	44d1383a 	mul	r8,r8,r19
 4022d90:	198d883a 	add	r6,r3,r6
 4022d94:	10ffffcc 	andi	r3,r2,65535
 4022d98:	30c7c83a 	sub	r3,r6,r3
 4022d9c:	380ed43a 	srli	r7,r7,16
 4022da0:	4105883a 	add	r2,r8,r4
 4022da4:	180dd43a 	srai	r6,r3,16
 4022da8:	113fffcc 	andi	r4,r2,65535
 4022dac:	390fc83a 	sub	r7,r7,r4
 4022db0:	398d883a 	add	r6,r7,r6
 4022db4:	300e943a 	slli	r7,r6,16
 4022db8:	18ffffcc 	andi	r3,r3,65535
 4022dbc:	1008d43a 	srli	r4,r2,16
 4022dc0:	38ceb03a 	or	r7,r7,r3
 4022dc4:	49c00015 	stw	r7,0(r9)
 4022dc8:	300dd43a 	srai	r6,r6,16
 4022dcc:	4a400104 	addi	r9,r9,4
 4022dd0:	a17fe52e 	bgeu	r20,r5,4022d68 <__alt_data_end+0xfffe2d68>
 4022dd4:	b0800017 	ldw	r2,0(r22)
 4022dd8:	10000b1e 	bne	r2,zero,4022e08 <quorem+0x120>
 4022ddc:	b0bfff04 	addi	r2,r22,-4
 4022de0:	a880082e 	bgeu	r21,r2,4022e04 <quorem+0x11c>
 4022de4:	b0ffff17 	ldw	r3,-4(r22)
 4022de8:	18000326 	beq	r3,zero,4022df8 <quorem+0x110>
 4022dec:	00000506 	br	4022e04 <quorem+0x11c>
 4022df0:	10c00017 	ldw	r3,0(r2)
 4022df4:	1800031e 	bne	r3,zero,4022e04 <quorem+0x11c>
 4022df8:	10bfff04 	addi	r2,r2,-4
 4022dfc:	94bfffc4 	addi	r18,r18,-1
 4022e00:	a8bffb36 	bltu	r21,r2,4022df0 <__alt_data_end+0xfffe2df0>
 4022e04:	84800415 	stw	r18,16(r16)
 4022e08:	b80b883a 	mov	r5,r23
 4022e0c:	8009883a 	mov	r4,r16
 4022e10:	4026e4c0 	call	4026e4c <__mcmp>
 4022e14:	10002616 	blt	r2,zero,4022eb0 <quorem+0x1c8>
 4022e18:	9cc00044 	addi	r19,r19,1
 4022e1c:	a805883a 	mov	r2,r21
 4022e20:	000b883a 	mov	r5,zero
 4022e24:	11000017 	ldw	r4,0(r2)
 4022e28:	89800017 	ldw	r6,0(r17)
 4022e2c:	10800104 	addi	r2,r2,4
 4022e30:	20ffffcc 	andi	r3,r4,65535
 4022e34:	194b883a 	add	r5,r3,r5
 4022e38:	30ffffcc 	andi	r3,r6,65535
 4022e3c:	28c7c83a 	sub	r3,r5,r3
 4022e40:	300cd43a 	srli	r6,r6,16
 4022e44:	2008d43a 	srli	r4,r4,16
 4022e48:	180bd43a 	srai	r5,r3,16
 4022e4c:	18ffffcc 	andi	r3,r3,65535
 4022e50:	2189c83a 	sub	r4,r4,r6
 4022e54:	2149883a 	add	r4,r4,r5
 4022e58:	200c943a 	slli	r6,r4,16
 4022e5c:	8c400104 	addi	r17,r17,4
 4022e60:	200bd43a 	srai	r5,r4,16
 4022e64:	30c6b03a 	or	r3,r6,r3
 4022e68:	10ffff15 	stw	r3,-4(r2)
 4022e6c:	a47fed2e 	bgeu	r20,r17,4022e24 <__alt_data_end+0xfffe2e24>
 4022e70:	9485883a 	add	r2,r18,r18
 4022e74:	1085883a 	add	r2,r2,r2
 4022e78:	a887883a 	add	r3,r21,r2
 4022e7c:	18800017 	ldw	r2,0(r3)
 4022e80:	10000b1e 	bne	r2,zero,4022eb0 <quorem+0x1c8>
 4022e84:	18bfff04 	addi	r2,r3,-4
 4022e88:	a880082e 	bgeu	r21,r2,4022eac <quorem+0x1c4>
 4022e8c:	18ffff17 	ldw	r3,-4(r3)
 4022e90:	18000326 	beq	r3,zero,4022ea0 <quorem+0x1b8>
 4022e94:	00000506 	br	4022eac <quorem+0x1c4>
 4022e98:	10c00017 	ldw	r3,0(r2)
 4022e9c:	1800031e 	bne	r3,zero,4022eac <quorem+0x1c4>
 4022ea0:	10bfff04 	addi	r2,r2,-4
 4022ea4:	94bfffc4 	addi	r18,r18,-1
 4022ea8:	a8bffb36 	bltu	r21,r2,4022e98 <__alt_data_end+0xfffe2e98>
 4022eac:	84800415 	stw	r18,16(r16)
 4022eb0:	9805883a 	mov	r2,r19
 4022eb4:	dfc00817 	ldw	ra,32(sp)
 4022eb8:	ddc00717 	ldw	r23,28(sp)
 4022ebc:	dd800617 	ldw	r22,24(sp)
 4022ec0:	dd400517 	ldw	r21,20(sp)
 4022ec4:	dd000417 	ldw	r20,16(sp)
 4022ec8:	dcc00317 	ldw	r19,12(sp)
 4022ecc:	dc800217 	ldw	r18,8(sp)
 4022ed0:	dc400117 	ldw	r17,4(sp)
 4022ed4:	dc000017 	ldw	r16,0(sp)
 4022ed8:	dec00904 	addi	sp,sp,36
 4022edc:	f800283a 	ret
 4022ee0:	0005883a 	mov	r2,zero
 4022ee4:	003ff306 	br	4022eb4 <__alt_data_end+0xfffe2eb4>

04022ee8 <_dtoa_r>:
 4022ee8:	20801017 	ldw	r2,64(r4)
 4022eec:	deffde04 	addi	sp,sp,-136
 4022ef0:	df002015 	stw	fp,128(sp)
 4022ef4:	dcc01b15 	stw	r19,108(sp)
 4022ef8:	dc801a15 	stw	r18,104(sp)
 4022efc:	dc401915 	stw	r17,100(sp)
 4022f00:	dc001815 	stw	r16,96(sp)
 4022f04:	dfc02115 	stw	ra,132(sp)
 4022f08:	ddc01f15 	stw	r23,124(sp)
 4022f0c:	dd801e15 	stw	r22,120(sp)
 4022f10:	dd401d15 	stw	r21,116(sp)
 4022f14:	dd001c15 	stw	r20,112(sp)
 4022f18:	d9c00315 	stw	r7,12(sp)
 4022f1c:	2039883a 	mov	fp,r4
 4022f20:	3023883a 	mov	r17,r6
 4022f24:	2825883a 	mov	r18,r5
 4022f28:	dc002417 	ldw	r16,144(sp)
 4022f2c:	3027883a 	mov	r19,r6
 4022f30:	10000826 	beq	r2,zero,4022f54 <_dtoa_r+0x6c>
 4022f34:	21801117 	ldw	r6,68(r4)
 4022f38:	00c00044 	movi	r3,1
 4022f3c:	100b883a 	mov	r5,r2
 4022f40:	1986983a 	sll	r3,r3,r6
 4022f44:	11800115 	stw	r6,4(r2)
 4022f48:	10c00215 	stw	r3,8(r2)
 4022f4c:	402662c0 	call	402662c <_Bfree>
 4022f50:	e0001015 	stw	zero,64(fp)
 4022f54:	88002e16 	blt	r17,zero,4023010 <_dtoa_r+0x128>
 4022f58:	80000015 	stw	zero,0(r16)
 4022f5c:	889ffc2c 	andhi	r2,r17,32752
 4022f60:	00dffc34 	movhi	r3,32752
 4022f64:	10c01c26 	beq	r2,r3,4022fd8 <_dtoa_r+0xf0>
 4022f68:	000d883a 	mov	r6,zero
 4022f6c:	000f883a 	mov	r7,zero
 4022f70:	9009883a 	mov	r4,r18
 4022f74:	980b883a 	mov	r5,r19
 4022f78:	402bb380 	call	402bb38 <__eqdf2>
 4022f7c:	10002b1e 	bne	r2,zero,402302c <_dtoa_r+0x144>
 4022f80:	d9c02317 	ldw	r7,140(sp)
 4022f84:	00800044 	movi	r2,1
 4022f88:	38800015 	stw	r2,0(r7)
 4022f8c:	d8802517 	ldw	r2,148(sp)
 4022f90:	10019e26 	beq	r2,zero,402360c <_dtoa_r+0x724>
 4022f94:	d8c02517 	ldw	r3,148(sp)
 4022f98:	008100f4 	movhi	r2,1027
 4022f9c:	1080be44 	addi	r2,r2,761
 4022fa0:	18800015 	stw	r2,0(r3)
 4022fa4:	10bfffc4 	addi	r2,r2,-1
 4022fa8:	dfc02117 	ldw	ra,132(sp)
 4022fac:	df002017 	ldw	fp,128(sp)
 4022fb0:	ddc01f17 	ldw	r23,124(sp)
 4022fb4:	dd801e17 	ldw	r22,120(sp)
 4022fb8:	dd401d17 	ldw	r21,116(sp)
 4022fbc:	dd001c17 	ldw	r20,112(sp)
 4022fc0:	dcc01b17 	ldw	r19,108(sp)
 4022fc4:	dc801a17 	ldw	r18,104(sp)
 4022fc8:	dc401917 	ldw	r17,100(sp)
 4022fcc:	dc001817 	ldw	r16,96(sp)
 4022fd0:	dec02204 	addi	sp,sp,136
 4022fd4:	f800283a 	ret
 4022fd8:	d8c02317 	ldw	r3,140(sp)
 4022fdc:	0089c3c4 	movi	r2,9999
 4022fe0:	18800015 	stw	r2,0(r3)
 4022fe4:	90017726 	beq	r18,zero,40235c4 <_dtoa_r+0x6dc>
 4022fe8:	008100f4 	movhi	r2,1027
 4022fec:	1080ca04 	addi	r2,r2,808
 4022ff0:	d9002517 	ldw	r4,148(sp)
 4022ff4:	203fec26 	beq	r4,zero,4022fa8 <__alt_data_end+0xfffe2fa8>
 4022ff8:	10c000c7 	ldb	r3,3(r2)
 4022ffc:	1801781e 	bne	r3,zero,40235e0 <_dtoa_r+0x6f8>
 4023000:	10c000c4 	addi	r3,r2,3
 4023004:	d9802517 	ldw	r6,148(sp)
 4023008:	30c00015 	stw	r3,0(r6)
 402300c:	003fe606 	br	4022fa8 <__alt_data_end+0xfffe2fa8>
 4023010:	04e00034 	movhi	r19,32768
 4023014:	9cffffc4 	addi	r19,r19,-1
 4023018:	00800044 	movi	r2,1
 402301c:	8ce6703a 	and	r19,r17,r19
 4023020:	80800015 	stw	r2,0(r16)
 4023024:	9823883a 	mov	r17,r19
 4023028:	003fcc06 	br	4022f5c <__alt_data_end+0xfffe2f5c>
 402302c:	d8800204 	addi	r2,sp,8
 4023030:	d8800015 	stw	r2,0(sp)
 4023034:	d9c00104 	addi	r7,sp,4
 4023038:	900b883a 	mov	r5,r18
 402303c:	980d883a 	mov	r6,r19
 4023040:	e009883a 	mov	r4,fp
 4023044:	8820d53a 	srli	r16,r17,20
 4023048:	40272180 	call	4027218 <__d2b>
 402304c:	d8800915 	stw	r2,36(sp)
 4023050:	8001651e 	bne	r16,zero,40235e8 <_dtoa_r+0x700>
 4023054:	dd800217 	ldw	r22,8(sp)
 4023058:	dc000117 	ldw	r16,4(sp)
 402305c:	00800804 	movi	r2,32
 4023060:	b421883a 	add	r16,r22,r16
 4023064:	80c10c84 	addi	r3,r16,1074
 4023068:	10c2d10e 	bge	r2,r3,4023bb0 <_dtoa_r+0xcc8>
 402306c:	00801004 	movi	r2,64
 4023070:	81010484 	addi	r4,r16,1042
 4023074:	10c7c83a 	sub	r3,r2,r3
 4023078:	9108d83a 	srl	r4,r18,r4
 402307c:	88e2983a 	sll	r17,r17,r3
 4023080:	2448b03a 	or	r4,r4,r17
 4023084:	402cf000 	call	402cf00 <__floatunsidf>
 4023088:	017f8434 	movhi	r5,65040
 402308c:	01800044 	movi	r6,1
 4023090:	1009883a 	mov	r4,r2
 4023094:	194b883a 	add	r5,r3,r5
 4023098:	843fffc4 	addi	r16,r16,-1
 402309c:	d9801115 	stw	r6,68(sp)
 40230a0:	000d883a 	mov	r6,zero
 40230a4:	01cffe34 	movhi	r7,16376
 40230a8:	402c4a80 	call	402c4a8 <__subdf3>
 40230ac:	0198dbf4 	movhi	r6,25455
 40230b0:	01cff4f4 	movhi	r7,16339
 40230b4:	3190d844 	addi	r6,r6,17249
 40230b8:	39e1e9c4 	addi	r7,r7,-30809
 40230bc:	1009883a 	mov	r4,r2
 40230c0:	180b883a 	mov	r5,r3
 40230c4:	402bd900 	call	402bd90 <__muldf3>
 40230c8:	01a2d874 	movhi	r6,35681
 40230cc:	01cff1f4 	movhi	r7,16327
 40230d0:	31b22cc4 	addi	r6,r6,-14157
 40230d4:	39e28a04 	addi	r7,r7,-30168
 40230d8:	180b883a 	mov	r5,r3
 40230dc:	1009883a 	mov	r4,r2
 40230e0:	402a9a40 	call	402a9a4 <__adddf3>
 40230e4:	8009883a 	mov	r4,r16
 40230e8:	1029883a 	mov	r20,r2
 40230ec:	1823883a 	mov	r17,r3
 40230f0:	402ce240 	call	402ce24 <__floatsidf>
 40230f4:	019427f4 	movhi	r6,20639
 40230f8:	01cff4f4 	movhi	r7,16339
 40230fc:	319e7ec4 	addi	r6,r6,31227
 4023100:	39d104c4 	addi	r7,r7,17427
 4023104:	1009883a 	mov	r4,r2
 4023108:	180b883a 	mov	r5,r3
 402310c:	402bd900 	call	402bd90 <__muldf3>
 4023110:	100d883a 	mov	r6,r2
 4023114:	180f883a 	mov	r7,r3
 4023118:	a009883a 	mov	r4,r20
 402311c:	880b883a 	mov	r5,r17
 4023120:	402a9a40 	call	402a9a4 <__adddf3>
 4023124:	1009883a 	mov	r4,r2
 4023128:	180b883a 	mov	r5,r3
 402312c:	1029883a 	mov	r20,r2
 4023130:	1823883a 	mov	r17,r3
 4023134:	402cda40 	call	402cda4 <__fixdfsi>
 4023138:	000d883a 	mov	r6,zero
 402313c:	000f883a 	mov	r7,zero
 4023140:	a009883a 	mov	r4,r20
 4023144:	880b883a 	mov	r5,r17
 4023148:	d8800515 	stw	r2,20(sp)
 402314c:	402bc9c0 	call	402bc9c <__ledf2>
 4023150:	10028716 	blt	r2,zero,4023b70 <_dtoa_r+0xc88>
 4023154:	d8c00517 	ldw	r3,20(sp)
 4023158:	00800584 	movi	r2,22
 402315c:	10c27536 	bltu	r2,r3,4023b34 <_dtoa_r+0xc4c>
 4023160:	180490fa 	slli	r2,r3,3
 4023164:	00c100f4 	movhi	r3,1027
 4023168:	18c0e604 	addi	r3,r3,920
 402316c:	1885883a 	add	r2,r3,r2
 4023170:	11000017 	ldw	r4,0(r2)
 4023174:	11400117 	ldw	r5,4(r2)
 4023178:	900d883a 	mov	r6,r18
 402317c:	980f883a 	mov	r7,r19
 4023180:	402bbc00 	call	402bbc0 <__gedf2>
 4023184:	00828d0e 	bge	zero,r2,4023bbc <_dtoa_r+0xcd4>
 4023188:	d9000517 	ldw	r4,20(sp)
 402318c:	d8000e15 	stw	zero,56(sp)
 4023190:	213fffc4 	addi	r4,r4,-1
 4023194:	d9000515 	stw	r4,20(sp)
 4023198:	b42dc83a 	sub	r22,r22,r16
 402319c:	b5bfffc4 	addi	r22,r22,-1
 40231a0:	b0026f16 	blt	r22,zero,4023b60 <_dtoa_r+0xc78>
 40231a4:	d8000815 	stw	zero,32(sp)
 40231a8:	d9c00517 	ldw	r7,20(sp)
 40231ac:	38026416 	blt	r7,zero,4023b40 <_dtoa_r+0xc58>
 40231b0:	b1ed883a 	add	r22,r22,r7
 40231b4:	d9c00d15 	stw	r7,52(sp)
 40231b8:	d8000a15 	stw	zero,40(sp)
 40231bc:	d9800317 	ldw	r6,12(sp)
 40231c0:	00800244 	movi	r2,9
 40231c4:	11811436 	bltu	r2,r6,4023618 <_dtoa_r+0x730>
 40231c8:	00800144 	movi	r2,5
 40231cc:	1184e10e 	bge	r2,r6,4024554 <_dtoa_r+0x166c>
 40231d0:	31bfff04 	addi	r6,r6,-4
 40231d4:	d9800315 	stw	r6,12(sp)
 40231d8:	0023883a 	mov	r17,zero
 40231dc:	d9800317 	ldw	r6,12(sp)
 40231e0:	008000c4 	movi	r2,3
 40231e4:	30836726 	beq	r6,r2,4023f84 <_dtoa_r+0x109c>
 40231e8:	1183410e 	bge	r2,r6,4023ef0 <_dtoa_r+0x1008>
 40231ec:	d9c00317 	ldw	r7,12(sp)
 40231f0:	00800104 	movi	r2,4
 40231f4:	38827c26 	beq	r7,r2,4023be8 <_dtoa_r+0xd00>
 40231f8:	00800144 	movi	r2,5
 40231fc:	3884c41e 	bne	r7,r2,4024510 <_dtoa_r+0x1628>
 4023200:	00800044 	movi	r2,1
 4023204:	d8800b15 	stw	r2,44(sp)
 4023208:	d8c00517 	ldw	r3,20(sp)
 402320c:	d9002217 	ldw	r4,136(sp)
 4023210:	1907883a 	add	r3,r3,r4
 4023214:	19800044 	addi	r6,r3,1
 4023218:	d8c00c15 	stw	r3,48(sp)
 402321c:	d9800615 	stw	r6,24(sp)
 4023220:	0183a40e 	bge	zero,r6,40240b4 <_dtoa_r+0x11cc>
 4023224:	d9800617 	ldw	r6,24(sp)
 4023228:	3021883a 	mov	r16,r6
 402322c:	e0001115 	stw	zero,68(fp)
 4023230:	008005c4 	movi	r2,23
 4023234:	1184c92e 	bgeu	r2,r6,402455c <_dtoa_r+0x1674>
 4023238:	00c00044 	movi	r3,1
 402323c:	00800104 	movi	r2,4
 4023240:	1085883a 	add	r2,r2,r2
 4023244:	11000504 	addi	r4,r2,20
 4023248:	180b883a 	mov	r5,r3
 402324c:	18c00044 	addi	r3,r3,1
 4023250:	313ffb2e 	bgeu	r6,r4,4023240 <__alt_data_end+0xfffe3240>
 4023254:	e1401115 	stw	r5,68(fp)
 4023258:	e009883a 	mov	r4,fp
 402325c:	40265840 	call	4026584 <_Balloc>
 4023260:	d8800715 	stw	r2,28(sp)
 4023264:	e0801015 	stw	r2,64(fp)
 4023268:	00800384 	movi	r2,14
 402326c:	1400f736 	bltu	r2,r16,402364c <_dtoa_r+0x764>
 4023270:	8800f626 	beq	r17,zero,402364c <_dtoa_r+0x764>
 4023274:	d9c00517 	ldw	r7,20(sp)
 4023278:	01c39a0e 	bge	zero,r7,40240e4 <_dtoa_r+0x11fc>
 402327c:	388003cc 	andi	r2,r7,15
 4023280:	100490fa 	slli	r2,r2,3
 4023284:	382bd13a 	srai	r21,r7,4
 4023288:	00c100f4 	movhi	r3,1027
 402328c:	18c0e604 	addi	r3,r3,920
 4023290:	1885883a 	add	r2,r3,r2
 4023294:	a8c0040c 	andi	r3,r21,16
 4023298:	12400017 	ldw	r9,0(r2)
 402329c:	12000117 	ldw	r8,4(r2)
 40232a0:	18037926 	beq	r3,zero,4024088 <_dtoa_r+0x11a0>
 40232a4:	008100f4 	movhi	r2,1027
 40232a8:	1080dc04 	addi	r2,r2,880
 40232ac:	11800817 	ldw	r6,32(r2)
 40232b0:	11c00917 	ldw	r7,36(r2)
 40232b4:	9009883a 	mov	r4,r18
 40232b8:	980b883a 	mov	r5,r19
 40232bc:	da001715 	stw	r8,92(sp)
 40232c0:	da401615 	stw	r9,88(sp)
 40232c4:	402b2500 	call	402b250 <__divdf3>
 40232c8:	da001717 	ldw	r8,92(sp)
 40232cc:	da401617 	ldw	r9,88(sp)
 40232d0:	ad4003cc 	andi	r21,r21,15
 40232d4:	040000c4 	movi	r16,3
 40232d8:	1023883a 	mov	r17,r2
 40232dc:	1829883a 	mov	r20,r3
 40232e0:	a8001126 	beq	r21,zero,4023328 <_dtoa_r+0x440>
 40232e4:	05c100f4 	movhi	r23,1027
 40232e8:	bdc0dc04 	addi	r23,r23,880
 40232ec:	4805883a 	mov	r2,r9
 40232f0:	4007883a 	mov	r3,r8
 40232f4:	a980004c 	andi	r6,r21,1
 40232f8:	1009883a 	mov	r4,r2
 40232fc:	a82bd07a 	srai	r21,r21,1
 4023300:	180b883a 	mov	r5,r3
 4023304:	30000426 	beq	r6,zero,4023318 <_dtoa_r+0x430>
 4023308:	b9800017 	ldw	r6,0(r23)
 402330c:	b9c00117 	ldw	r7,4(r23)
 4023310:	84000044 	addi	r16,r16,1
 4023314:	402bd900 	call	402bd90 <__muldf3>
 4023318:	bdc00204 	addi	r23,r23,8
 402331c:	a83ff51e 	bne	r21,zero,40232f4 <__alt_data_end+0xfffe32f4>
 4023320:	1013883a 	mov	r9,r2
 4023324:	1811883a 	mov	r8,r3
 4023328:	480d883a 	mov	r6,r9
 402332c:	400f883a 	mov	r7,r8
 4023330:	8809883a 	mov	r4,r17
 4023334:	a00b883a 	mov	r5,r20
 4023338:	402b2500 	call	402b250 <__divdf3>
 402333c:	d8800f15 	stw	r2,60(sp)
 4023340:	d8c01015 	stw	r3,64(sp)
 4023344:	d8c00e17 	ldw	r3,56(sp)
 4023348:	18000626 	beq	r3,zero,4023364 <_dtoa_r+0x47c>
 402334c:	d9000f17 	ldw	r4,60(sp)
 4023350:	d9401017 	ldw	r5,64(sp)
 4023354:	000d883a 	mov	r6,zero
 4023358:	01cffc34 	movhi	r7,16368
 402335c:	402bc9c0 	call	402bc9c <__ledf2>
 4023360:	10040b16 	blt	r2,zero,4024390 <_dtoa_r+0x14a8>
 4023364:	8009883a 	mov	r4,r16
 4023368:	402ce240 	call	402ce24 <__floatsidf>
 402336c:	d9800f17 	ldw	r6,60(sp)
 4023370:	d9c01017 	ldw	r7,64(sp)
 4023374:	1009883a 	mov	r4,r2
 4023378:	180b883a 	mov	r5,r3
 402337c:	402bd900 	call	402bd90 <__muldf3>
 4023380:	000d883a 	mov	r6,zero
 4023384:	01d00734 	movhi	r7,16412
 4023388:	1009883a 	mov	r4,r2
 402338c:	180b883a 	mov	r5,r3
 4023390:	402a9a40 	call	402a9a4 <__adddf3>
 4023394:	1021883a 	mov	r16,r2
 4023398:	d8800617 	ldw	r2,24(sp)
 402339c:	047f3034 	movhi	r17,64704
 40233a0:	1c63883a 	add	r17,r3,r17
 40233a4:	10031826 	beq	r2,zero,4024008 <_dtoa_r+0x1120>
 40233a8:	d8c00517 	ldw	r3,20(sp)
 40233ac:	db000617 	ldw	r12,24(sp)
 40233b0:	d8c01315 	stw	r3,76(sp)
 40233b4:	d9000b17 	ldw	r4,44(sp)
 40233b8:	20038f26 	beq	r4,zero,40241f8 <_dtoa_r+0x1310>
 40233bc:	60bfffc4 	addi	r2,r12,-1
 40233c0:	100490fa 	slli	r2,r2,3
 40233c4:	00c100f4 	movhi	r3,1027
 40233c8:	18c0e604 	addi	r3,r3,920
 40233cc:	1885883a 	add	r2,r3,r2
 40233d0:	11800017 	ldw	r6,0(r2)
 40233d4:	11c00117 	ldw	r7,4(r2)
 40233d8:	d8800717 	ldw	r2,28(sp)
 40233dc:	0009883a 	mov	r4,zero
 40233e0:	014ff834 	movhi	r5,16352
 40233e4:	db001615 	stw	r12,88(sp)
 40233e8:	15c00044 	addi	r23,r2,1
 40233ec:	402b2500 	call	402b250 <__divdf3>
 40233f0:	800d883a 	mov	r6,r16
 40233f4:	880f883a 	mov	r7,r17
 40233f8:	1009883a 	mov	r4,r2
 40233fc:	180b883a 	mov	r5,r3
 4023400:	402c4a80 	call	402c4a8 <__subdf3>
 4023404:	d9401017 	ldw	r5,64(sp)
 4023408:	d9000f17 	ldw	r4,60(sp)
 402340c:	102b883a 	mov	r21,r2
 4023410:	d8c01215 	stw	r3,72(sp)
 4023414:	402cda40 	call	402cda4 <__fixdfsi>
 4023418:	1009883a 	mov	r4,r2
 402341c:	1029883a 	mov	r20,r2
 4023420:	402ce240 	call	402ce24 <__floatsidf>
 4023424:	d9000f17 	ldw	r4,60(sp)
 4023428:	d9401017 	ldw	r5,64(sp)
 402342c:	100d883a 	mov	r6,r2
 4023430:	180f883a 	mov	r7,r3
 4023434:	402c4a80 	call	402c4a8 <__subdf3>
 4023438:	1823883a 	mov	r17,r3
 402343c:	d8c00717 	ldw	r3,28(sp)
 4023440:	d9401217 	ldw	r5,72(sp)
 4023444:	a2000c04 	addi	r8,r20,48
 4023448:	1021883a 	mov	r16,r2
 402344c:	1a000005 	stb	r8,0(r3)
 4023450:	800d883a 	mov	r6,r16
 4023454:	880f883a 	mov	r7,r17
 4023458:	a809883a 	mov	r4,r21
 402345c:	4029883a 	mov	r20,r8
 4023460:	402bbc00 	call	402bbc0 <__gedf2>
 4023464:	00841d16 	blt	zero,r2,40244dc <_dtoa_r+0x15f4>
 4023468:	800d883a 	mov	r6,r16
 402346c:	880f883a 	mov	r7,r17
 4023470:	0009883a 	mov	r4,zero
 4023474:	014ffc34 	movhi	r5,16368
 4023478:	402c4a80 	call	402c4a8 <__subdf3>
 402347c:	d9401217 	ldw	r5,72(sp)
 4023480:	100d883a 	mov	r6,r2
 4023484:	180f883a 	mov	r7,r3
 4023488:	a809883a 	mov	r4,r21
 402348c:	402bbc00 	call	402bbc0 <__gedf2>
 4023490:	db001617 	ldw	r12,88(sp)
 4023494:	00840e16 	blt	zero,r2,40244d0 <_dtoa_r+0x15e8>
 4023498:	00800044 	movi	r2,1
 402349c:	13006b0e 	bge	r2,r12,402364c <_dtoa_r+0x764>
 40234a0:	d9000717 	ldw	r4,28(sp)
 40234a4:	dd800f15 	stw	r22,60(sp)
 40234a8:	dcc01015 	stw	r19,64(sp)
 40234ac:	2319883a 	add	r12,r4,r12
 40234b0:	dcc01217 	ldw	r19,72(sp)
 40234b4:	602d883a 	mov	r22,r12
 40234b8:	dc801215 	stw	r18,72(sp)
 40234bc:	b825883a 	mov	r18,r23
 40234c0:	00000906 	br	40234e8 <_dtoa_r+0x600>
 40234c4:	402c4a80 	call	402c4a8 <__subdf3>
 40234c8:	a80d883a 	mov	r6,r21
 40234cc:	980f883a 	mov	r7,r19
 40234d0:	1009883a 	mov	r4,r2
 40234d4:	180b883a 	mov	r5,r3
 40234d8:	402bc9c0 	call	402bc9c <__ledf2>
 40234dc:	1003e816 	blt	r2,zero,4024480 <_dtoa_r+0x1598>
 40234e0:	b825883a 	mov	r18,r23
 40234e4:	bd83e926 	beq	r23,r22,402448c <_dtoa_r+0x15a4>
 40234e8:	a809883a 	mov	r4,r21
 40234ec:	980b883a 	mov	r5,r19
 40234f0:	000d883a 	mov	r6,zero
 40234f4:	01d00934 	movhi	r7,16420
 40234f8:	402bd900 	call	402bd90 <__muldf3>
 40234fc:	000d883a 	mov	r6,zero
 4023500:	01d00934 	movhi	r7,16420
 4023504:	8009883a 	mov	r4,r16
 4023508:	880b883a 	mov	r5,r17
 402350c:	102b883a 	mov	r21,r2
 4023510:	1827883a 	mov	r19,r3
 4023514:	402bd900 	call	402bd90 <__muldf3>
 4023518:	180b883a 	mov	r5,r3
 402351c:	1009883a 	mov	r4,r2
 4023520:	1821883a 	mov	r16,r3
 4023524:	1023883a 	mov	r17,r2
 4023528:	402cda40 	call	402cda4 <__fixdfsi>
 402352c:	1009883a 	mov	r4,r2
 4023530:	1029883a 	mov	r20,r2
 4023534:	402ce240 	call	402ce24 <__floatsidf>
 4023538:	8809883a 	mov	r4,r17
 402353c:	800b883a 	mov	r5,r16
 4023540:	100d883a 	mov	r6,r2
 4023544:	180f883a 	mov	r7,r3
 4023548:	402c4a80 	call	402c4a8 <__subdf3>
 402354c:	a5000c04 	addi	r20,r20,48
 4023550:	a80d883a 	mov	r6,r21
 4023554:	980f883a 	mov	r7,r19
 4023558:	1009883a 	mov	r4,r2
 402355c:	180b883a 	mov	r5,r3
 4023560:	95000005 	stb	r20,0(r18)
 4023564:	1021883a 	mov	r16,r2
 4023568:	1823883a 	mov	r17,r3
 402356c:	402bc9c0 	call	402bc9c <__ledf2>
 4023570:	bdc00044 	addi	r23,r23,1
 4023574:	800d883a 	mov	r6,r16
 4023578:	880f883a 	mov	r7,r17
 402357c:	0009883a 	mov	r4,zero
 4023580:	014ffc34 	movhi	r5,16368
 4023584:	103fcf0e 	bge	r2,zero,40234c4 <__alt_data_end+0xfffe34c4>
 4023588:	d8c01317 	ldw	r3,76(sp)
 402358c:	d8c00515 	stw	r3,20(sp)
 4023590:	d9400917 	ldw	r5,36(sp)
 4023594:	e009883a 	mov	r4,fp
 4023598:	402662c0 	call	402662c <_Bfree>
 402359c:	d9000517 	ldw	r4,20(sp)
 40235a0:	d9802317 	ldw	r6,140(sp)
 40235a4:	d9c02517 	ldw	r7,148(sp)
 40235a8:	b8000005 	stb	zero,0(r23)
 40235ac:	20800044 	addi	r2,r4,1
 40235b0:	30800015 	stw	r2,0(r6)
 40235b4:	3802aa26 	beq	r7,zero,4024060 <_dtoa_r+0x1178>
 40235b8:	3dc00015 	stw	r23,0(r7)
 40235bc:	d8800717 	ldw	r2,28(sp)
 40235c0:	003e7906 	br	4022fa8 <__alt_data_end+0xfffe2fa8>
 40235c4:	00800434 	movhi	r2,16
 40235c8:	10bfffc4 	addi	r2,r2,-1
 40235cc:	88a2703a 	and	r17,r17,r2
 40235d0:	883e851e 	bne	r17,zero,4022fe8 <__alt_data_end+0xfffe2fe8>
 40235d4:	008100f4 	movhi	r2,1027
 40235d8:	1080c704 	addi	r2,r2,796
 40235dc:	003e8406 	br	4022ff0 <__alt_data_end+0xfffe2ff0>
 40235e0:	10c00204 	addi	r3,r2,8
 40235e4:	003e8706 	br	4023004 <__alt_data_end+0xfffe3004>
 40235e8:	01400434 	movhi	r5,16
 40235ec:	297fffc4 	addi	r5,r5,-1
 40235f0:	994a703a 	and	r5,r19,r5
 40235f4:	9009883a 	mov	r4,r18
 40235f8:	843f0044 	addi	r16,r16,-1023
 40235fc:	294ffc34 	orhi	r5,r5,16368
 4023600:	dd800217 	ldw	r22,8(sp)
 4023604:	d8001115 	stw	zero,68(sp)
 4023608:	003ea506 	br	40230a0 <__alt_data_end+0xfffe30a0>
 402360c:	008100f4 	movhi	r2,1027
 4023610:	1080be04 	addi	r2,r2,760
 4023614:	003e6406 	br	4022fa8 <__alt_data_end+0xfffe2fa8>
 4023618:	e0001115 	stw	zero,68(fp)
 402361c:	000b883a 	mov	r5,zero
 4023620:	e009883a 	mov	r4,fp
 4023624:	40265840 	call	4026584 <_Balloc>
 4023628:	01bfffc4 	movi	r6,-1
 402362c:	01c00044 	movi	r7,1
 4023630:	d8800715 	stw	r2,28(sp)
 4023634:	d9800c15 	stw	r6,48(sp)
 4023638:	e0801015 	stw	r2,64(fp)
 402363c:	d8000315 	stw	zero,12(sp)
 4023640:	d9c00b15 	stw	r7,44(sp)
 4023644:	d9800615 	stw	r6,24(sp)
 4023648:	d8002215 	stw	zero,136(sp)
 402364c:	d8800117 	ldw	r2,4(sp)
 4023650:	10008916 	blt	r2,zero,4023878 <_dtoa_r+0x990>
 4023654:	d9000517 	ldw	r4,20(sp)
 4023658:	00c00384 	movi	r3,14
 402365c:	19008616 	blt	r3,r4,4023878 <_dtoa_r+0x990>
 4023660:	200490fa 	slli	r2,r4,3
 4023664:	00c100f4 	movhi	r3,1027
 4023668:	d9802217 	ldw	r6,136(sp)
 402366c:	18c0e604 	addi	r3,r3,920
 4023670:	1885883a 	add	r2,r3,r2
 4023674:	14000017 	ldw	r16,0(r2)
 4023678:	14400117 	ldw	r17,4(r2)
 402367c:	30016316 	blt	r6,zero,4023c0c <_dtoa_r+0xd24>
 4023680:	800d883a 	mov	r6,r16
 4023684:	880f883a 	mov	r7,r17
 4023688:	9009883a 	mov	r4,r18
 402368c:	980b883a 	mov	r5,r19
 4023690:	402b2500 	call	402b250 <__divdf3>
 4023694:	180b883a 	mov	r5,r3
 4023698:	1009883a 	mov	r4,r2
 402369c:	402cda40 	call	402cda4 <__fixdfsi>
 40236a0:	1009883a 	mov	r4,r2
 40236a4:	102b883a 	mov	r21,r2
 40236a8:	402ce240 	call	402ce24 <__floatsidf>
 40236ac:	800d883a 	mov	r6,r16
 40236b0:	880f883a 	mov	r7,r17
 40236b4:	1009883a 	mov	r4,r2
 40236b8:	180b883a 	mov	r5,r3
 40236bc:	402bd900 	call	402bd90 <__muldf3>
 40236c0:	100d883a 	mov	r6,r2
 40236c4:	180f883a 	mov	r7,r3
 40236c8:	9009883a 	mov	r4,r18
 40236cc:	980b883a 	mov	r5,r19
 40236d0:	402c4a80 	call	402c4a8 <__subdf3>
 40236d4:	d9c00717 	ldw	r7,28(sp)
 40236d8:	1009883a 	mov	r4,r2
 40236dc:	a8800c04 	addi	r2,r21,48
 40236e0:	38800005 	stb	r2,0(r7)
 40236e4:	3dc00044 	addi	r23,r7,1
 40236e8:	d9c00617 	ldw	r7,24(sp)
 40236ec:	01800044 	movi	r6,1
 40236f0:	180b883a 	mov	r5,r3
 40236f4:	2005883a 	mov	r2,r4
 40236f8:	39803826 	beq	r7,r6,40237dc <_dtoa_r+0x8f4>
 40236fc:	000d883a 	mov	r6,zero
 4023700:	01d00934 	movhi	r7,16420
 4023704:	402bd900 	call	402bd90 <__muldf3>
 4023708:	000d883a 	mov	r6,zero
 402370c:	000f883a 	mov	r7,zero
 4023710:	1009883a 	mov	r4,r2
 4023714:	180b883a 	mov	r5,r3
 4023718:	1025883a 	mov	r18,r2
 402371c:	1827883a 	mov	r19,r3
 4023720:	402bb380 	call	402bb38 <__eqdf2>
 4023724:	103f9a26 	beq	r2,zero,4023590 <__alt_data_end+0xfffe3590>
 4023728:	d9c00617 	ldw	r7,24(sp)
 402372c:	d8c00717 	ldw	r3,28(sp)
 4023730:	b829883a 	mov	r20,r23
 4023734:	38bfffc4 	addi	r2,r7,-1
 4023738:	18ad883a 	add	r22,r3,r2
 402373c:	00000a06 	br	4023768 <_dtoa_r+0x880>
 4023740:	402bd900 	call	402bd90 <__muldf3>
 4023744:	000d883a 	mov	r6,zero
 4023748:	000f883a 	mov	r7,zero
 402374c:	1009883a 	mov	r4,r2
 4023750:	180b883a 	mov	r5,r3
 4023754:	1025883a 	mov	r18,r2
 4023758:	1827883a 	mov	r19,r3
 402375c:	b829883a 	mov	r20,r23
 4023760:	402bb380 	call	402bb38 <__eqdf2>
 4023764:	103f8a26 	beq	r2,zero,4023590 <__alt_data_end+0xfffe3590>
 4023768:	800d883a 	mov	r6,r16
 402376c:	880f883a 	mov	r7,r17
 4023770:	9009883a 	mov	r4,r18
 4023774:	980b883a 	mov	r5,r19
 4023778:	402b2500 	call	402b250 <__divdf3>
 402377c:	180b883a 	mov	r5,r3
 4023780:	1009883a 	mov	r4,r2
 4023784:	402cda40 	call	402cda4 <__fixdfsi>
 4023788:	1009883a 	mov	r4,r2
 402378c:	102b883a 	mov	r21,r2
 4023790:	402ce240 	call	402ce24 <__floatsidf>
 4023794:	800d883a 	mov	r6,r16
 4023798:	880f883a 	mov	r7,r17
 402379c:	1009883a 	mov	r4,r2
 40237a0:	180b883a 	mov	r5,r3
 40237a4:	402bd900 	call	402bd90 <__muldf3>
 40237a8:	100d883a 	mov	r6,r2
 40237ac:	180f883a 	mov	r7,r3
 40237b0:	9009883a 	mov	r4,r18
 40237b4:	980b883a 	mov	r5,r19
 40237b8:	402c4a80 	call	402c4a8 <__subdf3>
 40237bc:	aa000c04 	addi	r8,r21,48
 40237c0:	a2000005 	stb	r8,0(r20)
 40237c4:	000d883a 	mov	r6,zero
 40237c8:	01d00934 	movhi	r7,16420
 40237cc:	1009883a 	mov	r4,r2
 40237d0:	180b883a 	mov	r5,r3
 40237d4:	a5c00044 	addi	r23,r20,1
 40237d8:	b53fd91e 	bne	r22,r20,4023740 <__alt_data_end+0xfffe3740>
 40237dc:	100d883a 	mov	r6,r2
 40237e0:	180f883a 	mov	r7,r3
 40237e4:	1009883a 	mov	r4,r2
 40237e8:	180b883a 	mov	r5,r3
 40237ec:	402a9a40 	call	402a9a4 <__adddf3>
 40237f0:	100d883a 	mov	r6,r2
 40237f4:	180f883a 	mov	r7,r3
 40237f8:	8009883a 	mov	r4,r16
 40237fc:	880b883a 	mov	r5,r17
 4023800:	1027883a 	mov	r19,r2
 4023804:	1825883a 	mov	r18,r3
 4023808:	402bc9c0 	call	402bc9c <__ledf2>
 402380c:	10000816 	blt	r2,zero,4023830 <_dtoa_r+0x948>
 4023810:	980d883a 	mov	r6,r19
 4023814:	900f883a 	mov	r7,r18
 4023818:	8009883a 	mov	r4,r16
 402381c:	880b883a 	mov	r5,r17
 4023820:	402bb380 	call	402bb38 <__eqdf2>
 4023824:	103f5a1e 	bne	r2,zero,4023590 <__alt_data_end+0xfffe3590>
 4023828:	ad40004c 	andi	r21,r21,1
 402382c:	a83f5826 	beq	r21,zero,4023590 <__alt_data_end+0xfffe3590>
 4023830:	bd3fffc3 	ldbu	r20,-1(r23)
 4023834:	b8bfffc4 	addi	r2,r23,-1
 4023838:	1007883a 	mov	r3,r2
 402383c:	01400e44 	movi	r5,57
 4023840:	d9800717 	ldw	r6,28(sp)
 4023844:	00000506 	br	402385c <_dtoa_r+0x974>
 4023848:	18ffffc4 	addi	r3,r3,-1
 402384c:	11824726 	beq	r2,r6,402416c <_dtoa_r+0x1284>
 4023850:	1d000003 	ldbu	r20,0(r3)
 4023854:	102f883a 	mov	r23,r2
 4023858:	10bfffc4 	addi	r2,r2,-1
 402385c:	a1003fcc 	andi	r4,r20,255
 4023860:	2100201c 	xori	r4,r4,128
 4023864:	213fe004 	addi	r4,r4,-128
 4023868:	217ff726 	beq	r4,r5,4023848 <__alt_data_end+0xfffe3848>
 402386c:	a2000044 	addi	r8,r20,1
 4023870:	12000005 	stb	r8,0(r2)
 4023874:	003f4606 	br	4023590 <__alt_data_end+0xfffe3590>
 4023878:	d9000b17 	ldw	r4,44(sp)
 402387c:	2000c826 	beq	r4,zero,4023ba0 <_dtoa_r+0xcb8>
 4023880:	d9800317 	ldw	r6,12(sp)
 4023884:	00c00044 	movi	r3,1
 4023888:	1980f90e 	bge	r3,r6,4023c70 <_dtoa_r+0xd88>
 402388c:	d8800617 	ldw	r2,24(sp)
 4023890:	d8c00a17 	ldw	r3,40(sp)
 4023894:	157fffc4 	addi	r21,r2,-1
 4023898:	1d41f316 	blt	r3,r21,4024068 <_dtoa_r+0x1180>
 402389c:	1d6bc83a 	sub	r21,r3,r21
 40238a0:	d9c00617 	ldw	r7,24(sp)
 40238a4:	3802aa16 	blt	r7,zero,4024350 <_dtoa_r+0x1468>
 40238a8:	dd000817 	ldw	r20,32(sp)
 40238ac:	d8800617 	ldw	r2,24(sp)
 40238b0:	d8c00817 	ldw	r3,32(sp)
 40238b4:	01400044 	movi	r5,1
 40238b8:	e009883a 	mov	r4,fp
 40238bc:	1887883a 	add	r3,r3,r2
 40238c0:	d8c00815 	stw	r3,32(sp)
 40238c4:	b0ad883a 	add	r22,r22,r2
 40238c8:	40269900 	call	4026990 <__i2b>
 40238cc:	1023883a 	mov	r17,r2
 40238d0:	a0000826 	beq	r20,zero,40238f4 <_dtoa_r+0xa0c>
 40238d4:	0580070e 	bge	zero,r22,40238f4 <_dtoa_r+0xa0c>
 40238d8:	a005883a 	mov	r2,r20
 40238dc:	b500b916 	blt	r22,r20,4023bc4 <_dtoa_r+0xcdc>
 40238e0:	d9000817 	ldw	r4,32(sp)
 40238e4:	a0a9c83a 	sub	r20,r20,r2
 40238e8:	b0adc83a 	sub	r22,r22,r2
 40238ec:	2089c83a 	sub	r4,r4,r2
 40238f0:	d9000815 	stw	r4,32(sp)
 40238f4:	d9800a17 	ldw	r6,40(sp)
 40238f8:	0181810e 	bge	zero,r6,4023f00 <_dtoa_r+0x1018>
 40238fc:	d9c00b17 	ldw	r7,44(sp)
 4023900:	3800b326 	beq	r7,zero,4023bd0 <_dtoa_r+0xce8>
 4023904:	a800b226 	beq	r21,zero,4023bd0 <_dtoa_r+0xce8>
 4023908:	880b883a 	mov	r5,r17
 402390c:	a80d883a 	mov	r6,r21
 4023910:	e009883a 	mov	r4,fp
 4023914:	4026bc40 	call	4026bc4 <__pow5mult>
 4023918:	d9800917 	ldw	r6,36(sp)
 402391c:	100b883a 	mov	r5,r2
 4023920:	e009883a 	mov	r4,fp
 4023924:	1023883a 	mov	r17,r2
 4023928:	40269cc0 	call	40269cc <__multiply>
 402392c:	1021883a 	mov	r16,r2
 4023930:	d8800a17 	ldw	r2,40(sp)
 4023934:	d9400917 	ldw	r5,36(sp)
 4023938:	e009883a 	mov	r4,fp
 402393c:	1545c83a 	sub	r2,r2,r21
 4023940:	d8800a15 	stw	r2,40(sp)
 4023944:	402662c0 	call	402662c <_Bfree>
 4023948:	d8c00a17 	ldw	r3,40(sp)
 402394c:	18009f1e 	bne	r3,zero,4023bcc <_dtoa_r+0xce4>
 4023950:	05c00044 	movi	r23,1
 4023954:	e009883a 	mov	r4,fp
 4023958:	b80b883a 	mov	r5,r23
 402395c:	40269900 	call	4026990 <__i2b>
 4023960:	d9000d17 	ldw	r4,52(sp)
 4023964:	102b883a 	mov	r21,r2
 4023968:	2000ce26 	beq	r4,zero,4023ca4 <_dtoa_r+0xdbc>
 402396c:	200d883a 	mov	r6,r4
 4023970:	100b883a 	mov	r5,r2
 4023974:	e009883a 	mov	r4,fp
 4023978:	4026bc40 	call	4026bc4 <__pow5mult>
 402397c:	d9800317 	ldw	r6,12(sp)
 4023980:	102b883a 	mov	r21,r2
 4023984:	b981810e 	bge	r23,r6,4023f8c <_dtoa_r+0x10a4>
 4023988:	0027883a 	mov	r19,zero
 402398c:	a8800417 	ldw	r2,16(r21)
 4023990:	05c00804 	movi	r23,32
 4023994:	10800104 	addi	r2,r2,4
 4023998:	1085883a 	add	r2,r2,r2
 402399c:	1085883a 	add	r2,r2,r2
 40239a0:	a885883a 	add	r2,r21,r2
 40239a4:	11000017 	ldw	r4,0(r2)
 40239a8:	40268780 	call	4026878 <__hi0bits>
 40239ac:	b885c83a 	sub	r2,r23,r2
 40239b0:	1585883a 	add	r2,r2,r22
 40239b4:	108007cc 	andi	r2,r2,31
 40239b8:	1000b326 	beq	r2,zero,4023c88 <_dtoa_r+0xda0>
 40239bc:	00c00804 	movi	r3,32
 40239c0:	1887c83a 	sub	r3,r3,r2
 40239c4:	01000104 	movi	r4,4
 40239c8:	20c2cd0e 	bge	r4,r3,4024500 <_dtoa_r+0x1618>
 40239cc:	00c00704 	movi	r3,28
 40239d0:	1885c83a 	sub	r2,r3,r2
 40239d4:	d8c00817 	ldw	r3,32(sp)
 40239d8:	a0a9883a 	add	r20,r20,r2
 40239dc:	b0ad883a 	add	r22,r22,r2
 40239e0:	1887883a 	add	r3,r3,r2
 40239e4:	d8c00815 	stw	r3,32(sp)
 40239e8:	d9800817 	ldw	r6,32(sp)
 40239ec:	0180040e 	bge	zero,r6,4023a00 <_dtoa_r+0xb18>
 40239f0:	800b883a 	mov	r5,r16
 40239f4:	e009883a 	mov	r4,fp
 40239f8:	4026d040 	call	4026d04 <__lshift>
 40239fc:	1021883a 	mov	r16,r2
 4023a00:	0580050e 	bge	zero,r22,4023a18 <_dtoa_r+0xb30>
 4023a04:	a80b883a 	mov	r5,r21
 4023a08:	b00d883a 	mov	r6,r22
 4023a0c:	e009883a 	mov	r4,fp
 4023a10:	4026d040 	call	4026d04 <__lshift>
 4023a14:	102b883a 	mov	r21,r2
 4023a18:	d9c00e17 	ldw	r7,56(sp)
 4023a1c:	3801211e 	bne	r7,zero,4023ea4 <_dtoa_r+0xfbc>
 4023a20:	d9800617 	ldw	r6,24(sp)
 4023a24:	0181380e 	bge	zero,r6,4023f08 <_dtoa_r+0x1020>
 4023a28:	d8c00b17 	ldw	r3,44(sp)
 4023a2c:	1800ab1e 	bne	r3,zero,4023cdc <_dtoa_r+0xdf4>
 4023a30:	dc800717 	ldw	r18,28(sp)
 4023a34:	dcc00617 	ldw	r19,24(sp)
 4023a38:	9029883a 	mov	r20,r18
 4023a3c:	00000206 	br	4023a48 <_dtoa_r+0xb60>
 4023a40:	40266540 	call	4026654 <__multadd>
 4023a44:	1021883a 	mov	r16,r2
 4023a48:	a80b883a 	mov	r5,r21
 4023a4c:	8009883a 	mov	r4,r16
 4023a50:	4022ce80 	call	4022ce8 <quorem>
 4023a54:	10800c04 	addi	r2,r2,48
 4023a58:	90800005 	stb	r2,0(r18)
 4023a5c:	94800044 	addi	r18,r18,1
 4023a60:	9507c83a 	sub	r3,r18,r20
 4023a64:	000f883a 	mov	r7,zero
 4023a68:	01800284 	movi	r6,10
 4023a6c:	800b883a 	mov	r5,r16
 4023a70:	e009883a 	mov	r4,fp
 4023a74:	1cfff216 	blt	r3,r19,4023a40 <__alt_data_end+0xfffe3a40>
 4023a78:	1011883a 	mov	r8,r2
 4023a7c:	d8800617 	ldw	r2,24(sp)
 4023a80:	0082370e 	bge	zero,r2,4024360 <_dtoa_r+0x1478>
 4023a84:	d9000717 	ldw	r4,28(sp)
 4023a88:	0025883a 	mov	r18,zero
 4023a8c:	20af883a 	add	r23,r4,r2
 4023a90:	01800044 	movi	r6,1
 4023a94:	800b883a 	mov	r5,r16
 4023a98:	e009883a 	mov	r4,fp
 4023a9c:	da001715 	stw	r8,92(sp)
 4023aa0:	4026d040 	call	4026d04 <__lshift>
 4023aa4:	a80b883a 	mov	r5,r21
 4023aa8:	1009883a 	mov	r4,r2
 4023aac:	d8800915 	stw	r2,36(sp)
 4023ab0:	4026e4c0 	call	4026e4c <__mcmp>
 4023ab4:	da001717 	ldw	r8,92(sp)
 4023ab8:	0081800e 	bge	zero,r2,40240bc <_dtoa_r+0x11d4>
 4023abc:	b93fffc3 	ldbu	r4,-1(r23)
 4023ac0:	b8bfffc4 	addi	r2,r23,-1
 4023ac4:	1007883a 	mov	r3,r2
 4023ac8:	01800e44 	movi	r6,57
 4023acc:	d9c00717 	ldw	r7,28(sp)
 4023ad0:	00000506 	br	4023ae8 <_dtoa_r+0xc00>
 4023ad4:	18ffffc4 	addi	r3,r3,-1
 4023ad8:	11c12326 	beq	r2,r7,4023f68 <_dtoa_r+0x1080>
 4023adc:	19000003 	ldbu	r4,0(r3)
 4023ae0:	102f883a 	mov	r23,r2
 4023ae4:	10bfffc4 	addi	r2,r2,-1
 4023ae8:	21403fcc 	andi	r5,r4,255
 4023aec:	2940201c 	xori	r5,r5,128
 4023af0:	297fe004 	addi	r5,r5,-128
 4023af4:	29bff726 	beq	r5,r6,4023ad4 <__alt_data_end+0xfffe3ad4>
 4023af8:	21000044 	addi	r4,r4,1
 4023afc:	11000005 	stb	r4,0(r2)
 4023b00:	a80b883a 	mov	r5,r21
 4023b04:	e009883a 	mov	r4,fp
 4023b08:	402662c0 	call	402662c <_Bfree>
 4023b0c:	883ea026 	beq	r17,zero,4023590 <__alt_data_end+0xfffe3590>
 4023b10:	90000426 	beq	r18,zero,4023b24 <_dtoa_r+0xc3c>
 4023b14:	94400326 	beq	r18,r17,4023b24 <_dtoa_r+0xc3c>
 4023b18:	900b883a 	mov	r5,r18
 4023b1c:	e009883a 	mov	r4,fp
 4023b20:	402662c0 	call	402662c <_Bfree>
 4023b24:	880b883a 	mov	r5,r17
 4023b28:	e009883a 	mov	r4,fp
 4023b2c:	402662c0 	call	402662c <_Bfree>
 4023b30:	003e9706 	br	4023590 <__alt_data_end+0xfffe3590>
 4023b34:	01800044 	movi	r6,1
 4023b38:	d9800e15 	stw	r6,56(sp)
 4023b3c:	003d9606 	br	4023198 <__alt_data_end+0xfffe3198>
 4023b40:	d8800817 	ldw	r2,32(sp)
 4023b44:	d8c00517 	ldw	r3,20(sp)
 4023b48:	d8000d15 	stw	zero,52(sp)
 4023b4c:	10c5c83a 	sub	r2,r2,r3
 4023b50:	00c9c83a 	sub	r4,zero,r3
 4023b54:	d8800815 	stw	r2,32(sp)
 4023b58:	d9000a15 	stw	r4,40(sp)
 4023b5c:	003d9706 	br	40231bc <__alt_data_end+0xfffe31bc>
 4023b60:	05adc83a 	sub	r22,zero,r22
 4023b64:	dd800815 	stw	r22,32(sp)
 4023b68:	002d883a 	mov	r22,zero
 4023b6c:	003d8e06 	br	40231a8 <__alt_data_end+0xfffe31a8>
 4023b70:	d9000517 	ldw	r4,20(sp)
 4023b74:	402ce240 	call	402ce24 <__floatsidf>
 4023b78:	100d883a 	mov	r6,r2
 4023b7c:	180f883a 	mov	r7,r3
 4023b80:	a009883a 	mov	r4,r20
 4023b84:	880b883a 	mov	r5,r17
 4023b88:	402bb380 	call	402bb38 <__eqdf2>
 4023b8c:	103d7126 	beq	r2,zero,4023154 <__alt_data_end+0xfffe3154>
 4023b90:	d9c00517 	ldw	r7,20(sp)
 4023b94:	39ffffc4 	addi	r7,r7,-1
 4023b98:	d9c00515 	stw	r7,20(sp)
 4023b9c:	003d6d06 	br	4023154 <__alt_data_end+0xfffe3154>
 4023ba0:	dd400a17 	ldw	r21,40(sp)
 4023ba4:	dd000817 	ldw	r20,32(sp)
 4023ba8:	0023883a 	mov	r17,zero
 4023bac:	003f4806 	br	40238d0 <__alt_data_end+0xfffe38d0>
 4023bb0:	10e3c83a 	sub	r17,r2,r3
 4023bb4:	9448983a 	sll	r4,r18,r17
 4023bb8:	003d3206 	br	4023084 <__alt_data_end+0xfffe3084>
 4023bbc:	d8000e15 	stw	zero,56(sp)
 4023bc0:	003d7506 	br	4023198 <__alt_data_end+0xfffe3198>
 4023bc4:	b005883a 	mov	r2,r22
 4023bc8:	003f4506 	br	40238e0 <__alt_data_end+0xfffe38e0>
 4023bcc:	dc000915 	stw	r16,36(sp)
 4023bd0:	d9800a17 	ldw	r6,40(sp)
 4023bd4:	d9400917 	ldw	r5,36(sp)
 4023bd8:	e009883a 	mov	r4,fp
 4023bdc:	4026bc40 	call	4026bc4 <__pow5mult>
 4023be0:	1021883a 	mov	r16,r2
 4023be4:	003f5a06 	br	4023950 <__alt_data_end+0xfffe3950>
 4023be8:	01c00044 	movi	r7,1
 4023bec:	d9c00b15 	stw	r7,44(sp)
 4023bf0:	d8802217 	ldw	r2,136(sp)
 4023bf4:	0081280e 	bge	zero,r2,4024098 <_dtoa_r+0x11b0>
 4023bf8:	100d883a 	mov	r6,r2
 4023bfc:	1021883a 	mov	r16,r2
 4023c00:	d8800c15 	stw	r2,48(sp)
 4023c04:	d8800615 	stw	r2,24(sp)
 4023c08:	003d8806 	br	402322c <__alt_data_end+0xfffe322c>
 4023c0c:	d8800617 	ldw	r2,24(sp)
 4023c10:	00be9b16 	blt	zero,r2,4023680 <__alt_data_end+0xfffe3680>
 4023c14:	10010f1e 	bne	r2,zero,4024054 <_dtoa_r+0x116c>
 4023c18:	880b883a 	mov	r5,r17
 4023c1c:	000d883a 	mov	r6,zero
 4023c20:	01d00534 	movhi	r7,16404
 4023c24:	8009883a 	mov	r4,r16
 4023c28:	402bd900 	call	402bd90 <__muldf3>
 4023c2c:	900d883a 	mov	r6,r18
 4023c30:	980f883a 	mov	r7,r19
 4023c34:	1009883a 	mov	r4,r2
 4023c38:	180b883a 	mov	r5,r3
 4023c3c:	402bbc00 	call	402bbc0 <__gedf2>
 4023c40:	002b883a 	mov	r21,zero
 4023c44:	0023883a 	mov	r17,zero
 4023c48:	1000bf16 	blt	r2,zero,4023f48 <_dtoa_r+0x1060>
 4023c4c:	d9802217 	ldw	r6,136(sp)
 4023c50:	ddc00717 	ldw	r23,28(sp)
 4023c54:	018c303a 	nor	r6,zero,r6
 4023c58:	d9800515 	stw	r6,20(sp)
 4023c5c:	a80b883a 	mov	r5,r21
 4023c60:	e009883a 	mov	r4,fp
 4023c64:	402662c0 	call	402662c <_Bfree>
 4023c68:	883e4926 	beq	r17,zero,4023590 <__alt_data_end+0xfffe3590>
 4023c6c:	003fad06 	br	4023b24 <__alt_data_end+0xfffe3b24>
 4023c70:	d9c01117 	ldw	r7,68(sp)
 4023c74:	3801bc26 	beq	r7,zero,4024368 <_dtoa_r+0x1480>
 4023c78:	10810cc4 	addi	r2,r2,1075
 4023c7c:	dd400a17 	ldw	r21,40(sp)
 4023c80:	dd000817 	ldw	r20,32(sp)
 4023c84:	003f0a06 	br	40238b0 <__alt_data_end+0xfffe38b0>
 4023c88:	00800704 	movi	r2,28
 4023c8c:	d9000817 	ldw	r4,32(sp)
 4023c90:	a0a9883a 	add	r20,r20,r2
 4023c94:	b0ad883a 	add	r22,r22,r2
 4023c98:	2089883a 	add	r4,r4,r2
 4023c9c:	d9000815 	stw	r4,32(sp)
 4023ca0:	003f5106 	br	40239e8 <__alt_data_end+0xfffe39e8>
 4023ca4:	d8c00317 	ldw	r3,12(sp)
 4023ca8:	b8c1fc0e 	bge	r23,r3,402449c <_dtoa_r+0x15b4>
 4023cac:	0027883a 	mov	r19,zero
 4023cb0:	b805883a 	mov	r2,r23
 4023cb4:	003f3e06 	br	40239b0 <__alt_data_end+0xfffe39b0>
 4023cb8:	880b883a 	mov	r5,r17
 4023cbc:	e009883a 	mov	r4,fp
 4023cc0:	000f883a 	mov	r7,zero
 4023cc4:	01800284 	movi	r6,10
 4023cc8:	40266540 	call	4026654 <__multadd>
 4023ccc:	d9000c17 	ldw	r4,48(sp)
 4023cd0:	1023883a 	mov	r17,r2
 4023cd4:	0102040e 	bge	zero,r4,40244e8 <_dtoa_r+0x1600>
 4023cd8:	d9000615 	stw	r4,24(sp)
 4023cdc:	0500050e 	bge	zero,r20,4023cf4 <_dtoa_r+0xe0c>
 4023ce0:	880b883a 	mov	r5,r17
 4023ce4:	a00d883a 	mov	r6,r20
 4023ce8:	e009883a 	mov	r4,fp
 4023cec:	4026d040 	call	4026d04 <__lshift>
 4023cf0:	1023883a 	mov	r17,r2
 4023cf4:	9801241e 	bne	r19,zero,4024188 <_dtoa_r+0x12a0>
 4023cf8:	8829883a 	mov	r20,r17
 4023cfc:	d9000617 	ldw	r4,24(sp)
 4023d00:	dcc00717 	ldw	r19,28(sp)
 4023d04:	9480004c 	andi	r18,r18,1
 4023d08:	20bfffc4 	addi	r2,r4,-1
 4023d0c:	9885883a 	add	r2,r19,r2
 4023d10:	d8800415 	stw	r2,16(sp)
 4023d14:	dc800615 	stw	r18,24(sp)
 4023d18:	a80b883a 	mov	r5,r21
 4023d1c:	8009883a 	mov	r4,r16
 4023d20:	4022ce80 	call	4022ce8 <quorem>
 4023d24:	880b883a 	mov	r5,r17
 4023d28:	8009883a 	mov	r4,r16
 4023d2c:	102f883a 	mov	r23,r2
 4023d30:	4026e4c0 	call	4026e4c <__mcmp>
 4023d34:	a80b883a 	mov	r5,r21
 4023d38:	a00d883a 	mov	r6,r20
 4023d3c:	e009883a 	mov	r4,fp
 4023d40:	102d883a 	mov	r22,r2
 4023d44:	4026eac0 	call	4026eac <__mdiff>
 4023d48:	1007883a 	mov	r3,r2
 4023d4c:	10800317 	ldw	r2,12(r2)
 4023d50:	bc800c04 	addi	r18,r23,48
 4023d54:	180b883a 	mov	r5,r3
 4023d58:	10004e1e 	bne	r2,zero,4023e94 <_dtoa_r+0xfac>
 4023d5c:	8009883a 	mov	r4,r16
 4023d60:	d8c01615 	stw	r3,88(sp)
 4023d64:	4026e4c0 	call	4026e4c <__mcmp>
 4023d68:	d8c01617 	ldw	r3,88(sp)
 4023d6c:	e009883a 	mov	r4,fp
 4023d70:	d8801615 	stw	r2,88(sp)
 4023d74:	180b883a 	mov	r5,r3
 4023d78:	402662c0 	call	402662c <_Bfree>
 4023d7c:	d8801617 	ldw	r2,88(sp)
 4023d80:	1000041e 	bne	r2,zero,4023d94 <_dtoa_r+0xeac>
 4023d84:	d9800317 	ldw	r6,12(sp)
 4023d88:	3000021e 	bne	r6,zero,4023d94 <_dtoa_r+0xeac>
 4023d8c:	d8c00617 	ldw	r3,24(sp)
 4023d90:	18003726 	beq	r3,zero,4023e70 <_dtoa_r+0xf88>
 4023d94:	b0002016 	blt	r22,zero,4023e18 <_dtoa_r+0xf30>
 4023d98:	b000041e 	bne	r22,zero,4023dac <_dtoa_r+0xec4>
 4023d9c:	d9000317 	ldw	r4,12(sp)
 4023da0:	2000021e 	bne	r4,zero,4023dac <_dtoa_r+0xec4>
 4023da4:	d8c00617 	ldw	r3,24(sp)
 4023da8:	18001b26 	beq	r3,zero,4023e18 <_dtoa_r+0xf30>
 4023dac:	00810716 	blt	zero,r2,40241cc <_dtoa_r+0x12e4>
 4023db0:	d8c00417 	ldw	r3,16(sp)
 4023db4:	9d800044 	addi	r22,r19,1
 4023db8:	9c800005 	stb	r18,0(r19)
 4023dbc:	b02f883a 	mov	r23,r22
 4023dc0:	98c10626 	beq	r19,r3,40241dc <_dtoa_r+0x12f4>
 4023dc4:	800b883a 	mov	r5,r16
 4023dc8:	000f883a 	mov	r7,zero
 4023dcc:	01800284 	movi	r6,10
 4023dd0:	e009883a 	mov	r4,fp
 4023dd4:	40266540 	call	4026654 <__multadd>
 4023dd8:	1021883a 	mov	r16,r2
 4023ddc:	000f883a 	mov	r7,zero
 4023de0:	01800284 	movi	r6,10
 4023de4:	880b883a 	mov	r5,r17
 4023de8:	e009883a 	mov	r4,fp
 4023dec:	8d002526 	beq	r17,r20,4023e84 <_dtoa_r+0xf9c>
 4023df0:	40266540 	call	4026654 <__multadd>
 4023df4:	a00b883a 	mov	r5,r20
 4023df8:	000f883a 	mov	r7,zero
 4023dfc:	01800284 	movi	r6,10
 4023e00:	e009883a 	mov	r4,fp
 4023e04:	1023883a 	mov	r17,r2
 4023e08:	40266540 	call	4026654 <__multadd>
 4023e0c:	1029883a 	mov	r20,r2
 4023e10:	b027883a 	mov	r19,r22
 4023e14:	003fc006 	br	4023d18 <__alt_data_end+0xfffe3d18>
 4023e18:	9011883a 	mov	r8,r18
 4023e1c:	00800e0e 	bge	zero,r2,4023e58 <_dtoa_r+0xf70>
 4023e20:	800b883a 	mov	r5,r16
 4023e24:	01800044 	movi	r6,1
 4023e28:	e009883a 	mov	r4,fp
 4023e2c:	da001715 	stw	r8,92(sp)
 4023e30:	4026d040 	call	4026d04 <__lshift>
 4023e34:	a80b883a 	mov	r5,r21
 4023e38:	1009883a 	mov	r4,r2
 4023e3c:	1021883a 	mov	r16,r2
 4023e40:	4026e4c0 	call	4026e4c <__mcmp>
 4023e44:	da001717 	ldw	r8,92(sp)
 4023e48:	0081960e 	bge	zero,r2,40244a4 <_dtoa_r+0x15bc>
 4023e4c:	00800e44 	movi	r2,57
 4023e50:	40817026 	beq	r8,r2,4024414 <_dtoa_r+0x152c>
 4023e54:	ba000c44 	addi	r8,r23,49
 4023e58:	8825883a 	mov	r18,r17
 4023e5c:	9dc00044 	addi	r23,r19,1
 4023e60:	9a000005 	stb	r8,0(r19)
 4023e64:	a023883a 	mov	r17,r20
 4023e68:	dc000915 	stw	r16,36(sp)
 4023e6c:	003f2406 	br	4023b00 <__alt_data_end+0xfffe3b00>
 4023e70:	00800e44 	movi	r2,57
 4023e74:	9011883a 	mov	r8,r18
 4023e78:	90816626 	beq	r18,r2,4024414 <_dtoa_r+0x152c>
 4023e7c:	05bff516 	blt	zero,r22,4023e54 <__alt_data_end+0xfffe3e54>
 4023e80:	003ff506 	br	4023e58 <__alt_data_end+0xfffe3e58>
 4023e84:	40266540 	call	4026654 <__multadd>
 4023e88:	1023883a 	mov	r17,r2
 4023e8c:	1029883a 	mov	r20,r2
 4023e90:	003fdf06 	br	4023e10 <__alt_data_end+0xfffe3e10>
 4023e94:	e009883a 	mov	r4,fp
 4023e98:	402662c0 	call	402662c <_Bfree>
 4023e9c:	00800044 	movi	r2,1
 4023ea0:	003fbc06 	br	4023d94 <__alt_data_end+0xfffe3d94>
 4023ea4:	a80b883a 	mov	r5,r21
 4023ea8:	8009883a 	mov	r4,r16
 4023eac:	4026e4c0 	call	4026e4c <__mcmp>
 4023eb0:	103edb0e 	bge	r2,zero,4023a20 <__alt_data_end+0xfffe3a20>
 4023eb4:	800b883a 	mov	r5,r16
 4023eb8:	000f883a 	mov	r7,zero
 4023ebc:	01800284 	movi	r6,10
 4023ec0:	e009883a 	mov	r4,fp
 4023ec4:	40266540 	call	4026654 <__multadd>
 4023ec8:	1021883a 	mov	r16,r2
 4023ecc:	d8800517 	ldw	r2,20(sp)
 4023ed0:	d8c00b17 	ldw	r3,44(sp)
 4023ed4:	10bfffc4 	addi	r2,r2,-1
 4023ed8:	d8800515 	stw	r2,20(sp)
 4023edc:	183f761e 	bne	r3,zero,4023cb8 <__alt_data_end+0xfffe3cb8>
 4023ee0:	d9000c17 	ldw	r4,48(sp)
 4023ee4:	0101730e 	bge	zero,r4,40244b4 <_dtoa_r+0x15cc>
 4023ee8:	d9000615 	stw	r4,24(sp)
 4023eec:	003ed006 	br	4023a30 <__alt_data_end+0xfffe3a30>
 4023ef0:	00800084 	movi	r2,2
 4023ef4:	3081861e 	bne	r6,r2,4024510 <_dtoa_r+0x1628>
 4023ef8:	d8000b15 	stw	zero,44(sp)
 4023efc:	003f3c06 	br	4023bf0 <__alt_data_end+0xfffe3bf0>
 4023f00:	dc000917 	ldw	r16,36(sp)
 4023f04:	003e9206 	br	4023950 <__alt_data_end+0xfffe3950>
 4023f08:	d9c00317 	ldw	r7,12(sp)
 4023f0c:	00800084 	movi	r2,2
 4023f10:	11fec50e 	bge	r2,r7,4023a28 <__alt_data_end+0xfffe3a28>
 4023f14:	d9000617 	ldw	r4,24(sp)
 4023f18:	20013c1e 	bne	r4,zero,402440c <_dtoa_r+0x1524>
 4023f1c:	a80b883a 	mov	r5,r21
 4023f20:	000f883a 	mov	r7,zero
 4023f24:	01800144 	movi	r6,5
 4023f28:	e009883a 	mov	r4,fp
 4023f2c:	40266540 	call	4026654 <__multadd>
 4023f30:	100b883a 	mov	r5,r2
 4023f34:	8009883a 	mov	r4,r16
 4023f38:	102b883a 	mov	r21,r2
 4023f3c:	4026e4c0 	call	4026e4c <__mcmp>
 4023f40:	dc000915 	stw	r16,36(sp)
 4023f44:	00bf410e 	bge	zero,r2,4023c4c <__alt_data_end+0xfffe3c4c>
 4023f48:	d9c00717 	ldw	r7,28(sp)
 4023f4c:	00800c44 	movi	r2,49
 4023f50:	38800005 	stb	r2,0(r7)
 4023f54:	d8800517 	ldw	r2,20(sp)
 4023f58:	3dc00044 	addi	r23,r7,1
 4023f5c:	10800044 	addi	r2,r2,1
 4023f60:	d8800515 	stw	r2,20(sp)
 4023f64:	003f3d06 	br	4023c5c <__alt_data_end+0xfffe3c5c>
 4023f68:	d9800517 	ldw	r6,20(sp)
 4023f6c:	d9c00717 	ldw	r7,28(sp)
 4023f70:	00800c44 	movi	r2,49
 4023f74:	31800044 	addi	r6,r6,1
 4023f78:	d9800515 	stw	r6,20(sp)
 4023f7c:	38800005 	stb	r2,0(r7)
 4023f80:	003edf06 	br	4023b00 <__alt_data_end+0xfffe3b00>
 4023f84:	d8000b15 	stw	zero,44(sp)
 4023f88:	003c9f06 	br	4023208 <__alt_data_end+0xfffe3208>
 4023f8c:	903e7e1e 	bne	r18,zero,4023988 <__alt_data_end+0xfffe3988>
 4023f90:	00800434 	movhi	r2,16
 4023f94:	10bfffc4 	addi	r2,r2,-1
 4023f98:	9884703a 	and	r2,r19,r2
 4023f9c:	1000ea1e 	bne	r2,zero,4024348 <_dtoa_r+0x1460>
 4023fa0:	9cdffc2c 	andhi	r19,r19,32752
 4023fa4:	9800e826 	beq	r19,zero,4024348 <_dtoa_r+0x1460>
 4023fa8:	d9c00817 	ldw	r7,32(sp)
 4023fac:	b5800044 	addi	r22,r22,1
 4023fb0:	04c00044 	movi	r19,1
 4023fb4:	39c00044 	addi	r7,r7,1
 4023fb8:	d9c00815 	stw	r7,32(sp)
 4023fbc:	d8800d17 	ldw	r2,52(sp)
 4023fc0:	103e721e 	bne	r2,zero,402398c <__alt_data_end+0xfffe398c>
 4023fc4:	00800044 	movi	r2,1
 4023fc8:	003e7906 	br	40239b0 <__alt_data_end+0xfffe39b0>
 4023fcc:	8009883a 	mov	r4,r16
 4023fd0:	402ce240 	call	402ce24 <__floatsidf>
 4023fd4:	d9800f17 	ldw	r6,60(sp)
 4023fd8:	d9c01017 	ldw	r7,64(sp)
 4023fdc:	1009883a 	mov	r4,r2
 4023fe0:	180b883a 	mov	r5,r3
 4023fe4:	402bd900 	call	402bd90 <__muldf3>
 4023fe8:	000d883a 	mov	r6,zero
 4023fec:	01d00734 	movhi	r7,16412
 4023ff0:	1009883a 	mov	r4,r2
 4023ff4:	180b883a 	mov	r5,r3
 4023ff8:	402a9a40 	call	402a9a4 <__adddf3>
 4023ffc:	047f3034 	movhi	r17,64704
 4024000:	1021883a 	mov	r16,r2
 4024004:	1c63883a 	add	r17,r3,r17
 4024008:	d9000f17 	ldw	r4,60(sp)
 402400c:	d9401017 	ldw	r5,64(sp)
 4024010:	000d883a 	mov	r6,zero
 4024014:	01d00534 	movhi	r7,16404
 4024018:	402c4a80 	call	402c4a8 <__subdf3>
 402401c:	800d883a 	mov	r6,r16
 4024020:	880f883a 	mov	r7,r17
 4024024:	1009883a 	mov	r4,r2
 4024028:	180b883a 	mov	r5,r3
 402402c:	102b883a 	mov	r21,r2
 4024030:	1829883a 	mov	r20,r3
 4024034:	402bbc00 	call	402bbc0 <__gedf2>
 4024038:	00806c16 	blt	zero,r2,40241ec <_dtoa_r+0x1304>
 402403c:	89e0003c 	xorhi	r7,r17,32768
 4024040:	800d883a 	mov	r6,r16
 4024044:	a809883a 	mov	r4,r21
 4024048:	a00b883a 	mov	r5,r20
 402404c:	402bc9c0 	call	402bc9c <__ledf2>
 4024050:	103d7e0e 	bge	r2,zero,402364c <__alt_data_end+0xfffe364c>
 4024054:	002b883a 	mov	r21,zero
 4024058:	0023883a 	mov	r17,zero
 402405c:	003efb06 	br	4023c4c <__alt_data_end+0xfffe3c4c>
 4024060:	d8800717 	ldw	r2,28(sp)
 4024064:	003bd006 	br	4022fa8 <__alt_data_end+0xfffe2fa8>
 4024068:	d9000a17 	ldw	r4,40(sp)
 402406c:	d9800d17 	ldw	r6,52(sp)
 4024070:	dd400a15 	stw	r21,40(sp)
 4024074:	a905c83a 	sub	r2,r21,r4
 4024078:	308d883a 	add	r6,r6,r2
 402407c:	d9800d15 	stw	r6,52(sp)
 4024080:	002b883a 	mov	r21,zero
 4024084:	003e0606 	br	40238a0 <__alt_data_end+0xfffe38a0>
 4024088:	9023883a 	mov	r17,r18
 402408c:	9829883a 	mov	r20,r19
 4024090:	04000084 	movi	r16,2
 4024094:	003c9206 	br	40232e0 <__alt_data_end+0xfffe32e0>
 4024098:	04000044 	movi	r16,1
 402409c:	dc000c15 	stw	r16,48(sp)
 40240a0:	dc000615 	stw	r16,24(sp)
 40240a4:	dc002215 	stw	r16,136(sp)
 40240a8:	e0001115 	stw	zero,68(fp)
 40240ac:	000b883a 	mov	r5,zero
 40240b0:	003c6906 	br	4023258 <__alt_data_end+0xfffe3258>
 40240b4:	3021883a 	mov	r16,r6
 40240b8:	003ffb06 	br	40240a8 <__alt_data_end+0xfffe40a8>
 40240bc:	1000021e 	bne	r2,zero,40240c8 <_dtoa_r+0x11e0>
 40240c0:	4200004c 	andi	r8,r8,1
 40240c4:	403e7d1e 	bne	r8,zero,4023abc <__alt_data_end+0xfffe3abc>
 40240c8:	01000c04 	movi	r4,48
 40240cc:	00000106 	br	40240d4 <_dtoa_r+0x11ec>
 40240d0:	102f883a 	mov	r23,r2
 40240d4:	b8bfffc4 	addi	r2,r23,-1
 40240d8:	10c00007 	ldb	r3,0(r2)
 40240dc:	193ffc26 	beq	r3,r4,40240d0 <__alt_data_end+0xfffe40d0>
 40240e0:	003e8706 	br	4023b00 <__alt_data_end+0xfffe3b00>
 40240e4:	d8800517 	ldw	r2,20(sp)
 40240e8:	00a3c83a 	sub	r17,zero,r2
 40240ec:	8800a426 	beq	r17,zero,4024380 <_dtoa_r+0x1498>
 40240f0:	888003cc 	andi	r2,r17,15
 40240f4:	100490fa 	slli	r2,r2,3
 40240f8:	00c100f4 	movhi	r3,1027
 40240fc:	18c0e604 	addi	r3,r3,920
 4024100:	1885883a 	add	r2,r3,r2
 4024104:	11800017 	ldw	r6,0(r2)
 4024108:	11c00117 	ldw	r7,4(r2)
 402410c:	9009883a 	mov	r4,r18
 4024110:	980b883a 	mov	r5,r19
 4024114:	8823d13a 	srai	r17,r17,4
 4024118:	402bd900 	call	402bd90 <__muldf3>
 402411c:	d8800f15 	stw	r2,60(sp)
 4024120:	d8c01015 	stw	r3,64(sp)
 4024124:	8800e826 	beq	r17,zero,40244c8 <_dtoa_r+0x15e0>
 4024128:	050100f4 	movhi	r20,1027
 402412c:	a500dc04 	addi	r20,r20,880
 4024130:	04000084 	movi	r16,2
 4024134:	8980004c 	andi	r6,r17,1
 4024138:	1009883a 	mov	r4,r2
 402413c:	8823d07a 	srai	r17,r17,1
 4024140:	180b883a 	mov	r5,r3
 4024144:	30000426 	beq	r6,zero,4024158 <_dtoa_r+0x1270>
 4024148:	a1800017 	ldw	r6,0(r20)
 402414c:	a1c00117 	ldw	r7,4(r20)
 4024150:	84000044 	addi	r16,r16,1
 4024154:	402bd900 	call	402bd90 <__muldf3>
 4024158:	a5000204 	addi	r20,r20,8
 402415c:	883ff51e 	bne	r17,zero,4024134 <__alt_data_end+0xfffe4134>
 4024160:	d8800f15 	stw	r2,60(sp)
 4024164:	d8c01015 	stw	r3,64(sp)
 4024168:	003c7606 	br	4023344 <__alt_data_end+0xfffe3344>
 402416c:	00c00c04 	movi	r3,48
 4024170:	10c00005 	stb	r3,0(r2)
 4024174:	d8c00517 	ldw	r3,20(sp)
 4024178:	bd3fffc3 	ldbu	r20,-1(r23)
 402417c:	18c00044 	addi	r3,r3,1
 4024180:	d8c00515 	stw	r3,20(sp)
 4024184:	003db906 	br	402386c <__alt_data_end+0xfffe386c>
 4024188:	89400117 	ldw	r5,4(r17)
 402418c:	e009883a 	mov	r4,fp
 4024190:	40265840 	call	4026584 <_Balloc>
 4024194:	89800417 	ldw	r6,16(r17)
 4024198:	89400304 	addi	r5,r17,12
 402419c:	11000304 	addi	r4,r2,12
 40241a0:	31800084 	addi	r6,r6,2
 40241a4:	318d883a 	add	r6,r6,r6
 40241a8:	318d883a 	add	r6,r6,r6
 40241ac:	1027883a 	mov	r19,r2
 40241b0:	40261b80 	call	40261b8 <memcpy>
 40241b4:	01800044 	movi	r6,1
 40241b8:	980b883a 	mov	r5,r19
 40241bc:	e009883a 	mov	r4,fp
 40241c0:	4026d040 	call	4026d04 <__lshift>
 40241c4:	1029883a 	mov	r20,r2
 40241c8:	003ecc06 	br	4023cfc <__alt_data_end+0xfffe3cfc>
 40241cc:	00800e44 	movi	r2,57
 40241d0:	90809026 	beq	r18,r2,4024414 <_dtoa_r+0x152c>
 40241d4:	92000044 	addi	r8,r18,1
 40241d8:	003f1f06 	br	4023e58 <__alt_data_end+0xfffe3e58>
 40241dc:	9011883a 	mov	r8,r18
 40241e0:	8825883a 	mov	r18,r17
 40241e4:	a023883a 	mov	r17,r20
 40241e8:	003e2906 	br	4023a90 <__alt_data_end+0xfffe3a90>
 40241ec:	002b883a 	mov	r21,zero
 40241f0:	0023883a 	mov	r17,zero
 40241f4:	003f5406 	br	4023f48 <__alt_data_end+0xfffe3f48>
 40241f8:	61bfffc4 	addi	r6,r12,-1
 40241fc:	300490fa 	slli	r2,r6,3
 4024200:	00c100f4 	movhi	r3,1027
 4024204:	18c0e604 	addi	r3,r3,920
 4024208:	1885883a 	add	r2,r3,r2
 402420c:	11000017 	ldw	r4,0(r2)
 4024210:	11400117 	ldw	r5,4(r2)
 4024214:	d8800717 	ldw	r2,28(sp)
 4024218:	880f883a 	mov	r7,r17
 402421c:	d9801215 	stw	r6,72(sp)
 4024220:	800d883a 	mov	r6,r16
 4024224:	db001615 	stw	r12,88(sp)
 4024228:	15c00044 	addi	r23,r2,1
 402422c:	402bd900 	call	402bd90 <__muldf3>
 4024230:	d9401017 	ldw	r5,64(sp)
 4024234:	d9000f17 	ldw	r4,60(sp)
 4024238:	d8c01515 	stw	r3,84(sp)
 402423c:	d8801415 	stw	r2,80(sp)
 4024240:	402cda40 	call	402cda4 <__fixdfsi>
 4024244:	1009883a 	mov	r4,r2
 4024248:	1021883a 	mov	r16,r2
 402424c:	402ce240 	call	402ce24 <__floatsidf>
 4024250:	d9000f17 	ldw	r4,60(sp)
 4024254:	d9401017 	ldw	r5,64(sp)
 4024258:	100d883a 	mov	r6,r2
 402425c:	180f883a 	mov	r7,r3
 4024260:	402c4a80 	call	402c4a8 <__subdf3>
 4024264:	1829883a 	mov	r20,r3
 4024268:	d8c00717 	ldw	r3,28(sp)
 402426c:	84000c04 	addi	r16,r16,48
 4024270:	1023883a 	mov	r17,r2
 4024274:	1c000005 	stb	r16,0(r3)
 4024278:	db001617 	ldw	r12,88(sp)
 402427c:	00800044 	movi	r2,1
 4024280:	60802226 	beq	r12,r2,402430c <_dtoa_r+0x1424>
 4024284:	d9c00717 	ldw	r7,28(sp)
 4024288:	8805883a 	mov	r2,r17
 402428c:	b82b883a 	mov	r21,r23
 4024290:	3b19883a 	add	r12,r7,r12
 4024294:	6023883a 	mov	r17,r12
 4024298:	a007883a 	mov	r3,r20
 402429c:	dc800f15 	stw	r18,60(sp)
 40242a0:	000d883a 	mov	r6,zero
 40242a4:	01d00934 	movhi	r7,16420
 40242a8:	1009883a 	mov	r4,r2
 40242ac:	180b883a 	mov	r5,r3
 40242b0:	402bd900 	call	402bd90 <__muldf3>
 40242b4:	180b883a 	mov	r5,r3
 40242b8:	1009883a 	mov	r4,r2
 40242bc:	1829883a 	mov	r20,r3
 40242c0:	1025883a 	mov	r18,r2
 40242c4:	402cda40 	call	402cda4 <__fixdfsi>
 40242c8:	1009883a 	mov	r4,r2
 40242cc:	1021883a 	mov	r16,r2
 40242d0:	402ce240 	call	402ce24 <__floatsidf>
 40242d4:	100d883a 	mov	r6,r2
 40242d8:	180f883a 	mov	r7,r3
 40242dc:	9009883a 	mov	r4,r18
 40242e0:	a00b883a 	mov	r5,r20
 40242e4:	84000c04 	addi	r16,r16,48
 40242e8:	402c4a80 	call	402c4a8 <__subdf3>
 40242ec:	ad400044 	addi	r21,r21,1
 40242f0:	ac3fffc5 	stb	r16,-1(r21)
 40242f4:	ac7fea1e 	bne	r21,r17,40242a0 <__alt_data_end+0xfffe42a0>
 40242f8:	1023883a 	mov	r17,r2
 40242fc:	d8801217 	ldw	r2,72(sp)
 4024300:	dc800f17 	ldw	r18,60(sp)
 4024304:	1829883a 	mov	r20,r3
 4024308:	b8af883a 	add	r23,r23,r2
 402430c:	d9001417 	ldw	r4,80(sp)
 4024310:	d9401517 	ldw	r5,84(sp)
 4024314:	000d883a 	mov	r6,zero
 4024318:	01cff834 	movhi	r7,16352
 402431c:	402a9a40 	call	402a9a4 <__adddf3>
 4024320:	880d883a 	mov	r6,r17
 4024324:	a00f883a 	mov	r7,r20
 4024328:	1009883a 	mov	r4,r2
 402432c:	180b883a 	mov	r5,r3
 4024330:	402bc9c0 	call	402bc9c <__ledf2>
 4024334:	10003e0e 	bge	r2,zero,4024430 <_dtoa_r+0x1548>
 4024338:	d9001317 	ldw	r4,76(sp)
 402433c:	bd3fffc3 	ldbu	r20,-1(r23)
 4024340:	d9000515 	stw	r4,20(sp)
 4024344:	003d3b06 	br	4023834 <__alt_data_end+0xfffe3834>
 4024348:	0027883a 	mov	r19,zero
 402434c:	003f1b06 	br	4023fbc <__alt_data_end+0xfffe3fbc>
 4024350:	d8800817 	ldw	r2,32(sp)
 4024354:	11e9c83a 	sub	r20,r2,r7
 4024358:	0005883a 	mov	r2,zero
 402435c:	003d5406 	br	40238b0 <__alt_data_end+0xfffe38b0>
 4024360:	00800044 	movi	r2,1
 4024364:	003dc706 	br	4023a84 <__alt_data_end+0xfffe3a84>
 4024368:	d8c00217 	ldw	r3,8(sp)
 402436c:	00800d84 	movi	r2,54
 4024370:	dd400a17 	ldw	r21,40(sp)
 4024374:	10c5c83a 	sub	r2,r2,r3
 4024378:	dd000817 	ldw	r20,32(sp)
 402437c:	003d4c06 	br	40238b0 <__alt_data_end+0xfffe38b0>
 4024380:	dc800f15 	stw	r18,60(sp)
 4024384:	dcc01015 	stw	r19,64(sp)
 4024388:	04000084 	movi	r16,2
 402438c:	003bed06 	br	4023344 <__alt_data_end+0xfffe3344>
 4024390:	d9000617 	ldw	r4,24(sp)
 4024394:	203f0d26 	beq	r4,zero,4023fcc <__alt_data_end+0xfffe3fcc>
 4024398:	d9800c17 	ldw	r6,48(sp)
 402439c:	01bcab0e 	bge	zero,r6,402364c <__alt_data_end+0xfffe364c>
 40243a0:	d9401017 	ldw	r5,64(sp)
 40243a4:	d9000f17 	ldw	r4,60(sp)
 40243a8:	000d883a 	mov	r6,zero
 40243ac:	01d00934 	movhi	r7,16420
 40243b0:	402bd900 	call	402bd90 <__muldf3>
 40243b4:	81000044 	addi	r4,r16,1
 40243b8:	d8800f15 	stw	r2,60(sp)
 40243bc:	d8c01015 	stw	r3,64(sp)
 40243c0:	402ce240 	call	402ce24 <__floatsidf>
 40243c4:	d9800f17 	ldw	r6,60(sp)
 40243c8:	d9c01017 	ldw	r7,64(sp)
 40243cc:	1009883a 	mov	r4,r2
 40243d0:	180b883a 	mov	r5,r3
 40243d4:	402bd900 	call	402bd90 <__muldf3>
 40243d8:	01d00734 	movhi	r7,16412
 40243dc:	000d883a 	mov	r6,zero
 40243e0:	1009883a 	mov	r4,r2
 40243e4:	180b883a 	mov	r5,r3
 40243e8:	402a9a40 	call	402a9a4 <__adddf3>
 40243ec:	d9c00517 	ldw	r7,20(sp)
 40243f0:	047f3034 	movhi	r17,64704
 40243f4:	1021883a 	mov	r16,r2
 40243f8:	39ffffc4 	addi	r7,r7,-1
 40243fc:	d9c01315 	stw	r7,76(sp)
 4024400:	1c63883a 	add	r17,r3,r17
 4024404:	db000c17 	ldw	r12,48(sp)
 4024408:	003bea06 	br	40233b4 <__alt_data_end+0xfffe33b4>
 402440c:	dc000915 	stw	r16,36(sp)
 4024410:	003e0e06 	br	4023c4c <__alt_data_end+0xfffe3c4c>
 4024414:	01000e44 	movi	r4,57
 4024418:	8825883a 	mov	r18,r17
 402441c:	9dc00044 	addi	r23,r19,1
 4024420:	99000005 	stb	r4,0(r19)
 4024424:	a023883a 	mov	r17,r20
 4024428:	dc000915 	stw	r16,36(sp)
 402442c:	003da406 	br	4023ac0 <__alt_data_end+0xfffe3ac0>
 4024430:	d9801417 	ldw	r6,80(sp)
 4024434:	d9c01517 	ldw	r7,84(sp)
 4024438:	0009883a 	mov	r4,zero
 402443c:	014ff834 	movhi	r5,16352
 4024440:	402c4a80 	call	402c4a8 <__subdf3>
 4024444:	880d883a 	mov	r6,r17
 4024448:	a00f883a 	mov	r7,r20
 402444c:	1009883a 	mov	r4,r2
 4024450:	180b883a 	mov	r5,r3
 4024454:	402bbc00 	call	402bbc0 <__gedf2>
 4024458:	00bc7c0e 	bge	zero,r2,402364c <__alt_data_end+0xfffe364c>
 402445c:	01000c04 	movi	r4,48
 4024460:	00000106 	br	4024468 <_dtoa_r+0x1580>
 4024464:	102f883a 	mov	r23,r2
 4024468:	b8bfffc4 	addi	r2,r23,-1
 402446c:	10c00007 	ldb	r3,0(r2)
 4024470:	193ffc26 	beq	r3,r4,4024464 <__alt_data_end+0xfffe4464>
 4024474:	d9801317 	ldw	r6,76(sp)
 4024478:	d9800515 	stw	r6,20(sp)
 402447c:	003c4406 	br	4023590 <__alt_data_end+0xfffe3590>
 4024480:	d9801317 	ldw	r6,76(sp)
 4024484:	d9800515 	stw	r6,20(sp)
 4024488:	003cea06 	br	4023834 <__alt_data_end+0xfffe3834>
 402448c:	dd800f17 	ldw	r22,60(sp)
 4024490:	dcc01017 	ldw	r19,64(sp)
 4024494:	dc801217 	ldw	r18,72(sp)
 4024498:	003c6c06 	br	402364c <__alt_data_end+0xfffe364c>
 402449c:	903e031e 	bne	r18,zero,4023cac <__alt_data_end+0xfffe3cac>
 40244a0:	003ebb06 	br	4023f90 <__alt_data_end+0xfffe3f90>
 40244a4:	103e6c1e 	bne	r2,zero,4023e58 <__alt_data_end+0xfffe3e58>
 40244a8:	4080004c 	andi	r2,r8,1
 40244ac:	103e6a26 	beq	r2,zero,4023e58 <__alt_data_end+0xfffe3e58>
 40244b0:	003e6606 	br	4023e4c <__alt_data_end+0xfffe3e4c>
 40244b4:	d8c00317 	ldw	r3,12(sp)
 40244b8:	00800084 	movi	r2,2
 40244bc:	10c02916 	blt	r2,r3,4024564 <_dtoa_r+0x167c>
 40244c0:	d9000c17 	ldw	r4,48(sp)
 40244c4:	003e8806 	br	4023ee8 <__alt_data_end+0xfffe3ee8>
 40244c8:	04000084 	movi	r16,2
 40244cc:	003b9d06 	br	4023344 <__alt_data_end+0xfffe3344>
 40244d0:	d9001317 	ldw	r4,76(sp)
 40244d4:	d9000515 	stw	r4,20(sp)
 40244d8:	003cd606 	br	4023834 <__alt_data_end+0xfffe3834>
 40244dc:	d8801317 	ldw	r2,76(sp)
 40244e0:	d8800515 	stw	r2,20(sp)
 40244e4:	003c2a06 	br	4023590 <__alt_data_end+0xfffe3590>
 40244e8:	d9800317 	ldw	r6,12(sp)
 40244ec:	00800084 	movi	r2,2
 40244f0:	11801516 	blt	r2,r6,4024548 <_dtoa_r+0x1660>
 40244f4:	d9c00c17 	ldw	r7,48(sp)
 40244f8:	d9c00615 	stw	r7,24(sp)
 40244fc:	003df706 	br	4023cdc <__alt_data_end+0xfffe3cdc>
 4024500:	193d3926 	beq	r3,r4,40239e8 <__alt_data_end+0xfffe39e8>
 4024504:	00c00f04 	movi	r3,60
 4024508:	1885c83a 	sub	r2,r3,r2
 402450c:	003ddf06 	br	4023c8c <__alt_data_end+0xfffe3c8c>
 4024510:	e009883a 	mov	r4,fp
 4024514:	e0001115 	stw	zero,68(fp)
 4024518:	000b883a 	mov	r5,zero
 402451c:	40265840 	call	4026584 <_Balloc>
 4024520:	d8800715 	stw	r2,28(sp)
 4024524:	d8c00717 	ldw	r3,28(sp)
 4024528:	00bfffc4 	movi	r2,-1
 402452c:	01000044 	movi	r4,1
 4024530:	d8800c15 	stw	r2,48(sp)
 4024534:	e0c01015 	stw	r3,64(fp)
 4024538:	d9000b15 	stw	r4,44(sp)
 402453c:	d8800615 	stw	r2,24(sp)
 4024540:	d8002215 	stw	zero,136(sp)
 4024544:	003c4106 	br	402364c <__alt_data_end+0xfffe364c>
 4024548:	d8c00c17 	ldw	r3,48(sp)
 402454c:	d8c00615 	stw	r3,24(sp)
 4024550:	003e7006 	br	4023f14 <__alt_data_end+0xfffe3f14>
 4024554:	04400044 	movi	r17,1
 4024558:	003b2006 	br	40231dc <__alt_data_end+0xfffe31dc>
 402455c:	000b883a 	mov	r5,zero
 4024560:	003b3d06 	br	4023258 <__alt_data_end+0xfffe3258>
 4024564:	d8800c17 	ldw	r2,48(sp)
 4024568:	d8800615 	stw	r2,24(sp)
 402456c:	003e6906 	br	4023f14 <__alt_data_end+0xfffe3f14>

04024570 <__sflush_r>:
 4024570:	2880030b 	ldhu	r2,12(r5)
 4024574:	defffb04 	addi	sp,sp,-20
 4024578:	dcc00315 	stw	r19,12(sp)
 402457c:	dc400115 	stw	r17,4(sp)
 4024580:	dfc00415 	stw	ra,16(sp)
 4024584:	dc800215 	stw	r18,8(sp)
 4024588:	dc000015 	stw	r16,0(sp)
 402458c:	10c0020c 	andi	r3,r2,8
 4024590:	2823883a 	mov	r17,r5
 4024594:	2027883a 	mov	r19,r4
 4024598:	1800311e 	bne	r3,zero,4024660 <__sflush_r+0xf0>
 402459c:	28c00117 	ldw	r3,4(r5)
 40245a0:	10820014 	ori	r2,r2,2048
 40245a4:	2880030d 	sth	r2,12(r5)
 40245a8:	00c04b0e 	bge	zero,r3,40246d8 <__sflush_r+0x168>
 40245ac:	8a000a17 	ldw	r8,40(r17)
 40245b0:	40002326 	beq	r8,zero,4024640 <__sflush_r+0xd0>
 40245b4:	9c000017 	ldw	r16,0(r19)
 40245b8:	10c4000c 	andi	r3,r2,4096
 40245bc:	98000015 	stw	zero,0(r19)
 40245c0:	18004826 	beq	r3,zero,40246e4 <__sflush_r+0x174>
 40245c4:	89801417 	ldw	r6,80(r17)
 40245c8:	10c0010c 	andi	r3,r2,4
 40245cc:	18000626 	beq	r3,zero,40245e8 <__sflush_r+0x78>
 40245d0:	88c00117 	ldw	r3,4(r17)
 40245d4:	88800c17 	ldw	r2,48(r17)
 40245d8:	30cdc83a 	sub	r6,r6,r3
 40245dc:	10000226 	beq	r2,zero,40245e8 <__sflush_r+0x78>
 40245e0:	88800f17 	ldw	r2,60(r17)
 40245e4:	308dc83a 	sub	r6,r6,r2
 40245e8:	89400717 	ldw	r5,28(r17)
 40245ec:	000f883a 	mov	r7,zero
 40245f0:	9809883a 	mov	r4,r19
 40245f4:	403ee83a 	callr	r8
 40245f8:	00ffffc4 	movi	r3,-1
 40245fc:	10c04426 	beq	r2,r3,4024710 <__sflush_r+0x1a0>
 4024600:	88c0030b 	ldhu	r3,12(r17)
 4024604:	89000417 	ldw	r4,16(r17)
 4024608:	88000115 	stw	zero,4(r17)
 402460c:	197dffcc 	andi	r5,r3,63487
 4024610:	8940030d 	sth	r5,12(r17)
 4024614:	89000015 	stw	r4,0(r17)
 4024618:	18c4000c 	andi	r3,r3,4096
 402461c:	18002c1e 	bne	r3,zero,40246d0 <__sflush_r+0x160>
 4024620:	89400c17 	ldw	r5,48(r17)
 4024624:	9c000015 	stw	r16,0(r19)
 4024628:	28000526 	beq	r5,zero,4024640 <__sflush_r+0xd0>
 402462c:	88801004 	addi	r2,r17,64
 4024630:	28800226 	beq	r5,r2,402463c <__sflush_r+0xcc>
 4024634:	9809883a 	mov	r4,r19
 4024638:	4024cdc0 	call	4024cdc <_free_r>
 402463c:	88000c15 	stw	zero,48(r17)
 4024640:	0005883a 	mov	r2,zero
 4024644:	dfc00417 	ldw	ra,16(sp)
 4024648:	dcc00317 	ldw	r19,12(sp)
 402464c:	dc800217 	ldw	r18,8(sp)
 4024650:	dc400117 	ldw	r17,4(sp)
 4024654:	dc000017 	ldw	r16,0(sp)
 4024658:	dec00504 	addi	sp,sp,20
 402465c:	f800283a 	ret
 4024660:	2c800417 	ldw	r18,16(r5)
 4024664:	903ff626 	beq	r18,zero,4024640 <__alt_data_end+0xfffe4640>
 4024668:	2c000017 	ldw	r16,0(r5)
 402466c:	108000cc 	andi	r2,r2,3
 4024670:	2c800015 	stw	r18,0(r5)
 4024674:	84a1c83a 	sub	r16,r16,r18
 4024678:	1000131e 	bne	r2,zero,40246c8 <__sflush_r+0x158>
 402467c:	28800517 	ldw	r2,20(r5)
 4024680:	88800215 	stw	r2,8(r17)
 4024684:	04000316 	blt	zero,r16,4024694 <__sflush_r+0x124>
 4024688:	003fed06 	br	4024640 <__alt_data_end+0xfffe4640>
 402468c:	90a5883a 	add	r18,r18,r2
 4024690:	043feb0e 	bge	zero,r16,4024640 <__alt_data_end+0xfffe4640>
 4024694:	88800917 	ldw	r2,36(r17)
 4024698:	89400717 	ldw	r5,28(r17)
 402469c:	800f883a 	mov	r7,r16
 40246a0:	900d883a 	mov	r6,r18
 40246a4:	9809883a 	mov	r4,r19
 40246a8:	103ee83a 	callr	r2
 40246ac:	80a1c83a 	sub	r16,r16,r2
 40246b0:	00bff616 	blt	zero,r2,402468c <__alt_data_end+0xfffe468c>
 40246b4:	88c0030b 	ldhu	r3,12(r17)
 40246b8:	00bfffc4 	movi	r2,-1
 40246bc:	18c01014 	ori	r3,r3,64
 40246c0:	88c0030d 	sth	r3,12(r17)
 40246c4:	003fdf06 	br	4024644 <__alt_data_end+0xfffe4644>
 40246c8:	0005883a 	mov	r2,zero
 40246cc:	003fec06 	br	4024680 <__alt_data_end+0xfffe4680>
 40246d0:	88801415 	stw	r2,80(r17)
 40246d4:	003fd206 	br	4024620 <__alt_data_end+0xfffe4620>
 40246d8:	28c00f17 	ldw	r3,60(r5)
 40246dc:	00ffb316 	blt	zero,r3,40245ac <__alt_data_end+0xfffe45ac>
 40246e0:	003fd706 	br	4024640 <__alt_data_end+0xfffe4640>
 40246e4:	89400717 	ldw	r5,28(r17)
 40246e8:	000d883a 	mov	r6,zero
 40246ec:	01c00044 	movi	r7,1
 40246f0:	9809883a 	mov	r4,r19
 40246f4:	403ee83a 	callr	r8
 40246f8:	100d883a 	mov	r6,r2
 40246fc:	00bfffc4 	movi	r2,-1
 4024700:	30801426 	beq	r6,r2,4024754 <__sflush_r+0x1e4>
 4024704:	8880030b 	ldhu	r2,12(r17)
 4024708:	8a000a17 	ldw	r8,40(r17)
 402470c:	003fae06 	br	40245c8 <__alt_data_end+0xfffe45c8>
 4024710:	98c00017 	ldw	r3,0(r19)
 4024714:	183fba26 	beq	r3,zero,4024600 <__alt_data_end+0xfffe4600>
 4024718:	01000744 	movi	r4,29
 402471c:	19000626 	beq	r3,r4,4024738 <__sflush_r+0x1c8>
 4024720:	01000584 	movi	r4,22
 4024724:	19000426 	beq	r3,r4,4024738 <__sflush_r+0x1c8>
 4024728:	88c0030b 	ldhu	r3,12(r17)
 402472c:	18c01014 	ori	r3,r3,64
 4024730:	88c0030d 	sth	r3,12(r17)
 4024734:	003fc306 	br	4024644 <__alt_data_end+0xfffe4644>
 4024738:	8880030b 	ldhu	r2,12(r17)
 402473c:	88c00417 	ldw	r3,16(r17)
 4024740:	88000115 	stw	zero,4(r17)
 4024744:	10bdffcc 	andi	r2,r2,63487
 4024748:	8880030d 	sth	r2,12(r17)
 402474c:	88c00015 	stw	r3,0(r17)
 4024750:	003fb306 	br	4024620 <__alt_data_end+0xfffe4620>
 4024754:	98800017 	ldw	r2,0(r19)
 4024758:	103fea26 	beq	r2,zero,4024704 <__alt_data_end+0xfffe4704>
 402475c:	00c00744 	movi	r3,29
 4024760:	10c00226 	beq	r2,r3,402476c <__sflush_r+0x1fc>
 4024764:	00c00584 	movi	r3,22
 4024768:	10c0031e 	bne	r2,r3,4024778 <__sflush_r+0x208>
 402476c:	9c000015 	stw	r16,0(r19)
 4024770:	0005883a 	mov	r2,zero
 4024774:	003fb306 	br	4024644 <__alt_data_end+0xfffe4644>
 4024778:	88c0030b 	ldhu	r3,12(r17)
 402477c:	3005883a 	mov	r2,r6
 4024780:	18c01014 	ori	r3,r3,64
 4024784:	88c0030d 	sth	r3,12(r17)
 4024788:	003fae06 	br	4024644 <__alt_data_end+0xfffe4644>

0402478c <_fflush_r>:
 402478c:	defffd04 	addi	sp,sp,-12
 4024790:	dc000115 	stw	r16,4(sp)
 4024794:	dfc00215 	stw	ra,8(sp)
 4024798:	2021883a 	mov	r16,r4
 402479c:	20000226 	beq	r4,zero,40247a8 <_fflush_r+0x1c>
 40247a0:	20800e17 	ldw	r2,56(r4)
 40247a4:	10000c26 	beq	r2,zero,40247d8 <_fflush_r+0x4c>
 40247a8:	2880030f 	ldh	r2,12(r5)
 40247ac:	1000051e 	bne	r2,zero,40247c4 <_fflush_r+0x38>
 40247b0:	0005883a 	mov	r2,zero
 40247b4:	dfc00217 	ldw	ra,8(sp)
 40247b8:	dc000117 	ldw	r16,4(sp)
 40247bc:	dec00304 	addi	sp,sp,12
 40247c0:	f800283a 	ret
 40247c4:	8009883a 	mov	r4,r16
 40247c8:	dfc00217 	ldw	ra,8(sp)
 40247cc:	dc000117 	ldw	r16,4(sp)
 40247d0:	dec00304 	addi	sp,sp,12
 40247d4:	40245701 	jmpi	4024570 <__sflush_r>
 40247d8:	d9400015 	stw	r5,0(sp)
 40247dc:	4024b680 	call	4024b68 <__sinit>
 40247e0:	d9400017 	ldw	r5,0(sp)
 40247e4:	003ff006 	br	40247a8 <__alt_data_end+0xfffe47a8>

040247e8 <fflush>:
 40247e8:	20000526 	beq	r4,zero,4024800 <fflush+0x18>
 40247ec:	008100f4 	movhi	r2,1027
 40247f0:	10886b04 	addi	r2,r2,8620
 40247f4:	200b883a 	mov	r5,r4
 40247f8:	11000017 	ldw	r4,0(r2)
 40247fc:	402478c1 	jmpi	402478c <_fflush_r>
 4024800:	008100f4 	movhi	r2,1027
 4024804:	10886a04 	addi	r2,r2,8616
 4024808:	11000017 	ldw	r4,0(r2)
 402480c:	014100b4 	movhi	r5,1026
 4024810:	2951e304 	addi	r5,r5,18316
 4024814:	402556c1 	jmpi	402556c <_fwalk_reent>

04024818 <__fp_unlock>:
 4024818:	0005883a 	mov	r2,zero
 402481c:	f800283a 	ret

04024820 <_cleanup_r>:
 4024820:	014100f4 	movhi	r5,1027
 4024824:	29656104 	addi	r5,r5,-27260
 4024828:	402556c1 	jmpi	402556c <_fwalk_reent>

0402482c <__sinit.part.1>:
 402482c:	defff704 	addi	sp,sp,-36
 4024830:	00c100b4 	movhi	r3,1026
 4024834:	dfc00815 	stw	ra,32(sp)
 4024838:	ddc00715 	stw	r23,28(sp)
 402483c:	dd800615 	stw	r22,24(sp)
 4024840:	dd400515 	stw	r21,20(sp)
 4024844:	dd000415 	stw	r20,16(sp)
 4024848:	dcc00315 	stw	r19,12(sp)
 402484c:	dc800215 	stw	r18,8(sp)
 4024850:	dc400115 	stw	r17,4(sp)
 4024854:	dc000015 	stw	r16,0(sp)
 4024858:	18d20804 	addi	r3,r3,18464
 402485c:	24000117 	ldw	r16,4(r4)
 4024860:	20c00f15 	stw	r3,60(r4)
 4024864:	2080bb04 	addi	r2,r4,748
 4024868:	00c000c4 	movi	r3,3
 402486c:	20c0b915 	stw	r3,740(r4)
 4024870:	2080ba15 	stw	r2,744(r4)
 4024874:	2000b815 	stw	zero,736(r4)
 4024878:	05c00204 	movi	r23,8
 402487c:	00800104 	movi	r2,4
 4024880:	2025883a 	mov	r18,r4
 4024884:	b80d883a 	mov	r6,r23
 4024888:	81001704 	addi	r4,r16,92
 402488c:	000b883a 	mov	r5,zero
 4024890:	80000015 	stw	zero,0(r16)
 4024894:	80000115 	stw	zero,4(r16)
 4024898:	80000215 	stw	zero,8(r16)
 402489c:	8080030d 	sth	r2,12(r16)
 40248a0:	80001915 	stw	zero,100(r16)
 40248a4:	8000038d 	sth	zero,14(r16)
 40248a8:	80000415 	stw	zero,16(r16)
 40248ac:	80000515 	stw	zero,20(r16)
 40248b0:	80000615 	stw	zero,24(r16)
 40248b4:	402645c0 	call	402645c <memset>
 40248b8:	058100b4 	movhi	r22,1026
 40248bc:	94400217 	ldw	r17,8(r18)
 40248c0:	054100b4 	movhi	r21,1026
 40248c4:	050100b4 	movhi	r20,1026
 40248c8:	04c100b4 	movhi	r19,1026
 40248cc:	b59eeb04 	addi	r22,r22,31660
 40248d0:	ad5f0204 	addi	r21,r21,31752
 40248d4:	a51f2104 	addi	r20,r20,31876
 40248d8:	9cdf3804 	addi	r19,r19,31968
 40248dc:	85800815 	stw	r22,32(r16)
 40248e0:	85400915 	stw	r21,36(r16)
 40248e4:	85000a15 	stw	r20,40(r16)
 40248e8:	84c00b15 	stw	r19,44(r16)
 40248ec:	84000715 	stw	r16,28(r16)
 40248f0:	00800284 	movi	r2,10
 40248f4:	8880030d 	sth	r2,12(r17)
 40248f8:	00800044 	movi	r2,1
 40248fc:	b80d883a 	mov	r6,r23
 4024900:	89001704 	addi	r4,r17,92
 4024904:	000b883a 	mov	r5,zero
 4024908:	88000015 	stw	zero,0(r17)
 402490c:	88000115 	stw	zero,4(r17)
 4024910:	88000215 	stw	zero,8(r17)
 4024914:	88001915 	stw	zero,100(r17)
 4024918:	8880038d 	sth	r2,14(r17)
 402491c:	88000415 	stw	zero,16(r17)
 4024920:	88000515 	stw	zero,20(r17)
 4024924:	88000615 	stw	zero,24(r17)
 4024928:	402645c0 	call	402645c <memset>
 402492c:	94000317 	ldw	r16,12(r18)
 4024930:	00800484 	movi	r2,18
 4024934:	8c400715 	stw	r17,28(r17)
 4024938:	8d800815 	stw	r22,32(r17)
 402493c:	8d400915 	stw	r21,36(r17)
 4024940:	8d000a15 	stw	r20,40(r17)
 4024944:	8cc00b15 	stw	r19,44(r17)
 4024948:	8080030d 	sth	r2,12(r16)
 402494c:	00800084 	movi	r2,2
 4024950:	80000015 	stw	zero,0(r16)
 4024954:	80000115 	stw	zero,4(r16)
 4024958:	80000215 	stw	zero,8(r16)
 402495c:	80001915 	stw	zero,100(r16)
 4024960:	8080038d 	sth	r2,14(r16)
 4024964:	80000415 	stw	zero,16(r16)
 4024968:	80000515 	stw	zero,20(r16)
 402496c:	80000615 	stw	zero,24(r16)
 4024970:	b80d883a 	mov	r6,r23
 4024974:	000b883a 	mov	r5,zero
 4024978:	81001704 	addi	r4,r16,92
 402497c:	402645c0 	call	402645c <memset>
 4024980:	00800044 	movi	r2,1
 4024984:	84000715 	stw	r16,28(r16)
 4024988:	85800815 	stw	r22,32(r16)
 402498c:	85400915 	stw	r21,36(r16)
 4024990:	85000a15 	stw	r20,40(r16)
 4024994:	84c00b15 	stw	r19,44(r16)
 4024998:	90800e15 	stw	r2,56(r18)
 402499c:	dfc00817 	ldw	ra,32(sp)
 40249a0:	ddc00717 	ldw	r23,28(sp)
 40249a4:	dd800617 	ldw	r22,24(sp)
 40249a8:	dd400517 	ldw	r21,20(sp)
 40249ac:	dd000417 	ldw	r20,16(sp)
 40249b0:	dcc00317 	ldw	r19,12(sp)
 40249b4:	dc800217 	ldw	r18,8(sp)
 40249b8:	dc400117 	ldw	r17,4(sp)
 40249bc:	dc000017 	ldw	r16,0(sp)
 40249c0:	dec00904 	addi	sp,sp,36
 40249c4:	f800283a 	ret

040249c8 <__fp_lock>:
 40249c8:	0005883a 	mov	r2,zero
 40249cc:	f800283a 	ret

040249d0 <__sfmoreglue>:
 40249d0:	defffc04 	addi	sp,sp,-16
 40249d4:	dc400115 	stw	r17,4(sp)
 40249d8:	2c7fffc4 	addi	r17,r5,-1
 40249dc:	8c401a24 	muli	r17,r17,104
 40249e0:	dc800215 	stw	r18,8(sp)
 40249e4:	2825883a 	mov	r18,r5
 40249e8:	89401d04 	addi	r5,r17,116
 40249ec:	dc000015 	stw	r16,0(sp)
 40249f0:	dfc00315 	stw	ra,12(sp)
 40249f4:	40258c80 	call	40258c8 <_malloc_r>
 40249f8:	1021883a 	mov	r16,r2
 40249fc:	10000726 	beq	r2,zero,4024a1c <__sfmoreglue+0x4c>
 4024a00:	11000304 	addi	r4,r2,12
 4024a04:	10000015 	stw	zero,0(r2)
 4024a08:	14800115 	stw	r18,4(r2)
 4024a0c:	11000215 	stw	r4,8(r2)
 4024a10:	89801a04 	addi	r6,r17,104
 4024a14:	000b883a 	mov	r5,zero
 4024a18:	402645c0 	call	402645c <memset>
 4024a1c:	8005883a 	mov	r2,r16
 4024a20:	dfc00317 	ldw	ra,12(sp)
 4024a24:	dc800217 	ldw	r18,8(sp)
 4024a28:	dc400117 	ldw	r17,4(sp)
 4024a2c:	dc000017 	ldw	r16,0(sp)
 4024a30:	dec00404 	addi	sp,sp,16
 4024a34:	f800283a 	ret

04024a38 <__sfp>:
 4024a38:	defffb04 	addi	sp,sp,-20
 4024a3c:	dc000015 	stw	r16,0(sp)
 4024a40:	040100f4 	movhi	r16,1027
 4024a44:	84086a04 	addi	r16,r16,8616
 4024a48:	dcc00315 	stw	r19,12(sp)
 4024a4c:	2027883a 	mov	r19,r4
 4024a50:	81000017 	ldw	r4,0(r16)
 4024a54:	dfc00415 	stw	ra,16(sp)
 4024a58:	dc800215 	stw	r18,8(sp)
 4024a5c:	20800e17 	ldw	r2,56(r4)
 4024a60:	dc400115 	stw	r17,4(sp)
 4024a64:	1000021e 	bne	r2,zero,4024a70 <__sfp+0x38>
 4024a68:	402482c0 	call	402482c <__sinit.part.1>
 4024a6c:	81000017 	ldw	r4,0(r16)
 4024a70:	2480b804 	addi	r18,r4,736
 4024a74:	047fffc4 	movi	r17,-1
 4024a78:	91000117 	ldw	r4,4(r18)
 4024a7c:	94000217 	ldw	r16,8(r18)
 4024a80:	213fffc4 	addi	r4,r4,-1
 4024a84:	20000a16 	blt	r4,zero,4024ab0 <__sfp+0x78>
 4024a88:	8080030f 	ldh	r2,12(r16)
 4024a8c:	10000c26 	beq	r2,zero,4024ac0 <__sfp+0x88>
 4024a90:	80c01d04 	addi	r3,r16,116
 4024a94:	00000206 	br	4024aa0 <__sfp+0x68>
 4024a98:	18bfe60f 	ldh	r2,-104(r3)
 4024a9c:	10000826 	beq	r2,zero,4024ac0 <__sfp+0x88>
 4024aa0:	213fffc4 	addi	r4,r4,-1
 4024aa4:	1c3ffd04 	addi	r16,r3,-12
 4024aa8:	18c01a04 	addi	r3,r3,104
 4024aac:	247ffa1e 	bne	r4,r17,4024a98 <__alt_data_end+0xfffe4a98>
 4024ab0:	90800017 	ldw	r2,0(r18)
 4024ab4:	10001d26 	beq	r2,zero,4024b2c <__sfp+0xf4>
 4024ab8:	1025883a 	mov	r18,r2
 4024abc:	003fee06 	br	4024a78 <__alt_data_end+0xfffe4a78>
 4024ac0:	00bfffc4 	movi	r2,-1
 4024ac4:	8080038d 	sth	r2,14(r16)
 4024ac8:	00800044 	movi	r2,1
 4024acc:	8080030d 	sth	r2,12(r16)
 4024ad0:	80001915 	stw	zero,100(r16)
 4024ad4:	80000015 	stw	zero,0(r16)
 4024ad8:	80000215 	stw	zero,8(r16)
 4024adc:	80000115 	stw	zero,4(r16)
 4024ae0:	80000415 	stw	zero,16(r16)
 4024ae4:	80000515 	stw	zero,20(r16)
 4024ae8:	80000615 	stw	zero,24(r16)
 4024aec:	01800204 	movi	r6,8
 4024af0:	000b883a 	mov	r5,zero
 4024af4:	81001704 	addi	r4,r16,92
 4024af8:	402645c0 	call	402645c <memset>
 4024afc:	8005883a 	mov	r2,r16
 4024b00:	80000c15 	stw	zero,48(r16)
 4024b04:	80000d15 	stw	zero,52(r16)
 4024b08:	80001115 	stw	zero,68(r16)
 4024b0c:	80001215 	stw	zero,72(r16)
 4024b10:	dfc00417 	ldw	ra,16(sp)
 4024b14:	dcc00317 	ldw	r19,12(sp)
 4024b18:	dc800217 	ldw	r18,8(sp)
 4024b1c:	dc400117 	ldw	r17,4(sp)
 4024b20:	dc000017 	ldw	r16,0(sp)
 4024b24:	dec00504 	addi	sp,sp,20
 4024b28:	f800283a 	ret
 4024b2c:	01400104 	movi	r5,4
 4024b30:	9809883a 	mov	r4,r19
 4024b34:	40249d00 	call	40249d0 <__sfmoreglue>
 4024b38:	90800015 	stw	r2,0(r18)
 4024b3c:	103fde1e 	bne	r2,zero,4024ab8 <__alt_data_end+0xfffe4ab8>
 4024b40:	00800304 	movi	r2,12
 4024b44:	98800015 	stw	r2,0(r19)
 4024b48:	0005883a 	mov	r2,zero
 4024b4c:	003ff006 	br	4024b10 <__alt_data_end+0xfffe4b10>

04024b50 <_cleanup>:
 4024b50:	008100f4 	movhi	r2,1027
 4024b54:	10886a04 	addi	r2,r2,8616
 4024b58:	11000017 	ldw	r4,0(r2)
 4024b5c:	014100f4 	movhi	r5,1027
 4024b60:	29656104 	addi	r5,r5,-27260
 4024b64:	402556c1 	jmpi	402556c <_fwalk_reent>

04024b68 <__sinit>:
 4024b68:	20800e17 	ldw	r2,56(r4)
 4024b6c:	10000126 	beq	r2,zero,4024b74 <__sinit+0xc>
 4024b70:	f800283a 	ret
 4024b74:	402482c1 	jmpi	402482c <__sinit.part.1>

04024b78 <__sfp_lock_acquire>:
 4024b78:	f800283a 	ret

04024b7c <__sfp_lock_release>:
 4024b7c:	f800283a 	ret

04024b80 <__sinit_lock_acquire>:
 4024b80:	f800283a 	ret

04024b84 <__sinit_lock_release>:
 4024b84:	f800283a 	ret

04024b88 <__fp_lock_all>:
 4024b88:	008100f4 	movhi	r2,1027
 4024b8c:	10886b04 	addi	r2,r2,8620
 4024b90:	11000017 	ldw	r4,0(r2)
 4024b94:	014100b4 	movhi	r5,1026
 4024b98:	29527204 	addi	r5,r5,18888
 4024b9c:	40254a81 	jmpi	40254a8 <_fwalk>

04024ba0 <__fp_unlock_all>:
 4024ba0:	008100f4 	movhi	r2,1027
 4024ba4:	10886b04 	addi	r2,r2,8620
 4024ba8:	11000017 	ldw	r4,0(r2)
 4024bac:	014100b4 	movhi	r5,1026
 4024bb0:	29520604 	addi	r5,r5,18456
 4024bb4:	40254a81 	jmpi	40254a8 <_fwalk>

04024bb8 <_malloc_trim_r>:
 4024bb8:	defffb04 	addi	sp,sp,-20
 4024bbc:	dcc00315 	stw	r19,12(sp)
 4024bc0:	04c100f4 	movhi	r19,1027
 4024bc4:	dc800215 	stw	r18,8(sp)
 4024bc8:	dc400115 	stw	r17,4(sp)
 4024bcc:	dc000015 	stw	r16,0(sp)
 4024bd0:	dfc00415 	stw	ra,16(sp)
 4024bd4:	2821883a 	mov	r16,r5
 4024bd8:	9cc2ac04 	addi	r19,r19,2736
 4024bdc:	2025883a 	mov	r18,r4
 4024be0:	402d8700 	call	402d870 <__malloc_lock>
 4024be4:	98800217 	ldw	r2,8(r19)
 4024be8:	14400117 	ldw	r17,4(r2)
 4024bec:	00bfff04 	movi	r2,-4
 4024bf0:	88a2703a 	and	r17,r17,r2
 4024bf4:	8c21c83a 	sub	r16,r17,r16
 4024bf8:	8403fbc4 	addi	r16,r16,4079
 4024bfc:	8020d33a 	srli	r16,r16,12
 4024c00:	0083ffc4 	movi	r2,4095
 4024c04:	843fffc4 	addi	r16,r16,-1
 4024c08:	8020933a 	slli	r16,r16,12
 4024c0c:	1400060e 	bge	r2,r16,4024c28 <_malloc_trim_r+0x70>
 4024c10:	000b883a 	mov	r5,zero
 4024c14:	9009883a 	mov	r4,r18
 4024c18:	4027b580 	call	4027b58 <_sbrk_r>
 4024c1c:	98c00217 	ldw	r3,8(r19)
 4024c20:	1c47883a 	add	r3,r3,r17
 4024c24:	10c00a26 	beq	r2,r3,4024c50 <_malloc_trim_r+0x98>
 4024c28:	9009883a 	mov	r4,r18
 4024c2c:	402d8940 	call	402d894 <__malloc_unlock>
 4024c30:	0005883a 	mov	r2,zero
 4024c34:	dfc00417 	ldw	ra,16(sp)
 4024c38:	dcc00317 	ldw	r19,12(sp)
 4024c3c:	dc800217 	ldw	r18,8(sp)
 4024c40:	dc400117 	ldw	r17,4(sp)
 4024c44:	dc000017 	ldw	r16,0(sp)
 4024c48:	dec00504 	addi	sp,sp,20
 4024c4c:	f800283a 	ret
 4024c50:	040bc83a 	sub	r5,zero,r16
 4024c54:	9009883a 	mov	r4,r18
 4024c58:	4027b580 	call	4027b58 <_sbrk_r>
 4024c5c:	00ffffc4 	movi	r3,-1
 4024c60:	10c00d26 	beq	r2,r3,4024c98 <_malloc_trim_r+0xe0>
 4024c64:	00c100f4 	movhi	r3,1027
 4024c68:	18cf8404 	addi	r3,r3,15888
 4024c6c:	18800017 	ldw	r2,0(r3)
 4024c70:	99000217 	ldw	r4,8(r19)
 4024c74:	8c23c83a 	sub	r17,r17,r16
 4024c78:	8c400054 	ori	r17,r17,1
 4024c7c:	1421c83a 	sub	r16,r2,r16
 4024c80:	24400115 	stw	r17,4(r4)
 4024c84:	9009883a 	mov	r4,r18
 4024c88:	1c000015 	stw	r16,0(r3)
 4024c8c:	402d8940 	call	402d894 <__malloc_unlock>
 4024c90:	00800044 	movi	r2,1
 4024c94:	003fe706 	br	4024c34 <__alt_data_end+0xfffe4c34>
 4024c98:	000b883a 	mov	r5,zero
 4024c9c:	9009883a 	mov	r4,r18
 4024ca0:	4027b580 	call	4027b58 <_sbrk_r>
 4024ca4:	99000217 	ldw	r4,8(r19)
 4024ca8:	014003c4 	movi	r5,15
 4024cac:	1107c83a 	sub	r3,r2,r4
 4024cb0:	28ffdd0e 	bge	r5,r3,4024c28 <__alt_data_end+0xfffe4c28>
 4024cb4:	014100f4 	movhi	r5,1027
 4024cb8:	29486d04 	addi	r5,r5,8628
 4024cbc:	29400017 	ldw	r5,0(r5)
 4024cc0:	18c00054 	ori	r3,r3,1
 4024cc4:	20c00115 	stw	r3,4(r4)
 4024cc8:	00c100f4 	movhi	r3,1027
 4024ccc:	1145c83a 	sub	r2,r2,r5
 4024cd0:	18cf8404 	addi	r3,r3,15888
 4024cd4:	18800015 	stw	r2,0(r3)
 4024cd8:	003fd306 	br	4024c28 <__alt_data_end+0xfffe4c28>

04024cdc <_free_r>:
 4024cdc:	28004126 	beq	r5,zero,4024de4 <_free_r+0x108>
 4024ce0:	defffd04 	addi	sp,sp,-12
 4024ce4:	dc400115 	stw	r17,4(sp)
 4024ce8:	dc000015 	stw	r16,0(sp)
 4024cec:	2023883a 	mov	r17,r4
 4024cf0:	2821883a 	mov	r16,r5
 4024cf4:	dfc00215 	stw	ra,8(sp)
 4024cf8:	402d8700 	call	402d870 <__malloc_lock>
 4024cfc:	81ffff17 	ldw	r7,-4(r16)
 4024d00:	00bfff84 	movi	r2,-2
 4024d04:	010100f4 	movhi	r4,1027
 4024d08:	81bffe04 	addi	r6,r16,-8
 4024d0c:	3884703a 	and	r2,r7,r2
 4024d10:	2102ac04 	addi	r4,r4,2736
 4024d14:	308b883a 	add	r5,r6,r2
 4024d18:	2a400117 	ldw	r9,4(r5)
 4024d1c:	22000217 	ldw	r8,8(r4)
 4024d20:	00ffff04 	movi	r3,-4
 4024d24:	48c6703a 	and	r3,r9,r3
 4024d28:	2a005726 	beq	r5,r8,4024e88 <_free_r+0x1ac>
 4024d2c:	28c00115 	stw	r3,4(r5)
 4024d30:	39c0004c 	andi	r7,r7,1
 4024d34:	3800091e 	bne	r7,zero,4024d5c <_free_r+0x80>
 4024d38:	823ffe17 	ldw	r8,-8(r16)
 4024d3c:	22400204 	addi	r9,r4,8
 4024d40:	320dc83a 	sub	r6,r6,r8
 4024d44:	31c00217 	ldw	r7,8(r6)
 4024d48:	1205883a 	add	r2,r2,r8
 4024d4c:	3a406526 	beq	r7,r9,4024ee4 <_free_r+0x208>
 4024d50:	32000317 	ldw	r8,12(r6)
 4024d54:	3a000315 	stw	r8,12(r7)
 4024d58:	41c00215 	stw	r7,8(r8)
 4024d5c:	28cf883a 	add	r7,r5,r3
 4024d60:	39c00117 	ldw	r7,4(r7)
 4024d64:	39c0004c 	andi	r7,r7,1
 4024d68:	38003a26 	beq	r7,zero,4024e54 <_free_r+0x178>
 4024d6c:	10c00054 	ori	r3,r2,1
 4024d70:	30c00115 	stw	r3,4(r6)
 4024d74:	3087883a 	add	r3,r6,r2
 4024d78:	18800015 	stw	r2,0(r3)
 4024d7c:	00c07fc4 	movi	r3,511
 4024d80:	18801936 	bltu	r3,r2,4024de8 <_free_r+0x10c>
 4024d84:	1004d0fa 	srli	r2,r2,3
 4024d88:	01c00044 	movi	r7,1
 4024d8c:	21400117 	ldw	r5,4(r4)
 4024d90:	10c00044 	addi	r3,r2,1
 4024d94:	18c7883a 	add	r3,r3,r3
 4024d98:	1005d0ba 	srai	r2,r2,2
 4024d9c:	18c7883a 	add	r3,r3,r3
 4024da0:	18c7883a 	add	r3,r3,r3
 4024da4:	1907883a 	add	r3,r3,r4
 4024da8:	3884983a 	sll	r2,r7,r2
 4024dac:	19c00017 	ldw	r7,0(r3)
 4024db0:	1a3ffe04 	addi	r8,r3,-8
 4024db4:	1144b03a 	or	r2,r2,r5
 4024db8:	32000315 	stw	r8,12(r6)
 4024dbc:	31c00215 	stw	r7,8(r6)
 4024dc0:	20800115 	stw	r2,4(r4)
 4024dc4:	19800015 	stw	r6,0(r3)
 4024dc8:	39800315 	stw	r6,12(r7)
 4024dcc:	8809883a 	mov	r4,r17
 4024dd0:	dfc00217 	ldw	ra,8(sp)
 4024dd4:	dc400117 	ldw	r17,4(sp)
 4024dd8:	dc000017 	ldw	r16,0(sp)
 4024ddc:	dec00304 	addi	sp,sp,12
 4024de0:	402d8941 	jmpi	402d894 <__malloc_unlock>
 4024de4:	f800283a 	ret
 4024de8:	100ad27a 	srli	r5,r2,9
 4024dec:	00c00104 	movi	r3,4
 4024df0:	19404a36 	bltu	r3,r5,4024f1c <_free_r+0x240>
 4024df4:	100ad1ba 	srli	r5,r2,6
 4024df8:	28c00e44 	addi	r3,r5,57
 4024dfc:	18c7883a 	add	r3,r3,r3
 4024e00:	29400e04 	addi	r5,r5,56
 4024e04:	18c7883a 	add	r3,r3,r3
 4024e08:	18c7883a 	add	r3,r3,r3
 4024e0c:	1909883a 	add	r4,r3,r4
 4024e10:	20c00017 	ldw	r3,0(r4)
 4024e14:	01c100f4 	movhi	r7,1027
 4024e18:	213ffe04 	addi	r4,r4,-8
 4024e1c:	39c2ac04 	addi	r7,r7,2736
 4024e20:	20c04426 	beq	r4,r3,4024f34 <_free_r+0x258>
 4024e24:	01ffff04 	movi	r7,-4
 4024e28:	19400117 	ldw	r5,4(r3)
 4024e2c:	29ca703a 	and	r5,r5,r7
 4024e30:	1140022e 	bgeu	r2,r5,4024e3c <_free_r+0x160>
 4024e34:	18c00217 	ldw	r3,8(r3)
 4024e38:	20fffb1e 	bne	r4,r3,4024e28 <__alt_data_end+0xfffe4e28>
 4024e3c:	19000317 	ldw	r4,12(r3)
 4024e40:	31000315 	stw	r4,12(r6)
 4024e44:	30c00215 	stw	r3,8(r6)
 4024e48:	21800215 	stw	r6,8(r4)
 4024e4c:	19800315 	stw	r6,12(r3)
 4024e50:	003fde06 	br	4024dcc <__alt_data_end+0xfffe4dcc>
 4024e54:	29c00217 	ldw	r7,8(r5)
 4024e58:	10c5883a 	add	r2,r2,r3
 4024e5c:	00c100f4 	movhi	r3,1027
 4024e60:	18c2ae04 	addi	r3,r3,2744
 4024e64:	38c03b26 	beq	r7,r3,4024f54 <_free_r+0x278>
 4024e68:	2a000317 	ldw	r8,12(r5)
 4024e6c:	11400054 	ori	r5,r2,1
 4024e70:	3087883a 	add	r3,r6,r2
 4024e74:	3a000315 	stw	r8,12(r7)
 4024e78:	41c00215 	stw	r7,8(r8)
 4024e7c:	31400115 	stw	r5,4(r6)
 4024e80:	18800015 	stw	r2,0(r3)
 4024e84:	003fbd06 	br	4024d7c <__alt_data_end+0xfffe4d7c>
 4024e88:	39c0004c 	andi	r7,r7,1
 4024e8c:	10c5883a 	add	r2,r2,r3
 4024e90:	3800071e 	bne	r7,zero,4024eb0 <_free_r+0x1d4>
 4024e94:	81fffe17 	ldw	r7,-8(r16)
 4024e98:	31cdc83a 	sub	r6,r6,r7
 4024e9c:	30c00317 	ldw	r3,12(r6)
 4024ea0:	31400217 	ldw	r5,8(r6)
 4024ea4:	11c5883a 	add	r2,r2,r7
 4024ea8:	28c00315 	stw	r3,12(r5)
 4024eac:	19400215 	stw	r5,8(r3)
 4024eb0:	10c00054 	ori	r3,r2,1
 4024eb4:	30c00115 	stw	r3,4(r6)
 4024eb8:	00c100f4 	movhi	r3,1027
 4024ebc:	18c86e04 	addi	r3,r3,8632
 4024ec0:	18c00017 	ldw	r3,0(r3)
 4024ec4:	21800215 	stw	r6,8(r4)
 4024ec8:	10ffc036 	bltu	r2,r3,4024dcc <__alt_data_end+0xfffe4dcc>
 4024ecc:	008100f4 	movhi	r2,1027
 4024ed0:	108f7b04 	addi	r2,r2,15852
 4024ed4:	11400017 	ldw	r5,0(r2)
 4024ed8:	8809883a 	mov	r4,r17
 4024edc:	4024bb80 	call	4024bb8 <_malloc_trim_r>
 4024ee0:	003fba06 	br	4024dcc <__alt_data_end+0xfffe4dcc>
 4024ee4:	28c9883a 	add	r4,r5,r3
 4024ee8:	21000117 	ldw	r4,4(r4)
 4024eec:	2100004c 	andi	r4,r4,1
 4024ef0:	2000391e 	bne	r4,zero,4024fd8 <_free_r+0x2fc>
 4024ef4:	29c00217 	ldw	r7,8(r5)
 4024ef8:	29000317 	ldw	r4,12(r5)
 4024efc:	1885883a 	add	r2,r3,r2
 4024f00:	10c00054 	ori	r3,r2,1
 4024f04:	39000315 	stw	r4,12(r7)
 4024f08:	21c00215 	stw	r7,8(r4)
 4024f0c:	30c00115 	stw	r3,4(r6)
 4024f10:	308d883a 	add	r6,r6,r2
 4024f14:	30800015 	stw	r2,0(r6)
 4024f18:	003fac06 	br	4024dcc <__alt_data_end+0xfffe4dcc>
 4024f1c:	00c00504 	movi	r3,20
 4024f20:	19401536 	bltu	r3,r5,4024f78 <_free_r+0x29c>
 4024f24:	28c01704 	addi	r3,r5,92
 4024f28:	18c7883a 	add	r3,r3,r3
 4024f2c:	294016c4 	addi	r5,r5,91
 4024f30:	003fb406 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024f34:	280bd0ba 	srai	r5,r5,2
 4024f38:	00c00044 	movi	r3,1
 4024f3c:	38800117 	ldw	r2,4(r7)
 4024f40:	194a983a 	sll	r5,r3,r5
 4024f44:	2007883a 	mov	r3,r4
 4024f48:	2884b03a 	or	r2,r5,r2
 4024f4c:	38800115 	stw	r2,4(r7)
 4024f50:	003fbb06 	br	4024e40 <__alt_data_end+0xfffe4e40>
 4024f54:	21800515 	stw	r6,20(r4)
 4024f58:	21800415 	stw	r6,16(r4)
 4024f5c:	10c00054 	ori	r3,r2,1
 4024f60:	31c00315 	stw	r7,12(r6)
 4024f64:	31c00215 	stw	r7,8(r6)
 4024f68:	30c00115 	stw	r3,4(r6)
 4024f6c:	308d883a 	add	r6,r6,r2
 4024f70:	30800015 	stw	r2,0(r6)
 4024f74:	003f9506 	br	4024dcc <__alt_data_end+0xfffe4dcc>
 4024f78:	00c01504 	movi	r3,84
 4024f7c:	19400536 	bltu	r3,r5,4024f94 <_free_r+0x2b8>
 4024f80:	100ad33a 	srli	r5,r2,12
 4024f84:	28c01bc4 	addi	r3,r5,111
 4024f88:	18c7883a 	add	r3,r3,r3
 4024f8c:	29401b84 	addi	r5,r5,110
 4024f90:	003f9c06 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024f94:	00c05504 	movi	r3,340
 4024f98:	19400536 	bltu	r3,r5,4024fb0 <_free_r+0x2d4>
 4024f9c:	100ad3fa 	srli	r5,r2,15
 4024fa0:	28c01e04 	addi	r3,r5,120
 4024fa4:	18c7883a 	add	r3,r3,r3
 4024fa8:	29401dc4 	addi	r5,r5,119
 4024fac:	003f9506 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024fb0:	00c15504 	movi	r3,1364
 4024fb4:	19400536 	bltu	r3,r5,4024fcc <_free_r+0x2f0>
 4024fb8:	100ad4ba 	srli	r5,r2,18
 4024fbc:	28c01f44 	addi	r3,r5,125
 4024fc0:	18c7883a 	add	r3,r3,r3
 4024fc4:	29401f04 	addi	r5,r5,124
 4024fc8:	003f8e06 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024fcc:	00c03f84 	movi	r3,254
 4024fd0:	01401f84 	movi	r5,126
 4024fd4:	003f8b06 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024fd8:	10c00054 	ori	r3,r2,1
 4024fdc:	30c00115 	stw	r3,4(r6)
 4024fe0:	308d883a 	add	r6,r6,r2
 4024fe4:	30800015 	stw	r2,0(r6)
 4024fe8:	003f7806 	br	4024dcc <__alt_data_end+0xfffe4dcc>

04024fec <__sfvwrite_r>:
 4024fec:	30800217 	ldw	r2,8(r6)
 4024ff0:	10006726 	beq	r2,zero,4025190 <__sfvwrite_r+0x1a4>
 4024ff4:	28c0030b 	ldhu	r3,12(r5)
 4024ff8:	defff404 	addi	sp,sp,-48
 4024ffc:	dd400715 	stw	r21,28(sp)
 4025000:	dd000615 	stw	r20,24(sp)
 4025004:	dc000215 	stw	r16,8(sp)
 4025008:	dfc00b15 	stw	ra,44(sp)
 402500c:	df000a15 	stw	fp,40(sp)
 4025010:	ddc00915 	stw	r23,36(sp)
 4025014:	dd800815 	stw	r22,32(sp)
 4025018:	dcc00515 	stw	r19,20(sp)
 402501c:	dc800415 	stw	r18,16(sp)
 4025020:	dc400315 	stw	r17,12(sp)
 4025024:	1880020c 	andi	r2,r3,8
 4025028:	2821883a 	mov	r16,r5
 402502c:	202b883a 	mov	r21,r4
 4025030:	3029883a 	mov	r20,r6
 4025034:	10002726 	beq	r2,zero,40250d4 <__sfvwrite_r+0xe8>
 4025038:	28800417 	ldw	r2,16(r5)
 402503c:	10002526 	beq	r2,zero,40250d4 <__sfvwrite_r+0xe8>
 4025040:	1880008c 	andi	r2,r3,2
 4025044:	a4400017 	ldw	r17,0(r20)
 4025048:	10002a26 	beq	r2,zero,40250f4 <__sfvwrite_r+0x108>
 402504c:	05a00034 	movhi	r22,32768
 4025050:	0027883a 	mov	r19,zero
 4025054:	0025883a 	mov	r18,zero
 4025058:	b5bf0004 	addi	r22,r22,-1024
 402505c:	980d883a 	mov	r6,r19
 4025060:	a809883a 	mov	r4,r21
 4025064:	90004626 	beq	r18,zero,4025180 <__sfvwrite_r+0x194>
 4025068:	900f883a 	mov	r7,r18
 402506c:	b480022e 	bgeu	r22,r18,4025078 <__sfvwrite_r+0x8c>
 4025070:	01e00034 	movhi	r7,32768
 4025074:	39ff0004 	addi	r7,r7,-1024
 4025078:	80800917 	ldw	r2,36(r16)
 402507c:	81400717 	ldw	r5,28(r16)
 4025080:	103ee83a 	callr	r2
 4025084:	0080570e 	bge	zero,r2,40251e4 <__sfvwrite_r+0x1f8>
 4025088:	a0c00217 	ldw	r3,8(r20)
 402508c:	98a7883a 	add	r19,r19,r2
 4025090:	90a5c83a 	sub	r18,r18,r2
 4025094:	1885c83a 	sub	r2,r3,r2
 4025098:	a0800215 	stw	r2,8(r20)
 402509c:	103fef1e 	bne	r2,zero,402505c <__alt_data_end+0xfffe505c>
 40250a0:	0005883a 	mov	r2,zero
 40250a4:	dfc00b17 	ldw	ra,44(sp)
 40250a8:	df000a17 	ldw	fp,40(sp)
 40250ac:	ddc00917 	ldw	r23,36(sp)
 40250b0:	dd800817 	ldw	r22,32(sp)
 40250b4:	dd400717 	ldw	r21,28(sp)
 40250b8:	dd000617 	ldw	r20,24(sp)
 40250bc:	dcc00517 	ldw	r19,20(sp)
 40250c0:	dc800417 	ldw	r18,16(sp)
 40250c4:	dc400317 	ldw	r17,12(sp)
 40250c8:	dc000217 	ldw	r16,8(sp)
 40250cc:	dec00c04 	addi	sp,sp,48
 40250d0:	f800283a 	ret
 40250d4:	800b883a 	mov	r5,r16
 40250d8:	a809883a 	mov	r4,r21
 40250dc:	4022b940 	call	4022b94 <__swsetup_r>
 40250e0:	1000eb1e 	bne	r2,zero,4025490 <__sfvwrite_r+0x4a4>
 40250e4:	80c0030b 	ldhu	r3,12(r16)
 40250e8:	a4400017 	ldw	r17,0(r20)
 40250ec:	1880008c 	andi	r2,r3,2
 40250f0:	103fd61e 	bne	r2,zero,402504c <__alt_data_end+0xfffe504c>
 40250f4:	1880004c 	andi	r2,r3,1
 40250f8:	10003f1e 	bne	r2,zero,40251f8 <__sfvwrite_r+0x20c>
 40250fc:	0039883a 	mov	fp,zero
 4025100:	0025883a 	mov	r18,zero
 4025104:	90001a26 	beq	r18,zero,4025170 <__sfvwrite_r+0x184>
 4025108:	1880800c 	andi	r2,r3,512
 402510c:	84c00217 	ldw	r19,8(r16)
 4025110:	10002126 	beq	r2,zero,4025198 <__sfvwrite_r+0x1ac>
 4025114:	982f883a 	mov	r23,r19
 4025118:	94c09336 	bltu	r18,r19,4025368 <__sfvwrite_r+0x37c>
 402511c:	1881200c 	andi	r2,r3,1152
 4025120:	10009e1e 	bne	r2,zero,402539c <__sfvwrite_r+0x3b0>
 4025124:	81000017 	ldw	r4,0(r16)
 4025128:	b80d883a 	mov	r6,r23
 402512c:	e00b883a 	mov	r5,fp
 4025130:	40263000 	call	4026300 <memmove>
 4025134:	80c00217 	ldw	r3,8(r16)
 4025138:	81000017 	ldw	r4,0(r16)
 402513c:	9005883a 	mov	r2,r18
 4025140:	1ce7c83a 	sub	r19,r3,r19
 4025144:	25cf883a 	add	r7,r4,r23
 4025148:	84c00215 	stw	r19,8(r16)
 402514c:	81c00015 	stw	r7,0(r16)
 4025150:	a0c00217 	ldw	r3,8(r20)
 4025154:	e0b9883a 	add	fp,fp,r2
 4025158:	90a5c83a 	sub	r18,r18,r2
 402515c:	18a7c83a 	sub	r19,r3,r2
 4025160:	a4c00215 	stw	r19,8(r20)
 4025164:	983fce26 	beq	r19,zero,40250a0 <__alt_data_end+0xfffe50a0>
 4025168:	80c0030b 	ldhu	r3,12(r16)
 402516c:	903fe61e 	bne	r18,zero,4025108 <__alt_data_end+0xfffe5108>
 4025170:	8f000017 	ldw	fp,0(r17)
 4025174:	8c800117 	ldw	r18,4(r17)
 4025178:	8c400204 	addi	r17,r17,8
 402517c:	003fe106 	br	4025104 <__alt_data_end+0xfffe5104>
 4025180:	8cc00017 	ldw	r19,0(r17)
 4025184:	8c800117 	ldw	r18,4(r17)
 4025188:	8c400204 	addi	r17,r17,8
 402518c:	003fb306 	br	402505c <__alt_data_end+0xfffe505c>
 4025190:	0005883a 	mov	r2,zero
 4025194:	f800283a 	ret
 4025198:	81000017 	ldw	r4,0(r16)
 402519c:	80800417 	ldw	r2,16(r16)
 40251a0:	11005736 	bltu	r2,r4,4025300 <__sfvwrite_r+0x314>
 40251a4:	85c00517 	ldw	r23,20(r16)
 40251a8:	95c05536 	bltu	r18,r23,4025300 <__sfvwrite_r+0x314>
 40251ac:	00a00034 	movhi	r2,32768
 40251b0:	10bfffc4 	addi	r2,r2,-1
 40251b4:	9009883a 	mov	r4,r18
 40251b8:	1480012e 	bgeu	r2,r18,40251c0 <__sfvwrite_r+0x1d4>
 40251bc:	1009883a 	mov	r4,r2
 40251c0:	b80b883a 	mov	r5,r23
 40251c4:	402a7f00 	call	402a7f0 <__divsi3>
 40251c8:	15cf383a 	mul	r7,r2,r23
 40251cc:	81400717 	ldw	r5,28(r16)
 40251d0:	80800917 	ldw	r2,36(r16)
 40251d4:	e00d883a 	mov	r6,fp
 40251d8:	a809883a 	mov	r4,r21
 40251dc:	103ee83a 	callr	r2
 40251e0:	00bfdb16 	blt	zero,r2,4025150 <__alt_data_end+0xfffe5150>
 40251e4:	8080030b 	ldhu	r2,12(r16)
 40251e8:	10801014 	ori	r2,r2,64
 40251ec:	8080030d 	sth	r2,12(r16)
 40251f0:	00bfffc4 	movi	r2,-1
 40251f4:	003fab06 	br	40250a4 <__alt_data_end+0xfffe50a4>
 40251f8:	0027883a 	mov	r19,zero
 40251fc:	0011883a 	mov	r8,zero
 4025200:	0039883a 	mov	fp,zero
 4025204:	0025883a 	mov	r18,zero
 4025208:	90001f26 	beq	r18,zero,4025288 <__sfvwrite_r+0x29c>
 402520c:	40005a26 	beq	r8,zero,4025378 <__sfvwrite_r+0x38c>
 4025210:	982d883a 	mov	r22,r19
 4025214:	94c0012e 	bgeu	r18,r19,402521c <__sfvwrite_r+0x230>
 4025218:	902d883a 	mov	r22,r18
 402521c:	81000017 	ldw	r4,0(r16)
 4025220:	80800417 	ldw	r2,16(r16)
 4025224:	b02f883a 	mov	r23,r22
 4025228:	81c00517 	ldw	r7,20(r16)
 402522c:	1100032e 	bgeu	r2,r4,402523c <__sfvwrite_r+0x250>
 4025230:	80c00217 	ldw	r3,8(r16)
 4025234:	38c7883a 	add	r3,r7,r3
 4025238:	1d801816 	blt	r3,r22,402529c <__sfvwrite_r+0x2b0>
 402523c:	b1c03e16 	blt	r22,r7,4025338 <__sfvwrite_r+0x34c>
 4025240:	80800917 	ldw	r2,36(r16)
 4025244:	81400717 	ldw	r5,28(r16)
 4025248:	e00d883a 	mov	r6,fp
 402524c:	da000115 	stw	r8,4(sp)
 4025250:	a809883a 	mov	r4,r21
 4025254:	103ee83a 	callr	r2
 4025258:	102f883a 	mov	r23,r2
 402525c:	da000117 	ldw	r8,4(sp)
 4025260:	00bfe00e 	bge	zero,r2,40251e4 <__alt_data_end+0xfffe51e4>
 4025264:	9de7c83a 	sub	r19,r19,r23
 4025268:	98001f26 	beq	r19,zero,40252e8 <__sfvwrite_r+0x2fc>
 402526c:	a0800217 	ldw	r2,8(r20)
 4025270:	e5f9883a 	add	fp,fp,r23
 4025274:	95e5c83a 	sub	r18,r18,r23
 4025278:	15efc83a 	sub	r23,r2,r23
 402527c:	a5c00215 	stw	r23,8(r20)
 4025280:	b83f8726 	beq	r23,zero,40250a0 <__alt_data_end+0xfffe50a0>
 4025284:	903fe11e 	bne	r18,zero,402520c <__alt_data_end+0xfffe520c>
 4025288:	8f000017 	ldw	fp,0(r17)
 402528c:	8c800117 	ldw	r18,4(r17)
 4025290:	0011883a 	mov	r8,zero
 4025294:	8c400204 	addi	r17,r17,8
 4025298:	003fdb06 	br	4025208 <__alt_data_end+0xfffe5208>
 402529c:	180d883a 	mov	r6,r3
 40252a0:	e00b883a 	mov	r5,fp
 40252a4:	da000115 	stw	r8,4(sp)
 40252a8:	d8c00015 	stw	r3,0(sp)
 40252ac:	40263000 	call	4026300 <memmove>
 40252b0:	d8c00017 	ldw	r3,0(sp)
 40252b4:	80800017 	ldw	r2,0(r16)
 40252b8:	800b883a 	mov	r5,r16
 40252bc:	a809883a 	mov	r4,r21
 40252c0:	10c5883a 	add	r2,r2,r3
 40252c4:	80800015 	stw	r2,0(r16)
 40252c8:	d8c00015 	stw	r3,0(sp)
 40252cc:	402478c0 	call	402478c <_fflush_r>
 40252d0:	d8c00017 	ldw	r3,0(sp)
 40252d4:	da000117 	ldw	r8,4(sp)
 40252d8:	103fc21e 	bne	r2,zero,40251e4 <__alt_data_end+0xfffe51e4>
 40252dc:	182f883a 	mov	r23,r3
 40252e0:	9de7c83a 	sub	r19,r19,r23
 40252e4:	983fe11e 	bne	r19,zero,402526c <__alt_data_end+0xfffe526c>
 40252e8:	800b883a 	mov	r5,r16
 40252ec:	a809883a 	mov	r4,r21
 40252f0:	402478c0 	call	402478c <_fflush_r>
 40252f4:	103fbb1e 	bne	r2,zero,40251e4 <__alt_data_end+0xfffe51e4>
 40252f8:	0011883a 	mov	r8,zero
 40252fc:	003fdb06 	br	402526c <__alt_data_end+0xfffe526c>
 4025300:	94c0012e 	bgeu	r18,r19,4025308 <__sfvwrite_r+0x31c>
 4025304:	9027883a 	mov	r19,r18
 4025308:	980d883a 	mov	r6,r19
 402530c:	e00b883a 	mov	r5,fp
 4025310:	40263000 	call	4026300 <memmove>
 4025314:	80800217 	ldw	r2,8(r16)
 4025318:	80c00017 	ldw	r3,0(r16)
 402531c:	14c5c83a 	sub	r2,r2,r19
 4025320:	1cc7883a 	add	r3,r3,r19
 4025324:	80800215 	stw	r2,8(r16)
 4025328:	80c00015 	stw	r3,0(r16)
 402532c:	10004326 	beq	r2,zero,402543c <__sfvwrite_r+0x450>
 4025330:	9805883a 	mov	r2,r19
 4025334:	003f8606 	br	4025150 <__alt_data_end+0xfffe5150>
 4025338:	b00d883a 	mov	r6,r22
 402533c:	e00b883a 	mov	r5,fp
 4025340:	da000115 	stw	r8,4(sp)
 4025344:	40263000 	call	4026300 <memmove>
 4025348:	80800217 	ldw	r2,8(r16)
 402534c:	80c00017 	ldw	r3,0(r16)
 4025350:	da000117 	ldw	r8,4(sp)
 4025354:	1585c83a 	sub	r2,r2,r22
 4025358:	1dad883a 	add	r22,r3,r22
 402535c:	80800215 	stw	r2,8(r16)
 4025360:	85800015 	stw	r22,0(r16)
 4025364:	003fbf06 	br	4025264 <__alt_data_end+0xfffe5264>
 4025368:	81000017 	ldw	r4,0(r16)
 402536c:	9027883a 	mov	r19,r18
 4025370:	902f883a 	mov	r23,r18
 4025374:	003f6c06 	br	4025128 <__alt_data_end+0xfffe5128>
 4025378:	900d883a 	mov	r6,r18
 402537c:	01400284 	movi	r5,10
 4025380:	e009883a 	mov	r4,fp
 4025384:	40260d40 	call	40260d4 <memchr>
 4025388:	10003e26 	beq	r2,zero,4025484 <__sfvwrite_r+0x498>
 402538c:	10800044 	addi	r2,r2,1
 4025390:	1727c83a 	sub	r19,r2,fp
 4025394:	02000044 	movi	r8,1
 4025398:	003f9d06 	br	4025210 <__alt_data_end+0xfffe5210>
 402539c:	80800517 	ldw	r2,20(r16)
 40253a0:	81400417 	ldw	r5,16(r16)
 40253a4:	81c00017 	ldw	r7,0(r16)
 40253a8:	10a7883a 	add	r19,r2,r2
 40253ac:	9885883a 	add	r2,r19,r2
 40253b0:	1026d7fa 	srli	r19,r2,31
 40253b4:	396dc83a 	sub	r22,r7,r5
 40253b8:	b1000044 	addi	r4,r22,1
 40253bc:	9885883a 	add	r2,r19,r2
 40253c0:	1027d07a 	srai	r19,r2,1
 40253c4:	2485883a 	add	r2,r4,r18
 40253c8:	980d883a 	mov	r6,r19
 40253cc:	9880022e 	bgeu	r19,r2,40253d8 <__sfvwrite_r+0x3ec>
 40253d0:	1027883a 	mov	r19,r2
 40253d4:	100d883a 	mov	r6,r2
 40253d8:	18c1000c 	andi	r3,r3,1024
 40253dc:	18001c26 	beq	r3,zero,4025450 <__sfvwrite_r+0x464>
 40253e0:	300b883a 	mov	r5,r6
 40253e4:	a809883a 	mov	r4,r21
 40253e8:	40258c80 	call	40258c8 <_malloc_r>
 40253ec:	102f883a 	mov	r23,r2
 40253f0:	10002926 	beq	r2,zero,4025498 <__sfvwrite_r+0x4ac>
 40253f4:	81400417 	ldw	r5,16(r16)
 40253f8:	b00d883a 	mov	r6,r22
 40253fc:	1009883a 	mov	r4,r2
 4025400:	40261b80 	call	40261b8 <memcpy>
 4025404:	8080030b 	ldhu	r2,12(r16)
 4025408:	00fedfc4 	movi	r3,-1153
 402540c:	10c4703a 	and	r2,r2,r3
 4025410:	10802014 	ori	r2,r2,128
 4025414:	8080030d 	sth	r2,12(r16)
 4025418:	bd89883a 	add	r4,r23,r22
 402541c:	9d8fc83a 	sub	r7,r19,r22
 4025420:	85c00415 	stw	r23,16(r16)
 4025424:	84c00515 	stw	r19,20(r16)
 4025428:	81000015 	stw	r4,0(r16)
 402542c:	9027883a 	mov	r19,r18
 4025430:	81c00215 	stw	r7,8(r16)
 4025434:	902f883a 	mov	r23,r18
 4025438:	003f3b06 	br	4025128 <__alt_data_end+0xfffe5128>
 402543c:	800b883a 	mov	r5,r16
 4025440:	a809883a 	mov	r4,r21
 4025444:	402478c0 	call	402478c <_fflush_r>
 4025448:	103fb926 	beq	r2,zero,4025330 <__alt_data_end+0xfffe5330>
 402544c:	003f6506 	br	40251e4 <__alt_data_end+0xfffe51e4>
 4025450:	a809883a 	mov	r4,r21
 4025454:	40275800 	call	4027580 <_realloc_r>
 4025458:	102f883a 	mov	r23,r2
 402545c:	103fee1e 	bne	r2,zero,4025418 <__alt_data_end+0xfffe5418>
 4025460:	81400417 	ldw	r5,16(r16)
 4025464:	a809883a 	mov	r4,r21
 4025468:	4024cdc0 	call	4024cdc <_free_r>
 402546c:	8080030b 	ldhu	r2,12(r16)
 4025470:	00ffdfc4 	movi	r3,-129
 4025474:	1884703a 	and	r2,r3,r2
 4025478:	00c00304 	movi	r3,12
 402547c:	a8c00015 	stw	r3,0(r21)
 4025480:	003f5906 	br	40251e8 <__alt_data_end+0xfffe51e8>
 4025484:	94c00044 	addi	r19,r18,1
 4025488:	02000044 	movi	r8,1
 402548c:	003f6006 	br	4025210 <__alt_data_end+0xfffe5210>
 4025490:	00bfffc4 	movi	r2,-1
 4025494:	003f0306 	br	40250a4 <__alt_data_end+0xfffe50a4>
 4025498:	00800304 	movi	r2,12
 402549c:	a8800015 	stw	r2,0(r21)
 40254a0:	8080030b 	ldhu	r2,12(r16)
 40254a4:	003f5006 	br	40251e8 <__alt_data_end+0xfffe51e8>

040254a8 <_fwalk>:
 40254a8:	defff704 	addi	sp,sp,-36
 40254ac:	dd000415 	stw	r20,16(sp)
 40254b0:	dfc00815 	stw	ra,32(sp)
 40254b4:	ddc00715 	stw	r23,28(sp)
 40254b8:	dd800615 	stw	r22,24(sp)
 40254bc:	dd400515 	stw	r21,20(sp)
 40254c0:	dcc00315 	stw	r19,12(sp)
 40254c4:	dc800215 	stw	r18,8(sp)
 40254c8:	dc400115 	stw	r17,4(sp)
 40254cc:	dc000015 	stw	r16,0(sp)
 40254d0:	2500b804 	addi	r20,r4,736
 40254d4:	a0002326 	beq	r20,zero,4025564 <_fwalk+0xbc>
 40254d8:	282b883a 	mov	r21,r5
 40254dc:	002f883a 	mov	r23,zero
 40254e0:	05800044 	movi	r22,1
 40254e4:	04ffffc4 	movi	r19,-1
 40254e8:	a4400117 	ldw	r17,4(r20)
 40254ec:	a4800217 	ldw	r18,8(r20)
 40254f0:	8c7fffc4 	addi	r17,r17,-1
 40254f4:	88000d16 	blt	r17,zero,402552c <_fwalk+0x84>
 40254f8:	94000304 	addi	r16,r18,12
 40254fc:	94800384 	addi	r18,r18,14
 4025500:	8080000b 	ldhu	r2,0(r16)
 4025504:	8c7fffc4 	addi	r17,r17,-1
 4025508:	813ffd04 	addi	r4,r16,-12
 402550c:	b080042e 	bgeu	r22,r2,4025520 <_fwalk+0x78>
 4025510:	9080000f 	ldh	r2,0(r18)
 4025514:	14c00226 	beq	r2,r19,4025520 <_fwalk+0x78>
 4025518:	a83ee83a 	callr	r21
 402551c:	b8aeb03a 	or	r23,r23,r2
 4025520:	84001a04 	addi	r16,r16,104
 4025524:	94801a04 	addi	r18,r18,104
 4025528:	8cfff51e 	bne	r17,r19,4025500 <__alt_data_end+0xfffe5500>
 402552c:	a5000017 	ldw	r20,0(r20)
 4025530:	a03fed1e 	bne	r20,zero,40254e8 <__alt_data_end+0xfffe54e8>
 4025534:	b805883a 	mov	r2,r23
 4025538:	dfc00817 	ldw	ra,32(sp)
 402553c:	ddc00717 	ldw	r23,28(sp)
 4025540:	dd800617 	ldw	r22,24(sp)
 4025544:	dd400517 	ldw	r21,20(sp)
 4025548:	dd000417 	ldw	r20,16(sp)
 402554c:	dcc00317 	ldw	r19,12(sp)
 4025550:	dc800217 	ldw	r18,8(sp)
 4025554:	dc400117 	ldw	r17,4(sp)
 4025558:	dc000017 	ldw	r16,0(sp)
 402555c:	dec00904 	addi	sp,sp,36
 4025560:	f800283a 	ret
 4025564:	002f883a 	mov	r23,zero
 4025568:	003ff206 	br	4025534 <__alt_data_end+0xfffe5534>

0402556c <_fwalk_reent>:
 402556c:	defff704 	addi	sp,sp,-36
 4025570:	dd000415 	stw	r20,16(sp)
 4025574:	dfc00815 	stw	ra,32(sp)
 4025578:	ddc00715 	stw	r23,28(sp)
 402557c:	dd800615 	stw	r22,24(sp)
 4025580:	dd400515 	stw	r21,20(sp)
 4025584:	dcc00315 	stw	r19,12(sp)
 4025588:	dc800215 	stw	r18,8(sp)
 402558c:	dc400115 	stw	r17,4(sp)
 4025590:	dc000015 	stw	r16,0(sp)
 4025594:	2500b804 	addi	r20,r4,736
 4025598:	a0002326 	beq	r20,zero,4025628 <_fwalk_reent+0xbc>
 402559c:	282b883a 	mov	r21,r5
 40255a0:	2027883a 	mov	r19,r4
 40255a4:	002f883a 	mov	r23,zero
 40255a8:	05800044 	movi	r22,1
 40255ac:	04bfffc4 	movi	r18,-1
 40255b0:	a4400117 	ldw	r17,4(r20)
 40255b4:	a4000217 	ldw	r16,8(r20)
 40255b8:	8c7fffc4 	addi	r17,r17,-1
 40255bc:	88000c16 	blt	r17,zero,40255f0 <_fwalk_reent+0x84>
 40255c0:	84000304 	addi	r16,r16,12
 40255c4:	8080000b 	ldhu	r2,0(r16)
 40255c8:	8c7fffc4 	addi	r17,r17,-1
 40255cc:	817ffd04 	addi	r5,r16,-12
 40255d0:	b080052e 	bgeu	r22,r2,40255e8 <_fwalk_reent+0x7c>
 40255d4:	8080008f 	ldh	r2,2(r16)
 40255d8:	9809883a 	mov	r4,r19
 40255dc:	14800226 	beq	r2,r18,40255e8 <_fwalk_reent+0x7c>
 40255e0:	a83ee83a 	callr	r21
 40255e4:	b8aeb03a 	or	r23,r23,r2
 40255e8:	84001a04 	addi	r16,r16,104
 40255ec:	8cbff51e 	bne	r17,r18,40255c4 <__alt_data_end+0xfffe55c4>
 40255f0:	a5000017 	ldw	r20,0(r20)
 40255f4:	a03fee1e 	bne	r20,zero,40255b0 <__alt_data_end+0xfffe55b0>
 40255f8:	b805883a 	mov	r2,r23
 40255fc:	dfc00817 	ldw	ra,32(sp)
 4025600:	ddc00717 	ldw	r23,28(sp)
 4025604:	dd800617 	ldw	r22,24(sp)
 4025608:	dd400517 	ldw	r21,20(sp)
 402560c:	dd000417 	ldw	r20,16(sp)
 4025610:	dcc00317 	ldw	r19,12(sp)
 4025614:	dc800217 	ldw	r18,8(sp)
 4025618:	dc400117 	ldw	r17,4(sp)
 402561c:	dc000017 	ldw	r16,0(sp)
 4025620:	dec00904 	addi	sp,sp,36
 4025624:	f800283a 	ret
 4025628:	002f883a 	mov	r23,zero
 402562c:	003ff206 	br	40255f8 <__alt_data_end+0xfffe55f8>

04025630 <_setlocale_r>:
 4025630:	30001b26 	beq	r6,zero,40256a0 <_setlocale_r+0x70>
 4025634:	014100f4 	movhi	r5,1027
 4025638:	defffe04 	addi	sp,sp,-8
 402563c:	2940cc04 	addi	r5,r5,816
 4025640:	3009883a 	mov	r4,r6
 4025644:	dc000015 	stw	r16,0(sp)
 4025648:	dfc00115 	stw	ra,4(sp)
 402564c:	3021883a 	mov	r16,r6
 4025650:	4027ce80 	call	4027ce8 <strcmp>
 4025654:	1000061e 	bne	r2,zero,4025670 <_setlocale_r+0x40>
 4025658:	008100f4 	movhi	r2,1027
 402565c:	1080cb04 	addi	r2,r2,812
 4025660:	dfc00117 	ldw	ra,4(sp)
 4025664:	dc000017 	ldw	r16,0(sp)
 4025668:	dec00204 	addi	sp,sp,8
 402566c:	f800283a 	ret
 4025670:	014100f4 	movhi	r5,1027
 4025674:	2940cb04 	addi	r5,r5,812
 4025678:	8009883a 	mov	r4,r16
 402567c:	4027ce80 	call	4027ce8 <strcmp>
 4025680:	103ff526 	beq	r2,zero,4025658 <__alt_data_end+0xfffe5658>
 4025684:	014100f4 	movhi	r5,1027
 4025688:	2940b604 	addi	r5,r5,728
 402568c:	8009883a 	mov	r4,r16
 4025690:	4027ce80 	call	4027ce8 <strcmp>
 4025694:	103ff026 	beq	r2,zero,4025658 <__alt_data_end+0xfffe5658>
 4025698:	0005883a 	mov	r2,zero
 402569c:	003ff006 	br	4025660 <__alt_data_end+0xfffe5660>
 40256a0:	008100f4 	movhi	r2,1027
 40256a4:	1080cb04 	addi	r2,r2,812
 40256a8:	f800283a 	ret

040256ac <__locale_charset>:
 40256ac:	008100f4 	movhi	r2,1027
 40256b0:	10829604 	addi	r2,r2,2648
 40256b4:	f800283a 	ret

040256b8 <__locale_mb_cur_max>:
 40256b8:	008100f4 	movhi	r2,1027
 40256bc:	10886c04 	addi	r2,r2,8624
 40256c0:	10800017 	ldw	r2,0(r2)
 40256c4:	f800283a 	ret

040256c8 <__locale_msgcharset>:
 40256c8:	008100f4 	movhi	r2,1027
 40256cc:	10828e04 	addi	r2,r2,2616
 40256d0:	f800283a 	ret

040256d4 <__locale_cjk_lang>:
 40256d4:	0005883a 	mov	r2,zero
 40256d8:	f800283a 	ret

040256dc <_localeconv_r>:
 40256dc:	008100f4 	movhi	r2,1027
 40256e0:	10829e04 	addi	r2,r2,2680
 40256e4:	f800283a 	ret

040256e8 <setlocale>:
 40256e8:	008100f4 	movhi	r2,1027
 40256ec:	10886b04 	addi	r2,r2,8620
 40256f0:	280d883a 	mov	r6,r5
 40256f4:	200b883a 	mov	r5,r4
 40256f8:	11000017 	ldw	r4,0(r2)
 40256fc:	40256301 	jmpi	4025630 <_setlocale_r>

04025700 <localeconv>:
 4025700:	008100f4 	movhi	r2,1027
 4025704:	10829e04 	addi	r2,r2,2680
 4025708:	f800283a 	ret

0402570c <__smakebuf_r>:
 402570c:	2880030b 	ldhu	r2,12(r5)
 4025710:	10c0008c 	andi	r3,r2,2
 4025714:	1800411e 	bne	r3,zero,402581c <__smakebuf_r+0x110>
 4025718:	deffec04 	addi	sp,sp,-80
 402571c:	dc000f15 	stw	r16,60(sp)
 4025720:	2821883a 	mov	r16,r5
 4025724:	2940038f 	ldh	r5,14(r5)
 4025728:	dc401015 	stw	r17,64(sp)
 402572c:	dfc01315 	stw	ra,76(sp)
 4025730:	dcc01215 	stw	r19,72(sp)
 4025734:	dc801115 	stw	r18,68(sp)
 4025738:	2023883a 	mov	r17,r4
 402573c:	28001c16 	blt	r5,zero,40257b0 <__smakebuf_r+0xa4>
 4025740:	d80d883a 	mov	r6,sp
 4025744:	40298900 	call	4029890 <_fstat_r>
 4025748:	10001816 	blt	r2,zero,40257ac <__smakebuf_r+0xa0>
 402574c:	d8800117 	ldw	r2,4(sp)
 4025750:	00e00014 	movui	r3,32768
 4025754:	10bc000c 	andi	r2,r2,61440
 4025758:	14c80020 	cmpeqi	r19,r2,8192
 402575c:	10c03726 	beq	r2,r3,402583c <__smakebuf_r+0x130>
 4025760:	80c0030b 	ldhu	r3,12(r16)
 4025764:	18c20014 	ori	r3,r3,2048
 4025768:	80c0030d 	sth	r3,12(r16)
 402576c:	00c80004 	movi	r3,8192
 4025770:	10c0521e 	bne	r2,r3,40258bc <__smakebuf_r+0x1b0>
 4025774:	8140038f 	ldh	r5,14(r16)
 4025778:	8809883a 	mov	r4,r17
 402577c:	40298ec0 	call	40298ec <_isatty_r>
 4025780:	10004c26 	beq	r2,zero,40258b4 <__smakebuf_r+0x1a8>
 4025784:	8080030b 	ldhu	r2,12(r16)
 4025788:	80c010c4 	addi	r3,r16,67
 402578c:	80c00015 	stw	r3,0(r16)
 4025790:	10800054 	ori	r2,r2,1
 4025794:	8080030d 	sth	r2,12(r16)
 4025798:	00800044 	movi	r2,1
 402579c:	80c00415 	stw	r3,16(r16)
 40257a0:	80800515 	stw	r2,20(r16)
 40257a4:	04810004 	movi	r18,1024
 40257a8:	00000706 	br	40257c8 <__smakebuf_r+0xbc>
 40257ac:	8080030b 	ldhu	r2,12(r16)
 40257b0:	10c0200c 	andi	r3,r2,128
 40257b4:	18001f1e 	bne	r3,zero,4025834 <__smakebuf_r+0x128>
 40257b8:	04810004 	movi	r18,1024
 40257bc:	10820014 	ori	r2,r2,2048
 40257c0:	8080030d 	sth	r2,12(r16)
 40257c4:	0027883a 	mov	r19,zero
 40257c8:	900b883a 	mov	r5,r18
 40257cc:	8809883a 	mov	r4,r17
 40257d0:	40258c80 	call	40258c8 <_malloc_r>
 40257d4:	10002c26 	beq	r2,zero,4025888 <__smakebuf_r+0x17c>
 40257d8:	80c0030b 	ldhu	r3,12(r16)
 40257dc:	010100b4 	movhi	r4,1026
 40257e0:	21120804 	addi	r4,r4,18464
 40257e4:	89000f15 	stw	r4,60(r17)
 40257e8:	18c02014 	ori	r3,r3,128
 40257ec:	80c0030d 	sth	r3,12(r16)
 40257f0:	80800015 	stw	r2,0(r16)
 40257f4:	80800415 	stw	r2,16(r16)
 40257f8:	84800515 	stw	r18,20(r16)
 40257fc:	98001a1e 	bne	r19,zero,4025868 <__smakebuf_r+0x15c>
 4025800:	dfc01317 	ldw	ra,76(sp)
 4025804:	dcc01217 	ldw	r19,72(sp)
 4025808:	dc801117 	ldw	r18,68(sp)
 402580c:	dc401017 	ldw	r17,64(sp)
 4025810:	dc000f17 	ldw	r16,60(sp)
 4025814:	dec01404 	addi	sp,sp,80
 4025818:	f800283a 	ret
 402581c:	288010c4 	addi	r2,r5,67
 4025820:	28800015 	stw	r2,0(r5)
 4025824:	28800415 	stw	r2,16(r5)
 4025828:	00800044 	movi	r2,1
 402582c:	28800515 	stw	r2,20(r5)
 4025830:	f800283a 	ret
 4025834:	04801004 	movi	r18,64
 4025838:	003fe006 	br	40257bc <__alt_data_end+0xfffe57bc>
 402583c:	81000a17 	ldw	r4,40(r16)
 4025840:	00c100b4 	movhi	r3,1026
 4025844:	18df2104 	addi	r3,r3,31876
 4025848:	20ffc51e 	bne	r4,r3,4025760 <__alt_data_end+0xfffe5760>
 402584c:	8080030b 	ldhu	r2,12(r16)
 4025850:	04810004 	movi	r18,1024
 4025854:	84801315 	stw	r18,76(r16)
 4025858:	1484b03a 	or	r2,r2,r18
 402585c:	8080030d 	sth	r2,12(r16)
 4025860:	0027883a 	mov	r19,zero
 4025864:	003fd806 	br	40257c8 <__alt_data_end+0xfffe57c8>
 4025868:	8140038f 	ldh	r5,14(r16)
 402586c:	8809883a 	mov	r4,r17
 4025870:	40298ec0 	call	40298ec <_isatty_r>
 4025874:	103fe226 	beq	r2,zero,4025800 <__alt_data_end+0xfffe5800>
 4025878:	8080030b 	ldhu	r2,12(r16)
 402587c:	10800054 	ori	r2,r2,1
 4025880:	8080030d 	sth	r2,12(r16)
 4025884:	003fde06 	br	4025800 <__alt_data_end+0xfffe5800>
 4025888:	8080030b 	ldhu	r2,12(r16)
 402588c:	10c0800c 	andi	r3,r2,512
 4025890:	183fdb1e 	bne	r3,zero,4025800 <__alt_data_end+0xfffe5800>
 4025894:	10800094 	ori	r2,r2,2
 4025898:	80c010c4 	addi	r3,r16,67
 402589c:	8080030d 	sth	r2,12(r16)
 40258a0:	00800044 	movi	r2,1
 40258a4:	80c00015 	stw	r3,0(r16)
 40258a8:	80c00415 	stw	r3,16(r16)
 40258ac:	80800515 	stw	r2,20(r16)
 40258b0:	003fd306 	br	4025800 <__alt_data_end+0xfffe5800>
 40258b4:	04810004 	movi	r18,1024
 40258b8:	003fc306 	br	40257c8 <__alt_data_end+0xfffe57c8>
 40258bc:	0027883a 	mov	r19,zero
 40258c0:	04810004 	movi	r18,1024
 40258c4:	003fc006 	br	40257c8 <__alt_data_end+0xfffe57c8>

040258c8 <_malloc_r>:
 40258c8:	defff504 	addi	sp,sp,-44
 40258cc:	dc800315 	stw	r18,12(sp)
 40258d0:	dfc00a15 	stw	ra,40(sp)
 40258d4:	df000915 	stw	fp,36(sp)
 40258d8:	ddc00815 	stw	r23,32(sp)
 40258dc:	dd800715 	stw	r22,28(sp)
 40258e0:	dd400615 	stw	r21,24(sp)
 40258e4:	dd000515 	stw	r20,20(sp)
 40258e8:	dcc00415 	stw	r19,16(sp)
 40258ec:	dc400215 	stw	r17,8(sp)
 40258f0:	dc000115 	stw	r16,4(sp)
 40258f4:	288002c4 	addi	r2,r5,11
 40258f8:	00c00584 	movi	r3,22
 40258fc:	2025883a 	mov	r18,r4
 4025900:	18807f2e 	bgeu	r3,r2,4025b00 <_malloc_r+0x238>
 4025904:	047ffe04 	movi	r17,-8
 4025908:	1462703a 	and	r17,r2,r17
 402590c:	8800a316 	blt	r17,zero,4025b9c <_malloc_r+0x2d4>
 4025910:	8940a236 	bltu	r17,r5,4025b9c <_malloc_r+0x2d4>
 4025914:	402d8700 	call	402d870 <__malloc_lock>
 4025918:	00807dc4 	movi	r2,503
 402591c:	1441e92e 	bgeu	r2,r17,40260c4 <_malloc_r+0x7fc>
 4025920:	8804d27a 	srli	r2,r17,9
 4025924:	1000a126 	beq	r2,zero,4025bac <_malloc_r+0x2e4>
 4025928:	00c00104 	movi	r3,4
 402592c:	18811e36 	bltu	r3,r2,4025da8 <_malloc_r+0x4e0>
 4025930:	8804d1ba 	srli	r2,r17,6
 4025934:	12000e44 	addi	r8,r2,57
 4025938:	11c00e04 	addi	r7,r2,56
 402593c:	4209883a 	add	r4,r8,r8
 4025940:	04c100f4 	movhi	r19,1027
 4025944:	2109883a 	add	r4,r4,r4
 4025948:	9cc2ac04 	addi	r19,r19,2736
 402594c:	2109883a 	add	r4,r4,r4
 4025950:	9909883a 	add	r4,r19,r4
 4025954:	24000117 	ldw	r16,4(r4)
 4025958:	213ffe04 	addi	r4,r4,-8
 402595c:	24009726 	beq	r4,r16,4025bbc <_malloc_r+0x2f4>
 4025960:	80800117 	ldw	r2,4(r16)
 4025964:	01bfff04 	movi	r6,-4
 4025968:	014003c4 	movi	r5,15
 402596c:	1184703a 	and	r2,r2,r6
 4025970:	1447c83a 	sub	r3,r2,r17
 4025974:	28c00716 	blt	r5,r3,4025994 <_malloc_r+0xcc>
 4025978:	1800920e 	bge	r3,zero,4025bc4 <_malloc_r+0x2fc>
 402597c:	84000317 	ldw	r16,12(r16)
 4025980:	24008e26 	beq	r4,r16,4025bbc <_malloc_r+0x2f4>
 4025984:	80800117 	ldw	r2,4(r16)
 4025988:	1184703a 	and	r2,r2,r6
 402598c:	1447c83a 	sub	r3,r2,r17
 4025990:	28fff90e 	bge	r5,r3,4025978 <__alt_data_end+0xfffe5978>
 4025994:	3809883a 	mov	r4,r7
 4025998:	018100f4 	movhi	r6,1027
 402599c:	9c000417 	ldw	r16,16(r19)
 40259a0:	3182ac04 	addi	r6,r6,2736
 40259a4:	32000204 	addi	r8,r6,8
 40259a8:	82013426 	beq	r16,r8,4025e7c <_malloc_r+0x5b4>
 40259ac:	80c00117 	ldw	r3,4(r16)
 40259b0:	00bfff04 	movi	r2,-4
 40259b4:	188e703a 	and	r7,r3,r2
 40259b8:	3c45c83a 	sub	r2,r7,r17
 40259bc:	00c003c4 	movi	r3,15
 40259c0:	18811f16 	blt	r3,r2,4025e40 <_malloc_r+0x578>
 40259c4:	32000515 	stw	r8,20(r6)
 40259c8:	32000415 	stw	r8,16(r6)
 40259cc:	10007f0e 	bge	r2,zero,4025bcc <_malloc_r+0x304>
 40259d0:	00807fc4 	movi	r2,511
 40259d4:	11c0fd36 	bltu	r2,r7,4025dcc <_malloc_r+0x504>
 40259d8:	3806d0fa 	srli	r3,r7,3
 40259dc:	01c00044 	movi	r7,1
 40259e0:	30800117 	ldw	r2,4(r6)
 40259e4:	19400044 	addi	r5,r3,1
 40259e8:	294b883a 	add	r5,r5,r5
 40259ec:	1807d0ba 	srai	r3,r3,2
 40259f0:	294b883a 	add	r5,r5,r5
 40259f4:	294b883a 	add	r5,r5,r5
 40259f8:	298b883a 	add	r5,r5,r6
 40259fc:	38c6983a 	sll	r3,r7,r3
 4025a00:	29c00017 	ldw	r7,0(r5)
 4025a04:	2a7ffe04 	addi	r9,r5,-8
 4025a08:	1886b03a 	or	r3,r3,r2
 4025a0c:	82400315 	stw	r9,12(r16)
 4025a10:	81c00215 	stw	r7,8(r16)
 4025a14:	30c00115 	stw	r3,4(r6)
 4025a18:	2c000015 	stw	r16,0(r5)
 4025a1c:	3c000315 	stw	r16,12(r7)
 4025a20:	2005d0ba 	srai	r2,r4,2
 4025a24:	01400044 	movi	r5,1
 4025a28:	288a983a 	sll	r5,r5,r2
 4025a2c:	19406f36 	bltu	r3,r5,4025bec <_malloc_r+0x324>
 4025a30:	28c4703a 	and	r2,r5,r3
 4025a34:	10000a1e 	bne	r2,zero,4025a60 <_malloc_r+0x198>
 4025a38:	00bfff04 	movi	r2,-4
 4025a3c:	294b883a 	add	r5,r5,r5
 4025a40:	2088703a 	and	r4,r4,r2
 4025a44:	28c4703a 	and	r2,r5,r3
 4025a48:	21000104 	addi	r4,r4,4
 4025a4c:	1000041e 	bne	r2,zero,4025a60 <_malloc_r+0x198>
 4025a50:	294b883a 	add	r5,r5,r5
 4025a54:	28c4703a 	and	r2,r5,r3
 4025a58:	21000104 	addi	r4,r4,4
 4025a5c:	103ffc26 	beq	r2,zero,4025a50 <__alt_data_end+0xfffe5a50>
 4025a60:	02bfff04 	movi	r10,-4
 4025a64:	024003c4 	movi	r9,15
 4025a68:	21800044 	addi	r6,r4,1
 4025a6c:	318d883a 	add	r6,r6,r6
 4025a70:	318d883a 	add	r6,r6,r6
 4025a74:	318d883a 	add	r6,r6,r6
 4025a78:	998d883a 	add	r6,r19,r6
 4025a7c:	333ffe04 	addi	r12,r6,-8
 4025a80:	2017883a 	mov	r11,r4
 4025a84:	31800104 	addi	r6,r6,4
 4025a88:	34000017 	ldw	r16,0(r6)
 4025a8c:	31fffd04 	addi	r7,r6,-12
 4025a90:	81c0041e 	bne	r16,r7,4025aa4 <_malloc_r+0x1dc>
 4025a94:	0000fb06 	br	4025e84 <_malloc_r+0x5bc>
 4025a98:	1801030e 	bge	r3,zero,4025ea8 <_malloc_r+0x5e0>
 4025a9c:	84000317 	ldw	r16,12(r16)
 4025aa0:	81c0f826 	beq	r16,r7,4025e84 <_malloc_r+0x5bc>
 4025aa4:	80800117 	ldw	r2,4(r16)
 4025aa8:	1284703a 	and	r2,r2,r10
 4025aac:	1447c83a 	sub	r3,r2,r17
 4025ab0:	48fff90e 	bge	r9,r3,4025a98 <__alt_data_end+0xfffe5a98>
 4025ab4:	80800317 	ldw	r2,12(r16)
 4025ab8:	81000217 	ldw	r4,8(r16)
 4025abc:	89400054 	ori	r5,r17,1
 4025ac0:	81400115 	stw	r5,4(r16)
 4025ac4:	20800315 	stw	r2,12(r4)
 4025ac8:	11000215 	stw	r4,8(r2)
 4025acc:	8463883a 	add	r17,r16,r17
 4025ad0:	9c400515 	stw	r17,20(r19)
 4025ad4:	9c400415 	stw	r17,16(r19)
 4025ad8:	18800054 	ori	r2,r3,1
 4025adc:	88800115 	stw	r2,4(r17)
 4025ae0:	8a000315 	stw	r8,12(r17)
 4025ae4:	8a000215 	stw	r8,8(r17)
 4025ae8:	88e3883a 	add	r17,r17,r3
 4025aec:	88c00015 	stw	r3,0(r17)
 4025af0:	9009883a 	mov	r4,r18
 4025af4:	402d8940 	call	402d894 <__malloc_unlock>
 4025af8:	80800204 	addi	r2,r16,8
 4025afc:	00001b06 	br	4025b6c <_malloc_r+0x2a4>
 4025b00:	04400404 	movi	r17,16
 4025b04:	89402536 	bltu	r17,r5,4025b9c <_malloc_r+0x2d4>
 4025b08:	402d8700 	call	402d870 <__malloc_lock>
 4025b0c:	00800184 	movi	r2,6
 4025b10:	01000084 	movi	r4,2
 4025b14:	04c100f4 	movhi	r19,1027
 4025b18:	1085883a 	add	r2,r2,r2
 4025b1c:	9cc2ac04 	addi	r19,r19,2736
 4025b20:	1085883a 	add	r2,r2,r2
 4025b24:	9885883a 	add	r2,r19,r2
 4025b28:	14000117 	ldw	r16,4(r2)
 4025b2c:	10fffe04 	addi	r3,r2,-8
 4025b30:	80c0d926 	beq	r16,r3,4025e98 <_malloc_r+0x5d0>
 4025b34:	80c00117 	ldw	r3,4(r16)
 4025b38:	81000317 	ldw	r4,12(r16)
 4025b3c:	00bfff04 	movi	r2,-4
 4025b40:	1884703a 	and	r2,r3,r2
 4025b44:	81400217 	ldw	r5,8(r16)
 4025b48:	8085883a 	add	r2,r16,r2
 4025b4c:	10c00117 	ldw	r3,4(r2)
 4025b50:	29000315 	stw	r4,12(r5)
 4025b54:	21400215 	stw	r5,8(r4)
 4025b58:	18c00054 	ori	r3,r3,1
 4025b5c:	10c00115 	stw	r3,4(r2)
 4025b60:	9009883a 	mov	r4,r18
 4025b64:	402d8940 	call	402d894 <__malloc_unlock>
 4025b68:	80800204 	addi	r2,r16,8
 4025b6c:	dfc00a17 	ldw	ra,40(sp)
 4025b70:	df000917 	ldw	fp,36(sp)
 4025b74:	ddc00817 	ldw	r23,32(sp)
 4025b78:	dd800717 	ldw	r22,28(sp)
 4025b7c:	dd400617 	ldw	r21,24(sp)
 4025b80:	dd000517 	ldw	r20,20(sp)
 4025b84:	dcc00417 	ldw	r19,16(sp)
 4025b88:	dc800317 	ldw	r18,12(sp)
 4025b8c:	dc400217 	ldw	r17,8(sp)
 4025b90:	dc000117 	ldw	r16,4(sp)
 4025b94:	dec00b04 	addi	sp,sp,44
 4025b98:	f800283a 	ret
 4025b9c:	00800304 	movi	r2,12
 4025ba0:	90800015 	stw	r2,0(r18)
 4025ba4:	0005883a 	mov	r2,zero
 4025ba8:	003ff006 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025bac:	01002004 	movi	r4,128
 4025bb0:	02001004 	movi	r8,64
 4025bb4:	01c00fc4 	movi	r7,63
 4025bb8:	003f6106 	br	4025940 <__alt_data_end+0xfffe5940>
 4025bbc:	4009883a 	mov	r4,r8
 4025bc0:	003f7506 	br	4025998 <__alt_data_end+0xfffe5998>
 4025bc4:	81000317 	ldw	r4,12(r16)
 4025bc8:	003fde06 	br	4025b44 <__alt_data_end+0xfffe5b44>
 4025bcc:	81c5883a 	add	r2,r16,r7
 4025bd0:	11400117 	ldw	r5,4(r2)
 4025bd4:	9009883a 	mov	r4,r18
 4025bd8:	29400054 	ori	r5,r5,1
 4025bdc:	11400115 	stw	r5,4(r2)
 4025be0:	402d8940 	call	402d894 <__malloc_unlock>
 4025be4:	80800204 	addi	r2,r16,8
 4025be8:	003fe006 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025bec:	9c000217 	ldw	r16,8(r19)
 4025bf0:	00bfff04 	movi	r2,-4
 4025bf4:	85800117 	ldw	r22,4(r16)
 4025bf8:	b0ac703a 	and	r22,r22,r2
 4025bfc:	b4400336 	bltu	r22,r17,4025c0c <_malloc_r+0x344>
 4025c00:	b445c83a 	sub	r2,r22,r17
 4025c04:	00c003c4 	movi	r3,15
 4025c08:	18805d16 	blt	r3,r2,4025d80 <_malloc_r+0x4b8>
 4025c0c:	05c100f4 	movhi	r23,1027
 4025c10:	008100f4 	movhi	r2,1027
 4025c14:	108f7b04 	addi	r2,r2,15852
 4025c18:	bdc86d04 	addi	r23,r23,8628
 4025c1c:	15400017 	ldw	r21,0(r2)
 4025c20:	b8c00017 	ldw	r3,0(r23)
 4025c24:	00bfffc4 	movi	r2,-1
 4025c28:	858d883a 	add	r6,r16,r22
 4025c2c:	8d6b883a 	add	r21,r17,r21
 4025c30:	1880ea26 	beq	r3,r2,4025fdc <_malloc_r+0x714>
 4025c34:	ad4403c4 	addi	r21,r21,4111
 4025c38:	00bc0004 	movi	r2,-4096
 4025c3c:	a8aa703a 	and	r21,r21,r2
 4025c40:	a80b883a 	mov	r5,r21
 4025c44:	9009883a 	mov	r4,r18
 4025c48:	d9800015 	stw	r6,0(sp)
 4025c4c:	4027b580 	call	4027b58 <_sbrk_r>
 4025c50:	1029883a 	mov	r20,r2
 4025c54:	00bfffc4 	movi	r2,-1
 4025c58:	d9800017 	ldw	r6,0(sp)
 4025c5c:	a080e826 	beq	r20,r2,4026000 <_malloc_r+0x738>
 4025c60:	a180a636 	bltu	r20,r6,4025efc <_malloc_r+0x634>
 4025c64:	070100f4 	movhi	fp,1027
 4025c68:	e70f8404 	addi	fp,fp,15888
 4025c6c:	e0800017 	ldw	r2,0(fp)
 4025c70:	a887883a 	add	r3,r21,r2
 4025c74:	e0c00015 	stw	r3,0(fp)
 4025c78:	3500e626 	beq	r6,r20,4026014 <_malloc_r+0x74c>
 4025c7c:	b9000017 	ldw	r4,0(r23)
 4025c80:	00bfffc4 	movi	r2,-1
 4025c84:	2080ee26 	beq	r4,r2,4026040 <_malloc_r+0x778>
 4025c88:	a185c83a 	sub	r2,r20,r6
 4025c8c:	10c5883a 	add	r2,r2,r3
 4025c90:	e0800015 	stw	r2,0(fp)
 4025c94:	a0c001cc 	andi	r3,r20,7
 4025c98:	1800bc26 	beq	r3,zero,4025f8c <_malloc_r+0x6c4>
 4025c9c:	a0e9c83a 	sub	r20,r20,r3
 4025ca0:	00840204 	movi	r2,4104
 4025ca4:	a5000204 	addi	r20,r20,8
 4025ca8:	10c7c83a 	sub	r3,r2,r3
 4025cac:	a545883a 	add	r2,r20,r21
 4025cb0:	1083ffcc 	andi	r2,r2,4095
 4025cb4:	18abc83a 	sub	r21,r3,r2
 4025cb8:	a80b883a 	mov	r5,r21
 4025cbc:	9009883a 	mov	r4,r18
 4025cc0:	4027b580 	call	4027b58 <_sbrk_r>
 4025cc4:	00ffffc4 	movi	r3,-1
 4025cc8:	10c0e126 	beq	r2,r3,4026050 <_malloc_r+0x788>
 4025ccc:	1505c83a 	sub	r2,r2,r20
 4025cd0:	1545883a 	add	r2,r2,r21
 4025cd4:	10800054 	ori	r2,r2,1
 4025cd8:	e0c00017 	ldw	r3,0(fp)
 4025cdc:	9d000215 	stw	r20,8(r19)
 4025ce0:	a0800115 	stw	r2,4(r20)
 4025ce4:	a8c7883a 	add	r3,r21,r3
 4025ce8:	e0c00015 	stw	r3,0(fp)
 4025cec:	84c00e26 	beq	r16,r19,4025d28 <_malloc_r+0x460>
 4025cf0:	018003c4 	movi	r6,15
 4025cf4:	3580a72e 	bgeu	r6,r22,4025f94 <_malloc_r+0x6cc>
 4025cf8:	81400117 	ldw	r5,4(r16)
 4025cfc:	013ffe04 	movi	r4,-8
 4025d00:	b0bffd04 	addi	r2,r22,-12
 4025d04:	1104703a 	and	r2,r2,r4
 4025d08:	2900004c 	andi	r4,r5,1
 4025d0c:	2088b03a 	or	r4,r4,r2
 4025d10:	81000115 	stw	r4,4(r16)
 4025d14:	01400144 	movi	r5,5
 4025d18:	8089883a 	add	r4,r16,r2
 4025d1c:	21400115 	stw	r5,4(r4)
 4025d20:	21400215 	stw	r5,8(r4)
 4025d24:	3080cd36 	bltu	r6,r2,402605c <_malloc_r+0x794>
 4025d28:	008100f4 	movhi	r2,1027
 4025d2c:	108f7a04 	addi	r2,r2,15848
 4025d30:	11000017 	ldw	r4,0(r2)
 4025d34:	20c0012e 	bgeu	r4,r3,4025d3c <_malloc_r+0x474>
 4025d38:	10c00015 	stw	r3,0(r2)
 4025d3c:	008100f4 	movhi	r2,1027
 4025d40:	108f7904 	addi	r2,r2,15844
 4025d44:	11000017 	ldw	r4,0(r2)
 4025d48:	9c000217 	ldw	r16,8(r19)
 4025d4c:	20c0012e 	bgeu	r4,r3,4025d54 <_malloc_r+0x48c>
 4025d50:	10c00015 	stw	r3,0(r2)
 4025d54:	80c00117 	ldw	r3,4(r16)
 4025d58:	00bfff04 	movi	r2,-4
 4025d5c:	1886703a 	and	r3,r3,r2
 4025d60:	1c45c83a 	sub	r2,r3,r17
 4025d64:	1c400236 	bltu	r3,r17,4025d70 <_malloc_r+0x4a8>
 4025d68:	00c003c4 	movi	r3,15
 4025d6c:	18800416 	blt	r3,r2,4025d80 <_malloc_r+0x4b8>
 4025d70:	9009883a 	mov	r4,r18
 4025d74:	402d8940 	call	402d894 <__malloc_unlock>
 4025d78:	0005883a 	mov	r2,zero
 4025d7c:	003f7b06 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025d80:	88c00054 	ori	r3,r17,1
 4025d84:	80c00115 	stw	r3,4(r16)
 4025d88:	8463883a 	add	r17,r16,r17
 4025d8c:	10800054 	ori	r2,r2,1
 4025d90:	9c400215 	stw	r17,8(r19)
 4025d94:	88800115 	stw	r2,4(r17)
 4025d98:	9009883a 	mov	r4,r18
 4025d9c:	402d8940 	call	402d894 <__malloc_unlock>
 4025da0:	80800204 	addi	r2,r16,8
 4025da4:	003f7106 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025da8:	00c00504 	movi	r3,20
 4025dac:	18804a2e 	bgeu	r3,r2,4025ed8 <_malloc_r+0x610>
 4025db0:	00c01504 	movi	r3,84
 4025db4:	18806e36 	bltu	r3,r2,4025f70 <_malloc_r+0x6a8>
 4025db8:	8804d33a 	srli	r2,r17,12
 4025dbc:	12001bc4 	addi	r8,r2,111
 4025dc0:	11c01b84 	addi	r7,r2,110
 4025dc4:	4209883a 	add	r4,r8,r8
 4025dc8:	003edd06 	br	4025940 <__alt_data_end+0xfffe5940>
 4025dcc:	3804d27a 	srli	r2,r7,9
 4025dd0:	00c00104 	movi	r3,4
 4025dd4:	1880442e 	bgeu	r3,r2,4025ee8 <_malloc_r+0x620>
 4025dd8:	00c00504 	movi	r3,20
 4025ddc:	18808136 	bltu	r3,r2,4025fe4 <_malloc_r+0x71c>
 4025de0:	11401704 	addi	r5,r2,92
 4025de4:	10c016c4 	addi	r3,r2,91
 4025de8:	294b883a 	add	r5,r5,r5
 4025dec:	294b883a 	add	r5,r5,r5
 4025df0:	294b883a 	add	r5,r5,r5
 4025df4:	994b883a 	add	r5,r19,r5
 4025df8:	28800017 	ldw	r2,0(r5)
 4025dfc:	018100f4 	movhi	r6,1027
 4025e00:	297ffe04 	addi	r5,r5,-8
 4025e04:	3182ac04 	addi	r6,r6,2736
 4025e08:	28806526 	beq	r5,r2,4025fa0 <_malloc_r+0x6d8>
 4025e0c:	01bfff04 	movi	r6,-4
 4025e10:	10c00117 	ldw	r3,4(r2)
 4025e14:	1986703a 	and	r3,r3,r6
 4025e18:	38c0022e 	bgeu	r7,r3,4025e24 <_malloc_r+0x55c>
 4025e1c:	10800217 	ldw	r2,8(r2)
 4025e20:	28bffb1e 	bne	r5,r2,4025e10 <__alt_data_end+0xfffe5e10>
 4025e24:	11400317 	ldw	r5,12(r2)
 4025e28:	98c00117 	ldw	r3,4(r19)
 4025e2c:	81400315 	stw	r5,12(r16)
 4025e30:	80800215 	stw	r2,8(r16)
 4025e34:	2c000215 	stw	r16,8(r5)
 4025e38:	14000315 	stw	r16,12(r2)
 4025e3c:	003ef806 	br	4025a20 <__alt_data_end+0xfffe5a20>
 4025e40:	88c00054 	ori	r3,r17,1
 4025e44:	80c00115 	stw	r3,4(r16)
 4025e48:	8463883a 	add	r17,r16,r17
 4025e4c:	34400515 	stw	r17,20(r6)
 4025e50:	34400415 	stw	r17,16(r6)
 4025e54:	10c00054 	ori	r3,r2,1
 4025e58:	8a000315 	stw	r8,12(r17)
 4025e5c:	8a000215 	stw	r8,8(r17)
 4025e60:	88c00115 	stw	r3,4(r17)
 4025e64:	88a3883a 	add	r17,r17,r2
 4025e68:	88800015 	stw	r2,0(r17)
 4025e6c:	9009883a 	mov	r4,r18
 4025e70:	402d8940 	call	402d894 <__malloc_unlock>
 4025e74:	80800204 	addi	r2,r16,8
 4025e78:	003f3c06 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025e7c:	30c00117 	ldw	r3,4(r6)
 4025e80:	003ee706 	br	4025a20 <__alt_data_end+0xfffe5a20>
 4025e84:	5ac00044 	addi	r11,r11,1
 4025e88:	588000cc 	andi	r2,r11,3
 4025e8c:	31800204 	addi	r6,r6,8
 4025e90:	103efd1e 	bne	r2,zero,4025a88 <__alt_data_end+0xfffe5a88>
 4025e94:	00002406 	br	4025f28 <_malloc_r+0x660>
 4025e98:	14000317 	ldw	r16,12(r2)
 4025e9c:	143f251e 	bne	r2,r16,4025b34 <__alt_data_end+0xfffe5b34>
 4025ea0:	21000084 	addi	r4,r4,2
 4025ea4:	003ebc06 	br	4025998 <__alt_data_end+0xfffe5998>
 4025ea8:	8085883a 	add	r2,r16,r2
 4025eac:	10c00117 	ldw	r3,4(r2)
 4025eb0:	81000317 	ldw	r4,12(r16)
 4025eb4:	81400217 	ldw	r5,8(r16)
 4025eb8:	18c00054 	ori	r3,r3,1
 4025ebc:	10c00115 	stw	r3,4(r2)
 4025ec0:	29000315 	stw	r4,12(r5)
 4025ec4:	21400215 	stw	r5,8(r4)
 4025ec8:	9009883a 	mov	r4,r18
 4025ecc:	402d8940 	call	402d894 <__malloc_unlock>
 4025ed0:	80800204 	addi	r2,r16,8
 4025ed4:	003f2506 	br	4025b6c <__alt_data_end+0xfffe5b6c>
 4025ed8:	12001704 	addi	r8,r2,92
 4025edc:	11c016c4 	addi	r7,r2,91
 4025ee0:	4209883a 	add	r4,r8,r8
 4025ee4:	003e9606 	br	4025940 <__alt_data_end+0xfffe5940>
 4025ee8:	3804d1ba 	srli	r2,r7,6
 4025eec:	11400e44 	addi	r5,r2,57
 4025ef0:	10c00e04 	addi	r3,r2,56
 4025ef4:	294b883a 	add	r5,r5,r5
 4025ef8:	003fbc06 	br	4025dec <__alt_data_end+0xfffe5dec>
 4025efc:	84ff5926 	beq	r16,r19,4025c64 <__alt_data_end+0xfffe5c64>
 4025f00:	008100f4 	movhi	r2,1027
 4025f04:	1082ac04 	addi	r2,r2,2736
 4025f08:	14000217 	ldw	r16,8(r2)
 4025f0c:	00bfff04 	movi	r2,-4
 4025f10:	80c00117 	ldw	r3,4(r16)
 4025f14:	1886703a 	and	r3,r3,r2
 4025f18:	003f9106 	br	4025d60 <__alt_data_end+0xfffe5d60>
 4025f1c:	60800217 	ldw	r2,8(r12)
 4025f20:	213fffc4 	addi	r4,r4,-1
 4025f24:	1300651e 	bne	r2,r12,40260bc <_malloc_r+0x7f4>
 4025f28:	208000cc 	andi	r2,r4,3
 4025f2c:	633ffe04 	addi	r12,r12,-8
 4025f30:	103ffa1e 	bne	r2,zero,4025f1c <__alt_data_end+0xfffe5f1c>
 4025f34:	98800117 	ldw	r2,4(r19)
 4025f38:	0146303a 	nor	r3,zero,r5
 4025f3c:	1884703a 	and	r2,r3,r2
 4025f40:	98800115 	stw	r2,4(r19)
 4025f44:	294b883a 	add	r5,r5,r5
 4025f48:	117f2836 	bltu	r2,r5,4025bec <__alt_data_end+0xfffe5bec>
 4025f4c:	283f2726 	beq	r5,zero,4025bec <__alt_data_end+0xfffe5bec>
 4025f50:	2886703a 	and	r3,r5,r2
 4025f54:	5809883a 	mov	r4,r11
 4025f58:	183ec31e 	bne	r3,zero,4025a68 <__alt_data_end+0xfffe5a68>
 4025f5c:	294b883a 	add	r5,r5,r5
 4025f60:	2886703a 	and	r3,r5,r2
 4025f64:	21000104 	addi	r4,r4,4
 4025f68:	183ffc26 	beq	r3,zero,4025f5c <__alt_data_end+0xfffe5f5c>
 4025f6c:	003ebe06 	br	4025a68 <__alt_data_end+0xfffe5a68>
 4025f70:	00c05504 	movi	r3,340
 4025f74:	18801236 	bltu	r3,r2,4025fc0 <_malloc_r+0x6f8>
 4025f78:	8804d3fa 	srli	r2,r17,15
 4025f7c:	12001e04 	addi	r8,r2,120
 4025f80:	11c01dc4 	addi	r7,r2,119
 4025f84:	4209883a 	add	r4,r8,r8
 4025f88:	003e6d06 	br	4025940 <__alt_data_end+0xfffe5940>
 4025f8c:	00c40004 	movi	r3,4096
 4025f90:	003f4606 	br	4025cac <__alt_data_end+0xfffe5cac>
 4025f94:	00800044 	movi	r2,1
 4025f98:	a0800115 	stw	r2,4(r20)
 4025f9c:	003f7406 	br	4025d70 <__alt_data_end+0xfffe5d70>
 4025fa0:	1805d0ba 	srai	r2,r3,2
 4025fa4:	01c00044 	movi	r7,1
 4025fa8:	30c00117 	ldw	r3,4(r6)
 4025fac:	388e983a 	sll	r7,r7,r2
 4025fb0:	2805883a 	mov	r2,r5
 4025fb4:	38c6b03a 	or	r3,r7,r3
 4025fb8:	30c00115 	stw	r3,4(r6)
 4025fbc:	003f9b06 	br	4025e2c <__alt_data_end+0xfffe5e2c>
 4025fc0:	00c15504 	movi	r3,1364
 4025fc4:	18801a36 	bltu	r3,r2,4026030 <_malloc_r+0x768>
 4025fc8:	8804d4ba 	srli	r2,r17,18
 4025fcc:	12001f44 	addi	r8,r2,125
 4025fd0:	11c01f04 	addi	r7,r2,124
 4025fd4:	4209883a 	add	r4,r8,r8
 4025fd8:	003e5906 	br	4025940 <__alt_data_end+0xfffe5940>
 4025fdc:	ad400404 	addi	r21,r21,16
 4025fe0:	003f1706 	br	4025c40 <__alt_data_end+0xfffe5c40>
 4025fe4:	00c01504 	movi	r3,84
 4025fe8:	18802336 	bltu	r3,r2,4026078 <_malloc_r+0x7b0>
 4025fec:	3804d33a 	srli	r2,r7,12
 4025ff0:	11401bc4 	addi	r5,r2,111
 4025ff4:	10c01b84 	addi	r3,r2,110
 4025ff8:	294b883a 	add	r5,r5,r5
 4025ffc:	003f7b06 	br	4025dec <__alt_data_end+0xfffe5dec>
 4026000:	9c000217 	ldw	r16,8(r19)
 4026004:	00bfff04 	movi	r2,-4
 4026008:	80c00117 	ldw	r3,4(r16)
 402600c:	1886703a 	and	r3,r3,r2
 4026010:	003f5306 	br	4025d60 <__alt_data_end+0xfffe5d60>
 4026014:	3083ffcc 	andi	r2,r6,4095
 4026018:	103f181e 	bne	r2,zero,4025c7c <__alt_data_end+0xfffe5c7c>
 402601c:	99000217 	ldw	r4,8(r19)
 4026020:	b545883a 	add	r2,r22,r21
 4026024:	10800054 	ori	r2,r2,1
 4026028:	20800115 	stw	r2,4(r4)
 402602c:	003f3e06 	br	4025d28 <__alt_data_end+0xfffe5d28>
 4026030:	01003f84 	movi	r4,254
 4026034:	02001fc4 	movi	r8,127
 4026038:	01c01f84 	movi	r7,126
 402603c:	003e4006 	br	4025940 <__alt_data_end+0xfffe5940>
 4026040:	008100f4 	movhi	r2,1027
 4026044:	10886d04 	addi	r2,r2,8628
 4026048:	15000015 	stw	r20,0(r2)
 402604c:	003f1106 	br	4025c94 <__alt_data_end+0xfffe5c94>
 4026050:	00800044 	movi	r2,1
 4026054:	002b883a 	mov	r21,zero
 4026058:	003f1f06 	br	4025cd8 <__alt_data_end+0xfffe5cd8>
 402605c:	81400204 	addi	r5,r16,8
 4026060:	9009883a 	mov	r4,r18
 4026064:	4024cdc0 	call	4024cdc <_free_r>
 4026068:	008100f4 	movhi	r2,1027
 402606c:	108f8404 	addi	r2,r2,15888
 4026070:	10c00017 	ldw	r3,0(r2)
 4026074:	003f2c06 	br	4025d28 <__alt_data_end+0xfffe5d28>
 4026078:	00c05504 	movi	r3,340
 402607c:	18800536 	bltu	r3,r2,4026094 <_malloc_r+0x7cc>
 4026080:	3804d3fa 	srli	r2,r7,15
 4026084:	11401e04 	addi	r5,r2,120
 4026088:	10c01dc4 	addi	r3,r2,119
 402608c:	294b883a 	add	r5,r5,r5
 4026090:	003f5606 	br	4025dec <__alt_data_end+0xfffe5dec>
 4026094:	00c15504 	movi	r3,1364
 4026098:	18800536 	bltu	r3,r2,40260b0 <_malloc_r+0x7e8>
 402609c:	3804d4ba 	srli	r2,r7,18
 40260a0:	11401f44 	addi	r5,r2,125
 40260a4:	10c01f04 	addi	r3,r2,124
 40260a8:	294b883a 	add	r5,r5,r5
 40260ac:	003f4f06 	br	4025dec <__alt_data_end+0xfffe5dec>
 40260b0:	01403f84 	movi	r5,254
 40260b4:	00c01f84 	movi	r3,126
 40260b8:	003f4c06 	br	4025dec <__alt_data_end+0xfffe5dec>
 40260bc:	98800117 	ldw	r2,4(r19)
 40260c0:	003fa006 	br	4025f44 <__alt_data_end+0xfffe5f44>
 40260c4:	8808d0fa 	srli	r4,r17,3
 40260c8:	20800044 	addi	r2,r4,1
 40260cc:	1085883a 	add	r2,r2,r2
 40260d0:	003e9006 	br	4025b14 <__alt_data_end+0xfffe5b14>

040260d4 <memchr>:
 40260d4:	208000cc 	andi	r2,r4,3
 40260d8:	280f883a 	mov	r7,r5
 40260dc:	10003426 	beq	r2,zero,40261b0 <memchr+0xdc>
 40260e0:	30bfffc4 	addi	r2,r6,-1
 40260e4:	30001a26 	beq	r6,zero,4026150 <memchr+0x7c>
 40260e8:	20c00003 	ldbu	r3,0(r4)
 40260ec:	29803fcc 	andi	r6,r5,255
 40260f0:	30c0051e 	bne	r6,r3,4026108 <memchr+0x34>
 40260f4:	00001806 	br	4026158 <memchr+0x84>
 40260f8:	10001526 	beq	r2,zero,4026150 <memchr+0x7c>
 40260fc:	20c00003 	ldbu	r3,0(r4)
 4026100:	10bfffc4 	addi	r2,r2,-1
 4026104:	30c01426 	beq	r6,r3,4026158 <memchr+0x84>
 4026108:	21000044 	addi	r4,r4,1
 402610c:	20c000cc 	andi	r3,r4,3
 4026110:	183ff91e 	bne	r3,zero,40260f8 <__alt_data_end+0xfffe60f8>
 4026114:	020000c4 	movi	r8,3
 4026118:	40801136 	bltu	r8,r2,4026160 <memchr+0x8c>
 402611c:	10000c26 	beq	r2,zero,4026150 <memchr+0x7c>
 4026120:	20c00003 	ldbu	r3,0(r4)
 4026124:	29403fcc 	andi	r5,r5,255
 4026128:	28c00b26 	beq	r5,r3,4026158 <memchr+0x84>
 402612c:	20c00044 	addi	r3,r4,1
 4026130:	39803fcc 	andi	r6,r7,255
 4026134:	2089883a 	add	r4,r4,r2
 4026138:	00000306 	br	4026148 <memchr+0x74>
 402613c:	18c00044 	addi	r3,r3,1
 4026140:	197fffc3 	ldbu	r5,-1(r3)
 4026144:	31400526 	beq	r6,r5,402615c <memchr+0x88>
 4026148:	1805883a 	mov	r2,r3
 402614c:	20fffb1e 	bne	r4,r3,402613c <__alt_data_end+0xfffe613c>
 4026150:	0005883a 	mov	r2,zero
 4026154:	f800283a 	ret
 4026158:	2005883a 	mov	r2,r4
 402615c:	f800283a 	ret
 4026160:	28c03fcc 	andi	r3,r5,255
 4026164:	1812923a 	slli	r9,r3,8
 4026168:	02ffbff4 	movhi	r11,65279
 402616c:	02a02074 	movhi	r10,32897
 4026170:	48d2b03a 	or	r9,r9,r3
 4026174:	4806943a 	slli	r3,r9,16
 4026178:	5affbfc4 	addi	r11,r11,-257
 402617c:	52a02004 	addi	r10,r10,-32640
 4026180:	48d2b03a 	or	r9,r9,r3
 4026184:	20c00017 	ldw	r3,0(r4)
 4026188:	48c6f03a 	xor	r3,r9,r3
 402618c:	1acd883a 	add	r6,r3,r11
 4026190:	00c6303a 	nor	r3,zero,r3
 4026194:	30c6703a 	and	r3,r6,r3
 4026198:	1a86703a 	and	r3,r3,r10
 402619c:	183fe01e 	bne	r3,zero,4026120 <__alt_data_end+0xfffe6120>
 40261a0:	10bfff04 	addi	r2,r2,-4
 40261a4:	21000104 	addi	r4,r4,4
 40261a8:	40bff636 	bltu	r8,r2,4026184 <__alt_data_end+0xfffe6184>
 40261ac:	003fdb06 	br	402611c <__alt_data_end+0xfffe611c>
 40261b0:	3005883a 	mov	r2,r6
 40261b4:	003fd706 	br	4026114 <__alt_data_end+0xfffe6114>

040261b8 <memcpy>:
 40261b8:	defffd04 	addi	sp,sp,-12
 40261bc:	dfc00215 	stw	ra,8(sp)
 40261c0:	dc400115 	stw	r17,4(sp)
 40261c4:	dc000015 	stw	r16,0(sp)
 40261c8:	00c003c4 	movi	r3,15
 40261cc:	2005883a 	mov	r2,r4
 40261d0:	1980452e 	bgeu	r3,r6,40262e8 <memcpy+0x130>
 40261d4:	2906b03a 	or	r3,r5,r4
 40261d8:	18c000cc 	andi	r3,r3,3
 40261dc:	1800441e 	bne	r3,zero,40262f0 <memcpy+0x138>
 40261e0:	347ffc04 	addi	r17,r6,-16
 40261e4:	8822d13a 	srli	r17,r17,4
 40261e8:	28c00104 	addi	r3,r5,4
 40261ec:	23400104 	addi	r13,r4,4
 40261f0:	8820913a 	slli	r16,r17,4
 40261f4:	2b000204 	addi	r12,r5,8
 40261f8:	22c00204 	addi	r11,r4,8
 40261fc:	84000504 	addi	r16,r16,20
 4026200:	2a800304 	addi	r10,r5,12
 4026204:	22400304 	addi	r9,r4,12
 4026208:	2c21883a 	add	r16,r5,r16
 402620c:	2811883a 	mov	r8,r5
 4026210:	200f883a 	mov	r7,r4
 4026214:	41000017 	ldw	r4,0(r8)
 4026218:	1fc00017 	ldw	ra,0(r3)
 402621c:	63c00017 	ldw	r15,0(r12)
 4026220:	39000015 	stw	r4,0(r7)
 4026224:	53800017 	ldw	r14,0(r10)
 4026228:	6fc00015 	stw	ra,0(r13)
 402622c:	5bc00015 	stw	r15,0(r11)
 4026230:	4b800015 	stw	r14,0(r9)
 4026234:	18c00404 	addi	r3,r3,16
 4026238:	39c00404 	addi	r7,r7,16
 402623c:	42000404 	addi	r8,r8,16
 4026240:	6b400404 	addi	r13,r13,16
 4026244:	63000404 	addi	r12,r12,16
 4026248:	5ac00404 	addi	r11,r11,16
 402624c:	52800404 	addi	r10,r10,16
 4026250:	4a400404 	addi	r9,r9,16
 4026254:	1c3fef1e 	bne	r3,r16,4026214 <__alt_data_end+0xfffe6214>
 4026258:	89c00044 	addi	r7,r17,1
 402625c:	380e913a 	slli	r7,r7,4
 4026260:	310003cc 	andi	r4,r6,15
 4026264:	02c000c4 	movi	r11,3
 4026268:	11c7883a 	add	r3,r2,r7
 402626c:	29cb883a 	add	r5,r5,r7
 4026270:	5900212e 	bgeu	r11,r4,40262f8 <memcpy+0x140>
 4026274:	1813883a 	mov	r9,r3
 4026278:	2811883a 	mov	r8,r5
 402627c:	200f883a 	mov	r7,r4
 4026280:	42800017 	ldw	r10,0(r8)
 4026284:	4a400104 	addi	r9,r9,4
 4026288:	39ffff04 	addi	r7,r7,-4
 402628c:	4abfff15 	stw	r10,-4(r9)
 4026290:	42000104 	addi	r8,r8,4
 4026294:	59fffa36 	bltu	r11,r7,4026280 <__alt_data_end+0xfffe6280>
 4026298:	213fff04 	addi	r4,r4,-4
 402629c:	2008d0ba 	srli	r4,r4,2
 40262a0:	318000cc 	andi	r6,r6,3
 40262a4:	21000044 	addi	r4,r4,1
 40262a8:	2109883a 	add	r4,r4,r4
 40262ac:	2109883a 	add	r4,r4,r4
 40262b0:	1907883a 	add	r3,r3,r4
 40262b4:	290b883a 	add	r5,r5,r4
 40262b8:	30000626 	beq	r6,zero,40262d4 <memcpy+0x11c>
 40262bc:	198d883a 	add	r6,r3,r6
 40262c0:	29c00003 	ldbu	r7,0(r5)
 40262c4:	18c00044 	addi	r3,r3,1
 40262c8:	29400044 	addi	r5,r5,1
 40262cc:	19ffffc5 	stb	r7,-1(r3)
 40262d0:	19bffb1e 	bne	r3,r6,40262c0 <__alt_data_end+0xfffe62c0>
 40262d4:	dfc00217 	ldw	ra,8(sp)
 40262d8:	dc400117 	ldw	r17,4(sp)
 40262dc:	dc000017 	ldw	r16,0(sp)
 40262e0:	dec00304 	addi	sp,sp,12
 40262e4:	f800283a 	ret
 40262e8:	2007883a 	mov	r3,r4
 40262ec:	003ff206 	br	40262b8 <__alt_data_end+0xfffe62b8>
 40262f0:	2007883a 	mov	r3,r4
 40262f4:	003ff106 	br	40262bc <__alt_data_end+0xfffe62bc>
 40262f8:	200d883a 	mov	r6,r4
 40262fc:	003fee06 	br	40262b8 <__alt_data_end+0xfffe62b8>

04026300 <memmove>:
 4026300:	2005883a 	mov	r2,r4
 4026304:	29000b2e 	bgeu	r5,r4,4026334 <memmove+0x34>
 4026308:	298f883a 	add	r7,r5,r6
 402630c:	21c0092e 	bgeu	r4,r7,4026334 <memmove+0x34>
 4026310:	2187883a 	add	r3,r4,r6
 4026314:	198bc83a 	sub	r5,r3,r6
 4026318:	30004826 	beq	r6,zero,402643c <memmove+0x13c>
 402631c:	39ffffc4 	addi	r7,r7,-1
 4026320:	39000003 	ldbu	r4,0(r7)
 4026324:	18ffffc4 	addi	r3,r3,-1
 4026328:	19000005 	stb	r4,0(r3)
 402632c:	28fffb1e 	bne	r5,r3,402631c <__alt_data_end+0xfffe631c>
 4026330:	f800283a 	ret
 4026334:	00c003c4 	movi	r3,15
 4026338:	1980412e 	bgeu	r3,r6,4026440 <memmove+0x140>
 402633c:	2886b03a 	or	r3,r5,r2
 4026340:	18c000cc 	andi	r3,r3,3
 4026344:	1800401e 	bne	r3,zero,4026448 <memmove+0x148>
 4026348:	33fffc04 	addi	r15,r6,-16
 402634c:	781ed13a 	srli	r15,r15,4
 4026350:	28c00104 	addi	r3,r5,4
 4026354:	13400104 	addi	r13,r2,4
 4026358:	781c913a 	slli	r14,r15,4
 402635c:	2b000204 	addi	r12,r5,8
 4026360:	12c00204 	addi	r11,r2,8
 4026364:	73800504 	addi	r14,r14,20
 4026368:	2a800304 	addi	r10,r5,12
 402636c:	12400304 	addi	r9,r2,12
 4026370:	2b9d883a 	add	r14,r5,r14
 4026374:	2811883a 	mov	r8,r5
 4026378:	100f883a 	mov	r7,r2
 402637c:	41000017 	ldw	r4,0(r8)
 4026380:	39c00404 	addi	r7,r7,16
 4026384:	18c00404 	addi	r3,r3,16
 4026388:	393ffc15 	stw	r4,-16(r7)
 402638c:	193ffc17 	ldw	r4,-16(r3)
 4026390:	6b400404 	addi	r13,r13,16
 4026394:	5ac00404 	addi	r11,r11,16
 4026398:	693ffc15 	stw	r4,-16(r13)
 402639c:	61000017 	ldw	r4,0(r12)
 40263a0:	4a400404 	addi	r9,r9,16
 40263a4:	42000404 	addi	r8,r8,16
 40263a8:	593ffc15 	stw	r4,-16(r11)
 40263ac:	51000017 	ldw	r4,0(r10)
 40263b0:	63000404 	addi	r12,r12,16
 40263b4:	52800404 	addi	r10,r10,16
 40263b8:	493ffc15 	stw	r4,-16(r9)
 40263bc:	1bbfef1e 	bne	r3,r14,402637c <__alt_data_end+0xfffe637c>
 40263c0:	79000044 	addi	r4,r15,1
 40263c4:	2008913a 	slli	r4,r4,4
 40263c8:	328003cc 	andi	r10,r6,15
 40263cc:	02c000c4 	movi	r11,3
 40263d0:	1107883a 	add	r3,r2,r4
 40263d4:	290b883a 	add	r5,r5,r4
 40263d8:	5a801e2e 	bgeu	r11,r10,4026454 <memmove+0x154>
 40263dc:	1813883a 	mov	r9,r3
 40263e0:	2811883a 	mov	r8,r5
 40263e4:	500f883a 	mov	r7,r10
 40263e8:	41000017 	ldw	r4,0(r8)
 40263ec:	4a400104 	addi	r9,r9,4
 40263f0:	39ffff04 	addi	r7,r7,-4
 40263f4:	493fff15 	stw	r4,-4(r9)
 40263f8:	42000104 	addi	r8,r8,4
 40263fc:	59fffa36 	bltu	r11,r7,40263e8 <__alt_data_end+0xfffe63e8>
 4026400:	513fff04 	addi	r4,r10,-4
 4026404:	2008d0ba 	srli	r4,r4,2
 4026408:	318000cc 	andi	r6,r6,3
 402640c:	21000044 	addi	r4,r4,1
 4026410:	2109883a 	add	r4,r4,r4
 4026414:	2109883a 	add	r4,r4,r4
 4026418:	1907883a 	add	r3,r3,r4
 402641c:	290b883a 	add	r5,r5,r4
 4026420:	30000b26 	beq	r6,zero,4026450 <memmove+0x150>
 4026424:	198d883a 	add	r6,r3,r6
 4026428:	29c00003 	ldbu	r7,0(r5)
 402642c:	18c00044 	addi	r3,r3,1
 4026430:	29400044 	addi	r5,r5,1
 4026434:	19ffffc5 	stb	r7,-1(r3)
 4026438:	19bffb1e 	bne	r3,r6,4026428 <__alt_data_end+0xfffe6428>
 402643c:	f800283a 	ret
 4026440:	1007883a 	mov	r3,r2
 4026444:	003ff606 	br	4026420 <__alt_data_end+0xfffe6420>
 4026448:	1007883a 	mov	r3,r2
 402644c:	003ff506 	br	4026424 <__alt_data_end+0xfffe6424>
 4026450:	f800283a 	ret
 4026454:	500d883a 	mov	r6,r10
 4026458:	003ff106 	br	4026420 <__alt_data_end+0xfffe6420>

0402645c <memset>:
 402645c:	20c000cc 	andi	r3,r4,3
 4026460:	2005883a 	mov	r2,r4
 4026464:	18004426 	beq	r3,zero,4026578 <memset+0x11c>
 4026468:	31ffffc4 	addi	r7,r6,-1
 402646c:	30004026 	beq	r6,zero,4026570 <memset+0x114>
 4026470:	2813883a 	mov	r9,r5
 4026474:	200d883a 	mov	r6,r4
 4026478:	2007883a 	mov	r3,r4
 402647c:	00000406 	br	4026490 <memset+0x34>
 4026480:	3a3fffc4 	addi	r8,r7,-1
 4026484:	31800044 	addi	r6,r6,1
 4026488:	38003926 	beq	r7,zero,4026570 <memset+0x114>
 402648c:	400f883a 	mov	r7,r8
 4026490:	18c00044 	addi	r3,r3,1
 4026494:	32400005 	stb	r9,0(r6)
 4026498:	1a0000cc 	andi	r8,r3,3
 402649c:	403ff81e 	bne	r8,zero,4026480 <__alt_data_end+0xfffe6480>
 40264a0:	010000c4 	movi	r4,3
 40264a4:	21c02d2e 	bgeu	r4,r7,402655c <memset+0x100>
 40264a8:	29003fcc 	andi	r4,r5,255
 40264ac:	200c923a 	slli	r6,r4,8
 40264b0:	3108b03a 	or	r4,r6,r4
 40264b4:	200c943a 	slli	r6,r4,16
 40264b8:	218cb03a 	or	r6,r4,r6
 40264bc:	010003c4 	movi	r4,15
 40264c0:	21c0182e 	bgeu	r4,r7,4026524 <memset+0xc8>
 40264c4:	3b3ffc04 	addi	r12,r7,-16
 40264c8:	6018d13a 	srli	r12,r12,4
 40264cc:	1a000104 	addi	r8,r3,4
 40264d0:	1ac00204 	addi	r11,r3,8
 40264d4:	6008913a 	slli	r4,r12,4
 40264d8:	1a800304 	addi	r10,r3,12
 40264dc:	1813883a 	mov	r9,r3
 40264e0:	21000504 	addi	r4,r4,20
 40264e4:	1909883a 	add	r4,r3,r4
 40264e8:	49800015 	stw	r6,0(r9)
 40264ec:	41800015 	stw	r6,0(r8)
 40264f0:	59800015 	stw	r6,0(r11)
 40264f4:	51800015 	stw	r6,0(r10)
 40264f8:	42000404 	addi	r8,r8,16
 40264fc:	4a400404 	addi	r9,r9,16
 4026500:	5ac00404 	addi	r11,r11,16
 4026504:	52800404 	addi	r10,r10,16
 4026508:	413ff71e 	bne	r8,r4,40264e8 <__alt_data_end+0xfffe64e8>
 402650c:	63000044 	addi	r12,r12,1
 4026510:	6018913a 	slli	r12,r12,4
 4026514:	39c003cc 	andi	r7,r7,15
 4026518:	010000c4 	movi	r4,3
 402651c:	1b07883a 	add	r3,r3,r12
 4026520:	21c00e2e 	bgeu	r4,r7,402655c <memset+0x100>
 4026524:	1813883a 	mov	r9,r3
 4026528:	3811883a 	mov	r8,r7
 402652c:	010000c4 	movi	r4,3
 4026530:	49800015 	stw	r6,0(r9)
 4026534:	423fff04 	addi	r8,r8,-4
 4026538:	4a400104 	addi	r9,r9,4
 402653c:	223ffc36 	bltu	r4,r8,4026530 <__alt_data_end+0xfffe6530>
 4026540:	393fff04 	addi	r4,r7,-4
 4026544:	2008d0ba 	srli	r4,r4,2
 4026548:	39c000cc 	andi	r7,r7,3
 402654c:	21000044 	addi	r4,r4,1
 4026550:	2109883a 	add	r4,r4,r4
 4026554:	2109883a 	add	r4,r4,r4
 4026558:	1907883a 	add	r3,r3,r4
 402655c:	38000526 	beq	r7,zero,4026574 <memset+0x118>
 4026560:	19cf883a 	add	r7,r3,r7
 4026564:	19400005 	stb	r5,0(r3)
 4026568:	18c00044 	addi	r3,r3,1
 402656c:	38fffd1e 	bne	r7,r3,4026564 <__alt_data_end+0xfffe6564>
 4026570:	f800283a 	ret
 4026574:	f800283a 	ret
 4026578:	2007883a 	mov	r3,r4
 402657c:	300f883a 	mov	r7,r6
 4026580:	003fc706 	br	40264a0 <__alt_data_end+0xfffe64a0>

04026584 <_Balloc>:
 4026584:	20801317 	ldw	r2,76(r4)
 4026588:	defffc04 	addi	sp,sp,-16
 402658c:	dc400115 	stw	r17,4(sp)
 4026590:	dc000015 	stw	r16,0(sp)
 4026594:	dfc00315 	stw	ra,12(sp)
 4026598:	dc800215 	stw	r18,8(sp)
 402659c:	2023883a 	mov	r17,r4
 40265a0:	2821883a 	mov	r16,r5
 40265a4:	10000f26 	beq	r2,zero,40265e4 <_Balloc+0x60>
 40265a8:	8407883a 	add	r3,r16,r16
 40265ac:	18c7883a 	add	r3,r3,r3
 40265b0:	10c7883a 	add	r3,r2,r3
 40265b4:	18800017 	ldw	r2,0(r3)
 40265b8:	10001126 	beq	r2,zero,4026600 <_Balloc+0x7c>
 40265bc:	11000017 	ldw	r4,0(r2)
 40265c0:	19000015 	stw	r4,0(r3)
 40265c4:	10000415 	stw	zero,16(r2)
 40265c8:	10000315 	stw	zero,12(r2)
 40265cc:	dfc00317 	ldw	ra,12(sp)
 40265d0:	dc800217 	ldw	r18,8(sp)
 40265d4:	dc400117 	ldw	r17,4(sp)
 40265d8:	dc000017 	ldw	r16,0(sp)
 40265dc:	dec00404 	addi	sp,sp,16
 40265e0:	f800283a 	ret
 40265e4:	01800844 	movi	r6,33
 40265e8:	01400104 	movi	r5,4
 40265ec:	40294c00 	call	40294c0 <_calloc_r>
 40265f0:	88801315 	stw	r2,76(r17)
 40265f4:	103fec1e 	bne	r2,zero,40265a8 <__alt_data_end+0xfffe65a8>
 40265f8:	0005883a 	mov	r2,zero
 40265fc:	003ff306 	br	40265cc <__alt_data_end+0xfffe65cc>
 4026600:	01400044 	movi	r5,1
 4026604:	2c24983a 	sll	r18,r5,r16
 4026608:	8809883a 	mov	r4,r17
 402660c:	91800144 	addi	r6,r18,5
 4026610:	318d883a 	add	r6,r6,r6
 4026614:	318d883a 	add	r6,r6,r6
 4026618:	40294c00 	call	40294c0 <_calloc_r>
 402661c:	103ff626 	beq	r2,zero,40265f8 <__alt_data_end+0xfffe65f8>
 4026620:	14000115 	stw	r16,4(r2)
 4026624:	14800215 	stw	r18,8(r2)
 4026628:	003fe606 	br	40265c4 <__alt_data_end+0xfffe65c4>

0402662c <_Bfree>:
 402662c:	28000826 	beq	r5,zero,4026650 <_Bfree+0x24>
 4026630:	28c00117 	ldw	r3,4(r5)
 4026634:	20801317 	ldw	r2,76(r4)
 4026638:	18c7883a 	add	r3,r3,r3
 402663c:	18c7883a 	add	r3,r3,r3
 4026640:	10c5883a 	add	r2,r2,r3
 4026644:	10c00017 	ldw	r3,0(r2)
 4026648:	28c00015 	stw	r3,0(r5)
 402664c:	11400015 	stw	r5,0(r2)
 4026650:	f800283a 	ret

04026654 <__multadd>:
 4026654:	defffa04 	addi	sp,sp,-24
 4026658:	dc800315 	stw	r18,12(sp)
 402665c:	dc400215 	stw	r17,8(sp)
 4026660:	dc000115 	stw	r16,4(sp)
 4026664:	2823883a 	mov	r17,r5
 4026668:	2c000417 	ldw	r16,16(r5)
 402666c:	dfc00515 	stw	ra,20(sp)
 4026670:	dcc00415 	stw	r19,16(sp)
 4026674:	2025883a 	mov	r18,r4
 4026678:	29400504 	addi	r5,r5,20
 402667c:	0011883a 	mov	r8,zero
 4026680:	28c00017 	ldw	r3,0(r5)
 4026684:	29400104 	addi	r5,r5,4
 4026688:	42000044 	addi	r8,r8,1
 402668c:	18bfffcc 	andi	r2,r3,65535
 4026690:	1185383a 	mul	r2,r2,r6
 4026694:	1806d43a 	srli	r3,r3,16
 4026698:	11cf883a 	add	r7,r2,r7
 402669c:	3808d43a 	srli	r4,r7,16
 40266a0:	1987383a 	mul	r3,r3,r6
 40266a4:	38bfffcc 	andi	r2,r7,65535
 40266a8:	1907883a 	add	r3,r3,r4
 40266ac:	1808943a 	slli	r4,r3,16
 40266b0:	180ed43a 	srli	r7,r3,16
 40266b4:	2085883a 	add	r2,r4,r2
 40266b8:	28bfff15 	stw	r2,-4(r5)
 40266bc:	443ff016 	blt	r8,r16,4026680 <__alt_data_end+0xfffe6680>
 40266c0:	38000926 	beq	r7,zero,40266e8 <__multadd+0x94>
 40266c4:	88800217 	ldw	r2,8(r17)
 40266c8:	80800f0e 	bge	r16,r2,4026708 <__multadd+0xb4>
 40266cc:	80800144 	addi	r2,r16,5
 40266d0:	1085883a 	add	r2,r2,r2
 40266d4:	1085883a 	add	r2,r2,r2
 40266d8:	8885883a 	add	r2,r17,r2
 40266dc:	11c00015 	stw	r7,0(r2)
 40266e0:	84000044 	addi	r16,r16,1
 40266e4:	8c000415 	stw	r16,16(r17)
 40266e8:	8805883a 	mov	r2,r17
 40266ec:	dfc00517 	ldw	ra,20(sp)
 40266f0:	dcc00417 	ldw	r19,16(sp)
 40266f4:	dc800317 	ldw	r18,12(sp)
 40266f8:	dc400217 	ldw	r17,8(sp)
 40266fc:	dc000117 	ldw	r16,4(sp)
 4026700:	dec00604 	addi	sp,sp,24
 4026704:	f800283a 	ret
 4026708:	89400117 	ldw	r5,4(r17)
 402670c:	9009883a 	mov	r4,r18
 4026710:	d9c00015 	stw	r7,0(sp)
 4026714:	29400044 	addi	r5,r5,1
 4026718:	40265840 	call	4026584 <_Balloc>
 402671c:	89800417 	ldw	r6,16(r17)
 4026720:	89400304 	addi	r5,r17,12
 4026724:	11000304 	addi	r4,r2,12
 4026728:	31800084 	addi	r6,r6,2
 402672c:	318d883a 	add	r6,r6,r6
 4026730:	318d883a 	add	r6,r6,r6
 4026734:	1027883a 	mov	r19,r2
 4026738:	40261b80 	call	40261b8 <memcpy>
 402673c:	d9c00017 	ldw	r7,0(sp)
 4026740:	88000a26 	beq	r17,zero,402676c <__multadd+0x118>
 4026744:	88c00117 	ldw	r3,4(r17)
 4026748:	90801317 	ldw	r2,76(r18)
 402674c:	18c7883a 	add	r3,r3,r3
 4026750:	18c7883a 	add	r3,r3,r3
 4026754:	10c5883a 	add	r2,r2,r3
 4026758:	10c00017 	ldw	r3,0(r2)
 402675c:	88c00015 	stw	r3,0(r17)
 4026760:	14400015 	stw	r17,0(r2)
 4026764:	9823883a 	mov	r17,r19
 4026768:	003fd806 	br	40266cc <__alt_data_end+0xfffe66cc>
 402676c:	9823883a 	mov	r17,r19
 4026770:	003fd606 	br	40266cc <__alt_data_end+0xfffe66cc>

04026774 <__s2b>:
 4026774:	defff904 	addi	sp,sp,-28
 4026778:	dc400115 	stw	r17,4(sp)
 402677c:	dc000015 	stw	r16,0(sp)
 4026780:	2023883a 	mov	r17,r4
 4026784:	2821883a 	mov	r16,r5
 4026788:	39000204 	addi	r4,r7,8
 402678c:	01400244 	movi	r5,9
 4026790:	dcc00315 	stw	r19,12(sp)
 4026794:	dc800215 	stw	r18,8(sp)
 4026798:	dfc00615 	stw	ra,24(sp)
 402679c:	dd400515 	stw	r21,20(sp)
 40267a0:	dd000415 	stw	r20,16(sp)
 40267a4:	3825883a 	mov	r18,r7
 40267a8:	3027883a 	mov	r19,r6
 40267ac:	402a7f00 	call	402a7f0 <__divsi3>
 40267b0:	00c00044 	movi	r3,1
 40267b4:	000b883a 	mov	r5,zero
 40267b8:	1880030e 	bge	r3,r2,40267c8 <__s2b+0x54>
 40267bc:	18c7883a 	add	r3,r3,r3
 40267c0:	29400044 	addi	r5,r5,1
 40267c4:	18bffd16 	blt	r3,r2,40267bc <__alt_data_end+0xfffe67bc>
 40267c8:	8809883a 	mov	r4,r17
 40267cc:	40265840 	call	4026584 <_Balloc>
 40267d0:	d8c00717 	ldw	r3,28(sp)
 40267d4:	10c00515 	stw	r3,20(r2)
 40267d8:	00c00044 	movi	r3,1
 40267dc:	10c00415 	stw	r3,16(r2)
 40267e0:	00c00244 	movi	r3,9
 40267e4:	1cc0210e 	bge	r3,r19,402686c <__s2b+0xf8>
 40267e8:	80eb883a 	add	r21,r16,r3
 40267ec:	a829883a 	mov	r20,r21
 40267f0:	84e1883a 	add	r16,r16,r19
 40267f4:	a1c00007 	ldb	r7,0(r20)
 40267f8:	01800284 	movi	r6,10
 40267fc:	a5000044 	addi	r20,r20,1
 4026800:	100b883a 	mov	r5,r2
 4026804:	39fff404 	addi	r7,r7,-48
 4026808:	8809883a 	mov	r4,r17
 402680c:	40266540 	call	4026654 <__multadd>
 4026810:	a43ff81e 	bne	r20,r16,40267f4 <__alt_data_end+0xfffe67f4>
 4026814:	ace1883a 	add	r16,r21,r19
 4026818:	843ffe04 	addi	r16,r16,-8
 402681c:	9c800a0e 	bge	r19,r18,4026848 <__s2b+0xd4>
 4026820:	94e5c83a 	sub	r18,r18,r19
 4026824:	84a5883a 	add	r18,r16,r18
 4026828:	81c00007 	ldb	r7,0(r16)
 402682c:	01800284 	movi	r6,10
 4026830:	84000044 	addi	r16,r16,1
 4026834:	100b883a 	mov	r5,r2
 4026838:	39fff404 	addi	r7,r7,-48
 402683c:	8809883a 	mov	r4,r17
 4026840:	40266540 	call	4026654 <__multadd>
 4026844:	84bff81e 	bne	r16,r18,4026828 <__alt_data_end+0xfffe6828>
 4026848:	dfc00617 	ldw	ra,24(sp)
 402684c:	dd400517 	ldw	r21,20(sp)
 4026850:	dd000417 	ldw	r20,16(sp)
 4026854:	dcc00317 	ldw	r19,12(sp)
 4026858:	dc800217 	ldw	r18,8(sp)
 402685c:	dc400117 	ldw	r17,4(sp)
 4026860:	dc000017 	ldw	r16,0(sp)
 4026864:	dec00704 	addi	sp,sp,28
 4026868:	f800283a 	ret
 402686c:	84000284 	addi	r16,r16,10
 4026870:	1827883a 	mov	r19,r3
 4026874:	003fe906 	br	402681c <__alt_data_end+0xfffe681c>

04026878 <__hi0bits>:
 4026878:	20bfffec 	andhi	r2,r4,65535
 402687c:	1000141e 	bne	r2,zero,40268d0 <__hi0bits+0x58>
 4026880:	2008943a 	slli	r4,r4,16
 4026884:	00800404 	movi	r2,16
 4026888:	20ffc02c 	andhi	r3,r4,65280
 402688c:	1800021e 	bne	r3,zero,4026898 <__hi0bits+0x20>
 4026890:	2008923a 	slli	r4,r4,8
 4026894:	10800204 	addi	r2,r2,8
 4026898:	20fc002c 	andhi	r3,r4,61440
 402689c:	1800021e 	bne	r3,zero,40268a8 <__hi0bits+0x30>
 40268a0:	2008913a 	slli	r4,r4,4
 40268a4:	10800104 	addi	r2,r2,4
 40268a8:	20f0002c 	andhi	r3,r4,49152
 40268ac:	1800031e 	bne	r3,zero,40268bc <__hi0bits+0x44>
 40268b0:	2109883a 	add	r4,r4,r4
 40268b4:	10800084 	addi	r2,r2,2
 40268b8:	2109883a 	add	r4,r4,r4
 40268bc:	20000316 	blt	r4,zero,40268cc <__hi0bits+0x54>
 40268c0:	2110002c 	andhi	r4,r4,16384
 40268c4:	2000041e 	bne	r4,zero,40268d8 <__hi0bits+0x60>
 40268c8:	00800804 	movi	r2,32
 40268cc:	f800283a 	ret
 40268d0:	0005883a 	mov	r2,zero
 40268d4:	003fec06 	br	4026888 <__alt_data_end+0xfffe6888>
 40268d8:	10800044 	addi	r2,r2,1
 40268dc:	f800283a 	ret

040268e0 <__lo0bits>:
 40268e0:	20c00017 	ldw	r3,0(r4)
 40268e4:	188001cc 	andi	r2,r3,7
 40268e8:	10000826 	beq	r2,zero,402690c <__lo0bits+0x2c>
 40268ec:	1880004c 	andi	r2,r3,1
 40268f0:	1000211e 	bne	r2,zero,4026978 <__lo0bits+0x98>
 40268f4:	1880008c 	andi	r2,r3,2
 40268f8:	1000211e 	bne	r2,zero,4026980 <__lo0bits+0xa0>
 40268fc:	1806d0ba 	srli	r3,r3,2
 4026900:	00800084 	movi	r2,2
 4026904:	20c00015 	stw	r3,0(r4)
 4026908:	f800283a 	ret
 402690c:	18bfffcc 	andi	r2,r3,65535
 4026910:	10001326 	beq	r2,zero,4026960 <__lo0bits+0x80>
 4026914:	0005883a 	mov	r2,zero
 4026918:	19403fcc 	andi	r5,r3,255
 402691c:	2800021e 	bne	r5,zero,4026928 <__lo0bits+0x48>
 4026920:	1806d23a 	srli	r3,r3,8
 4026924:	10800204 	addi	r2,r2,8
 4026928:	194003cc 	andi	r5,r3,15
 402692c:	2800021e 	bne	r5,zero,4026938 <__lo0bits+0x58>
 4026930:	1806d13a 	srli	r3,r3,4
 4026934:	10800104 	addi	r2,r2,4
 4026938:	194000cc 	andi	r5,r3,3
 402693c:	2800021e 	bne	r5,zero,4026948 <__lo0bits+0x68>
 4026940:	1806d0ba 	srli	r3,r3,2
 4026944:	10800084 	addi	r2,r2,2
 4026948:	1940004c 	andi	r5,r3,1
 402694c:	2800081e 	bne	r5,zero,4026970 <__lo0bits+0x90>
 4026950:	1806d07a 	srli	r3,r3,1
 4026954:	1800051e 	bne	r3,zero,402696c <__lo0bits+0x8c>
 4026958:	00800804 	movi	r2,32
 402695c:	f800283a 	ret
 4026960:	1806d43a 	srli	r3,r3,16
 4026964:	00800404 	movi	r2,16
 4026968:	003feb06 	br	4026918 <__alt_data_end+0xfffe6918>
 402696c:	10800044 	addi	r2,r2,1
 4026970:	20c00015 	stw	r3,0(r4)
 4026974:	f800283a 	ret
 4026978:	0005883a 	mov	r2,zero
 402697c:	f800283a 	ret
 4026980:	1806d07a 	srli	r3,r3,1
 4026984:	00800044 	movi	r2,1
 4026988:	20c00015 	stw	r3,0(r4)
 402698c:	f800283a 	ret

04026990 <__i2b>:
 4026990:	defffd04 	addi	sp,sp,-12
 4026994:	dc000015 	stw	r16,0(sp)
 4026998:	04000044 	movi	r16,1
 402699c:	dc400115 	stw	r17,4(sp)
 40269a0:	2823883a 	mov	r17,r5
 40269a4:	800b883a 	mov	r5,r16
 40269a8:	dfc00215 	stw	ra,8(sp)
 40269ac:	40265840 	call	4026584 <_Balloc>
 40269b0:	14400515 	stw	r17,20(r2)
 40269b4:	14000415 	stw	r16,16(r2)
 40269b8:	dfc00217 	ldw	ra,8(sp)
 40269bc:	dc400117 	ldw	r17,4(sp)
 40269c0:	dc000017 	ldw	r16,0(sp)
 40269c4:	dec00304 	addi	sp,sp,12
 40269c8:	f800283a 	ret

040269cc <__multiply>:
 40269cc:	defffa04 	addi	sp,sp,-24
 40269d0:	dcc00315 	stw	r19,12(sp)
 40269d4:	dc800215 	stw	r18,8(sp)
 40269d8:	34c00417 	ldw	r19,16(r6)
 40269dc:	2c800417 	ldw	r18,16(r5)
 40269e0:	dd000415 	stw	r20,16(sp)
 40269e4:	dc400115 	stw	r17,4(sp)
 40269e8:	dfc00515 	stw	ra,20(sp)
 40269ec:	dc000015 	stw	r16,0(sp)
 40269f0:	2829883a 	mov	r20,r5
 40269f4:	3023883a 	mov	r17,r6
 40269f8:	94c0050e 	bge	r18,r19,4026a10 <__multiply+0x44>
 40269fc:	9007883a 	mov	r3,r18
 4026a00:	3029883a 	mov	r20,r6
 4026a04:	9825883a 	mov	r18,r19
 4026a08:	2823883a 	mov	r17,r5
 4026a0c:	1827883a 	mov	r19,r3
 4026a10:	a0800217 	ldw	r2,8(r20)
 4026a14:	94e1883a 	add	r16,r18,r19
 4026a18:	a1400117 	ldw	r5,4(r20)
 4026a1c:	1400010e 	bge	r2,r16,4026a24 <__multiply+0x58>
 4026a20:	29400044 	addi	r5,r5,1
 4026a24:	40265840 	call	4026584 <_Balloc>
 4026a28:	8415883a 	add	r10,r16,r16
 4026a2c:	12c00504 	addi	r11,r2,20
 4026a30:	5295883a 	add	r10,r10,r10
 4026a34:	5a95883a 	add	r10,r11,r10
 4026a38:	5807883a 	mov	r3,r11
 4026a3c:	5a80032e 	bgeu	r11,r10,4026a4c <__multiply+0x80>
 4026a40:	18000015 	stw	zero,0(r3)
 4026a44:	18c00104 	addi	r3,r3,4
 4026a48:	1abffd36 	bltu	r3,r10,4026a40 <__alt_data_end+0xfffe6a40>
 4026a4c:	9ce7883a 	add	r19,r19,r19
 4026a50:	94a5883a 	add	r18,r18,r18
 4026a54:	89800504 	addi	r6,r17,20
 4026a58:	9ce7883a 	add	r19,r19,r19
 4026a5c:	a3400504 	addi	r13,r20,20
 4026a60:	94a5883a 	add	r18,r18,r18
 4026a64:	34d9883a 	add	r12,r6,r19
 4026a68:	6c93883a 	add	r9,r13,r18
 4026a6c:	3300422e 	bgeu	r6,r12,4026b78 <__multiply+0x1ac>
 4026a70:	37c00017 	ldw	ra,0(r6)
 4026a74:	fbffffcc 	andi	r15,ra,65535
 4026a78:	78001b26 	beq	r15,zero,4026ae8 <__multiply+0x11c>
 4026a7c:	5811883a 	mov	r8,r11
 4026a80:	681d883a 	mov	r14,r13
 4026a84:	000f883a 	mov	r7,zero
 4026a88:	71000017 	ldw	r4,0(r14)
 4026a8c:	40c00017 	ldw	r3,0(r8)
 4026a90:	73800104 	addi	r14,r14,4
 4026a94:	217fffcc 	andi	r5,r4,65535
 4026a98:	2bcb383a 	mul	r5,r5,r15
 4026a9c:	2008d43a 	srli	r4,r4,16
 4026aa0:	1c7fffcc 	andi	r17,r3,65535
 4026aa4:	2c4b883a 	add	r5,r5,r17
 4026aa8:	29cb883a 	add	r5,r5,r7
 4026aac:	23c9383a 	mul	r4,r4,r15
 4026ab0:	1806d43a 	srli	r3,r3,16
 4026ab4:	280ed43a 	srli	r7,r5,16
 4026ab8:	297fffcc 	andi	r5,r5,65535
 4026abc:	20c7883a 	add	r3,r4,r3
 4026ac0:	19c7883a 	add	r3,r3,r7
 4026ac4:	1808943a 	slli	r4,r3,16
 4026ac8:	4023883a 	mov	r17,r8
 4026acc:	180ed43a 	srli	r7,r3,16
 4026ad0:	214ab03a 	or	r5,r4,r5
 4026ad4:	41400015 	stw	r5,0(r8)
 4026ad8:	42000104 	addi	r8,r8,4
 4026adc:	727fea36 	bltu	r14,r9,4026a88 <__alt_data_end+0xfffe6a88>
 4026ae0:	89c00115 	stw	r7,4(r17)
 4026ae4:	37c00017 	ldw	ra,0(r6)
 4026ae8:	f83ed43a 	srli	ra,ra,16
 4026aec:	f8001f26 	beq	ra,zero,4026b6c <__multiply+0x1a0>
 4026af0:	58c00017 	ldw	r3,0(r11)
 4026af4:	681d883a 	mov	r14,r13
 4026af8:	581f883a 	mov	r15,r11
 4026afc:	1811883a 	mov	r8,r3
 4026b00:	5825883a 	mov	r18,r11
 4026b04:	000f883a 	mov	r7,zero
 4026b08:	00000106 	br	4026b10 <__multiply+0x144>
 4026b0c:	8825883a 	mov	r18,r17
 4026b10:	7140000b 	ldhu	r5,0(r14)
 4026b14:	4010d43a 	srli	r8,r8,16
 4026b18:	193fffcc 	andi	r4,r3,65535
 4026b1c:	2fcb383a 	mul	r5,r5,ra
 4026b20:	7bc00104 	addi	r15,r15,4
 4026b24:	73800104 	addi	r14,r14,4
 4026b28:	2a0b883a 	add	r5,r5,r8
 4026b2c:	29cb883a 	add	r5,r5,r7
 4026b30:	2806943a 	slli	r3,r5,16
 4026b34:	94400104 	addi	r17,r18,4
 4026b38:	280ad43a 	srli	r5,r5,16
 4026b3c:	1908b03a 	or	r4,r3,r4
 4026b40:	793fff15 	stw	r4,-4(r15)
 4026b44:	70ffff17 	ldw	r3,-4(r14)
 4026b48:	8a000017 	ldw	r8,0(r17)
 4026b4c:	1806d43a 	srli	r3,r3,16
 4026b50:	413fffcc 	andi	r4,r8,65535
 4026b54:	1fc7383a 	mul	r3,r3,ra
 4026b58:	1907883a 	add	r3,r3,r4
 4026b5c:	1947883a 	add	r3,r3,r5
 4026b60:	180ed43a 	srli	r7,r3,16
 4026b64:	727fe936 	bltu	r14,r9,4026b0c <__alt_data_end+0xfffe6b0c>
 4026b68:	90c00115 	stw	r3,4(r18)
 4026b6c:	31800104 	addi	r6,r6,4
 4026b70:	5ac00104 	addi	r11,r11,4
 4026b74:	333fbe36 	bltu	r6,r12,4026a70 <__alt_data_end+0xfffe6a70>
 4026b78:	0400090e 	bge	zero,r16,4026ba0 <__multiply+0x1d4>
 4026b7c:	50ffff17 	ldw	r3,-4(r10)
 4026b80:	52bfff04 	addi	r10,r10,-4
 4026b84:	18000326 	beq	r3,zero,4026b94 <__multiply+0x1c8>
 4026b88:	00000506 	br	4026ba0 <__multiply+0x1d4>
 4026b8c:	50c00017 	ldw	r3,0(r10)
 4026b90:	1800031e 	bne	r3,zero,4026ba0 <__multiply+0x1d4>
 4026b94:	843fffc4 	addi	r16,r16,-1
 4026b98:	52bfff04 	addi	r10,r10,-4
 4026b9c:	803ffb1e 	bne	r16,zero,4026b8c <__alt_data_end+0xfffe6b8c>
 4026ba0:	14000415 	stw	r16,16(r2)
 4026ba4:	dfc00517 	ldw	ra,20(sp)
 4026ba8:	dd000417 	ldw	r20,16(sp)
 4026bac:	dcc00317 	ldw	r19,12(sp)
 4026bb0:	dc800217 	ldw	r18,8(sp)
 4026bb4:	dc400117 	ldw	r17,4(sp)
 4026bb8:	dc000017 	ldw	r16,0(sp)
 4026bbc:	dec00604 	addi	sp,sp,24
 4026bc0:	f800283a 	ret

04026bc4 <__pow5mult>:
 4026bc4:	defffa04 	addi	sp,sp,-24
 4026bc8:	dcc00315 	stw	r19,12(sp)
 4026bcc:	dc000015 	stw	r16,0(sp)
 4026bd0:	dfc00515 	stw	ra,20(sp)
 4026bd4:	dd000415 	stw	r20,16(sp)
 4026bd8:	dc800215 	stw	r18,8(sp)
 4026bdc:	dc400115 	stw	r17,4(sp)
 4026be0:	308000cc 	andi	r2,r6,3
 4026be4:	3021883a 	mov	r16,r6
 4026be8:	2027883a 	mov	r19,r4
 4026bec:	10002f1e 	bne	r2,zero,4026cac <__pow5mult+0xe8>
 4026bf0:	2825883a 	mov	r18,r5
 4026bf4:	8021d0ba 	srai	r16,r16,2
 4026bf8:	80001a26 	beq	r16,zero,4026c64 <__pow5mult+0xa0>
 4026bfc:	9c401217 	ldw	r17,72(r19)
 4026c00:	8800061e 	bne	r17,zero,4026c1c <__pow5mult+0x58>
 4026c04:	00003406 	br	4026cd8 <__pow5mult+0x114>
 4026c08:	8021d07a 	srai	r16,r16,1
 4026c0c:	80001526 	beq	r16,zero,4026c64 <__pow5mult+0xa0>
 4026c10:	88800017 	ldw	r2,0(r17)
 4026c14:	10001c26 	beq	r2,zero,4026c88 <__pow5mult+0xc4>
 4026c18:	1023883a 	mov	r17,r2
 4026c1c:	8080004c 	andi	r2,r16,1
 4026c20:	103ff926 	beq	r2,zero,4026c08 <__alt_data_end+0xfffe6c08>
 4026c24:	880d883a 	mov	r6,r17
 4026c28:	900b883a 	mov	r5,r18
 4026c2c:	9809883a 	mov	r4,r19
 4026c30:	40269cc0 	call	40269cc <__multiply>
 4026c34:	90001b26 	beq	r18,zero,4026ca4 <__pow5mult+0xe0>
 4026c38:	91000117 	ldw	r4,4(r18)
 4026c3c:	98c01317 	ldw	r3,76(r19)
 4026c40:	8021d07a 	srai	r16,r16,1
 4026c44:	2109883a 	add	r4,r4,r4
 4026c48:	2109883a 	add	r4,r4,r4
 4026c4c:	1907883a 	add	r3,r3,r4
 4026c50:	19000017 	ldw	r4,0(r3)
 4026c54:	91000015 	stw	r4,0(r18)
 4026c58:	1c800015 	stw	r18,0(r3)
 4026c5c:	1025883a 	mov	r18,r2
 4026c60:	803feb1e 	bne	r16,zero,4026c10 <__alt_data_end+0xfffe6c10>
 4026c64:	9005883a 	mov	r2,r18
 4026c68:	dfc00517 	ldw	ra,20(sp)
 4026c6c:	dd000417 	ldw	r20,16(sp)
 4026c70:	dcc00317 	ldw	r19,12(sp)
 4026c74:	dc800217 	ldw	r18,8(sp)
 4026c78:	dc400117 	ldw	r17,4(sp)
 4026c7c:	dc000017 	ldw	r16,0(sp)
 4026c80:	dec00604 	addi	sp,sp,24
 4026c84:	f800283a 	ret
 4026c88:	880d883a 	mov	r6,r17
 4026c8c:	880b883a 	mov	r5,r17
 4026c90:	9809883a 	mov	r4,r19
 4026c94:	40269cc0 	call	40269cc <__multiply>
 4026c98:	88800015 	stw	r2,0(r17)
 4026c9c:	10000015 	stw	zero,0(r2)
 4026ca0:	003fdd06 	br	4026c18 <__alt_data_end+0xfffe6c18>
 4026ca4:	1025883a 	mov	r18,r2
 4026ca8:	003fd706 	br	4026c08 <__alt_data_end+0xfffe6c08>
 4026cac:	10bfffc4 	addi	r2,r2,-1
 4026cb0:	1085883a 	add	r2,r2,r2
 4026cb4:	00c100f4 	movhi	r3,1027
 4026cb8:	18c0cf04 	addi	r3,r3,828
 4026cbc:	1085883a 	add	r2,r2,r2
 4026cc0:	1885883a 	add	r2,r3,r2
 4026cc4:	11800017 	ldw	r6,0(r2)
 4026cc8:	000f883a 	mov	r7,zero
 4026ccc:	40266540 	call	4026654 <__multadd>
 4026cd0:	1025883a 	mov	r18,r2
 4026cd4:	003fc706 	br	4026bf4 <__alt_data_end+0xfffe6bf4>
 4026cd8:	05000044 	movi	r20,1
 4026cdc:	a00b883a 	mov	r5,r20
 4026ce0:	9809883a 	mov	r4,r19
 4026ce4:	40265840 	call	4026584 <_Balloc>
 4026ce8:	1023883a 	mov	r17,r2
 4026cec:	00809c44 	movi	r2,625
 4026cf0:	88800515 	stw	r2,20(r17)
 4026cf4:	8d000415 	stw	r20,16(r17)
 4026cf8:	9c401215 	stw	r17,72(r19)
 4026cfc:	88000015 	stw	zero,0(r17)
 4026d00:	003fc606 	br	4026c1c <__alt_data_end+0xfffe6c1c>

04026d04 <__lshift>:
 4026d04:	defff904 	addi	sp,sp,-28
 4026d08:	dd400515 	stw	r21,20(sp)
 4026d0c:	dcc00315 	stw	r19,12(sp)
 4026d10:	302bd17a 	srai	r21,r6,5
 4026d14:	2cc00417 	ldw	r19,16(r5)
 4026d18:	28800217 	ldw	r2,8(r5)
 4026d1c:	dd000415 	stw	r20,16(sp)
 4026d20:	ace7883a 	add	r19,r21,r19
 4026d24:	dc800215 	stw	r18,8(sp)
 4026d28:	dc400115 	stw	r17,4(sp)
 4026d2c:	dc000015 	stw	r16,0(sp)
 4026d30:	dfc00615 	stw	ra,24(sp)
 4026d34:	9c000044 	addi	r16,r19,1
 4026d38:	2823883a 	mov	r17,r5
 4026d3c:	3029883a 	mov	r20,r6
 4026d40:	2025883a 	mov	r18,r4
 4026d44:	29400117 	ldw	r5,4(r5)
 4026d48:	1400030e 	bge	r2,r16,4026d58 <__lshift+0x54>
 4026d4c:	1085883a 	add	r2,r2,r2
 4026d50:	29400044 	addi	r5,r5,1
 4026d54:	143ffd16 	blt	r2,r16,4026d4c <__alt_data_end+0xfffe6d4c>
 4026d58:	9009883a 	mov	r4,r18
 4026d5c:	40265840 	call	4026584 <_Balloc>
 4026d60:	10c00504 	addi	r3,r2,20
 4026d64:	0540070e 	bge	zero,r21,4026d84 <__lshift+0x80>
 4026d68:	ad6b883a 	add	r21,r21,r21
 4026d6c:	ad6b883a 	add	r21,r21,r21
 4026d70:	1809883a 	mov	r4,r3
 4026d74:	1d47883a 	add	r3,r3,r21
 4026d78:	20000015 	stw	zero,0(r4)
 4026d7c:	21000104 	addi	r4,r4,4
 4026d80:	193ffd1e 	bne	r3,r4,4026d78 <__alt_data_end+0xfffe6d78>
 4026d84:	8a000417 	ldw	r8,16(r17)
 4026d88:	89000504 	addi	r4,r17,20
 4026d8c:	a18007cc 	andi	r6,r20,31
 4026d90:	4211883a 	add	r8,r8,r8
 4026d94:	4211883a 	add	r8,r8,r8
 4026d98:	2211883a 	add	r8,r4,r8
 4026d9c:	30002326 	beq	r6,zero,4026e2c <__lshift+0x128>
 4026da0:	02400804 	movi	r9,32
 4026da4:	4993c83a 	sub	r9,r9,r6
 4026da8:	000b883a 	mov	r5,zero
 4026dac:	21c00017 	ldw	r7,0(r4)
 4026db0:	1815883a 	mov	r10,r3
 4026db4:	18c00104 	addi	r3,r3,4
 4026db8:	398e983a 	sll	r7,r7,r6
 4026dbc:	21000104 	addi	r4,r4,4
 4026dc0:	394ab03a 	or	r5,r7,r5
 4026dc4:	197fff15 	stw	r5,-4(r3)
 4026dc8:	217fff17 	ldw	r5,-4(r4)
 4026dcc:	2a4ad83a 	srl	r5,r5,r9
 4026dd0:	223ff636 	bltu	r4,r8,4026dac <__alt_data_end+0xfffe6dac>
 4026dd4:	51400115 	stw	r5,4(r10)
 4026dd8:	28001a1e 	bne	r5,zero,4026e44 <__lshift+0x140>
 4026ddc:	843fffc4 	addi	r16,r16,-1
 4026de0:	14000415 	stw	r16,16(r2)
 4026de4:	88000826 	beq	r17,zero,4026e08 <__lshift+0x104>
 4026de8:	89000117 	ldw	r4,4(r17)
 4026dec:	90c01317 	ldw	r3,76(r18)
 4026df0:	2109883a 	add	r4,r4,r4
 4026df4:	2109883a 	add	r4,r4,r4
 4026df8:	1907883a 	add	r3,r3,r4
 4026dfc:	19000017 	ldw	r4,0(r3)
 4026e00:	89000015 	stw	r4,0(r17)
 4026e04:	1c400015 	stw	r17,0(r3)
 4026e08:	dfc00617 	ldw	ra,24(sp)
 4026e0c:	dd400517 	ldw	r21,20(sp)
 4026e10:	dd000417 	ldw	r20,16(sp)
 4026e14:	dcc00317 	ldw	r19,12(sp)
 4026e18:	dc800217 	ldw	r18,8(sp)
 4026e1c:	dc400117 	ldw	r17,4(sp)
 4026e20:	dc000017 	ldw	r16,0(sp)
 4026e24:	dec00704 	addi	sp,sp,28
 4026e28:	f800283a 	ret
 4026e2c:	21400017 	ldw	r5,0(r4)
 4026e30:	18c00104 	addi	r3,r3,4
 4026e34:	21000104 	addi	r4,r4,4
 4026e38:	197fff15 	stw	r5,-4(r3)
 4026e3c:	223ffb36 	bltu	r4,r8,4026e2c <__alt_data_end+0xfffe6e2c>
 4026e40:	003fe606 	br	4026ddc <__alt_data_end+0xfffe6ddc>
 4026e44:	9c000084 	addi	r16,r19,2
 4026e48:	003fe406 	br	4026ddc <__alt_data_end+0xfffe6ddc>

04026e4c <__mcmp>:
 4026e4c:	20800417 	ldw	r2,16(r4)
 4026e50:	28c00417 	ldw	r3,16(r5)
 4026e54:	10c5c83a 	sub	r2,r2,r3
 4026e58:	1000111e 	bne	r2,zero,4026ea0 <__mcmp+0x54>
 4026e5c:	18c7883a 	add	r3,r3,r3
 4026e60:	18c7883a 	add	r3,r3,r3
 4026e64:	21000504 	addi	r4,r4,20
 4026e68:	29400504 	addi	r5,r5,20
 4026e6c:	20c5883a 	add	r2,r4,r3
 4026e70:	28cb883a 	add	r5,r5,r3
 4026e74:	00000106 	br	4026e7c <__mcmp+0x30>
 4026e78:	20800a2e 	bgeu	r4,r2,4026ea4 <__mcmp+0x58>
 4026e7c:	10bfff04 	addi	r2,r2,-4
 4026e80:	297fff04 	addi	r5,r5,-4
 4026e84:	11800017 	ldw	r6,0(r2)
 4026e88:	28c00017 	ldw	r3,0(r5)
 4026e8c:	30fffa26 	beq	r6,r3,4026e78 <__alt_data_end+0xfffe6e78>
 4026e90:	30c00236 	bltu	r6,r3,4026e9c <__mcmp+0x50>
 4026e94:	00800044 	movi	r2,1
 4026e98:	f800283a 	ret
 4026e9c:	00bfffc4 	movi	r2,-1
 4026ea0:	f800283a 	ret
 4026ea4:	0005883a 	mov	r2,zero
 4026ea8:	f800283a 	ret

04026eac <__mdiff>:
 4026eac:	28c00417 	ldw	r3,16(r5)
 4026eb0:	30800417 	ldw	r2,16(r6)
 4026eb4:	defffa04 	addi	sp,sp,-24
 4026eb8:	dcc00315 	stw	r19,12(sp)
 4026ebc:	dc800215 	stw	r18,8(sp)
 4026ec0:	dfc00515 	stw	ra,20(sp)
 4026ec4:	dd000415 	stw	r20,16(sp)
 4026ec8:	dc400115 	stw	r17,4(sp)
 4026ecc:	dc000015 	stw	r16,0(sp)
 4026ed0:	1887c83a 	sub	r3,r3,r2
 4026ed4:	2825883a 	mov	r18,r5
 4026ed8:	3027883a 	mov	r19,r6
 4026edc:	1800141e 	bne	r3,zero,4026f30 <__mdiff+0x84>
 4026ee0:	1085883a 	add	r2,r2,r2
 4026ee4:	1085883a 	add	r2,r2,r2
 4026ee8:	2a000504 	addi	r8,r5,20
 4026eec:	34000504 	addi	r16,r6,20
 4026ef0:	4087883a 	add	r3,r8,r2
 4026ef4:	8085883a 	add	r2,r16,r2
 4026ef8:	00000106 	br	4026f00 <__mdiff+0x54>
 4026efc:	40c0592e 	bgeu	r8,r3,4027064 <__mdiff+0x1b8>
 4026f00:	18ffff04 	addi	r3,r3,-4
 4026f04:	10bfff04 	addi	r2,r2,-4
 4026f08:	19c00017 	ldw	r7,0(r3)
 4026f0c:	11400017 	ldw	r5,0(r2)
 4026f10:	397ffa26 	beq	r7,r5,4026efc <__alt_data_end+0xfffe6efc>
 4026f14:	3940592e 	bgeu	r7,r5,402707c <__mdiff+0x1d0>
 4026f18:	9005883a 	mov	r2,r18
 4026f1c:	4023883a 	mov	r17,r8
 4026f20:	9825883a 	mov	r18,r19
 4026f24:	05000044 	movi	r20,1
 4026f28:	1027883a 	mov	r19,r2
 4026f2c:	00000406 	br	4026f40 <__mdiff+0x94>
 4026f30:	18005616 	blt	r3,zero,402708c <__mdiff+0x1e0>
 4026f34:	34400504 	addi	r17,r6,20
 4026f38:	2c000504 	addi	r16,r5,20
 4026f3c:	0029883a 	mov	r20,zero
 4026f40:	91400117 	ldw	r5,4(r18)
 4026f44:	40265840 	call	4026584 <_Balloc>
 4026f48:	92400417 	ldw	r9,16(r18)
 4026f4c:	9b000417 	ldw	r12,16(r19)
 4026f50:	12c00504 	addi	r11,r2,20
 4026f54:	4a51883a 	add	r8,r9,r9
 4026f58:	6319883a 	add	r12,r12,r12
 4026f5c:	4211883a 	add	r8,r8,r8
 4026f60:	6319883a 	add	r12,r12,r12
 4026f64:	15000315 	stw	r20,12(r2)
 4026f68:	8211883a 	add	r8,r16,r8
 4026f6c:	8b19883a 	add	r12,r17,r12
 4026f70:	0007883a 	mov	r3,zero
 4026f74:	81400017 	ldw	r5,0(r16)
 4026f78:	89c00017 	ldw	r7,0(r17)
 4026f7c:	59800104 	addi	r6,r11,4
 4026f80:	293fffcc 	andi	r4,r5,65535
 4026f84:	20c7883a 	add	r3,r4,r3
 4026f88:	393fffcc 	andi	r4,r7,65535
 4026f8c:	1909c83a 	sub	r4,r3,r4
 4026f90:	280ad43a 	srli	r5,r5,16
 4026f94:	380ed43a 	srli	r7,r7,16
 4026f98:	2007d43a 	srai	r3,r4,16
 4026f9c:	213fffcc 	andi	r4,r4,65535
 4026fa0:	29cbc83a 	sub	r5,r5,r7
 4026fa4:	28c7883a 	add	r3,r5,r3
 4026fa8:	180a943a 	slli	r5,r3,16
 4026fac:	8c400104 	addi	r17,r17,4
 4026fb0:	84000104 	addi	r16,r16,4
 4026fb4:	2908b03a 	or	r4,r5,r4
 4026fb8:	59000015 	stw	r4,0(r11)
 4026fbc:	1807d43a 	srai	r3,r3,16
 4026fc0:	3015883a 	mov	r10,r6
 4026fc4:	3017883a 	mov	r11,r6
 4026fc8:	8b3fea36 	bltu	r17,r12,4026f74 <__alt_data_end+0xfffe6f74>
 4026fcc:	8200162e 	bgeu	r16,r8,4027028 <__mdiff+0x17c>
 4026fd0:	8017883a 	mov	r11,r16
 4026fd4:	59400017 	ldw	r5,0(r11)
 4026fd8:	31800104 	addi	r6,r6,4
 4026fdc:	5ac00104 	addi	r11,r11,4
 4026fe0:	293fffcc 	andi	r4,r5,65535
 4026fe4:	20c7883a 	add	r3,r4,r3
 4026fe8:	280ed43a 	srli	r7,r5,16
 4026fec:	180bd43a 	srai	r5,r3,16
 4026ff0:	193fffcc 	andi	r4,r3,65535
 4026ff4:	3947883a 	add	r3,r7,r5
 4026ff8:	180a943a 	slli	r5,r3,16
 4026ffc:	1807d43a 	srai	r3,r3,16
 4027000:	2908b03a 	or	r4,r5,r4
 4027004:	313fff15 	stw	r4,-4(r6)
 4027008:	5a3ff236 	bltu	r11,r8,4026fd4 <__alt_data_end+0xfffe6fd4>
 402700c:	0406303a 	nor	r3,zero,r16
 4027010:	1a07883a 	add	r3,r3,r8
 4027014:	1806d0ba 	srli	r3,r3,2
 4027018:	18c00044 	addi	r3,r3,1
 402701c:	18c7883a 	add	r3,r3,r3
 4027020:	18c7883a 	add	r3,r3,r3
 4027024:	50d5883a 	add	r10,r10,r3
 4027028:	50ffff04 	addi	r3,r10,-4
 402702c:	2000041e 	bne	r4,zero,4027040 <__mdiff+0x194>
 4027030:	18ffff04 	addi	r3,r3,-4
 4027034:	19000017 	ldw	r4,0(r3)
 4027038:	4a7fffc4 	addi	r9,r9,-1
 402703c:	203ffc26 	beq	r4,zero,4027030 <__alt_data_end+0xfffe7030>
 4027040:	12400415 	stw	r9,16(r2)
 4027044:	dfc00517 	ldw	ra,20(sp)
 4027048:	dd000417 	ldw	r20,16(sp)
 402704c:	dcc00317 	ldw	r19,12(sp)
 4027050:	dc800217 	ldw	r18,8(sp)
 4027054:	dc400117 	ldw	r17,4(sp)
 4027058:	dc000017 	ldw	r16,0(sp)
 402705c:	dec00604 	addi	sp,sp,24
 4027060:	f800283a 	ret
 4027064:	000b883a 	mov	r5,zero
 4027068:	40265840 	call	4026584 <_Balloc>
 402706c:	00c00044 	movi	r3,1
 4027070:	10c00415 	stw	r3,16(r2)
 4027074:	10000515 	stw	zero,20(r2)
 4027078:	003ff206 	br	4027044 <__alt_data_end+0xfffe7044>
 402707c:	8023883a 	mov	r17,r16
 4027080:	0029883a 	mov	r20,zero
 4027084:	4021883a 	mov	r16,r8
 4027088:	003fad06 	br	4026f40 <__alt_data_end+0xfffe6f40>
 402708c:	9005883a 	mov	r2,r18
 4027090:	94400504 	addi	r17,r18,20
 4027094:	9c000504 	addi	r16,r19,20
 4027098:	9825883a 	mov	r18,r19
 402709c:	05000044 	movi	r20,1
 40270a0:	1027883a 	mov	r19,r2
 40270a4:	003fa606 	br	4026f40 <__alt_data_end+0xfffe6f40>

040270a8 <__ulp>:
 40270a8:	295ffc2c 	andhi	r5,r5,32752
 40270ac:	00bf3034 	movhi	r2,64704
 40270b0:	2887883a 	add	r3,r5,r2
 40270b4:	00c0020e 	bge	zero,r3,40270c0 <__ulp+0x18>
 40270b8:	0005883a 	mov	r2,zero
 40270bc:	f800283a 	ret
 40270c0:	00c7c83a 	sub	r3,zero,r3
 40270c4:	1807d53a 	srai	r3,r3,20
 40270c8:	008004c4 	movi	r2,19
 40270cc:	10c00b0e 	bge	r2,r3,40270fc <__ulp+0x54>
 40270d0:	18bffb04 	addi	r2,r3,-20
 40270d4:	01000784 	movi	r4,30
 40270d8:	0007883a 	mov	r3,zero
 40270dc:	20800516 	blt	r4,r2,40270f4 <__ulp+0x4c>
 40270e0:	010007c4 	movi	r4,31
 40270e4:	2089c83a 	sub	r4,r4,r2
 40270e8:	00800044 	movi	r2,1
 40270ec:	1104983a 	sll	r2,r2,r4
 40270f0:	f800283a 	ret
 40270f4:	00800044 	movi	r2,1
 40270f8:	f800283a 	ret
 40270fc:	01400234 	movhi	r5,8
 4027100:	28c7d83a 	sra	r3,r5,r3
 4027104:	0005883a 	mov	r2,zero
 4027108:	f800283a 	ret

0402710c <__b2d>:
 402710c:	defffa04 	addi	sp,sp,-24
 4027110:	dc000015 	stw	r16,0(sp)
 4027114:	24000417 	ldw	r16,16(r4)
 4027118:	dc400115 	stw	r17,4(sp)
 402711c:	24400504 	addi	r17,r4,20
 4027120:	8421883a 	add	r16,r16,r16
 4027124:	8421883a 	add	r16,r16,r16
 4027128:	8c21883a 	add	r16,r17,r16
 402712c:	dc800215 	stw	r18,8(sp)
 4027130:	84bfff17 	ldw	r18,-4(r16)
 4027134:	dd000415 	stw	r20,16(sp)
 4027138:	dcc00315 	stw	r19,12(sp)
 402713c:	9009883a 	mov	r4,r18
 4027140:	2829883a 	mov	r20,r5
 4027144:	dfc00515 	stw	ra,20(sp)
 4027148:	40268780 	call	4026878 <__hi0bits>
 402714c:	00c00804 	movi	r3,32
 4027150:	1889c83a 	sub	r4,r3,r2
 4027154:	a1000015 	stw	r4,0(r20)
 4027158:	01000284 	movi	r4,10
 402715c:	84ffff04 	addi	r19,r16,-4
 4027160:	20801216 	blt	r4,r2,40271ac <__b2d+0xa0>
 4027164:	018002c4 	movi	r6,11
 4027168:	308dc83a 	sub	r6,r6,r2
 402716c:	9186d83a 	srl	r3,r18,r6
 4027170:	18cffc34 	orhi	r3,r3,16368
 4027174:	8cc0212e 	bgeu	r17,r19,40271fc <__b2d+0xf0>
 4027178:	813ffe17 	ldw	r4,-8(r16)
 402717c:	218cd83a 	srl	r6,r4,r6
 4027180:	10800544 	addi	r2,r2,21
 4027184:	9084983a 	sll	r2,r18,r2
 4027188:	1184b03a 	or	r2,r2,r6
 402718c:	dfc00517 	ldw	ra,20(sp)
 4027190:	dd000417 	ldw	r20,16(sp)
 4027194:	dcc00317 	ldw	r19,12(sp)
 4027198:	dc800217 	ldw	r18,8(sp)
 402719c:	dc400117 	ldw	r17,4(sp)
 40271a0:	dc000017 	ldw	r16,0(sp)
 40271a4:	dec00604 	addi	sp,sp,24
 40271a8:	f800283a 	ret
 40271ac:	8cc00f2e 	bgeu	r17,r19,40271ec <__b2d+0xe0>
 40271b0:	117ffd44 	addi	r5,r2,-11
 40271b4:	80bffe17 	ldw	r2,-8(r16)
 40271b8:	28000e26 	beq	r5,zero,40271f4 <__b2d+0xe8>
 40271bc:	1949c83a 	sub	r4,r3,r5
 40271c0:	9164983a 	sll	r18,r18,r5
 40271c4:	1106d83a 	srl	r3,r2,r4
 40271c8:	81bffe04 	addi	r6,r16,-8
 40271cc:	948ffc34 	orhi	r18,r18,16368
 40271d0:	90c6b03a 	or	r3,r18,r3
 40271d4:	89800e2e 	bgeu	r17,r6,4027210 <__b2d+0x104>
 40271d8:	81bffd17 	ldw	r6,-12(r16)
 40271dc:	1144983a 	sll	r2,r2,r5
 40271e0:	310ad83a 	srl	r5,r6,r4
 40271e4:	2884b03a 	or	r2,r5,r2
 40271e8:	003fe806 	br	402718c <__alt_data_end+0xfffe718c>
 40271ec:	10bffd44 	addi	r2,r2,-11
 40271f0:	1000041e 	bne	r2,zero,4027204 <__b2d+0xf8>
 40271f4:	90cffc34 	orhi	r3,r18,16368
 40271f8:	003fe406 	br	402718c <__alt_data_end+0xfffe718c>
 40271fc:	000d883a 	mov	r6,zero
 4027200:	003fdf06 	br	4027180 <__alt_data_end+0xfffe7180>
 4027204:	90a4983a 	sll	r18,r18,r2
 4027208:	0005883a 	mov	r2,zero
 402720c:	003ff906 	br	40271f4 <__alt_data_end+0xfffe71f4>
 4027210:	1144983a 	sll	r2,r2,r5
 4027214:	003fdd06 	br	402718c <__alt_data_end+0xfffe718c>

04027218 <__d2b>:
 4027218:	defff804 	addi	sp,sp,-32
 402721c:	dc000215 	stw	r16,8(sp)
 4027220:	3021883a 	mov	r16,r6
 4027224:	dc400315 	stw	r17,12(sp)
 4027228:	8022907a 	slli	r17,r16,1
 402722c:	dd000615 	stw	r20,24(sp)
 4027230:	2829883a 	mov	r20,r5
 4027234:	01400044 	movi	r5,1
 4027238:	dcc00515 	stw	r19,20(sp)
 402723c:	dc800415 	stw	r18,16(sp)
 4027240:	dfc00715 	stw	ra,28(sp)
 4027244:	3825883a 	mov	r18,r7
 4027248:	8822d57a 	srli	r17,r17,21
 402724c:	40265840 	call	4026584 <_Balloc>
 4027250:	1027883a 	mov	r19,r2
 4027254:	00800434 	movhi	r2,16
 4027258:	10bfffc4 	addi	r2,r2,-1
 402725c:	808c703a 	and	r6,r16,r2
 4027260:	88000126 	beq	r17,zero,4027268 <__d2b+0x50>
 4027264:	31800434 	orhi	r6,r6,16
 4027268:	d9800015 	stw	r6,0(sp)
 402726c:	a0002426 	beq	r20,zero,4027300 <__d2b+0xe8>
 4027270:	d9000104 	addi	r4,sp,4
 4027274:	dd000115 	stw	r20,4(sp)
 4027278:	40268e00 	call	40268e0 <__lo0bits>
 402727c:	d8c00017 	ldw	r3,0(sp)
 4027280:	10002f1e 	bne	r2,zero,4027340 <__d2b+0x128>
 4027284:	d9000117 	ldw	r4,4(sp)
 4027288:	99000515 	stw	r4,20(r19)
 402728c:	1821003a 	cmpeq	r16,r3,zero
 4027290:	01000084 	movi	r4,2
 4027294:	2421c83a 	sub	r16,r4,r16
 4027298:	98c00615 	stw	r3,24(r19)
 402729c:	9c000415 	stw	r16,16(r19)
 40272a0:	88001f1e 	bne	r17,zero,4027320 <__d2b+0x108>
 40272a4:	10bef384 	addi	r2,r2,-1074
 40272a8:	90800015 	stw	r2,0(r18)
 40272ac:	00900034 	movhi	r2,16384
 40272b0:	10bfffc4 	addi	r2,r2,-1
 40272b4:	8085883a 	add	r2,r16,r2
 40272b8:	1085883a 	add	r2,r2,r2
 40272bc:	1085883a 	add	r2,r2,r2
 40272c0:	9885883a 	add	r2,r19,r2
 40272c4:	11000517 	ldw	r4,20(r2)
 40272c8:	8020917a 	slli	r16,r16,5
 40272cc:	40268780 	call	4026878 <__hi0bits>
 40272d0:	d8c00817 	ldw	r3,32(sp)
 40272d4:	8085c83a 	sub	r2,r16,r2
 40272d8:	18800015 	stw	r2,0(r3)
 40272dc:	9805883a 	mov	r2,r19
 40272e0:	dfc00717 	ldw	ra,28(sp)
 40272e4:	dd000617 	ldw	r20,24(sp)
 40272e8:	dcc00517 	ldw	r19,20(sp)
 40272ec:	dc800417 	ldw	r18,16(sp)
 40272f0:	dc400317 	ldw	r17,12(sp)
 40272f4:	dc000217 	ldw	r16,8(sp)
 40272f8:	dec00804 	addi	sp,sp,32
 40272fc:	f800283a 	ret
 4027300:	d809883a 	mov	r4,sp
 4027304:	40268e00 	call	40268e0 <__lo0bits>
 4027308:	d8c00017 	ldw	r3,0(sp)
 402730c:	04000044 	movi	r16,1
 4027310:	9c000415 	stw	r16,16(r19)
 4027314:	98c00515 	stw	r3,20(r19)
 4027318:	10800804 	addi	r2,r2,32
 402731c:	883fe126 	beq	r17,zero,40272a4 <__alt_data_end+0xfffe72a4>
 4027320:	00c00d44 	movi	r3,53
 4027324:	8c7ef344 	addi	r17,r17,-1075
 4027328:	88a3883a 	add	r17,r17,r2
 402732c:	1885c83a 	sub	r2,r3,r2
 4027330:	d8c00817 	ldw	r3,32(sp)
 4027334:	94400015 	stw	r17,0(r18)
 4027338:	18800015 	stw	r2,0(r3)
 402733c:	003fe706 	br	40272dc <__alt_data_end+0xfffe72dc>
 4027340:	01000804 	movi	r4,32
 4027344:	2089c83a 	sub	r4,r4,r2
 4027348:	1908983a 	sll	r4,r3,r4
 402734c:	d9400117 	ldw	r5,4(sp)
 4027350:	1886d83a 	srl	r3,r3,r2
 4027354:	2148b03a 	or	r4,r4,r5
 4027358:	99000515 	stw	r4,20(r19)
 402735c:	d8c00015 	stw	r3,0(sp)
 4027360:	003fca06 	br	402728c <__alt_data_end+0xfffe728c>

04027364 <__ratio>:
 4027364:	defff904 	addi	sp,sp,-28
 4027368:	dc400315 	stw	r17,12(sp)
 402736c:	2823883a 	mov	r17,r5
 4027370:	d9400104 	addi	r5,sp,4
 4027374:	dfc00615 	stw	ra,24(sp)
 4027378:	dcc00515 	stw	r19,20(sp)
 402737c:	dc800415 	stw	r18,16(sp)
 4027380:	2027883a 	mov	r19,r4
 4027384:	dc000215 	stw	r16,8(sp)
 4027388:	402710c0 	call	402710c <__b2d>
 402738c:	d80b883a 	mov	r5,sp
 4027390:	8809883a 	mov	r4,r17
 4027394:	1025883a 	mov	r18,r2
 4027398:	1821883a 	mov	r16,r3
 402739c:	402710c0 	call	402710c <__b2d>
 40273a0:	8a000417 	ldw	r8,16(r17)
 40273a4:	99000417 	ldw	r4,16(r19)
 40273a8:	d9400117 	ldw	r5,4(sp)
 40273ac:	2209c83a 	sub	r4,r4,r8
 40273b0:	2010917a 	slli	r8,r4,5
 40273b4:	d9000017 	ldw	r4,0(sp)
 40273b8:	2909c83a 	sub	r4,r5,r4
 40273bc:	4109883a 	add	r4,r8,r4
 40273c0:	01000e0e 	bge	zero,r4,40273fc <__ratio+0x98>
 40273c4:	2008953a 	slli	r4,r4,20
 40273c8:	2421883a 	add	r16,r4,r16
 40273cc:	100d883a 	mov	r6,r2
 40273d0:	180f883a 	mov	r7,r3
 40273d4:	9009883a 	mov	r4,r18
 40273d8:	800b883a 	mov	r5,r16
 40273dc:	402b2500 	call	402b250 <__divdf3>
 40273e0:	dfc00617 	ldw	ra,24(sp)
 40273e4:	dcc00517 	ldw	r19,20(sp)
 40273e8:	dc800417 	ldw	r18,16(sp)
 40273ec:	dc400317 	ldw	r17,12(sp)
 40273f0:	dc000217 	ldw	r16,8(sp)
 40273f4:	dec00704 	addi	sp,sp,28
 40273f8:	f800283a 	ret
 40273fc:	2008953a 	slli	r4,r4,20
 4027400:	1907c83a 	sub	r3,r3,r4
 4027404:	003ff106 	br	40273cc <__alt_data_end+0xfffe73cc>

04027408 <_mprec_log10>:
 4027408:	defffe04 	addi	sp,sp,-8
 402740c:	dc000015 	stw	r16,0(sp)
 4027410:	dfc00115 	stw	ra,4(sp)
 4027414:	008005c4 	movi	r2,23
 4027418:	2021883a 	mov	r16,r4
 402741c:	11000d0e 	bge	r2,r4,4027454 <_mprec_log10+0x4c>
 4027420:	0005883a 	mov	r2,zero
 4027424:	00cffc34 	movhi	r3,16368
 4027428:	843fffc4 	addi	r16,r16,-1
 402742c:	000d883a 	mov	r6,zero
 4027430:	01d00934 	movhi	r7,16420
 4027434:	1009883a 	mov	r4,r2
 4027438:	180b883a 	mov	r5,r3
 402743c:	402bd900 	call	402bd90 <__muldf3>
 4027440:	803ff91e 	bne	r16,zero,4027428 <__alt_data_end+0xfffe7428>
 4027444:	dfc00117 	ldw	ra,4(sp)
 4027448:	dc000017 	ldw	r16,0(sp)
 402744c:	dec00204 	addi	sp,sp,8
 4027450:	f800283a 	ret
 4027454:	202090fa 	slli	r16,r4,3
 4027458:	008100f4 	movhi	r2,1027
 402745c:	1080e604 	addi	r2,r2,920
 4027460:	1421883a 	add	r16,r2,r16
 4027464:	80800017 	ldw	r2,0(r16)
 4027468:	80c00117 	ldw	r3,4(r16)
 402746c:	dfc00117 	ldw	ra,4(sp)
 4027470:	dc000017 	ldw	r16,0(sp)
 4027474:	dec00204 	addi	sp,sp,8
 4027478:	f800283a 	ret

0402747c <__copybits>:
 402747c:	297fffc4 	addi	r5,r5,-1
 4027480:	280fd17a 	srai	r7,r5,5
 4027484:	30c00417 	ldw	r3,16(r6)
 4027488:	30800504 	addi	r2,r6,20
 402748c:	39c00044 	addi	r7,r7,1
 4027490:	18c7883a 	add	r3,r3,r3
 4027494:	39cf883a 	add	r7,r7,r7
 4027498:	18c7883a 	add	r3,r3,r3
 402749c:	39cf883a 	add	r7,r7,r7
 40274a0:	10c7883a 	add	r3,r2,r3
 40274a4:	21cf883a 	add	r7,r4,r7
 40274a8:	10c00d2e 	bgeu	r2,r3,40274e0 <__copybits+0x64>
 40274ac:	200b883a 	mov	r5,r4
 40274b0:	12000017 	ldw	r8,0(r2)
 40274b4:	29400104 	addi	r5,r5,4
 40274b8:	10800104 	addi	r2,r2,4
 40274bc:	2a3fff15 	stw	r8,-4(r5)
 40274c0:	10fffb36 	bltu	r2,r3,40274b0 <__alt_data_end+0xfffe74b0>
 40274c4:	1985c83a 	sub	r2,r3,r6
 40274c8:	10bffac4 	addi	r2,r2,-21
 40274cc:	1004d0ba 	srli	r2,r2,2
 40274d0:	10800044 	addi	r2,r2,1
 40274d4:	1085883a 	add	r2,r2,r2
 40274d8:	1085883a 	add	r2,r2,r2
 40274dc:	2089883a 	add	r4,r4,r2
 40274e0:	21c0032e 	bgeu	r4,r7,40274f0 <__copybits+0x74>
 40274e4:	20000015 	stw	zero,0(r4)
 40274e8:	21000104 	addi	r4,r4,4
 40274ec:	21fffd36 	bltu	r4,r7,40274e4 <__alt_data_end+0xfffe74e4>
 40274f0:	f800283a 	ret

040274f4 <__any_on>:
 40274f4:	20c00417 	ldw	r3,16(r4)
 40274f8:	2805d17a 	srai	r2,r5,5
 40274fc:	21000504 	addi	r4,r4,20
 4027500:	18800d0e 	bge	r3,r2,4027538 <__any_on+0x44>
 4027504:	18c7883a 	add	r3,r3,r3
 4027508:	18c7883a 	add	r3,r3,r3
 402750c:	20c7883a 	add	r3,r4,r3
 4027510:	20c0192e 	bgeu	r4,r3,4027578 <__any_on+0x84>
 4027514:	18bfff17 	ldw	r2,-4(r3)
 4027518:	18ffff04 	addi	r3,r3,-4
 402751c:	1000041e 	bne	r2,zero,4027530 <__any_on+0x3c>
 4027520:	20c0142e 	bgeu	r4,r3,4027574 <__any_on+0x80>
 4027524:	18ffff04 	addi	r3,r3,-4
 4027528:	19400017 	ldw	r5,0(r3)
 402752c:	283ffc26 	beq	r5,zero,4027520 <__alt_data_end+0xfffe7520>
 4027530:	00800044 	movi	r2,1
 4027534:	f800283a 	ret
 4027538:	10c00a0e 	bge	r2,r3,4027564 <__any_on+0x70>
 402753c:	1085883a 	add	r2,r2,r2
 4027540:	1085883a 	add	r2,r2,r2
 4027544:	294007cc 	andi	r5,r5,31
 4027548:	2087883a 	add	r3,r4,r2
 402754c:	283ff026 	beq	r5,zero,4027510 <__alt_data_end+0xfffe7510>
 4027550:	19800017 	ldw	r6,0(r3)
 4027554:	3144d83a 	srl	r2,r6,r5
 4027558:	114a983a 	sll	r5,r2,r5
 402755c:	317ff41e 	bne	r6,r5,4027530 <__alt_data_end+0xfffe7530>
 4027560:	003feb06 	br	4027510 <__alt_data_end+0xfffe7510>
 4027564:	1085883a 	add	r2,r2,r2
 4027568:	1085883a 	add	r2,r2,r2
 402756c:	2087883a 	add	r3,r4,r2
 4027570:	003fe706 	br	4027510 <__alt_data_end+0xfffe7510>
 4027574:	f800283a 	ret
 4027578:	0005883a 	mov	r2,zero
 402757c:	f800283a 	ret

04027580 <_realloc_r>:
 4027580:	defff604 	addi	sp,sp,-40
 4027584:	dc800215 	stw	r18,8(sp)
 4027588:	dfc00915 	stw	ra,36(sp)
 402758c:	df000815 	stw	fp,32(sp)
 4027590:	ddc00715 	stw	r23,28(sp)
 4027594:	dd800615 	stw	r22,24(sp)
 4027598:	dd400515 	stw	r21,20(sp)
 402759c:	dd000415 	stw	r20,16(sp)
 40275a0:	dcc00315 	stw	r19,12(sp)
 40275a4:	dc400115 	stw	r17,4(sp)
 40275a8:	dc000015 	stw	r16,0(sp)
 40275ac:	3025883a 	mov	r18,r6
 40275b0:	2800b726 	beq	r5,zero,4027890 <_realloc_r+0x310>
 40275b4:	282b883a 	mov	r21,r5
 40275b8:	2029883a 	mov	r20,r4
 40275bc:	402d8700 	call	402d870 <__malloc_lock>
 40275c0:	a8bfff17 	ldw	r2,-4(r21)
 40275c4:	043fff04 	movi	r16,-4
 40275c8:	90c002c4 	addi	r3,r18,11
 40275cc:	01000584 	movi	r4,22
 40275d0:	acfffe04 	addi	r19,r21,-8
 40275d4:	1420703a 	and	r16,r2,r16
 40275d8:	20c0332e 	bgeu	r4,r3,40276a8 <_realloc_r+0x128>
 40275dc:	047ffe04 	movi	r17,-8
 40275e0:	1c62703a 	and	r17,r3,r17
 40275e4:	8807883a 	mov	r3,r17
 40275e8:	88005816 	blt	r17,zero,402774c <_realloc_r+0x1cc>
 40275ec:	8c805736 	bltu	r17,r18,402774c <_realloc_r+0x1cc>
 40275f0:	80c0300e 	bge	r16,r3,40276b4 <_realloc_r+0x134>
 40275f4:	070100f4 	movhi	fp,1027
 40275f8:	e702ac04 	addi	fp,fp,2736
 40275fc:	e1c00217 	ldw	r7,8(fp)
 4027600:	9c09883a 	add	r4,r19,r16
 4027604:	22000117 	ldw	r8,4(r4)
 4027608:	21c06326 	beq	r4,r7,4027798 <_realloc_r+0x218>
 402760c:	017fff84 	movi	r5,-2
 4027610:	414a703a 	and	r5,r8,r5
 4027614:	214b883a 	add	r5,r4,r5
 4027618:	29800117 	ldw	r6,4(r5)
 402761c:	3180004c 	andi	r6,r6,1
 4027620:	30003f26 	beq	r6,zero,4027720 <_realloc_r+0x1a0>
 4027624:	1080004c 	andi	r2,r2,1
 4027628:	10008326 	beq	r2,zero,4027838 <_realloc_r+0x2b8>
 402762c:	900b883a 	mov	r5,r18
 4027630:	a009883a 	mov	r4,r20
 4027634:	40258c80 	call	40258c8 <_malloc_r>
 4027638:	1025883a 	mov	r18,r2
 402763c:	10011e26 	beq	r2,zero,4027ab8 <_realloc_r+0x538>
 4027640:	a93fff17 	ldw	r4,-4(r21)
 4027644:	10fffe04 	addi	r3,r2,-8
 4027648:	00bfff84 	movi	r2,-2
 402764c:	2084703a 	and	r2,r4,r2
 4027650:	9885883a 	add	r2,r19,r2
 4027654:	1880ee26 	beq	r3,r2,4027a10 <_realloc_r+0x490>
 4027658:	81bfff04 	addi	r6,r16,-4
 402765c:	00800904 	movi	r2,36
 4027660:	1180b836 	bltu	r2,r6,4027944 <_realloc_r+0x3c4>
 4027664:	00c004c4 	movi	r3,19
 4027668:	19809636 	bltu	r3,r6,40278c4 <_realloc_r+0x344>
 402766c:	9005883a 	mov	r2,r18
 4027670:	a807883a 	mov	r3,r21
 4027674:	19000017 	ldw	r4,0(r3)
 4027678:	11000015 	stw	r4,0(r2)
 402767c:	19000117 	ldw	r4,4(r3)
 4027680:	11000115 	stw	r4,4(r2)
 4027684:	18c00217 	ldw	r3,8(r3)
 4027688:	10c00215 	stw	r3,8(r2)
 402768c:	a80b883a 	mov	r5,r21
 4027690:	a009883a 	mov	r4,r20
 4027694:	4024cdc0 	call	4024cdc <_free_r>
 4027698:	a009883a 	mov	r4,r20
 402769c:	402d8940 	call	402d894 <__malloc_unlock>
 40276a0:	9005883a 	mov	r2,r18
 40276a4:	00001206 	br	40276f0 <_realloc_r+0x170>
 40276a8:	00c00404 	movi	r3,16
 40276ac:	1823883a 	mov	r17,r3
 40276b0:	003fce06 	br	40275ec <__alt_data_end+0xfffe75ec>
 40276b4:	a825883a 	mov	r18,r21
 40276b8:	8445c83a 	sub	r2,r16,r17
 40276bc:	00c003c4 	movi	r3,15
 40276c0:	18802636 	bltu	r3,r2,402775c <_realloc_r+0x1dc>
 40276c4:	99800117 	ldw	r6,4(r19)
 40276c8:	9c07883a 	add	r3,r19,r16
 40276cc:	3180004c 	andi	r6,r6,1
 40276d0:	3420b03a 	or	r16,r6,r16
 40276d4:	9c000115 	stw	r16,4(r19)
 40276d8:	18800117 	ldw	r2,4(r3)
 40276dc:	10800054 	ori	r2,r2,1
 40276e0:	18800115 	stw	r2,4(r3)
 40276e4:	a009883a 	mov	r4,r20
 40276e8:	402d8940 	call	402d894 <__malloc_unlock>
 40276ec:	9005883a 	mov	r2,r18
 40276f0:	dfc00917 	ldw	ra,36(sp)
 40276f4:	df000817 	ldw	fp,32(sp)
 40276f8:	ddc00717 	ldw	r23,28(sp)
 40276fc:	dd800617 	ldw	r22,24(sp)
 4027700:	dd400517 	ldw	r21,20(sp)
 4027704:	dd000417 	ldw	r20,16(sp)
 4027708:	dcc00317 	ldw	r19,12(sp)
 402770c:	dc800217 	ldw	r18,8(sp)
 4027710:	dc400117 	ldw	r17,4(sp)
 4027714:	dc000017 	ldw	r16,0(sp)
 4027718:	dec00a04 	addi	sp,sp,40
 402771c:	f800283a 	ret
 4027720:	017fff04 	movi	r5,-4
 4027724:	414a703a 	and	r5,r8,r5
 4027728:	814d883a 	add	r6,r16,r5
 402772c:	30c01f16 	blt	r6,r3,40277ac <_realloc_r+0x22c>
 4027730:	20800317 	ldw	r2,12(r4)
 4027734:	20c00217 	ldw	r3,8(r4)
 4027738:	a825883a 	mov	r18,r21
 402773c:	3021883a 	mov	r16,r6
 4027740:	18800315 	stw	r2,12(r3)
 4027744:	10c00215 	stw	r3,8(r2)
 4027748:	003fdb06 	br	40276b8 <__alt_data_end+0xfffe76b8>
 402774c:	00800304 	movi	r2,12
 4027750:	a0800015 	stw	r2,0(r20)
 4027754:	0005883a 	mov	r2,zero
 4027758:	003fe506 	br	40276f0 <__alt_data_end+0xfffe76f0>
 402775c:	98c00117 	ldw	r3,4(r19)
 4027760:	9c4b883a 	add	r5,r19,r17
 4027764:	11000054 	ori	r4,r2,1
 4027768:	18c0004c 	andi	r3,r3,1
 402776c:	1c62b03a 	or	r17,r3,r17
 4027770:	9c400115 	stw	r17,4(r19)
 4027774:	29000115 	stw	r4,4(r5)
 4027778:	2885883a 	add	r2,r5,r2
 402777c:	10c00117 	ldw	r3,4(r2)
 4027780:	29400204 	addi	r5,r5,8
 4027784:	a009883a 	mov	r4,r20
 4027788:	18c00054 	ori	r3,r3,1
 402778c:	10c00115 	stw	r3,4(r2)
 4027790:	4024cdc0 	call	4024cdc <_free_r>
 4027794:	003fd306 	br	40276e4 <__alt_data_end+0xfffe76e4>
 4027798:	017fff04 	movi	r5,-4
 402779c:	414a703a 	and	r5,r8,r5
 40277a0:	89800404 	addi	r6,r17,16
 40277a4:	8151883a 	add	r8,r16,r5
 40277a8:	4180590e 	bge	r8,r6,4027910 <_realloc_r+0x390>
 40277ac:	1080004c 	andi	r2,r2,1
 40277b0:	103f9e1e 	bne	r2,zero,402762c <__alt_data_end+0xfffe762c>
 40277b4:	adbffe17 	ldw	r22,-8(r21)
 40277b8:	00bfff04 	movi	r2,-4
 40277bc:	9dadc83a 	sub	r22,r19,r22
 40277c0:	b1800117 	ldw	r6,4(r22)
 40277c4:	3084703a 	and	r2,r6,r2
 40277c8:	20002026 	beq	r4,zero,402784c <_realloc_r+0x2cc>
 40277cc:	80af883a 	add	r23,r16,r2
 40277d0:	b96f883a 	add	r23,r23,r5
 40277d4:	21c05f26 	beq	r4,r7,4027954 <_realloc_r+0x3d4>
 40277d8:	b8c01c16 	blt	r23,r3,402784c <_realloc_r+0x2cc>
 40277dc:	20800317 	ldw	r2,12(r4)
 40277e0:	20c00217 	ldw	r3,8(r4)
 40277e4:	81bfff04 	addi	r6,r16,-4
 40277e8:	01000904 	movi	r4,36
 40277ec:	18800315 	stw	r2,12(r3)
 40277f0:	10c00215 	stw	r3,8(r2)
 40277f4:	b0c00217 	ldw	r3,8(r22)
 40277f8:	b0800317 	ldw	r2,12(r22)
 40277fc:	b4800204 	addi	r18,r22,8
 4027800:	18800315 	stw	r2,12(r3)
 4027804:	10c00215 	stw	r3,8(r2)
 4027808:	21801b36 	bltu	r4,r6,4027878 <_realloc_r+0x2f8>
 402780c:	008004c4 	movi	r2,19
 4027810:	1180352e 	bgeu	r2,r6,40278e8 <_realloc_r+0x368>
 4027814:	a8800017 	ldw	r2,0(r21)
 4027818:	b0800215 	stw	r2,8(r22)
 402781c:	a8800117 	ldw	r2,4(r21)
 4027820:	b0800315 	stw	r2,12(r22)
 4027824:	008006c4 	movi	r2,27
 4027828:	11807f36 	bltu	r2,r6,4027a28 <_realloc_r+0x4a8>
 402782c:	b0800404 	addi	r2,r22,16
 4027830:	ad400204 	addi	r21,r21,8
 4027834:	00002d06 	br	40278ec <_realloc_r+0x36c>
 4027838:	adbffe17 	ldw	r22,-8(r21)
 402783c:	00bfff04 	movi	r2,-4
 4027840:	9dadc83a 	sub	r22,r19,r22
 4027844:	b1000117 	ldw	r4,4(r22)
 4027848:	2084703a 	and	r2,r4,r2
 402784c:	b03f7726 	beq	r22,zero,402762c <__alt_data_end+0xfffe762c>
 4027850:	80af883a 	add	r23,r16,r2
 4027854:	b8ff7516 	blt	r23,r3,402762c <__alt_data_end+0xfffe762c>
 4027858:	b0800317 	ldw	r2,12(r22)
 402785c:	b0c00217 	ldw	r3,8(r22)
 4027860:	81bfff04 	addi	r6,r16,-4
 4027864:	01000904 	movi	r4,36
 4027868:	18800315 	stw	r2,12(r3)
 402786c:	10c00215 	stw	r3,8(r2)
 4027870:	b4800204 	addi	r18,r22,8
 4027874:	21bfe52e 	bgeu	r4,r6,402780c <__alt_data_end+0xfffe780c>
 4027878:	a80b883a 	mov	r5,r21
 402787c:	9009883a 	mov	r4,r18
 4027880:	40263000 	call	4026300 <memmove>
 4027884:	b821883a 	mov	r16,r23
 4027888:	b027883a 	mov	r19,r22
 402788c:	003f8a06 	br	40276b8 <__alt_data_end+0xfffe76b8>
 4027890:	300b883a 	mov	r5,r6
 4027894:	dfc00917 	ldw	ra,36(sp)
 4027898:	df000817 	ldw	fp,32(sp)
 402789c:	ddc00717 	ldw	r23,28(sp)
 40278a0:	dd800617 	ldw	r22,24(sp)
 40278a4:	dd400517 	ldw	r21,20(sp)
 40278a8:	dd000417 	ldw	r20,16(sp)
 40278ac:	dcc00317 	ldw	r19,12(sp)
 40278b0:	dc800217 	ldw	r18,8(sp)
 40278b4:	dc400117 	ldw	r17,4(sp)
 40278b8:	dc000017 	ldw	r16,0(sp)
 40278bc:	dec00a04 	addi	sp,sp,40
 40278c0:	40258c81 	jmpi	40258c8 <_malloc_r>
 40278c4:	a8c00017 	ldw	r3,0(r21)
 40278c8:	90c00015 	stw	r3,0(r18)
 40278cc:	a8c00117 	ldw	r3,4(r21)
 40278d0:	90c00115 	stw	r3,4(r18)
 40278d4:	00c006c4 	movi	r3,27
 40278d8:	19804536 	bltu	r3,r6,40279f0 <_realloc_r+0x470>
 40278dc:	90800204 	addi	r2,r18,8
 40278e0:	a8c00204 	addi	r3,r21,8
 40278e4:	003f6306 	br	4027674 <__alt_data_end+0xfffe7674>
 40278e8:	9005883a 	mov	r2,r18
 40278ec:	a8c00017 	ldw	r3,0(r21)
 40278f0:	b821883a 	mov	r16,r23
 40278f4:	b027883a 	mov	r19,r22
 40278f8:	10c00015 	stw	r3,0(r2)
 40278fc:	a8c00117 	ldw	r3,4(r21)
 4027900:	10c00115 	stw	r3,4(r2)
 4027904:	a8c00217 	ldw	r3,8(r21)
 4027908:	10c00215 	stw	r3,8(r2)
 402790c:	003f6a06 	br	40276b8 <__alt_data_end+0xfffe76b8>
 4027910:	9c67883a 	add	r19,r19,r17
 4027914:	4445c83a 	sub	r2,r8,r17
 4027918:	e4c00215 	stw	r19,8(fp)
 402791c:	10800054 	ori	r2,r2,1
 4027920:	98800115 	stw	r2,4(r19)
 4027924:	a8bfff17 	ldw	r2,-4(r21)
 4027928:	a009883a 	mov	r4,r20
 402792c:	1080004c 	andi	r2,r2,1
 4027930:	1462b03a 	or	r17,r2,r17
 4027934:	ac7fff15 	stw	r17,-4(r21)
 4027938:	402d8940 	call	402d894 <__malloc_unlock>
 402793c:	a805883a 	mov	r2,r21
 4027940:	003f6b06 	br	40276f0 <__alt_data_end+0xfffe76f0>
 4027944:	a80b883a 	mov	r5,r21
 4027948:	9009883a 	mov	r4,r18
 402794c:	40263000 	call	4026300 <memmove>
 4027950:	003f4e06 	br	402768c <__alt_data_end+0xfffe768c>
 4027954:	89000404 	addi	r4,r17,16
 4027958:	b93fbc16 	blt	r23,r4,402784c <__alt_data_end+0xfffe784c>
 402795c:	b0800317 	ldw	r2,12(r22)
 4027960:	b0c00217 	ldw	r3,8(r22)
 4027964:	81bfff04 	addi	r6,r16,-4
 4027968:	01000904 	movi	r4,36
 402796c:	18800315 	stw	r2,12(r3)
 4027970:	10c00215 	stw	r3,8(r2)
 4027974:	b4800204 	addi	r18,r22,8
 4027978:	21804336 	bltu	r4,r6,4027a88 <_realloc_r+0x508>
 402797c:	008004c4 	movi	r2,19
 4027980:	11803f2e 	bgeu	r2,r6,4027a80 <_realloc_r+0x500>
 4027984:	a8800017 	ldw	r2,0(r21)
 4027988:	b0800215 	stw	r2,8(r22)
 402798c:	a8800117 	ldw	r2,4(r21)
 4027990:	b0800315 	stw	r2,12(r22)
 4027994:	008006c4 	movi	r2,27
 4027998:	11803f36 	bltu	r2,r6,4027a98 <_realloc_r+0x518>
 402799c:	b0800404 	addi	r2,r22,16
 40279a0:	ad400204 	addi	r21,r21,8
 40279a4:	a8c00017 	ldw	r3,0(r21)
 40279a8:	10c00015 	stw	r3,0(r2)
 40279ac:	a8c00117 	ldw	r3,4(r21)
 40279b0:	10c00115 	stw	r3,4(r2)
 40279b4:	a8c00217 	ldw	r3,8(r21)
 40279b8:	10c00215 	stw	r3,8(r2)
 40279bc:	b447883a 	add	r3,r22,r17
 40279c0:	bc45c83a 	sub	r2,r23,r17
 40279c4:	e0c00215 	stw	r3,8(fp)
 40279c8:	10800054 	ori	r2,r2,1
 40279cc:	18800115 	stw	r2,4(r3)
 40279d0:	b0800117 	ldw	r2,4(r22)
 40279d4:	a009883a 	mov	r4,r20
 40279d8:	1080004c 	andi	r2,r2,1
 40279dc:	1462b03a 	or	r17,r2,r17
 40279e0:	b4400115 	stw	r17,4(r22)
 40279e4:	402d8940 	call	402d894 <__malloc_unlock>
 40279e8:	9005883a 	mov	r2,r18
 40279ec:	003f4006 	br	40276f0 <__alt_data_end+0xfffe76f0>
 40279f0:	a8c00217 	ldw	r3,8(r21)
 40279f4:	90c00215 	stw	r3,8(r18)
 40279f8:	a8c00317 	ldw	r3,12(r21)
 40279fc:	90c00315 	stw	r3,12(r18)
 4027a00:	30801126 	beq	r6,r2,4027a48 <_realloc_r+0x4c8>
 4027a04:	90800404 	addi	r2,r18,16
 4027a08:	a8c00404 	addi	r3,r21,16
 4027a0c:	003f1906 	br	4027674 <__alt_data_end+0xfffe7674>
 4027a10:	90ffff17 	ldw	r3,-4(r18)
 4027a14:	00bfff04 	movi	r2,-4
 4027a18:	a825883a 	mov	r18,r21
 4027a1c:	1884703a 	and	r2,r3,r2
 4027a20:	80a1883a 	add	r16,r16,r2
 4027a24:	003f2406 	br	40276b8 <__alt_data_end+0xfffe76b8>
 4027a28:	a8800217 	ldw	r2,8(r21)
 4027a2c:	b0800415 	stw	r2,16(r22)
 4027a30:	a8800317 	ldw	r2,12(r21)
 4027a34:	b0800515 	stw	r2,20(r22)
 4027a38:	31000a26 	beq	r6,r4,4027a64 <_realloc_r+0x4e4>
 4027a3c:	b0800604 	addi	r2,r22,24
 4027a40:	ad400404 	addi	r21,r21,16
 4027a44:	003fa906 	br	40278ec <__alt_data_end+0xfffe78ec>
 4027a48:	a9000417 	ldw	r4,16(r21)
 4027a4c:	90800604 	addi	r2,r18,24
 4027a50:	a8c00604 	addi	r3,r21,24
 4027a54:	91000415 	stw	r4,16(r18)
 4027a58:	a9000517 	ldw	r4,20(r21)
 4027a5c:	91000515 	stw	r4,20(r18)
 4027a60:	003f0406 	br	4027674 <__alt_data_end+0xfffe7674>
 4027a64:	a8c00417 	ldw	r3,16(r21)
 4027a68:	ad400604 	addi	r21,r21,24
 4027a6c:	b0800804 	addi	r2,r22,32
 4027a70:	b0c00615 	stw	r3,24(r22)
 4027a74:	a8ffff17 	ldw	r3,-4(r21)
 4027a78:	b0c00715 	stw	r3,28(r22)
 4027a7c:	003f9b06 	br	40278ec <__alt_data_end+0xfffe78ec>
 4027a80:	9005883a 	mov	r2,r18
 4027a84:	003fc706 	br	40279a4 <__alt_data_end+0xfffe79a4>
 4027a88:	a80b883a 	mov	r5,r21
 4027a8c:	9009883a 	mov	r4,r18
 4027a90:	40263000 	call	4026300 <memmove>
 4027a94:	003fc906 	br	40279bc <__alt_data_end+0xfffe79bc>
 4027a98:	a8800217 	ldw	r2,8(r21)
 4027a9c:	b0800415 	stw	r2,16(r22)
 4027aa0:	a8800317 	ldw	r2,12(r21)
 4027aa4:	b0800515 	stw	r2,20(r22)
 4027aa8:	31000726 	beq	r6,r4,4027ac8 <_realloc_r+0x548>
 4027aac:	b0800604 	addi	r2,r22,24
 4027ab0:	ad400404 	addi	r21,r21,16
 4027ab4:	003fbb06 	br	40279a4 <__alt_data_end+0xfffe79a4>
 4027ab8:	a009883a 	mov	r4,r20
 4027abc:	402d8940 	call	402d894 <__malloc_unlock>
 4027ac0:	0005883a 	mov	r2,zero
 4027ac4:	003f0a06 	br	40276f0 <__alt_data_end+0xfffe76f0>
 4027ac8:	a8c00417 	ldw	r3,16(r21)
 4027acc:	ad400604 	addi	r21,r21,24
 4027ad0:	b0800804 	addi	r2,r22,32
 4027ad4:	b0c00615 	stw	r3,24(r22)
 4027ad8:	a8ffff17 	ldw	r3,-4(r21)
 4027adc:	b0c00715 	stw	r3,28(r22)
 4027ae0:	003fb006 	br	40279a4 <__alt_data_end+0xfffe79a4>

04027ae4 <__fpclassifyd>:
 4027ae4:	00a00034 	movhi	r2,32768
 4027ae8:	10bfffc4 	addi	r2,r2,-1
 4027aec:	2884703a 	and	r2,r5,r2
 4027af0:	10000726 	beq	r2,zero,4027b10 <__fpclassifyd+0x2c>
 4027af4:	00fffc34 	movhi	r3,65520
 4027af8:	019ff834 	movhi	r6,32736
 4027afc:	28c7883a 	add	r3,r5,r3
 4027b00:	31bfffc4 	addi	r6,r6,-1
 4027b04:	30c00536 	bltu	r6,r3,4027b1c <__fpclassifyd+0x38>
 4027b08:	00800104 	movi	r2,4
 4027b0c:	f800283a 	ret
 4027b10:	2000021e 	bne	r4,zero,4027b1c <__fpclassifyd+0x38>
 4027b14:	00800084 	movi	r2,2
 4027b18:	f800283a 	ret
 4027b1c:	00dffc34 	movhi	r3,32752
 4027b20:	019ff834 	movhi	r6,32736
 4027b24:	28cb883a 	add	r5,r5,r3
 4027b28:	31bfffc4 	addi	r6,r6,-1
 4027b2c:	317ff62e 	bgeu	r6,r5,4027b08 <__alt_data_end+0xfffe7b08>
 4027b30:	01400434 	movhi	r5,16
 4027b34:	297fffc4 	addi	r5,r5,-1
 4027b38:	28800236 	bltu	r5,r2,4027b44 <__fpclassifyd+0x60>
 4027b3c:	008000c4 	movi	r2,3
 4027b40:	f800283a 	ret
 4027b44:	10c00226 	beq	r2,r3,4027b50 <__fpclassifyd+0x6c>
 4027b48:	0005883a 	mov	r2,zero
 4027b4c:	f800283a 	ret
 4027b50:	2005003a 	cmpeq	r2,r4,zero
 4027b54:	f800283a 	ret

04027b58 <_sbrk_r>:
 4027b58:	defffd04 	addi	sp,sp,-12
 4027b5c:	dc000015 	stw	r16,0(sp)
 4027b60:	040100f4 	movhi	r16,1027
 4027b64:	dc400115 	stw	r17,4(sp)
 4027b68:	840f7c04 	addi	r16,r16,15856
 4027b6c:	2023883a 	mov	r17,r4
 4027b70:	2809883a 	mov	r4,r5
 4027b74:	dfc00215 	stw	ra,8(sp)
 4027b78:	80000015 	stw	zero,0(r16)
 4027b7c:	402da540 	call	402da54 <sbrk>
 4027b80:	00ffffc4 	movi	r3,-1
 4027b84:	10c00526 	beq	r2,r3,4027b9c <_sbrk_r+0x44>
 4027b88:	dfc00217 	ldw	ra,8(sp)
 4027b8c:	dc400117 	ldw	r17,4(sp)
 4027b90:	dc000017 	ldw	r16,0(sp)
 4027b94:	dec00304 	addi	sp,sp,12
 4027b98:	f800283a 	ret
 4027b9c:	80c00017 	ldw	r3,0(r16)
 4027ba0:	183ff926 	beq	r3,zero,4027b88 <__alt_data_end+0xfffe7b88>
 4027ba4:	88c00015 	stw	r3,0(r17)
 4027ba8:	003ff706 	br	4027b88 <__alt_data_end+0xfffe7b88>

04027bac <__sread>:
 4027bac:	defffe04 	addi	sp,sp,-8
 4027bb0:	dc000015 	stw	r16,0(sp)
 4027bb4:	2821883a 	mov	r16,r5
 4027bb8:	2940038f 	ldh	r5,14(r5)
 4027bbc:	dfc00115 	stw	ra,4(sp)
 4027bc0:	40299a00 	call	40299a0 <_read_r>
 4027bc4:	10000716 	blt	r2,zero,4027be4 <__sread+0x38>
 4027bc8:	80c01417 	ldw	r3,80(r16)
 4027bcc:	1887883a 	add	r3,r3,r2
 4027bd0:	80c01415 	stw	r3,80(r16)
 4027bd4:	dfc00117 	ldw	ra,4(sp)
 4027bd8:	dc000017 	ldw	r16,0(sp)
 4027bdc:	dec00204 	addi	sp,sp,8
 4027be0:	f800283a 	ret
 4027be4:	80c0030b 	ldhu	r3,12(r16)
 4027be8:	18fbffcc 	andi	r3,r3,61439
 4027bec:	80c0030d 	sth	r3,12(r16)
 4027bf0:	dfc00117 	ldw	ra,4(sp)
 4027bf4:	dc000017 	ldw	r16,0(sp)
 4027bf8:	dec00204 	addi	sp,sp,8
 4027bfc:	f800283a 	ret

04027c00 <__seofread>:
 4027c00:	0005883a 	mov	r2,zero
 4027c04:	f800283a 	ret

04027c08 <__swrite>:
 4027c08:	2880030b 	ldhu	r2,12(r5)
 4027c0c:	defffb04 	addi	sp,sp,-20
 4027c10:	dcc00315 	stw	r19,12(sp)
 4027c14:	dc800215 	stw	r18,8(sp)
 4027c18:	dc400115 	stw	r17,4(sp)
 4027c1c:	dc000015 	stw	r16,0(sp)
 4027c20:	dfc00415 	stw	ra,16(sp)
 4027c24:	10c0400c 	andi	r3,r2,256
 4027c28:	2821883a 	mov	r16,r5
 4027c2c:	2023883a 	mov	r17,r4
 4027c30:	3025883a 	mov	r18,r6
 4027c34:	3827883a 	mov	r19,r7
 4027c38:	18000526 	beq	r3,zero,4027c50 <__swrite+0x48>
 4027c3c:	2940038f 	ldh	r5,14(r5)
 4027c40:	01c00084 	movi	r7,2
 4027c44:	000d883a 	mov	r6,zero
 4027c48:	40299400 	call	4029940 <_lseek_r>
 4027c4c:	8080030b 	ldhu	r2,12(r16)
 4027c50:	8140038f 	ldh	r5,14(r16)
 4027c54:	10bbffcc 	andi	r2,r2,61439
 4027c58:	980f883a 	mov	r7,r19
 4027c5c:	900d883a 	mov	r6,r18
 4027c60:	8809883a 	mov	r4,r17
 4027c64:	8080030d 	sth	r2,12(r16)
 4027c68:	dfc00417 	ldw	ra,16(sp)
 4027c6c:	dcc00317 	ldw	r19,12(sp)
 4027c70:	dc800217 	ldw	r18,8(sp)
 4027c74:	dc400117 	ldw	r17,4(sp)
 4027c78:	dc000017 	ldw	r16,0(sp)
 4027c7c:	dec00504 	addi	sp,sp,20
 4027c80:	402940c1 	jmpi	402940c <_write_r>

04027c84 <__sseek>:
 4027c84:	defffe04 	addi	sp,sp,-8
 4027c88:	dc000015 	stw	r16,0(sp)
 4027c8c:	2821883a 	mov	r16,r5
 4027c90:	2940038f 	ldh	r5,14(r5)
 4027c94:	dfc00115 	stw	ra,4(sp)
 4027c98:	40299400 	call	4029940 <_lseek_r>
 4027c9c:	00ffffc4 	movi	r3,-1
 4027ca0:	10c00826 	beq	r2,r3,4027cc4 <__sseek+0x40>
 4027ca4:	80c0030b 	ldhu	r3,12(r16)
 4027ca8:	80801415 	stw	r2,80(r16)
 4027cac:	18c40014 	ori	r3,r3,4096
 4027cb0:	80c0030d 	sth	r3,12(r16)
 4027cb4:	dfc00117 	ldw	ra,4(sp)
 4027cb8:	dc000017 	ldw	r16,0(sp)
 4027cbc:	dec00204 	addi	sp,sp,8
 4027cc0:	f800283a 	ret
 4027cc4:	80c0030b 	ldhu	r3,12(r16)
 4027cc8:	18fbffcc 	andi	r3,r3,61439
 4027ccc:	80c0030d 	sth	r3,12(r16)
 4027cd0:	dfc00117 	ldw	ra,4(sp)
 4027cd4:	dc000017 	ldw	r16,0(sp)
 4027cd8:	dec00204 	addi	sp,sp,8
 4027cdc:	f800283a 	ret

04027ce0 <__sclose>:
 4027ce0:	2940038f 	ldh	r5,14(r5)
 4027ce4:	402946c1 	jmpi	402946c <_close_r>

04027ce8 <strcmp>:
 4027ce8:	2144b03a 	or	r2,r4,r5
 4027cec:	108000cc 	andi	r2,r2,3
 4027cf0:	1000171e 	bne	r2,zero,4027d50 <strcmp+0x68>
 4027cf4:	20800017 	ldw	r2,0(r4)
 4027cf8:	28c00017 	ldw	r3,0(r5)
 4027cfc:	10c0141e 	bne	r2,r3,4027d50 <strcmp+0x68>
 4027d00:	027fbff4 	movhi	r9,65279
 4027d04:	4a7fbfc4 	addi	r9,r9,-257
 4027d08:	0086303a 	nor	r3,zero,r2
 4027d0c:	02202074 	movhi	r8,32897
 4027d10:	1245883a 	add	r2,r2,r9
 4027d14:	42202004 	addi	r8,r8,-32640
 4027d18:	10c4703a 	and	r2,r2,r3
 4027d1c:	1204703a 	and	r2,r2,r8
 4027d20:	10000226 	beq	r2,zero,4027d2c <strcmp+0x44>
 4027d24:	00002306 	br	4027db4 <strcmp+0xcc>
 4027d28:	1000221e 	bne	r2,zero,4027db4 <strcmp+0xcc>
 4027d2c:	21000104 	addi	r4,r4,4
 4027d30:	20c00017 	ldw	r3,0(r4)
 4027d34:	29400104 	addi	r5,r5,4
 4027d38:	29800017 	ldw	r6,0(r5)
 4027d3c:	1a4f883a 	add	r7,r3,r9
 4027d40:	00c4303a 	nor	r2,zero,r3
 4027d44:	3884703a 	and	r2,r7,r2
 4027d48:	1204703a 	and	r2,r2,r8
 4027d4c:	19bff626 	beq	r3,r6,4027d28 <__alt_data_end+0xfffe7d28>
 4027d50:	20800003 	ldbu	r2,0(r4)
 4027d54:	10c03fcc 	andi	r3,r2,255
 4027d58:	18c0201c 	xori	r3,r3,128
 4027d5c:	18ffe004 	addi	r3,r3,-128
 4027d60:	18000c26 	beq	r3,zero,4027d94 <strcmp+0xac>
 4027d64:	29800007 	ldb	r6,0(r5)
 4027d68:	19800326 	beq	r3,r6,4027d78 <strcmp+0x90>
 4027d6c:	00001306 	br	4027dbc <strcmp+0xd4>
 4027d70:	29800007 	ldb	r6,0(r5)
 4027d74:	11800b1e 	bne	r2,r6,4027da4 <strcmp+0xbc>
 4027d78:	21000044 	addi	r4,r4,1
 4027d7c:	20c00003 	ldbu	r3,0(r4)
 4027d80:	29400044 	addi	r5,r5,1
 4027d84:	18803fcc 	andi	r2,r3,255
 4027d88:	1080201c 	xori	r2,r2,128
 4027d8c:	10bfe004 	addi	r2,r2,-128
 4027d90:	103ff71e 	bne	r2,zero,4027d70 <__alt_data_end+0xfffe7d70>
 4027d94:	0007883a 	mov	r3,zero
 4027d98:	28800003 	ldbu	r2,0(r5)
 4027d9c:	1885c83a 	sub	r2,r3,r2
 4027da0:	f800283a 	ret
 4027da4:	28800003 	ldbu	r2,0(r5)
 4027da8:	18c03fcc 	andi	r3,r3,255
 4027dac:	1885c83a 	sub	r2,r3,r2
 4027db0:	f800283a 	ret
 4027db4:	0005883a 	mov	r2,zero
 4027db8:	f800283a 	ret
 4027dbc:	10c03fcc 	andi	r3,r2,255
 4027dc0:	003ff506 	br	4027d98 <__alt_data_end+0xfffe7d98>

04027dc4 <__sprint_r.part.0>:
 4027dc4:	28801917 	ldw	r2,100(r5)
 4027dc8:	defff604 	addi	sp,sp,-40
 4027dcc:	dd400515 	stw	r21,20(sp)
 4027dd0:	dfc00915 	stw	ra,36(sp)
 4027dd4:	df000815 	stw	fp,32(sp)
 4027dd8:	ddc00715 	stw	r23,28(sp)
 4027ddc:	dd800615 	stw	r22,24(sp)
 4027de0:	dd000415 	stw	r20,16(sp)
 4027de4:	dcc00315 	stw	r19,12(sp)
 4027de8:	dc800215 	stw	r18,8(sp)
 4027dec:	dc400115 	stw	r17,4(sp)
 4027df0:	dc000015 	stw	r16,0(sp)
 4027df4:	1088000c 	andi	r2,r2,8192
 4027df8:	302b883a 	mov	r21,r6
 4027dfc:	10002e26 	beq	r2,zero,4027eb8 <__sprint_r.part.0+0xf4>
 4027e00:	30800217 	ldw	r2,8(r6)
 4027e04:	35800017 	ldw	r22,0(r6)
 4027e08:	10002926 	beq	r2,zero,4027eb0 <__sprint_r.part.0+0xec>
 4027e0c:	2827883a 	mov	r19,r5
 4027e10:	2029883a 	mov	r20,r4
 4027e14:	b5c00104 	addi	r23,r22,4
 4027e18:	04bfffc4 	movi	r18,-1
 4027e1c:	bc400017 	ldw	r17,0(r23)
 4027e20:	b4000017 	ldw	r16,0(r22)
 4027e24:	0039883a 	mov	fp,zero
 4027e28:	8822d0ba 	srli	r17,r17,2
 4027e2c:	8800031e 	bne	r17,zero,4027e3c <__sprint_r.part.0+0x78>
 4027e30:	00001806 	br	4027e94 <__sprint_r.part.0+0xd0>
 4027e34:	84000104 	addi	r16,r16,4
 4027e38:	8f001526 	beq	r17,fp,4027e90 <__sprint_r.part.0+0xcc>
 4027e3c:	81400017 	ldw	r5,0(r16)
 4027e40:	980d883a 	mov	r6,r19
 4027e44:	a009883a 	mov	r4,r20
 4027e48:	40297ec0 	call	40297ec <_fputwc_r>
 4027e4c:	e7000044 	addi	fp,fp,1
 4027e50:	14bff81e 	bne	r2,r18,4027e34 <__alt_data_end+0xfffe7e34>
 4027e54:	9005883a 	mov	r2,r18
 4027e58:	a8000215 	stw	zero,8(r21)
 4027e5c:	a8000115 	stw	zero,4(r21)
 4027e60:	dfc00917 	ldw	ra,36(sp)
 4027e64:	df000817 	ldw	fp,32(sp)
 4027e68:	ddc00717 	ldw	r23,28(sp)
 4027e6c:	dd800617 	ldw	r22,24(sp)
 4027e70:	dd400517 	ldw	r21,20(sp)
 4027e74:	dd000417 	ldw	r20,16(sp)
 4027e78:	dcc00317 	ldw	r19,12(sp)
 4027e7c:	dc800217 	ldw	r18,8(sp)
 4027e80:	dc400117 	ldw	r17,4(sp)
 4027e84:	dc000017 	ldw	r16,0(sp)
 4027e88:	dec00a04 	addi	sp,sp,40
 4027e8c:	f800283a 	ret
 4027e90:	a8800217 	ldw	r2,8(r21)
 4027e94:	8c63883a 	add	r17,r17,r17
 4027e98:	8c63883a 	add	r17,r17,r17
 4027e9c:	1445c83a 	sub	r2,r2,r17
 4027ea0:	a8800215 	stw	r2,8(r21)
 4027ea4:	b5800204 	addi	r22,r22,8
 4027ea8:	bdc00204 	addi	r23,r23,8
 4027eac:	103fdb1e 	bne	r2,zero,4027e1c <__alt_data_end+0xfffe7e1c>
 4027eb0:	0005883a 	mov	r2,zero
 4027eb4:	003fe806 	br	4027e58 <__alt_data_end+0xfffe7e58>
 4027eb8:	4024fec0 	call	4024fec <__sfvwrite_r>
 4027ebc:	003fe606 	br	4027e58 <__alt_data_end+0xfffe7e58>

04027ec0 <__sprint_r>:
 4027ec0:	30c00217 	ldw	r3,8(r6)
 4027ec4:	18000126 	beq	r3,zero,4027ecc <__sprint_r+0xc>
 4027ec8:	4027dc41 	jmpi	4027dc4 <__sprint_r.part.0>
 4027ecc:	30000115 	stw	zero,4(r6)
 4027ed0:	0005883a 	mov	r2,zero
 4027ed4:	f800283a 	ret

04027ed8 <___vfiprintf_internal_r>:
 4027ed8:	deffc904 	addi	sp,sp,-220
 4027edc:	df003515 	stw	fp,212(sp)
 4027ee0:	dd003115 	stw	r20,196(sp)
 4027ee4:	dfc03615 	stw	ra,216(sp)
 4027ee8:	ddc03415 	stw	r23,208(sp)
 4027eec:	dd803315 	stw	r22,204(sp)
 4027ef0:	dd403215 	stw	r21,200(sp)
 4027ef4:	dcc03015 	stw	r19,192(sp)
 4027ef8:	dc802f15 	stw	r18,188(sp)
 4027efc:	dc402e15 	stw	r17,184(sp)
 4027f00:	dc002d15 	stw	r16,180(sp)
 4027f04:	d9002015 	stw	r4,128(sp)
 4027f08:	d9c02215 	stw	r7,136(sp)
 4027f0c:	2829883a 	mov	r20,r5
 4027f10:	3039883a 	mov	fp,r6
 4027f14:	20000226 	beq	r4,zero,4027f20 <___vfiprintf_internal_r+0x48>
 4027f18:	20800e17 	ldw	r2,56(r4)
 4027f1c:	1000cf26 	beq	r2,zero,402825c <___vfiprintf_internal_r+0x384>
 4027f20:	a080030b 	ldhu	r2,12(r20)
 4027f24:	10c8000c 	andi	r3,r2,8192
 4027f28:	1800061e 	bne	r3,zero,4027f44 <___vfiprintf_internal_r+0x6c>
 4027f2c:	a1001917 	ldw	r4,100(r20)
 4027f30:	00f7ffc4 	movi	r3,-8193
 4027f34:	10880014 	ori	r2,r2,8192
 4027f38:	20c6703a 	and	r3,r4,r3
 4027f3c:	a080030d 	sth	r2,12(r20)
 4027f40:	a0c01915 	stw	r3,100(r20)
 4027f44:	10c0020c 	andi	r3,r2,8
 4027f48:	1800a926 	beq	r3,zero,40281f0 <___vfiprintf_internal_r+0x318>
 4027f4c:	a0c00417 	ldw	r3,16(r20)
 4027f50:	1800a726 	beq	r3,zero,40281f0 <___vfiprintf_internal_r+0x318>
 4027f54:	1080068c 	andi	r2,r2,26
 4027f58:	00c00284 	movi	r3,10
 4027f5c:	10c0ac26 	beq	r2,r3,4028210 <___vfiprintf_internal_r+0x338>
 4027f60:	da801a04 	addi	r10,sp,104
 4027f64:	da801e15 	stw	r10,120(sp)
 4027f68:	d8801e17 	ldw	r2,120(sp)
 4027f6c:	da8019c4 	addi	r10,sp,103
 4027f70:	058100f4 	movhi	r22,1027
 4027f74:	05c100f4 	movhi	r23,1027
 4027f78:	da801f15 	stw	r10,124(sp)
 4027f7c:	1295c83a 	sub	r10,r2,r10
 4027f80:	b5811c04 	addi	r22,r22,1136
 4027f84:	bdc11804 	addi	r23,r23,1120
 4027f88:	dec01a15 	stw	sp,104(sp)
 4027f8c:	d8001c15 	stw	zero,112(sp)
 4027f90:	d8001b15 	stw	zero,108(sp)
 4027f94:	d8002615 	stw	zero,152(sp)
 4027f98:	d8002315 	stw	zero,140(sp)
 4027f9c:	da802715 	stw	r10,156(sp)
 4027fa0:	d811883a 	mov	r8,sp
 4027fa4:	dd002115 	stw	r20,132(sp)
 4027fa8:	e021883a 	mov	r16,fp
 4027fac:	80800007 	ldb	r2,0(r16)
 4027fb0:	1003ea26 	beq	r2,zero,4028f5c <___vfiprintf_internal_r+0x1084>
 4027fb4:	00c00944 	movi	r3,37
 4027fb8:	8025883a 	mov	r18,r16
 4027fbc:	10c0021e 	bne	r2,r3,4027fc8 <___vfiprintf_internal_r+0xf0>
 4027fc0:	00001606 	br	402801c <___vfiprintf_internal_r+0x144>
 4027fc4:	10c00326 	beq	r2,r3,4027fd4 <___vfiprintf_internal_r+0xfc>
 4027fc8:	94800044 	addi	r18,r18,1
 4027fcc:	90800007 	ldb	r2,0(r18)
 4027fd0:	103ffc1e 	bne	r2,zero,4027fc4 <__alt_data_end+0xfffe7fc4>
 4027fd4:	9423c83a 	sub	r17,r18,r16
 4027fd8:	88001026 	beq	r17,zero,402801c <___vfiprintf_internal_r+0x144>
 4027fdc:	d8c01c17 	ldw	r3,112(sp)
 4027fe0:	d8801b17 	ldw	r2,108(sp)
 4027fe4:	44000015 	stw	r16,0(r8)
 4027fe8:	88c7883a 	add	r3,r17,r3
 4027fec:	10800044 	addi	r2,r2,1
 4027ff0:	44400115 	stw	r17,4(r8)
 4027ff4:	d8c01c15 	stw	r3,112(sp)
 4027ff8:	d8801b15 	stw	r2,108(sp)
 4027ffc:	010001c4 	movi	r4,7
 4028000:	2080760e 	bge	r4,r2,40281dc <___vfiprintf_internal_r+0x304>
 4028004:	1803821e 	bne	r3,zero,4028e10 <___vfiprintf_internal_r+0xf38>
 4028008:	da802317 	ldw	r10,140(sp)
 402800c:	d8001b15 	stw	zero,108(sp)
 4028010:	d811883a 	mov	r8,sp
 4028014:	5455883a 	add	r10,r10,r17
 4028018:	da802315 	stw	r10,140(sp)
 402801c:	90800007 	ldb	r2,0(r18)
 4028020:	10044626 	beq	r2,zero,402913c <___vfiprintf_internal_r+0x1264>
 4028024:	90c00047 	ldb	r3,1(r18)
 4028028:	94000044 	addi	r16,r18,1
 402802c:	d8001d85 	stb	zero,118(sp)
 4028030:	0009883a 	mov	r4,zero
 4028034:	000f883a 	mov	r7,zero
 4028038:	027fffc4 	movi	r9,-1
 402803c:	0023883a 	mov	r17,zero
 4028040:	0029883a 	mov	r20,zero
 4028044:	01401604 	movi	r5,88
 4028048:	01800244 	movi	r6,9
 402804c:	03400a84 	movi	r13,42
 4028050:	03001b04 	movi	r12,108
 4028054:	84000044 	addi	r16,r16,1
 4028058:	18bff804 	addi	r2,r3,-32
 402805c:	28827336 	bltu	r5,r2,4028a2c <___vfiprintf_internal_r+0xb54>
 4028060:	100490ba 	slli	r2,r2,2
 4028064:	028100f4 	movhi	r10,1027
 4028068:	52a01e04 	addi	r10,r10,-32648
 402806c:	1285883a 	add	r2,r2,r10
 4028070:	10800017 	ldw	r2,0(r2)
 4028074:	1000683a 	jmp	r2
 4028078:	04028760 	cmpeqi	r16,zero,2589
 402807c:	04028a2c 	andhi	r16,zero,2600
 4028080:	04028a2c 	andhi	r16,zero,2600
 4028084:	04028780 	call	402878 <__alt_mem_sdram_controller_2+0x402878>
 4028088:	04028a2c 	andhi	r16,zero,2600
 402808c:	04028a2c 	andhi	r16,zero,2600
 4028090:	04028a2c 	andhi	r16,zero,2600
 4028094:	04028a2c 	andhi	r16,zero,2600
 4028098:	04028a2c 	andhi	r16,zero,2600
 402809c:	04028a2c 	andhi	r16,zero,2600
 40280a0:	04028968 	cmpgeui	r16,zero,2597
 40280a4:	04028984 	movi	r16,2598
 40280a8:	04028a2c 	andhi	r16,zero,2600
 40280ac:	0402826c 	andhi	r16,zero,2569
 40280b0:	04028994 	movui	r16,2598
 40280b4:	04028a2c 	andhi	r16,zero,2600
 40280b8:	0402878c 	andi	r16,zero,2590
 40280bc:	04028798 	cmpnei	r16,zero,2590
 40280c0:	04028798 	cmpnei	r16,zero,2590
 40280c4:	04028798 	cmpnei	r16,zero,2590
 40280c8:	04028798 	cmpnei	r16,zero,2590
 40280cc:	04028798 	cmpnei	r16,zero,2590
 40280d0:	04028798 	cmpnei	r16,zero,2590
 40280d4:	04028798 	cmpnei	r16,zero,2590
 40280d8:	04028798 	cmpnei	r16,zero,2590
 40280dc:	04028798 	cmpnei	r16,zero,2590
 40280e0:	04028a2c 	andhi	r16,zero,2600
 40280e4:	04028a2c 	andhi	r16,zero,2600
 40280e8:	04028a2c 	andhi	r16,zero,2600
 40280ec:	04028a2c 	andhi	r16,zero,2600
 40280f0:	04028a2c 	andhi	r16,zero,2600
 40280f4:	04028a2c 	andhi	r16,zero,2600
 40280f8:	04028a2c 	andhi	r16,zero,2600
 40280fc:	04028a2c 	andhi	r16,zero,2600
 4028100:	04028a2c 	andhi	r16,zero,2600
 4028104:	04028a2c 	andhi	r16,zero,2600
 4028108:	040287c4 	movi	r16,2591
 402810c:	04028a2c 	andhi	r16,zero,2600
 4028110:	04028a2c 	andhi	r16,zero,2600
 4028114:	04028a2c 	andhi	r16,zero,2600
 4028118:	04028a2c 	andhi	r16,zero,2600
 402811c:	04028a2c 	andhi	r16,zero,2600
 4028120:	04028a2c 	andhi	r16,zero,2600
 4028124:	04028a2c 	andhi	r16,zero,2600
 4028128:	04028a2c 	andhi	r16,zero,2600
 402812c:	04028a2c 	andhi	r16,zero,2600
 4028130:	04028a2c 	andhi	r16,zero,2600
 4028134:	040287fc 	xorhi	r16,zero,2591
 4028138:	04028a2c 	andhi	r16,zero,2600
 402813c:	04028a2c 	andhi	r16,zero,2600
 4028140:	04028a2c 	andhi	r16,zero,2600
 4028144:	04028a2c 	andhi	r16,zero,2600
 4028148:	04028a2c 	andhi	r16,zero,2600
 402814c:	04028854 	movui	r16,2593
 4028150:	04028a2c 	andhi	r16,zero,2600
 4028154:	04028a2c 	andhi	r16,zero,2600
 4028158:	040288c4 	movi	r16,2595
 402815c:	04028a2c 	andhi	r16,zero,2600
 4028160:	04028a2c 	andhi	r16,zero,2600
 4028164:	04028a2c 	andhi	r16,zero,2600
 4028168:	04028a2c 	andhi	r16,zero,2600
 402816c:	04028a2c 	andhi	r16,zero,2600
 4028170:	04028a2c 	andhi	r16,zero,2600
 4028174:	04028a2c 	andhi	r16,zero,2600
 4028178:	04028a2c 	andhi	r16,zero,2600
 402817c:	04028a2c 	andhi	r16,zero,2600
 4028180:	04028a2c 	andhi	r16,zero,2600
 4028184:	04028670 	cmpltui	r16,zero,2585
 4028188:	0402869c 	xori	r16,zero,2586
 402818c:	04028a2c 	andhi	r16,zero,2600
 4028190:	04028a2c 	andhi	r16,zero,2600
 4028194:	04028a2c 	andhi	r16,zero,2600
 4028198:	040289d4 	movui	r16,2599
 402819c:	0402869c 	xori	r16,zero,2586
 40281a0:	04028a2c 	andhi	r16,zero,2600
 40281a4:	04028a2c 	andhi	r16,zero,2600
 40281a8:	04028530 	cmpltui	r16,zero,2580
 40281ac:	04028a2c 	andhi	r16,zero,2600
 40281b0:	04028540 	call	402854 <__alt_mem_sdram_controller_2+0x402854>
 40281b4:	0402857c 	xorhi	r16,zero,2581
 40281b8:	04028278 	rdprs	r16,zero,2569
 40281bc:	04028524 	muli	r16,zero,2580
 40281c0:	04028a2c 	andhi	r16,zero,2600
 40281c4:	04028900 	call	402890 <__alt_mem_sdram_controller_2+0x402890>
 40281c8:	04028a2c 	andhi	r16,zero,2600
 40281cc:	04028958 	cmpnei	r16,zero,2597
 40281d0:	04028a2c 	andhi	r16,zero,2600
 40281d4:	04028a2c 	andhi	r16,zero,2600
 40281d8:	0402861c 	xori	r16,zero,2584
 40281dc:	42000204 	addi	r8,r8,8
 40281e0:	da802317 	ldw	r10,140(sp)
 40281e4:	5455883a 	add	r10,r10,r17
 40281e8:	da802315 	stw	r10,140(sp)
 40281ec:	003f8b06 	br	402801c <__alt_data_end+0xfffe801c>
 40281f0:	d9002017 	ldw	r4,128(sp)
 40281f4:	a00b883a 	mov	r5,r20
 40281f8:	4022b940 	call	4022b94 <__swsetup_r>
 40281fc:	1003b11e 	bne	r2,zero,40290c4 <___vfiprintf_internal_r+0x11ec>
 4028200:	a080030b 	ldhu	r2,12(r20)
 4028204:	00c00284 	movi	r3,10
 4028208:	1080068c 	andi	r2,r2,26
 402820c:	10ff541e 	bne	r2,r3,4027f60 <__alt_data_end+0xfffe7f60>
 4028210:	a080038f 	ldh	r2,14(r20)
 4028214:	103f5216 	blt	r2,zero,4027f60 <__alt_data_end+0xfffe7f60>
 4028218:	d9c02217 	ldw	r7,136(sp)
 402821c:	d9002017 	ldw	r4,128(sp)
 4028220:	e00d883a 	mov	r6,fp
 4028224:	a00b883a 	mov	r5,r20
 4028228:	40293500 	call	4029350 <__sbprintf>
 402822c:	dfc03617 	ldw	ra,216(sp)
 4028230:	df003517 	ldw	fp,212(sp)
 4028234:	ddc03417 	ldw	r23,208(sp)
 4028238:	dd803317 	ldw	r22,204(sp)
 402823c:	dd403217 	ldw	r21,200(sp)
 4028240:	dd003117 	ldw	r20,196(sp)
 4028244:	dcc03017 	ldw	r19,192(sp)
 4028248:	dc802f17 	ldw	r18,188(sp)
 402824c:	dc402e17 	ldw	r17,184(sp)
 4028250:	dc002d17 	ldw	r16,180(sp)
 4028254:	dec03704 	addi	sp,sp,220
 4028258:	f800283a 	ret
 402825c:	4024b680 	call	4024b68 <__sinit>
 4028260:	003f2f06 	br	4027f20 <__alt_data_end+0xfffe7f20>
 4028264:	0463c83a 	sub	r17,zero,r17
 4028268:	d8802215 	stw	r2,136(sp)
 402826c:	a5000114 	ori	r20,r20,4
 4028270:	80c00007 	ldb	r3,0(r16)
 4028274:	003f7706 	br	4028054 <__alt_data_end+0xfffe8054>
 4028278:	00800c04 	movi	r2,48
 402827c:	da802217 	ldw	r10,136(sp)
 4028280:	d8801d05 	stb	r2,116(sp)
 4028284:	00801e04 	movi	r2,120
 4028288:	d8801d45 	stb	r2,117(sp)
 402828c:	d8001d85 	stb	zero,118(sp)
 4028290:	50c00104 	addi	r3,r10,4
 4028294:	54800017 	ldw	r18,0(r10)
 4028298:	0027883a 	mov	r19,zero
 402829c:	a0800094 	ori	r2,r20,2
 40282a0:	48030b16 	blt	r9,zero,4028ed0 <___vfiprintf_internal_r+0xff8>
 40282a4:	00bfdfc4 	movi	r2,-129
 40282a8:	a096703a 	and	r11,r20,r2
 40282ac:	d8c02215 	stw	r3,136(sp)
 40282b0:	5d000094 	ori	r20,r11,2
 40282b4:	90032b1e 	bne	r18,zero,4028f64 <___vfiprintf_internal_r+0x108c>
 40282b8:	008100f4 	movhi	r2,1027
 40282bc:	1080b704 	addi	r2,r2,732
 40282c0:	d8802615 	stw	r2,152(sp)
 40282c4:	0039883a 	mov	fp,zero
 40282c8:	48017b1e 	bne	r9,zero,40288b8 <___vfiprintf_internal_r+0x9e0>
 40282cc:	0013883a 	mov	r9,zero
 40282d0:	0027883a 	mov	r19,zero
 40282d4:	dd401a04 	addi	r21,sp,104
 40282d8:	4825883a 	mov	r18,r9
 40282dc:	4cc0010e 	bge	r9,r19,40282e4 <___vfiprintf_internal_r+0x40c>
 40282e0:	9825883a 	mov	r18,r19
 40282e4:	e7003fcc 	andi	fp,fp,255
 40282e8:	e700201c 	xori	fp,fp,128
 40282ec:	e73fe004 	addi	fp,fp,-128
 40282f0:	e0000126 	beq	fp,zero,40282f8 <___vfiprintf_internal_r+0x420>
 40282f4:	94800044 	addi	r18,r18,1
 40282f8:	a380008c 	andi	r14,r20,2
 40282fc:	70000126 	beq	r14,zero,4028304 <___vfiprintf_internal_r+0x42c>
 4028300:	94800084 	addi	r18,r18,2
 4028304:	a700210c 	andi	fp,r20,132
 4028308:	e001df1e 	bne	fp,zero,4028a88 <___vfiprintf_internal_r+0xbb0>
 402830c:	8c87c83a 	sub	r3,r17,r18
 4028310:	00c1dd0e 	bge	zero,r3,4028a88 <___vfiprintf_internal_r+0xbb0>
 4028314:	01c00404 	movi	r7,16
 4028318:	d8801c17 	ldw	r2,112(sp)
 402831c:	38c3ad0e 	bge	r7,r3,40291d4 <___vfiprintf_internal_r+0x12fc>
 4028320:	028100f4 	movhi	r10,1027
 4028324:	52811c04 	addi	r10,r10,1136
 4028328:	dc002915 	stw	r16,164(sp)
 402832c:	d9801b17 	ldw	r6,108(sp)
 4028330:	da802415 	stw	r10,144(sp)
 4028334:	03c001c4 	movi	r15,7
 4028338:	da402515 	stw	r9,148(sp)
 402833c:	db802815 	stw	r14,160(sp)
 4028340:	1821883a 	mov	r16,r3
 4028344:	00000506 	br	402835c <___vfiprintf_internal_r+0x484>
 4028348:	31400084 	addi	r5,r6,2
 402834c:	42000204 	addi	r8,r8,8
 4028350:	200d883a 	mov	r6,r4
 4028354:	843ffc04 	addi	r16,r16,-16
 4028358:	3c000d0e 	bge	r7,r16,4028390 <___vfiprintf_internal_r+0x4b8>
 402835c:	10800404 	addi	r2,r2,16
 4028360:	31000044 	addi	r4,r6,1
 4028364:	45800015 	stw	r22,0(r8)
 4028368:	41c00115 	stw	r7,4(r8)
 402836c:	d8801c15 	stw	r2,112(sp)
 4028370:	d9001b15 	stw	r4,108(sp)
 4028374:	793ff40e 	bge	r15,r4,4028348 <__alt_data_end+0xfffe8348>
 4028378:	1001b51e 	bne	r2,zero,4028a50 <___vfiprintf_internal_r+0xb78>
 402837c:	843ffc04 	addi	r16,r16,-16
 4028380:	000d883a 	mov	r6,zero
 4028384:	01400044 	movi	r5,1
 4028388:	d811883a 	mov	r8,sp
 402838c:	3c3ff316 	blt	r7,r16,402835c <__alt_data_end+0xfffe835c>
 4028390:	8007883a 	mov	r3,r16
 4028394:	da402517 	ldw	r9,148(sp)
 4028398:	db802817 	ldw	r14,160(sp)
 402839c:	dc002917 	ldw	r16,164(sp)
 40283a0:	da802417 	ldw	r10,144(sp)
 40283a4:	1885883a 	add	r2,r3,r2
 40283a8:	40c00115 	stw	r3,4(r8)
 40283ac:	42800015 	stw	r10,0(r8)
 40283b0:	d8801c15 	stw	r2,112(sp)
 40283b4:	d9401b15 	stw	r5,108(sp)
 40283b8:	00c001c4 	movi	r3,7
 40283bc:	19426016 	blt	r3,r5,4028d40 <___vfiprintf_internal_r+0xe68>
 40283c0:	d8c01d87 	ldb	r3,118(sp)
 40283c4:	42000204 	addi	r8,r8,8
 40283c8:	29000044 	addi	r4,r5,1
 40283cc:	1801b31e 	bne	r3,zero,4028a9c <___vfiprintf_internal_r+0xbc4>
 40283d0:	7001c026 	beq	r14,zero,4028ad4 <___vfiprintf_internal_r+0xbfc>
 40283d4:	d8c01d04 	addi	r3,sp,116
 40283d8:	10800084 	addi	r2,r2,2
 40283dc:	40c00015 	stw	r3,0(r8)
 40283e0:	00c00084 	movi	r3,2
 40283e4:	40c00115 	stw	r3,4(r8)
 40283e8:	d8801c15 	stw	r2,112(sp)
 40283ec:	d9001b15 	stw	r4,108(sp)
 40283f0:	00c001c4 	movi	r3,7
 40283f4:	1902650e 	bge	r3,r4,4028d8c <___vfiprintf_internal_r+0xeb4>
 40283f8:	10029a1e 	bne	r2,zero,4028e64 <___vfiprintf_internal_r+0xf8c>
 40283fc:	00c02004 	movi	r3,128
 4028400:	01000044 	movi	r4,1
 4028404:	000b883a 	mov	r5,zero
 4028408:	d811883a 	mov	r8,sp
 402840c:	e0c1b31e 	bne	fp,r3,4028adc <___vfiprintf_internal_r+0xc04>
 4028410:	8cb9c83a 	sub	fp,r17,r18
 4028414:	0701b10e 	bge	zero,fp,4028adc <___vfiprintf_internal_r+0xc04>
 4028418:	01c00404 	movi	r7,16
 402841c:	3f03890e 	bge	r7,fp,4029244 <___vfiprintf_internal_r+0x136c>
 4028420:	00c100f4 	movhi	r3,1027
 4028424:	18c11804 	addi	r3,r3,1120
 4028428:	d8c02415 	stw	r3,144(sp)
 402842c:	8007883a 	mov	r3,r16
 4028430:	034001c4 	movi	r13,7
 4028434:	e021883a 	mov	r16,fp
 4028438:	da402515 	stw	r9,148(sp)
 402843c:	1839883a 	mov	fp,r3
 4028440:	00000506 	br	4028458 <___vfiprintf_internal_r+0x580>
 4028444:	29800084 	addi	r6,r5,2
 4028448:	42000204 	addi	r8,r8,8
 402844c:	180b883a 	mov	r5,r3
 4028450:	843ffc04 	addi	r16,r16,-16
 4028454:	3c000d0e 	bge	r7,r16,402848c <___vfiprintf_internal_r+0x5b4>
 4028458:	10800404 	addi	r2,r2,16
 402845c:	28c00044 	addi	r3,r5,1
 4028460:	45c00015 	stw	r23,0(r8)
 4028464:	41c00115 	stw	r7,4(r8)
 4028468:	d8801c15 	stw	r2,112(sp)
 402846c:	d8c01b15 	stw	r3,108(sp)
 4028470:	68fff40e 	bge	r13,r3,4028444 <__alt_data_end+0xfffe8444>
 4028474:	1002241e 	bne	r2,zero,4028d08 <___vfiprintf_internal_r+0xe30>
 4028478:	843ffc04 	addi	r16,r16,-16
 402847c:	01800044 	movi	r6,1
 4028480:	000b883a 	mov	r5,zero
 4028484:	d811883a 	mov	r8,sp
 4028488:	3c3ff316 	blt	r7,r16,4028458 <__alt_data_end+0xfffe8458>
 402848c:	da402517 	ldw	r9,148(sp)
 4028490:	e007883a 	mov	r3,fp
 4028494:	8039883a 	mov	fp,r16
 4028498:	1821883a 	mov	r16,r3
 402849c:	d8c02417 	ldw	r3,144(sp)
 40284a0:	1705883a 	add	r2,r2,fp
 40284a4:	47000115 	stw	fp,4(r8)
 40284a8:	40c00015 	stw	r3,0(r8)
 40284ac:	d8801c15 	stw	r2,112(sp)
 40284b0:	d9801b15 	stw	r6,108(sp)
 40284b4:	00c001c4 	movi	r3,7
 40284b8:	19827616 	blt	r3,r6,4028e94 <___vfiprintf_internal_r+0xfbc>
 40284bc:	4cf9c83a 	sub	fp,r9,r19
 40284c0:	42000204 	addi	r8,r8,8
 40284c4:	31000044 	addi	r4,r6,1
 40284c8:	300b883a 	mov	r5,r6
 40284cc:	07018516 	blt	zero,fp,4028ae4 <___vfiprintf_internal_r+0xc0c>
 40284d0:	9885883a 	add	r2,r19,r2
 40284d4:	45400015 	stw	r21,0(r8)
 40284d8:	44c00115 	stw	r19,4(r8)
 40284dc:	d8801c15 	stw	r2,112(sp)
 40284e0:	d9001b15 	stw	r4,108(sp)
 40284e4:	00c001c4 	movi	r3,7
 40284e8:	1901dd0e 	bge	r3,r4,4028c60 <___vfiprintf_internal_r+0xd88>
 40284ec:	1002401e 	bne	r2,zero,4028df0 <___vfiprintf_internal_r+0xf18>
 40284f0:	d8001b15 	stw	zero,108(sp)
 40284f4:	a2c0010c 	andi	r11,r20,4
 40284f8:	58000226 	beq	r11,zero,4028504 <___vfiprintf_internal_r+0x62c>
 40284fc:	8ca7c83a 	sub	r19,r17,r18
 4028500:	04c2f216 	blt	zero,r19,40290cc <___vfiprintf_internal_r+0x11f4>
 4028504:	8c80010e 	bge	r17,r18,402850c <___vfiprintf_internal_r+0x634>
 4028508:	9023883a 	mov	r17,r18
 402850c:	da802317 	ldw	r10,140(sp)
 4028510:	5455883a 	add	r10,r10,r17
 4028514:	da802315 	stw	r10,140(sp)
 4028518:	d8001b15 	stw	zero,108(sp)
 402851c:	d811883a 	mov	r8,sp
 4028520:	003ea206 	br	4027fac <__alt_data_end+0xfffe7fac>
 4028524:	a5000814 	ori	r20,r20,32
 4028528:	80c00007 	ldb	r3,0(r16)
 402852c:	003ec906 	br	4028054 <__alt_data_end+0xfffe8054>
 4028530:	80c00007 	ldb	r3,0(r16)
 4028534:	1b030926 	beq	r3,r12,402915c <___vfiprintf_internal_r+0x1284>
 4028538:	a5000414 	ori	r20,r20,16
 402853c:	003ec506 	br	4028054 <__alt_data_end+0xfffe8054>
 4028540:	21003fcc 	andi	r4,r4,255
 4028544:	20035e1e 	bne	r4,zero,40292c0 <___vfiprintf_internal_r+0x13e8>
 4028548:	a080080c 	andi	r2,r20,32
 402854c:	1002a526 	beq	r2,zero,4028fe4 <___vfiprintf_internal_r+0x110c>
 4028550:	da802217 	ldw	r10,136(sp)
 4028554:	50800017 	ldw	r2,0(r10)
 4028558:	da802317 	ldw	r10,140(sp)
 402855c:	5007d7fa 	srai	r3,r10,31
 4028560:	da802217 	ldw	r10,136(sp)
 4028564:	10c00115 	stw	r3,4(r2)
 4028568:	52800104 	addi	r10,r10,4
 402856c:	da802215 	stw	r10,136(sp)
 4028570:	da802317 	ldw	r10,140(sp)
 4028574:	12800015 	stw	r10,0(r2)
 4028578:	003e8c06 	br	4027fac <__alt_data_end+0xfffe7fac>
 402857c:	21003fcc 	andi	r4,r4,255
 4028580:	2003511e 	bne	r4,zero,40292c8 <___vfiprintf_internal_r+0x13f0>
 4028584:	a080080c 	andi	r2,r20,32
 4028588:	1000a126 	beq	r2,zero,4028810 <___vfiprintf_internal_r+0x938>
 402858c:	da802217 	ldw	r10,136(sp)
 4028590:	d8001d85 	stb	zero,118(sp)
 4028594:	50800204 	addi	r2,r10,8
 4028598:	54800017 	ldw	r18,0(r10)
 402859c:	54c00117 	ldw	r19,4(r10)
 40285a0:	4802b416 	blt	r9,zero,4029074 <___vfiprintf_internal_r+0x119c>
 40285a4:	013fdfc4 	movi	r4,-129
 40285a8:	94c6b03a 	or	r3,r18,r19
 40285ac:	d8802215 	stw	r2,136(sp)
 40285b0:	a128703a 	and	r20,r20,r4
 40285b4:	1800a226 	beq	r3,zero,4028840 <___vfiprintf_internal_r+0x968>
 40285b8:	0039883a 	mov	fp,zero
 40285bc:	dd401a04 	addi	r21,sp,104
 40285c0:	9006d0fa 	srli	r3,r18,3
 40285c4:	9808977a 	slli	r4,r19,29
 40285c8:	9826d0fa 	srli	r19,r19,3
 40285cc:	948001cc 	andi	r18,r18,7
 40285d0:	90800c04 	addi	r2,r18,48
 40285d4:	ad7fffc4 	addi	r21,r21,-1
 40285d8:	20e4b03a 	or	r18,r4,r3
 40285dc:	a8800005 	stb	r2,0(r21)
 40285e0:	94c6b03a 	or	r3,r18,r19
 40285e4:	183ff61e 	bne	r3,zero,40285c0 <__alt_data_end+0xfffe85c0>
 40285e8:	a0c0004c 	andi	r3,r20,1
 40285ec:	18005926 	beq	r3,zero,4028754 <___vfiprintf_internal_r+0x87c>
 40285f0:	10803fcc 	andi	r2,r2,255
 40285f4:	1080201c 	xori	r2,r2,128
 40285f8:	10bfe004 	addi	r2,r2,-128
 40285fc:	00c00c04 	movi	r3,48
 4028600:	10c05426 	beq	r2,r3,4028754 <___vfiprintf_internal_r+0x87c>
 4028604:	da801e17 	ldw	r10,120(sp)
 4028608:	a8bfffc4 	addi	r2,r21,-1
 402860c:	a8ffffc5 	stb	r3,-1(r21)
 4028610:	50a7c83a 	sub	r19,r10,r2
 4028614:	102b883a 	mov	r21,r2
 4028618:	003f2f06 	br	40282d8 <__alt_data_end+0xfffe82d8>
 402861c:	21003fcc 	andi	r4,r4,255
 4028620:	2003421e 	bne	r4,zero,402932c <___vfiprintf_internal_r+0x1454>
 4028624:	008100f4 	movhi	r2,1027
 4028628:	1080b704 	addi	r2,r2,732
 402862c:	d8802615 	stw	r2,152(sp)
 4028630:	a080080c 	andi	r2,r20,32
 4028634:	1000aa26 	beq	r2,zero,40288e0 <___vfiprintf_internal_r+0xa08>
 4028638:	da802217 	ldw	r10,136(sp)
 402863c:	54800017 	ldw	r18,0(r10)
 4028640:	54c00117 	ldw	r19,4(r10)
 4028644:	52800204 	addi	r10,r10,8
 4028648:	da802215 	stw	r10,136(sp)
 402864c:	a080004c 	andi	r2,r20,1
 4028650:	1001d226 	beq	r2,zero,4028d9c <___vfiprintf_internal_r+0xec4>
 4028654:	94c4b03a 	or	r2,r18,r19
 4028658:	1002351e 	bne	r2,zero,4028f30 <___vfiprintf_internal_r+0x1058>
 402865c:	d8001d85 	stb	zero,118(sp)
 4028660:	48022216 	blt	r9,zero,4028eec <___vfiprintf_internal_r+0x1014>
 4028664:	00bfdfc4 	movi	r2,-129
 4028668:	a0a8703a 	and	r20,r20,r2
 402866c:	003f1506 	br	40282c4 <__alt_data_end+0xfffe82c4>
 4028670:	da802217 	ldw	r10,136(sp)
 4028674:	04800044 	movi	r18,1
 4028678:	d8001d85 	stb	zero,118(sp)
 402867c:	50800017 	ldw	r2,0(r10)
 4028680:	52800104 	addi	r10,r10,4
 4028684:	da802215 	stw	r10,136(sp)
 4028688:	d8801005 	stb	r2,64(sp)
 402868c:	9027883a 	mov	r19,r18
 4028690:	dd401004 	addi	r21,sp,64
 4028694:	0013883a 	mov	r9,zero
 4028698:	003f1706 	br	40282f8 <__alt_data_end+0xfffe82f8>
 402869c:	21003fcc 	andi	r4,r4,255
 40286a0:	2003201e 	bne	r4,zero,4029324 <___vfiprintf_internal_r+0x144c>
 40286a4:	a080080c 	andi	r2,r20,32
 40286a8:	10004b26 	beq	r2,zero,40287d8 <___vfiprintf_internal_r+0x900>
 40286ac:	da802217 	ldw	r10,136(sp)
 40286b0:	50800117 	ldw	r2,4(r10)
 40286b4:	54800017 	ldw	r18,0(r10)
 40286b8:	52800204 	addi	r10,r10,8
 40286bc:	da802215 	stw	r10,136(sp)
 40286c0:	1027883a 	mov	r19,r2
 40286c4:	10022c16 	blt	r2,zero,4028f78 <___vfiprintf_internal_r+0x10a0>
 40286c8:	df001d83 	ldbu	fp,118(sp)
 40286cc:	48007216 	blt	r9,zero,4028898 <___vfiprintf_internal_r+0x9c0>
 40286d0:	00ffdfc4 	movi	r3,-129
 40286d4:	94c4b03a 	or	r2,r18,r19
 40286d8:	a0e8703a 	and	r20,r20,r3
 40286dc:	1000cc26 	beq	r2,zero,4028a10 <___vfiprintf_internal_r+0xb38>
 40286e0:	98021026 	beq	r19,zero,4028f24 <___vfiprintf_internal_r+0x104c>
 40286e4:	dc402415 	stw	r17,144(sp)
 40286e8:	dc002515 	stw	r16,148(sp)
 40286ec:	9823883a 	mov	r17,r19
 40286f0:	9021883a 	mov	r16,r18
 40286f4:	dd401a04 	addi	r21,sp,104
 40286f8:	4825883a 	mov	r18,r9
 40286fc:	4027883a 	mov	r19,r8
 4028700:	8009883a 	mov	r4,r16
 4028704:	880b883a 	mov	r5,r17
 4028708:	01800284 	movi	r6,10
 402870c:	000f883a 	mov	r7,zero
 4028710:	402a2b80 	call	402a2b8 <__umoddi3>
 4028714:	10800c04 	addi	r2,r2,48
 4028718:	ad7fffc4 	addi	r21,r21,-1
 402871c:	8009883a 	mov	r4,r16
 4028720:	880b883a 	mov	r5,r17
 4028724:	a8800005 	stb	r2,0(r21)
 4028728:	01800284 	movi	r6,10
 402872c:	000f883a 	mov	r7,zero
 4028730:	4029d400 	call	4029d40 <__udivdi3>
 4028734:	1021883a 	mov	r16,r2
 4028738:	10c4b03a 	or	r2,r2,r3
 402873c:	1823883a 	mov	r17,r3
 4028740:	103fef1e 	bne	r2,zero,4028700 <__alt_data_end+0xfffe8700>
 4028744:	dc402417 	ldw	r17,144(sp)
 4028748:	dc002517 	ldw	r16,148(sp)
 402874c:	9013883a 	mov	r9,r18
 4028750:	9811883a 	mov	r8,r19
 4028754:	da801e17 	ldw	r10,120(sp)
 4028758:	5567c83a 	sub	r19,r10,r21
 402875c:	003ede06 	br	40282d8 <__alt_data_end+0xfffe82d8>
 4028760:	38803fcc 	andi	r2,r7,255
 4028764:	1080201c 	xori	r2,r2,128
 4028768:	10bfe004 	addi	r2,r2,-128
 402876c:	1002371e 	bne	r2,zero,402904c <___vfiprintf_internal_r+0x1174>
 4028770:	01000044 	movi	r4,1
 4028774:	01c00804 	movi	r7,32
 4028778:	80c00007 	ldb	r3,0(r16)
 402877c:	003e3506 	br	4028054 <__alt_data_end+0xfffe8054>
 4028780:	a5000054 	ori	r20,r20,1
 4028784:	80c00007 	ldb	r3,0(r16)
 4028788:	003e3206 	br	4028054 <__alt_data_end+0xfffe8054>
 402878c:	a5002014 	ori	r20,r20,128
 4028790:	80c00007 	ldb	r3,0(r16)
 4028794:	003e2f06 	br	4028054 <__alt_data_end+0xfffe8054>
 4028798:	8015883a 	mov	r10,r16
 402879c:	0023883a 	mov	r17,zero
 40287a0:	18bff404 	addi	r2,r3,-48
 40287a4:	50c00007 	ldb	r3,0(r10)
 40287a8:	8c4002a4 	muli	r17,r17,10
 40287ac:	84000044 	addi	r16,r16,1
 40287b0:	8015883a 	mov	r10,r16
 40287b4:	1463883a 	add	r17,r2,r17
 40287b8:	18bff404 	addi	r2,r3,-48
 40287bc:	30bff92e 	bgeu	r6,r2,40287a4 <__alt_data_end+0xfffe87a4>
 40287c0:	003e2506 	br	4028058 <__alt_data_end+0xfffe8058>
 40287c4:	21003fcc 	andi	r4,r4,255
 40287c8:	2002d41e 	bne	r4,zero,402931c <___vfiprintf_internal_r+0x1444>
 40287cc:	a5000414 	ori	r20,r20,16
 40287d0:	a080080c 	andi	r2,r20,32
 40287d4:	103fb51e 	bne	r2,zero,40286ac <__alt_data_end+0xfffe86ac>
 40287d8:	a080040c 	andi	r2,r20,16
 40287dc:	1001f826 	beq	r2,zero,4028fc0 <___vfiprintf_internal_r+0x10e8>
 40287e0:	da802217 	ldw	r10,136(sp)
 40287e4:	54800017 	ldw	r18,0(r10)
 40287e8:	52800104 	addi	r10,r10,4
 40287ec:	da802215 	stw	r10,136(sp)
 40287f0:	9027d7fa 	srai	r19,r18,31
 40287f4:	9805883a 	mov	r2,r19
 40287f8:	003fb206 	br	40286c4 <__alt_data_end+0xfffe86c4>
 40287fc:	21003fcc 	andi	r4,r4,255
 4028800:	2002c41e 	bne	r4,zero,4029314 <___vfiprintf_internal_r+0x143c>
 4028804:	a5000414 	ori	r20,r20,16
 4028808:	a080080c 	andi	r2,r20,32
 402880c:	103f5f1e 	bne	r2,zero,402858c <__alt_data_end+0xfffe858c>
 4028810:	a080040c 	andi	r2,r20,16
 4028814:	10020f26 	beq	r2,zero,4029054 <___vfiprintf_internal_r+0x117c>
 4028818:	da802217 	ldw	r10,136(sp)
 402881c:	d8001d85 	stb	zero,118(sp)
 4028820:	0027883a 	mov	r19,zero
 4028824:	50800104 	addi	r2,r10,4
 4028828:	54800017 	ldw	r18,0(r10)
 402882c:	48021116 	blt	r9,zero,4029074 <___vfiprintf_internal_r+0x119c>
 4028830:	00ffdfc4 	movi	r3,-129
 4028834:	d8802215 	stw	r2,136(sp)
 4028838:	a0e8703a 	and	r20,r20,r3
 402883c:	903f5e1e 	bne	r18,zero,40285b8 <__alt_data_end+0xfffe85b8>
 4028840:	0039883a 	mov	fp,zero
 4028844:	4802a626 	beq	r9,zero,40292e0 <___vfiprintf_internal_r+0x1408>
 4028848:	0025883a 	mov	r18,zero
 402884c:	0027883a 	mov	r19,zero
 4028850:	003f5a06 	br	40285bc <__alt_data_end+0xfffe85bc>
 4028854:	21003fcc 	andi	r4,r4,255
 4028858:	20029f1e 	bne	r4,zero,40292d8 <___vfiprintf_internal_r+0x1400>
 402885c:	a5000414 	ori	r20,r20,16
 4028860:	a080080c 	andi	r2,r20,32
 4028864:	10005e1e 	bne	r2,zero,40289e0 <___vfiprintf_internal_r+0xb08>
 4028868:	a080040c 	andi	r2,r20,16
 402886c:	1001a21e 	bne	r2,zero,4028ef8 <___vfiprintf_internal_r+0x1020>
 4028870:	a080100c 	andi	r2,r20,64
 4028874:	d8001d85 	stb	zero,118(sp)
 4028878:	da802217 	ldw	r10,136(sp)
 402887c:	1002231e 	bne	r2,zero,402910c <___vfiprintf_internal_r+0x1234>
 4028880:	50800104 	addi	r2,r10,4
 4028884:	54800017 	ldw	r18,0(r10)
 4028888:	0027883a 	mov	r19,zero
 402888c:	4801a00e 	bge	r9,zero,4028f10 <___vfiprintf_internal_r+0x1038>
 4028890:	d8802215 	stw	r2,136(sp)
 4028894:	0039883a 	mov	fp,zero
 4028898:	94c4b03a 	or	r2,r18,r19
 402889c:	103f901e 	bne	r2,zero,40286e0 <__alt_data_end+0xfffe86e0>
 40288a0:	00800044 	movi	r2,1
 40288a4:	10803fcc 	andi	r2,r2,255
 40288a8:	00c00044 	movi	r3,1
 40288ac:	10c05926 	beq	r2,r3,4028a14 <___vfiprintf_internal_r+0xb3c>
 40288b0:	00c00084 	movi	r3,2
 40288b4:	10ffe41e 	bne	r2,r3,4028848 <__alt_data_end+0xfffe8848>
 40288b8:	0025883a 	mov	r18,zero
 40288bc:	0027883a 	mov	r19,zero
 40288c0:	00013d06 	br	4028db8 <___vfiprintf_internal_r+0xee0>
 40288c4:	21003fcc 	andi	r4,r4,255
 40288c8:	2002811e 	bne	r4,zero,40292d0 <___vfiprintf_internal_r+0x13f8>
 40288cc:	008100f4 	movhi	r2,1027
 40288d0:	1080b204 	addi	r2,r2,712
 40288d4:	d8802615 	stw	r2,152(sp)
 40288d8:	a080080c 	andi	r2,r20,32
 40288dc:	103f561e 	bne	r2,zero,4028638 <__alt_data_end+0xfffe8638>
 40288e0:	a080040c 	andi	r2,r20,16
 40288e4:	1001d126 	beq	r2,zero,402902c <___vfiprintf_internal_r+0x1154>
 40288e8:	da802217 	ldw	r10,136(sp)
 40288ec:	0027883a 	mov	r19,zero
 40288f0:	54800017 	ldw	r18,0(r10)
 40288f4:	52800104 	addi	r10,r10,4
 40288f8:	da802215 	stw	r10,136(sp)
 40288fc:	003f5306 	br	402864c <__alt_data_end+0xfffe864c>
 4028900:	da802217 	ldw	r10,136(sp)
 4028904:	d8001d85 	stb	zero,118(sp)
 4028908:	55400017 	ldw	r21,0(r10)
 402890c:	50c00104 	addi	r3,r10,4
 4028910:	a8024226 	beq	r21,zero,402921c <___vfiprintf_internal_r+0x1344>
 4028914:	48021816 	blt	r9,zero,4029178 <___vfiprintf_internal_r+0x12a0>
 4028918:	480d883a 	mov	r6,r9
 402891c:	000b883a 	mov	r5,zero
 4028920:	a809883a 	mov	r4,r21
 4028924:	d8c02a15 	stw	r3,168(sp)
 4028928:	da002b15 	stw	r8,172(sp)
 402892c:	da402c15 	stw	r9,176(sp)
 4028930:	40260d40 	call	40260d4 <memchr>
 4028934:	d8c02a17 	ldw	r3,168(sp)
 4028938:	da002b17 	ldw	r8,172(sp)
 402893c:	da402c17 	ldw	r9,176(sp)
 4028940:	10024826 	beq	r2,zero,4029264 <___vfiprintf_internal_r+0x138c>
 4028944:	1567c83a 	sub	r19,r2,r21
 4028948:	df001d83 	ldbu	fp,118(sp)
 402894c:	d8c02215 	stw	r3,136(sp)
 4028950:	0013883a 	mov	r9,zero
 4028954:	003e6006 	br	40282d8 <__alt_data_end+0xfffe82d8>
 4028958:	21003fcc 	andi	r4,r4,255
 402895c:	203fc026 	beq	r4,zero,4028860 <__alt_data_end+0xfffe8860>
 4028960:	d9c01d85 	stb	r7,118(sp)
 4028964:	003fbe06 	br	4028860 <__alt_data_end+0xfffe8860>
 4028968:	da802217 	ldw	r10,136(sp)
 402896c:	54400017 	ldw	r17,0(r10)
 4028970:	50800104 	addi	r2,r10,4
 4028974:	883e3b16 	blt	r17,zero,4028264 <__alt_data_end+0xfffe8264>
 4028978:	d8802215 	stw	r2,136(sp)
 402897c:	80c00007 	ldb	r3,0(r16)
 4028980:	003db406 	br	4028054 <__alt_data_end+0xfffe8054>
 4028984:	01000044 	movi	r4,1
 4028988:	01c00ac4 	movi	r7,43
 402898c:	80c00007 	ldb	r3,0(r16)
 4028990:	003db006 	br	4028054 <__alt_data_end+0xfffe8054>
 4028994:	80c00007 	ldb	r3,0(r16)
 4028998:	82800044 	addi	r10,r16,1
 402899c:	1b423c26 	beq	r3,r13,4029290 <___vfiprintf_internal_r+0x13b8>
 40289a0:	18bff404 	addi	r2,r3,-48
 40289a4:	0013883a 	mov	r9,zero
 40289a8:	30822b36 	bltu	r6,r2,4029258 <___vfiprintf_internal_r+0x1380>
 40289ac:	50c00007 	ldb	r3,0(r10)
 40289b0:	4a4002a4 	muli	r9,r9,10
 40289b4:	54000044 	addi	r16,r10,1
 40289b8:	8015883a 	mov	r10,r16
 40289bc:	4893883a 	add	r9,r9,r2
 40289c0:	18bff404 	addi	r2,r3,-48
 40289c4:	30bff92e 	bgeu	r6,r2,40289ac <__alt_data_end+0xfffe89ac>
 40289c8:	483da30e 	bge	r9,zero,4028058 <__alt_data_end+0xfffe8058>
 40289cc:	027fffc4 	movi	r9,-1
 40289d0:	003da106 	br	4028058 <__alt_data_end+0xfffe8058>
 40289d4:	a5001014 	ori	r20,r20,64
 40289d8:	80c00007 	ldb	r3,0(r16)
 40289dc:	003d9d06 	br	4028054 <__alt_data_end+0xfffe8054>
 40289e0:	da802217 	ldw	r10,136(sp)
 40289e4:	d8001d85 	stb	zero,118(sp)
 40289e8:	50c00204 	addi	r3,r10,8
 40289ec:	54800017 	ldw	r18,0(r10)
 40289f0:	54c00117 	ldw	r19,4(r10)
 40289f4:	4801ca16 	blt	r9,zero,4029120 <___vfiprintf_internal_r+0x1248>
 40289f8:	013fdfc4 	movi	r4,-129
 40289fc:	94c4b03a 	or	r2,r18,r19
 4028a00:	d8c02215 	stw	r3,136(sp)
 4028a04:	a128703a 	and	r20,r20,r4
 4028a08:	0039883a 	mov	fp,zero
 4028a0c:	103f341e 	bne	r2,zero,40286e0 <__alt_data_end+0xfffe86e0>
 4028a10:	483e2e26 	beq	r9,zero,40282cc <__alt_data_end+0xfffe82cc>
 4028a14:	0025883a 	mov	r18,zero
 4028a18:	94800c04 	addi	r18,r18,48
 4028a1c:	dc8019c5 	stb	r18,103(sp)
 4028a20:	dcc02717 	ldw	r19,156(sp)
 4028a24:	dd4019c4 	addi	r21,sp,103
 4028a28:	003e2b06 	br	40282d8 <__alt_data_end+0xfffe82d8>
 4028a2c:	21003fcc 	andi	r4,r4,255
 4028a30:	2002361e 	bne	r4,zero,402930c <___vfiprintf_internal_r+0x1434>
 4028a34:	1801c126 	beq	r3,zero,402913c <___vfiprintf_internal_r+0x1264>
 4028a38:	04800044 	movi	r18,1
 4028a3c:	d8c01005 	stb	r3,64(sp)
 4028a40:	d8001d85 	stb	zero,118(sp)
 4028a44:	9027883a 	mov	r19,r18
 4028a48:	dd401004 	addi	r21,sp,64
 4028a4c:	003f1106 	br	4028694 <__alt_data_end+0xfffe8694>
 4028a50:	d9402117 	ldw	r5,132(sp)
 4028a54:	d9002017 	ldw	r4,128(sp)
 4028a58:	d9801a04 	addi	r6,sp,104
 4028a5c:	d9c02b15 	stw	r7,172(sp)
 4028a60:	dbc02a15 	stw	r15,168(sp)
 4028a64:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028a68:	d9c02b17 	ldw	r7,172(sp)
 4028a6c:	dbc02a17 	ldw	r15,168(sp)
 4028a70:	10006d1e 	bne	r2,zero,4028c28 <___vfiprintf_internal_r+0xd50>
 4028a74:	d9801b17 	ldw	r6,108(sp)
 4028a78:	d8801c17 	ldw	r2,112(sp)
 4028a7c:	d811883a 	mov	r8,sp
 4028a80:	31400044 	addi	r5,r6,1
 4028a84:	003e3306 	br	4028354 <__alt_data_end+0xfffe8354>
 4028a88:	d9401b17 	ldw	r5,108(sp)
 4028a8c:	d8801c17 	ldw	r2,112(sp)
 4028a90:	29000044 	addi	r4,r5,1
 4028a94:	d8c01d87 	ldb	r3,118(sp)
 4028a98:	183e4d26 	beq	r3,zero,40283d0 <__alt_data_end+0xfffe83d0>
 4028a9c:	00c00044 	movi	r3,1
 4028aa0:	d9401d84 	addi	r5,sp,118
 4028aa4:	10c5883a 	add	r2,r2,r3
 4028aa8:	41400015 	stw	r5,0(r8)
 4028aac:	40c00115 	stw	r3,4(r8)
 4028ab0:	d8801c15 	stw	r2,112(sp)
 4028ab4:	d9001b15 	stw	r4,108(sp)
 4028ab8:	014001c4 	movi	r5,7
 4028abc:	2900a90e 	bge	r5,r4,4028d64 <___vfiprintf_internal_r+0xe8c>
 4028ac0:	1000da1e 	bne	r2,zero,4028e2c <___vfiprintf_internal_r+0xf54>
 4028ac4:	7000ab1e 	bne	r14,zero,4028d74 <___vfiprintf_internal_r+0xe9c>
 4028ac8:	000b883a 	mov	r5,zero
 4028acc:	1809883a 	mov	r4,r3
 4028ad0:	d811883a 	mov	r8,sp
 4028ad4:	00c02004 	movi	r3,128
 4028ad8:	e0fe4d26 	beq	fp,r3,4028410 <__alt_data_end+0xfffe8410>
 4028adc:	4cf9c83a 	sub	fp,r9,r19
 4028ae0:	073e7b0e 	bge	zero,fp,40284d0 <__alt_data_end+0xfffe84d0>
 4028ae4:	01c00404 	movi	r7,16
 4028ae8:	3f01900e 	bge	r7,fp,402912c <___vfiprintf_internal_r+0x1254>
 4028aec:	00c100f4 	movhi	r3,1027
 4028af0:	18c11804 	addi	r3,r3,1120
 4028af4:	d8c02415 	stw	r3,144(sp)
 4028af8:	034001c4 	movi	r13,7
 4028afc:	00000506 	br	4028b14 <___vfiprintf_internal_r+0xc3c>
 4028b00:	29000084 	addi	r4,r5,2
 4028b04:	42000204 	addi	r8,r8,8
 4028b08:	180b883a 	mov	r5,r3
 4028b0c:	e73ffc04 	addi	fp,fp,-16
 4028b10:	3f000d0e 	bge	r7,fp,4028b48 <___vfiprintf_internal_r+0xc70>
 4028b14:	10800404 	addi	r2,r2,16
 4028b18:	28c00044 	addi	r3,r5,1
 4028b1c:	45c00015 	stw	r23,0(r8)
 4028b20:	41c00115 	stw	r7,4(r8)
 4028b24:	d8801c15 	stw	r2,112(sp)
 4028b28:	d8c01b15 	stw	r3,108(sp)
 4028b2c:	68fff40e 	bge	r13,r3,4028b00 <__alt_data_end+0xfffe8b00>
 4028b30:	1000101e 	bne	r2,zero,4028b74 <___vfiprintf_internal_r+0xc9c>
 4028b34:	e73ffc04 	addi	fp,fp,-16
 4028b38:	01000044 	movi	r4,1
 4028b3c:	000b883a 	mov	r5,zero
 4028b40:	d811883a 	mov	r8,sp
 4028b44:	3f3ff316 	blt	r7,fp,4028b14 <__alt_data_end+0xfffe8b14>
 4028b48:	da802417 	ldw	r10,144(sp)
 4028b4c:	1705883a 	add	r2,r2,fp
 4028b50:	47000115 	stw	fp,4(r8)
 4028b54:	42800015 	stw	r10,0(r8)
 4028b58:	d8801c15 	stw	r2,112(sp)
 4028b5c:	d9001b15 	stw	r4,108(sp)
 4028b60:	00c001c4 	movi	r3,7
 4028b64:	19003616 	blt	r3,r4,4028c40 <___vfiprintf_internal_r+0xd68>
 4028b68:	42000204 	addi	r8,r8,8
 4028b6c:	21000044 	addi	r4,r4,1
 4028b70:	003e5706 	br	40284d0 <__alt_data_end+0xfffe84d0>
 4028b74:	d9402117 	ldw	r5,132(sp)
 4028b78:	d9002017 	ldw	r4,128(sp)
 4028b7c:	d9801a04 	addi	r6,sp,104
 4028b80:	d9c02b15 	stw	r7,172(sp)
 4028b84:	db402a15 	stw	r13,168(sp)
 4028b88:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028b8c:	d9c02b17 	ldw	r7,172(sp)
 4028b90:	db402a17 	ldw	r13,168(sp)
 4028b94:	1000241e 	bne	r2,zero,4028c28 <___vfiprintf_internal_r+0xd50>
 4028b98:	d9401b17 	ldw	r5,108(sp)
 4028b9c:	d8801c17 	ldw	r2,112(sp)
 4028ba0:	d811883a 	mov	r8,sp
 4028ba4:	29000044 	addi	r4,r5,1
 4028ba8:	003fd806 	br	4028b0c <__alt_data_end+0xfffe8b0c>
 4028bac:	d9401b17 	ldw	r5,108(sp)
 4028bb0:	00c100f4 	movhi	r3,1027
 4028bb4:	18c11c04 	addi	r3,r3,1136
 4028bb8:	d8c02415 	stw	r3,144(sp)
 4028bbc:	29400044 	addi	r5,r5,1
 4028bc0:	d8c02417 	ldw	r3,144(sp)
 4028bc4:	14c5883a 	add	r2,r2,r19
 4028bc8:	44c00115 	stw	r19,4(r8)
 4028bcc:	40c00015 	stw	r3,0(r8)
 4028bd0:	d8801c15 	stw	r2,112(sp)
 4028bd4:	d9401b15 	stw	r5,108(sp)
 4028bd8:	00c001c4 	movi	r3,7
 4028bdc:	1940070e 	bge	r3,r5,4028bfc <___vfiprintf_internal_r+0xd24>
 4028be0:	103e4826 	beq	r2,zero,4028504 <__alt_data_end+0xfffe8504>
 4028be4:	d9402117 	ldw	r5,132(sp)
 4028be8:	d9002017 	ldw	r4,128(sp)
 4028bec:	d9801a04 	addi	r6,sp,104
 4028bf0:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028bf4:	10000c1e 	bne	r2,zero,4028c28 <___vfiprintf_internal_r+0xd50>
 4028bf8:	d8801c17 	ldw	r2,112(sp)
 4028bfc:	8c80010e 	bge	r17,r18,4028c04 <___vfiprintf_internal_r+0xd2c>
 4028c00:	9023883a 	mov	r17,r18
 4028c04:	da802317 	ldw	r10,140(sp)
 4028c08:	5455883a 	add	r10,r10,r17
 4028c0c:	da802315 	stw	r10,140(sp)
 4028c10:	103e4126 	beq	r2,zero,4028518 <__alt_data_end+0xfffe8518>
 4028c14:	d9402117 	ldw	r5,132(sp)
 4028c18:	d9002017 	ldw	r4,128(sp)
 4028c1c:	d9801a04 	addi	r6,sp,104
 4028c20:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028c24:	103e3c26 	beq	r2,zero,4028518 <__alt_data_end+0xfffe8518>
 4028c28:	dd002117 	ldw	r20,132(sp)
 4028c2c:	a080030b 	ldhu	r2,12(r20)
 4028c30:	1080100c 	andi	r2,r2,64
 4028c34:	1001231e 	bne	r2,zero,40290c4 <___vfiprintf_internal_r+0x11ec>
 4028c38:	d8802317 	ldw	r2,140(sp)
 4028c3c:	003d7b06 	br	402822c <__alt_data_end+0xfffe822c>
 4028c40:	1000991e 	bne	r2,zero,4028ea8 <___vfiprintf_internal_r+0xfd0>
 4028c44:	00c00044 	movi	r3,1
 4028c48:	9805883a 	mov	r2,r19
 4028c4c:	dd400015 	stw	r21,0(sp)
 4028c50:	dcc00115 	stw	r19,4(sp)
 4028c54:	dcc01c15 	stw	r19,112(sp)
 4028c58:	d8c01b15 	stw	r3,108(sp)
 4028c5c:	d811883a 	mov	r8,sp
 4028c60:	42000204 	addi	r8,r8,8
 4028c64:	a2c0010c 	andi	r11,r20,4
 4028c68:	583fe426 	beq	r11,zero,4028bfc <__alt_data_end+0xfffe8bfc>
 4028c6c:	8ca7c83a 	sub	r19,r17,r18
 4028c70:	04ffe20e 	bge	zero,r19,4028bfc <__alt_data_end+0xfffe8bfc>
 4028c74:	01c00404 	movi	r7,16
 4028c78:	3cffcc0e 	bge	r7,r19,4028bac <__alt_data_end+0xfffe8bac>
 4028c7c:	028100f4 	movhi	r10,1027
 4028c80:	52811c04 	addi	r10,r10,1136
 4028c84:	d9001b17 	ldw	r4,108(sp)
 4028c88:	da802415 	stw	r10,144(sp)
 4028c8c:	382b883a 	mov	r21,r7
 4028c90:	050001c4 	movi	r20,7
 4028c94:	df002017 	ldw	fp,128(sp)
 4028c98:	00000506 	br	4028cb0 <___vfiprintf_internal_r+0xdd8>
 4028c9c:	21400084 	addi	r5,r4,2
 4028ca0:	42000204 	addi	r8,r8,8
 4028ca4:	1809883a 	mov	r4,r3
 4028ca8:	9cfffc04 	addi	r19,r19,-16
 4028cac:	acffc40e 	bge	r21,r19,4028bc0 <__alt_data_end+0xfffe8bc0>
 4028cb0:	10800404 	addi	r2,r2,16
 4028cb4:	20c00044 	addi	r3,r4,1
 4028cb8:	45800015 	stw	r22,0(r8)
 4028cbc:	45400115 	stw	r21,4(r8)
 4028cc0:	d8801c15 	stw	r2,112(sp)
 4028cc4:	d8c01b15 	stw	r3,108(sp)
 4028cc8:	a0fff40e 	bge	r20,r3,4028c9c <__alt_data_end+0xfffe8c9c>
 4028ccc:	1000041e 	bne	r2,zero,4028ce0 <___vfiprintf_internal_r+0xe08>
 4028cd0:	01400044 	movi	r5,1
 4028cd4:	0009883a 	mov	r4,zero
 4028cd8:	d811883a 	mov	r8,sp
 4028cdc:	003ff206 	br	4028ca8 <__alt_data_end+0xfffe8ca8>
 4028ce0:	d9402117 	ldw	r5,132(sp)
 4028ce4:	d9801a04 	addi	r6,sp,104
 4028ce8:	e009883a 	mov	r4,fp
 4028cec:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028cf0:	103fcd1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028cf4:	d9001b17 	ldw	r4,108(sp)
 4028cf8:	d8801c17 	ldw	r2,112(sp)
 4028cfc:	d811883a 	mov	r8,sp
 4028d00:	21400044 	addi	r5,r4,1
 4028d04:	003fe806 	br	4028ca8 <__alt_data_end+0xfffe8ca8>
 4028d08:	d9402117 	ldw	r5,132(sp)
 4028d0c:	d9002017 	ldw	r4,128(sp)
 4028d10:	d9801a04 	addi	r6,sp,104
 4028d14:	d9c02b15 	stw	r7,172(sp)
 4028d18:	db402a15 	stw	r13,168(sp)
 4028d1c:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028d20:	d9c02b17 	ldw	r7,172(sp)
 4028d24:	db402a17 	ldw	r13,168(sp)
 4028d28:	103fbf1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028d2c:	d9401b17 	ldw	r5,108(sp)
 4028d30:	d8801c17 	ldw	r2,112(sp)
 4028d34:	d811883a 	mov	r8,sp
 4028d38:	29800044 	addi	r6,r5,1
 4028d3c:	003dc406 	br	4028450 <__alt_data_end+0xfffe8450>
 4028d40:	1000d21e 	bne	r2,zero,402908c <___vfiprintf_internal_r+0x11b4>
 4028d44:	d8c01d87 	ldb	r3,118(sp)
 4028d48:	18009526 	beq	r3,zero,4028fa0 <___vfiprintf_internal_r+0x10c8>
 4028d4c:	00800044 	movi	r2,1
 4028d50:	d8c01d84 	addi	r3,sp,118
 4028d54:	1009883a 	mov	r4,r2
 4028d58:	d8c00015 	stw	r3,0(sp)
 4028d5c:	d8800115 	stw	r2,4(sp)
 4028d60:	d811883a 	mov	r8,sp
 4028d64:	200b883a 	mov	r5,r4
 4028d68:	42000204 	addi	r8,r8,8
 4028d6c:	21000044 	addi	r4,r4,1
 4028d70:	003d9706 	br	40283d0 <__alt_data_end+0xfffe83d0>
 4028d74:	d9001d04 	addi	r4,sp,116
 4028d78:	00800084 	movi	r2,2
 4028d7c:	d9000015 	stw	r4,0(sp)
 4028d80:	d8800115 	stw	r2,4(sp)
 4028d84:	1809883a 	mov	r4,r3
 4028d88:	d811883a 	mov	r8,sp
 4028d8c:	200b883a 	mov	r5,r4
 4028d90:	42000204 	addi	r8,r8,8
 4028d94:	21000044 	addi	r4,r4,1
 4028d98:	003f4e06 	br	4028ad4 <__alt_data_end+0xfffe8ad4>
 4028d9c:	d8001d85 	stb	zero,118(sp)
 4028da0:	48005016 	blt	r9,zero,4028ee4 <___vfiprintf_internal_r+0x100c>
 4028da4:	00ffdfc4 	movi	r3,-129
 4028da8:	94c4b03a 	or	r2,r18,r19
 4028dac:	a0e8703a 	and	r20,r20,r3
 4028db0:	103d4426 	beq	r2,zero,40282c4 <__alt_data_end+0xfffe82c4>
 4028db4:	0039883a 	mov	fp,zero
 4028db8:	d9002617 	ldw	r4,152(sp)
 4028dbc:	dd401a04 	addi	r21,sp,104
 4028dc0:	908003cc 	andi	r2,r18,15
 4028dc4:	9806973a 	slli	r3,r19,28
 4028dc8:	2085883a 	add	r2,r4,r2
 4028dcc:	9024d13a 	srli	r18,r18,4
 4028dd0:	10800003 	ldbu	r2,0(r2)
 4028dd4:	9826d13a 	srli	r19,r19,4
 4028dd8:	ad7fffc4 	addi	r21,r21,-1
 4028ddc:	1ca4b03a 	or	r18,r3,r18
 4028de0:	a8800005 	stb	r2,0(r21)
 4028de4:	94c4b03a 	or	r2,r18,r19
 4028de8:	103ff51e 	bne	r2,zero,4028dc0 <__alt_data_end+0xfffe8dc0>
 4028dec:	003e5906 	br	4028754 <__alt_data_end+0xfffe8754>
 4028df0:	d9402117 	ldw	r5,132(sp)
 4028df4:	d9002017 	ldw	r4,128(sp)
 4028df8:	d9801a04 	addi	r6,sp,104
 4028dfc:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028e00:	103f891e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028e04:	d8801c17 	ldw	r2,112(sp)
 4028e08:	d811883a 	mov	r8,sp
 4028e0c:	003f9506 	br	4028c64 <__alt_data_end+0xfffe8c64>
 4028e10:	d9402117 	ldw	r5,132(sp)
 4028e14:	d9002017 	ldw	r4,128(sp)
 4028e18:	d9801a04 	addi	r6,sp,104
 4028e1c:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028e20:	103f811e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028e24:	d811883a 	mov	r8,sp
 4028e28:	003ced06 	br	40281e0 <__alt_data_end+0xfffe81e0>
 4028e2c:	d9402117 	ldw	r5,132(sp)
 4028e30:	d9002017 	ldw	r4,128(sp)
 4028e34:	d9801a04 	addi	r6,sp,104
 4028e38:	da402c15 	stw	r9,176(sp)
 4028e3c:	db802a15 	stw	r14,168(sp)
 4028e40:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028e44:	da402c17 	ldw	r9,176(sp)
 4028e48:	db802a17 	ldw	r14,168(sp)
 4028e4c:	103f761e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028e50:	d9401b17 	ldw	r5,108(sp)
 4028e54:	d8801c17 	ldw	r2,112(sp)
 4028e58:	d811883a 	mov	r8,sp
 4028e5c:	29000044 	addi	r4,r5,1
 4028e60:	003d5b06 	br	40283d0 <__alt_data_end+0xfffe83d0>
 4028e64:	d9402117 	ldw	r5,132(sp)
 4028e68:	d9002017 	ldw	r4,128(sp)
 4028e6c:	d9801a04 	addi	r6,sp,104
 4028e70:	da402c15 	stw	r9,176(sp)
 4028e74:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028e78:	da402c17 	ldw	r9,176(sp)
 4028e7c:	103f6a1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028e80:	d9401b17 	ldw	r5,108(sp)
 4028e84:	d8801c17 	ldw	r2,112(sp)
 4028e88:	d811883a 	mov	r8,sp
 4028e8c:	29000044 	addi	r4,r5,1
 4028e90:	003f1006 	br	4028ad4 <__alt_data_end+0xfffe8ad4>
 4028e94:	1000c31e 	bne	r2,zero,40291a4 <___vfiprintf_internal_r+0x12cc>
 4028e98:	01000044 	movi	r4,1
 4028e9c:	000b883a 	mov	r5,zero
 4028ea0:	d811883a 	mov	r8,sp
 4028ea4:	003f0d06 	br	4028adc <__alt_data_end+0xfffe8adc>
 4028ea8:	d9402117 	ldw	r5,132(sp)
 4028eac:	d9002017 	ldw	r4,128(sp)
 4028eb0:	d9801a04 	addi	r6,sp,104
 4028eb4:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4028eb8:	103f5b1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 4028ebc:	d9001b17 	ldw	r4,108(sp)
 4028ec0:	d8801c17 	ldw	r2,112(sp)
 4028ec4:	d811883a 	mov	r8,sp
 4028ec8:	21000044 	addi	r4,r4,1
 4028ecc:	003d8006 	br	40284d0 <__alt_data_end+0xfffe84d0>
 4028ed0:	010100f4 	movhi	r4,1027
 4028ed4:	2100b704 	addi	r4,r4,732
 4028ed8:	d9002615 	stw	r4,152(sp)
 4028edc:	d8c02215 	stw	r3,136(sp)
 4028ee0:	1029883a 	mov	r20,r2
 4028ee4:	94c4b03a 	or	r2,r18,r19
 4028ee8:	103fb21e 	bne	r2,zero,4028db4 <__alt_data_end+0xfffe8db4>
 4028eec:	0039883a 	mov	fp,zero
 4028ef0:	00800084 	movi	r2,2
 4028ef4:	003e6b06 	br	40288a4 <__alt_data_end+0xfffe88a4>
 4028ef8:	da802217 	ldw	r10,136(sp)
 4028efc:	d8001d85 	stb	zero,118(sp)
 4028f00:	0027883a 	mov	r19,zero
 4028f04:	50800104 	addi	r2,r10,4
 4028f08:	54800017 	ldw	r18,0(r10)
 4028f0c:	483e6016 	blt	r9,zero,4028890 <__alt_data_end+0xfffe8890>
 4028f10:	00ffdfc4 	movi	r3,-129
 4028f14:	d8802215 	stw	r2,136(sp)
 4028f18:	a0e8703a 	and	r20,r20,r3
 4028f1c:	0039883a 	mov	fp,zero
 4028f20:	903ebb26 	beq	r18,zero,4028a10 <__alt_data_end+0xfffe8a10>
 4028f24:	00800244 	movi	r2,9
 4028f28:	14bdee36 	bltu	r2,r18,40286e4 <__alt_data_end+0xfffe86e4>
 4028f2c:	003eba06 	br	4028a18 <__alt_data_end+0xfffe8a18>
 4028f30:	00800c04 	movi	r2,48
 4028f34:	d8c01d45 	stb	r3,117(sp)
 4028f38:	d8801d05 	stb	r2,116(sp)
 4028f3c:	d8001d85 	stb	zero,118(sp)
 4028f40:	a0c00094 	ori	r3,r20,2
 4028f44:	4800a916 	blt	r9,zero,40291ec <___vfiprintf_internal_r+0x1314>
 4028f48:	00bfdfc4 	movi	r2,-129
 4028f4c:	a096703a 	and	r11,r20,r2
 4028f50:	5d000094 	ori	r20,r11,2
 4028f54:	0039883a 	mov	fp,zero
 4028f58:	003f9706 	br	4028db8 <__alt_data_end+0xfffe8db8>
 4028f5c:	8025883a 	mov	r18,r16
 4028f60:	003c2e06 	br	402801c <__alt_data_end+0xfffe801c>
 4028f64:	008100f4 	movhi	r2,1027
 4028f68:	1080b704 	addi	r2,r2,732
 4028f6c:	0039883a 	mov	fp,zero
 4028f70:	d8802615 	stw	r2,152(sp)
 4028f74:	003f9006 	br	4028db8 <__alt_data_end+0xfffe8db8>
 4028f78:	04a5c83a 	sub	r18,zero,r18
 4028f7c:	07000b44 	movi	fp,45
 4028f80:	9004c03a 	cmpne	r2,r18,zero
 4028f84:	04e7c83a 	sub	r19,zero,r19
 4028f88:	df001d85 	stb	fp,118(sp)
 4028f8c:	98a7c83a 	sub	r19,r19,r2
 4028f90:	48009f16 	blt	r9,zero,4029210 <___vfiprintf_internal_r+0x1338>
 4028f94:	00bfdfc4 	movi	r2,-129
 4028f98:	a0a8703a 	and	r20,r20,r2
 4028f9c:	003dd006 	br	40286e0 <__alt_data_end+0xfffe86e0>
 4028fa0:	70004c26 	beq	r14,zero,40290d4 <___vfiprintf_internal_r+0x11fc>
 4028fa4:	00800084 	movi	r2,2
 4028fa8:	d8c01d04 	addi	r3,sp,116
 4028fac:	d8c00015 	stw	r3,0(sp)
 4028fb0:	d8800115 	stw	r2,4(sp)
 4028fb4:	01000044 	movi	r4,1
 4028fb8:	d811883a 	mov	r8,sp
 4028fbc:	003f7306 	br	4028d8c <__alt_data_end+0xfffe8d8c>
 4028fc0:	a080100c 	andi	r2,r20,64
 4028fc4:	da802217 	ldw	r10,136(sp)
 4028fc8:	103e0626 	beq	r2,zero,40287e4 <__alt_data_end+0xfffe87e4>
 4028fcc:	5480000f 	ldh	r18,0(r10)
 4028fd0:	52800104 	addi	r10,r10,4
 4028fd4:	da802215 	stw	r10,136(sp)
 4028fd8:	9027d7fa 	srai	r19,r18,31
 4028fdc:	9805883a 	mov	r2,r19
 4028fe0:	003db806 	br	40286c4 <__alt_data_end+0xfffe86c4>
 4028fe4:	a080040c 	andi	r2,r20,16
 4028fe8:	1000091e 	bne	r2,zero,4029010 <___vfiprintf_internal_r+0x1138>
 4028fec:	a2c0100c 	andi	r11,r20,64
 4028ff0:	58000726 	beq	r11,zero,4029010 <___vfiprintf_internal_r+0x1138>
 4028ff4:	da802217 	ldw	r10,136(sp)
 4028ff8:	50800017 	ldw	r2,0(r10)
 4028ffc:	52800104 	addi	r10,r10,4
 4029000:	da802215 	stw	r10,136(sp)
 4029004:	da802317 	ldw	r10,140(sp)
 4029008:	1280000d 	sth	r10,0(r2)
 402900c:	003be706 	br	4027fac <__alt_data_end+0xfffe7fac>
 4029010:	da802217 	ldw	r10,136(sp)
 4029014:	50800017 	ldw	r2,0(r10)
 4029018:	52800104 	addi	r10,r10,4
 402901c:	da802215 	stw	r10,136(sp)
 4029020:	da802317 	ldw	r10,140(sp)
 4029024:	12800015 	stw	r10,0(r2)
 4029028:	003be006 	br	4027fac <__alt_data_end+0xfffe7fac>
 402902c:	a080100c 	andi	r2,r20,64
 4029030:	da802217 	ldw	r10,136(sp)
 4029034:	10003026 	beq	r2,zero,40290f8 <___vfiprintf_internal_r+0x1220>
 4029038:	5480000b 	ldhu	r18,0(r10)
 402903c:	52800104 	addi	r10,r10,4
 4029040:	0027883a 	mov	r19,zero
 4029044:	da802215 	stw	r10,136(sp)
 4029048:	003d8006 	br	402864c <__alt_data_end+0xfffe864c>
 402904c:	80c00007 	ldb	r3,0(r16)
 4029050:	003c0006 	br	4028054 <__alt_data_end+0xfffe8054>
 4029054:	a080100c 	andi	r2,r20,64
 4029058:	d8001d85 	stb	zero,118(sp)
 402905c:	da802217 	ldw	r10,136(sp)
 4029060:	1000201e 	bne	r2,zero,40290e4 <___vfiprintf_internal_r+0x120c>
 4029064:	50800104 	addi	r2,r10,4
 4029068:	54800017 	ldw	r18,0(r10)
 402906c:	0027883a 	mov	r19,zero
 4029070:	483def0e 	bge	r9,zero,4028830 <__alt_data_end+0xfffe8830>
 4029074:	94c6b03a 	or	r3,r18,r19
 4029078:	d8802215 	stw	r2,136(sp)
 402907c:	183d4e1e 	bne	r3,zero,40285b8 <__alt_data_end+0xfffe85b8>
 4029080:	0039883a 	mov	fp,zero
 4029084:	0005883a 	mov	r2,zero
 4029088:	003e0606 	br	40288a4 <__alt_data_end+0xfffe88a4>
 402908c:	d9402117 	ldw	r5,132(sp)
 4029090:	d9002017 	ldw	r4,128(sp)
 4029094:	d9801a04 	addi	r6,sp,104
 4029098:	da402c15 	stw	r9,176(sp)
 402909c:	db802a15 	stw	r14,168(sp)
 40290a0:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 40290a4:	da402c17 	ldw	r9,176(sp)
 40290a8:	db802a17 	ldw	r14,168(sp)
 40290ac:	103ede1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 40290b0:	d9401b17 	ldw	r5,108(sp)
 40290b4:	d8801c17 	ldw	r2,112(sp)
 40290b8:	d811883a 	mov	r8,sp
 40290bc:	29000044 	addi	r4,r5,1
 40290c0:	003e7406 	br	4028a94 <__alt_data_end+0xfffe8a94>
 40290c4:	00bfffc4 	movi	r2,-1
 40290c8:	003c5806 	br	402822c <__alt_data_end+0xfffe822c>
 40290cc:	d811883a 	mov	r8,sp
 40290d0:	003ee806 	br	4028c74 <__alt_data_end+0xfffe8c74>
 40290d4:	000b883a 	mov	r5,zero
 40290d8:	01000044 	movi	r4,1
 40290dc:	d811883a 	mov	r8,sp
 40290e0:	003e7c06 	br	4028ad4 <__alt_data_end+0xfffe8ad4>
 40290e4:	50800104 	addi	r2,r10,4
 40290e8:	5480000b 	ldhu	r18,0(r10)
 40290ec:	0027883a 	mov	r19,zero
 40290f0:	483dcf0e 	bge	r9,zero,4028830 <__alt_data_end+0xfffe8830>
 40290f4:	003fdf06 	br	4029074 <__alt_data_end+0xfffe9074>
 40290f8:	54800017 	ldw	r18,0(r10)
 40290fc:	52800104 	addi	r10,r10,4
 4029100:	0027883a 	mov	r19,zero
 4029104:	da802215 	stw	r10,136(sp)
 4029108:	003d5006 	br	402864c <__alt_data_end+0xfffe864c>
 402910c:	50800104 	addi	r2,r10,4
 4029110:	5480000b 	ldhu	r18,0(r10)
 4029114:	0027883a 	mov	r19,zero
 4029118:	483f7d0e 	bge	r9,zero,4028f10 <__alt_data_end+0xfffe8f10>
 402911c:	003ddc06 	br	4028890 <__alt_data_end+0xfffe8890>
 4029120:	d8c02215 	stw	r3,136(sp)
 4029124:	0039883a 	mov	fp,zero
 4029128:	003ddb06 	br	4028898 <__alt_data_end+0xfffe8898>
 402912c:	028100f4 	movhi	r10,1027
 4029130:	52811804 	addi	r10,r10,1120
 4029134:	da802415 	stw	r10,144(sp)
 4029138:	003e8306 	br	4028b48 <__alt_data_end+0xfffe8b48>
 402913c:	d8801c17 	ldw	r2,112(sp)
 4029140:	dd002117 	ldw	r20,132(sp)
 4029144:	103eb926 	beq	r2,zero,4028c2c <__alt_data_end+0xfffe8c2c>
 4029148:	d9002017 	ldw	r4,128(sp)
 402914c:	d9801a04 	addi	r6,sp,104
 4029150:	a00b883a 	mov	r5,r20
 4029154:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 4029158:	003eb406 	br	4028c2c <__alt_data_end+0xfffe8c2c>
 402915c:	80c00043 	ldbu	r3,1(r16)
 4029160:	a5000814 	ori	r20,r20,32
 4029164:	84000044 	addi	r16,r16,1
 4029168:	18c03fcc 	andi	r3,r3,255
 402916c:	18c0201c 	xori	r3,r3,128
 4029170:	18ffe004 	addi	r3,r3,-128
 4029174:	003bb706 	br	4028054 <__alt_data_end+0xfffe8054>
 4029178:	a809883a 	mov	r4,r21
 402917c:	d8c02a15 	stw	r3,168(sp)
 4029180:	da002b15 	stw	r8,172(sp)
 4029184:	402082c0 	call	402082c <strlen>
 4029188:	d8c02a17 	ldw	r3,168(sp)
 402918c:	1027883a 	mov	r19,r2
 4029190:	df001d83 	ldbu	fp,118(sp)
 4029194:	d8c02215 	stw	r3,136(sp)
 4029198:	0013883a 	mov	r9,zero
 402919c:	da002b17 	ldw	r8,172(sp)
 40291a0:	003c4d06 	br	40282d8 <__alt_data_end+0xfffe82d8>
 40291a4:	d9402117 	ldw	r5,132(sp)
 40291a8:	d9002017 	ldw	r4,128(sp)
 40291ac:	d9801a04 	addi	r6,sp,104
 40291b0:	da402c15 	stw	r9,176(sp)
 40291b4:	4027dc40 	call	4027dc4 <__sprint_r.part.0>
 40291b8:	da402c17 	ldw	r9,176(sp)
 40291bc:	103e9a1e 	bne	r2,zero,4028c28 <__alt_data_end+0xfffe8c28>
 40291c0:	d9401b17 	ldw	r5,108(sp)
 40291c4:	d8801c17 	ldw	r2,112(sp)
 40291c8:	d811883a 	mov	r8,sp
 40291cc:	29000044 	addi	r4,r5,1
 40291d0:	003e4206 	br	4028adc <__alt_data_end+0xfffe8adc>
 40291d4:	d9401b17 	ldw	r5,108(sp)
 40291d8:	010100f4 	movhi	r4,1027
 40291dc:	21011c04 	addi	r4,r4,1136
 40291e0:	d9002415 	stw	r4,144(sp)
 40291e4:	29400044 	addi	r5,r5,1
 40291e8:	003c6d06 	br	40283a0 <__alt_data_end+0xfffe83a0>
 40291ec:	0039883a 	mov	fp,zero
 40291f0:	00800084 	movi	r2,2
 40291f4:	10803fcc 	andi	r2,r2,255
 40291f8:	01000044 	movi	r4,1
 40291fc:	11001e26 	beq	r2,r4,4029278 <___vfiprintf_internal_r+0x13a0>
 4029200:	01000084 	movi	r4,2
 4029204:	11001e1e 	bne	r2,r4,4029280 <___vfiprintf_internal_r+0x13a8>
 4029208:	1829883a 	mov	r20,r3
 402920c:	003eea06 	br	4028db8 <__alt_data_end+0xfffe8db8>
 4029210:	a007883a 	mov	r3,r20
 4029214:	00800044 	movi	r2,1
 4029218:	003ff606 	br	40291f4 <__alt_data_end+0xfffe91f4>
 402921c:	00800184 	movi	r2,6
 4029220:	1240012e 	bgeu	r2,r9,4029228 <___vfiprintf_internal_r+0x1350>
 4029224:	1013883a 	mov	r9,r2
 4029228:	4827883a 	mov	r19,r9
 402922c:	4825883a 	mov	r18,r9
 4029230:	48001516 	blt	r9,zero,4029288 <___vfiprintf_internal_r+0x13b0>
 4029234:	054100f4 	movhi	r21,1027
 4029238:	d8c02215 	stw	r3,136(sp)
 402923c:	ad40bc04 	addi	r21,r21,752
 4029240:	003d1406 	br	4028694 <__alt_data_end+0xfffe8694>
 4029244:	028100f4 	movhi	r10,1027
 4029248:	52811804 	addi	r10,r10,1120
 402924c:	da802415 	stw	r10,144(sp)
 4029250:	200d883a 	mov	r6,r4
 4029254:	003c9106 	br	402849c <__alt_data_end+0xfffe849c>
 4029258:	5021883a 	mov	r16,r10
 402925c:	0013883a 	mov	r9,zero
 4029260:	003b7d06 	br	4028058 <__alt_data_end+0xfffe8058>
 4029264:	4827883a 	mov	r19,r9
 4029268:	df001d83 	ldbu	fp,118(sp)
 402926c:	d8c02215 	stw	r3,136(sp)
 4029270:	0013883a 	mov	r9,zero
 4029274:	003c1806 	br	40282d8 <__alt_data_end+0xfffe82d8>
 4029278:	1829883a 	mov	r20,r3
 402927c:	003d1806 	br	40286e0 <__alt_data_end+0xfffe86e0>
 4029280:	1829883a 	mov	r20,r3
 4029284:	003ccd06 	br	40285bc <__alt_data_end+0xfffe85bc>
 4029288:	0025883a 	mov	r18,zero
 402928c:	003fe906 	br	4029234 <__alt_data_end+0xfffe9234>
 4029290:	d8802217 	ldw	r2,136(sp)
 4029294:	80c00043 	ldbu	r3,1(r16)
 4029298:	5021883a 	mov	r16,r10
 402929c:	12400017 	ldw	r9,0(r2)
 40292a0:	10800104 	addi	r2,r2,4
 40292a4:	d8802215 	stw	r2,136(sp)
 40292a8:	483faf0e 	bge	r9,zero,4029168 <__alt_data_end+0xfffe9168>
 40292ac:	18c03fcc 	andi	r3,r3,255
 40292b0:	18c0201c 	xori	r3,r3,128
 40292b4:	027fffc4 	movi	r9,-1
 40292b8:	18ffe004 	addi	r3,r3,-128
 40292bc:	003b6506 	br	4028054 <__alt_data_end+0xfffe8054>
 40292c0:	d9c01d85 	stb	r7,118(sp)
 40292c4:	003ca006 	br	4028548 <__alt_data_end+0xfffe8548>
 40292c8:	d9c01d85 	stb	r7,118(sp)
 40292cc:	003cad06 	br	4028584 <__alt_data_end+0xfffe8584>
 40292d0:	d9c01d85 	stb	r7,118(sp)
 40292d4:	003d7d06 	br	40288cc <__alt_data_end+0xfffe88cc>
 40292d8:	d9c01d85 	stb	r7,118(sp)
 40292dc:	003d5f06 	br	402885c <__alt_data_end+0xfffe885c>
 40292e0:	a080004c 	andi	r2,r20,1
 40292e4:	0039883a 	mov	fp,zero
 40292e8:	10000526 	beq	r2,zero,4029300 <___vfiprintf_internal_r+0x1428>
 40292ec:	00800c04 	movi	r2,48
 40292f0:	d88019c5 	stb	r2,103(sp)
 40292f4:	dcc02717 	ldw	r19,156(sp)
 40292f8:	dd4019c4 	addi	r21,sp,103
 40292fc:	003bf606 	br	40282d8 <__alt_data_end+0xfffe82d8>
 4029300:	0027883a 	mov	r19,zero
 4029304:	dd401a04 	addi	r21,sp,104
 4029308:	003bf306 	br	40282d8 <__alt_data_end+0xfffe82d8>
 402930c:	d9c01d85 	stb	r7,118(sp)
 4029310:	003dc806 	br	4028a34 <__alt_data_end+0xfffe8a34>
 4029314:	d9c01d85 	stb	r7,118(sp)
 4029318:	003d3a06 	br	4028804 <__alt_data_end+0xfffe8804>
 402931c:	d9c01d85 	stb	r7,118(sp)
 4029320:	003d2a06 	br	40287cc <__alt_data_end+0xfffe87cc>
 4029324:	d9c01d85 	stb	r7,118(sp)
 4029328:	003cde06 	br	40286a4 <__alt_data_end+0xfffe86a4>
 402932c:	d9c01d85 	stb	r7,118(sp)
 4029330:	003cbc06 	br	4028624 <__alt_data_end+0xfffe8624>

04029334 <__vfiprintf_internal>:
 4029334:	008100f4 	movhi	r2,1027
 4029338:	10886b04 	addi	r2,r2,8620
 402933c:	300f883a 	mov	r7,r6
 4029340:	280d883a 	mov	r6,r5
 4029344:	200b883a 	mov	r5,r4
 4029348:	11000017 	ldw	r4,0(r2)
 402934c:	4027ed81 	jmpi	4027ed8 <___vfiprintf_internal_r>

04029350 <__sbprintf>:
 4029350:	2880030b 	ldhu	r2,12(r5)
 4029354:	2ac01917 	ldw	r11,100(r5)
 4029358:	2a80038b 	ldhu	r10,14(r5)
 402935c:	2a400717 	ldw	r9,28(r5)
 4029360:	2a000917 	ldw	r8,36(r5)
 4029364:	defee204 	addi	sp,sp,-1144
 4029368:	00c10004 	movi	r3,1024
 402936c:	dc011a15 	stw	r16,1128(sp)
 4029370:	10bfff4c 	andi	r2,r2,65533
 4029374:	2821883a 	mov	r16,r5
 4029378:	d8cb883a 	add	r5,sp,r3
 402937c:	dc811c15 	stw	r18,1136(sp)
 4029380:	dc411b15 	stw	r17,1132(sp)
 4029384:	dfc11d15 	stw	ra,1140(sp)
 4029388:	2025883a 	mov	r18,r4
 402938c:	d881030d 	sth	r2,1036(sp)
 4029390:	dac11915 	stw	r11,1124(sp)
 4029394:	da81038d 	sth	r10,1038(sp)
 4029398:	da410715 	stw	r9,1052(sp)
 402939c:	da010915 	stw	r8,1060(sp)
 40293a0:	dec10015 	stw	sp,1024(sp)
 40293a4:	dec10415 	stw	sp,1040(sp)
 40293a8:	d8c10215 	stw	r3,1032(sp)
 40293ac:	d8c10515 	stw	r3,1044(sp)
 40293b0:	d8010615 	stw	zero,1048(sp)
 40293b4:	4027ed80 	call	4027ed8 <___vfiprintf_internal_r>
 40293b8:	1023883a 	mov	r17,r2
 40293bc:	10000416 	blt	r2,zero,40293d0 <__sbprintf+0x80>
 40293c0:	d9410004 	addi	r5,sp,1024
 40293c4:	9009883a 	mov	r4,r18
 40293c8:	402478c0 	call	402478c <_fflush_r>
 40293cc:	10000d1e 	bne	r2,zero,4029404 <__sbprintf+0xb4>
 40293d0:	d881030b 	ldhu	r2,1036(sp)
 40293d4:	1080100c 	andi	r2,r2,64
 40293d8:	10000326 	beq	r2,zero,40293e8 <__sbprintf+0x98>
 40293dc:	8080030b 	ldhu	r2,12(r16)
 40293e0:	10801014 	ori	r2,r2,64
 40293e4:	8080030d 	sth	r2,12(r16)
 40293e8:	8805883a 	mov	r2,r17
 40293ec:	dfc11d17 	ldw	ra,1140(sp)
 40293f0:	dc811c17 	ldw	r18,1136(sp)
 40293f4:	dc411b17 	ldw	r17,1132(sp)
 40293f8:	dc011a17 	ldw	r16,1128(sp)
 40293fc:	dec11e04 	addi	sp,sp,1144
 4029400:	f800283a 	ret
 4029404:	047fffc4 	movi	r17,-1
 4029408:	003ff106 	br	40293d0 <__alt_data_end+0xfffe93d0>

0402940c <_write_r>:
 402940c:	defffd04 	addi	sp,sp,-12
 4029410:	2805883a 	mov	r2,r5
 4029414:	dc000015 	stw	r16,0(sp)
 4029418:	040100f4 	movhi	r16,1027
 402941c:	dc400115 	stw	r17,4(sp)
 4029420:	300b883a 	mov	r5,r6
 4029424:	840f7c04 	addi	r16,r16,15856
 4029428:	2023883a 	mov	r17,r4
 402942c:	380d883a 	mov	r6,r7
 4029430:	1009883a 	mov	r4,r2
 4029434:	dfc00215 	stw	ra,8(sp)
 4029438:	80000015 	stw	zero,0(r16)
 402943c:	402db700 	call	402db70 <write>
 4029440:	00ffffc4 	movi	r3,-1
 4029444:	10c00526 	beq	r2,r3,402945c <_write_r+0x50>
 4029448:	dfc00217 	ldw	ra,8(sp)
 402944c:	dc400117 	ldw	r17,4(sp)
 4029450:	dc000017 	ldw	r16,0(sp)
 4029454:	dec00304 	addi	sp,sp,12
 4029458:	f800283a 	ret
 402945c:	80c00017 	ldw	r3,0(r16)
 4029460:	183ff926 	beq	r3,zero,4029448 <__alt_data_end+0xfffe9448>
 4029464:	88c00015 	stw	r3,0(r17)
 4029468:	003ff706 	br	4029448 <__alt_data_end+0xfffe9448>

0402946c <_close_r>:
 402946c:	defffd04 	addi	sp,sp,-12
 4029470:	dc000015 	stw	r16,0(sp)
 4029474:	040100f4 	movhi	r16,1027
 4029478:	dc400115 	stw	r17,4(sp)
 402947c:	840f7c04 	addi	r16,r16,15856
 4029480:	2023883a 	mov	r17,r4
 4029484:	2809883a 	mov	r4,r5
 4029488:	dfc00215 	stw	ra,8(sp)
 402948c:	80000015 	stw	zero,0(r16)
 4029490:	402d0480 	call	402d048 <close>
 4029494:	00ffffc4 	movi	r3,-1
 4029498:	10c00526 	beq	r2,r3,40294b0 <_close_r+0x44>
 402949c:	dfc00217 	ldw	ra,8(sp)
 40294a0:	dc400117 	ldw	r17,4(sp)
 40294a4:	dc000017 	ldw	r16,0(sp)
 40294a8:	dec00304 	addi	sp,sp,12
 40294ac:	f800283a 	ret
 40294b0:	80c00017 	ldw	r3,0(r16)
 40294b4:	183ff926 	beq	r3,zero,402949c <__alt_data_end+0xfffe949c>
 40294b8:	88c00015 	stw	r3,0(r17)
 40294bc:	003ff706 	br	402949c <__alt_data_end+0xfffe949c>

040294c0 <_calloc_r>:
 40294c0:	298b383a 	mul	r5,r5,r6
 40294c4:	defffe04 	addi	sp,sp,-8
 40294c8:	dfc00115 	stw	ra,4(sp)
 40294cc:	dc000015 	stw	r16,0(sp)
 40294d0:	40258c80 	call	40258c8 <_malloc_r>
 40294d4:	10002926 	beq	r2,zero,402957c <_calloc_r+0xbc>
 40294d8:	11bfff17 	ldw	r6,-4(r2)
 40294dc:	1021883a 	mov	r16,r2
 40294e0:	00bfff04 	movi	r2,-4
 40294e4:	308c703a 	and	r6,r6,r2
 40294e8:	00c00904 	movi	r3,36
 40294ec:	308d883a 	add	r6,r6,r2
 40294f0:	19801636 	bltu	r3,r6,402954c <_calloc_r+0x8c>
 40294f4:	008004c4 	movi	r2,19
 40294f8:	11800b2e 	bgeu	r2,r6,4029528 <_calloc_r+0x68>
 40294fc:	80000015 	stw	zero,0(r16)
 4029500:	80000115 	stw	zero,4(r16)
 4029504:	008006c4 	movi	r2,27
 4029508:	11801a2e 	bgeu	r2,r6,4029574 <_calloc_r+0xb4>
 402950c:	80000215 	stw	zero,8(r16)
 4029510:	80000315 	stw	zero,12(r16)
 4029514:	30c0151e 	bne	r6,r3,402956c <_calloc_r+0xac>
 4029518:	80000415 	stw	zero,16(r16)
 402951c:	80800604 	addi	r2,r16,24
 4029520:	80000515 	stw	zero,20(r16)
 4029524:	00000106 	br	402952c <_calloc_r+0x6c>
 4029528:	8005883a 	mov	r2,r16
 402952c:	10000015 	stw	zero,0(r2)
 4029530:	10000115 	stw	zero,4(r2)
 4029534:	10000215 	stw	zero,8(r2)
 4029538:	8005883a 	mov	r2,r16
 402953c:	dfc00117 	ldw	ra,4(sp)
 4029540:	dc000017 	ldw	r16,0(sp)
 4029544:	dec00204 	addi	sp,sp,8
 4029548:	f800283a 	ret
 402954c:	000b883a 	mov	r5,zero
 4029550:	8009883a 	mov	r4,r16
 4029554:	402645c0 	call	402645c <memset>
 4029558:	8005883a 	mov	r2,r16
 402955c:	dfc00117 	ldw	ra,4(sp)
 4029560:	dc000017 	ldw	r16,0(sp)
 4029564:	dec00204 	addi	sp,sp,8
 4029568:	f800283a 	ret
 402956c:	80800404 	addi	r2,r16,16
 4029570:	003fee06 	br	402952c <__alt_data_end+0xfffe952c>
 4029574:	80800204 	addi	r2,r16,8
 4029578:	003fec06 	br	402952c <__alt_data_end+0xfffe952c>
 402957c:	0005883a 	mov	r2,zero
 4029580:	003fee06 	br	402953c <__alt_data_end+0xfffe953c>

04029584 <_fclose_r>:
 4029584:	28003926 	beq	r5,zero,402966c <_fclose_r+0xe8>
 4029588:	defffc04 	addi	sp,sp,-16
 402958c:	dc400115 	stw	r17,4(sp)
 4029590:	dc000015 	stw	r16,0(sp)
 4029594:	dfc00315 	stw	ra,12(sp)
 4029598:	dc800215 	stw	r18,8(sp)
 402959c:	2023883a 	mov	r17,r4
 40295a0:	2821883a 	mov	r16,r5
 40295a4:	20000226 	beq	r4,zero,40295b0 <_fclose_r+0x2c>
 40295a8:	20800e17 	ldw	r2,56(r4)
 40295ac:	10002726 	beq	r2,zero,402964c <_fclose_r+0xc8>
 40295b0:	8080030f 	ldh	r2,12(r16)
 40295b4:	1000071e 	bne	r2,zero,40295d4 <_fclose_r+0x50>
 40295b8:	0005883a 	mov	r2,zero
 40295bc:	dfc00317 	ldw	ra,12(sp)
 40295c0:	dc800217 	ldw	r18,8(sp)
 40295c4:	dc400117 	ldw	r17,4(sp)
 40295c8:	dc000017 	ldw	r16,0(sp)
 40295cc:	dec00404 	addi	sp,sp,16
 40295d0:	f800283a 	ret
 40295d4:	800b883a 	mov	r5,r16
 40295d8:	8809883a 	mov	r4,r17
 40295dc:	40245700 	call	4024570 <__sflush_r>
 40295e0:	1025883a 	mov	r18,r2
 40295e4:	80800b17 	ldw	r2,44(r16)
 40295e8:	10000426 	beq	r2,zero,40295fc <_fclose_r+0x78>
 40295ec:	81400717 	ldw	r5,28(r16)
 40295f0:	8809883a 	mov	r4,r17
 40295f4:	103ee83a 	callr	r2
 40295f8:	10001616 	blt	r2,zero,4029654 <_fclose_r+0xd0>
 40295fc:	8080030b 	ldhu	r2,12(r16)
 4029600:	1080200c 	andi	r2,r2,128
 4029604:	1000151e 	bne	r2,zero,402965c <_fclose_r+0xd8>
 4029608:	81400c17 	ldw	r5,48(r16)
 402960c:	28000526 	beq	r5,zero,4029624 <_fclose_r+0xa0>
 4029610:	80801004 	addi	r2,r16,64
 4029614:	28800226 	beq	r5,r2,4029620 <_fclose_r+0x9c>
 4029618:	8809883a 	mov	r4,r17
 402961c:	4024cdc0 	call	4024cdc <_free_r>
 4029620:	80000c15 	stw	zero,48(r16)
 4029624:	81401117 	ldw	r5,68(r16)
 4029628:	28000326 	beq	r5,zero,4029638 <_fclose_r+0xb4>
 402962c:	8809883a 	mov	r4,r17
 4029630:	4024cdc0 	call	4024cdc <_free_r>
 4029634:	80001115 	stw	zero,68(r16)
 4029638:	4024b780 	call	4024b78 <__sfp_lock_acquire>
 402963c:	8000030d 	sth	zero,12(r16)
 4029640:	4024b7c0 	call	4024b7c <__sfp_lock_release>
 4029644:	9005883a 	mov	r2,r18
 4029648:	003fdc06 	br	40295bc <__alt_data_end+0xfffe95bc>
 402964c:	4024b680 	call	4024b68 <__sinit>
 4029650:	003fd706 	br	40295b0 <__alt_data_end+0xfffe95b0>
 4029654:	04bfffc4 	movi	r18,-1
 4029658:	003fe806 	br	40295fc <__alt_data_end+0xfffe95fc>
 402965c:	81400417 	ldw	r5,16(r16)
 4029660:	8809883a 	mov	r4,r17
 4029664:	4024cdc0 	call	4024cdc <_free_r>
 4029668:	003fe706 	br	4029608 <__alt_data_end+0xfffe9608>
 402966c:	0005883a 	mov	r2,zero
 4029670:	f800283a 	ret

04029674 <fclose>:
 4029674:	008100f4 	movhi	r2,1027
 4029678:	10886b04 	addi	r2,r2,8620
 402967c:	200b883a 	mov	r5,r4
 4029680:	11000017 	ldw	r4,0(r2)
 4029684:	40295841 	jmpi	4029584 <_fclose_r>

04029688 <__fputwc>:
 4029688:	defff804 	addi	sp,sp,-32
 402968c:	dcc00415 	stw	r19,16(sp)
 4029690:	dc800315 	stw	r18,12(sp)
 4029694:	dc000115 	stw	r16,4(sp)
 4029698:	dfc00715 	stw	ra,28(sp)
 402969c:	dd400615 	stw	r21,24(sp)
 40296a0:	dd000515 	stw	r20,20(sp)
 40296a4:	dc400215 	stw	r17,8(sp)
 40296a8:	2027883a 	mov	r19,r4
 40296ac:	2825883a 	mov	r18,r5
 40296b0:	3021883a 	mov	r16,r6
 40296b4:	40256b80 	call	40256b8 <__locale_mb_cur_max>
 40296b8:	00c00044 	movi	r3,1
 40296bc:	10c03e26 	beq	r2,r3,40297b8 <__fputwc+0x130>
 40296c0:	81c01704 	addi	r7,r16,92
 40296c4:	900d883a 	mov	r6,r18
 40296c8:	d80b883a 	mov	r5,sp
 40296cc:	9809883a 	mov	r4,r19
 40296d0:	4029b580 	call	4029b58 <_wcrtomb_r>
 40296d4:	1029883a 	mov	r20,r2
 40296d8:	00bfffc4 	movi	r2,-1
 40296dc:	a0802026 	beq	r20,r2,4029760 <__fputwc+0xd8>
 40296e0:	d9400003 	ldbu	r5,0(sp)
 40296e4:	a0001c26 	beq	r20,zero,4029758 <__fputwc+0xd0>
 40296e8:	0023883a 	mov	r17,zero
 40296ec:	05400284 	movi	r21,10
 40296f0:	00000906 	br	4029718 <__fputwc+0x90>
 40296f4:	80800017 	ldw	r2,0(r16)
 40296f8:	11400005 	stb	r5,0(r2)
 40296fc:	80c00017 	ldw	r3,0(r16)
 4029700:	18c00044 	addi	r3,r3,1
 4029704:	80c00015 	stw	r3,0(r16)
 4029708:	8c400044 	addi	r17,r17,1
 402970c:	dc45883a 	add	r2,sp,r17
 4029710:	8d00112e 	bgeu	r17,r20,4029758 <__fputwc+0xd0>
 4029714:	11400003 	ldbu	r5,0(r2)
 4029718:	80c00217 	ldw	r3,8(r16)
 402971c:	18ffffc4 	addi	r3,r3,-1
 4029720:	80c00215 	stw	r3,8(r16)
 4029724:	183ff30e 	bge	r3,zero,40296f4 <__alt_data_end+0xfffe96f4>
 4029728:	80800617 	ldw	r2,24(r16)
 402972c:	18801916 	blt	r3,r2,4029794 <__fputwc+0x10c>
 4029730:	80800017 	ldw	r2,0(r16)
 4029734:	11400005 	stb	r5,0(r2)
 4029738:	80800017 	ldw	r2,0(r16)
 402973c:	10c00003 	ldbu	r3,0(r2)
 4029740:	10800044 	addi	r2,r2,1
 4029744:	1d402326 	beq	r3,r21,40297d4 <__fputwc+0x14c>
 4029748:	80800015 	stw	r2,0(r16)
 402974c:	8c400044 	addi	r17,r17,1
 4029750:	dc45883a 	add	r2,sp,r17
 4029754:	8d3fef36 	bltu	r17,r20,4029714 <__alt_data_end+0xfffe9714>
 4029758:	9005883a 	mov	r2,r18
 402975c:	00000406 	br	4029770 <__fputwc+0xe8>
 4029760:	80c0030b 	ldhu	r3,12(r16)
 4029764:	a005883a 	mov	r2,r20
 4029768:	18c01014 	ori	r3,r3,64
 402976c:	80c0030d 	sth	r3,12(r16)
 4029770:	dfc00717 	ldw	ra,28(sp)
 4029774:	dd400617 	ldw	r21,24(sp)
 4029778:	dd000517 	ldw	r20,20(sp)
 402977c:	dcc00417 	ldw	r19,16(sp)
 4029780:	dc800317 	ldw	r18,12(sp)
 4029784:	dc400217 	ldw	r17,8(sp)
 4029788:	dc000117 	ldw	r16,4(sp)
 402978c:	dec00804 	addi	sp,sp,32
 4029790:	f800283a 	ret
 4029794:	800d883a 	mov	r6,r16
 4029798:	29403fcc 	andi	r5,r5,255
 402979c:	9809883a 	mov	r4,r19
 40297a0:	4029a000 	call	4029a00 <__swbuf_r>
 40297a4:	10bfffe0 	cmpeqi	r2,r2,-1
 40297a8:	10803fcc 	andi	r2,r2,255
 40297ac:	103fd626 	beq	r2,zero,4029708 <__alt_data_end+0xfffe9708>
 40297b0:	00bfffc4 	movi	r2,-1
 40297b4:	003fee06 	br	4029770 <__alt_data_end+0xfffe9770>
 40297b8:	90ffffc4 	addi	r3,r18,-1
 40297bc:	01003f84 	movi	r4,254
 40297c0:	20ffbf36 	bltu	r4,r3,40296c0 <__alt_data_end+0xfffe96c0>
 40297c4:	900b883a 	mov	r5,r18
 40297c8:	dc800005 	stb	r18,0(sp)
 40297cc:	1029883a 	mov	r20,r2
 40297d0:	003fc506 	br	40296e8 <__alt_data_end+0xfffe96e8>
 40297d4:	800d883a 	mov	r6,r16
 40297d8:	a80b883a 	mov	r5,r21
 40297dc:	9809883a 	mov	r4,r19
 40297e0:	4029a000 	call	4029a00 <__swbuf_r>
 40297e4:	10bfffe0 	cmpeqi	r2,r2,-1
 40297e8:	003fef06 	br	40297a8 <__alt_data_end+0xfffe97a8>

040297ec <_fputwc_r>:
 40297ec:	3080030b 	ldhu	r2,12(r6)
 40297f0:	10c8000c 	andi	r3,r2,8192
 40297f4:	1800051e 	bne	r3,zero,402980c <_fputwc_r+0x20>
 40297f8:	30c01917 	ldw	r3,100(r6)
 40297fc:	10880014 	ori	r2,r2,8192
 4029800:	3080030d 	sth	r2,12(r6)
 4029804:	18880014 	ori	r2,r3,8192
 4029808:	30801915 	stw	r2,100(r6)
 402980c:	40296881 	jmpi	4029688 <__fputwc>

04029810 <fputwc>:
 4029810:	008100f4 	movhi	r2,1027
 4029814:	defffc04 	addi	sp,sp,-16
 4029818:	10886b04 	addi	r2,r2,8620
 402981c:	dc000115 	stw	r16,4(sp)
 4029820:	14000017 	ldw	r16,0(r2)
 4029824:	dc400215 	stw	r17,8(sp)
 4029828:	dfc00315 	stw	ra,12(sp)
 402982c:	2023883a 	mov	r17,r4
 4029830:	80000226 	beq	r16,zero,402983c <fputwc+0x2c>
 4029834:	80800e17 	ldw	r2,56(r16)
 4029838:	10001026 	beq	r2,zero,402987c <fputwc+0x6c>
 402983c:	2880030b 	ldhu	r2,12(r5)
 4029840:	10c8000c 	andi	r3,r2,8192
 4029844:	1800051e 	bne	r3,zero,402985c <fputwc+0x4c>
 4029848:	28c01917 	ldw	r3,100(r5)
 402984c:	10880014 	ori	r2,r2,8192
 4029850:	2880030d 	sth	r2,12(r5)
 4029854:	18880014 	ori	r2,r3,8192
 4029858:	28801915 	stw	r2,100(r5)
 402985c:	280d883a 	mov	r6,r5
 4029860:	8009883a 	mov	r4,r16
 4029864:	880b883a 	mov	r5,r17
 4029868:	dfc00317 	ldw	ra,12(sp)
 402986c:	dc400217 	ldw	r17,8(sp)
 4029870:	dc000117 	ldw	r16,4(sp)
 4029874:	dec00404 	addi	sp,sp,16
 4029878:	40296881 	jmpi	4029688 <__fputwc>
 402987c:	8009883a 	mov	r4,r16
 4029880:	d9400015 	stw	r5,0(sp)
 4029884:	4024b680 	call	4024b68 <__sinit>
 4029888:	d9400017 	ldw	r5,0(sp)
 402988c:	003feb06 	br	402983c <__alt_data_end+0xfffe983c>

04029890 <_fstat_r>:
 4029890:	defffd04 	addi	sp,sp,-12
 4029894:	2805883a 	mov	r2,r5
 4029898:	dc000015 	stw	r16,0(sp)
 402989c:	040100f4 	movhi	r16,1027
 40298a0:	dc400115 	stw	r17,4(sp)
 40298a4:	840f7c04 	addi	r16,r16,15856
 40298a8:	2023883a 	mov	r17,r4
 40298ac:	300b883a 	mov	r5,r6
 40298b0:	1009883a 	mov	r4,r2
 40298b4:	dfc00215 	stw	ra,8(sp)
 40298b8:	80000015 	stw	zero,0(r16)
 40298bc:	402d1c80 	call	402d1c8 <fstat>
 40298c0:	00ffffc4 	movi	r3,-1
 40298c4:	10c00526 	beq	r2,r3,40298dc <_fstat_r+0x4c>
 40298c8:	dfc00217 	ldw	ra,8(sp)
 40298cc:	dc400117 	ldw	r17,4(sp)
 40298d0:	dc000017 	ldw	r16,0(sp)
 40298d4:	dec00304 	addi	sp,sp,12
 40298d8:	f800283a 	ret
 40298dc:	80c00017 	ldw	r3,0(r16)
 40298e0:	183ff926 	beq	r3,zero,40298c8 <__alt_data_end+0xfffe98c8>
 40298e4:	88c00015 	stw	r3,0(r17)
 40298e8:	003ff706 	br	40298c8 <__alt_data_end+0xfffe98c8>

040298ec <_isatty_r>:
 40298ec:	defffd04 	addi	sp,sp,-12
 40298f0:	dc000015 	stw	r16,0(sp)
 40298f4:	040100f4 	movhi	r16,1027
 40298f8:	dc400115 	stw	r17,4(sp)
 40298fc:	840f7c04 	addi	r16,r16,15856
 4029900:	2023883a 	mov	r17,r4
 4029904:	2809883a 	mov	r4,r5
 4029908:	dfc00215 	stw	ra,8(sp)
 402990c:	80000015 	stw	zero,0(r16)
 4029910:	402d5540 	call	402d554 <isatty>
 4029914:	00ffffc4 	movi	r3,-1
 4029918:	10c00526 	beq	r2,r3,4029930 <_isatty_r+0x44>
 402991c:	dfc00217 	ldw	ra,8(sp)
 4029920:	dc400117 	ldw	r17,4(sp)
 4029924:	dc000017 	ldw	r16,0(sp)
 4029928:	dec00304 	addi	sp,sp,12
 402992c:	f800283a 	ret
 4029930:	80c00017 	ldw	r3,0(r16)
 4029934:	183ff926 	beq	r3,zero,402991c <__alt_data_end+0xfffe991c>
 4029938:	88c00015 	stw	r3,0(r17)
 402993c:	003ff706 	br	402991c <__alt_data_end+0xfffe991c>

04029940 <_lseek_r>:
 4029940:	defffd04 	addi	sp,sp,-12
 4029944:	2805883a 	mov	r2,r5
 4029948:	dc000015 	stw	r16,0(sp)
 402994c:	040100f4 	movhi	r16,1027
 4029950:	dc400115 	stw	r17,4(sp)
 4029954:	300b883a 	mov	r5,r6
 4029958:	840f7c04 	addi	r16,r16,15856
 402995c:	2023883a 	mov	r17,r4
 4029960:	380d883a 	mov	r6,r7
 4029964:	1009883a 	mov	r4,r2
 4029968:	dfc00215 	stw	ra,8(sp)
 402996c:	80000015 	stw	zero,0(r16)
 4029970:	402d7200 	call	402d720 <lseek>
 4029974:	00ffffc4 	movi	r3,-1
 4029978:	10c00526 	beq	r2,r3,4029990 <_lseek_r+0x50>
 402997c:	dfc00217 	ldw	ra,8(sp)
 4029980:	dc400117 	ldw	r17,4(sp)
 4029984:	dc000017 	ldw	r16,0(sp)
 4029988:	dec00304 	addi	sp,sp,12
 402998c:	f800283a 	ret
 4029990:	80c00017 	ldw	r3,0(r16)
 4029994:	183ff926 	beq	r3,zero,402997c <__alt_data_end+0xfffe997c>
 4029998:	88c00015 	stw	r3,0(r17)
 402999c:	003ff706 	br	402997c <__alt_data_end+0xfffe997c>

040299a0 <_read_r>:
 40299a0:	defffd04 	addi	sp,sp,-12
 40299a4:	2805883a 	mov	r2,r5
 40299a8:	dc000015 	stw	r16,0(sp)
 40299ac:	040100f4 	movhi	r16,1027
 40299b0:	dc400115 	stw	r17,4(sp)
 40299b4:	300b883a 	mov	r5,r6
 40299b8:	840f7c04 	addi	r16,r16,15856
 40299bc:	2023883a 	mov	r17,r4
 40299c0:	380d883a 	mov	r6,r7
 40299c4:	1009883a 	mov	r4,r2
 40299c8:	dfc00215 	stw	ra,8(sp)
 40299cc:	80000015 	stw	zero,0(r16)
 40299d0:	402d8f40 	call	402d8f4 <read>
 40299d4:	00ffffc4 	movi	r3,-1
 40299d8:	10c00526 	beq	r2,r3,40299f0 <_read_r+0x50>
 40299dc:	dfc00217 	ldw	ra,8(sp)
 40299e0:	dc400117 	ldw	r17,4(sp)
 40299e4:	dc000017 	ldw	r16,0(sp)
 40299e8:	dec00304 	addi	sp,sp,12
 40299ec:	f800283a 	ret
 40299f0:	80c00017 	ldw	r3,0(r16)
 40299f4:	183ff926 	beq	r3,zero,40299dc <__alt_data_end+0xfffe99dc>
 40299f8:	88c00015 	stw	r3,0(r17)
 40299fc:	003ff706 	br	40299dc <__alt_data_end+0xfffe99dc>

04029a00 <__swbuf_r>:
 4029a00:	defffb04 	addi	sp,sp,-20
 4029a04:	dcc00315 	stw	r19,12(sp)
 4029a08:	dc800215 	stw	r18,8(sp)
 4029a0c:	dc000015 	stw	r16,0(sp)
 4029a10:	dfc00415 	stw	ra,16(sp)
 4029a14:	dc400115 	stw	r17,4(sp)
 4029a18:	2025883a 	mov	r18,r4
 4029a1c:	2827883a 	mov	r19,r5
 4029a20:	3021883a 	mov	r16,r6
 4029a24:	20000226 	beq	r4,zero,4029a30 <__swbuf_r+0x30>
 4029a28:	20800e17 	ldw	r2,56(r4)
 4029a2c:	10004226 	beq	r2,zero,4029b38 <__swbuf_r+0x138>
 4029a30:	80800617 	ldw	r2,24(r16)
 4029a34:	8100030b 	ldhu	r4,12(r16)
 4029a38:	80800215 	stw	r2,8(r16)
 4029a3c:	2080020c 	andi	r2,r4,8
 4029a40:	10003626 	beq	r2,zero,4029b1c <__swbuf_r+0x11c>
 4029a44:	80c00417 	ldw	r3,16(r16)
 4029a48:	18003426 	beq	r3,zero,4029b1c <__swbuf_r+0x11c>
 4029a4c:	2088000c 	andi	r2,r4,8192
 4029a50:	9c403fcc 	andi	r17,r19,255
 4029a54:	10001a26 	beq	r2,zero,4029ac0 <__swbuf_r+0xc0>
 4029a58:	80800017 	ldw	r2,0(r16)
 4029a5c:	81000517 	ldw	r4,20(r16)
 4029a60:	10c7c83a 	sub	r3,r2,r3
 4029a64:	1900200e 	bge	r3,r4,4029ae8 <__swbuf_r+0xe8>
 4029a68:	18c00044 	addi	r3,r3,1
 4029a6c:	81000217 	ldw	r4,8(r16)
 4029a70:	11400044 	addi	r5,r2,1
 4029a74:	81400015 	stw	r5,0(r16)
 4029a78:	213fffc4 	addi	r4,r4,-1
 4029a7c:	81000215 	stw	r4,8(r16)
 4029a80:	14c00005 	stb	r19,0(r2)
 4029a84:	80800517 	ldw	r2,20(r16)
 4029a88:	10c01e26 	beq	r2,r3,4029b04 <__swbuf_r+0x104>
 4029a8c:	8080030b 	ldhu	r2,12(r16)
 4029a90:	1080004c 	andi	r2,r2,1
 4029a94:	10000226 	beq	r2,zero,4029aa0 <__swbuf_r+0xa0>
 4029a98:	00800284 	movi	r2,10
 4029a9c:	88801926 	beq	r17,r2,4029b04 <__swbuf_r+0x104>
 4029aa0:	8805883a 	mov	r2,r17
 4029aa4:	dfc00417 	ldw	ra,16(sp)
 4029aa8:	dcc00317 	ldw	r19,12(sp)
 4029aac:	dc800217 	ldw	r18,8(sp)
 4029ab0:	dc400117 	ldw	r17,4(sp)
 4029ab4:	dc000017 	ldw	r16,0(sp)
 4029ab8:	dec00504 	addi	sp,sp,20
 4029abc:	f800283a 	ret
 4029ac0:	81401917 	ldw	r5,100(r16)
 4029ac4:	00b7ffc4 	movi	r2,-8193
 4029ac8:	21080014 	ori	r4,r4,8192
 4029acc:	2884703a 	and	r2,r5,r2
 4029ad0:	80801915 	stw	r2,100(r16)
 4029ad4:	80800017 	ldw	r2,0(r16)
 4029ad8:	8100030d 	sth	r4,12(r16)
 4029adc:	81000517 	ldw	r4,20(r16)
 4029ae0:	10c7c83a 	sub	r3,r2,r3
 4029ae4:	193fe016 	blt	r3,r4,4029a68 <__alt_data_end+0xfffe9a68>
 4029ae8:	800b883a 	mov	r5,r16
 4029aec:	9009883a 	mov	r4,r18
 4029af0:	402478c0 	call	402478c <_fflush_r>
 4029af4:	1000071e 	bne	r2,zero,4029b14 <__swbuf_r+0x114>
 4029af8:	80800017 	ldw	r2,0(r16)
 4029afc:	00c00044 	movi	r3,1
 4029b00:	003fda06 	br	4029a6c <__alt_data_end+0xfffe9a6c>
 4029b04:	800b883a 	mov	r5,r16
 4029b08:	9009883a 	mov	r4,r18
 4029b0c:	402478c0 	call	402478c <_fflush_r>
 4029b10:	103fe326 	beq	r2,zero,4029aa0 <__alt_data_end+0xfffe9aa0>
 4029b14:	00bfffc4 	movi	r2,-1
 4029b18:	003fe206 	br	4029aa4 <__alt_data_end+0xfffe9aa4>
 4029b1c:	800b883a 	mov	r5,r16
 4029b20:	9009883a 	mov	r4,r18
 4029b24:	4022b940 	call	4022b94 <__swsetup_r>
 4029b28:	103ffa1e 	bne	r2,zero,4029b14 <__alt_data_end+0xfffe9b14>
 4029b2c:	8100030b 	ldhu	r4,12(r16)
 4029b30:	80c00417 	ldw	r3,16(r16)
 4029b34:	003fc506 	br	4029a4c <__alt_data_end+0xfffe9a4c>
 4029b38:	4024b680 	call	4024b68 <__sinit>
 4029b3c:	003fbc06 	br	4029a30 <__alt_data_end+0xfffe9a30>

04029b40 <__swbuf>:
 4029b40:	008100f4 	movhi	r2,1027
 4029b44:	10886b04 	addi	r2,r2,8620
 4029b48:	280d883a 	mov	r6,r5
 4029b4c:	200b883a 	mov	r5,r4
 4029b50:	11000017 	ldw	r4,0(r2)
 4029b54:	4029a001 	jmpi	4029a00 <__swbuf_r>

04029b58 <_wcrtomb_r>:
 4029b58:	defff604 	addi	sp,sp,-40
 4029b5c:	008100f4 	movhi	r2,1027
 4029b60:	dc800815 	stw	r18,32(sp)
 4029b64:	dc400715 	stw	r17,28(sp)
 4029b68:	dc000615 	stw	r16,24(sp)
 4029b6c:	10886f04 	addi	r2,r2,8636
 4029b70:	dfc00915 	stw	ra,36(sp)
 4029b74:	2021883a 	mov	r16,r4
 4029b78:	3823883a 	mov	r17,r7
 4029b7c:	14800017 	ldw	r18,0(r2)
 4029b80:	28001426 	beq	r5,zero,4029bd4 <_wcrtomb_r+0x7c>
 4029b84:	d9400415 	stw	r5,16(sp)
 4029b88:	d9800515 	stw	r6,20(sp)
 4029b8c:	40256ac0 	call	40256ac <__locale_charset>
 4029b90:	d9800517 	ldw	r6,20(sp)
 4029b94:	d9400417 	ldw	r5,16(sp)
 4029b98:	100f883a 	mov	r7,r2
 4029b9c:	dc400015 	stw	r17,0(sp)
 4029ba0:	8009883a 	mov	r4,r16
 4029ba4:	903ee83a 	callr	r18
 4029ba8:	00ffffc4 	movi	r3,-1
 4029bac:	10c0031e 	bne	r2,r3,4029bbc <_wcrtomb_r+0x64>
 4029bb0:	88000015 	stw	zero,0(r17)
 4029bb4:	00c02284 	movi	r3,138
 4029bb8:	80c00015 	stw	r3,0(r16)
 4029bbc:	dfc00917 	ldw	ra,36(sp)
 4029bc0:	dc800817 	ldw	r18,32(sp)
 4029bc4:	dc400717 	ldw	r17,28(sp)
 4029bc8:	dc000617 	ldw	r16,24(sp)
 4029bcc:	dec00a04 	addi	sp,sp,40
 4029bd0:	f800283a 	ret
 4029bd4:	40256ac0 	call	40256ac <__locale_charset>
 4029bd8:	100f883a 	mov	r7,r2
 4029bdc:	dc400015 	stw	r17,0(sp)
 4029be0:	000d883a 	mov	r6,zero
 4029be4:	d9400104 	addi	r5,sp,4
 4029be8:	8009883a 	mov	r4,r16
 4029bec:	903ee83a 	callr	r18
 4029bf0:	003fed06 	br	4029ba8 <__alt_data_end+0xfffe9ba8>

04029bf4 <wcrtomb>:
 4029bf4:	defff604 	addi	sp,sp,-40
 4029bf8:	008100f4 	movhi	r2,1027
 4029bfc:	dc800615 	stw	r18,24(sp)
 4029c00:	dc400515 	stw	r17,20(sp)
 4029c04:	10886b04 	addi	r2,r2,8620
 4029c08:	dfc00915 	stw	ra,36(sp)
 4029c0c:	dd000815 	stw	r20,32(sp)
 4029c10:	dcc00715 	stw	r19,28(sp)
 4029c14:	dc000415 	stw	r16,16(sp)
 4029c18:	3025883a 	mov	r18,r6
 4029c1c:	14400017 	ldw	r17,0(r2)
 4029c20:	20001926 	beq	r4,zero,4029c88 <wcrtomb+0x94>
 4029c24:	008100f4 	movhi	r2,1027
 4029c28:	10886f04 	addi	r2,r2,8636
 4029c2c:	15000017 	ldw	r20,0(r2)
 4029c30:	2021883a 	mov	r16,r4
 4029c34:	2827883a 	mov	r19,r5
 4029c38:	40256ac0 	call	40256ac <__locale_charset>
 4029c3c:	100f883a 	mov	r7,r2
 4029c40:	dc800015 	stw	r18,0(sp)
 4029c44:	980d883a 	mov	r6,r19
 4029c48:	800b883a 	mov	r5,r16
 4029c4c:	8809883a 	mov	r4,r17
 4029c50:	a03ee83a 	callr	r20
 4029c54:	00ffffc4 	movi	r3,-1
 4029c58:	10c0031e 	bne	r2,r3,4029c68 <wcrtomb+0x74>
 4029c5c:	90000015 	stw	zero,0(r18)
 4029c60:	00c02284 	movi	r3,138
 4029c64:	88c00015 	stw	r3,0(r17)
 4029c68:	dfc00917 	ldw	ra,36(sp)
 4029c6c:	dd000817 	ldw	r20,32(sp)
 4029c70:	dcc00717 	ldw	r19,28(sp)
 4029c74:	dc800617 	ldw	r18,24(sp)
 4029c78:	dc400517 	ldw	r17,20(sp)
 4029c7c:	dc000417 	ldw	r16,16(sp)
 4029c80:	dec00a04 	addi	sp,sp,40
 4029c84:	f800283a 	ret
 4029c88:	008100f4 	movhi	r2,1027
 4029c8c:	10886f04 	addi	r2,r2,8636
 4029c90:	14000017 	ldw	r16,0(r2)
 4029c94:	40256ac0 	call	40256ac <__locale_charset>
 4029c98:	100f883a 	mov	r7,r2
 4029c9c:	dc800015 	stw	r18,0(sp)
 4029ca0:	000d883a 	mov	r6,zero
 4029ca4:	d9400104 	addi	r5,sp,4
 4029ca8:	8809883a 	mov	r4,r17
 4029cac:	803ee83a 	callr	r16
 4029cb0:	003fe806 	br	4029c54 <__alt_data_end+0xfffe9c54>

04029cb4 <__ascii_wctomb>:
 4029cb4:	28000526 	beq	r5,zero,4029ccc <__ascii_wctomb+0x18>
 4029cb8:	00803fc4 	movi	r2,255
 4029cbc:	11800536 	bltu	r2,r6,4029cd4 <__ascii_wctomb+0x20>
 4029cc0:	29800005 	stb	r6,0(r5)
 4029cc4:	00800044 	movi	r2,1
 4029cc8:	f800283a 	ret
 4029ccc:	0005883a 	mov	r2,zero
 4029cd0:	f800283a 	ret
 4029cd4:	00802284 	movi	r2,138
 4029cd8:	20800015 	stw	r2,0(r4)
 4029cdc:	00bfffc4 	movi	r2,-1
 4029ce0:	f800283a 	ret

04029ce4 <_wctomb_r>:
 4029ce4:	008100f4 	movhi	r2,1027
 4029ce8:	defff904 	addi	sp,sp,-28
 4029cec:	10886f04 	addi	r2,r2,8636
 4029cf0:	dfc00615 	stw	ra,24(sp)
 4029cf4:	dc400515 	stw	r17,20(sp)
 4029cf8:	dc000415 	stw	r16,16(sp)
 4029cfc:	3823883a 	mov	r17,r7
 4029d00:	14000017 	ldw	r16,0(r2)
 4029d04:	d9000115 	stw	r4,4(sp)
 4029d08:	d9400215 	stw	r5,8(sp)
 4029d0c:	d9800315 	stw	r6,12(sp)
 4029d10:	40256ac0 	call	40256ac <__locale_charset>
 4029d14:	d9800317 	ldw	r6,12(sp)
 4029d18:	d9400217 	ldw	r5,8(sp)
 4029d1c:	d9000117 	ldw	r4,4(sp)
 4029d20:	100f883a 	mov	r7,r2
 4029d24:	dc400015 	stw	r17,0(sp)
 4029d28:	803ee83a 	callr	r16
 4029d2c:	dfc00617 	ldw	ra,24(sp)
 4029d30:	dc400517 	ldw	r17,20(sp)
 4029d34:	dc000417 	ldw	r16,16(sp)
 4029d38:	dec00704 	addi	sp,sp,28
 4029d3c:	f800283a 	ret

04029d40 <__udivdi3>:
 4029d40:	defff504 	addi	sp,sp,-44
 4029d44:	dcc00415 	stw	r19,16(sp)
 4029d48:	dc000115 	stw	r16,4(sp)
 4029d4c:	dfc00a15 	stw	ra,40(sp)
 4029d50:	df000915 	stw	fp,36(sp)
 4029d54:	ddc00815 	stw	r23,32(sp)
 4029d58:	dd800715 	stw	r22,28(sp)
 4029d5c:	dd400615 	stw	r21,24(sp)
 4029d60:	dd000515 	stw	r20,20(sp)
 4029d64:	dc800315 	stw	r18,12(sp)
 4029d68:	dc400215 	stw	r17,8(sp)
 4029d6c:	2027883a 	mov	r19,r4
 4029d70:	2821883a 	mov	r16,r5
 4029d74:	3800411e 	bne	r7,zero,4029e7c <__udivdi3+0x13c>
 4029d78:	3023883a 	mov	r17,r6
 4029d7c:	2025883a 	mov	r18,r4
 4029d80:	2980522e 	bgeu	r5,r6,4029ecc <__udivdi3+0x18c>
 4029d84:	00bfffd4 	movui	r2,65535
 4029d88:	282d883a 	mov	r22,r5
 4029d8c:	1180a836 	bltu	r2,r6,402a030 <__udivdi3+0x2f0>
 4029d90:	00803fc4 	movi	r2,255
 4029d94:	1185803a 	cmpltu	r2,r2,r6
 4029d98:	100490fa 	slli	r2,r2,3
 4029d9c:	3086d83a 	srl	r3,r6,r2
 4029da0:	010100f4 	movhi	r4,1027
 4029da4:	21012004 	addi	r4,r4,1152
 4029da8:	20c7883a 	add	r3,r4,r3
 4029dac:	18c00003 	ldbu	r3,0(r3)
 4029db0:	1885883a 	add	r2,r3,r2
 4029db4:	00c00804 	movi	r3,32
 4029db8:	1887c83a 	sub	r3,r3,r2
 4029dbc:	18000526 	beq	r3,zero,4029dd4 <__udivdi3+0x94>
 4029dc0:	80e0983a 	sll	r16,r16,r3
 4029dc4:	9884d83a 	srl	r2,r19,r2
 4029dc8:	30e2983a 	sll	r17,r6,r3
 4029dcc:	98e4983a 	sll	r18,r19,r3
 4029dd0:	142cb03a 	or	r22,r2,r16
 4029dd4:	882ad43a 	srli	r21,r17,16
 4029dd8:	b009883a 	mov	r4,r22
 4029ddc:	8d3fffcc 	andi	r20,r17,65535
 4029de0:	a80b883a 	mov	r5,r21
 4029de4:	402a94c0 	call	402a94c <__umodsi3>
 4029de8:	b009883a 	mov	r4,r22
 4029dec:	a80b883a 	mov	r5,r21
 4029df0:	1027883a 	mov	r19,r2
 4029df4:	402a8e80 	call	402a8e8 <__udivsi3>
 4029df8:	102d883a 	mov	r22,r2
 4029dfc:	9826943a 	slli	r19,r19,16
 4029e00:	9004d43a 	srli	r2,r18,16
 4029e04:	a5a1383a 	mul	r16,r20,r22
 4029e08:	14c4b03a 	or	r2,r2,r19
 4029e0c:	1400052e 	bgeu	r2,r16,4029e24 <__udivdi3+0xe4>
 4029e10:	1445883a 	add	r2,r2,r17
 4029e14:	b0ffffc4 	addi	r3,r22,-1
 4029e18:	14400136 	bltu	r2,r17,4029e20 <__udivdi3+0xe0>
 4029e1c:	14012336 	bltu	r2,r16,402a2ac <__udivdi3+0x56c>
 4029e20:	182d883a 	mov	r22,r3
 4029e24:	1421c83a 	sub	r16,r2,r16
 4029e28:	a80b883a 	mov	r5,r21
 4029e2c:	8009883a 	mov	r4,r16
 4029e30:	402a94c0 	call	402a94c <__umodsi3>
 4029e34:	1027883a 	mov	r19,r2
 4029e38:	a80b883a 	mov	r5,r21
 4029e3c:	8009883a 	mov	r4,r16
 4029e40:	402a8e80 	call	402a8e8 <__udivsi3>
 4029e44:	9826943a 	slli	r19,r19,16
 4029e48:	a0a9383a 	mul	r20,r20,r2
 4029e4c:	94bfffcc 	andi	r18,r18,65535
 4029e50:	94e4b03a 	or	r18,r18,r19
 4029e54:	9500052e 	bgeu	r18,r20,4029e6c <__udivdi3+0x12c>
 4029e58:	8ca5883a 	add	r18,r17,r18
 4029e5c:	10ffffc4 	addi	r3,r2,-1
 4029e60:	9440f136 	bltu	r18,r17,402a228 <__udivdi3+0x4e8>
 4029e64:	9500f02e 	bgeu	r18,r20,402a228 <__udivdi3+0x4e8>
 4029e68:	10bfff84 	addi	r2,r2,-2
 4029e6c:	b00c943a 	slli	r6,r22,16
 4029e70:	0007883a 	mov	r3,zero
 4029e74:	3084b03a 	or	r2,r6,r2
 4029e78:	00005906 	br	4029fe0 <__udivdi3+0x2a0>
 4029e7c:	29c05636 	bltu	r5,r7,4029fd8 <__udivdi3+0x298>
 4029e80:	00bfffd4 	movui	r2,65535
 4029e84:	11c0622e 	bgeu	r2,r7,402a010 <__udivdi3+0x2d0>
 4029e88:	00804034 	movhi	r2,256
 4029e8c:	10bfffc4 	addi	r2,r2,-1
 4029e90:	11c0ee36 	bltu	r2,r7,402a24c <__udivdi3+0x50c>
 4029e94:	00800404 	movi	r2,16
 4029e98:	3886d83a 	srl	r3,r7,r2
 4029e9c:	010100f4 	movhi	r4,1027
 4029ea0:	21012004 	addi	r4,r4,1152
 4029ea4:	20c7883a 	add	r3,r4,r3
 4029ea8:	18c00003 	ldbu	r3,0(r3)
 4029eac:	05400804 	movi	r21,32
 4029eb0:	1885883a 	add	r2,r3,r2
 4029eb4:	a8abc83a 	sub	r21,r21,r2
 4029eb8:	a800621e 	bne	r21,zero,402a044 <__udivdi3+0x304>
 4029ebc:	3c00e936 	bltu	r7,r16,402a264 <__udivdi3+0x524>
 4029ec0:	9985403a 	cmpgeu	r2,r19,r6
 4029ec4:	0007883a 	mov	r3,zero
 4029ec8:	00004506 	br	4029fe0 <__udivdi3+0x2a0>
 4029ecc:	3000041e 	bne	r6,zero,4029ee0 <__udivdi3+0x1a0>
 4029ed0:	000b883a 	mov	r5,zero
 4029ed4:	01000044 	movi	r4,1
 4029ed8:	402a8e80 	call	402a8e8 <__udivsi3>
 4029edc:	1023883a 	mov	r17,r2
 4029ee0:	00bfffd4 	movui	r2,65535
 4029ee4:	14404e2e 	bgeu	r2,r17,402a020 <__udivdi3+0x2e0>
 4029ee8:	00804034 	movhi	r2,256
 4029eec:	10bfffc4 	addi	r2,r2,-1
 4029ef0:	1440d836 	bltu	r2,r17,402a254 <__udivdi3+0x514>
 4029ef4:	00800404 	movi	r2,16
 4029ef8:	8886d83a 	srl	r3,r17,r2
 4029efc:	010100f4 	movhi	r4,1027
 4029f00:	21012004 	addi	r4,r4,1152
 4029f04:	20c7883a 	add	r3,r4,r3
 4029f08:	18c00003 	ldbu	r3,0(r3)
 4029f0c:	1885883a 	add	r2,r3,r2
 4029f10:	00c00804 	movi	r3,32
 4029f14:	1887c83a 	sub	r3,r3,r2
 4029f18:	18008f1e 	bne	r3,zero,402a158 <__udivdi3+0x418>
 4029f1c:	882ad43a 	srli	r21,r17,16
 4029f20:	8461c83a 	sub	r16,r16,r17
 4029f24:	8d3fffcc 	andi	r20,r17,65535
 4029f28:	00c00044 	movi	r3,1
 4029f2c:	8009883a 	mov	r4,r16
 4029f30:	a80b883a 	mov	r5,r21
 4029f34:	d8c00015 	stw	r3,0(sp)
 4029f38:	402a94c0 	call	402a94c <__umodsi3>
 4029f3c:	8009883a 	mov	r4,r16
 4029f40:	a80b883a 	mov	r5,r21
 4029f44:	1027883a 	mov	r19,r2
 4029f48:	402a8e80 	call	402a8e8 <__udivsi3>
 4029f4c:	9826943a 	slli	r19,r19,16
 4029f50:	9008d43a 	srli	r4,r18,16
 4029f54:	1521383a 	mul	r16,r2,r20
 4029f58:	102d883a 	mov	r22,r2
 4029f5c:	24c8b03a 	or	r4,r4,r19
 4029f60:	d8c00017 	ldw	r3,0(sp)
 4029f64:	2400052e 	bgeu	r4,r16,4029f7c <__udivdi3+0x23c>
 4029f68:	2449883a 	add	r4,r4,r17
 4029f6c:	b0bfffc4 	addi	r2,r22,-1
 4029f70:	24400136 	bltu	r4,r17,4029f78 <__udivdi3+0x238>
 4029f74:	2400ca36 	bltu	r4,r16,402a2a0 <__udivdi3+0x560>
 4029f78:	102d883a 	mov	r22,r2
 4029f7c:	2421c83a 	sub	r16,r4,r16
 4029f80:	a80b883a 	mov	r5,r21
 4029f84:	8009883a 	mov	r4,r16
 4029f88:	d8c00015 	stw	r3,0(sp)
 4029f8c:	402a94c0 	call	402a94c <__umodsi3>
 4029f90:	1027883a 	mov	r19,r2
 4029f94:	a80b883a 	mov	r5,r21
 4029f98:	8009883a 	mov	r4,r16
 4029f9c:	402a8e80 	call	402a8e8 <__udivsi3>
 4029fa0:	9826943a 	slli	r19,r19,16
 4029fa4:	1529383a 	mul	r20,r2,r20
 4029fa8:	94bfffcc 	andi	r18,r18,65535
 4029fac:	94e4b03a 	or	r18,r18,r19
 4029fb0:	d8c00017 	ldw	r3,0(sp)
 4029fb4:	9500052e 	bgeu	r18,r20,4029fcc <__udivdi3+0x28c>
 4029fb8:	8ca5883a 	add	r18,r17,r18
 4029fbc:	113fffc4 	addi	r4,r2,-1
 4029fc0:	94409736 	bltu	r18,r17,402a220 <__udivdi3+0x4e0>
 4029fc4:	9500962e 	bgeu	r18,r20,402a220 <__udivdi3+0x4e0>
 4029fc8:	10bfff84 	addi	r2,r2,-2
 4029fcc:	b00c943a 	slli	r6,r22,16
 4029fd0:	3084b03a 	or	r2,r6,r2
 4029fd4:	00000206 	br	4029fe0 <__udivdi3+0x2a0>
 4029fd8:	0007883a 	mov	r3,zero
 4029fdc:	0005883a 	mov	r2,zero
 4029fe0:	dfc00a17 	ldw	ra,40(sp)
 4029fe4:	df000917 	ldw	fp,36(sp)
 4029fe8:	ddc00817 	ldw	r23,32(sp)
 4029fec:	dd800717 	ldw	r22,28(sp)
 4029ff0:	dd400617 	ldw	r21,24(sp)
 4029ff4:	dd000517 	ldw	r20,20(sp)
 4029ff8:	dcc00417 	ldw	r19,16(sp)
 4029ffc:	dc800317 	ldw	r18,12(sp)
 402a000:	dc400217 	ldw	r17,8(sp)
 402a004:	dc000117 	ldw	r16,4(sp)
 402a008:	dec00b04 	addi	sp,sp,44
 402a00c:	f800283a 	ret
 402a010:	00803fc4 	movi	r2,255
 402a014:	11c5803a 	cmpltu	r2,r2,r7
 402a018:	100490fa 	slli	r2,r2,3
 402a01c:	003f9e06 	br	4029e98 <__alt_data_end+0xfffe9e98>
 402a020:	00803fc4 	movi	r2,255
 402a024:	1445803a 	cmpltu	r2,r2,r17
 402a028:	100490fa 	slli	r2,r2,3
 402a02c:	003fb206 	br	4029ef8 <__alt_data_end+0xfffe9ef8>
 402a030:	00804034 	movhi	r2,256
 402a034:	10bfffc4 	addi	r2,r2,-1
 402a038:	11808836 	bltu	r2,r6,402a25c <__udivdi3+0x51c>
 402a03c:	00800404 	movi	r2,16
 402a040:	003f5606 	br	4029d9c <__alt_data_end+0xfffe9d9c>
 402a044:	30aed83a 	srl	r23,r6,r2
 402a048:	3d4e983a 	sll	r7,r7,r21
 402a04c:	80acd83a 	srl	r22,r16,r2
 402a050:	9884d83a 	srl	r2,r19,r2
 402a054:	3deeb03a 	or	r23,r7,r23
 402a058:	b824d43a 	srli	r18,r23,16
 402a05c:	8560983a 	sll	r16,r16,r21
 402a060:	b009883a 	mov	r4,r22
 402a064:	900b883a 	mov	r5,r18
 402a068:	3568983a 	sll	r20,r6,r21
 402a06c:	1420b03a 	or	r16,r2,r16
 402a070:	402a94c0 	call	402a94c <__umodsi3>
 402a074:	b009883a 	mov	r4,r22
 402a078:	900b883a 	mov	r5,r18
 402a07c:	1023883a 	mov	r17,r2
 402a080:	402a8e80 	call	402a8e8 <__udivsi3>
 402a084:	8808943a 	slli	r4,r17,16
 402a088:	bf3fffcc 	andi	fp,r23,65535
 402a08c:	8006d43a 	srli	r3,r16,16
 402a090:	e0a3383a 	mul	r17,fp,r2
 402a094:	100d883a 	mov	r6,r2
 402a098:	1906b03a 	or	r3,r3,r4
 402a09c:	1c40042e 	bgeu	r3,r17,402a0b0 <__udivdi3+0x370>
 402a0a0:	1dc7883a 	add	r3,r3,r23
 402a0a4:	10bfffc4 	addi	r2,r2,-1
 402a0a8:	1dc0752e 	bgeu	r3,r23,402a280 <__udivdi3+0x540>
 402a0ac:	100d883a 	mov	r6,r2
 402a0b0:	1c63c83a 	sub	r17,r3,r17
 402a0b4:	900b883a 	mov	r5,r18
 402a0b8:	8809883a 	mov	r4,r17
 402a0bc:	d9800015 	stw	r6,0(sp)
 402a0c0:	402a94c0 	call	402a94c <__umodsi3>
 402a0c4:	102d883a 	mov	r22,r2
 402a0c8:	8809883a 	mov	r4,r17
 402a0cc:	900b883a 	mov	r5,r18
 402a0d0:	402a8e80 	call	402a8e8 <__udivsi3>
 402a0d4:	b02c943a 	slli	r22,r22,16
 402a0d8:	e089383a 	mul	r4,fp,r2
 402a0dc:	843fffcc 	andi	r16,r16,65535
 402a0e0:	85a0b03a 	or	r16,r16,r22
 402a0e4:	d9800017 	ldw	r6,0(sp)
 402a0e8:	8100042e 	bgeu	r16,r4,402a0fc <__udivdi3+0x3bc>
 402a0ec:	85e1883a 	add	r16,r16,r23
 402a0f0:	10ffffc4 	addi	r3,r2,-1
 402a0f4:	85c05e2e 	bgeu	r16,r23,402a270 <__udivdi3+0x530>
 402a0f8:	1805883a 	mov	r2,r3
 402a0fc:	300c943a 	slli	r6,r6,16
 402a100:	a17fffcc 	andi	r5,r20,65535
 402a104:	a028d43a 	srli	r20,r20,16
 402a108:	3084b03a 	or	r2,r6,r2
 402a10c:	10ffffcc 	andi	r3,r2,65535
 402a110:	100cd43a 	srli	r6,r2,16
 402a114:	194f383a 	mul	r7,r3,r5
 402a118:	1d07383a 	mul	r3,r3,r20
 402a11c:	314b383a 	mul	r5,r6,r5
 402a120:	3810d43a 	srli	r8,r7,16
 402a124:	8121c83a 	sub	r16,r16,r4
 402a128:	1947883a 	add	r3,r3,r5
 402a12c:	40c7883a 	add	r3,r8,r3
 402a130:	350d383a 	mul	r6,r6,r20
 402a134:	1940022e 	bgeu	r3,r5,402a140 <__udivdi3+0x400>
 402a138:	01000074 	movhi	r4,1
 402a13c:	310d883a 	add	r6,r6,r4
 402a140:	1828d43a 	srli	r20,r3,16
 402a144:	a18d883a 	add	r6,r20,r6
 402a148:	81803e36 	bltu	r16,r6,402a244 <__udivdi3+0x504>
 402a14c:	81803826 	beq	r16,r6,402a230 <__udivdi3+0x4f0>
 402a150:	0007883a 	mov	r3,zero
 402a154:	003fa206 	br	4029fe0 <__alt_data_end+0xfffe9fe0>
 402a158:	88e2983a 	sll	r17,r17,r3
 402a15c:	80a8d83a 	srl	r20,r16,r2
 402a160:	80e0983a 	sll	r16,r16,r3
 402a164:	882ad43a 	srli	r21,r17,16
 402a168:	9884d83a 	srl	r2,r19,r2
 402a16c:	a009883a 	mov	r4,r20
 402a170:	a80b883a 	mov	r5,r21
 402a174:	142eb03a 	or	r23,r2,r16
 402a178:	98e4983a 	sll	r18,r19,r3
 402a17c:	402a94c0 	call	402a94c <__umodsi3>
 402a180:	a009883a 	mov	r4,r20
 402a184:	a80b883a 	mov	r5,r21
 402a188:	1021883a 	mov	r16,r2
 402a18c:	402a8e80 	call	402a8e8 <__udivsi3>
 402a190:	1039883a 	mov	fp,r2
 402a194:	8d3fffcc 	andi	r20,r17,65535
 402a198:	8020943a 	slli	r16,r16,16
 402a19c:	b804d43a 	srli	r2,r23,16
 402a1a0:	a72d383a 	mul	r22,r20,fp
 402a1a4:	1404b03a 	or	r2,r2,r16
 402a1a8:	1580062e 	bgeu	r2,r22,402a1c4 <__udivdi3+0x484>
 402a1ac:	1445883a 	add	r2,r2,r17
 402a1b0:	e0ffffc4 	addi	r3,fp,-1
 402a1b4:	14403836 	bltu	r2,r17,402a298 <__udivdi3+0x558>
 402a1b8:	1580372e 	bgeu	r2,r22,402a298 <__udivdi3+0x558>
 402a1bc:	e73fff84 	addi	fp,fp,-2
 402a1c0:	1445883a 	add	r2,r2,r17
 402a1c4:	15adc83a 	sub	r22,r2,r22
 402a1c8:	a80b883a 	mov	r5,r21
 402a1cc:	b009883a 	mov	r4,r22
 402a1d0:	402a94c0 	call	402a94c <__umodsi3>
 402a1d4:	1027883a 	mov	r19,r2
 402a1d8:	b009883a 	mov	r4,r22
 402a1dc:	a80b883a 	mov	r5,r21
 402a1e0:	402a8e80 	call	402a8e8 <__udivsi3>
 402a1e4:	9826943a 	slli	r19,r19,16
 402a1e8:	a0a1383a 	mul	r16,r20,r2
 402a1ec:	b93fffcc 	andi	r4,r23,65535
 402a1f0:	24c8b03a 	or	r4,r4,r19
 402a1f4:	2400062e 	bgeu	r4,r16,402a210 <__udivdi3+0x4d0>
 402a1f8:	2449883a 	add	r4,r4,r17
 402a1fc:	10ffffc4 	addi	r3,r2,-1
 402a200:	24402336 	bltu	r4,r17,402a290 <__udivdi3+0x550>
 402a204:	2400222e 	bgeu	r4,r16,402a290 <__udivdi3+0x550>
 402a208:	10bfff84 	addi	r2,r2,-2
 402a20c:	2449883a 	add	r4,r4,r17
 402a210:	e038943a 	slli	fp,fp,16
 402a214:	2421c83a 	sub	r16,r4,r16
 402a218:	e086b03a 	or	r3,fp,r2
 402a21c:	003f4306 	br	4029f2c <__alt_data_end+0xfffe9f2c>
 402a220:	2005883a 	mov	r2,r4
 402a224:	003f6906 	br	4029fcc <__alt_data_end+0xfffe9fcc>
 402a228:	1805883a 	mov	r2,r3
 402a22c:	003f0f06 	br	4029e6c <__alt_data_end+0xfffe9e6c>
 402a230:	1806943a 	slli	r3,r3,16
 402a234:	9d66983a 	sll	r19,r19,r21
 402a238:	39ffffcc 	andi	r7,r7,65535
 402a23c:	19c7883a 	add	r3,r3,r7
 402a240:	98ffc32e 	bgeu	r19,r3,402a150 <__alt_data_end+0xfffea150>
 402a244:	10bfffc4 	addi	r2,r2,-1
 402a248:	003fc106 	br	402a150 <__alt_data_end+0xfffea150>
 402a24c:	00800604 	movi	r2,24
 402a250:	003f1106 	br	4029e98 <__alt_data_end+0xfffe9e98>
 402a254:	00800604 	movi	r2,24
 402a258:	003f2706 	br	4029ef8 <__alt_data_end+0xfffe9ef8>
 402a25c:	00800604 	movi	r2,24
 402a260:	003ece06 	br	4029d9c <__alt_data_end+0xfffe9d9c>
 402a264:	0007883a 	mov	r3,zero
 402a268:	00800044 	movi	r2,1
 402a26c:	003f5c06 	br	4029fe0 <__alt_data_end+0xfffe9fe0>
 402a270:	813fa12e 	bgeu	r16,r4,402a0f8 <__alt_data_end+0xfffea0f8>
 402a274:	10bfff84 	addi	r2,r2,-2
 402a278:	85e1883a 	add	r16,r16,r23
 402a27c:	003f9f06 	br	402a0fc <__alt_data_end+0xfffea0fc>
 402a280:	1c7f8a2e 	bgeu	r3,r17,402a0ac <__alt_data_end+0xfffea0ac>
 402a284:	31bfff84 	addi	r6,r6,-2
 402a288:	1dc7883a 	add	r3,r3,r23
 402a28c:	003f8806 	br	402a0b0 <__alt_data_end+0xfffea0b0>
 402a290:	1805883a 	mov	r2,r3
 402a294:	003fde06 	br	402a210 <__alt_data_end+0xfffea210>
 402a298:	1839883a 	mov	fp,r3
 402a29c:	003fc906 	br	402a1c4 <__alt_data_end+0xfffea1c4>
 402a2a0:	b5bfff84 	addi	r22,r22,-2
 402a2a4:	2449883a 	add	r4,r4,r17
 402a2a8:	003f3406 	br	4029f7c <__alt_data_end+0xfffe9f7c>
 402a2ac:	b5bfff84 	addi	r22,r22,-2
 402a2b0:	1445883a 	add	r2,r2,r17
 402a2b4:	003edb06 	br	4029e24 <__alt_data_end+0xfffe9e24>

0402a2b8 <__umoddi3>:
 402a2b8:	defff404 	addi	sp,sp,-48
 402a2bc:	df000a15 	stw	fp,40(sp)
 402a2c0:	dc400315 	stw	r17,12(sp)
 402a2c4:	dc000215 	stw	r16,8(sp)
 402a2c8:	dfc00b15 	stw	ra,44(sp)
 402a2cc:	ddc00915 	stw	r23,36(sp)
 402a2d0:	dd800815 	stw	r22,32(sp)
 402a2d4:	dd400715 	stw	r21,28(sp)
 402a2d8:	dd000615 	stw	r20,24(sp)
 402a2dc:	dcc00515 	stw	r19,20(sp)
 402a2e0:	dc800415 	stw	r18,16(sp)
 402a2e4:	2021883a 	mov	r16,r4
 402a2e8:	2823883a 	mov	r17,r5
 402a2ec:	2839883a 	mov	fp,r5
 402a2f0:	38003c1e 	bne	r7,zero,402a3e4 <__umoddi3+0x12c>
 402a2f4:	3027883a 	mov	r19,r6
 402a2f8:	2029883a 	mov	r20,r4
 402a2fc:	2980512e 	bgeu	r5,r6,402a444 <__umoddi3+0x18c>
 402a300:	00bfffd4 	movui	r2,65535
 402a304:	11809a36 	bltu	r2,r6,402a570 <__umoddi3+0x2b8>
 402a308:	01003fc4 	movi	r4,255
 402a30c:	2189803a 	cmpltu	r4,r4,r6
 402a310:	200890fa 	slli	r4,r4,3
 402a314:	3104d83a 	srl	r2,r6,r4
 402a318:	00c100f4 	movhi	r3,1027
 402a31c:	18c12004 	addi	r3,r3,1152
 402a320:	1885883a 	add	r2,r3,r2
 402a324:	10c00003 	ldbu	r3,0(r2)
 402a328:	00800804 	movi	r2,32
 402a32c:	1909883a 	add	r4,r3,r4
 402a330:	1125c83a 	sub	r18,r2,r4
 402a334:	90000526 	beq	r18,zero,402a34c <__umoddi3+0x94>
 402a338:	8ca2983a 	sll	r17,r17,r18
 402a33c:	8108d83a 	srl	r4,r16,r4
 402a340:	34a6983a 	sll	r19,r6,r18
 402a344:	84a8983a 	sll	r20,r16,r18
 402a348:	2478b03a 	or	fp,r4,r17
 402a34c:	982ed43a 	srli	r23,r19,16
 402a350:	e009883a 	mov	r4,fp
 402a354:	9dbfffcc 	andi	r22,r19,65535
 402a358:	b80b883a 	mov	r5,r23
 402a35c:	402a94c0 	call	402a94c <__umodsi3>
 402a360:	e009883a 	mov	r4,fp
 402a364:	b80b883a 	mov	r5,r23
 402a368:	102b883a 	mov	r21,r2
 402a36c:	402a8e80 	call	402a8e8 <__udivsi3>
 402a370:	a806943a 	slli	r3,r21,16
 402a374:	a008d43a 	srli	r4,r20,16
 402a378:	b085383a 	mul	r2,r22,r2
 402a37c:	20c8b03a 	or	r4,r4,r3
 402a380:	2080032e 	bgeu	r4,r2,402a390 <__umoddi3+0xd8>
 402a384:	24c9883a 	add	r4,r4,r19
 402a388:	24c00136 	bltu	r4,r19,402a390 <__umoddi3+0xd8>
 402a38c:	20811036 	bltu	r4,r2,402a7d0 <__umoddi3+0x518>
 402a390:	20abc83a 	sub	r21,r4,r2
 402a394:	b80b883a 	mov	r5,r23
 402a398:	a809883a 	mov	r4,r21
 402a39c:	402a94c0 	call	402a94c <__umodsi3>
 402a3a0:	1023883a 	mov	r17,r2
 402a3a4:	b80b883a 	mov	r5,r23
 402a3a8:	a809883a 	mov	r4,r21
 402a3ac:	402a8e80 	call	402a8e8 <__udivsi3>
 402a3b0:	8822943a 	slli	r17,r17,16
 402a3b4:	b085383a 	mul	r2,r22,r2
 402a3b8:	a0ffffcc 	andi	r3,r20,65535
 402a3bc:	1c46b03a 	or	r3,r3,r17
 402a3c0:	1880042e 	bgeu	r3,r2,402a3d4 <__umoddi3+0x11c>
 402a3c4:	1cc7883a 	add	r3,r3,r19
 402a3c8:	1cc00236 	bltu	r3,r19,402a3d4 <__umoddi3+0x11c>
 402a3cc:	1880012e 	bgeu	r3,r2,402a3d4 <__umoddi3+0x11c>
 402a3d0:	1cc7883a 	add	r3,r3,r19
 402a3d4:	1885c83a 	sub	r2,r3,r2
 402a3d8:	1484d83a 	srl	r2,r2,r18
 402a3dc:	0007883a 	mov	r3,zero
 402a3e0:	00004f06 	br	402a520 <__umoddi3+0x268>
 402a3e4:	29c04c36 	bltu	r5,r7,402a518 <__umoddi3+0x260>
 402a3e8:	00bfffd4 	movui	r2,65535
 402a3ec:	11c0582e 	bgeu	r2,r7,402a550 <__umoddi3+0x298>
 402a3f0:	00804034 	movhi	r2,256
 402a3f4:	10bfffc4 	addi	r2,r2,-1
 402a3f8:	11c0e736 	bltu	r2,r7,402a798 <__umoddi3+0x4e0>
 402a3fc:	01000404 	movi	r4,16
 402a400:	3904d83a 	srl	r2,r7,r4
 402a404:	00c100f4 	movhi	r3,1027
 402a408:	18c12004 	addi	r3,r3,1152
 402a40c:	1885883a 	add	r2,r3,r2
 402a410:	14c00003 	ldbu	r19,0(r2)
 402a414:	00c00804 	movi	r3,32
 402a418:	9927883a 	add	r19,r19,r4
 402a41c:	1ce9c83a 	sub	r20,r3,r19
 402a420:	a000581e 	bne	r20,zero,402a584 <__umoddi3+0x2cc>
 402a424:	3c400136 	bltu	r7,r17,402a42c <__umoddi3+0x174>
 402a428:	8180eb36 	bltu	r16,r6,402a7d8 <__umoddi3+0x520>
 402a42c:	8185c83a 	sub	r2,r16,r6
 402a430:	89e3c83a 	sub	r17,r17,r7
 402a434:	8089803a 	cmpltu	r4,r16,r2
 402a438:	8939c83a 	sub	fp,r17,r4
 402a43c:	e007883a 	mov	r3,fp
 402a440:	00003706 	br	402a520 <__umoddi3+0x268>
 402a444:	3000041e 	bne	r6,zero,402a458 <__umoddi3+0x1a0>
 402a448:	000b883a 	mov	r5,zero
 402a44c:	01000044 	movi	r4,1
 402a450:	402a8e80 	call	402a8e8 <__udivsi3>
 402a454:	1027883a 	mov	r19,r2
 402a458:	00bfffd4 	movui	r2,65535
 402a45c:	14c0402e 	bgeu	r2,r19,402a560 <__umoddi3+0x2a8>
 402a460:	00804034 	movhi	r2,256
 402a464:	10bfffc4 	addi	r2,r2,-1
 402a468:	14c0cd36 	bltu	r2,r19,402a7a0 <__umoddi3+0x4e8>
 402a46c:	00800404 	movi	r2,16
 402a470:	9886d83a 	srl	r3,r19,r2
 402a474:	010100f4 	movhi	r4,1027
 402a478:	21012004 	addi	r4,r4,1152
 402a47c:	20c7883a 	add	r3,r4,r3
 402a480:	18c00003 	ldbu	r3,0(r3)
 402a484:	1887883a 	add	r3,r3,r2
 402a488:	00800804 	movi	r2,32
 402a48c:	10e5c83a 	sub	r18,r2,r3
 402a490:	9000901e 	bne	r18,zero,402a6d4 <__umoddi3+0x41c>
 402a494:	982cd43a 	srli	r22,r19,16
 402a498:	8ce3c83a 	sub	r17,r17,r19
 402a49c:	9d7fffcc 	andi	r21,r19,65535
 402a4a0:	b00b883a 	mov	r5,r22
 402a4a4:	8809883a 	mov	r4,r17
 402a4a8:	402a94c0 	call	402a94c <__umodsi3>
 402a4ac:	8809883a 	mov	r4,r17
 402a4b0:	b00b883a 	mov	r5,r22
 402a4b4:	1021883a 	mov	r16,r2
 402a4b8:	402a8e80 	call	402a8e8 <__udivsi3>
 402a4bc:	8006943a 	slli	r3,r16,16
 402a4c0:	a008d43a 	srli	r4,r20,16
 402a4c4:	1545383a 	mul	r2,r2,r21
 402a4c8:	20c8b03a 	or	r4,r4,r3
 402a4cc:	2080042e 	bgeu	r4,r2,402a4e0 <__umoddi3+0x228>
 402a4d0:	24c9883a 	add	r4,r4,r19
 402a4d4:	24c00236 	bltu	r4,r19,402a4e0 <__umoddi3+0x228>
 402a4d8:	2080012e 	bgeu	r4,r2,402a4e0 <__umoddi3+0x228>
 402a4dc:	24c9883a 	add	r4,r4,r19
 402a4e0:	20a1c83a 	sub	r16,r4,r2
 402a4e4:	b00b883a 	mov	r5,r22
 402a4e8:	8009883a 	mov	r4,r16
 402a4ec:	402a94c0 	call	402a94c <__umodsi3>
 402a4f0:	1023883a 	mov	r17,r2
 402a4f4:	b00b883a 	mov	r5,r22
 402a4f8:	8009883a 	mov	r4,r16
 402a4fc:	402a8e80 	call	402a8e8 <__udivsi3>
 402a500:	8822943a 	slli	r17,r17,16
 402a504:	1545383a 	mul	r2,r2,r21
 402a508:	a53fffcc 	andi	r20,r20,65535
 402a50c:	a446b03a 	or	r3,r20,r17
 402a510:	18bfb02e 	bgeu	r3,r2,402a3d4 <__alt_data_end+0xfffea3d4>
 402a514:	003fab06 	br	402a3c4 <__alt_data_end+0xfffea3c4>
 402a518:	2005883a 	mov	r2,r4
 402a51c:	2807883a 	mov	r3,r5
 402a520:	dfc00b17 	ldw	ra,44(sp)
 402a524:	df000a17 	ldw	fp,40(sp)
 402a528:	ddc00917 	ldw	r23,36(sp)
 402a52c:	dd800817 	ldw	r22,32(sp)
 402a530:	dd400717 	ldw	r21,28(sp)
 402a534:	dd000617 	ldw	r20,24(sp)
 402a538:	dcc00517 	ldw	r19,20(sp)
 402a53c:	dc800417 	ldw	r18,16(sp)
 402a540:	dc400317 	ldw	r17,12(sp)
 402a544:	dc000217 	ldw	r16,8(sp)
 402a548:	dec00c04 	addi	sp,sp,48
 402a54c:	f800283a 	ret
 402a550:	04c03fc4 	movi	r19,255
 402a554:	99c9803a 	cmpltu	r4,r19,r7
 402a558:	200890fa 	slli	r4,r4,3
 402a55c:	003fa806 	br	402a400 <__alt_data_end+0xfffea400>
 402a560:	00803fc4 	movi	r2,255
 402a564:	14c5803a 	cmpltu	r2,r2,r19
 402a568:	100490fa 	slli	r2,r2,3
 402a56c:	003fc006 	br	402a470 <__alt_data_end+0xfffea470>
 402a570:	00804034 	movhi	r2,256
 402a574:	10bfffc4 	addi	r2,r2,-1
 402a578:	11808b36 	bltu	r2,r6,402a7a8 <__umoddi3+0x4f0>
 402a57c:	01000404 	movi	r4,16
 402a580:	003f6406 	br	402a314 <__alt_data_end+0xfffea314>
 402a584:	34c4d83a 	srl	r2,r6,r19
 402a588:	3d0e983a 	sll	r7,r7,r20
 402a58c:	8cf8d83a 	srl	fp,r17,r19
 402a590:	8d10983a 	sll	r8,r17,r20
 402a594:	38aab03a 	or	r21,r7,r2
 402a598:	a82cd43a 	srli	r22,r21,16
 402a59c:	84e2d83a 	srl	r17,r16,r19
 402a5a0:	e009883a 	mov	r4,fp
 402a5a4:	b00b883a 	mov	r5,r22
 402a5a8:	8a22b03a 	or	r17,r17,r8
 402a5ac:	3524983a 	sll	r18,r6,r20
 402a5b0:	402a94c0 	call	402a94c <__umodsi3>
 402a5b4:	e009883a 	mov	r4,fp
 402a5b8:	b00b883a 	mov	r5,r22
 402a5bc:	102f883a 	mov	r23,r2
 402a5c0:	402a8e80 	call	402a8e8 <__udivsi3>
 402a5c4:	100d883a 	mov	r6,r2
 402a5c8:	b808943a 	slli	r4,r23,16
 402a5cc:	aa3fffcc 	andi	r8,r21,65535
 402a5d0:	8804d43a 	srli	r2,r17,16
 402a5d4:	41af383a 	mul	r23,r8,r6
 402a5d8:	8520983a 	sll	r16,r16,r20
 402a5dc:	1104b03a 	or	r2,r2,r4
 402a5e0:	15c0042e 	bgeu	r2,r23,402a5f4 <__umoddi3+0x33c>
 402a5e4:	1545883a 	add	r2,r2,r21
 402a5e8:	30ffffc4 	addi	r3,r6,-1
 402a5ec:	1540742e 	bgeu	r2,r21,402a7c0 <__umoddi3+0x508>
 402a5f0:	180d883a 	mov	r6,r3
 402a5f4:	15efc83a 	sub	r23,r2,r23
 402a5f8:	b00b883a 	mov	r5,r22
 402a5fc:	b809883a 	mov	r4,r23
 402a600:	d9800115 	stw	r6,4(sp)
 402a604:	da000015 	stw	r8,0(sp)
 402a608:	402a94c0 	call	402a94c <__umodsi3>
 402a60c:	b00b883a 	mov	r5,r22
 402a610:	b809883a 	mov	r4,r23
 402a614:	1039883a 	mov	fp,r2
 402a618:	402a8e80 	call	402a8e8 <__udivsi3>
 402a61c:	da000017 	ldw	r8,0(sp)
 402a620:	e038943a 	slli	fp,fp,16
 402a624:	100b883a 	mov	r5,r2
 402a628:	4089383a 	mul	r4,r8,r2
 402a62c:	8a3fffcc 	andi	r8,r17,65535
 402a630:	4710b03a 	or	r8,r8,fp
 402a634:	d9800117 	ldw	r6,4(sp)
 402a638:	4100042e 	bgeu	r8,r4,402a64c <__umoddi3+0x394>
 402a63c:	4551883a 	add	r8,r8,r21
 402a640:	10bfffc4 	addi	r2,r2,-1
 402a644:	45405a2e 	bgeu	r8,r21,402a7b0 <__umoddi3+0x4f8>
 402a648:	100b883a 	mov	r5,r2
 402a64c:	300c943a 	slli	r6,r6,16
 402a650:	91ffffcc 	andi	r7,r18,65535
 402a654:	9004d43a 	srli	r2,r18,16
 402a658:	314cb03a 	or	r6,r6,r5
 402a65c:	317fffcc 	andi	r5,r6,65535
 402a660:	300cd43a 	srli	r6,r6,16
 402a664:	29d3383a 	mul	r9,r5,r7
 402a668:	288b383a 	mul	r5,r5,r2
 402a66c:	31cf383a 	mul	r7,r6,r7
 402a670:	4806d43a 	srli	r3,r9,16
 402a674:	4111c83a 	sub	r8,r8,r4
 402a678:	29cb883a 	add	r5,r5,r7
 402a67c:	194b883a 	add	r5,r3,r5
 402a680:	3085383a 	mul	r2,r6,r2
 402a684:	29c0022e 	bgeu	r5,r7,402a690 <__umoddi3+0x3d8>
 402a688:	00c00074 	movhi	r3,1
 402a68c:	10c5883a 	add	r2,r2,r3
 402a690:	2808d43a 	srli	r4,r5,16
 402a694:	280a943a 	slli	r5,r5,16
 402a698:	4a7fffcc 	andi	r9,r9,65535
 402a69c:	2085883a 	add	r2,r4,r2
 402a6a0:	2a4b883a 	add	r5,r5,r9
 402a6a4:	40803636 	bltu	r8,r2,402a780 <__umoddi3+0x4c8>
 402a6a8:	40804d26 	beq	r8,r2,402a7e0 <__umoddi3+0x528>
 402a6ac:	4089c83a 	sub	r4,r8,r2
 402a6b0:	280f883a 	mov	r7,r5
 402a6b4:	81cfc83a 	sub	r7,r16,r7
 402a6b8:	81c7803a 	cmpltu	r3,r16,r7
 402a6bc:	20c7c83a 	sub	r3,r4,r3
 402a6c0:	1cc4983a 	sll	r2,r3,r19
 402a6c4:	3d0ed83a 	srl	r7,r7,r20
 402a6c8:	1d06d83a 	srl	r3,r3,r20
 402a6cc:	11c4b03a 	or	r2,r2,r7
 402a6d0:	003f9306 	br	402a520 <__alt_data_end+0xfffea520>
 402a6d4:	9ca6983a 	sll	r19,r19,r18
 402a6d8:	88e8d83a 	srl	r20,r17,r3
 402a6dc:	80c4d83a 	srl	r2,r16,r3
 402a6e0:	982cd43a 	srli	r22,r19,16
 402a6e4:	8ca2983a 	sll	r17,r17,r18
 402a6e8:	a009883a 	mov	r4,r20
 402a6ec:	b00b883a 	mov	r5,r22
 402a6f0:	1478b03a 	or	fp,r2,r17
 402a6f4:	402a94c0 	call	402a94c <__umodsi3>
 402a6f8:	a009883a 	mov	r4,r20
 402a6fc:	b00b883a 	mov	r5,r22
 402a700:	1023883a 	mov	r17,r2
 402a704:	402a8e80 	call	402a8e8 <__udivsi3>
 402a708:	9d7fffcc 	andi	r21,r19,65535
 402a70c:	880a943a 	slli	r5,r17,16
 402a710:	e008d43a 	srli	r4,fp,16
 402a714:	a885383a 	mul	r2,r21,r2
 402a718:	84a8983a 	sll	r20,r16,r18
 402a71c:	2148b03a 	or	r4,r4,r5
 402a720:	2080042e 	bgeu	r4,r2,402a734 <__umoddi3+0x47c>
 402a724:	24c9883a 	add	r4,r4,r19
 402a728:	24c00236 	bltu	r4,r19,402a734 <__umoddi3+0x47c>
 402a72c:	2080012e 	bgeu	r4,r2,402a734 <__umoddi3+0x47c>
 402a730:	24c9883a 	add	r4,r4,r19
 402a734:	20a3c83a 	sub	r17,r4,r2
 402a738:	b00b883a 	mov	r5,r22
 402a73c:	8809883a 	mov	r4,r17
 402a740:	402a94c0 	call	402a94c <__umodsi3>
 402a744:	102f883a 	mov	r23,r2
 402a748:	8809883a 	mov	r4,r17
 402a74c:	b00b883a 	mov	r5,r22
 402a750:	402a8e80 	call	402a8e8 <__udivsi3>
 402a754:	b82e943a 	slli	r23,r23,16
 402a758:	a885383a 	mul	r2,r21,r2
 402a75c:	e13fffcc 	andi	r4,fp,65535
 402a760:	25c8b03a 	or	r4,r4,r23
 402a764:	2080042e 	bgeu	r4,r2,402a778 <__umoddi3+0x4c0>
 402a768:	24c9883a 	add	r4,r4,r19
 402a76c:	24c00236 	bltu	r4,r19,402a778 <__umoddi3+0x4c0>
 402a770:	2080012e 	bgeu	r4,r2,402a778 <__umoddi3+0x4c0>
 402a774:	24c9883a 	add	r4,r4,r19
 402a778:	20a3c83a 	sub	r17,r4,r2
 402a77c:	003f4806 	br	402a4a0 <__alt_data_end+0xfffea4a0>
 402a780:	2c8fc83a 	sub	r7,r5,r18
 402a784:	1545c83a 	sub	r2,r2,r21
 402a788:	29cb803a 	cmpltu	r5,r5,r7
 402a78c:	1145c83a 	sub	r2,r2,r5
 402a790:	4089c83a 	sub	r4,r8,r2
 402a794:	003fc706 	br	402a6b4 <__alt_data_end+0xfffea6b4>
 402a798:	01000604 	movi	r4,24
 402a79c:	003f1806 	br	402a400 <__alt_data_end+0xfffea400>
 402a7a0:	00800604 	movi	r2,24
 402a7a4:	003f3206 	br	402a470 <__alt_data_end+0xfffea470>
 402a7a8:	01000604 	movi	r4,24
 402a7ac:	003ed906 	br	402a314 <__alt_data_end+0xfffea314>
 402a7b0:	413fa52e 	bgeu	r8,r4,402a648 <__alt_data_end+0xfffea648>
 402a7b4:	297fff84 	addi	r5,r5,-2
 402a7b8:	4551883a 	add	r8,r8,r21
 402a7bc:	003fa306 	br	402a64c <__alt_data_end+0xfffea64c>
 402a7c0:	15ff8b2e 	bgeu	r2,r23,402a5f0 <__alt_data_end+0xfffea5f0>
 402a7c4:	31bfff84 	addi	r6,r6,-2
 402a7c8:	1545883a 	add	r2,r2,r21
 402a7cc:	003f8906 	br	402a5f4 <__alt_data_end+0xfffea5f4>
 402a7d0:	24c9883a 	add	r4,r4,r19
 402a7d4:	003eee06 	br	402a390 <__alt_data_end+0xfffea390>
 402a7d8:	8005883a 	mov	r2,r16
 402a7dc:	003f1706 	br	402a43c <__alt_data_end+0xfffea43c>
 402a7e0:	817fe736 	bltu	r16,r5,402a780 <__alt_data_end+0xfffea780>
 402a7e4:	280f883a 	mov	r7,r5
 402a7e8:	0009883a 	mov	r4,zero
 402a7ec:	003fb106 	br	402a6b4 <__alt_data_end+0xfffea6b4>

0402a7f0 <__divsi3>:
 402a7f0:	20001b16 	blt	r4,zero,402a860 <__divsi3+0x70>
 402a7f4:	000f883a 	mov	r7,zero
 402a7f8:	28001616 	blt	r5,zero,402a854 <__divsi3+0x64>
 402a7fc:	200d883a 	mov	r6,r4
 402a800:	29001a2e 	bgeu	r5,r4,402a86c <__divsi3+0x7c>
 402a804:	00800804 	movi	r2,32
 402a808:	00c00044 	movi	r3,1
 402a80c:	00000106 	br	402a814 <__divsi3+0x24>
 402a810:	10000d26 	beq	r2,zero,402a848 <__divsi3+0x58>
 402a814:	294b883a 	add	r5,r5,r5
 402a818:	10bfffc4 	addi	r2,r2,-1
 402a81c:	18c7883a 	add	r3,r3,r3
 402a820:	293ffb36 	bltu	r5,r4,402a810 <__alt_data_end+0xfffea810>
 402a824:	0005883a 	mov	r2,zero
 402a828:	18000726 	beq	r3,zero,402a848 <__divsi3+0x58>
 402a82c:	0005883a 	mov	r2,zero
 402a830:	31400236 	bltu	r6,r5,402a83c <__divsi3+0x4c>
 402a834:	314dc83a 	sub	r6,r6,r5
 402a838:	10c4b03a 	or	r2,r2,r3
 402a83c:	1806d07a 	srli	r3,r3,1
 402a840:	280ad07a 	srli	r5,r5,1
 402a844:	183ffa1e 	bne	r3,zero,402a830 <__alt_data_end+0xfffea830>
 402a848:	38000126 	beq	r7,zero,402a850 <__divsi3+0x60>
 402a84c:	0085c83a 	sub	r2,zero,r2
 402a850:	f800283a 	ret
 402a854:	014bc83a 	sub	r5,zero,r5
 402a858:	39c0005c 	xori	r7,r7,1
 402a85c:	003fe706 	br	402a7fc <__alt_data_end+0xfffea7fc>
 402a860:	0109c83a 	sub	r4,zero,r4
 402a864:	01c00044 	movi	r7,1
 402a868:	003fe306 	br	402a7f8 <__alt_data_end+0xfffea7f8>
 402a86c:	00c00044 	movi	r3,1
 402a870:	003fee06 	br	402a82c <__alt_data_end+0xfffea82c>

0402a874 <__modsi3>:
 402a874:	20001716 	blt	r4,zero,402a8d4 <__modsi3+0x60>
 402a878:	000f883a 	mov	r7,zero
 402a87c:	2005883a 	mov	r2,r4
 402a880:	28001216 	blt	r5,zero,402a8cc <__modsi3+0x58>
 402a884:	2900162e 	bgeu	r5,r4,402a8e0 <__modsi3+0x6c>
 402a888:	01800804 	movi	r6,32
 402a88c:	00c00044 	movi	r3,1
 402a890:	00000106 	br	402a898 <__modsi3+0x24>
 402a894:	30000a26 	beq	r6,zero,402a8c0 <__modsi3+0x4c>
 402a898:	294b883a 	add	r5,r5,r5
 402a89c:	31bfffc4 	addi	r6,r6,-1
 402a8a0:	18c7883a 	add	r3,r3,r3
 402a8a4:	293ffb36 	bltu	r5,r4,402a894 <__alt_data_end+0xfffea894>
 402a8a8:	18000526 	beq	r3,zero,402a8c0 <__modsi3+0x4c>
 402a8ac:	1806d07a 	srli	r3,r3,1
 402a8b0:	11400136 	bltu	r2,r5,402a8b8 <__modsi3+0x44>
 402a8b4:	1145c83a 	sub	r2,r2,r5
 402a8b8:	280ad07a 	srli	r5,r5,1
 402a8bc:	183ffb1e 	bne	r3,zero,402a8ac <__alt_data_end+0xfffea8ac>
 402a8c0:	38000126 	beq	r7,zero,402a8c8 <__modsi3+0x54>
 402a8c4:	0085c83a 	sub	r2,zero,r2
 402a8c8:	f800283a 	ret
 402a8cc:	014bc83a 	sub	r5,zero,r5
 402a8d0:	003fec06 	br	402a884 <__alt_data_end+0xfffea884>
 402a8d4:	0109c83a 	sub	r4,zero,r4
 402a8d8:	01c00044 	movi	r7,1
 402a8dc:	003fe706 	br	402a87c <__alt_data_end+0xfffea87c>
 402a8e0:	00c00044 	movi	r3,1
 402a8e4:	003ff106 	br	402a8ac <__alt_data_end+0xfffea8ac>

0402a8e8 <__udivsi3>:
 402a8e8:	200d883a 	mov	r6,r4
 402a8ec:	2900152e 	bgeu	r5,r4,402a944 <__udivsi3+0x5c>
 402a8f0:	28001416 	blt	r5,zero,402a944 <__udivsi3+0x5c>
 402a8f4:	00800804 	movi	r2,32
 402a8f8:	00c00044 	movi	r3,1
 402a8fc:	00000206 	br	402a908 <__udivsi3+0x20>
 402a900:	10000e26 	beq	r2,zero,402a93c <__udivsi3+0x54>
 402a904:	28000516 	blt	r5,zero,402a91c <__udivsi3+0x34>
 402a908:	294b883a 	add	r5,r5,r5
 402a90c:	10bfffc4 	addi	r2,r2,-1
 402a910:	18c7883a 	add	r3,r3,r3
 402a914:	293ffa36 	bltu	r5,r4,402a900 <__alt_data_end+0xfffea900>
 402a918:	18000826 	beq	r3,zero,402a93c <__udivsi3+0x54>
 402a91c:	0005883a 	mov	r2,zero
 402a920:	31400236 	bltu	r6,r5,402a92c <__udivsi3+0x44>
 402a924:	314dc83a 	sub	r6,r6,r5
 402a928:	10c4b03a 	or	r2,r2,r3
 402a92c:	1806d07a 	srli	r3,r3,1
 402a930:	280ad07a 	srli	r5,r5,1
 402a934:	183ffa1e 	bne	r3,zero,402a920 <__alt_data_end+0xfffea920>
 402a938:	f800283a 	ret
 402a93c:	0005883a 	mov	r2,zero
 402a940:	f800283a 	ret
 402a944:	00c00044 	movi	r3,1
 402a948:	003ff406 	br	402a91c <__alt_data_end+0xfffea91c>

0402a94c <__umodsi3>:
 402a94c:	2005883a 	mov	r2,r4
 402a950:	2900122e 	bgeu	r5,r4,402a99c <__umodsi3+0x50>
 402a954:	28001116 	blt	r5,zero,402a99c <__umodsi3+0x50>
 402a958:	01800804 	movi	r6,32
 402a95c:	00c00044 	movi	r3,1
 402a960:	00000206 	br	402a96c <__umodsi3+0x20>
 402a964:	30000c26 	beq	r6,zero,402a998 <__umodsi3+0x4c>
 402a968:	28000516 	blt	r5,zero,402a980 <__umodsi3+0x34>
 402a96c:	294b883a 	add	r5,r5,r5
 402a970:	31bfffc4 	addi	r6,r6,-1
 402a974:	18c7883a 	add	r3,r3,r3
 402a978:	293ffa36 	bltu	r5,r4,402a964 <__alt_data_end+0xfffea964>
 402a97c:	18000626 	beq	r3,zero,402a998 <__umodsi3+0x4c>
 402a980:	1806d07a 	srli	r3,r3,1
 402a984:	11400136 	bltu	r2,r5,402a98c <__umodsi3+0x40>
 402a988:	1145c83a 	sub	r2,r2,r5
 402a98c:	280ad07a 	srli	r5,r5,1
 402a990:	183ffb1e 	bne	r3,zero,402a980 <__alt_data_end+0xfffea980>
 402a994:	f800283a 	ret
 402a998:	f800283a 	ret
 402a99c:	00c00044 	movi	r3,1
 402a9a0:	003ff706 	br	402a980 <__alt_data_end+0xfffea980>

0402a9a4 <__adddf3>:
 402a9a4:	02c00434 	movhi	r11,16
 402a9a8:	5affffc4 	addi	r11,r11,-1
 402a9ac:	2806d7fa 	srli	r3,r5,31
 402a9b0:	2ad4703a 	and	r10,r5,r11
 402a9b4:	3ad2703a 	and	r9,r7,r11
 402a9b8:	3804d53a 	srli	r2,r7,20
 402a9bc:	3018d77a 	srli	r12,r6,29
 402a9c0:	280ad53a 	srli	r5,r5,20
 402a9c4:	501490fa 	slli	r10,r10,3
 402a9c8:	2010d77a 	srli	r8,r4,29
 402a9cc:	481290fa 	slli	r9,r9,3
 402a9d0:	380ed7fa 	srli	r7,r7,31
 402a9d4:	defffb04 	addi	sp,sp,-20
 402a9d8:	dc800215 	stw	r18,8(sp)
 402a9dc:	dc400115 	stw	r17,4(sp)
 402a9e0:	dc000015 	stw	r16,0(sp)
 402a9e4:	dfc00415 	stw	ra,16(sp)
 402a9e8:	dcc00315 	stw	r19,12(sp)
 402a9ec:	1c803fcc 	andi	r18,r3,255
 402a9f0:	2c01ffcc 	andi	r16,r5,2047
 402a9f4:	5210b03a 	or	r8,r10,r8
 402a9f8:	202290fa 	slli	r17,r4,3
 402a9fc:	1081ffcc 	andi	r2,r2,2047
 402aa00:	4b12b03a 	or	r9,r9,r12
 402aa04:	300c90fa 	slli	r6,r6,3
 402aa08:	91c07526 	beq	r18,r7,402abe0 <__adddf3+0x23c>
 402aa0c:	8087c83a 	sub	r3,r16,r2
 402aa10:	00c0ab0e 	bge	zero,r3,402acc0 <__adddf3+0x31c>
 402aa14:	10002a1e 	bne	r2,zero,402aac0 <__adddf3+0x11c>
 402aa18:	4984b03a 	or	r2,r9,r6
 402aa1c:	1000961e 	bne	r2,zero,402ac78 <__adddf3+0x2d4>
 402aa20:	888001cc 	andi	r2,r17,7
 402aa24:	10000726 	beq	r2,zero,402aa44 <__adddf3+0xa0>
 402aa28:	888003cc 	andi	r2,r17,15
 402aa2c:	00c00104 	movi	r3,4
 402aa30:	10c00426 	beq	r2,r3,402aa44 <__adddf3+0xa0>
 402aa34:	88c7883a 	add	r3,r17,r3
 402aa38:	1c63803a 	cmpltu	r17,r3,r17
 402aa3c:	4451883a 	add	r8,r8,r17
 402aa40:	1823883a 	mov	r17,r3
 402aa44:	4080202c 	andhi	r2,r8,128
 402aa48:	10005926 	beq	r2,zero,402abb0 <__adddf3+0x20c>
 402aa4c:	84000044 	addi	r16,r16,1
 402aa50:	0081ffc4 	movi	r2,2047
 402aa54:	8080ba26 	beq	r16,r2,402ad40 <__adddf3+0x39c>
 402aa58:	00bfe034 	movhi	r2,65408
 402aa5c:	10bfffc4 	addi	r2,r2,-1
 402aa60:	4090703a 	and	r8,r8,r2
 402aa64:	4004977a 	slli	r2,r8,29
 402aa68:	4010927a 	slli	r8,r8,9
 402aa6c:	8822d0fa 	srli	r17,r17,3
 402aa70:	8401ffcc 	andi	r16,r16,2047
 402aa74:	4010d33a 	srli	r8,r8,12
 402aa78:	9007883a 	mov	r3,r18
 402aa7c:	1444b03a 	or	r2,r2,r17
 402aa80:	8401ffcc 	andi	r16,r16,2047
 402aa84:	8020953a 	slli	r16,r16,20
 402aa88:	18c03fcc 	andi	r3,r3,255
 402aa8c:	01000434 	movhi	r4,16
 402aa90:	213fffc4 	addi	r4,r4,-1
 402aa94:	180697fa 	slli	r3,r3,31
 402aa98:	4110703a 	and	r8,r8,r4
 402aa9c:	4410b03a 	or	r8,r8,r16
 402aaa0:	40c6b03a 	or	r3,r8,r3
 402aaa4:	dfc00417 	ldw	ra,16(sp)
 402aaa8:	dcc00317 	ldw	r19,12(sp)
 402aaac:	dc800217 	ldw	r18,8(sp)
 402aab0:	dc400117 	ldw	r17,4(sp)
 402aab4:	dc000017 	ldw	r16,0(sp)
 402aab8:	dec00504 	addi	sp,sp,20
 402aabc:	f800283a 	ret
 402aac0:	0081ffc4 	movi	r2,2047
 402aac4:	80bfd626 	beq	r16,r2,402aa20 <__alt_data_end+0xfffeaa20>
 402aac8:	4a402034 	orhi	r9,r9,128
 402aacc:	00800e04 	movi	r2,56
 402aad0:	10c09f16 	blt	r2,r3,402ad50 <__adddf3+0x3ac>
 402aad4:	008007c4 	movi	r2,31
 402aad8:	10c0c216 	blt	r2,r3,402ade4 <__adddf3+0x440>
 402aadc:	00800804 	movi	r2,32
 402aae0:	10c5c83a 	sub	r2,r2,r3
 402aae4:	488a983a 	sll	r5,r9,r2
 402aae8:	30c8d83a 	srl	r4,r6,r3
 402aaec:	3084983a 	sll	r2,r6,r2
 402aaf0:	48c6d83a 	srl	r3,r9,r3
 402aaf4:	290cb03a 	or	r6,r5,r4
 402aaf8:	1004c03a 	cmpne	r2,r2,zero
 402aafc:	308cb03a 	or	r6,r6,r2
 402ab00:	898dc83a 	sub	r6,r17,r6
 402ab04:	89a3803a 	cmpltu	r17,r17,r6
 402ab08:	40d1c83a 	sub	r8,r8,r3
 402ab0c:	4451c83a 	sub	r8,r8,r17
 402ab10:	3023883a 	mov	r17,r6
 402ab14:	4080202c 	andhi	r2,r8,128
 402ab18:	10002326 	beq	r2,zero,402aba8 <__adddf3+0x204>
 402ab1c:	04c02034 	movhi	r19,128
 402ab20:	9cffffc4 	addi	r19,r19,-1
 402ab24:	44e6703a 	and	r19,r8,r19
 402ab28:	98007626 	beq	r19,zero,402ad04 <__adddf3+0x360>
 402ab2c:	9809883a 	mov	r4,r19
 402ab30:	402cfa80 	call	402cfa8 <__clzsi2>
 402ab34:	10fffe04 	addi	r3,r2,-8
 402ab38:	010007c4 	movi	r4,31
 402ab3c:	20c07716 	blt	r4,r3,402ad1c <__adddf3+0x378>
 402ab40:	00800804 	movi	r2,32
 402ab44:	10c5c83a 	sub	r2,r2,r3
 402ab48:	8884d83a 	srl	r2,r17,r2
 402ab4c:	98d0983a 	sll	r8,r19,r3
 402ab50:	88e2983a 	sll	r17,r17,r3
 402ab54:	1204b03a 	or	r2,r2,r8
 402ab58:	1c007416 	blt	r3,r16,402ad2c <__adddf3+0x388>
 402ab5c:	1c21c83a 	sub	r16,r3,r16
 402ab60:	82000044 	addi	r8,r16,1
 402ab64:	00c007c4 	movi	r3,31
 402ab68:	1a009116 	blt	r3,r8,402adb0 <__adddf3+0x40c>
 402ab6c:	00c00804 	movi	r3,32
 402ab70:	1a07c83a 	sub	r3,r3,r8
 402ab74:	8a08d83a 	srl	r4,r17,r8
 402ab78:	88e2983a 	sll	r17,r17,r3
 402ab7c:	10c6983a 	sll	r3,r2,r3
 402ab80:	1210d83a 	srl	r8,r2,r8
 402ab84:	8804c03a 	cmpne	r2,r17,zero
 402ab88:	1906b03a 	or	r3,r3,r4
 402ab8c:	18a2b03a 	or	r17,r3,r2
 402ab90:	0021883a 	mov	r16,zero
 402ab94:	003fa206 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402ab98:	1890b03a 	or	r8,r3,r2
 402ab9c:	40017d26 	beq	r8,zero,402b194 <__adddf3+0x7f0>
 402aba0:	1011883a 	mov	r8,r2
 402aba4:	1823883a 	mov	r17,r3
 402aba8:	888001cc 	andi	r2,r17,7
 402abac:	103f9e1e 	bne	r2,zero,402aa28 <__alt_data_end+0xfffeaa28>
 402abb0:	4004977a 	slli	r2,r8,29
 402abb4:	8822d0fa 	srli	r17,r17,3
 402abb8:	4010d0fa 	srli	r8,r8,3
 402abbc:	9007883a 	mov	r3,r18
 402abc0:	1444b03a 	or	r2,r2,r17
 402abc4:	0101ffc4 	movi	r4,2047
 402abc8:	81002426 	beq	r16,r4,402ac5c <__adddf3+0x2b8>
 402abcc:	8120703a 	and	r16,r16,r4
 402abd0:	01000434 	movhi	r4,16
 402abd4:	213fffc4 	addi	r4,r4,-1
 402abd8:	4110703a 	and	r8,r8,r4
 402abdc:	003fa806 	br	402aa80 <__alt_data_end+0xfffeaa80>
 402abe0:	8089c83a 	sub	r4,r16,r2
 402abe4:	01005e0e 	bge	zero,r4,402ad60 <__adddf3+0x3bc>
 402abe8:	10002b26 	beq	r2,zero,402ac98 <__adddf3+0x2f4>
 402abec:	0081ffc4 	movi	r2,2047
 402abf0:	80bf8b26 	beq	r16,r2,402aa20 <__alt_data_end+0xfffeaa20>
 402abf4:	4a402034 	orhi	r9,r9,128
 402abf8:	00800e04 	movi	r2,56
 402abfc:	1100a40e 	bge	r2,r4,402ae90 <__adddf3+0x4ec>
 402ac00:	498cb03a 	or	r6,r9,r6
 402ac04:	300ac03a 	cmpne	r5,r6,zero
 402ac08:	0013883a 	mov	r9,zero
 402ac0c:	2c4b883a 	add	r5,r5,r17
 402ac10:	2c63803a 	cmpltu	r17,r5,r17
 402ac14:	4a11883a 	add	r8,r9,r8
 402ac18:	8a11883a 	add	r8,r17,r8
 402ac1c:	2823883a 	mov	r17,r5
 402ac20:	4080202c 	andhi	r2,r8,128
 402ac24:	103fe026 	beq	r2,zero,402aba8 <__alt_data_end+0xfffeaba8>
 402ac28:	84000044 	addi	r16,r16,1
 402ac2c:	0081ffc4 	movi	r2,2047
 402ac30:	8080d226 	beq	r16,r2,402af7c <__adddf3+0x5d8>
 402ac34:	00bfe034 	movhi	r2,65408
 402ac38:	10bfffc4 	addi	r2,r2,-1
 402ac3c:	4090703a 	and	r8,r8,r2
 402ac40:	880ad07a 	srli	r5,r17,1
 402ac44:	400897fa 	slli	r4,r8,31
 402ac48:	88c0004c 	andi	r3,r17,1
 402ac4c:	28e2b03a 	or	r17,r5,r3
 402ac50:	4010d07a 	srli	r8,r8,1
 402ac54:	2462b03a 	or	r17,r4,r17
 402ac58:	003f7106 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402ac5c:	4088b03a 	or	r4,r8,r2
 402ac60:	20014526 	beq	r4,zero,402b178 <__adddf3+0x7d4>
 402ac64:	01000434 	movhi	r4,16
 402ac68:	42000234 	orhi	r8,r8,8
 402ac6c:	213fffc4 	addi	r4,r4,-1
 402ac70:	4110703a 	and	r8,r8,r4
 402ac74:	003f8206 	br	402aa80 <__alt_data_end+0xfffeaa80>
 402ac78:	18ffffc4 	addi	r3,r3,-1
 402ac7c:	1800491e 	bne	r3,zero,402ada4 <__adddf3+0x400>
 402ac80:	898bc83a 	sub	r5,r17,r6
 402ac84:	8963803a 	cmpltu	r17,r17,r5
 402ac88:	4251c83a 	sub	r8,r8,r9
 402ac8c:	4451c83a 	sub	r8,r8,r17
 402ac90:	2823883a 	mov	r17,r5
 402ac94:	003f9f06 	br	402ab14 <__alt_data_end+0xfffeab14>
 402ac98:	4984b03a 	or	r2,r9,r6
 402ac9c:	103f6026 	beq	r2,zero,402aa20 <__alt_data_end+0xfffeaa20>
 402aca0:	213fffc4 	addi	r4,r4,-1
 402aca4:	2000931e 	bne	r4,zero,402aef4 <__adddf3+0x550>
 402aca8:	898d883a 	add	r6,r17,r6
 402acac:	3463803a 	cmpltu	r17,r6,r17
 402acb0:	4251883a 	add	r8,r8,r9
 402acb4:	8a11883a 	add	r8,r17,r8
 402acb8:	3023883a 	mov	r17,r6
 402acbc:	003fd806 	br	402ac20 <__alt_data_end+0xfffeac20>
 402acc0:	1800541e 	bne	r3,zero,402ae14 <__adddf3+0x470>
 402acc4:	80800044 	addi	r2,r16,1
 402acc8:	1081ffcc 	andi	r2,r2,2047
 402accc:	00c00044 	movi	r3,1
 402acd0:	1880a00e 	bge	r3,r2,402af54 <__adddf3+0x5b0>
 402acd4:	8989c83a 	sub	r4,r17,r6
 402acd8:	8905803a 	cmpltu	r2,r17,r4
 402acdc:	4267c83a 	sub	r19,r8,r9
 402ace0:	98a7c83a 	sub	r19,r19,r2
 402ace4:	9880202c 	andhi	r2,r19,128
 402ace8:	10006326 	beq	r2,zero,402ae78 <__adddf3+0x4d4>
 402acec:	3463c83a 	sub	r17,r6,r17
 402acf0:	4a07c83a 	sub	r3,r9,r8
 402acf4:	344d803a 	cmpltu	r6,r6,r17
 402acf8:	19a7c83a 	sub	r19,r3,r6
 402acfc:	3825883a 	mov	r18,r7
 402ad00:	983f8a1e 	bne	r19,zero,402ab2c <__alt_data_end+0xfffeab2c>
 402ad04:	8809883a 	mov	r4,r17
 402ad08:	402cfa80 	call	402cfa8 <__clzsi2>
 402ad0c:	10800804 	addi	r2,r2,32
 402ad10:	10fffe04 	addi	r3,r2,-8
 402ad14:	010007c4 	movi	r4,31
 402ad18:	20ff890e 	bge	r4,r3,402ab40 <__alt_data_end+0xfffeab40>
 402ad1c:	10bff604 	addi	r2,r2,-40
 402ad20:	8884983a 	sll	r2,r17,r2
 402ad24:	0023883a 	mov	r17,zero
 402ad28:	1c3f8c0e 	bge	r3,r16,402ab5c <__alt_data_end+0xfffeab5c>
 402ad2c:	023fe034 	movhi	r8,65408
 402ad30:	423fffc4 	addi	r8,r8,-1
 402ad34:	80e1c83a 	sub	r16,r16,r3
 402ad38:	1210703a 	and	r8,r2,r8
 402ad3c:	003f3806 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402ad40:	9007883a 	mov	r3,r18
 402ad44:	0011883a 	mov	r8,zero
 402ad48:	0005883a 	mov	r2,zero
 402ad4c:	003f4c06 	br	402aa80 <__alt_data_end+0xfffeaa80>
 402ad50:	498cb03a 	or	r6,r9,r6
 402ad54:	300cc03a 	cmpne	r6,r6,zero
 402ad58:	0007883a 	mov	r3,zero
 402ad5c:	003f6806 	br	402ab00 <__alt_data_end+0xfffeab00>
 402ad60:	20009c1e 	bne	r4,zero,402afd4 <__adddf3+0x630>
 402ad64:	80800044 	addi	r2,r16,1
 402ad68:	1141ffcc 	andi	r5,r2,2047
 402ad6c:	01000044 	movi	r4,1
 402ad70:	2140670e 	bge	r4,r5,402af10 <__adddf3+0x56c>
 402ad74:	0101ffc4 	movi	r4,2047
 402ad78:	11007f26 	beq	r2,r4,402af78 <__adddf3+0x5d4>
 402ad7c:	898d883a 	add	r6,r17,r6
 402ad80:	4247883a 	add	r3,r8,r9
 402ad84:	3451803a 	cmpltu	r8,r6,r17
 402ad88:	40d1883a 	add	r8,r8,r3
 402ad8c:	402297fa 	slli	r17,r8,31
 402ad90:	300cd07a 	srli	r6,r6,1
 402ad94:	4010d07a 	srli	r8,r8,1
 402ad98:	1021883a 	mov	r16,r2
 402ad9c:	89a2b03a 	or	r17,r17,r6
 402ada0:	003f1f06 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402ada4:	0081ffc4 	movi	r2,2047
 402ada8:	80bf481e 	bne	r16,r2,402aacc <__alt_data_end+0xfffeaacc>
 402adac:	003f1c06 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402adb0:	843ff844 	addi	r16,r16,-31
 402adb4:	01000804 	movi	r4,32
 402adb8:	1406d83a 	srl	r3,r2,r16
 402adbc:	41005026 	beq	r8,r4,402af00 <__adddf3+0x55c>
 402adc0:	01001004 	movi	r4,64
 402adc4:	2211c83a 	sub	r8,r4,r8
 402adc8:	1204983a 	sll	r2,r2,r8
 402adcc:	88a2b03a 	or	r17,r17,r2
 402add0:	8822c03a 	cmpne	r17,r17,zero
 402add4:	1c62b03a 	or	r17,r3,r17
 402add8:	0011883a 	mov	r8,zero
 402addc:	0021883a 	mov	r16,zero
 402ade0:	003f7106 	br	402aba8 <__alt_data_end+0xfffeaba8>
 402ade4:	193ff804 	addi	r4,r3,-32
 402ade8:	00800804 	movi	r2,32
 402adec:	4908d83a 	srl	r4,r9,r4
 402adf0:	18804526 	beq	r3,r2,402af08 <__adddf3+0x564>
 402adf4:	00801004 	movi	r2,64
 402adf8:	10c5c83a 	sub	r2,r2,r3
 402adfc:	4886983a 	sll	r3,r9,r2
 402ae00:	198cb03a 	or	r6,r3,r6
 402ae04:	300cc03a 	cmpne	r6,r6,zero
 402ae08:	218cb03a 	or	r6,r4,r6
 402ae0c:	0007883a 	mov	r3,zero
 402ae10:	003f3b06 	br	402ab00 <__alt_data_end+0xfffeab00>
 402ae14:	80002a26 	beq	r16,zero,402aec0 <__adddf3+0x51c>
 402ae18:	0101ffc4 	movi	r4,2047
 402ae1c:	11006826 	beq	r2,r4,402afc0 <__adddf3+0x61c>
 402ae20:	00c7c83a 	sub	r3,zero,r3
 402ae24:	42002034 	orhi	r8,r8,128
 402ae28:	01000e04 	movi	r4,56
 402ae2c:	20c07c16 	blt	r4,r3,402b020 <__adddf3+0x67c>
 402ae30:	010007c4 	movi	r4,31
 402ae34:	20c0da16 	blt	r4,r3,402b1a0 <__adddf3+0x7fc>
 402ae38:	01000804 	movi	r4,32
 402ae3c:	20c9c83a 	sub	r4,r4,r3
 402ae40:	4114983a 	sll	r10,r8,r4
 402ae44:	88cad83a 	srl	r5,r17,r3
 402ae48:	8908983a 	sll	r4,r17,r4
 402ae4c:	40c6d83a 	srl	r3,r8,r3
 402ae50:	5162b03a 	or	r17,r10,r5
 402ae54:	2008c03a 	cmpne	r4,r4,zero
 402ae58:	8922b03a 	or	r17,r17,r4
 402ae5c:	3463c83a 	sub	r17,r6,r17
 402ae60:	48c7c83a 	sub	r3,r9,r3
 402ae64:	344d803a 	cmpltu	r6,r6,r17
 402ae68:	1991c83a 	sub	r8,r3,r6
 402ae6c:	1021883a 	mov	r16,r2
 402ae70:	3825883a 	mov	r18,r7
 402ae74:	003f2706 	br	402ab14 <__alt_data_end+0xfffeab14>
 402ae78:	24d0b03a 	or	r8,r4,r19
 402ae7c:	40001b1e 	bne	r8,zero,402aeec <__adddf3+0x548>
 402ae80:	0005883a 	mov	r2,zero
 402ae84:	0007883a 	mov	r3,zero
 402ae88:	0021883a 	mov	r16,zero
 402ae8c:	003f4d06 	br	402abc4 <__alt_data_end+0xfffeabc4>
 402ae90:	008007c4 	movi	r2,31
 402ae94:	11003c16 	blt	r2,r4,402af88 <__adddf3+0x5e4>
 402ae98:	00800804 	movi	r2,32
 402ae9c:	1105c83a 	sub	r2,r2,r4
 402aea0:	488e983a 	sll	r7,r9,r2
 402aea4:	310ad83a 	srl	r5,r6,r4
 402aea8:	3084983a 	sll	r2,r6,r2
 402aeac:	4912d83a 	srl	r9,r9,r4
 402aeb0:	394ab03a 	or	r5,r7,r5
 402aeb4:	1004c03a 	cmpne	r2,r2,zero
 402aeb8:	288ab03a 	or	r5,r5,r2
 402aebc:	003f5306 	br	402ac0c <__alt_data_end+0xfffeac0c>
 402aec0:	4448b03a 	or	r4,r8,r17
 402aec4:	20003e26 	beq	r4,zero,402afc0 <__adddf3+0x61c>
 402aec8:	00c6303a 	nor	r3,zero,r3
 402aecc:	18003a1e 	bne	r3,zero,402afb8 <__adddf3+0x614>
 402aed0:	3463c83a 	sub	r17,r6,r17
 402aed4:	4a07c83a 	sub	r3,r9,r8
 402aed8:	344d803a 	cmpltu	r6,r6,r17
 402aedc:	1991c83a 	sub	r8,r3,r6
 402aee0:	1021883a 	mov	r16,r2
 402aee4:	3825883a 	mov	r18,r7
 402aee8:	003f0a06 	br	402ab14 <__alt_data_end+0xfffeab14>
 402aeec:	2023883a 	mov	r17,r4
 402aef0:	003f0d06 	br	402ab28 <__alt_data_end+0xfffeab28>
 402aef4:	0081ffc4 	movi	r2,2047
 402aef8:	80bf3f1e 	bne	r16,r2,402abf8 <__alt_data_end+0xfffeabf8>
 402aefc:	003ec806 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402af00:	0005883a 	mov	r2,zero
 402af04:	003fb106 	br	402adcc <__alt_data_end+0xfffeadcc>
 402af08:	0007883a 	mov	r3,zero
 402af0c:	003fbc06 	br	402ae00 <__alt_data_end+0xfffeae00>
 402af10:	4444b03a 	or	r2,r8,r17
 402af14:	8000871e 	bne	r16,zero,402b134 <__adddf3+0x790>
 402af18:	1000ba26 	beq	r2,zero,402b204 <__adddf3+0x860>
 402af1c:	4984b03a 	or	r2,r9,r6
 402af20:	103ebf26 	beq	r2,zero,402aa20 <__alt_data_end+0xfffeaa20>
 402af24:	8985883a 	add	r2,r17,r6
 402af28:	4247883a 	add	r3,r8,r9
 402af2c:	1451803a 	cmpltu	r8,r2,r17
 402af30:	40d1883a 	add	r8,r8,r3
 402af34:	40c0202c 	andhi	r3,r8,128
 402af38:	1023883a 	mov	r17,r2
 402af3c:	183f1a26 	beq	r3,zero,402aba8 <__alt_data_end+0xfffeaba8>
 402af40:	00bfe034 	movhi	r2,65408
 402af44:	10bfffc4 	addi	r2,r2,-1
 402af48:	2021883a 	mov	r16,r4
 402af4c:	4090703a 	and	r8,r8,r2
 402af50:	003eb306 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402af54:	4444b03a 	or	r2,r8,r17
 402af58:	8000291e 	bne	r16,zero,402b000 <__adddf3+0x65c>
 402af5c:	10004b1e 	bne	r2,zero,402b08c <__adddf3+0x6e8>
 402af60:	4990b03a 	or	r8,r9,r6
 402af64:	40008b26 	beq	r8,zero,402b194 <__adddf3+0x7f0>
 402af68:	4811883a 	mov	r8,r9
 402af6c:	3023883a 	mov	r17,r6
 402af70:	3825883a 	mov	r18,r7
 402af74:	003eaa06 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402af78:	1021883a 	mov	r16,r2
 402af7c:	0011883a 	mov	r8,zero
 402af80:	0005883a 	mov	r2,zero
 402af84:	003f0f06 	br	402abc4 <__alt_data_end+0xfffeabc4>
 402af88:	217ff804 	addi	r5,r4,-32
 402af8c:	00800804 	movi	r2,32
 402af90:	494ad83a 	srl	r5,r9,r5
 402af94:	20807d26 	beq	r4,r2,402b18c <__adddf3+0x7e8>
 402af98:	00801004 	movi	r2,64
 402af9c:	1109c83a 	sub	r4,r2,r4
 402afa0:	4912983a 	sll	r9,r9,r4
 402afa4:	498cb03a 	or	r6,r9,r6
 402afa8:	300cc03a 	cmpne	r6,r6,zero
 402afac:	298ab03a 	or	r5,r5,r6
 402afb0:	0013883a 	mov	r9,zero
 402afb4:	003f1506 	br	402ac0c <__alt_data_end+0xfffeac0c>
 402afb8:	0101ffc4 	movi	r4,2047
 402afbc:	113f9a1e 	bne	r2,r4,402ae28 <__alt_data_end+0xfffeae28>
 402afc0:	4811883a 	mov	r8,r9
 402afc4:	3023883a 	mov	r17,r6
 402afc8:	1021883a 	mov	r16,r2
 402afcc:	3825883a 	mov	r18,r7
 402afd0:	003e9306 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402afd4:	8000161e 	bne	r16,zero,402b030 <__adddf3+0x68c>
 402afd8:	444ab03a 	or	r5,r8,r17
 402afdc:	28005126 	beq	r5,zero,402b124 <__adddf3+0x780>
 402afe0:	0108303a 	nor	r4,zero,r4
 402afe4:	20004d1e 	bne	r4,zero,402b11c <__adddf3+0x778>
 402afe8:	89a3883a 	add	r17,r17,r6
 402afec:	4253883a 	add	r9,r8,r9
 402aff0:	898d803a 	cmpltu	r6,r17,r6
 402aff4:	3251883a 	add	r8,r6,r9
 402aff8:	1021883a 	mov	r16,r2
 402affc:	003f0806 	br	402ac20 <__alt_data_end+0xfffeac20>
 402b000:	1000301e 	bne	r2,zero,402b0c4 <__adddf3+0x720>
 402b004:	4984b03a 	or	r2,r9,r6
 402b008:	10007126 	beq	r2,zero,402b1d0 <__adddf3+0x82c>
 402b00c:	4811883a 	mov	r8,r9
 402b010:	3023883a 	mov	r17,r6
 402b014:	3825883a 	mov	r18,r7
 402b018:	0401ffc4 	movi	r16,2047
 402b01c:	003e8006 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b020:	4462b03a 	or	r17,r8,r17
 402b024:	8822c03a 	cmpne	r17,r17,zero
 402b028:	0007883a 	mov	r3,zero
 402b02c:	003f8b06 	br	402ae5c <__alt_data_end+0xfffeae5c>
 402b030:	0141ffc4 	movi	r5,2047
 402b034:	11403b26 	beq	r2,r5,402b124 <__adddf3+0x780>
 402b038:	0109c83a 	sub	r4,zero,r4
 402b03c:	42002034 	orhi	r8,r8,128
 402b040:	01400e04 	movi	r5,56
 402b044:	29006716 	blt	r5,r4,402b1e4 <__adddf3+0x840>
 402b048:	014007c4 	movi	r5,31
 402b04c:	29007016 	blt	r5,r4,402b210 <__adddf3+0x86c>
 402b050:	01400804 	movi	r5,32
 402b054:	290bc83a 	sub	r5,r5,r4
 402b058:	4154983a 	sll	r10,r8,r5
 402b05c:	890ed83a 	srl	r7,r17,r4
 402b060:	894a983a 	sll	r5,r17,r5
 402b064:	4108d83a 	srl	r4,r8,r4
 402b068:	51e2b03a 	or	r17,r10,r7
 402b06c:	280ac03a 	cmpne	r5,r5,zero
 402b070:	8962b03a 	or	r17,r17,r5
 402b074:	89a3883a 	add	r17,r17,r6
 402b078:	2253883a 	add	r9,r4,r9
 402b07c:	898d803a 	cmpltu	r6,r17,r6
 402b080:	3251883a 	add	r8,r6,r9
 402b084:	1021883a 	mov	r16,r2
 402b088:	003ee506 	br	402ac20 <__alt_data_end+0xfffeac20>
 402b08c:	4984b03a 	or	r2,r9,r6
 402b090:	103e6326 	beq	r2,zero,402aa20 <__alt_data_end+0xfffeaa20>
 402b094:	8987c83a 	sub	r3,r17,r6
 402b098:	88c9803a 	cmpltu	r4,r17,r3
 402b09c:	4245c83a 	sub	r2,r8,r9
 402b0a0:	1105c83a 	sub	r2,r2,r4
 402b0a4:	1100202c 	andhi	r4,r2,128
 402b0a8:	203ebb26 	beq	r4,zero,402ab98 <__alt_data_end+0xfffeab98>
 402b0ac:	3463c83a 	sub	r17,r6,r17
 402b0b0:	4a07c83a 	sub	r3,r9,r8
 402b0b4:	344d803a 	cmpltu	r6,r6,r17
 402b0b8:	1991c83a 	sub	r8,r3,r6
 402b0bc:	3825883a 	mov	r18,r7
 402b0c0:	003e5706 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b0c4:	4984b03a 	or	r2,r9,r6
 402b0c8:	10002e26 	beq	r2,zero,402b184 <__adddf3+0x7e0>
 402b0cc:	4004d0fa 	srli	r2,r8,3
 402b0d0:	8822d0fa 	srli	r17,r17,3
 402b0d4:	4010977a 	slli	r8,r8,29
 402b0d8:	10c0022c 	andhi	r3,r2,8
 402b0dc:	4462b03a 	or	r17,r8,r17
 402b0e0:	18000826 	beq	r3,zero,402b104 <__adddf3+0x760>
 402b0e4:	4808d0fa 	srli	r4,r9,3
 402b0e8:	20c0022c 	andhi	r3,r4,8
 402b0ec:	1800051e 	bne	r3,zero,402b104 <__adddf3+0x760>
 402b0f0:	300cd0fa 	srli	r6,r6,3
 402b0f4:	4806977a 	slli	r3,r9,29
 402b0f8:	2005883a 	mov	r2,r4
 402b0fc:	3825883a 	mov	r18,r7
 402b100:	19a2b03a 	or	r17,r3,r6
 402b104:	8810d77a 	srli	r8,r17,29
 402b108:	100490fa 	slli	r2,r2,3
 402b10c:	882290fa 	slli	r17,r17,3
 402b110:	0401ffc4 	movi	r16,2047
 402b114:	4090b03a 	or	r8,r8,r2
 402b118:	003e4106 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b11c:	0141ffc4 	movi	r5,2047
 402b120:	117fc71e 	bne	r2,r5,402b040 <__alt_data_end+0xfffeb040>
 402b124:	4811883a 	mov	r8,r9
 402b128:	3023883a 	mov	r17,r6
 402b12c:	1021883a 	mov	r16,r2
 402b130:	003e3b06 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b134:	10002f26 	beq	r2,zero,402b1f4 <__adddf3+0x850>
 402b138:	4984b03a 	or	r2,r9,r6
 402b13c:	10001126 	beq	r2,zero,402b184 <__adddf3+0x7e0>
 402b140:	4004d0fa 	srli	r2,r8,3
 402b144:	8822d0fa 	srli	r17,r17,3
 402b148:	4010977a 	slli	r8,r8,29
 402b14c:	10c0022c 	andhi	r3,r2,8
 402b150:	4462b03a 	or	r17,r8,r17
 402b154:	183feb26 	beq	r3,zero,402b104 <__alt_data_end+0xfffeb104>
 402b158:	4808d0fa 	srli	r4,r9,3
 402b15c:	20c0022c 	andhi	r3,r4,8
 402b160:	183fe81e 	bne	r3,zero,402b104 <__alt_data_end+0xfffeb104>
 402b164:	300cd0fa 	srli	r6,r6,3
 402b168:	4806977a 	slli	r3,r9,29
 402b16c:	2005883a 	mov	r2,r4
 402b170:	19a2b03a 	or	r17,r3,r6
 402b174:	003fe306 	br	402b104 <__alt_data_end+0xfffeb104>
 402b178:	0011883a 	mov	r8,zero
 402b17c:	0005883a 	mov	r2,zero
 402b180:	003e3f06 	br	402aa80 <__alt_data_end+0xfffeaa80>
 402b184:	0401ffc4 	movi	r16,2047
 402b188:	003e2506 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b18c:	0013883a 	mov	r9,zero
 402b190:	003f8406 	br	402afa4 <__alt_data_end+0xfffeafa4>
 402b194:	0005883a 	mov	r2,zero
 402b198:	0007883a 	mov	r3,zero
 402b19c:	003e8906 	br	402abc4 <__alt_data_end+0xfffeabc4>
 402b1a0:	197ff804 	addi	r5,r3,-32
 402b1a4:	01000804 	movi	r4,32
 402b1a8:	414ad83a 	srl	r5,r8,r5
 402b1ac:	19002426 	beq	r3,r4,402b240 <__adddf3+0x89c>
 402b1b0:	01001004 	movi	r4,64
 402b1b4:	20c7c83a 	sub	r3,r4,r3
 402b1b8:	40c6983a 	sll	r3,r8,r3
 402b1bc:	1c46b03a 	or	r3,r3,r17
 402b1c0:	1806c03a 	cmpne	r3,r3,zero
 402b1c4:	28e2b03a 	or	r17,r5,r3
 402b1c8:	0007883a 	mov	r3,zero
 402b1cc:	003f2306 	br	402ae5c <__alt_data_end+0xfffeae5c>
 402b1d0:	0007883a 	mov	r3,zero
 402b1d4:	5811883a 	mov	r8,r11
 402b1d8:	00bfffc4 	movi	r2,-1
 402b1dc:	0401ffc4 	movi	r16,2047
 402b1e0:	003e7806 	br	402abc4 <__alt_data_end+0xfffeabc4>
 402b1e4:	4462b03a 	or	r17,r8,r17
 402b1e8:	8822c03a 	cmpne	r17,r17,zero
 402b1ec:	0009883a 	mov	r4,zero
 402b1f0:	003fa006 	br	402b074 <__alt_data_end+0xfffeb074>
 402b1f4:	4811883a 	mov	r8,r9
 402b1f8:	3023883a 	mov	r17,r6
 402b1fc:	0401ffc4 	movi	r16,2047
 402b200:	003e0706 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b204:	4811883a 	mov	r8,r9
 402b208:	3023883a 	mov	r17,r6
 402b20c:	003e0406 	br	402aa20 <__alt_data_end+0xfffeaa20>
 402b210:	21fff804 	addi	r7,r4,-32
 402b214:	01400804 	movi	r5,32
 402b218:	41ced83a 	srl	r7,r8,r7
 402b21c:	21400a26 	beq	r4,r5,402b248 <__adddf3+0x8a4>
 402b220:	01401004 	movi	r5,64
 402b224:	2909c83a 	sub	r4,r5,r4
 402b228:	4108983a 	sll	r4,r8,r4
 402b22c:	2448b03a 	or	r4,r4,r17
 402b230:	2008c03a 	cmpne	r4,r4,zero
 402b234:	3922b03a 	or	r17,r7,r4
 402b238:	0009883a 	mov	r4,zero
 402b23c:	003f8d06 	br	402b074 <__alt_data_end+0xfffeb074>
 402b240:	0007883a 	mov	r3,zero
 402b244:	003fdd06 	br	402b1bc <__alt_data_end+0xfffeb1bc>
 402b248:	0009883a 	mov	r4,zero
 402b24c:	003ff706 	br	402b22c <__alt_data_end+0xfffeb22c>

0402b250 <__divdf3>:
 402b250:	defff204 	addi	sp,sp,-56
 402b254:	dd400915 	stw	r21,36(sp)
 402b258:	282ad53a 	srli	r21,r5,20
 402b25c:	dd000815 	stw	r20,32(sp)
 402b260:	2828d7fa 	srli	r20,r5,31
 402b264:	dc000415 	stw	r16,16(sp)
 402b268:	04000434 	movhi	r16,16
 402b26c:	df000c15 	stw	fp,48(sp)
 402b270:	843fffc4 	addi	r16,r16,-1
 402b274:	dfc00d15 	stw	ra,52(sp)
 402b278:	ddc00b15 	stw	r23,44(sp)
 402b27c:	dd800a15 	stw	r22,40(sp)
 402b280:	dcc00715 	stw	r19,28(sp)
 402b284:	dc800615 	stw	r18,24(sp)
 402b288:	dc400515 	stw	r17,20(sp)
 402b28c:	ad41ffcc 	andi	r21,r21,2047
 402b290:	2c20703a 	and	r16,r5,r16
 402b294:	a7003fcc 	andi	fp,r20,255
 402b298:	a8006126 	beq	r21,zero,402b420 <__divdf3+0x1d0>
 402b29c:	0081ffc4 	movi	r2,2047
 402b2a0:	2025883a 	mov	r18,r4
 402b2a4:	a8803726 	beq	r21,r2,402b384 <__divdf3+0x134>
 402b2a8:	80800434 	orhi	r2,r16,16
 402b2ac:	100490fa 	slli	r2,r2,3
 402b2b0:	2020d77a 	srli	r16,r4,29
 402b2b4:	202490fa 	slli	r18,r4,3
 402b2b8:	ad7f0044 	addi	r21,r21,-1023
 402b2bc:	80a0b03a 	or	r16,r16,r2
 402b2c0:	0027883a 	mov	r19,zero
 402b2c4:	0013883a 	mov	r9,zero
 402b2c8:	3804d53a 	srli	r2,r7,20
 402b2cc:	382cd7fa 	srli	r22,r7,31
 402b2d0:	04400434 	movhi	r17,16
 402b2d4:	8c7fffc4 	addi	r17,r17,-1
 402b2d8:	1081ffcc 	andi	r2,r2,2047
 402b2dc:	3011883a 	mov	r8,r6
 402b2e0:	3c62703a 	and	r17,r7,r17
 402b2e4:	b5c03fcc 	andi	r23,r22,255
 402b2e8:	10006c26 	beq	r2,zero,402b49c <__divdf3+0x24c>
 402b2ec:	00c1ffc4 	movi	r3,2047
 402b2f0:	10c06426 	beq	r2,r3,402b484 <__divdf3+0x234>
 402b2f4:	88c00434 	orhi	r3,r17,16
 402b2f8:	180690fa 	slli	r3,r3,3
 402b2fc:	3022d77a 	srli	r17,r6,29
 402b300:	301090fa 	slli	r8,r6,3
 402b304:	10bf0044 	addi	r2,r2,-1023
 402b308:	88e2b03a 	or	r17,r17,r3
 402b30c:	000f883a 	mov	r7,zero
 402b310:	a58cf03a 	xor	r6,r20,r22
 402b314:	3cc8b03a 	or	r4,r7,r19
 402b318:	a8abc83a 	sub	r21,r21,r2
 402b31c:	008003c4 	movi	r2,15
 402b320:	3007883a 	mov	r3,r6
 402b324:	34c03fcc 	andi	r19,r6,255
 402b328:	11009036 	bltu	r2,r4,402b56c <__divdf3+0x31c>
 402b32c:	200890ba 	slli	r4,r4,2
 402b330:	008100f4 	movhi	r2,1027
 402b334:	10acd104 	addi	r2,r2,-19644
 402b338:	2089883a 	add	r4,r4,r2
 402b33c:	20800017 	ldw	r2,0(r4)
 402b340:	1000683a 	jmp	r2
 402b344:	0402b56c 	andhi	r16,zero,2773
 402b348:	0402b3bc 	xorhi	r16,zero,2766
 402b34c:	0402b55c 	xori	r16,zero,2773
 402b350:	0402b3b0 	cmpltui	r16,zero,2766
 402b354:	0402b55c 	xori	r16,zero,2773
 402b358:	0402b530 	cmpltui	r16,zero,2772
 402b35c:	0402b55c 	xori	r16,zero,2773
 402b360:	0402b3b0 	cmpltui	r16,zero,2766
 402b364:	0402b3bc 	xorhi	r16,zero,2766
 402b368:	0402b3bc 	xorhi	r16,zero,2766
 402b36c:	0402b530 	cmpltui	r16,zero,2772
 402b370:	0402b3b0 	cmpltui	r16,zero,2766
 402b374:	0402b3a0 	cmpeqi	r16,zero,2766
 402b378:	0402b3a0 	cmpeqi	r16,zero,2766
 402b37c:	0402b3a0 	cmpeqi	r16,zero,2766
 402b380:	0402b850 	cmplti	r16,zero,2785
 402b384:	2404b03a 	or	r2,r4,r16
 402b388:	1000661e 	bne	r2,zero,402b524 <__divdf3+0x2d4>
 402b38c:	04c00204 	movi	r19,8
 402b390:	0021883a 	mov	r16,zero
 402b394:	0025883a 	mov	r18,zero
 402b398:	02400084 	movi	r9,2
 402b39c:	003fca06 	br	402b2c8 <__alt_data_end+0xfffeb2c8>
 402b3a0:	8023883a 	mov	r17,r16
 402b3a4:	9011883a 	mov	r8,r18
 402b3a8:	e02f883a 	mov	r23,fp
 402b3ac:	480f883a 	mov	r7,r9
 402b3b0:	00800084 	movi	r2,2
 402b3b4:	3881311e 	bne	r7,r2,402b87c <__divdf3+0x62c>
 402b3b8:	b827883a 	mov	r19,r23
 402b3bc:	98c0004c 	andi	r3,r19,1
 402b3c0:	0081ffc4 	movi	r2,2047
 402b3c4:	000b883a 	mov	r5,zero
 402b3c8:	0025883a 	mov	r18,zero
 402b3cc:	1004953a 	slli	r2,r2,20
 402b3d0:	18c03fcc 	andi	r3,r3,255
 402b3d4:	04400434 	movhi	r17,16
 402b3d8:	8c7fffc4 	addi	r17,r17,-1
 402b3dc:	180697fa 	slli	r3,r3,31
 402b3e0:	2c4a703a 	and	r5,r5,r17
 402b3e4:	288ab03a 	or	r5,r5,r2
 402b3e8:	28c6b03a 	or	r3,r5,r3
 402b3ec:	9005883a 	mov	r2,r18
 402b3f0:	dfc00d17 	ldw	ra,52(sp)
 402b3f4:	df000c17 	ldw	fp,48(sp)
 402b3f8:	ddc00b17 	ldw	r23,44(sp)
 402b3fc:	dd800a17 	ldw	r22,40(sp)
 402b400:	dd400917 	ldw	r21,36(sp)
 402b404:	dd000817 	ldw	r20,32(sp)
 402b408:	dcc00717 	ldw	r19,28(sp)
 402b40c:	dc800617 	ldw	r18,24(sp)
 402b410:	dc400517 	ldw	r17,20(sp)
 402b414:	dc000417 	ldw	r16,16(sp)
 402b418:	dec00e04 	addi	sp,sp,56
 402b41c:	f800283a 	ret
 402b420:	2404b03a 	or	r2,r4,r16
 402b424:	2027883a 	mov	r19,r4
 402b428:	10003926 	beq	r2,zero,402b510 <__divdf3+0x2c0>
 402b42c:	80012e26 	beq	r16,zero,402b8e8 <__divdf3+0x698>
 402b430:	8009883a 	mov	r4,r16
 402b434:	d9800315 	stw	r6,12(sp)
 402b438:	d9c00215 	stw	r7,8(sp)
 402b43c:	402cfa80 	call	402cfa8 <__clzsi2>
 402b440:	d9800317 	ldw	r6,12(sp)
 402b444:	d9c00217 	ldw	r7,8(sp)
 402b448:	113ffd44 	addi	r4,r2,-11
 402b44c:	00c00704 	movi	r3,28
 402b450:	19012116 	blt	r3,r4,402b8d8 <__divdf3+0x688>
 402b454:	00c00744 	movi	r3,29
 402b458:	147ffe04 	addi	r17,r2,-8
 402b45c:	1907c83a 	sub	r3,r3,r4
 402b460:	8460983a 	sll	r16,r16,r17
 402b464:	98c6d83a 	srl	r3,r19,r3
 402b468:	9c64983a 	sll	r18,r19,r17
 402b46c:	1c20b03a 	or	r16,r3,r16
 402b470:	1080fcc4 	addi	r2,r2,1011
 402b474:	00abc83a 	sub	r21,zero,r2
 402b478:	0027883a 	mov	r19,zero
 402b47c:	0013883a 	mov	r9,zero
 402b480:	003f9106 	br	402b2c8 <__alt_data_end+0xfffeb2c8>
 402b484:	3446b03a 	or	r3,r6,r17
 402b488:	18001f1e 	bne	r3,zero,402b508 <__divdf3+0x2b8>
 402b48c:	0023883a 	mov	r17,zero
 402b490:	0011883a 	mov	r8,zero
 402b494:	01c00084 	movi	r7,2
 402b498:	003f9d06 	br	402b310 <__alt_data_end+0xfffeb310>
 402b49c:	3446b03a 	or	r3,r6,r17
 402b4a0:	18001526 	beq	r3,zero,402b4f8 <__divdf3+0x2a8>
 402b4a4:	88011b26 	beq	r17,zero,402b914 <__divdf3+0x6c4>
 402b4a8:	8809883a 	mov	r4,r17
 402b4ac:	d9800315 	stw	r6,12(sp)
 402b4b0:	da400115 	stw	r9,4(sp)
 402b4b4:	402cfa80 	call	402cfa8 <__clzsi2>
 402b4b8:	d9800317 	ldw	r6,12(sp)
 402b4bc:	da400117 	ldw	r9,4(sp)
 402b4c0:	113ffd44 	addi	r4,r2,-11
 402b4c4:	00c00704 	movi	r3,28
 402b4c8:	19010e16 	blt	r3,r4,402b904 <__divdf3+0x6b4>
 402b4cc:	00c00744 	movi	r3,29
 402b4d0:	123ffe04 	addi	r8,r2,-8
 402b4d4:	1907c83a 	sub	r3,r3,r4
 402b4d8:	8a22983a 	sll	r17,r17,r8
 402b4dc:	30c6d83a 	srl	r3,r6,r3
 402b4e0:	3210983a 	sll	r8,r6,r8
 402b4e4:	1c62b03a 	or	r17,r3,r17
 402b4e8:	1080fcc4 	addi	r2,r2,1011
 402b4ec:	0085c83a 	sub	r2,zero,r2
 402b4f0:	000f883a 	mov	r7,zero
 402b4f4:	003f8606 	br	402b310 <__alt_data_end+0xfffeb310>
 402b4f8:	0023883a 	mov	r17,zero
 402b4fc:	0011883a 	mov	r8,zero
 402b500:	01c00044 	movi	r7,1
 402b504:	003f8206 	br	402b310 <__alt_data_end+0xfffeb310>
 402b508:	01c000c4 	movi	r7,3
 402b50c:	003f8006 	br	402b310 <__alt_data_end+0xfffeb310>
 402b510:	04c00104 	movi	r19,4
 402b514:	0021883a 	mov	r16,zero
 402b518:	0025883a 	mov	r18,zero
 402b51c:	02400044 	movi	r9,1
 402b520:	003f6906 	br	402b2c8 <__alt_data_end+0xfffeb2c8>
 402b524:	04c00304 	movi	r19,12
 402b528:	024000c4 	movi	r9,3
 402b52c:	003f6606 	br	402b2c8 <__alt_data_end+0xfffeb2c8>
 402b530:	01400434 	movhi	r5,16
 402b534:	0007883a 	mov	r3,zero
 402b538:	297fffc4 	addi	r5,r5,-1
 402b53c:	04bfffc4 	movi	r18,-1
 402b540:	0081ffc4 	movi	r2,2047
 402b544:	003fa106 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402b548:	00c00044 	movi	r3,1
 402b54c:	1887c83a 	sub	r3,r3,r2
 402b550:	01000e04 	movi	r4,56
 402b554:	20c1210e 	bge	r4,r3,402b9dc <__divdf3+0x78c>
 402b558:	98c0004c 	andi	r3,r19,1
 402b55c:	0005883a 	mov	r2,zero
 402b560:	000b883a 	mov	r5,zero
 402b564:	0025883a 	mov	r18,zero
 402b568:	003f9806 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402b56c:	8c00fd36 	bltu	r17,r16,402b964 <__divdf3+0x714>
 402b570:	8440fb26 	beq	r16,r17,402b960 <__divdf3+0x710>
 402b574:	8007883a 	mov	r3,r16
 402b578:	ad7fffc4 	addi	r21,r21,-1
 402b57c:	0021883a 	mov	r16,zero
 402b580:	4004d63a 	srli	r2,r8,24
 402b584:	8822923a 	slli	r17,r17,8
 402b588:	1809883a 	mov	r4,r3
 402b58c:	402c923a 	slli	r22,r8,8
 402b590:	88b8b03a 	or	fp,r17,r2
 402b594:	e028d43a 	srli	r20,fp,16
 402b598:	d8c00015 	stw	r3,0(sp)
 402b59c:	e5ffffcc 	andi	r23,fp,65535
 402b5a0:	a00b883a 	mov	r5,r20
 402b5a4:	402a8e80 	call	402a8e8 <__udivsi3>
 402b5a8:	d8c00017 	ldw	r3,0(sp)
 402b5ac:	a00b883a 	mov	r5,r20
 402b5b0:	d8800315 	stw	r2,12(sp)
 402b5b4:	1809883a 	mov	r4,r3
 402b5b8:	402a94c0 	call	402a94c <__umodsi3>
 402b5bc:	d9800317 	ldw	r6,12(sp)
 402b5c0:	1006943a 	slli	r3,r2,16
 402b5c4:	9004d43a 	srli	r2,r18,16
 402b5c8:	b9a3383a 	mul	r17,r23,r6
 402b5cc:	10c4b03a 	or	r2,r2,r3
 402b5d0:	1440062e 	bgeu	r2,r17,402b5ec <__divdf3+0x39c>
 402b5d4:	1705883a 	add	r2,r2,fp
 402b5d8:	30ffffc4 	addi	r3,r6,-1
 402b5dc:	1700ee36 	bltu	r2,fp,402b998 <__divdf3+0x748>
 402b5e0:	1440ed2e 	bgeu	r2,r17,402b998 <__divdf3+0x748>
 402b5e4:	31bfff84 	addi	r6,r6,-2
 402b5e8:	1705883a 	add	r2,r2,fp
 402b5ec:	1463c83a 	sub	r17,r2,r17
 402b5f0:	a00b883a 	mov	r5,r20
 402b5f4:	8809883a 	mov	r4,r17
 402b5f8:	d9800315 	stw	r6,12(sp)
 402b5fc:	402a8e80 	call	402a8e8 <__udivsi3>
 402b600:	a00b883a 	mov	r5,r20
 402b604:	8809883a 	mov	r4,r17
 402b608:	d8800215 	stw	r2,8(sp)
 402b60c:	402a94c0 	call	402a94c <__umodsi3>
 402b610:	d9c00217 	ldw	r7,8(sp)
 402b614:	1004943a 	slli	r2,r2,16
 402b618:	94bfffcc 	andi	r18,r18,65535
 402b61c:	b9d1383a 	mul	r8,r23,r7
 402b620:	90a4b03a 	or	r18,r18,r2
 402b624:	d9800317 	ldw	r6,12(sp)
 402b628:	9200062e 	bgeu	r18,r8,402b644 <__divdf3+0x3f4>
 402b62c:	9725883a 	add	r18,r18,fp
 402b630:	38bfffc4 	addi	r2,r7,-1
 402b634:	9700d636 	bltu	r18,fp,402b990 <__divdf3+0x740>
 402b638:	9200d52e 	bgeu	r18,r8,402b990 <__divdf3+0x740>
 402b63c:	39ffff84 	addi	r7,r7,-2
 402b640:	9725883a 	add	r18,r18,fp
 402b644:	3004943a 	slli	r2,r6,16
 402b648:	b012d43a 	srli	r9,r22,16
 402b64c:	b1bfffcc 	andi	r6,r22,65535
 402b650:	11e2b03a 	or	r17,r2,r7
 402b654:	8806d43a 	srli	r3,r17,16
 402b658:	893fffcc 	andi	r4,r17,65535
 402b65c:	218b383a 	mul	r5,r4,r6
 402b660:	30c5383a 	mul	r2,r6,r3
 402b664:	2249383a 	mul	r4,r4,r9
 402b668:	280ed43a 	srli	r7,r5,16
 402b66c:	9225c83a 	sub	r18,r18,r8
 402b670:	2089883a 	add	r4,r4,r2
 402b674:	3909883a 	add	r4,r7,r4
 402b678:	1a47383a 	mul	r3,r3,r9
 402b67c:	2080022e 	bgeu	r4,r2,402b688 <__divdf3+0x438>
 402b680:	00800074 	movhi	r2,1
 402b684:	1887883a 	add	r3,r3,r2
 402b688:	2004d43a 	srli	r2,r4,16
 402b68c:	2008943a 	slli	r4,r4,16
 402b690:	297fffcc 	andi	r5,r5,65535
 402b694:	10c7883a 	add	r3,r2,r3
 402b698:	2149883a 	add	r4,r4,r5
 402b69c:	90c0a536 	bltu	r18,r3,402b934 <__divdf3+0x6e4>
 402b6a0:	90c0bf26 	beq	r18,r3,402b9a0 <__divdf3+0x750>
 402b6a4:	90c7c83a 	sub	r3,r18,r3
 402b6a8:	810fc83a 	sub	r7,r16,r4
 402b6ac:	81e5803a 	cmpltu	r18,r16,r7
 402b6b0:	1ca5c83a 	sub	r18,r3,r18
 402b6b4:	e480c126 	beq	fp,r18,402b9bc <__divdf3+0x76c>
 402b6b8:	a00b883a 	mov	r5,r20
 402b6bc:	9009883a 	mov	r4,r18
 402b6c0:	d9800315 	stw	r6,12(sp)
 402b6c4:	d9c00215 	stw	r7,8(sp)
 402b6c8:	da400115 	stw	r9,4(sp)
 402b6cc:	402a8e80 	call	402a8e8 <__udivsi3>
 402b6d0:	a00b883a 	mov	r5,r20
 402b6d4:	9009883a 	mov	r4,r18
 402b6d8:	d8800015 	stw	r2,0(sp)
 402b6dc:	402a94c0 	call	402a94c <__umodsi3>
 402b6e0:	d9c00217 	ldw	r7,8(sp)
 402b6e4:	da000017 	ldw	r8,0(sp)
 402b6e8:	1006943a 	slli	r3,r2,16
 402b6ec:	3804d43a 	srli	r2,r7,16
 402b6f0:	ba21383a 	mul	r16,r23,r8
 402b6f4:	d9800317 	ldw	r6,12(sp)
 402b6f8:	10c4b03a 	or	r2,r2,r3
 402b6fc:	da400117 	ldw	r9,4(sp)
 402b700:	1400062e 	bgeu	r2,r16,402b71c <__divdf3+0x4cc>
 402b704:	1705883a 	add	r2,r2,fp
 402b708:	40ffffc4 	addi	r3,r8,-1
 402b70c:	1700ad36 	bltu	r2,fp,402b9c4 <__divdf3+0x774>
 402b710:	1400ac2e 	bgeu	r2,r16,402b9c4 <__divdf3+0x774>
 402b714:	423fff84 	addi	r8,r8,-2
 402b718:	1705883a 	add	r2,r2,fp
 402b71c:	1421c83a 	sub	r16,r2,r16
 402b720:	a00b883a 	mov	r5,r20
 402b724:	8009883a 	mov	r4,r16
 402b728:	d9800315 	stw	r6,12(sp)
 402b72c:	d9c00215 	stw	r7,8(sp)
 402b730:	da000015 	stw	r8,0(sp)
 402b734:	da400115 	stw	r9,4(sp)
 402b738:	402a8e80 	call	402a8e8 <__udivsi3>
 402b73c:	8009883a 	mov	r4,r16
 402b740:	a00b883a 	mov	r5,r20
 402b744:	1025883a 	mov	r18,r2
 402b748:	402a94c0 	call	402a94c <__umodsi3>
 402b74c:	d9c00217 	ldw	r7,8(sp)
 402b750:	1004943a 	slli	r2,r2,16
 402b754:	bcaf383a 	mul	r23,r23,r18
 402b758:	393fffcc 	andi	r4,r7,65535
 402b75c:	2088b03a 	or	r4,r4,r2
 402b760:	d9800317 	ldw	r6,12(sp)
 402b764:	da000017 	ldw	r8,0(sp)
 402b768:	da400117 	ldw	r9,4(sp)
 402b76c:	25c0062e 	bgeu	r4,r23,402b788 <__divdf3+0x538>
 402b770:	2709883a 	add	r4,r4,fp
 402b774:	90bfffc4 	addi	r2,r18,-1
 402b778:	27009436 	bltu	r4,fp,402b9cc <__divdf3+0x77c>
 402b77c:	25c0932e 	bgeu	r4,r23,402b9cc <__divdf3+0x77c>
 402b780:	94bfff84 	addi	r18,r18,-2
 402b784:	2709883a 	add	r4,r4,fp
 402b788:	4004943a 	slli	r2,r8,16
 402b78c:	25efc83a 	sub	r23,r4,r23
 402b790:	1490b03a 	or	r8,r2,r18
 402b794:	4008d43a 	srli	r4,r8,16
 402b798:	40ffffcc 	andi	r3,r8,65535
 402b79c:	30c5383a 	mul	r2,r6,r3
 402b7a0:	1a47383a 	mul	r3,r3,r9
 402b7a4:	310d383a 	mul	r6,r6,r4
 402b7a8:	100ad43a 	srli	r5,r2,16
 402b7ac:	4913383a 	mul	r9,r9,r4
 402b7b0:	1987883a 	add	r3,r3,r6
 402b7b4:	28c7883a 	add	r3,r5,r3
 402b7b8:	1980022e 	bgeu	r3,r6,402b7c4 <__divdf3+0x574>
 402b7bc:	01000074 	movhi	r4,1
 402b7c0:	4913883a 	add	r9,r9,r4
 402b7c4:	1808d43a 	srli	r4,r3,16
 402b7c8:	1806943a 	slli	r3,r3,16
 402b7cc:	10bfffcc 	andi	r2,r2,65535
 402b7d0:	2253883a 	add	r9,r4,r9
 402b7d4:	1887883a 	add	r3,r3,r2
 402b7d8:	ba403836 	bltu	r23,r9,402b8bc <__divdf3+0x66c>
 402b7dc:	ba403626 	beq	r23,r9,402b8b8 <__divdf3+0x668>
 402b7e0:	42000054 	ori	r8,r8,1
 402b7e4:	a880ffc4 	addi	r2,r21,1023
 402b7e8:	00bf570e 	bge	zero,r2,402b548 <__alt_data_end+0xfffeb548>
 402b7ec:	40c001cc 	andi	r3,r8,7
 402b7f0:	18000726 	beq	r3,zero,402b810 <__divdf3+0x5c0>
 402b7f4:	40c003cc 	andi	r3,r8,15
 402b7f8:	01000104 	movi	r4,4
 402b7fc:	19000426 	beq	r3,r4,402b810 <__divdf3+0x5c0>
 402b800:	4107883a 	add	r3,r8,r4
 402b804:	1a11803a 	cmpltu	r8,r3,r8
 402b808:	8a23883a 	add	r17,r17,r8
 402b80c:	1811883a 	mov	r8,r3
 402b810:	88c0402c 	andhi	r3,r17,256
 402b814:	18000426 	beq	r3,zero,402b828 <__divdf3+0x5d8>
 402b818:	00ffc034 	movhi	r3,65280
 402b81c:	18ffffc4 	addi	r3,r3,-1
 402b820:	a8810004 	addi	r2,r21,1024
 402b824:	88e2703a 	and	r17,r17,r3
 402b828:	00c1ff84 	movi	r3,2046
 402b82c:	18bee316 	blt	r3,r2,402b3bc <__alt_data_end+0xfffeb3bc>
 402b830:	8824977a 	slli	r18,r17,29
 402b834:	4010d0fa 	srli	r8,r8,3
 402b838:	8822927a 	slli	r17,r17,9
 402b83c:	1081ffcc 	andi	r2,r2,2047
 402b840:	9224b03a 	or	r18,r18,r8
 402b844:	880ad33a 	srli	r5,r17,12
 402b848:	98c0004c 	andi	r3,r19,1
 402b84c:	003edf06 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402b850:	8080022c 	andhi	r2,r16,8
 402b854:	10001226 	beq	r2,zero,402b8a0 <__divdf3+0x650>
 402b858:	8880022c 	andhi	r2,r17,8
 402b85c:	1000101e 	bne	r2,zero,402b8a0 <__divdf3+0x650>
 402b860:	00800434 	movhi	r2,16
 402b864:	89400234 	orhi	r5,r17,8
 402b868:	10bfffc4 	addi	r2,r2,-1
 402b86c:	b007883a 	mov	r3,r22
 402b870:	288a703a 	and	r5,r5,r2
 402b874:	4025883a 	mov	r18,r8
 402b878:	003f3106 	br	402b540 <__alt_data_end+0xfffeb540>
 402b87c:	008000c4 	movi	r2,3
 402b880:	3880a626 	beq	r7,r2,402bb1c <__divdf3+0x8cc>
 402b884:	00800044 	movi	r2,1
 402b888:	3880521e 	bne	r7,r2,402b9d4 <__divdf3+0x784>
 402b88c:	b807883a 	mov	r3,r23
 402b890:	0005883a 	mov	r2,zero
 402b894:	000b883a 	mov	r5,zero
 402b898:	0025883a 	mov	r18,zero
 402b89c:	003ecb06 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402b8a0:	00800434 	movhi	r2,16
 402b8a4:	81400234 	orhi	r5,r16,8
 402b8a8:	10bfffc4 	addi	r2,r2,-1
 402b8ac:	a007883a 	mov	r3,r20
 402b8b0:	288a703a 	and	r5,r5,r2
 402b8b4:	003f2206 	br	402b540 <__alt_data_end+0xfffeb540>
 402b8b8:	183fca26 	beq	r3,zero,402b7e4 <__alt_data_end+0xfffeb7e4>
 402b8bc:	e5ef883a 	add	r23,fp,r23
 402b8c0:	40bfffc4 	addi	r2,r8,-1
 402b8c4:	bf00392e 	bgeu	r23,fp,402b9ac <__divdf3+0x75c>
 402b8c8:	1011883a 	mov	r8,r2
 402b8cc:	ba7fc41e 	bne	r23,r9,402b7e0 <__alt_data_end+0xfffeb7e0>
 402b8d0:	b0ffc31e 	bne	r22,r3,402b7e0 <__alt_data_end+0xfffeb7e0>
 402b8d4:	003fc306 	br	402b7e4 <__alt_data_end+0xfffeb7e4>
 402b8d8:	143ff604 	addi	r16,r2,-40
 402b8dc:	9c20983a 	sll	r16,r19,r16
 402b8e0:	0025883a 	mov	r18,zero
 402b8e4:	003ee206 	br	402b470 <__alt_data_end+0xfffeb470>
 402b8e8:	d9800315 	stw	r6,12(sp)
 402b8ec:	d9c00215 	stw	r7,8(sp)
 402b8f0:	402cfa80 	call	402cfa8 <__clzsi2>
 402b8f4:	10800804 	addi	r2,r2,32
 402b8f8:	d9c00217 	ldw	r7,8(sp)
 402b8fc:	d9800317 	ldw	r6,12(sp)
 402b900:	003ed106 	br	402b448 <__alt_data_end+0xfffeb448>
 402b904:	147ff604 	addi	r17,r2,-40
 402b908:	3462983a 	sll	r17,r6,r17
 402b90c:	0011883a 	mov	r8,zero
 402b910:	003ef506 	br	402b4e8 <__alt_data_end+0xfffeb4e8>
 402b914:	3009883a 	mov	r4,r6
 402b918:	d9800315 	stw	r6,12(sp)
 402b91c:	da400115 	stw	r9,4(sp)
 402b920:	402cfa80 	call	402cfa8 <__clzsi2>
 402b924:	10800804 	addi	r2,r2,32
 402b928:	da400117 	ldw	r9,4(sp)
 402b92c:	d9800317 	ldw	r6,12(sp)
 402b930:	003ee306 	br	402b4c0 <__alt_data_end+0xfffeb4c0>
 402b934:	85a1883a 	add	r16,r16,r22
 402b938:	8585803a 	cmpltu	r2,r16,r22
 402b93c:	1705883a 	add	r2,r2,fp
 402b940:	14a5883a 	add	r18,r2,r18
 402b944:	88bfffc4 	addi	r2,r17,-1
 402b948:	e4800c2e 	bgeu	fp,r18,402b97c <__divdf3+0x72c>
 402b94c:	90c03e36 	bltu	r18,r3,402ba48 <__divdf3+0x7f8>
 402b950:	1c806926 	beq	r3,r18,402baf8 <__divdf3+0x8a8>
 402b954:	90c7c83a 	sub	r3,r18,r3
 402b958:	1023883a 	mov	r17,r2
 402b95c:	003f5206 	br	402b6a8 <__alt_data_end+0xfffeb6a8>
 402b960:	923f0436 	bltu	r18,r8,402b574 <__alt_data_end+0xfffeb574>
 402b964:	800897fa 	slli	r4,r16,31
 402b968:	9004d07a 	srli	r2,r18,1
 402b96c:	8006d07a 	srli	r3,r16,1
 402b970:	902097fa 	slli	r16,r18,31
 402b974:	20a4b03a 	or	r18,r4,r2
 402b978:	003f0106 	br	402b580 <__alt_data_end+0xfffeb580>
 402b97c:	e4bff51e 	bne	fp,r18,402b954 <__alt_data_end+0xfffeb954>
 402b980:	85bff22e 	bgeu	r16,r22,402b94c <__alt_data_end+0xfffeb94c>
 402b984:	e0c7c83a 	sub	r3,fp,r3
 402b988:	1023883a 	mov	r17,r2
 402b98c:	003f4606 	br	402b6a8 <__alt_data_end+0xfffeb6a8>
 402b990:	100f883a 	mov	r7,r2
 402b994:	003f2b06 	br	402b644 <__alt_data_end+0xfffeb644>
 402b998:	180d883a 	mov	r6,r3
 402b99c:	003f1306 	br	402b5ec <__alt_data_end+0xfffeb5ec>
 402b9a0:	813fe436 	bltu	r16,r4,402b934 <__alt_data_end+0xfffeb934>
 402b9a4:	0007883a 	mov	r3,zero
 402b9a8:	003f3f06 	br	402b6a8 <__alt_data_end+0xfffeb6a8>
 402b9ac:	ba402c36 	bltu	r23,r9,402ba60 <__divdf3+0x810>
 402b9b0:	4dc05426 	beq	r9,r23,402bb04 <__divdf3+0x8b4>
 402b9b4:	1011883a 	mov	r8,r2
 402b9b8:	003f8906 	br	402b7e0 <__alt_data_end+0xfffeb7e0>
 402b9bc:	023fffc4 	movi	r8,-1
 402b9c0:	003f8806 	br	402b7e4 <__alt_data_end+0xfffeb7e4>
 402b9c4:	1811883a 	mov	r8,r3
 402b9c8:	003f5406 	br	402b71c <__alt_data_end+0xfffeb71c>
 402b9cc:	1025883a 	mov	r18,r2
 402b9d0:	003f6d06 	br	402b788 <__alt_data_end+0xfffeb788>
 402b9d4:	b827883a 	mov	r19,r23
 402b9d8:	003f8206 	br	402b7e4 <__alt_data_end+0xfffeb7e4>
 402b9dc:	010007c4 	movi	r4,31
 402b9e0:	20c02616 	blt	r4,r3,402ba7c <__divdf3+0x82c>
 402b9e4:	00800804 	movi	r2,32
 402b9e8:	10c5c83a 	sub	r2,r2,r3
 402b9ec:	888a983a 	sll	r5,r17,r2
 402b9f0:	40c8d83a 	srl	r4,r8,r3
 402b9f4:	4084983a 	sll	r2,r8,r2
 402b9f8:	88e2d83a 	srl	r17,r17,r3
 402b9fc:	2906b03a 	or	r3,r5,r4
 402ba00:	1004c03a 	cmpne	r2,r2,zero
 402ba04:	1886b03a 	or	r3,r3,r2
 402ba08:	188001cc 	andi	r2,r3,7
 402ba0c:	10000726 	beq	r2,zero,402ba2c <__divdf3+0x7dc>
 402ba10:	188003cc 	andi	r2,r3,15
 402ba14:	01000104 	movi	r4,4
 402ba18:	11000426 	beq	r2,r4,402ba2c <__divdf3+0x7dc>
 402ba1c:	1805883a 	mov	r2,r3
 402ba20:	10c00104 	addi	r3,r2,4
 402ba24:	1885803a 	cmpltu	r2,r3,r2
 402ba28:	88a3883a 	add	r17,r17,r2
 402ba2c:	8880202c 	andhi	r2,r17,128
 402ba30:	10002726 	beq	r2,zero,402bad0 <__divdf3+0x880>
 402ba34:	98c0004c 	andi	r3,r19,1
 402ba38:	00800044 	movi	r2,1
 402ba3c:	000b883a 	mov	r5,zero
 402ba40:	0025883a 	mov	r18,zero
 402ba44:	003e6106 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402ba48:	85a1883a 	add	r16,r16,r22
 402ba4c:	8585803a 	cmpltu	r2,r16,r22
 402ba50:	1705883a 	add	r2,r2,fp
 402ba54:	14a5883a 	add	r18,r2,r18
 402ba58:	8c7fff84 	addi	r17,r17,-2
 402ba5c:	003f1106 	br	402b6a4 <__alt_data_end+0xfffeb6a4>
 402ba60:	b589883a 	add	r4,r22,r22
 402ba64:	25ad803a 	cmpltu	r22,r4,r22
 402ba68:	b739883a 	add	fp,r22,fp
 402ba6c:	40bfff84 	addi	r2,r8,-2
 402ba70:	bf2f883a 	add	r23,r23,fp
 402ba74:	202d883a 	mov	r22,r4
 402ba78:	003f9306 	br	402b8c8 <__alt_data_end+0xfffeb8c8>
 402ba7c:	013ff844 	movi	r4,-31
 402ba80:	2085c83a 	sub	r2,r4,r2
 402ba84:	8888d83a 	srl	r4,r17,r2
 402ba88:	00800804 	movi	r2,32
 402ba8c:	18802126 	beq	r3,r2,402bb14 <__divdf3+0x8c4>
 402ba90:	00801004 	movi	r2,64
 402ba94:	10c5c83a 	sub	r2,r2,r3
 402ba98:	8884983a 	sll	r2,r17,r2
 402ba9c:	1204b03a 	or	r2,r2,r8
 402baa0:	1004c03a 	cmpne	r2,r2,zero
 402baa4:	2084b03a 	or	r2,r4,r2
 402baa8:	144001cc 	andi	r17,r2,7
 402baac:	88000d1e 	bne	r17,zero,402bae4 <__divdf3+0x894>
 402bab0:	000b883a 	mov	r5,zero
 402bab4:	1024d0fa 	srli	r18,r2,3
 402bab8:	98c0004c 	andi	r3,r19,1
 402babc:	0005883a 	mov	r2,zero
 402bac0:	9464b03a 	or	r18,r18,r17
 402bac4:	003e4106 	br	402b3cc <__alt_data_end+0xfffeb3cc>
 402bac8:	1007883a 	mov	r3,r2
 402bacc:	0023883a 	mov	r17,zero
 402bad0:	880a927a 	slli	r5,r17,9
 402bad4:	1805883a 	mov	r2,r3
 402bad8:	8822977a 	slli	r17,r17,29
 402badc:	280ad33a 	srli	r5,r5,12
 402bae0:	003ff406 	br	402bab4 <__alt_data_end+0xfffebab4>
 402bae4:	10c003cc 	andi	r3,r2,15
 402bae8:	01000104 	movi	r4,4
 402baec:	193ff626 	beq	r3,r4,402bac8 <__alt_data_end+0xfffebac8>
 402baf0:	0023883a 	mov	r17,zero
 402baf4:	003fca06 	br	402ba20 <__alt_data_end+0xfffeba20>
 402baf8:	813fd336 	bltu	r16,r4,402ba48 <__alt_data_end+0xfffeba48>
 402bafc:	1023883a 	mov	r17,r2
 402bb00:	003fa806 	br	402b9a4 <__alt_data_end+0xfffeb9a4>
 402bb04:	b0ffd636 	bltu	r22,r3,402ba60 <__alt_data_end+0xfffeba60>
 402bb08:	1011883a 	mov	r8,r2
 402bb0c:	b0ff341e 	bne	r22,r3,402b7e0 <__alt_data_end+0xfffeb7e0>
 402bb10:	003f3406 	br	402b7e4 <__alt_data_end+0xfffeb7e4>
 402bb14:	0005883a 	mov	r2,zero
 402bb18:	003fe006 	br	402ba9c <__alt_data_end+0xfffeba9c>
 402bb1c:	00800434 	movhi	r2,16
 402bb20:	89400234 	orhi	r5,r17,8
 402bb24:	10bfffc4 	addi	r2,r2,-1
 402bb28:	b807883a 	mov	r3,r23
 402bb2c:	288a703a 	and	r5,r5,r2
 402bb30:	4025883a 	mov	r18,r8
 402bb34:	003e8206 	br	402b540 <__alt_data_end+0xfffeb540>

0402bb38 <__eqdf2>:
 402bb38:	2804d53a 	srli	r2,r5,20
 402bb3c:	3806d53a 	srli	r3,r7,20
 402bb40:	02000434 	movhi	r8,16
 402bb44:	423fffc4 	addi	r8,r8,-1
 402bb48:	1081ffcc 	andi	r2,r2,2047
 402bb4c:	0281ffc4 	movi	r10,2047
 402bb50:	2a12703a 	and	r9,r5,r8
 402bb54:	18c1ffcc 	andi	r3,r3,2047
 402bb58:	3a10703a 	and	r8,r7,r8
 402bb5c:	280ad7fa 	srli	r5,r5,31
 402bb60:	380ed7fa 	srli	r7,r7,31
 402bb64:	12801026 	beq	r2,r10,402bba8 <__eqdf2+0x70>
 402bb68:	0281ffc4 	movi	r10,2047
 402bb6c:	1a800a26 	beq	r3,r10,402bb98 <__eqdf2+0x60>
 402bb70:	10c00226 	beq	r2,r3,402bb7c <__eqdf2+0x44>
 402bb74:	00800044 	movi	r2,1
 402bb78:	f800283a 	ret
 402bb7c:	4a3ffd1e 	bne	r9,r8,402bb74 <__alt_data_end+0xfffebb74>
 402bb80:	21bffc1e 	bne	r4,r6,402bb74 <__alt_data_end+0xfffebb74>
 402bb84:	29c00c26 	beq	r5,r7,402bbb8 <__eqdf2+0x80>
 402bb88:	103ffa1e 	bne	r2,zero,402bb74 <__alt_data_end+0xfffebb74>
 402bb8c:	2244b03a 	or	r2,r4,r9
 402bb90:	1004c03a 	cmpne	r2,r2,zero
 402bb94:	f800283a 	ret
 402bb98:	3214b03a 	or	r10,r6,r8
 402bb9c:	503ff426 	beq	r10,zero,402bb70 <__alt_data_end+0xfffebb70>
 402bba0:	00800044 	movi	r2,1
 402bba4:	f800283a 	ret
 402bba8:	2254b03a 	or	r10,r4,r9
 402bbac:	503fee26 	beq	r10,zero,402bb68 <__alt_data_end+0xfffebb68>
 402bbb0:	00800044 	movi	r2,1
 402bbb4:	f800283a 	ret
 402bbb8:	0005883a 	mov	r2,zero
 402bbbc:	f800283a 	ret

0402bbc0 <__gedf2>:
 402bbc0:	2804d53a 	srli	r2,r5,20
 402bbc4:	3806d53a 	srli	r3,r7,20
 402bbc8:	02000434 	movhi	r8,16
 402bbcc:	423fffc4 	addi	r8,r8,-1
 402bbd0:	1081ffcc 	andi	r2,r2,2047
 402bbd4:	0241ffc4 	movi	r9,2047
 402bbd8:	2a14703a 	and	r10,r5,r8
 402bbdc:	18c1ffcc 	andi	r3,r3,2047
 402bbe0:	3a10703a 	and	r8,r7,r8
 402bbe4:	280ad7fa 	srli	r5,r5,31
 402bbe8:	380ed7fa 	srli	r7,r7,31
 402bbec:	12401d26 	beq	r2,r9,402bc64 <__gedf2+0xa4>
 402bbf0:	0241ffc4 	movi	r9,2047
 402bbf4:	1a401226 	beq	r3,r9,402bc40 <__gedf2+0x80>
 402bbf8:	1000081e 	bne	r2,zero,402bc1c <__gedf2+0x5c>
 402bbfc:	2296b03a 	or	r11,r4,r10
 402bc00:	5813003a 	cmpeq	r9,r11,zero
 402bc04:	1800091e 	bne	r3,zero,402bc2c <__gedf2+0x6c>
 402bc08:	3218b03a 	or	r12,r6,r8
 402bc0c:	6000071e 	bne	r12,zero,402bc2c <__gedf2+0x6c>
 402bc10:	0005883a 	mov	r2,zero
 402bc14:	5800101e 	bne	r11,zero,402bc58 <__gedf2+0x98>
 402bc18:	f800283a 	ret
 402bc1c:	18000c1e 	bne	r3,zero,402bc50 <__gedf2+0x90>
 402bc20:	3212b03a 	or	r9,r6,r8
 402bc24:	48000c26 	beq	r9,zero,402bc58 <__gedf2+0x98>
 402bc28:	0013883a 	mov	r9,zero
 402bc2c:	39c03fcc 	andi	r7,r7,255
 402bc30:	48000826 	beq	r9,zero,402bc54 <__gedf2+0x94>
 402bc34:	38000926 	beq	r7,zero,402bc5c <__gedf2+0x9c>
 402bc38:	00800044 	movi	r2,1
 402bc3c:	f800283a 	ret
 402bc40:	3212b03a 	or	r9,r6,r8
 402bc44:	483fec26 	beq	r9,zero,402bbf8 <__alt_data_end+0xfffebbf8>
 402bc48:	00bfff84 	movi	r2,-2
 402bc4c:	f800283a 	ret
 402bc50:	39c03fcc 	andi	r7,r7,255
 402bc54:	29c00626 	beq	r5,r7,402bc70 <__gedf2+0xb0>
 402bc58:	283ff726 	beq	r5,zero,402bc38 <__alt_data_end+0xfffebc38>
 402bc5c:	00bfffc4 	movi	r2,-1
 402bc60:	f800283a 	ret
 402bc64:	2292b03a 	or	r9,r4,r10
 402bc68:	483fe126 	beq	r9,zero,402bbf0 <__alt_data_end+0xfffebbf0>
 402bc6c:	003ff606 	br	402bc48 <__alt_data_end+0xfffebc48>
 402bc70:	18bff916 	blt	r3,r2,402bc58 <__alt_data_end+0xfffebc58>
 402bc74:	10c00316 	blt	r2,r3,402bc84 <__gedf2+0xc4>
 402bc78:	42bff736 	bltu	r8,r10,402bc58 <__alt_data_end+0xfffebc58>
 402bc7c:	52000326 	beq	r10,r8,402bc8c <__gedf2+0xcc>
 402bc80:	5200042e 	bgeu	r10,r8,402bc94 <__gedf2+0xd4>
 402bc84:	283fec1e 	bne	r5,zero,402bc38 <__alt_data_end+0xfffebc38>
 402bc88:	003ff406 	br	402bc5c <__alt_data_end+0xfffebc5c>
 402bc8c:	313ff236 	bltu	r6,r4,402bc58 <__alt_data_end+0xfffebc58>
 402bc90:	21bffc36 	bltu	r4,r6,402bc84 <__alt_data_end+0xfffebc84>
 402bc94:	0005883a 	mov	r2,zero
 402bc98:	f800283a 	ret

0402bc9c <__ledf2>:
 402bc9c:	2804d53a 	srli	r2,r5,20
 402bca0:	3810d53a 	srli	r8,r7,20
 402bca4:	00c00434 	movhi	r3,16
 402bca8:	18ffffc4 	addi	r3,r3,-1
 402bcac:	1081ffcc 	andi	r2,r2,2047
 402bcb0:	0241ffc4 	movi	r9,2047
 402bcb4:	28d4703a 	and	r10,r5,r3
 402bcb8:	4201ffcc 	andi	r8,r8,2047
 402bcbc:	38c6703a 	and	r3,r7,r3
 402bcc0:	280ad7fa 	srli	r5,r5,31
 402bcc4:	380ed7fa 	srli	r7,r7,31
 402bcc8:	12401f26 	beq	r2,r9,402bd48 <__ledf2+0xac>
 402bccc:	0241ffc4 	movi	r9,2047
 402bcd0:	42401426 	beq	r8,r9,402bd24 <__ledf2+0x88>
 402bcd4:	1000091e 	bne	r2,zero,402bcfc <__ledf2+0x60>
 402bcd8:	2296b03a 	or	r11,r4,r10
 402bcdc:	5813003a 	cmpeq	r9,r11,zero
 402bce0:	29403fcc 	andi	r5,r5,255
 402bce4:	40000a1e 	bne	r8,zero,402bd10 <__ledf2+0x74>
 402bce8:	30d8b03a 	or	r12,r6,r3
 402bcec:	6000081e 	bne	r12,zero,402bd10 <__ledf2+0x74>
 402bcf0:	0005883a 	mov	r2,zero
 402bcf4:	5800111e 	bne	r11,zero,402bd3c <__ledf2+0xa0>
 402bcf8:	f800283a 	ret
 402bcfc:	29403fcc 	andi	r5,r5,255
 402bd00:	40000c1e 	bne	r8,zero,402bd34 <__ledf2+0x98>
 402bd04:	30d2b03a 	or	r9,r6,r3
 402bd08:	48000c26 	beq	r9,zero,402bd3c <__ledf2+0xa0>
 402bd0c:	0013883a 	mov	r9,zero
 402bd10:	39c03fcc 	andi	r7,r7,255
 402bd14:	48000826 	beq	r9,zero,402bd38 <__ledf2+0x9c>
 402bd18:	38001126 	beq	r7,zero,402bd60 <__ledf2+0xc4>
 402bd1c:	00800044 	movi	r2,1
 402bd20:	f800283a 	ret
 402bd24:	30d2b03a 	or	r9,r6,r3
 402bd28:	483fea26 	beq	r9,zero,402bcd4 <__alt_data_end+0xfffebcd4>
 402bd2c:	00800084 	movi	r2,2
 402bd30:	f800283a 	ret
 402bd34:	39c03fcc 	andi	r7,r7,255
 402bd38:	39400726 	beq	r7,r5,402bd58 <__ledf2+0xbc>
 402bd3c:	2800081e 	bne	r5,zero,402bd60 <__ledf2+0xc4>
 402bd40:	00800044 	movi	r2,1
 402bd44:	f800283a 	ret
 402bd48:	2292b03a 	or	r9,r4,r10
 402bd4c:	483fdf26 	beq	r9,zero,402bccc <__alt_data_end+0xfffebccc>
 402bd50:	00800084 	movi	r2,2
 402bd54:	f800283a 	ret
 402bd58:	4080030e 	bge	r8,r2,402bd68 <__ledf2+0xcc>
 402bd5c:	383fef26 	beq	r7,zero,402bd1c <__alt_data_end+0xfffebd1c>
 402bd60:	00bfffc4 	movi	r2,-1
 402bd64:	f800283a 	ret
 402bd68:	123feb16 	blt	r2,r8,402bd18 <__alt_data_end+0xfffebd18>
 402bd6c:	1abff336 	bltu	r3,r10,402bd3c <__alt_data_end+0xfffebd3c>
 402bd70:	50c00326 	beq	r10,r3,402bd80 <__ledf2+0xe4>
 402bd74:	50c0042e 	bgeu	r10,r3,402bd88 <__ledf2+0xec>
 402bd78:	283fe81e 	bne	r5,zero,402bd1c <__alt_data_end+0xfffebd1c>
 402bd7c:	003ff806 	br	402bd60 <__alt_data_end+0xfffebd60>
 402bd80:	313fee36 	bltu	r6,r4,402bd3c <__alt_data_end+0xfffebd3c>
 402bd84:	21bffc36 	bltu	r4,r6,402bd78 <__alt_data_end+0xfffebd78>
 402bd88:	0005883a 	mov	r2,zero
 402bd8c:	f800283a 	ret

0402bd90 <__muldf3>:
 402bd90:	defff304 	addi	sp,sp,-52
 402bd94:	2804d53a 	srli	r2,r5,20
 402bd98:	dd800915 	stw	r22,36(sp)
 402bd9c:	282cd7fa 	srli	r22,r5,31
 402bda0:	dc000315 	stw	r16,12(sp)
 402bda4:	04000434 	movhi	r16,16
 402bda8:	dd400815 	stw	r21,32(sp)
 402bdac:	dc800515 	stw	r18,20(sp)
 402bdb0:	843fffc4 	addi	r16,r16,-1
 402bdb4:	dfc00c15 	stw	ra,48(sp)
 402bdb8:	df000b15 	stw	fp,44(sp)
 402bdbc:	ddc00a15 	stw	r23,40(sp)
 402bdc0:	dd000715 	stw	r20,28(sp)
 402bdc4:	dcc00615 	stw	r19,24(sp)
 402bdc8:	dc400415 	stw	r17,16(sp)
 402bdcc:	1481ffcc 	andi	r18,r2,2047
 402bdd0:	2c20703a 	and	r16,r5,r16
 402bdd4:	b02b883a 	mov	r21,r22
 402bdd8:	b2403fcc 	andi	r9,r22,255
 402bddc:	90006026 	beq	r18,zero,402bf60 <__muldf3+0x1d0>
 402bde0:	0081ffc4 	movi	r2,2047
 402bde4:	2029883a 	mov	r20,r4
 402bde8:	90803626 	beq	r18,r2,402bec4 <__muldf3+0x134>
 402bdec:	80800434 	orhi	r2,r16,16
 402bdf0:	100490fa 	slli	r2,r2,3
 402bdf4:	2020d77a 	srli	r16,r4,29
 402bdf8:	202890fa 	slli	r20,r4,3
 402bdfc:	94bf0044 	addi	r18,r18,-1023
 402be00:	80a0b03a 	or	r16,r16,r2
 402be04:	0027883a 	mov	r19,zero
 402be08:	0039883a 	mov	fp,zero
 402be0c:	3804d53a 	srli	r2,r7,20
 402be10:	382ed7fa 	srli	r23,r7,31
 402be14:	04400434 	movhi	r17,16
 402be18:	8c7fffc4 	addi	r17,r17,-1
 402be1c:	1081ffcc 	andi	r2,r2,2047
 402be20:	3011883a 	mov	r8,r6
 402be24:	3c62703a 	and	r17,r7,r17
 402be28:	ba803fcc 	andi	r10,r23,255
 402be2c:	10006d26 	beq	r2,zero,402bfe4 <__muldf3+0x254>
 402be30:	00c1ffc4 	movi	r3,2047
 402be34:	10c06526 	beq	r2,r3,402bfcc <__muldf3+0x23c>
 402be38:	88c00434 	orhi	r3,r17,16
 402be3c:	180690fa 	slli	r3,r3,3
 402be40:	3022d77a 	srli	r17,r6,29
 402be44:	301090fa 	slli	r8,r6,3
 402be48:	10bf0044 	addi	r2,r2,-1023
 402be4c:	88e2b03a 	or	r17,r17,r3
 402be50:	000b883a 	mov	r5,zero
 402be54:	9085883a 	add	r2,r18,r2
 402be58:	2cc8b03a 	or	r4,r5,r19
 402be5c:	00c003c4 	movi	r3,15
 402be60:	bdacf03a 	xor	r22,r23,r22
 402be64:	12c00044 	addi	r11,r2,1
 402be68:	19009936 	bltu	r3,r4,402c0d0 <__muldf3+0x340>
 402be6c:	200890ba 	slli	r4,r4,2
 402be70:	00c100f4 	movhi	r3,1027
 402be74:	18efa104 	addi	r3,r3,-16764
 402be78:	20c9883a 	add	r4,r4,r3
 402be7c:	20c00017 	ldw	r3,0(r4)
 402be80:	1800683a 	jmp	r3
 402be84:	0402c0d0 	cmplti	r16,zero,2819
 402be88:	0402bee4 	muli	r16,zero,2811
 402be8c:	0402bee4 	muli	r16,zero,2811
 402be90:	0402bee0 	cmpeqi	r16,zero,2811
 402be94:	0402c0ac 	andhi	r16,zero,2818
 402be98:	0402c0ac 	andhi	r16,zero,2818
 402be9c:	0402c094 	movui	r16,2818
 402bea0:	0402bee0 	cmpeqi	r16,zero,2811
 402bea4:	0402c0ac 	andhi	r16,zero,2818
 402bea8:	0402c094 	movui	r16,2818
 402beac:	0402c0ac 	andhi	r16,zero,2818
 402beb0:	0402bee0 	cmpeqi	r16,zero,2811
 402beb4:	0402c0bc 	xorhi	r16,zero,2818
 402beb8:	0402c0bc 	xorhi	r16,zero,2818
 402bebc:	0402c0bc 	xorhi	r16,zero,2818
 402bec0:	0402c2d8 	cmpnei	r16,zero,2827
 402bec4:	2404b03a 	or	r2,r4,r16
 402bec8:	10006f1e 	bne	r2,zero,402c088 <__muldf3+0x2f8>
 402becc:	04c00204 	movi	r19,8
 402bed0:	0021883a 	mov	r16,zero
 402bed4:	0029883a 	mov	r20,zero
 402bed8:	07000084 	movi	fp,2
 402bedc:	003fcb06 	br	402be0c <__alt_data_end+0xfffebe0c>
 402bee0:	502d883a 	mov	r22,r10
 402bee4:	00800084 	movi	r2,2
 402bee8:	28805726 	beq	r5,r2,402c048 <__muldf3+0x2b8>
 402beec:	008000c4 	movi	r2,3
 402bef0:	28816626 	beq	r5,r2,402c48c <__muldf3+0x6fc>
 402bef4:	00800044 	movi	r2,1
 402bef8:	2881411e 	bne	r5,r2,402c400 <__muldf3+0x670>
 402befc:	b02b883a 	mov	r21,r22
 402bf00:	0005883a 	mov	r2,zero
 402bf04:	000b883a 	mov	r5,zero
 402bf08:	0029883a 	mov	r20,zero
 402bf0c:	1004953a 	slli	r2,r2,20
 402bf10:	a8c03fcc 	andi	r3,r21,255
 402bf14:	04400434 	movhi	r17,16
 402bf18:	8c7fffc4 	addi	r17,r17,-1
 402bf1c:	180697fa 	slli	r3,r3,31
 402bf20:	2c4a703a 	and	r5,r5,r17
 402bf24:	288ab03a 	or	r5,r5,r2
 402bf28:	28c6b03a 	or	r3,r5,r3
 402bf2c:	a005883a 	mov	r2,r20
 402bf30:	dfc00c17 	ldw	ra,48(sp)
 402bf34:	df000b17 	ldw	fp,44(sp)
 402bf38:	ddc00a17 	ldw	r23,40(sp)
 402bf3c:	dd800917 	ldw	r22,36(sp)
 402bf40:	dd400817 	ldw	r21,32(sp)
 402bf44:	dd000717 	ldw	r20,28(sp)
 402bf48:	dcc00617 	ldw	r19,24(sp)
 402bf4c:	dc800517 	ldw	r18,20(sp)
 402bf50:	dc400417 	ldw	r17,16(sp)
 402bf54:	dc000317 	ldw	r16,12(sp)
 402bf58:	dec00d04 	addi	sp,sp,52
 402bf5c:	f800283a 	ret
 402bf60:	2404b03a 	or	r2,r4,r16
 402bf64:	2027883a 	mov	r19,r4
 402bf68:	10004226 	beq	r2,zero,402c074 <__muldf3+0x2e4>
 402bf6c:	8000fc26 	beq	r16,zero,402c360 <__muldf3+0x5d0>
 402bf70:	8009883a 	mov	r4,r16
 402bf74:	d9800215 	stw	r6,8(sp)
 402bf78:	d9c00015 	stw	r7,0(sp)
 402bf7c:	da400115 	stw	r9,4(sp)
 402bf80:	402cfa80 	call	402cfa8 <__clzsi2>
 402bf84:	d9800217 	ldw	r6,8(sp)
 402bf88:	d9c00017 	ldw	r7,0(sp)
 402bf8c:	da400117 	ldw	r9,4(sp)
 402bf90:	113ffd44 	addi	r4,r2,-11
 402bf94:	00c00704 	movi	r3,28
 402bf98:	1900ed16 	blt	r3,r4,402c350 <__muldf3+0x5c0>
 402bf9c:	00c00744 	movi	r3,29
 402bfa0:	147ffe04 	addi	r17,r2,-8
 402bfa4:	1907c83a 	sub	r3,r3,r4
 402bfa8:	8460983a 	sll	r16,r16,r17
 402bfac:	98c6d83a 	srl	r3,r19,r3
 402bfb0:	9c68983a 	sll	r20,r19,r17
 402bfb4:	1c20b03a 	or	r16,r3,r16
 402bfb8:	1080fcc4 	addi	r2,r2,1011
 402bfbc:	00a5c83a 	sub	r18,zero,r2
 402bfc0:	0027883a 	mov	r19,zero
 402bfc4:	0039883a 	mov	fp,zero
 402bfc8:	003f9006 	br	402be0c <__alt_data_end+0xfffebe0c>
 402bfcc:	3446b03a 	or	r3,r6,r17
 402bfd0:	1800261e 	bne	r3,zero,402c06c <__muldf3+0x2dc>
 402bfd4:	0023883a 	mov	r17,zero
 402bfd8:	0011883a 	mov	r8,zero
 402bfdc:	01400084 	movi	r5,2
 402bfe0:	003f9c06 	br	402be54 <__alt_data_end+0xfffebe54>
 402bfe4:	3446b03a 	or	r3,r6,r17
 402bfe8:	18001c26 	beq	r3,zero,402c05c <__muldf3+0x2cc>
 402bfec:	8800ce26 	beq	r17,zero,402c328 <__muldf3+0x598>
 402bff0:	8809883a 	mov	r4,r17
 402bff4:	d9800215 	stw	r6,8(sp)
 402bff8:	da400115 	stw	r9,4(sp)
 402bffc:	da800015 	stw	r10,0(sp)
 402c000:	402cfa80 	call	402cfa8 <__clzsi2>
 402c004:	d9800217 	ldw	r6,8(sp)
 402c008:	da400117 	ldw	r9,4(sp)
 402c00c:	da800017 	ldw	r10,0(sp)
 402c010:	113ffd44 	addi	r4,r2,-11
 402c014:	00c00704 	movi	r3,28
 402c018:	1900bf16 	blt	r3,r4,402c318 <__muldf3+0x588>
 402c01c:	00c00744 	movi	r3,29
 402c020:	123ffe04 	addi	r8,r2,-8
 402c024:	1907c83a 	sub	r3,r3,r4
 402c028:	8a22983a 	sll	r17,r17,r8
 402c02c:	30c6d83a 	srl	r3,r6,r3
 402c030:	3210983a 	sll	r8,r6,r8
 402c034:	1c62b03a 	or	r17,r3,r17
 402c038:	1080fcc4 	addi	r2,r2,1011
 402c03c:	0085c83a 	sub	r2,zero,r2
 402c040:	000b883a 	mov	r5,zero
 402c044:	003f8306 	br	402be54 <__alt_data_end+0xfffebe54>
 402c048:	b02b883a 	mov	r21,r22
 402c04c:	0081ffc4 	movi	r2,2047
 402c050:	000b883a 	mov	r5,zero
 402c054:	0029883a 	mov	r20,zero
 402c058:	003fac06 	br	402bf0c <__alt_data_end+0xfffebf0c>
 402c05c:	0023883a 	mov	r17,zero
 402c060:	0011883a 	mov	r8,zero
 402c064:	01400044 	movi	r5,1
 402c068:	003f7a06 	br	402be54 <__alt_data_end+0xfffebe54>
 402c06c:	014000c4 	movi	r5,3
 402c070:	003f7806 	br	402be54 <__alt_data_end+0xfffebe54>
 402c074:	04c00104 	movi	r19,4
 402c078:	0021883a 	mov	r16,zero
 402c07c:	0029883a 	mov	r20,zero
 402c080:	07000044 	movi	fp,1
 402c084:	003f6106 	br	402be0c <__alt_data_end+0xfffebe0c>
 402c088:	04c00304 	movi	r19,12
 402c08c:	070000c4 	movi	fp,3
 402c090:	003f5e06 	br	402be0c <__alt_data_end+0xfffebe0c>
 402c094:	01400434 	movhi	r5,16
 402c098:	002b883a 	mov	r21,zero
 402c09c:	297fffc4 	addi	r5,r5,-1
 402c0a0:	053fffc4 	movi	r20,-1
 402c0a4:	0081ffc4 	movi	r2,2047
 402c0a8:	003f9806 	br	402bf0c <__alt_data_end+0xfffebf0c>
 402c0ac:	8023883a 	mov	r17,r16
 402c0b0:	a011883a 	mov	r8,r20
 402c0b4:	e00b883a 	mov	r5,fp
 402c0b8:	003f8a06 	br	402bee4 <__alt_data_end+0xfffebee4>
 402c0bc:	8023883a 	mov	r17,r16
 402c0c0:	a011883a 	mov	r8,r20
 402c0c4:	482d883a 	mov	r22,r9
 402c0c8:	e00b883a 	mov	r5,fp
 402c0cc:	003f8506 	br	402bee4 <__alt_data_end+0xfffebee4>
 402c0d0:	a00ad43a 	srli	r5,r20,16
 402c0d4:	401ad43a 	srli	r13,r8,16
 402c0d8:	a53fffcc 	andi	r20,r20,65535
 402c0dc:	423fffcc 	andi	r8,r8,65535
 402c0e0:	4519383a 	mul	r12,r8,r20
 402c0e4:	4147383a 	mul	r3,r8,r5
 402c0e8:	6d09383a 	mul	r4,r13,r20
 402c0ec:	600cd43a 	srli	r6,r12,16
 402c0f0:	2b5d383a 	mul	r14,r5,r13
 402c0f4:	20c9883a 	add	r4,r4,r3
 402c0f8:	310d883a 	add	r6,r6,r4
 402c0fc:	30c0022e 	bgeu	r6,r3,402c108 <__muldf3+0x378>
 402c100:	00c00074 	movhi	r3,1
 402c104:	70dd883a 	add	r14,r14,r3
 402c108:	8826d43a 	srli	r19,r17,16
 402c10c:	8bffffcc 	andi	r15,r17,65535
 402c110:	7d23383a 	mul	r17,r15,r20
 402c114:	7949383a 	mul	r4,r15,r5
 402c118:	9d29383a 	mul	r20,r19,r20
 402c11c:	8814d43a 	srli	r10,r17,16
 402c120:	3012943a 	slli	r9,r6,16
 402c124:	a129883a 	add	r20,r20,r4
 402c128:	633fffcc 	andi	r12,r12,65535
 402c12c:	5515883a 	add	r10,r10,r20
 402c130:	3006d43a 	srli	r3,r6,16
 402c134:	4b13883a 	add	r9,r9,r12
 402c138:	2ccb383a 	mul	r5,r5,r19
 402c13c:	5100022e 	bgeu	r10,r4,402c148 <__muldf3+0x3b8>
 402c140:	01000074 	movhi	r4,1
 402c144:	290b883a 	add	r5,r5,r4
 402c148:	802ad43a 	srli	r21,r16,16
 402c14c:	843fffcc 	andi	r16,r16,65535
 402c150:	440d383a 	mul	r6,r8,r16
 402c154:	4565383a 	mul	r18,r8,r21
 402c158:	8349383a 	mul	r4,r16,r13
 402c15c:	500e943a 	slli	r7,r10,16
 402c160:	3010d43a 	srli	r8,r6,16
 402c164:	5028d43a 	srli	r20,r10,16
 402c168:	2489883a 	add	r4,r4,r18
 402c16c:	8abfffcc 	andi	r10,r17,65535
 402c170:	3a95883a 	add	r10,r7,r10
 402c174:	4119883a 	add	r12,r8,r4
 402c178:	a169883a 	add	r20,r20,r5
 402c17c:	1a87883a 	add	r3,r3,r10
 402c180:	6d5b383a 	mul	r13,r13,r21
 402c184:	6480022e 	bgeu	r12,r18,402c190 <__muldf3+0x400>
 402c188:	01000074 	movhi	r4,1
 402c18c:	691b883a 	add	r13,r13,r4
 402c190:	7c25383a 	mul	r18,r15,r16
 402c194:	7d4b383a 	mul	r5,r15,r21
 402c198:	84cf383a 	mul	r7,r16,r19
 402c19c:	901ed43a 	srli	r15,r18,16
 402c1a0:	6008d43a 	srli	r4,r12,16
 402c1a4:	6010943a 	slli	r8,r12,16
 402c1a8:	394f883a 	add	r7,r7,r5
 402c1ac:	333fffcc 	andi	r12,r6,65535
 402c1b0:	79df883a 	add	r15,r15,r7
 402c1b4:	235b883a 	add	r13,r4,r13
 402c1b8:	9d63383a 	mul	r17,r19,r21
 402c1bc:	4309883a 	add	r4,r8,r12
 402c1c0:	7940022e 	bgeu	r15,r5,402c1cc <__muldf3+0x43c>
 402c1c4:	01400074 	movhi	r5,1
 402c1c8:	8963883a 	add	r17,r17,r5
 402c1cc:	780a943a 	slli	r5,r15,16
 402c1d0:	91bfffcc 	andi	r6,r18,65535
 402c1d4:	70c7883a 	add	r3,r14,r3
 402c1d8:	298d883a 	add	r6,r5,r6
 402c1dc:	1a8f803a 	cmpltu	r7,r3,r10
 402c1e0:	350b883a 	add	r5,r6,r20
 402c1e4:	20c7883a 	add	r3,r4,r3
 402c1e8:	3955883a 	add	r10,r7,r5
 402c1ec:	1909803a 	cmpltu	r4,r3,r4
 402c1f0:	6a91883a 	add	r8,r13,r10
 402c1f4:	780cd43a 	srli	r6,r15,16
 402c1f8:	2219883a 	add	r12,r4,r8
 402c1fc:	2d0b803a 	cmpltu	r5,r5,r20
 402c200:	51cf803a 	cmpltu	r7,r10,r7
 402c204:	29ceb03a 	or	r7,r5,r7
 402c208:	4351803a 	cmpltu	r8,r8,r13
 402c20c:	610b803a 	cmpltu	r5,r12,r4
 402c210:	4148b03a 	or	r4,r8,r5
 402c214:	398f883a 	add	r7,r7,r6
 402c218:	3909883a 	add	r4,r7,r4
 402c21c:	1810927a 	slli	r8,r3,9
 402c220:	2449883a 	add	r4,r4,r17
 402c224:	2008927a 	slli	r4,r4,9
 402c228:	6022d5fa 	srli	r17,r12,23
 402c22c:	1806d5fa 	srli	r3,r3,23
 402c230:	4252b03a 	or	r9,r8,r9
 402c234:	600a927a 	slli	r5,r12,9
 402c238:	4810c03a 	cmpne	r8,r9,zero
 402c23c:	2462b03a 	or	r17,r4,r17
 402c240:	40c6b03a 	or	r3,r8,r3
 402c244:	8900402c 	andhi	r4,r17,256
 402c248:	1950b03a 	or	r8,r3,r5
 402c24c:	20000726 	beq	r4,zero,402c26c <__muldf3+0x4dc>
 402c250:	4006d07a 	srli	r3,r8,1
 402c254:	880497fa 	slli	r2,r17,31
 402c258:	4200004c 	andi	r8,r8,1
 402c25c:	8822d07a 	srli	r17,r17,1
 402c260:	1a10b03a 	or	r8,r3,r8
 402c264:	1210b03a 	or	r8,r2,r8
 402c268:	5805883a 	mov	r2,r11
 402c26c:	1140ffc4 	addi	r5,r2,1023
 402c270:	0140440e 	bge	zero,r5,402c384 <__muldf3+0x5f4>
 402c274:	40c001cc 	andi	r3,r8,7
 402c278:	18000726 	beq	r3,zero,402c298 <__muldf3+0x508>
 402c27c:	40c003cc 	andi	r3,r8,15
 402c280:	01000104 	movi	r4,4
 402c284:	19000426 	beq	r3,r4,402c298 <__muldf3+0x508>
 402c288:	4107883a 	add	r3,r8,r4
 402c28c:	1a11803a 	cmpltu	r8,r3,r8
 402c290:	8a23883a 	add	r17,r17,r8
 402c294:	1811883a 	mov	r8,r3
 402c298:	88c0402c 	andhi	r3,r17,256
 402c29c:	18000426 	beq	r3,zero,402c2b0 <__muldf3+0x520>
 402c2a0:	11410004 	addi	r5,r2,1024
 402c2a4:	00bfc034 	movhi	r2,65280
 402c2a8:	10bfffc4 	addi	r2,r2,-1
 402c2ac:	88a2703a 	and	r17,r17,r2
 402c2b0:	0081ff84 	movi	r2,2046
 402c2b4:	117f6416 	blt	r2,r5,402c048 <__alt_data_end+0xfffec048>
 402c2b8:	8828977a 	slli	r20,r17,29
 402c2bc:	4010d0fa 	srli	r8,r8,3
 402c2c0:	8822927a 	slli	r17,r17,9
 402c2c4:	2881ffcc 	andi	r2,r5,2047
 402c2c8:	a228b03a 	or	r20,r20,r8
 402c2cc:	880ad33a 	srli	r5,r17,12
 402c2d0:	b02b883a 	mov	r21,r22
 402c2d4:	003f0d06 	br	402bf0c <__alt_data_end+0xfffebf0c>
 402c2d8:	8080022c 	andhi	r2,r16,8
 402c2dc:	10000926 	beq	r2,zero,402c304 <__muldf3+0x574>
 402c2e0:	8880022c 	andhi	r2,r17,8
 402c2e4:	1000071e 	bne	r2,zero,402c304 <__muldf3+0x574>
 402c2e8:	00800434 	movhi	r2,16
 402c2ec:	89400234 	orhi	r5,r17,8
 402c2f0:	10bfffc4 	addi	r2,r2,-1
 402c2f4:	b82b883a 	mov	r21,r23
 402c2f8:	288a703a 	and	r5,r5,r2
 402c2fc:	4029883a 	mov	r20,r8
 402c300:	003f6806 	br	402c0a4 <__alt_data_end+0xfffec0a4>
 402c304:	00800434 	movhi	r2,16
 402c308:	81400234 	orhi	r5,r16,8
 402c30c:	10bfffc4 	addi	r2,r2,-1
 402c310:	288a703a 	and	r5,r5,r2
 402c314:	003f6306 	br	402c0a4 <__alt_data_end+0xfffec0a4>
 402c318:	147ff604 	addi	r17,r2,-40
 402c31c:	3462983a 	sll	r17,r6,r17
 402c320:	0011883a 	mov	r8,zero
 402c324:	003f4406 	br	402c038 <__alt_data_end+0xfffec038>
 402c328:	3009883a 	mov	r4,r6
 402c32c:	d9800215 	stw	r6,8(sp)
 402c330:	da400115 	stw	r9,4(sp)
 402c334:	da800015 	stw	r10,0(sp)
 402c338:	402cfa80 	call	402cfa8 <__clzsi2>
 402c33c:	10800804 	addi	r2,r2,32
 402c340:	da800017 	ldw	r10,0(sp)
 402c344:	da400117 	ldw	r9,4(sp)
 402c348:	d9800217 	ldw	r6,8(sp)
 402c34c:	003f3006 	br	402c010 <__alt_data_end+0xfffec010>
 402c350:	143ff604 	addi	r16,r2,-40
 402c354:	9c20983a 	sll	r16,r19,r16
 402c358:	0029883a 	mov	r20,zero
 402c35c:	003f1606 	br	402bfb8 <__alt_data_end+0xfffebfb8>
 402c360:	d9800215 	stw	r6,8(sp)
 402c364:	d9c00015 	stw	r7,0(sp)
 402c368:	da400115 	stw	r9,4(sp)
 402c36c:	402cfa80 	call	402cfa8 <__clzsi2>
 402c370:	10800804 	addi	r2,r2,32
 402c374:	da400117 	ldw	r9,4(sp)
 402c378:	d9c00017 	ldw	r7,0(sp)
 402c37c:	d9800217 	ldw	r6,8(sp)
 402c380:	003f0306 	br	402bf90 <__alt_data_end+0xfffebf90>
 402c384:	00c00044 	movi	r3,1
 402c388:	1947c83a 	sub	r3,r3,r5
 402c38c:	00800e04 	movi	r2,56
 402c390:	10feda16 	blt	r2,r3,402befc <__alt_data_end+0xfffebefc>
 402c394:	008007c4 	movi	r2,31
 402c398:	10c01b16 	blt	r2,r3,402c408 <__muldf3+0x678>
 402c39c:	00800804 	movi	r2,32
 402c3a0:	10c5c83a 	sub	r2,r2,r3
 402c3a4:	888a983a 	sll	r5,r17,r2
 402c3a8:	40c8d83a 	srl	r4,r8,r3
 402c3ac:	4084983a 	sll	r2,r8,r2
 402c3b0:	88e2d83a 	srl	r17,r17,r3
 402c3b4:	2906b03a 	or	r3,r5,r4
 402c3b8:	1004c03a 	cmpne	r2,r2,zero
 402c3bc:	1886b03a 	or	r3,r3,r2
 402c3c0:	188001cc 	andi	r2,r3,7
 402c3c4:	10000726 	beq	r2,zero,402c3e4 <__muldf3+0x654>
 402c3c8:	188003cc 	andi	r2,r3,15
 402c3cc:	01000104 	movi	r4,4
 402c3d0:	11000426 	beq	r2,r4,402c3e4 <__muldf3+0x654>
 402c3d4:	1805883a 	mov	r2,r3
 402c3d8:	10c00104 	addi	r3,r2,4
 402c3dc:	1885803a 	cmpltu	r2,r3,r2
 402c3e0:	88a3883a 	add	r17,r17,r2
 402c3e4:	8880202c 	andhi	r2,r17,128
 402c3e8:	10001c26 	beq	r2,zero,402c45c <__muldf3+0x6cc>
 402c3ec:	b02b883a 	mov	r21,r22
 402c3f0:	00800044 	movi	r2,1
 402c3f4:	000b883a 	mov	r5,zero
 402c3f8:	0029883a 	mov	r20,zero
 402c3fc:	003ec306 	br	402bf0c <__alt_data_end+0xfffebf0c>
 402c400:	5805883a 	mov	r2,r11
 402c404:	003f9906 	br	402c26c <__alt_data_end+0xfffec26c>
 402c408:	00bff844 	movi	r2,-31
 402c40c:	1145c83a 	sub	r2,r2,r5
 402c410:	8888d83a 	srl	r4,r17,r2
 402c414:	00800804 	movi	r2,32
 402c418:	18801a26 	beq	r3,r2,402c484 <__muldf3+0x6f4>
 402c41c:	00801004 	movi	r2,64
 402c420:	10c5c83a 	sub	r2,r2,r3
 402c424:	8884983a 	sll	r2,r17,r2
 402c428:	1204b03a 	or	r2,r2,r8
 402c42c:	1004c03a 	cmpne	r2,r2,zero
 402c430:	2084b03a 	or	r2,r4,r2
 402c434:	144001cc 	andi	r17,r2,7
 402c438:	88000d1e 	bne	r17,zero,402c470 <__muldf3+0x6e0>
 402c43c:	000b883a 	mov	r5,zero
 402c440:	1028d0fa 	srli	r20,r2,3
 402c444:	b02b883a 	mov	r21,r22
 402c448:	0005883a 	mov	r2,zero
 402c44c:	a468b03a 	or	r20,r20,r17
 402c450:	003eae06 	br	402bf0c <__alt_data_end+0xfffebf0c>
 402c454:	1007883a 	mov	r3,r2
 402c458:	0023883a 	mov	r17,zero
 402c45c:	880a927a 	slli	r5,r17,9
 402c460:	1805883a 	mov	r2,r3
 402c464:	8822977a 	slli	r17,r17,29
 402c468:	280ad33a 	srli	r5,r5,12
 402c46c:	003ff406 	br	402c440 <__alt_data_end+0xfffec440>
 402c470:	10c003cc 	andi	r3,r2,15
 402c474:	01000104 	movi	r4,4
 402c478:	193ff626 	beq	r3,r4,402c454 <__alt_data_end+0xfffec454>
 402c47c:	0023883a 	mov	r17,zero
 402c480:	003fd506 	br	402c3d8 <__alt_data_end+0xfffec3d8>
 402c484:	0005883a 	mov	r2,zero
 402c488:	003fe706 	br	402c428 <__alt_data_end+0xfffec428>
 402c48c:	00800434 	movhi	r2,16
 402c490:	89400234 	orhi	r5,r17,8
 402c494:	10bfffc4 	addi	r2,r2,-1
 402c498:	b02b883a 	mov	r21,r22
 402c49c:	288a703a 	and	r5,r5,r2
 402c4a0:	4029883a 	mov	r20,r8
 402c4a4:	003eff06 	br	402c0a4 <__alt_data_end+0xfffec0a4>

0402c4a8 <__subdf3>:
 402c4a8:	02000434 	movhi	r8,16
 402c4ac:	423fffc4 	addi	r8,r8,-1
 402c4b0:	defffb04 	addi	sp,sp,-20
 402c4b4:	2a14703a 	and	r10,r5,r8
 402c4b8:	3812d53a 	srli	r9,r7,20
 402c4bc:	3a10703a 	and	r8,r7,r8
 402c4c0:	2006d77a 	srli	r3,r4,29
 402c4c4:	3004d77a 	srli	r2,r6,29
 402c4c8:	dc000015 	stw	r16,0(sp)
 402c4cc:	501490fa 	slli	r10,r10,3
 402c4d0:	2820d53a 	srli	r16,r5,20
 402c4d4:	401090fa 	slli	r8,r8,3
 402c4d8:	dc800215 	stw	r18,8(sp)
 402c4dc:	dc400115 	stw	r17,4(sp)
 402c4e0:	dfc00415 	stw	ra,16(sp)
 402c4e4:	202290fa 	slli	r17,r4,3
 402c4e8:	dcc00315 	stw	r19,12(sp)
 402c4ec:	4a41ffcc 	andi	r9,r9,2047
 402c4f0:	0101ffc4 	movi	r4,2047
 402c4f4:	2824d7fa 	srli	r18,r5,31
 402c4f8:	8401ffcc 	andi	r16,r16,2047
 402c4fc:	50c6b03a 	or	r3,r10,r3
 402c500:	380ed7fa 	srli	r7,r7,31
 402c504:	408ab03a 	or	r5,r8,r2
 402c508:	300c90fa 	slli	r6,r6,3
 402c50c:	49009626 	beq	r9,r4,402c768 <__subdf3+0x2c0>
 402c510:	39c0005c 	xori	r7,r7,1
 402c514:	8245c83a 	sub	r2,r16,r9
 402c518:	3c807426 	beq	r7,r18,402c6ec <__subdf3+0x244>
 402c51c:	0080af0e 	bge	zero,r2,402c7dc <__subdf3+0x334>
 402c520:	48002a1e 	bne	r9,zero,402c5cc <__subdf3+0x124>
 402c524:	2988b03a 	or	r4,r5,r6
 402c528:	20009a1e 	bne	r4,zero,402c794 <__subdf3+0x2ec>
 402c52c:	888001cc 	andi	r2,r17,7
 402c530:	10000726 	beq	r2,zero,402c550 <__subdf3+0xa8>
 402c534:	888003cc 	andi	r2,r17,15
 402c538:	01000104 	movi	r4,4
 402c53c:	11000426 	beq	r2,r4,402c550 <__subdf3+0xa8>
 402c540:	890b883a 	add	r5,r17,r4
 402c544:	2c63803a 	cmpltu	r17,r5,r17
 402c548:	1c47883a 	add	r3,r3,r17
 402c54c:	2823883a 	mov	r17,r5
 402c550:	1880202c 	andhi	r2,r3,128
 402c554:	10005926 	beq	r2,zero,402c6bc <__subdf3+0x214>
 402c558:	84000044 	addi	r16,r16,1
 402c55c:	0081ffc4 	movi	r2,2047
 402c560:	8080be26 	beq	r16,r2,402c85c <__subdf3+0x3b4>
 402c564:	017fe034 	movhi	r5,65408
 402c568:	297fffc4 	addi	r5,r5,-1
 402c56c:	1946703a 	and	r3,r3,r5
 402c570:	1804977a 	slli	r2,r3,29
 402c574:	1806927a 	slli	r3,r3,9
 402c578:	8822d0fa 	srli	r17,r17,3
 402c57c:	8401ffcc 	andi	r16,r16,2047
 402c580:	180ad33a 	srli	r5,r3,12
 402c584:	9100004c 	andi	r4,r18,1
 402c588:	1444b03a 	or	r2,r2,r17
 402c58c:	80c1ffcc 	andi	r3,r16,2047
 402c590:	1820953a 	slli	r16,r3,20
 402c594:	20c03fcc 	andi	r3,r4,255
 402c598:	180897fa 	slli	r4,r3,31
 402c59c:	00c00434 	movhi	r3,16
 402c5a0:	18ffffc4 	addi	r3,r3,-1
 402c5a4:	28c6703a 	and	r3,r5,r3
 402c5a8:	1c06b03a 	or	r3,r3,r16
 402c5ac:	1906b03a 	or	r3,r3,r4
 402c5b0:	dfc00417 	ldw	ra,16(sp)
 402c5b4:	dcc00317 	ldw	r19,12(sp)
 402c5b8:	dc800217 	ldw	r18,8(sp)
 402c5bc:	dc400117 	ldw	r17,4(sp)
 402c5c0:	dc000017 	ldw	r16,0(sp)
 402c5c4:	dec00504 	addi	sp,sp,20
 402c5c8:	f800283a 	ret
 402c5cc:	0101ffc4 	movi	r4,2047
 402c5d0:	813fd626 	beq	r16,r4,402c52c <__alt_data_end+0xfffec52c>
 402c5d4:	29402034 	orhi	r5,r5,128
 402c5d8:	01000e04 	movi	r4,56
 402c5dc:	2080a316 	blt	r4,r2,402c86c <__subdf3+0x3c4>
 402c5e0:	010007c4 	movi	r4,31
 402c5e4:	2080c616 	blt	r4,r2,402c900 <__subdf3+0x458>
 402c5e8:	01000804 	movi	r4,32
 402c5ec:	2089c83a 	sub	r4,r4,r2
 402c5f0:	2910983a 	sll	r8,r5,r4
 402c5f4:	308ed83a 	srl	r7,r6,r2
 402c5f8:	3108983a 	sll	r4,r6,r4
 402c5fc:	2884d83a 	srl	r2,r5,r2
 402c600:	41ccb03a 	or	r6,r8,r7
 402c604:	2008c03a 	cmpne	r4,r4,zero
 402c608:	310cb03a 	or	r6,r6,r4
 402c60c:	898dc83a 	sub	r6,r17,r6
 402c610:	89a3803a 	cmpltu	r17,r17,r6
 402c614:	1887c83a 	sub	r3,r3,r2
 402c618:	1c47c83a 	sub	r3,r3,r17
 402c61c:	3023883a 	mov	r17,r6
 402c620:	1880202c 	andhi	r2,r3,128
 402c624:	10002326 	beq	r2,zero,402c6b4 <__subdf3+0x20c>
 402c628:	04c02034 	movhi	r19,128
 402c62c:	9cffffc4 	addi	r19,r19,-1
 402c630:	1ce6703a 	and	r19,r3,r19
 402c634:	98007a26 	beq	r19,zero,402c820 <__subdf3+0x378>
 402c638:	9809883a 	mov	r4,r19
 402c63c:	402cfa80 	call	402cfa8 <__clzsi2>
 402c640:	113ffe04 	addi	r4,r2,-8
 402c644:	00c007c4 	movi	r3,31
 402c648:	19007b16 	blt	r3,r4,402c838 <__subdf3+0x390>
 402c64c:	00800804 	movi	r2,32
 402c650:	1105c83a 	sub	r2,r2,r4
 402c654:	8884d83a 	srl	r2,r17,r2
 402c658:	9906983a 	sll	r3,r19,r4
 402c65c:	8922983a 	sll	r17,r17,r4
 402c660:	10c4b03a 	or	r2,r2,r3
 402c664:	24007816 	blt	r4,r16,402c848 <__subdf3+0x3a0>
 402c668:	2421c83a 	sub	r16,r4,r16
 402c66c:	80c00044 	addi	r3,r16,1
 402c670:	010007c4 	movi	r4,31
 402c674:	20c09516 	blt	r4,r3,402c8cc <__subdf3+0x424>
 402c678:	01400804 	movi	r5,32
 402c67c:	28cbc83a 	sub	r5,r5,r3
 402c680:	88c8d83a 	srl	r4,r17,r3
 402c684:	8962983a 	sll	r17,r17,r5
 402c688:	114a983a 	sll	r5,r2,r5
 402c68c:	10c6d83a 	srl	r3,r2,r3
 402c690:	8804c03a 	cmpne	r2,r17,zero
 402c694:	290ab03a 	or	r5,r5,r4
 402c698:	28a2b03a 	or	r17,r5,r2
 402c69c:	0021883a 	mov	r16,zero
 402c6a0:	003fa206 	br	402c52c <__alt_data_end+0xfffec52c>
 402c6a4:	2090b03a 	or	r8,r4,r2
 402c6a8:	40018e26 	beq	r8,zero,402cce4 <__subdf3+0x83c>
 402c6ac:	1007883a 	mov	r3,r2
 402c6b0:	2023883a 	mov	r17,r4
 402c6b4:	888001cc 	andi	r2,r17,7
 402c6b8:	103f9e1e 	bne	r2,zero,402c534 <__alt_data_end+0xfffec534>
 402c6bc:	1804977a 	slli	r2,r3,29
 402c6c0:	8822d0fa 	srli	r17,r17,3
 402c6c4:	1810d0fa 	srli	r8,r3,3
 402c6c8:	9100004c 	andi	r4,r18,1
 402c6cc:	1444b03a 	or	r2,r2,r17
 402c6d0:	00c1ffc4 	movi	r3,2047
 402c6d4:	80c02826 	beq	r16,r3,402c778 <__subdf3+0x2d0>
 402c6d8:	01400434 	movhi	r5,16
 402c6dc:	297fffc4 	addi	r5,r5,-1
 402c6e0:	80e0703a 	and	r16,r16,r3
 402c6e4:	414a703a 	and	r5,r8,r5
 402c6e8:	003fa806 	br	402c58c <__alt_data_end+0xfffec58c>
 402c6ec:	0080630e 	bge	zero,r2,402c87c <__subdf3+0x3d4>
 402c6f0:	48003026 	beq	r9,zero,402c7b4 <__subdf3+0x30c>
 402c6f4:	0101ffc4 	movi	r4,2047
 402c6f8:	813f8c26 	beq	r16,r4,402c52c <__alt_data_end+0xfffec52c>
 402c6fc:	29402034 	orhi	r5,r5,128
 402c700:	01000e04 	movi	r4,56
 402c704:	2080a90e 	bge	r4,r2,402c9ac <__subdf3+0x504>
 402c708:	298cb03a 	or	r6,r5,r6
 402c70c:	3012c03a 	cmpne	r9,r6,zero
 402c710:	0005883a 	mov	r2,zero
 402c714:	4c53883a 	add	r9,r9,r17
 402c718:	4c63803a 	cmpltu	r17,r9,r17
 402c71c:	10c7883a 	add	r3,r2,r3
 402c720:	88c7883a 	add	r3,r17,r3
 402c724:	4823883a 	mov	r17,r9
 402c728:	1880202c 	andhi	r2,r3,128
 402c72c:	1000d026 	beq	r2,zero,402ca70 <__subdf3+0x5c8>
 402c730:	84000044 	addi	r16,r16,1
 402c734:	0081ffc4 	movi	r2,2047
 402c738:	8080fe26 	beq	r16,r2,402cb34 <__subdf3+0x68c>
 402c73c:	00bfe034 	movhi	r2,65408
 402c740:	10bfffc4 	addi	r2,r2,-1
 402c744:	1886703a 	and	r3,r3,r2
 402c748:	880ad07a 	srli	r5,r17,1
 402c74c:	180497fa 	slli	r2,r3,31
 402c750:	8900004c 	andi	r4,r17,1
 402c754:	2922b03a 	or	r17,r5,r4
 402c758:	1806d07a 	srli	r3,r3,1
 402c75c:	1462b03a 	or	r17,r2,r17
 402c760:	3825883a 	mov	r18,r7
 402c764:	003f7106 	br	402c52c <__alt_data_end+0xfffec52c>
 402c768:	2984b03a 	or	r2,r5,r6
 402c76c:	103f6826 	beq	r2,zero,402c510 <__alt_data_end+0xfffec510>
 402c770:	39c03fcc 	andi	r7,r7,255
 402c774:	003f6706 	br	402c514 <__alt_data_end+0xfffec514>
 402c778:	4086b03a 	or	r3,r8,r2
 402c77c:	18015226 	beq	r3,zero,402ccc8 <__subdf3+0x820>
 402c780:	00c00434 	movhi	r3,16
 402c784:	41400234 	orhi	r5,r8,8
 402c788:	18ffffc4 	addi	r3,r3,-1
 402c78c:	28ca703a 	and	r5,r5,r3
 402c790:	003f7e06 	br	402c58c <__alt_data_end+0xfffec58c>
 402c794:	10bfffc4 	addi	r2,r2,-1
 402c798:	1000491e 	bne	r2,zero,402c8c0 <__subdf3+0x418>
 402c79c:	898fc83a 	sub	r7,r17,r6
 402c7a0:	89e3803a 	cmpltu	r17,r17,r7
 402c7a4:	1947c83a 	sub	r3,r3,r5
 402c7a8:	1c47c83a 	sub	r3,r3,r17
 402c7ac:	3823883a 	mov	r17,r7
 402c7b0:	003f9b06 	br	402c620 <__alt_data_end+0xfffec620>
 402c7b4:	2988b03a 	or	r4,r5,r6
 402c7b8:	203f5c26 	beq	r4,zero,402c52c <__alt_data_end+0xfffec52c>
 402c7bc:	10bfffc4 	addi	r2,r2,-1
 402c7c0:	1000931e 	bne	r2,zero,402ca10 <__subdf3+0x568>
 402c7c4:	898d883a 	add	r6,r17,r6
 402c7c8:	3463803a 	cmpltu	r17,r6,r17
 402c7cc:	1947883a 	add	r3,r3,r5
 402c7d0:	88c7883a 	add	r3,r17,r3
 402c7d4:	3023883a 	mov	r17,r6
 402c7d8:	003fd306 	br	402c728 <__alt_data_end+0xfffec728>
 402c7dc:	1000541e 	bne	r2,zero,402c930 <__subdf3+0x488>
 402c7e0:	80800044 	addi	r2,r16,1
 402c7e4:	1081ffcc 	andi	r2,r2,2047
 402c7e8:	01000044 	movi	r4,1
 402c7ec:	2080a20e 	bge	r4,r2,402ca78 <__subdf3+0x5d0>
 402c7f0:	8989c83a 	sub	r4,r17,r6
 402c7f4:	8905803a 	cmpltu	r2,r17,r4
 402c7f8:	1967c83a 	sub	r19,r3,r5
 402c7fc:	98a7c83a 	sub	r19,r19,r2
 402c800:	9880202c 	andhi	r2,r19,128
 402c804:	10006326 	beq	r2,zero,402c994 <__subdf3+0x4ec>
 402c808:	3463c83a 	sub	r17,r6,r17
 402c80c:	28c7c83a 	sub	r3,r5,r3
 402c810:	344d803a 	cmpltu	r6,r6,r17
 402c814:	19a7c83a 	sub	r19,r3,r6
 402c818:	3825883a 	mov	r18,r7
 402c81c:	983f861e 	bne	r19,zero,402c638 <__alt_data_end+0xfffec638>
 402c820:	8809883a 	mov	r4,r17
 402c824:	402cfa80 	call	402cfa8 <__clzsi2>
 402c828:	10800804 	addi	r2,r2,32
 402c82c:	113ffe04 	addi	r4,r2,-8
 402c830:	00c007c4 	movi	r3,31
 402c834:	193f850e 	bge	r3,r4,402c64c <__alt_data_end+0xfffec64c>
 402c838:	10bff604 	addi	r2,r2,-40
 402c83c:	8884983a 	sll	r2,r17,r2
 402c840:	0023883a 	mov	r17,zero
 402c844:	243f880e 	bge	r4,r16,402c668 <__alt_data_end+0xfffec668>
 402c848:	00ffe034 	movhi	r3,65408
 402c84c:	18ffffc4 	addi	r3,r3,-1
 402c850:	8121c83a 	sub	r16,r16,r4
 402c854:	10c6703a 	and	r3,r2,r3
 402c858:	003f3406 	br	402c52c <__alt_data_end+0xfffec52c>
 402c85c:	9100004c 	andi	r4,r18,1
 402c860:	000b883a 	mov	r5,zero
 402c864:	0005883a 	mov	r2,zero
 402c868:	003f4806 	br	402c58c <__alt_data_end+0xfffec58c>
 402c86c:	298cb03a 	or	r6,r5,r6
 402c870:	300cc03a 	cmpne	r6,r6,zero
 402c874:	0005883a 	mov	r2,zero
 402c878:	003f6406 	br	402c60c <__alt_data_end+0xfffec60c>
 402c87c:	10009a1e 	bne	r2,zero,402cae8 <__subdf3+0x640>
 402c880:	82400044 	addi	r9,r16,1
 402c884:	4881ffcc 	andi	r2,r9,2047
 402c888:	02800044 	movi	r10,1
 402c88c:	5080670e 	bge	r10,r2,402ca2c <__subdf3+0x584>
 402c890:	0081ffc4 	movi	r2,2047
 402c894:	4880af26 	beq	r9,r2,402cb54 <__subdf3+0x6ac>
 402c898:	898d883a 	add	r6,r17,r6
 402c89c:	1945883a 	add	r2,r3,r5
 402c8a0:	3447803a 	cmpltu	r3,r6,r17
 402c8a4:	1887883a 	add	r3,r3,r2
 402c8a8:	182297fa 	slli	r17,r3,31
 402c8ac:	300cd07a 	srli	r6,r6,1
 402c8b0:	1806d07a 	srli	r3,r3,1
 402c8b4:	4821883a 	mov	r16,r9
 402c8b8:	89a2b03a 	or	r17,r17,r6
 402c8bc:	003f1b06 	br	402c52c <__alt_data_end+0xfffec52c>
 402c8c0:	0101ffc4 	movi	r4,2047
 402c8c4:	813f441e 	bne	r16,r4,402c5d8 <__alt_data_end+0xfffec5d8>
 402c8c8:	003f1806 	br	402c52c <__alt_data_end+0xfffec52c>
 402c8cc:	843ff844 	addi	r16,r16,-31
 402c8d0:	01400804 	movi	r5,32
 402c8d4:	1408d83a 	srl	r4,r2,r16
 402c8d8:	19405026 	beq	r3,r5,402ca1c <__subdf3+0x574>
 402c8dc:	01401004 	movi	r5,64
 402c8e0:	28c7c83a 	sub	r3,r5,r3
 402c8e4:	10c4983a 	sll	r2,r2,r3
 402c8e8:	88a2b03a 	or	r17,r17,r2
 402c8ec:	8822c03a 	cmpne	r17,r17,zero
 402c8f0:	2462b03a 	or	r17,r4,r17
 402c8f4:	0007883a 	mov	r3,zero
 402c8f8:	0021883a 	mov	r16,zero
 402c8fc:	003f6d06 	br	402c6b4 <__alt_data_end+0xfffec6b4>
 402c900:	11fff804 	addi	r7,r2,-32
 402c904:	01000804 	movi	r4,32
 402c908:	29ced83a 	srl	r7,r5,r7
 402c90c:	11004526 	beq	r2,r4,402ca24 <__subdf3+0x57c>
 402c910:	01001004 	movi	r4,64
 402c914:	2089c83a 	sub	r4,r4,r2
 402c918:	2904983a 	sll	r2,r5,r4
 402c91c:	118cb03a 	or	r6,r2,r6
 402c920:	300cc03a 	cmpne	r6,r6,zero
 402c924:	398cb03a 	or	r6,r7,r6
 402c928:	0005883a 	mov	r2,zero
 402c92c:	003f3706 	br	402c60c <__alt_data_end+0xfffec60c>
 402c930:	80002a26 	beq	r16,zero,402c9dc <__subdf3+0x534>
 402c934:	0101ffc4 	movi	r4,2047
 402c938:	49006626 	beq	r9,r4,402cad4 <__subdf3+0x62c>
 402c93c:	0085c83a 	sub	r2,zero,r2
 402c940:	18c02034 	orhi	r3,r3,128
 402c944:	01000e04 	movi	r4,56
 402c948:	20807e16 	blt	r4,r2,402cb44 <__subdf3+0x69c>
 402c94c:	010007c4 	movi	r4,31
 402c950:	2080e716 	blt	r4,r2,402ccf0 <__subdf3+0x848>
 402c954:	01000804 	movi	r4,32
 402c958:	2089c83a 	sub	r4,r4,r2
 402c95c:	1914983a 	sll	r10,r3,r4
 402c960:	8890d83a 	srl	r8,r17,r2
 402c964:	8908983a 	sll	r4,r17,r4
 402c968:	1884d83a 	srl	r2,r3,r2
 402c96c:	5222b03a 	or	r17,r10,r8
 402c970:	2006c03a 	cmpne	r3,r4,zero
 402c974:	88e2b03a 	or	r17,r17,r3
 402c978:	3463c83a 	sub	r17,r6,r17
 402c97c:	2885c83a 	sub	r2,r5,r2
 402c980:	344d803a 	cmpltu	r6,r6,r17
 402c984:	1187c83a 	sub	r3,r2,r6
 402c988:	4821883a 	mov	r16,r9
 402c98c:	3825883a 	mov	r18,r7
 402c990:	003f2306 	br	402c620 <__alt_data_end+0xfffec620>
 402c994:	24d0b03a 	or	r8,r4,r19
 402c998:	40001b1e 	bne	r8,zero,402ca08 <__subdf3+0x560>
 402c99c:	0005883a 	mov	r2,zero
 402c9a0:	0009883a 	mov	r4,zero
 402c9a4:	0021883a 	mov	r16,zero
 402c9a8:	003f4906 	br	402c6d0 <__alt_data_end+0xfffec6d0>
 402c9ac:	010007c4 	movi	r4,31
 402c9b0:	20803a16 	blt	r4,r2,402ca9c <__subdf3+0x5f4>
 402c9b4:	01000804 	movi	r4,32
 402c9b8:	2089c83a 	sub	r4,r4,r2
 402c9bc:	2912983a 	sll	r9,r5,r4
 402c9c0:	3090d83a 	srl	r8,r6,r2
 402c9c4:	3108983a 	sll	r4,r6,r4
 402c9c8:	2884d83a 	srl	r2,r5,r2
 402c9cc:	4a12b03a 	or	r9,r9,r8
 402c9d0:	2008c03a 	cmpne	r4,r4,zero
 402c9d4:	4912b03a 	or	r9,r9,r4
 402c9d8:	003f4e06 	br	402c714 <__alt_data_end+0xfffec714>
 402c9dc:	1c48b03a 	or	r4,r3,r17
 402c9e0:	20003c26 	beq	r4,zero,402cad4 <__subdf3+0x62c>
 402c9e4:	0084303a 	nor	r2,zero,r2
 402c9e8:	1000381e 	bne	r2,zero,402cacc <__subdf3+0x624>
 402c9ec:	3463c83a 	sub	r17,r6,r17
 402c9f0:	28c5c83a 	sub	r2,r5,r3
 402c9f4:	344d803a 	cmpltu	r6,r6,r17
 402c9f8:	1187c83a 	sub	r3,r2,r6
 402c9fc:	4821883a 	mov	r16,r9
 402ca00:	3825883a 	mov	r18,r7
 402ca04:	003f0606 	br	402c620 <__alt_data_end+0xfffec620>
 402ca08:	2023883a 	mov	r17,r4
 402ca0c:	003f0906 	br	402c634 <__alt_data_end+0xfffec634>
 402ca10:	0101ffc4 	movi	r4,2047
 402ca14:	813f3a1e 	bne	r16,r4,402c700 <__alt_data_end+0xfffec700>
 402ca18:	003ec406 	br	402c52c <__alt_data_end+0xfffec52c>
 402ca1c:	0005883a 	mov	r2,zero
 402ca20:	003fb106 	br	402c8e8 <__alt_data_end+0xfffec8e8>
 402ca24:	0005883a 	mov	r2,zero
 402ca28:	003fbc06 	br	402c91c <__alt_data_end+0xfffec91c>
 402ca2c:	1c44b03a 	or	r2,r3,r17
 402ca30:	80008e1e 	bne	r16,zero,402cc6c <__subdf3+0x7c4>
 402ca34:	1000c826 	beq	r2,zero,402cd58 <__subdf3+0x8b0>
 402ca38:	2984b03a 	or	r2,r5,r6
 402ca3c:	103ebb26 	beq	r2,zero,402c52c <__alt_data_end+0xfffec52c>
 402ca40:	8989883a 	add	r4,r17,r6
 402ca44:	1945883a 	add	r2,r3,r5
 402ca48:	2447803a 	cmpltu	r3,r4,r17
 402ca4c:	1887883a 	add	r3,r3,r2
 402ca50:	1880202c 	andhi	r2,r3,128
 402ca54:	2023883a 	mov	r17,r4
 402ca58:	103f1626 	beq	r2,zero,402c6b4 <__alt_data_end+0xfffec6b4>
 402ca5c:	00bfe034 	movhi	r2,65408
 402ca60:	10bfffc4 	addi	r2,r2,-1
 402ca64:	5021883a 	mov	r16,r10
 402ca68:	1886703a 	and	r3,r3,r2
 402ca6c:	003eaf06 	br	402c52c <__alt_data_end+0xfffec52c>
 402ca70:	3825883a 	mov	r18,r7
 402ca74:	003f0f06 	br	402c6b4 <__alt_data_end+0xfffec6b4>
 402ca78:	1c44b03a 	or	r2,r3,r17
 402ca7c:	8000251e 	bne	r16,zero,402cb14 <__subdf3+0x66c>
 402ca80:	1000661e 	bne	r2,zero,402cc1c <__subdf3+0x774>
 402ca84:	2990b03a 	or	r8,r5,r6
 402ca88:	40009626 	beq	r8,zero,402cce4 <__subdf3+0x83c>
 402ca8c:	2807883a 	mov	r3,r5
 402ca90:	3023883a 	mov	r17,r6
 402ca94:	3825883a 	mov	r18,r7
 402ca98:	003ea406 	br	402c52c <__alt_data_end+0xfffec52c>
 402ca9c:	127ff804 	addi	r9,r2,-32
 402caa0:	01000804 	movi	r4,32
 402caa4:	2a52d83a 	srl	r9,r5,r9
 402caa8:	11008c26 	beq	r2,r4,402ccdc <__subdf3+0x834>
 402caac:	01001004 	movi	r4,64
 402cab0:	2085c83a 	sub	r2,r4,r2
 402cab4:	2884983a 	sll	r2,r5,r2
 402cab8:	118cb03a 	or	r6,r2,r6
 402cabc:	300cc03a 	cmpne	r6,r6,zero
 402cac0:	4992b03a 	or	r9,r9,r6
 402cac4:	0005883a 	mov	r2,zero
 402cac8:	003f1206 	br	402c714 <__alt_data_end+0xfffec714>
 402cacc:	0101ffc4 	movi	r4,2047
 402cad0:	493f9c1e 	bne	r9,r4,402c944 <__alt_data_end+0xfffec944>
 402cad4:	2807883a 	mov	r3,r5
 402cad8:	3023883a 	mov	r17,r6
 402cadc:	4821883a 	mov	r16,r9
 402cae0:	3825883a 	mov	r18,r7
 402cae4:	003e9106 	br	402c52c <__alt_data_end+0xfffec52c>
 402cae8:	80001f1e 	bne	r16,zero,402cb68 <__subdf3+0x6c0>
 402caec:	1c48b03a 	or	r4,r3,r17
 402caf0:	20005a26 	beq	r4,zero,402cc5c <__subdf3+0x7b4>
 402caf4:	0084303a 	nor	r2,zero,r2
 402caf8:	1000561e 	bne	r2,zero,402cc54 <__subdf3+0x7ac>
 402cafc:	89a3883a 	add	r17,r17,r6
 402cb00:	1945883a 	add	r2,r3,r5
 402cb04:	898d803a 	cmpltu	r6,r17,r6
 402cb08:	3087883a 	add	r3,r6,r2
 402cb0c:	4821883a 	mov	r16,r9
 402cb10:	003f0506 	br	402c728 <__alt_data_end+0xfffec728>
 402cb14:	10002b1e 	bne	r2,zero,402cbc4 <__subdf3+0x71c>
 402cb18:	2984b03a 	or	r2,r5,r6
 402cb1c:	10008026 	beq	r2,zero,402cd20 <__subdf3+0x878>
 402cb20:	2807883a 	mov	r3,r5
 402cb24:	3023883a 	mov	r17,r6
 402cb28:	3825883a 	mov	r18,r7
 402cb2c:	0401ffc4 	movi	r16,2047
 402cb30:	003e7e06 	br	402c52c <__alt_data_end+0xfffec52c>
 402cb34:	3809883a 	mov	r4,r7
 402cb38:	0011883a 	mov	r8,zero
 402cb3c:	0005883a 	mov	r2,zero
 402cb40:	003ee306 	br	402c6d0 <__alt_data_end+0xfffec6d0>
 402cb44:	1c62b03a 	or	r17,r3,r17
 402cb48:	8822c03a 	cmpne	r17,r17,zero
 402cb4c:	0005883a 	mov	r2,zero
 402cb50:	003f8906 	br	402c978 <__alt_data_end+0xfffec978>
 402cb54:	3809883a 	mov	r4,r7
 402cb58:	4821883a 	mov	r16,r9
 402cb5c:	0011883a 	mov	r8,zero
 402cb60:	0005883a 	mov	r2,zero
 402cb64:	003eda06 	br	402c6d0 <__alt_data_end+0xfffec6d0>
 402cb68:	0101ffc4 	movi	r4,2047
 402cb6c:	49003b26 	beq	r9,r4,402cc5c <__subdf3+0x7b4>
 402cb70:	0085c83a 	sub	r2,zero,r2
 402cb74:	18c02034 	orhi	r3,r3,128
 402cb78:	01000e04 	movi	r4,56
 402cb7c:	20806e16 	blt	r4,r2,402cd38 <__subdf3+0x890>
 402cb80:	010007c4 	movi	r4,31
 402cb84:	20807716 	blt	r4,r2,402cd64 <__subdf3+0x8bc>
 402cb88:	01000804 	movi	r4,32
 402cb8c:	2089c83a 	sub	r4,r4,r2
 402cb90:	1914983a 	sll	r10,r3,r4
 402cb94:	8890d83a 	srl	r8,r17,r2
 402cb98:	8908983a 	sll	r4,r17,r4
 402cb9c:	1884d83a 	srl	r2,r3,r2
 402cba0:	5222b03a 	or	r17,r10,r8
 402cba4:	2006c03a 	cmpne	r3,r4,zero
 402cba8:	88e2b03a 	or	r17,r17,r3
 402cbac:	89a3883a 	add	r17,r17,r6
 402cbb0:	1145883a 	add	r2,r2,r5
 402cbb4:	898d803a 	cmpltu	r6,r17,r6
 402cbb8:	3087883a 	add	r3,r6,r2
 402cbbc:	4821883a 	mov	r16,r9
 402cbc0:	003ed906 	br	402c728 <__alt_data_end+0xfffec728>
 402cbc4:	2984b03a 	or	r2,r5,r6
 402cbc8:	10004226 	beq	r2,zero,402ccd4 <__subdf3+0x82c>
 402cbcc:	1808d0fa 	srli	r4,r3,3
 402cbd0:	8822d0fa 	srli	r17,r17,3
 402cbd4:	1806977a 	slli	r3,r3,29
 402cbd8:	2080022c 	andhi	r2,r4,8
 402cbdc:	1c62b03a 	or	r17,r3,r17
 402cbe0:	10000826 	beq	r2,zero,402cc04 <__subdf3+0x75c>
 402cbe4:	2812d0fa 	srli	r9,r5,3
 402cbe8:	4880022c 	andhi	r2,r9,8
 402cbec:	1000051e 	bne	r2,zero,402cc04 <__subdf3+0x75c>
 402cbf0:	300cd0fa 	srli	r6,r6,3
 402cbf4:	2804977a 	slli	r2,r5,29
 402cbf8:	4809883a 	mov	r4,r9
 402cbfc:	3825883a 	mov	r18,r7
 402cc00:	11a2b03a 	or	r17,r2,r6
 402cc04:	8806d77a 	srli	r3,r17,29
 402cc08:	200890fa 	slli	r4,r4,3
 402cc0c:	882290fa 	slli	r17,r17,3
 402cc10:	0401ffc4 	movi	r16,2047
 402cc14:	1906b03a 	or	r3,r3,r4
 402cc18:	003e4406 	br	402c52c <__alt_data_end+0xfffec52c>
 402cc1c:	2984b03a 	or	r2,r5,r6
 402cc20:	103e4226 	beq	r2,zero,402c52c <__alt_data_end+0xfffec52c>
 402cc24:	8989c83a 	sub	r4,r17,r6
 402cc28:	8911803a 	cmpltu	r8,r17,r4
 402cc2c:	1945c83a 	sub	r2,r3,r5
 402cc30:	1205c83a 	sub	r2,r2,r8
 402cc34:	1200202c 	andhi	r8,r2,128
 402cc38:	403e9a26 	beq	r8,zero,402c6a4 <__alt_data_end+0xfffec6a4>
 402cc3c:	3463c83a 	sub	r17,r6,r17
 402cc40:	28c5c83a 	sub	r2,r5,r3
 402cc44:	344d803a 	cmpltu	r6,r6,r17
 402cc48:	1187c83a 	sub	r3,r2,r6
 402cc4c:	3825883a 	mov	r18,r7
 402cc50:	003e3606 	br	402c52c <__alt_data_end+0xfffec52c>
 402cc54:	0101ffc4 	movi	r4,2047
 402cc58:	493fc71e 	bne	r9,r4,402cb78 <__alt_data_end+0xfffecb78>
 402cc5c:	2807883a 	mov	r3,r5
 402cc60:	3023883a 	mov	r17,r6
 402cc64:	4821883a 	mov	r16,r9
 402cc68:	003e3006 	br	402c52c <__alt_data_end+0xfffec52c>
 402cc6c:	10003626 	beq	r2,zero,402cd48 <__subdf3+0x8a0>
 402cc70:	2984b03a 	or	r2,r5,r6
 402cc74:	10001726 	beq	r2,zero,402ccd4 <__subdf3+0x82c>
 402cc78:	1808d0fa 	srli	r4,r3,3
 402cc7c:	8822d0fa 	srli	r17,r17,3
 402cc80:	1806977a 	slli	r3,r3,29
 402cc84:	2080022c 	andhi	r2,r4,8
 402cc88:	1c62b03a 	or	r17,r3,r17
 402cc8c:	10000726 	beq	r2,zero,402ccac <__subdf3+0x804>
 402cc90:	2812d0fa 	srli	r9,r5,3
 402cc94:	4880022c 	andhi	r2,r9,8
 402cc98:	1000041e 	bne	r2,zero,402ccac <__subdf3+0x804>
 402cc9c:	300cd0fa 	srli	r6,r6,3
 402cca0:	2804977a 	slli	r2,r5,29
 402cca4:	4809883a 	mov	r4,r9
 402cca8:	11a2b03a 	or	r17,r2,r6
 402ccac:	8806d77a 	srli	r3,r17,29
 402ccb0:	200890fa 	slli	r4,r4,3
 402ccb4:	882290fa 	slli	r17,r17,3
 402ccb8:	3825883a 	mov	r18,r7
 402ccbc:	1906b03a 	or	r3,r3,r4
 402ccc0:	0401ffc4 	movi	r16,2047
 402ccc4:	003e1906 	br	402c52c <__alt_data_end+0xfffec52c>
 402ccc8:	000b883a 	mov	r5,zero
 402cccc:	0005883a 	mov	r2,zero
 402ccd0:	003e2e06 	br	402c58c <__alt_data_end+0xfffec58c>
 402ccd4:	0401ffc4 	movi	r16,2047
 402ccd8:	003e1406 	br	402c52c <__alt_data_end+0xfffec52c>
 402ccdc:	0005883a 	mov	r2,zero
 402cce0:	003f7506 	br	402cab8 <__alt_data_end+0xfffecab8>
 402cce4:	0005883a 	mov	r2,zero
 402cce8:	0009883a 	mov	r4,zero
 402ccec:	003e7806 	br	402c6d0 <__alt_data_end+0xfffec6d0>
 402ccf0:	123ff804 	addi	r8,r2,-32
 402ccf4:	01000804 	movi	r4,32
 402ccf8:	1a10d83a 	srl	r8,r3,r8
 402ccfc:	11002526 	beq	r2,r4,402cd94 <__subdf3+0x8ec>
 402cd00:	01001004 	movi	r4,64
 402cd04:	2085c83a 	sub	r2,r4,r2
 402cd08:	1884983a 	sll	r2,r3,r2
 402cd0c:	1444b03a 	or	r2,r2,r17
 402cd10:	1004c03a 	cmpne	r2,r2,zero
 402cd14:	40a2b03a 	or	r17,r8,r2
 402cd18:	0005883a 	mov	r2,zero
 402cd1c:	003f1606 	br	402c978 <__alt_data_end+0xfffec978>
 402cd20:	02000434 	movhi	r8,16
 402cd24:	0009883a 	mov	r4,zero
 402cd28:	423fffc4 	addi	r8,r8,-1
 402cd2c:	00bfffc4 	movi	r2,-1
 402cd30:	0401ffc4 	movi	r16,2047
 402cd34:	003e6606 	br	402c6d0 <__alt_data_end+0xfffec6d0>
 402cd38:	1c62b03a 	or	r17,r3,r17
 402cd3c:	8822c03a 	cmpne	r17,r17,zero
 402cd40:	0005883a 	mov	r2,zero
 402cd44:	003f9906 	br	402cbac <__alt_data_end+0xfffecbac>
 402cd48:	2807883a 	mov	r3,r5
 402cd4c:	3023883a 	mov	r17,r6
 402cd50:	0401ffc4 	movi	r16,2047
 402cd54:	003df506 	br	402c52c <__alt_data_end+0xfffec52c>
 402cd58:	2807883a 	mov	r3,r5
 402cd5c:	3023883a 	mov	r17,r6
 402cd60:	003df206 	br	402c52c <__alt_data_end+0xfffec52c>
 402cd64:	123ff804 	addi	r8,r2,-32
 402cd68:	01000804 	movi	r4,32
 402cd6c:	1a10d83a 	srl	r8,r3,r8
 402cd70:	11000a26 	beq	r2,r4,402cd9c <__subdf3+0x8f4>
 402cd74:	01001004 	movi	r4,64
 402cd78:	2085c83a 	sub	r2,r4,r2
 402cd7c:	1884983a 	sll	r2,r3,r2
 402cd80:	1444b03a 	or	r2,r2,r17
 402cd84:	1004c03a 	cmpne	r2,r2,zero
 402cd88:	40a2b03a 	or	r17,r8,r2
 402cd8c:	0005883a 	mov	r2,zero
 402cd90:	003f8606 	br	402cbac <__alt_data_end+0xfffecbac>
 402cd94:	0005883a 	mov	r2,zero
 402cd98:	003fdc06 	br	402cd0c <__alt_data_end+0xfffecd0c>
 402cd9c:	0005883a 	mov	r2,zero
 402cda0:	003ff706 	br	402cd80 <__alt_data_end+0xfffecd80>

0402cda4 <__fixdfsi>:
 402cda4:	280cd53a 	srli	r6,r5,20
 402cda8:	00c00434 	movhi	r3,16
 402cdac:	18ffffc4 	addi	r3,r3,-1
 402cdb0:	3181ffcc 	andi	r6,r6,2047
 402cdb4:	01c0ff84 	movi	r7,1022
 402cdb8:	28c6703a 	and	r3,r5,r3
 402cdbc:	280ad7fa 	srli	r5,r5,31
 402cdc0:	3980120e 	bge	r7,r6,402ce0c <__fixdfsi+0x68>
 402cdc4:	00810744 	movi	r2,1053
 402cdc8:	11800c16 	blt	r2,r6,402cdfc <__fixdfsi+0x58>
 402cdcc:	00810cc4 	movi	r2,1075
 402cdd0:	1185c83a 	sub	r2,r2,r6
 402cdd4:	01c007c4 	movi	r7,31
 402cdd8:	18c00434 	orhi	r3,r3,16
 402cddc:	38800d16 	blt	r7,r2,402ce14 <__fixdfsi+0x70>
 402cde0:	31befb44 	addi	r6,r6,-1043
 402cde4:	2084d83a 	srl	r2,r4,r2
 402cde8:	1986983a 	sll	r3,r3,r6
 402cdec:	1884b03a 	or	r2,r3,r2
 402cdf0:	28000726 	beq	r5,zero,402ce10 <__fixdfsi+0x6c>
 402cdf4:	0085c83a 	sub	r2,zero,r2
 402cdf8:	f800283a 	ret
 402cdfc:	00a00034 	movhi	r2,32768
 402ce00:	10bfffc4 	addi	r2,r2,-1
 402ce04:	2885883a 	add	r2,r5,r2
 402ce08:	f800283a 	ret
 402ce0c:	0005883a 	mov	r2,zero
 402ce10:	f800283a 	ret
 402ce14:	008104c4 	movi	r2,1043
 402ce18:	1185c83a 	sub	r2,r2,r6
 402ce1c:	1884d83a 	srl	r2,r3,r2
 402ce20:	003ff306 	br	402cdf0 <__alt_data_end+0xfffecdf0>

0402ce24 <__floatsidf>:
 402ce24:	defffd04 	addi	sp,sp,-12
 402ce28:	dfc00215 	stw	ra,8(sp)
 402ce2c:	dc400115 	stw	r17,4(sp)
 402ce30:	dc000015 	stw	r16,0(sp)
 402ce34:	20002b26 	beq	r4,zero,402cee4 <__floatsidf+0xc0>
 402ce38:	2023883a 	mov	r17,r4
 402ce3c:	2020d7fa 	srli	r16,r4,31
 402ce40:	20002d16 	blt	r4,zero,402cef8 <__floatsidf+0xd4>
 402ce44:	8809883a 	mov	r4,r17
 402ce48:	402cfa80 	call	402cfa8 <__clzsi2>
 402ce4c:	01410784 	movi	r5,1054
 402ce50:	288bc83a 	sub	r5,r5,r2
 402ce54:	01010cc4 	movi	r4,1075
 402ce58:	2149c83a 	sub	r4,r4,r5
 402ce5c:	00c007c4 	movi	r3,31
 402ce60:	1900160e 	bge	r3,r4,402cebc <__floatsidf+0x98>
 402ce64:	00c104c4 	movi	r3,1043
 402ce68:	1947c83a 	sub	r3,r3,r5
 402ce6c:	88c6983a 	sll	r3,r17,r3
 402ce70:	00800434 	movhi	r2,16
 402ce74:	10bfffc4 	addi	r2,r2,-1
 402ce78:	1886703a 	and	r3,r3,r2
 402ce7c:	2941ffcc 	andi	r5,r5,2047
 402ce80:	800d883a 	mov	r6,r16
 402ce84:	0005883a 	mov	r2,zero
 402ce88:	280a953a 	slli	r5,r5,20
 402ce8c:	31803fcc 	andi	r6,r6,255
 402ce90:	01000434 	movhi	r4,16
 402ce94:	300c97fa 	slli	r6,r6,31
 402ce98:	213fffc4 	addi	r4,r4,-1
 402ce9c:	1906703a 	and	r3,r3,r4
 402cea0:	1946b03a 	or	r3,r3,r5
 402cea4:	1986b03a 	or	r3,r3,r6
 402cea8:	dfc00217 	ldw	ra,8(sp)
 402ceac:	dc400117 	ldw	r17,4(sp)
 402ceb0:	dc000017 	ldw	r16,0(sp)
 402ceb4:	dec00304 	addi	sp,sp,12
 402ceb8:	f800283a 	ret
 402cebc:	00c002c4 	movi	r3,11
 402cec0:	1887c83a 	sub	r3,r3,r2
 402cec4:	88c6d83a 	srl	r3,r17,r3
 402cec8:	8904983a 	sll	r2,r17,r4
 402cecc:	01000434 	movhi	r4,16
 402ced0:	213fffc4 	addi	r4,r4,-1
 402ced4:	2941ffcc 	andi	r5,r5,2047
 402ced8:	1906703a 	and	r3,r3,r4
 402cedc:	800d883a 	mov	r6,r16
 402cee0:	003fe906 	br	402ce88 <__alt_data_end+0xfffece88>
 402cee4:	000d883a 	mov	r6,zero
 402cee8:	000b883a 	mov	r5,zero
 402ceec:	0007883a 	mov	r3,zero
 402cef0:	0005883a 	mov	r2,zero
 402cef4:	003fe406 	br	402ce88 <__alt_data_end+0xfffece88>
 402cef8:	0123c83a 	sub	r17,zero,r4
 402cefc:	003fd106 	br	402ce44 <__alt_data_end+0xfffece44>

0402cf00 <__floatunsidf>:
 402cf00:	defffe04 	addi	sp,sp,-8
 402cf04:	dc000015 	stw	r16,0(sp)
 402cf08:	dfc00115 	stw	ra,4(sp)
 402cf0c:	2021883a 	mov	r16,r4
 402cf10:	20002226 	beq	r4,zero,402cf9c <__floatunsidf+0x9c>
 402cf14:	402cfa80 	call	402cfa8 <__clzsi2>
 402cf18:	01010784 	movi	r4,1054
 402cf1c:	2089c83a 	sub	r4,r4,r2
 402cf20:	01810cc4 	movi	r6,1075
 402cf24:	310dc83a 	sub	r6,r6,r4
 402cf28:	00c007c4 	movi	r3,31
 402cf2c:	1980120e 	bge	r3,r6,402cf78 <__floatunsidf+0x78>
 402cf30:	00c104c4 	movi	r3,1043
 402cf34:	1907c83a 	sub	r3,r3,r4
 402cf38:	80ca983a 	sll	r5,r16,r3
 402cf3c:	00800434 	movhi	r2,16
 402cf40:	10bfffc4 	addi	r2,r2,-1
 402cf44:	2101ffcc 	andi	r4,r4,2047
 402cf48:	0021883a 	mov	r16,zero
 402cf4c:	288a703a 	and	r5,r5,r2
 402cf50:	2008953a 	slli	r4,r4,20
 402cf54:	00c00434 	movhi	r3,16
 402cf58:	18ffffc4 	addi	r3,r3,-1
 402cf5c:	28c6703a 	and	r3,r5,r3
 402cf60:	8005883a 	mov	r2,r16
 402cf64:	1906b03a 	or	r3,r3,r4
 402cf68:	dfc00117 	ldw	ra,4(sp)
 402cf6c:	dc000017 	ldw	r16,0(sp)
 402cf70:	dec00204 	addi	sp,sp,8
 402cf74:	f800283a 	ret
 402cf78:	00c002c4 	movi	r3,11
 402cf7c:	188bc83a 	sub	r5,r3,r2
 402cf80:	814ad83a 	srl	r5,r16,r5
 402cf84:	00c00434 	movhi	r3,16
 402cf88:	18ffffc4 	addi	r3,r3,-1
 402cf8c:	81a0983a 	sll	r16,r16,r6
 402cf90:	2101ffcc 	andi	r4,r4,2047
 402cf94:	28ca703a 	and	r5,r5,r3
 402cf98:	003fed06 	br	402cf50 <__alt_data_end+0xfffecf50>
 402cf9c:	0009883a 	mov	r4,zero
 402cfa0:	000b883a 	mov	r5,zero
 402cfa4:	003fea06 	br	402cf50 <__alt_data_end+0xfffecf50>

0402cfa8 <__clzsi2>:
 402cfa8:	00bfffd4 	movui	r2,65535
 402cfac:	11000536 	bltu	r2,r4,402cfc4 <__clzsi2+0x1c>
 402cfb0:	00803fc4 	movi	r2,255
 402cfb4:	11000f36 	bltu	r2,r4,402cff4 <__clzsi2+0x4c>
 402cfb8:	00800804 	movi	r2,32
 402cfbc:	0007883a 	mov	r3,zero
 402cfc0:	00000506 	br	402cfd8 <__clzsi2+0x30>
 402cfc4:	00804034 	movhi	r2,256
 402cfc8:	10bfffc4 	addi	r2,r2,-1
 402cfcc:	11000c2e 	bgeu	r2,r4,402d000 <__clzsi2+0x58>
 402cfd0:	00800204 	movi	r2,8
 402cfd4:	00c00604 	movi	r3,24
 402cfd8:	20c8d83a 	srl	r4,r4,r3
 402cfdc:	00c100f4 	movhi	r3,1027
 402cfe0:	18c12004 	addi	r3,r3,1152
 402cfe4:	1909883a 	add	r4,r3,r4
 402cfe8:	20c00003 	ldbu	r3,0(r4)
 402cfec:	10c5c83a 	sub	r2,r2,r3
 402cff0:	f800283a 	ret
 402cff4:	00800604 	movi	r2,24
 402cff8:	00c00204 	movi	r3,8
 402cffc:	003ff606 	br	402cfd8 <__alt_data_end+0xfffecfd8>
 402d000:	00800404 	movi	r2,16
 402d004:	1007883a 	mov	r3,r2
 402d008:	003ff306 	br	402cfd8 <__alt_data_end+0xfffecfd8>

0402d00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d00c:	defffe04 	addi	sp,sp,-8
 402d010:	dfc00115 	stw	ra,4(sp)
 402d014:	df000015 	stw	fp,0(sp)
 402d018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d01c:	d0a00b17 	ldw	r2,-32724(gp)
 402d020:	10000326 	beq	r2,zero,402d030 <alt_get_errno+0x24>
 402d024:	d0a00b17 	ldw	r2,-32724(gp)
 402d028:	103ee83a 	callr	r2
 402d02c:	00000106 	br	402d034 <alt_get_errno+0x28>
 402d030:	d0a71204 	addi	r2,gp,-25528
}
 402d034:	e037883a 	mov	sp,fp
 402d038:	dfc00117 	ldw	ra,4(sp)
 402d03c:	df000017 	ldw	fp,0(sp)
 402d040:	dec00204 	addi	sp,sp,8
 402d044:	f800283a 	ret

0402d048 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402d048:	defffb04 	addi	sp,sp,-20
 402d04c:	dfc00415 	stw	ra,16(sp)
 402d050:	df000315 	stw	fp,12(sp)
 402d054:	df000304 	addi	fp,sp,12
 402d058:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402d05c:	e0bfff17 	ldw	r2,-4(fp)
 402d060:	10000616 	blt	r2,zero,402d07c <close+0x34>
 402d064:	e0bfff17 	ldw	r2,-4(fp)
 402d068:	10c00324 	muli	r3,r2,12
 402d06c:	008100f4 	movhi	r2,1027
 402d070:	1083b804 	addi	r2,r2,3808
 402d074:	1885883a 	add	r2,r3,r2
 402d078:	00000106 	br	402d080 <close+0x38>
 402d07c:	0005883a 	mov	r2,zero
 402d080:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402d084:	e0bffd17 	ldw	r2,-12(fp)
 402d088:	10001926 	beq	r2,zero,402d0f0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402d08c:	e0bffd17 	ldw	r2,-12(fp)
 402d090:	10800017 	ldw	r2,0(r2)
 402d094:	10800417 	ldw	r2,16(r2)
 402d098:	10000626 	beq	r2,zero,402d0b4 <close+0x6c>
 402d09c:	e0bffd17 	ldw	r2,-12(fp)
 402d0a0:	10800017 	ldw	r2,0(r2)
 402d0a4:	10800417 	ldw	r2,16(r2)
 402d0a8:	e13ffd17 	ldw	r4,-12(fp)
 402d0ac:	103ee83a 	callr	r2
 402d0b0:	00000106 	br	402d0b8 <close+0x70>
 402d0b4:	0005883a 	mov	r2,zero
 402d0b8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402d0bc:	e13fff17 	ldw	r4,-4(fp)
 402d0c0:	402d9f00 	call	402d9f0 <alt_release_fd>
    if (rval < 0)
 402d0c4:	e0bffe17 	ldw	r2,-8(fp)
 402d0c8:	1000070e 	bge	r2,zero,402d0e8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 402d0cc:	402d00c0 	call	402d00c <alt_get_errno>
 402d0d0:	1007883a 	mov	r3,r2
 402d0d4:	e0bffe17 	ldw	r2,-8(fp)
 402d0d8:	0085c83a 	sub	r2,zero,r2
 402d0dc:	18800015 	stw	r2,0(r3)
      return -1;
 402d0e0:	00bfffc4 	movi	r2,-1
 402d0e4:	00000706 	br	402d104 <close+0xbc>
    }
    return 0;
 402d0e8:	0005883a 	mov	r2,zero
 402d0ec:	00000506 	br	402d104 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d0f0:	402d00c0 	call	402d00c <alt_get_errno>
 402d0f4:	1007883a 	mov	r3,r2
 402d0f8:	00801444 	movi	r2,81
 402d0fc:	18800015 	stw	r2,0(r3)
    return -1;
 402d100:	00bfffc4 	movi	r2,-1
  }
}
 402d104:	e037883a 	mov	sp,fp
 402d108:	dfc00117 	ldw	ra,4(sp)
 402d10c:	df000017 	ldw	fp,0(sp)
 402d110:	dec00204 	addi	sp,sp,8
 402d114:	f800283a 	ret

0402d118 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402d118:	defffe04 	addi	sp,sp,-8
 402d11c:	df000115 	stw	fp,4(sp)
 402d120:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d124:	e03fff15 	stw	zero,-4(fp)
 402d128:	00000506 	br	402d140 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 402d12c:	e0bfff17 	ldw	r2,-4(fp)
 402d130:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d134:	e0bfff17 	ldw	r2,-4(fp)
 402d138:	10800804 	addi	r2,r2,32
 402d13c:	e0bfff15 	stw	r2,-4(fp)
 402d140:	e0bfff17 	ldw	r2,-4(fp)
 402d144:	10820030 	cmpltui	r2,r2,2048
 402d148:	103ff81e 	bne	r2,zero,402d12c <__alt_data_end+0xfffed12c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402d14c:	0001883a 	nop
 402d150:	e037883a 	mov	sp,fp
 402d154:	df000017 	ldw	fp,0(sp)
 402d158:	dec00104 	addi	sp,sp,4
 402d15c:	f800283a 	ret

0402d160 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402d160:	defffc04 	addi	sp,sp,-16
 402d164:	df000315 	stw	fp,12(sp)
 402d168:	df000304 	addi	fp,sp,12
 402d16c:	e13ffd15 	stw	r4,-12(fp)
 402d170:	e17ffe15 	stw	r5,-8(fp)
 402d174:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402d178:	e0bfff17 	ldw	r2,-4(fp)
}
 402d17c:	e037883a 	mov	sp,fp
 402d180:	df000017 	ldw	fp,0(sp)
 402d184:	dec00104 	addi	sp,sp,4
 402d188:	f800283a 	ret

0402d18c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d18c:	defffe04 	addi	sp,sp,-8
 402d190:	dfc00115 	stw	ra,4(sp)
 402d194:	df000015 	stw	fp,0(sp)
 402d198:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d19c:	d0a00b17 	ldw	r2,-32724(gp)
 402d1a0:	10000326 	beq	r2,zero,402d1b0 <alt_get_errno+0x24>
 402d1a4:	d0a00b17 	ldw	r2,-32724(gp)
 402d1a8:	103ee83a 	callr	r2
 402d1ac:	00000106 	br	402d1b4 <alt_get_errno+0x28>
 402d1b0:	d0a71204 	addi	r2,gp,-25528
}
 402d1b4:	e037883a 	mov	sp,fp
 402d1b8:	dfc00117 	ldw	ra,4(sp)
 402d1bc:	df000017 	ldw	fp,0(sp)
 402d1c0:	dec00204 	addi	sp,sp,8
 402d1c4:	f800283a 	ret

0402d1c8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402d1c8:	defffb04 	addi	sp,sp,-20
 402d1cc:	dfc00415 	stw	ra,16(sp)
 402d1d0:	df000315 	stw	fp,12(sp)
 402d1d4:	df000304 	addi	fp,sp,12
 402d1d8:	e13ffe15 	stw	r4,-8(fp)
 402d1dc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d1e0:	e0bffe17 	ldw	r2,-8(fp)
 402d1e4:	10000616 	blt	r2,zero,402d200 <fstat+0x38>
 402d1e8:	e0bffe17 	ldw	r2,-8(fp)
 402d1ec:	10c00324 	muli	r3,r2,12
 402d1f0:	008100f4 	movhi	r2,1027
 402d1f4:	1083b804 	addi	r2,r2,3808
 402d1f8:	1885883a 	add	r2,r3,r2
 402d1fc:	00000106 	br	402d204 <fstat+0x3c>
 402d200:	0005883a 	mov	r2,zero
 402d204:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402d208:	e0bffd17 	ldw	r2,-12(fp)
 402d20c:	10001026 	beq	r2,zero,402d250 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402d210:	e0bffd17 	ldw	r2,-12(fp)
 402d214:	10800017 	ldw	r2,0(r2)
 402d218:	10800817 	ldw	r2,32(r2)
 402d21c:	10000726 	beq	r2,zero,402d23c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 402d220:	e0bffd17 	ldw	r2,-12(fp)
 402d224:	10800017 	ldw	r2,0(r2)
 402d228:	10800817 	ldw	r2,32(r2)
 402d22c:	e17fff17 	ldw	r5,-4(fp)
 402d230:	e13ffd17 	ldw	r4,-12(fp)
 402d234:	103ee83a 	callr	r2
 402d238:	00000a06 	br	402d264 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402d23c:	e0bfff17 	ldw	r2,-4(fp)
 402d240:	00c80004 	movi	r3,8192
 402d244:	10c00115 	stw	r3,4(r2)
      return 0;
 402d248:	0005883a 	mov	r2,zero
 402d24c:	00000506 	br	402d264 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d250:	402d18c0 	call	402d18c <alt_get_errno>
 402d254:	1007883a 	mov	r3,r2
 402d258:	00801444 	movi	r2,81
 402d25c:	18800015 	stw	r2,0(r3)
    return -1;
 402d260:	00bfffc4 	movi	r2,-1
  }
}
 402d264:	e037883a 	mov	sp,fp
 402d268:	dfc00117 	ldw	ra,4(sp)
 402d26c:	df000017 	ldw	fp,0(sp)
 402d270:	dec00204 	addi	sp,sp,8
 402d274:	f800283a 	ret

0402d278 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d278:	defff904 	addi	sp,sp,-28
 402d27c:	dfc00615 	stw	ra,24(sp)
 402d280:	df000515 	stw	fp,20(sp)
 402d284:	df000504 	addi	fp,sp,20
 402d288:	e13ffc15 	stw	r4,-16(fp)
 402d28c:	e17ffd15 	stw	r5,-12(fp)
 402d290:	e1bffe15 	stw	r6,-8(fp)
 402d294:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402d298:	e0800217 	ldw	r2,8(fp)
 402d29c:	d8800015 	stw	r2,0(sp)
 402d2a0:	e1ffff17 	ldw	r7,-4(fp)
 402d2a4:	e1bffe17 	ldw	r6,-8(fp)
 402d2a8:	e17ffd17 	ldw	r5,-12(fp)
 402d2ac:	e13ffc17 	ldw	r4,-16(fp)
 402d2b0:	402d4280 	call	402d428 <alt_iic_isr_register>
}  
 402d2b4:	e037883a 	mov	sp,fp
 402d2b8:	dfc00117 	ldw	ra,4(sp)
 402d2bc:	df000017 	ldw	fp,0(sp)
 402d2c0:	dec00204 	addi	sp,sp,8
 402d2c4:	f800283a 	ret

0402d2c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 402d2c8:	defff904 	addi	sp,sp,-28
 402d2cc:	df000615 	stw	fp,24(sp)
 402d2d0:	df000604 	addi	fp,sp,24
 402d2d4:	e13ffe15 	stw	r4,-8(fp)
 402d2d8:	e17fff15 	stw	r5,-4(fp)
 402d2dc:	e0bfff17 	ldw	r2,-4(fp)
 402d2e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d2e4:	0005303a 	rdctl	r2,status
 402d2e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d2ec:	e0fffb17 	ldw	r3,-20(fp)
 402d2f0:	00bfff84 	movi	r2,-2
 402d2f4:	1884703a 	and	r2,r3,r2
 402d2f8:	1001703a 	wrctl	status,r2
  
  return context;
 402d2fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d300:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402d304:	00c00044 	movi	r3,1
 402d308:	e0bffa17 	ldw	r2,-24(fp)
 402d30c:	1884983a 	sll	r2,r3,r2
 402d310:	1007883a 	mov	r3,r2
 402d314:	d0a71317 	ldw	r2,-25524(gp)
 402d318:	1884b03a 	or	r2,r3,r2
 402d31c:	d0a71315 	stw	r2,-25524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d320:	d0a71317 	ldw	r2,-25524(gp)
 402d324:	100170fa 	wrctl	ienable,r2
 402d328:	e0bffc17 	ldw	r2,-16(fp)
 402d32c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d330:	e0bffd17 	ldw	r2,-12(fp)
 402d334:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d338:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402d33c:	0001883a 	nop
}
 402d340:	e037883a 	mov	sp,fp
 402d344:	df000017 	ldw	fp,0(sp)
 402d348:	dec00104 	addi	sp,sp,4
 402d34c:	f800283a 	ret

0402d350 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 402d350:	defff904 	addi	sp,sp,-28
 402d354:	df000615 	stw	fp,24(sp)
 402d358:	df000604 	addi	fp,sp,24
 402d35c:	e13ffe15 	stw	r4,-8(fp)
 402d360:	e17fff15 	stw	r5,-4(fp)
 402d364:	e0bfff17 	ldw	r2,-4(fp)
 402d368:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d36c:	0005303a 	rdctl	r2,status
 402d370:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d374:	e0fffb17 	ldw	r3,-20(fp)
 402d378:	00bfff84 	movi	r2,-2
 402d37c:	1884703a 	and	r2,r3,r2
 402d380:	1001703a 	wrctl	status,r2
  
  return context;
 402d384:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d388:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 402d38c:	00c00044 	movi	r3,1
 402d390:	e0bffa17 	ldw	r2,-24(fp)
 402d394:	1884983a 	sll	r2,r3,r2
 402d398:	0084303a 	nor	r2,zero,r2
 402d39c:	1007883a 	mov	r3,r2
 402d3a0:	d0a71317 	ldw	r2,-25524(gp)
 402d3a4:	1884703a 	and	r2,r3,r2
 402d3a8:	d0a71315 	stw	r2,-25524(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d3ac:	d0a71317 	ldw	r2,-25524(gp)
 402d3b0:	100170fa 	wrctl	ienable,r2
 402d3b4:	e0bffc17 	ldw	r2,-16(fp)
 402d3b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d3bc:	e0bffd17 	ldw	r2,-12(fp)
 402d3c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d3c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 402d3c8:	0001883a 	nop
}
 402d3cc:	e037883a 	mov	sp,fp
 402d3d0:	df000017 	ldw	fp,0(sp)
 402d3d4:	dec00104 	addi	sp,sp,4
 402d3d8:	f800283a 	ret

0402d3dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402d3dc:	defffc04 	addi	sp,sp,-16
 402d3e0:	df000315 	stw	fp,12(sp)
 402d3e4:	df000304 	addi	fp,sp,12
 402d3e8:	e13ffe15 	stw	r4,-8(fp)
 402d3ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402d3f0:	000530fa 	rdctl	r2,ienable
 402d3f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 402d3f8:	00c00044 	movi	r3,1
 402d3fc:	e0bfff17 	ldw	r2,-4(fp)
 402d400:	1884983a 	sll	r2,r3,r2
 402d404:	1007883a 	mov	r3,r2
 402d408:	e0bffd17 	ldw	r2,-12(fp)
 402d40c:	1884703a 	and	r2,r3,r2
 402d410:	1004c03a 	cmpne	r2,r2,zero
 402d414:	10803fcc 	andi	r2,r2,255
}
 402d418:	e037883a 	mov	sp,fp
 402d41c:	df000017 	ldw	fp,0(sp)
 402d420:	dec00104 	addi	sp,sp,4
 402d424:	f800283a 	ret

0402d428 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d428:	defff504 	addi	sp,sp,-44
 402d42c:	dfc00a15 	stw	ra,40(sp)
 402d430:	df000915 	stw	fp,36(sp)
 402d434:	df000904 	addi	fp,sp,36
 402d438:	e13ffc15 	stw	r4,-16(fp)
 402d43c:	e17ffd15 	stw	r5,-12(fp)
 402d440:	e1bffe15 	stw	r6,-8(fp)
 402d444:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402d448:	00bffa84 	movi	r2,-22
 402d44c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 402d450:	e0bffd17 	ldw	r2,-12(fp)
 402d454:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402d458:	e0bff817 	ldw	r2,-32(fp)
 402d45c:	10800808 	cmpgei	r2,r2,32
 402d460:	1000271e 	bne	r2,zero,402d500 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d464:	0005303a 	rdctl	r2,status
 402d468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d46c:	e0fffb17 	ldw	r3,-20(fp)
 402d470:	00bfff84 	movi	r2,-2
 402d474:	1884703a 	and	r2,r3,r2
 402d478:	1001703a 	wrctl	status,r2
  
  return context;
 402d47c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 402d480:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402d484:	008100f4 	movhi	r2,1027
 402d488:	108f8e04 	addi	r2,r2,15928
 402d48c:	e0fff817 	ldw	r3,-32(fp)
 402d490:	180690fa 	slli	r3,r3,3
 402d494:	10c5883a 	add	r2,r2,r3
 402d498:	e0fffe17 	ldw	r3,-8(fp)
 402d49c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 402d4a0:	008100f4 	movhi	r2,1027
 402d4a4:	108f8e04 	addi	r2,r2,15928
 402d4a8:	e0fff817 	ldw	r3,-32(fp)
 402d4ac:	180690fa 	slli	r3,r3,3
 402d4b0:	10c5883a 	add	r2,r2,r3
 402d4b4:	10800104 	addi	r2,r2,4
 402d4b8:	e0ffff17 	ldw	r3,-4(fp)
 402d4bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 402d4c0:	e0bffe17 	ldw	r2,-8(fp)
 402d4c4:	10000526 	beq	r2,zero,402d4dc <alt_iic_isr_register+0xb4>
 402d4c8:	e0bff817 	ldw	r2,-32(fp)
 402d4cc:	100b883a 	mov	r5,r2
 402d4d0:	e13ffc17 	ldw	r4,-16(fp)
 402d4d4:	402d2c80 	call	402d2c8 <alt_ic_irq_enable>
 402d4d8:	00000406 	br	402d4ec <alt_iic_isr_register+0xc4>
 402d4dc:	e0bff817 	ldw	r2,-32(fp)
 402d4e0:	100b883a 	mov	r5,r2
 402d4e4:	e13ffc17 	ldw	r4,-16(fp)
 402d4e8:	402d3500 	call	402d350 <alt_ic_irq_disable>
 402d4ec:	e0bff715 	stw	r2,-36(fp)
 402d4f0:	e0bffa17 	ldw	r2,-24(fp)
 402d4f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d4f8:	e0bff917 	ldw	r2,-28(fp)
 402d4fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 402d500:	e0bff717 	ldw	r2,-36(fp)
}
 402d504:	e037883a 	mov	sp,fp
 402d508:	dfc00117 	ldw	ra,4(sp)
 402d50c:	df000017 	ldw	fp,0(sp)
 402d510:	dec00204 	addi	sp,sp,8
 402d514:	f800283a 	ret

0402d518 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d518:	defffe04 	addi	sp,sp,-8
 402d51c:	dfc00115 	stw	ra,4(sp)
 402d520:	df000015 	stw	fp,0(sp)
 402d524:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d528:	d0a00b17 	ldw	r2,-32724(gp)
 402d52c:	10000326 	beq	r2,zero,402d53c <alt_get_errno+0x24>
 402d530:	d0a00b17 	ldw	r2,-32724(gp)
 402d534:	103ee83a 	callr	r2
 402d538:	00000106 	br	402d540 <alt_get_errno+0x28>
 402d53c:	d0a71204 	addi	r2,gp,-25528
}
 402d540:	e037883a 	mov	sp,fp
 402d544:	dfc00117 	ldw	ra,4(sp)
 402d548:	df000017 	ldw	fp,0(sp)
 402d54c:	dec00204 	addi	sp,sp,8
 402d550:	f800283a 	ret

0402d554 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402d554:	deffed04 	addi	sp,sp,-76
 402d558:	dfc01215 	stw	ra,72(sp)
 402d55c:	df001115 	stw	fp,68(sp)
 402d560:	df001104 	addi	fp,sp,68
 402d564:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d568:	e0bfff17 	ldw	r2,-4(fp)
 402d56c:	10000616 	blt	r2,zero,402d588 <isatty+0x34>
 402d570:	e0bfff17 	ldw	r2,-4(fp)
 402d574:	10c00324 	muli	r3,r2,12
 402d578:	008100f4 	movhi	r2,1027
 402d57c:	1083b804 	addi	r2,r2,3808
 402d580:	1885883a 	add	r2,r3,r2
 402d584:	00000106 	br	402d58c <isatty+0x38>
 402d588:	0005883a 	mov	r2,zero
 402d58c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402d590:	e0bfef17 	ldw	r2,-68(fp)
 402d594:	10000e26 	beq	r2,zero,402d5d0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402d598:	e0bfef17 	ldw	r2,-68(fp)
 402d59c:	10800017 	ldw	r2,0(r2)
 402d5a0:	10800817 	ldw	r2,32(r2)
 402d5a4:	1000021e 	bne	r2,zero,402d5b0 <isatty+0x5c>
    {
      return 1;
 402d5a8:	00800044 	movi	r2,1
 402d5ac:	00000d06 	br	402d5e4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402d5b0:	e0bff004 	addi	r2,fp,-64
 402d5b4:	100b883a 	mov	r5,r2
 402d5b8:	e13fff17 	ldw	r4,-4(fp)
 402d5bc:	402d1c80 	call	402d1c8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402d5c0:	e0bff117 	ldw	r2,-60(fp)
 402d5c4:	10880020 	cmpeqi	r2,r2,8192
 402d5c8:	10803fcc 	andi	r2,r2,255
 402d5cc:	00000506 	br	402d5e4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d5d0:	402d5180 	call	402d518 <alt_get_errno>
 402d5d4:	1007883a 	mov	r3,r2
 402d5d8:	00801444 	movi	r2,81
 402d5dc:	18800015 	stw	r2,0(r3)
    return 0;
 402d5e0:	0005883a 	mov	r2,zero
  }
}
 402d5e4:	e037883a 	mov	sp,fp
 402d5e8:	dfc00117 	ldw	ra,4(sp)
 402d5ec:	df000017 	ldw	fp,0(sp)
 402d5f0:	dec00204 	addi	sp,sp,8
 402d5f4:	f800283a 	ret

0402d5f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402d5f8:	defffc04 	addi	sp,sp,-16
 402d5fc:	df000315 	stw	fp,12(sp)
 402d600:	df000304 	addi	fp,sp,12
 402d604:	e13ffd15 	stw	r4,-12(fp)
 402d608:	e17ffe15 	stw	r5,-8(fp)
 402d60c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402d610:	e0fffe17 	ldw	r3,-8(fp)
 402d614:	e0bffd17 	ldw	r2,-12(fp)
 402d618:	18800c26 	beq	r3,r2,402d64c <alt_load_section+0x54>
  {
    while( to != end )
 402d61c:	00000806 	br	402d640 <alt_load_section+0x48>
    {
      *to++ = *from++;
 402d620:	e0bffe17 	ldw	r2,-8(fp)
 402d624:	10c00104 	addi	r3,r2,4
 402d628:	e0fffe15 	stw	r3,-8(fp)
 402d62c:	e0fffd17 	ldw	r3,-12(fp)
 402d630:	19000104 	addi	r4,r3,4
 402d634:	e13ffd15 	stw	r4,-12(fp)
 402d638:	18c00017 	ldw	r3,0(r3)
 402d63c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402d640:	e0fffe17 	ldw	r3,-8(fp)
 402d644:	e0bfff17 	ldw	r2,-4(fp)
 402d648:	18bff51e 	bne	r3,r2,402d620 <__alt_data_end+0xfffed620>
    {
      *to++ = *from++;
    }
  }
}
 402d64c:	0001883a 	nop
 402d650:	e037883a 	mov	sp,fp
 402d654:	df000017 	ldw	fp,0(sp)
 402d658:	dec00104 	addi	sp,sp,4
 402d65c:	f800283a 	ret

0402d660 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402d660:	defffe04 	addi	sp,sp,-8
 402d664:	dfc00115 	stw	ra,4(sp)
 402d668:	df000015 	stw	fp,0(sp)
 402d66c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402d670:	018100f4 	movhi	r6,1027
 402d674:	31887c04 	addi	r6,r6,8688
 402d678:	014100f4 	movhi	r5,1027
 402d67c:	29418504 	addi	r5,r5,1556
 402d680:	010100f4 	movhi	r4,1027
 402d684:	21087c04 	addi	r4,r4,8688
 402d688:	402d5f80 	call	402d5f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402d68c:	018100b4 	movhi	r6,1026
 402d690:	31809104 	addi	r6,r6,580
 402d694:	014100b4 	movhi	r5,1026
 402d698:	29400804 	addi	r5,r5,32
 402d69c:	010100b4 	movhi	r4,1026
 402d6a0:	21000804 	addi	r4,r4,32
 402d6a4:	402d5f80 	call	402d5f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402d6a8:	018100f4 	movhi	r6,1027
 402d6ac:	31818504 	addi	r6,r6,1556
 402d6b0:	014100f4 	movhi	r5,1027
 402d6b4:	29407904 	addi	r5,r5,484
 402d6b8:	010100f4 	movhi	r4,1027
 402d6bc:	21007904 	addi	r4,r4,484
 402d6c0:	402d5f80 	call	402d5f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402d6c4:	402d1180 	call	402d118 <alt_dcache_flush_all>
  alt_icache_flush_all();
 402d6c8:	402f5e80 	call	402f5e8 <alt_icache_flush_all>
}
 402d6cc:	0001883a 	nop
 402d6d0:	e037883a 	mov	sp,fp
 402d6d4:	dfc00117 	ldw	ra,4(sp)
 402d6d8:	df000017 	ldw	fp,0(sp)
 402d6dc:	dec00204 	addi	sp,sp,8
 402d6e0:	f800283a 	ret

0402d6e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d6e4:	defffe04 	addi	sp,sp,-8
 402d6e8:	dfc00115 	stw	ra,4(sp)
 402d6ec:	df000015 	stw	fp,0(sp)
 402d6f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d6f4:	d0a00b17 	ldw	r2,-32724(gp)
 402d6f8:	10000326 	beq	r2,zero,402d708 <alt_get_errno+0x24>
 402d6fc:	d0a00b17 	ldw	r2,-32724(gp)
 402d700:	103ee83a 	callr	r2
 402d704:	00000106 	br	402d70c <alt_get_errno+0x28>
 402d708:	d0a71204 	addi	r2,gp,-25528
}
 402d70c:	e037883a 	mov	sp,fp
 402d710:	dfc00117 	ldw	ra,4(sp)
 402d714:	df000017 	ldw	fp,0(sp)
 402d718:	dec00204 	addi	sp,sp,8
 402d71c:	f800283a 	ret

0402d720 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402d720:	defff904 	addi	sp,sp,-28
 402d724:	dfc00615 	stw	ra,24(sp)
 402d728:	df000515 	stw	fp,20(sp)
 402d72c:	df000504 	addi	fp,sp,20
 402d730:	e13ffd15 	stw	r4,-12(fp)
 402d734:	e17ffe15 	stw	r5,-8(fp)
 402d738:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402d73c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d740:	e0bffd17 	ldw	r2,-12(fp)
 402d744:	10000616 	blt	r2,zero,402d760 <lseek+0x40>
 402d748:	e0bffd17 	ldw	r2,-12(fp)
 402d74c:	10c00324 	muli	r3,r2,12
 402d750:	008100f4 	movhi	r2,1027
 402d754:	1083b804 	addi	r2,r2,3808
 402d758:	1885883a 	add	r2,r3,r2
 402d75c:	00000106 	br	402d764 <lseek+0x44>
 402d760:	0005883a 	mov	r2,zero
 402d764:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402d768:	e0bffc17 	ldw	r2,-16(fp)
 402d76c:	10001026 	beq	r2,zero,402d7b0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402d770:	e0bffc17 	ldw	r2,-16(fp)
 402d774:	10800017 	ldw	r2,0(r2)
 402d778:	10800717 	ldw	r2,28(r2)
 402d77c:	10000926 	beq	r2,zero,402d7a4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402d780:	e0bffc17 	ldw	r2,-16(fp)
 402d784:	10800017 	ldw	r2,0(r2)
 402d788:	10800717 	ldw	r2,28(r2)
 402d78c:	e1bfff17 	ldw	r6,-4(fp)
 402d790:	e17ffe17 	ldw	r5,-8(fp)
 402d794:	e13ffc17 	ldw	r4,-16(fp)
 402d798:	103ee83a 	callr	r2
 402d79c:	e0bffb15 	stw	r2,-20(fp)
 402d7a0:	00000506 	br	402d7b8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402d7a4:	00bfde84 	movi	r2,-134
 402d7a8:	e0bffb15 	stw	r2,-20(fp)
 402d7ac:	00000206 	br	402d7b8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 402d7b0:	00bfebc4 	movi	r2,-81
 402d7b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402d7b8:	e0bffb17 	ldw	r2,-20(fp)
 402d7bc:	1000070e 	bge	r2,zero,402d7dc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 402d7c0:	402d6e40 	call	402d6e4 <alt_get_errno>
 402d7c4:	1007883a 	mov	r3,r2
 402d7c8:	e0bffb17 	ldw	r2,-20(fp)
 402d7cc:	0085c83a 	sub	r2,zero,r2
 402d7d0:	18800015 	stw	r2,0(r3)
    rc = -1;
 402d7d4:	00bfffc4 	movi	r2,-1
 402d7d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402d7dc:	e0bffb17 	ldw	r2,-20(fp)
}
 402d7e0:	e037883a 	mov	sp,fp
 402d7e4:	dfc00117 	ldw	ra,4(sp)
 402d7e8:	df000017 	ldw	fp,0(sp)
 402d7ec:	dec00204 	addi	sp,sp,8
 402d7f0:	f800283a 	ret

0402d7f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402d7f4:	defffd04 	addi	sp,sp,-12
 402d7f8:	dfc00215 	stw	ra,8(sp)
 402d7fc:	df000115 	stw	fp,4(sp)
 402d800:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402d804:	0009883a 	mov	r4,zero
 402d808:	402dc9c0 	call	402dc9c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402d80c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402d810:	402dcd40 	call	402dcd4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402d814:	018100f4 	movhi	r6,1027
 402d818:	31816304 	addi	r6,r6,1420
 402d81c:	014100f4 	movhi	r5,1027
 402d820:	29416304 	addi	r5,r5,1420
 402d824:	010100f4 	movhi	r4,1027
 402d828:	21016304 	addi	r4,r4,1420
 402d82c:	402f77c0 	call	402f77c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402d830:	402f4980 	call	402f498 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402d834:	010100f4 	movhi	r4,1027
 402d838:	213d3e04 	addi	r4,r4,-2824
 402d83c:	402fe500 	call	402fe50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402d840:	d0a71417 	ldw	r2,-25520(gp)
 402d844:	d0e71517 	ldw	r3,-25516(gp)
 402d848:	d1271617 	ldw	r4,-25512(gp)
 402d84c:	200d883a 	mov	r6,r4
 402d850:	180b883a 	mov	r5,r3
 402d854:	1009883a 	mov	r4,r2
 402d858:	40206b00 	call	40206b0 <main>
 402d85c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402d860:	01000044 	movi	r4,1
 402d864:	402d0480 	call	402d048 <close>
  exit (result);
 402d868:	e13fff17 	ldw	r4,-4(fp)
 402d86c:	402fe640 	call	402fe64 <exit>

0402d870 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402d870:	defffe04 	addi	sp,sp,-8
 402d874:	df000115 	stw	fp,4(sp)
 402d878:	df000104 	addi	fp,sp,4
 402d87c:	e13fff15 	stw	r4,-4(fp)
}
 402d880:	0001883a 	nop
 402d884:	e037883a 	mov	sp,fp
 402d888:	df000017 	ldw	fp,0(sp)
 402d88c:	dec00104 	addi	sp,sp,4
 402d890:	f800283a 	ret

0402d894 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402d894:	defffe04 	addi	sp,sp,-8
 402d898:	df000115 	stw	fp,4(sp)
 402d89c:	df000104 	addi	fp,sp,4
 402d8a0:	e13fff15 	stw	r4,-4(fp)
}
 402d8a4:	0001883a 	nop
 402d8a8:	e037883a 	mov	sp,fp
 402d8ac:	df000017 	ldw	fp,0(sp)
 402d8b0:	dec00104 	addi	sp,sp,4
 402d8b4:	f800283a 	ret

0402d8b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d8b8:	defffe04 	addi	sp,sp,-8
 402d8bc:	dfc00115 	stw	ra,4(sp)
 402d8c0:	df000015 	stw	fp,0(sp)
 402d8c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d8c8:	d0a00b17 	ldw	r2,-32724(gp)
 402d8cc:	10000326 	beq	r2,zero,402d8dc <alt_get_errno+0x24>
 402d8d0:	d0a00b17 	ldw	r2,-32724(gp)
 402d8d4:	103ee83a 	callr	r2
 402d8d8:	00000106 	br	402d8e0 <alt_get_errno+0x28>
 402d8dc:	d0a71204 	addi	r2,gp,-25528
}
 402d8e0:	e037883a 	mov	sp,fp
 402d8e4:	dfc00117 	ldw	ra,4(sp)
 402d8e8:	df000017 	ldw	fp,0(sp)
 402d8ec:	dec00204 	addi	sp,sp,8
 402d8f0:	f800283a 	ret

0402d8f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402d8f4:	defff904 	addi	sp,sp,-28
 402d8f8:	dfc00615 	stw	ra,24(sp)
 402d8fc:	df000515 	stw	fp,20(sp)
 402d900:	df000504 	addi	fp,sp,20
 402d904:	e13ffd15 	stw	r4,-12(fp)
 402d908:	e17ffe15 	stw	r5,-8(fp)
 402d90c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d910:	e0bffd17 	ldw	r2,-12(fp)
 402d914:	10000616 	blt	r2,zero,402d930 <read+0x3c>
 402d918:	e0bffd17 	ldw	r2,-12(fp)
 402d91c:	10c00324 	muli	r3,r2,12
 402d920:	008100f4 	movhi	r2,1027
 402d924:	1083b804 	addi	r2,r2,3808
 402d928:	1885883a 	add	r2,r3,r2
 402d92c:	00000106 	br	402d934 <read+0x40>
 402d930:	0005883a 	mov	r2,zero
 402d934:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402d938:	e0bffb17 	ldw	r2,-20(fp)
 402d93c:	10002226 	beq	r2,zero,402d9c8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d940:	e0bffb17 	ldw	r2,-20(fp)
 402d944:	10800217 	ldw	r2,8(r2)
 402d948:	108000cc 	andi	r2,r2,3
 402d94c:	10800060 	cmpeqi	r2,r2,1
 402d950:	1000181e 	bne	r2,zero,402d9b4 <read+0xc0>
        (fd->dev->read))
 402d954:	e0bffb17 	ldw	r2,-20(fp)
 402d958:	10800017 	ldw	r2,0(r2)
 402d95c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d960:	10001426 	beq	r2,zero,402d9b4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402d964:	e0bffb17 	ldw	r2,-20(fp)
 402d968:	10800017 	ldw	r2,0(r2)
 402d96c:	10800517 	ldw	r2,20(r2)
 402d970:	e0ffff17 	ldw	r3,-4(fp)
 402d974:	180d883a 	mov	r6,r3
 402d978:	e17ffe17 	ldw	r5,-8(fp)
 402d97c:	e13ffb17 	ldw	r4,-20(fp)
 402d980:	103ee83a 	callr	r2
 402d984:	e0bffc15 	stw	r2,-16(fp)
 402d988:	e0bffc17 	ldw	r2,-16(fp)
 402d98c:	1000070e 	bge	r2,zero,402d9ac <read+0xb8>
        {
          ALT_ERRNO = -rval;
 402d990:	402d8b80 	call	402d8b8 <alt_get_errno>
 402d994:	1007883a 	mov	r3,r2
 402d998:	e0bffc17 	ldw	r2,-16(fp)
 402d99c:	0085c83a 	sub	r2,zero,r2
 402d9a0:	18800015 	stw	r2,0(r3)
          return -1;
 402d9a4:	00bfffc4 	movi	r2,-1
 402d9a8:	00000c06 	br	402d9dc <read+0xe8>
        }
        return rval;
 402d9ac:	e0bffc17 	ldw	r2,-16(fp)
 402d9b0:	00000a06 	br	402d9dc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402d9b4:	402d8b80 	call	402d8b8 <alt_get_errno>
 402d9b8:	1007883a 	mov	r3,r2
 402d9bc:	00800344 	movi	r2,13
 402d9c0:	18800015 	stw	r2,0(r3)
 402d9c4:	00000406 	br	402d9d8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402d9c8:	402d8b80 	call	402d8b8 <alt_get_errno>
 402d9cc:	1007883a 	mov	r3,r2
 402d9d0:	00801444 	movi	r2,81
 402d9d4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402d9d8:	00bfffc4 	movi	r2,-1
}
 402d9dc:	e037883a 	mov	sp,fp
 402d9e0:	dfc00117 	ldw	ra,4(sp)
 402d9e4:	df000017 	ldw	fp,0(sp)
 402d9e8:	dec00204 	addi	sp,sp,8
 402d9ec:	f800283a 	ret

0402d9f0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402d9f0:	defffe04 	addi	sp,sp,-8
 402d9f4:	df000115 	stw	fp,4(sp)
 402d9f8:	df000104 	addi	fp,sp,4
 402d9fc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 402da00:	e0bfff17 	ldw	r2,-4(fp)
 402da04:	108000d0 	cmplti	r2,r2,3
 402da08:	10000d1e 	bne	r2,zero,402da40 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402da0c:	008100f4 	movhi	r2,1027
 402da10:	1083b804 	addi	r2,r2,3808
 402da14:	e0ffff17 	ldw	r3,-4(fp)
 402da18:	18c00324 	muli	r3,r3,12
 402da1c:	10c5883a 	add	r2,r2,r3
 402da20:	10800204 	addi	r2,r2,8
 402da24:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402da28:	008100f4 	movhi	r2,1027
 402da2c:	1083b804 	addi	r2,r2,3808
 402da30:	e0ffff17 	ldw	r3,-4(fp)
 402da34:	18c00324 	muli	r3,r3,12
 402da38:	10c5883a 	add	r2,r2,r3
 402da3c:	10000015 	stw	zero,0(r2)
  }
}
 402da40:	0001883a 	nop
 402da44:	e037883a 	mov	sp,fp
 402da48:	df000017 	ldw	fp,0(sp)
 402da4c:	dec00104 	addi	sp,sp,4
 402da50:	f800283a 	ret

0402da54 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402da54:	defff904 	addi	sp,sp,-28
 402da58:	df000615 	stw	fp,24(sp)
 402da5c:	df000604 	addi	fp,sp,24
 402da60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402da64:	0005303a 	rdctl	r2,status
 402da68:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402da6c:	e0fffe17 	ldw	r3,-8(fp)
 402da70:	00bfff84 	movi	r2,-2
 402da74:	1884703a 	and	r2,r3,r2
 402da78:	1001703a 	wrctl	status,r2
  
  return context;
 402da7c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402da80:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402da84:	d0a00d17 	ldw	r2,-32716(gp)
 402da88:	10c000c4 	addi	r3,r2,3
 402da8c:	00bfff04 	movi	r2,-4
 402da90:	1884703a 	and	r2,r3,r2
 402da94:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402da98:	d0e00d17 	ldw	r3,-32716(gp)
 402da9c:	e0bfff17 	ldw	r2,-4(fp)
 402daa0:	1887883a 	add	r3,r3,r2
 402daa4:	00810134 	movhi	r2,1028
 402daa8:	10800004 	addi	r2,r2,0
 402daac:	10c0062e 	bgeu	r2,r3,402dac8 <sbrk+0x74>
 402dab0:	e0bffb17 	ldw	r2,-20(fp)
 402dab4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402dab8:	e0bffa17 	ldw	r2,-24(fp)
 402dabc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402dac0:	00bfffc4 	movi	r2,-1
 402dac4:	00000b06 	br	402daf4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402dac8:	d0a00d17 	ldw	r2,-32716(gp)
 402dacc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402dad0:	d0e00d17 	ldw	r3,-32716(gp)
 402dad4:	e0bfff17 	ldw	r2,-4(fp)
 402dad8:	1885883a 	add	r2,r3,r2
 402dadc:	d0a00d15 	stw	r2,-32716(gp)
 402dae0:	e0bffb17 	ldw	r2,-20(fp)
 402dae4:	e0bffc15 	stw	r2,-16(fp)
 402dae8:	e0bffc17 	ldw	r2,-16(fp)
 402daec:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402daf0:	e0bffd17 	ldw	r2,-12(fp)
} 
 402daf4:	e037883a 	mov	sp,fp
 402daf8:	df000017 	ldw	fp,0(sp)
 402dafc:	dec00104 	addi	sp,sp,4
 402db00:	f800283a 	ret

0402db04 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402db04:	defffd04 	addi	sp,sp,-12
 402db08:	dfc00215 	stw	ra,8(sp)
 402db0c:	df000115 	stw	fp,4(sp)
 402db10:	df000104 	addi	fp,sp,4
 402db14:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402db18:	e13fff17 	ldw	r4,-4(fp)
 402db1c:	402f2600 	call	402f260 <alt_busy_sleep>
}
 402db20:	e037883a 	mov	sp,fp
 402db24:	dfc00117 	ldw	ra,4(sp)
 402db28:	df000017 	ldw	fp,0(sp)
 402db2c:	dec00204 	addi	sp,sp,8
 402db30:	f800283a 	ret

0402db34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402db34:	defffe04 	addi	sp,sp,-8
 402db38:	dfc00115 	stw	ra,4(sp)
 402db3c:	df000015 	stw	fp,0(sp)
 402db40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402db44:	d0a00b17 	ldw	r2,-32724(gp)
 402db48:	10000326 	beq	r2,zero,402db58 <alt_get_errno+0x24>
 402db4c:	d0a00b17 	ldw	r2,-32724(gp)
 402db50:	103ee83a 	callr	r2
 402db54:	00000106 	br	402db5c <alt_get_errno+0x28>
 402db58:	d0a71204 	addi	r2,gp,-25528
}
 402db5c:	e037883a 	mov	sp,fp
 402db60:	dfc00117 	ldw	ra,4(sp)
 402db64:	df000017 	ldw	fp,0(sp)
 402db68:	dec00204 	addi	sp,sp,8
 402db6c:	f800283a 	ret

0402db70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402db70:	defff904 	addi	sp,sp,-28
 402db74:	dfc00615 	stw	ra,24(sp)
 402db78:	df000515 	stw	fp,20(sp)
 402db7c:	df000504 	addi	fp,sp,20
 402db80:	e13ffd15 	stw	r4,-12(fp)
 402db84:	e17ffe15 	stw	r5,-8(fp)
 402db88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402db8c:	e0bffd17 	ldw	r2,-12(fp)
 402db90:	10000616 	blt	r2,zero,402dbac <write+0x3c>
 402db94:	e0bffd17 	ldw	r2,-12(fp)
 402db98:	10c00324 	muli	r3,r2,12
 402db9c:	008100f4 	movhi	r2,1027
 402dba0:	1083b804 	addi	r2,r2,3808
 402dba4:	1885883a 	add	r2,r3,r2
 402dba8:	00000106 	br	402dbb0 <write+0x40>
 402dbac:	0005883a 	mov	r2,zero
 402dbb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402dbb4:	e0bffb17 	ldw	r2,-20(fp)
 402dbb8:	10002126 	beq	r2,zero,402dc40 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402dbbc:	e0bffb17 	ldw	r2,-20(fp)
 402dbc0:	10800217 	ldw	r2,8(r2)
 402dbc4:	108000cc 	andi	r2,r2,3
 402dbc8:	10001826 	beq	r2,zero,402dc2c <write+0xbc>
 402dbcc:	e0bffb17 	ldw	r2,-20(fp)
 402dbd0:	10800017 	ldw	r2,0(r2)
 402dbd4:	10800617 	ldw	r2,24(r2)
 402dbd8:	10001426 	beq	r2,zero,402dc2c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402dbdc:	e0bffb17 	ldw	r2,-20(fp)
 402dbe0:	10800017 	ldw	r2,0(r2)
 402dbe4:	10800617 	ldw	r2,24(r2)
 402dbe8:	e0ffff17 	ldw	r3,-4(fp)
 402dbec:	180d883a 	mov	r6,r3
 402dbf0:	e17ffe17 	ldw	r5,-8(fp)
 402dbf4:	e13ffb17 	ldw	r4,-20(fp)
 402dbf8:	103ee83a 	callr	r2
 402dbfc:	e0bffc15 	stw	r2,-16(fp)
 402dc00:	e0bffc17 	ldw	r2,-16(fp)
 402dc04:	1000070e 	bge	r2,zero,402dc24 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 402dc08:	402db340 	call	402db34 <alt_get_errno>
 402dc0c:	1007883a 	mov	r3,r2
 402dc10:	e0bffc17 	ldw	r2,-16(fp)
 402dc14:	0085c83a 	sub	r2,zero,r2
 402dc18:	18800015 	stw	r2,0(r3)
        return -1;
 402dc1c:	00bfffc4 	movi	r2,-1
 402dc20:	00000c06 	br	402dc54 <write+0xe4>
      }
      return rval;
 402dc24:	e0bffc17 	ldw	r2,-16(fp)
 402dc28:	00000a06 	br	402dc54 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402dc2c:	402db340 	call	402db34 <alt_get_errno>
 402dc30:	1007883a 	mov	r3,r2
 402dc34:	00800344 	movi	r2,13
 402dc38:	18800015 	stw	r2,0(r3)
 402dc3c:	00000406 	br	402dc50 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402dc40:	402db340 	call	402db34 <alt_get_errno>
 402dc44:	1007883a 	mov	r3,r2
 402dc48:	00801444 	movi	r2,81
 402dc4c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402dc50:	00bfffc4 	movi	r2,-1
}
 402dc54:	e037883a 	mov	sp,fp
 402dc58:	dfc00117 	ldw	ra,4(sp)
 402dc5c:	df000017 	ldw	fp,0(sp)
 402dc60:	dec00204 	addi	sp,sp,8
 402dc64:	f800283a 	ret

0402dc68 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402dc68:	defffd04 	addi	sp,sp,-12
 402dc6c:	dfc00215 	stw	ra,8(sp)
 402dc70:	df000115 	stw	fp,4(sp)
 402dc74:	df000104 	addi	fp,sp,4
 402dc78:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402dc7c:	d1600804 	addi	r5,gp,-32736
 402dc80:	e13fff17 	ldw	r4,-4(fp)
 402dc84:	402f3f40 	call	402f3f4 <alt_dev_llist_insert>
}
 402dc88:	e037883a 	mov	sp,fp
 402dc8c:	dfc00117 	ldw	ra,4(sp)
 402dc90:	df000017 	ldw	fp,0(sp)
 402dc94:	dec00204 	addi	sp,sp,8
 402dc98:	f800283a 	ret

0402dc9c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402dc9c:	defffd04 	addi	sp,sp,-12
 402dca0:	dfc00215 	stw	ra,8(sp)
 402dca4:	df000115 	stw	fp,4(sp)
 402dca8:	df000104 	addi	fp,sp,4
 402dcac:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1, cpu_1);
 402dcb0:	402fbf00 	call	402fbf0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402dcb4:	00800044 	movi	r2,1
 402dcb8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402dcbc:	0001883a 	nop
 402dcc0:	e037883a 	mov	sp,fp
 402dcc4:	dfc00117 	ldw	ra,4(sp)
 402dcc8:	df000017 	ldw	fp,0(sp)
 402dccc:	dec00204 	addi	sp,sp,8
 402dcd0:	f800283a 	ret

0402dcd4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402dcd4:	defffe04 	addi	sp,sp,-8
 402dcd8:	dfc00115 	stw	ra,4(sp)
 402dcdc:	df000015 	stw	fp,0(sp)
 402dce0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
 402dce4:	01800084 	movi	r6,2
 402dce8:	000b883a 	mov	r5,zero
 402dcec:	010100f4 	movhi	r4,1027
 402dcf0:	21042204 	addi	r4,r4,4232
 402dcf4:	402ded00 	call	402ded0 <altera_avalon_jtag_uart_init>
 402dcf8:	010100f4 	movhi	r4,1027
 402dcfc:	21041804 	addi	r4,r4,4192
 402dd00:	402dc680 	call	402dc68 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 402dd04:	000d883a 	mov	r6,zero
 402dd08:	000b883a 	mov	r5,zero
 402dd0c:	010100f4 	movhi	r4,1027
 402dd10:	21083004 	addi	r4,r4,8384
 402dd14:	402eabc0 	call	402eabc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_1, mailbox_simple_1);
 402dd18:	01bfffc4 	movi	r6,-1
 402dd1c:	000b883a 	mov	r5,zero
 402dd20:	010100f4 	movhi	r4,1027
 402dd24:	21084204 	addi	r4,r4,8456
 402dd28:	402eabc0 	call	402eabc <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_1, performance_counter_1);
 402dd2c:	00c00044 	movi	r3,1
 402dd30:	00810134 	movhi	r2,1028
 402dd34:	10840004 	addi	r2,r2,4096
 402dd38:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_1, parallel_port_1);
 402dd3c:	010100f4 	movhi	r4,1027
 402dd40:	21085404 	addi	r4,r4,8528
 402dd44:	402dc680 	call	402dc68 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 402dd48:	010100f4 	movhi	r4,1027
 402dd4c:	21085f04 	addi	r4,r4,8572
 402dd50:	402dc680 	call	402dc68 <alt_dev_reg>
}
 402dd54:	0001883a 	nop
 402dd58:	e037883a 	mov	sp,fp
 402dd5c:	dfc00117 	ldw	ra,4(sp)
 402dd60:	df000017 	ldw	fp,0(sp)
 402dd64:	dec00204 	addi	sp,sp,8
 402dd68:	f800283a 	ret

0402dd6c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402dd6c:	defffa04 	addi	sp,sp,-24
 402dd70:	dfc00515 	stw	ra,20(sp)
 402dd74:	df000415 	stw	fp,16(sp)
 402dd78:	df000404 	addi	fp,sp,16
 402dd7c:	e13ffd15 	stw	r4,-12(fp)
 402dd80:	e17ffe15 	stw	r5,-8(fp)
 402dd84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402dd88:	e0bffd17 	ldw	r2,-12(fp)
 402dd8c:	10800017 	ldw	r2,0(r2)
 402dd90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402dd94:	e0bffc17 	ldw	r2,-16(fp)
 402dd98:	10c00a04 	addi	r3,r2,40
 402dd9c:	e0bffd17 	ldw	r2,-12(fp)
 402dda0:	10800217 	ldw	r2,8(r2)
 402dda4:	100f883a 	mov	r7,r2
 402dda8:	e1bfff17 	ldw	r6,-4(fp)
 402ddac:	e17ffe17 	ldw	r5,-8(fp)
 402ddb0:	1809883a 	mov	r4,r3
 402ddb4:	402e3940 	call	402e394 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402ddb8:	e037883a 	mov	sp,fp
 402ddbc:	dfc00117 	ldw	ra,4(sp)
 402ddc0:	df000017 	ldw	fp,0(sp)
 402ddc4:	dec00204 	addi	sp,sp,8
 402ddc8:	f800283a 	ret

0402ddcc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402ddcc:	defffa04 	addi	sp,sp,-24
 402ddd0:	dfc00515 	stw	ra,20(sp)
 402ddd4:	df000415 	stw	fp,16(sp)
 402ddd8:	df000404 	addi	fp,sp,16
 402dddc:	e13ffd15 	stw	r4,-12(fp)
 402dde0:	e17ffe15 	stw	r5,-8(fp)
 402dde4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402dde8:	e0bffd17 	ldw	r2,-12(fp)
 402ddec:	10800017 	ldw	r2,0(r2)
 402ddf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402ddf4:	e0bffc17 	ldw	r2,-16(fp)
 402ddf8:	10c00a04 	addi	r3,r2,40
 402ddfc:	e0bffd17 	ldw	r2,-12(fp)
 402de00:	10800217 	ldw	r2,8(r2)
 402de04:	100f883a 	mov	r7,r2
 402de08:	e1bfff17 	ldw	r6,-4(fp)
 402de0c:	e17ffe17 	ldw	r5,-8(fp)
 402de10:	1809883a 	mov	r4,r3
 402de14:	402e5b00 	call	402e5b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402de18:	e037883a 	mov	sp,fp
 402de1c:	dfc00117 	ldw	ra,4(sp)
 402de20:	df000017 	ldw	fp,0(sp)
 402de24:	dec00204 	addi	sp,sp,8
 402de28:	f800283a 	ret

0402de2c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402de2c:	defffc04 	addi	sp,sp,-16
 402de30:	dfc00315 	stw	ra,12(sp)
 402de34:	df000215 	stw	fp,8(sp)
 402de38:	df000204 	addi	fp,sp,8
 402de3c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402de40:	e0bfff17 	ldw	r2,-4(fp)
 402de44:	10800017 	ldw	r2,0(r2)
 402de48:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402de4c:	e0bffe17 	ldw	r2,-8(fp)
 402de50:	10c00a04 	addi	r3,r2,40
 402de54:	e0bfff17 	ldw	r2,-4(fp)
 402de58:	10800217 	ldw	r2,8(r2)
 402de5c:	100b883a 	mov	r5,r2
 402de60:	1809883a 	mov	r4,r3
 402de64:	402e23c0 	call	402e23c <altera_avalon_jtag_uart_close>
}
 402de68:	e037883a 	mov	sp,fp
 402de6c:	dfc00117 	ldw	ra,4(sp)
 402de70:	df000017 	ldw	fp,0(sp)
 402de74:	dec00204 	addi	sp,sp,8
 402de78:	f800283a 	ret

0402de7c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402de7c:	defffa04 	addi	sp,sp,-24
 402de80:	dfc00515 	stw	ra,20(sp)
 402de84:	df000415 	stw	fp,16(sp)
 402de88:	df000404 	addi	fp,sp,16
 402de8c:	e13ffd15 	stw	r4,-12(fp)
 402de90:	e17ffe15 	stw	r5,-8(fp)
 402de94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402de98:	e0bffd17 	ldw	r2,-12(fp)
 402de9c:	10800017 	ldw	r2,0(r2)
 402dea0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402dea4:	e0bffc17 	ldw	r2,-16(fp)
 402dea8:	10800a04 	addi	r2,r2,40
 402deac:	e1bfff17 	ldw	r6,-4(fp)
 402deb0:	e17ffe17 	ldw	r5,-8(fp)
 402deb4:	1009883a 	mov	r4,r2
 402deb8:	402e2a40 	call	402e2a4 <altera_avalon_jtag_uart_ioctl>
}
 402debc:	e037883a 	mov	sp,fp
 402dec0:	dfc00117 	ldw	ra,4(sp)
 402dec4:	df000017 	ldw	fp,0(sp)
 402dec8:	dec00204 	addi	sp,sp,8
 402decc:	f800283a 	ret

0402ded0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402ded0:	defffa04 	addi	sp,sp,-24
 402ded4:	dfc00515 	stw	ra,20(sp)
 402ded8:	df000415 	stw	fp,16(sp)
 402dedc:	df000404 	addi	fp,sp,16
 402dee0:	e13ffd15 	stw	r4,-12(fp)
 402dee4:	e17ffe15 	stw	r5,-8(fp)
 402dee8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402deec:	e0bffd17 	ldw	r2,-12(fp)
 402def0:	00c00044 	movi	r3,1
 402def4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402def8:	e0bffd17 	ldw	r2,-12(fp)
 402defc:	10800017 	ldw	r2,0(r2)
 402df00:	10800104 	addi	r2,r2,4
 402df04:	1007883a 	mov	r3,r2
 402df08:	e0bffd17 	ldw	r2,-12(fp)
 402df0c:	10800817 	ldw	r2,32(r2)
 402df10:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 402df14:	e0bffe17 	ldw	r2,-8(fp)
 402df18:	e0ffff17 	ldw	r3,-4(fp)
 402df1c:	d8000015 	stw	zero,0(sp)
 402df20:	e1fffd17 	ldw	r7,-12(fp)
 402df24:	018100f4 	movhi	r6,1027
 402df28:	31b7e404 	addi	r6,r6,-8304
 402df2c:	180b883a 	mov	r5,r3
 402df30:	1009883a 	mov	r4,r2
 402df34:	402d2780 	call	402d278 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402df38:	e0bffd17 	ldw	r2,-12(fp)
 402df3c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402df40:	e0bffd17 	ldw	r2,-12(fp)
 402df44:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402df48:	d0e71817 	ldw	r3,-25504(gp)
 402df4c:	e1fffd17 	ldw	r7,-12(fp)
 402df50:	018100f4 	movhi	r6,1027
 402df54:	31b86704 	addi	r6,r6,-7780
 402df58:	180b883a 	mov	r5,r3
 402df5c:	1009883a 	mov	r4,r2
 402df60:	402f1340 	call	402f134 <alt_alarm_start>
 402df64:	1000040e 	bge	r2,zero,402df78 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402df68:	e0fffd17 	ldw	r3,-12(fp)
 402df6c:	00a00034 	movhi	r2,32768
 402df70:	10bfffc4 	addi	r2,r2,-1
 402df74:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402df78:	0001883a 	nop
 402df7c:	e037883a 	mov	sp,fp
 402df80:	dfc00117 	ldw	ra,4(sp)
 402df84:	df000017 	ldw	fp,0(sp)
 402df88:	dec00204 	addi	sp,sp,8
 402df8c:	f800283a 	ret

0402df90 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402df90:	defff804 	addi	sp,sp,-32
 402df94:	df000715 	stw	fp,28(sp)
 402df98:	df000704 	addi	fp,sp,28
 402df9c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402dfa0:	e0bfff17 	ldw	r2,-4(fp)
 402dfa4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 402dfa8:	e0bffb17 	ldw	r2,-20(fp)
 402dfac:	10800017 	ldw	r2,0(r2)
 402dfb0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402dfb4:	e0bffc17 	ldw	r2,-16(fp)
 402dfb8:	10800104 	addi	r2,r2,4
 402dfbc:	10800037 	ldwio	r2,0(r2)
 402dfc0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402dfc4:	e0bffd17 	ldw	r2,-12(fp)
 402dfc8:	1080c00c 	andi	r2,r2,768
 402dfcc:	10006d26 	beq	r2,zero,402e184 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402dfd0:	e0bffd17 	ldw	r2,-12(fp)
 402dfd4:	1080400c 	andi	r2,r2,256
 402dfd8:	10003526 	beq	r2,zero,402e0b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402dfdc:	00800074 	movhi	r2,1
 402dfe0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402dfe4:	e0bffb17 	ldw	r2,-20(fp)
 402dfe8:	10800a17 	ldw	r2,40(r2)
 402dfec:	10800044 	addi	r2,r2,1
 402dff0:	1081ffcc 	andi	r2,r2,2047
 402dff4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402dff8:	e0bffb17 	ldw	r2,-20(fp)
 402dffc:	10c00b17 	ldw	r3,44(r2)
 402e000:	e0bffe17 	ldw	r2,-8(fp)
 402e004:	18801526 	beq	r3,r2,402e05c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402e008:	e0bffc17 	ldw	r2,-16(fp)
 402e00c:	10800037 	ldwio	r2,0(r2)
 402e010:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402e014:	e0bff917 	ldw	r2,-28(fp)
 402e018:	10a0000c 	andi	r2,r2,32768
 402e01c:	10001126 	beq	r2,zero,402e064 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402e020:	e0bffb17 	ldw	r2,-20(fp)
 402e024:	10800a17 	ldw	r2,40(r2)
 402e028:	e0fff917 	ldw	r3,-28(fp)
 402e02c:	1809883a 	mov	r4,r3
 402e030:	e0fffb17 	ldw	r3,-20(fp)
 402e034:	1885883a 	add	r2,r3,r2
 402e038:	10800e04 	addi	r2,r2,56
 402e03c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e040:	e0bffb17 	ldw	r2,-20(fp)
 402e044:	10800a17 	ldw	r2,40(r2)
 402e048:	10800044 	addi	r2,r2,1
 402e04c:	10c1ffcc 	andi	r3,r2,2047
 402e050:	e0bffb17 	ldw	r2,-20(fp)
 402e054:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402e058:	003fe206 	br	402dfe4 <__alt_data_end+0xfffedfe4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402e05c:	0001883a 	nop
 402e060:	00000106 	br	402e068 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402e064:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402e068:	e0bff917 	ldw	r2,-28(fp)
 402e06c:	10bfffec 	andhi	r2,r2,65535
 402e070:	10000f26 	beq	r2,zero,402e0b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402e074:	e0bffb17 	ldw	r2,-20(fp)
 402e078:	10c00817 	ldw	r3,32(r2)
 402e07c:	00bfff84 	movi	r2,-2
 402e080:	1886703a 	and	r3,r3,r2
 402e084:	e0bffb17 	ldw	r2,-20(fp)
 402e088:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402e08c:	e0bffc17 	ldw	r2,-16(fp)
 402e090:	10800104 	addi	r2,r2,4
 402e094:	1007883a 	mov	r3,r2
 402e098:	e0bffb17 	ldw	r2,-20(fp)
 402e09c:	10800817 	ldw	r2,32(r2)
 402e0a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e0a4:	e0bffc17 	ldw	r2,-16(fp)
 402e0a8:	10800104 	addi	r2,r2,4
 402e0ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402e0b0:	e0bffd17 	ldw	r2,-12(fp)
 402e0b4:	1080800c 	andi	r2,r2,512
 402e0b8:	103fbe26 	beq	r2,zero,402dfb4 <__alt_data_end+0xfffedfb4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402e0bc:	e0bffd17 	ldw	r2,-12(fp)
 402e0c0:	1004d43a 	srli	r2,r2,16
 402e0c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402e0c8:	00001406 	br	402e11c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402e0cc:	e0bffc17 	ldw	r2,-16(fp)
 402e0d0:	e0fffb17 	ldw	r3,-20(fp)
 402e0d4:	18c00d17 	ldw	r3,52(r3)
 402e0d8:	e13ffb17 	ldw	r4,-20(fp)
 402e0dc:	20c7883a 	add	r3,r4,r3
 402e0e0:	18c20e04 	addi	r3,r3,2104
 402e0e4:	18c00003 	ldbu	r3,0(r3)
 402e0e8:	18c03fcc 	andi	r3,r3,255
 402e0ec:	18c0201c 	xori	r3,r3,128
 402e0f0:	18ffe004 	addi	r3,r3,-128
 402e0f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e0f8:	e0bffb17 	ldw	r2,-20(fp)
 402e0fc:	10800d17 	ldw	r2,52(r2)
 402e100:	10800044 	addi	r2,r2,1
 402e104:	10c1ffcc 	andi	r3,r2,2047
 402e108:	e0bffb17 	ldw	r2,-20(fp)
 402e10c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 402e110:	e0bffa17 	ldw	r2,-24(fp)
 402e114:	10bfffc4 	addi	r2,r2,-1
 402e118:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402e11c:	e0bffa17 	ldw	r2,-24(fp)
 402e120:	10000526 	beq	r2,zero,402e138 <altera_avalon_jtag_uart_irq+0x1a8>
 402e124:	e0bffb17 	ldw	r2,-20(fp)
 402e128:	10c00d17 	ldw	r3,52(r2)
 402e12c:	e0bffb17 	ldw	r2,-20(fp)
 402e130:	10800c17 	ldw	r2,48(r2)
 402e134:	18bfe51e 	bne	r3,r2,402e0cc <__alt_data_end+0xfffee0cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402e138:	e0bffa17 	ldw	r2,-24(fp)
 402e13c:	103f9d26 	beq	r2,zero,402dfb4 <__alt_data_end+0xfffedfb4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e140:	e0bffb17 	ldw	r2,-20(fp)
 402e144:	10c00817 	ldw	r3,32(r2)
 402e148:	00bfff44 	movi	r2,-3
 402e14c:	1886703a 	and	r3,r3,r2
 402e150:	e0bffb17 	ldw	r2,-20(fp)
 402e154:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e158:	e0bffb17 	ldw	r2,-20(fp)
 402e15c:	10800017 	ldw	r2,0(r2)
 402e160:	10800104 	addi	r2,r2,4
 402e164:	1007883a 	mov	r3,r2
 402e168:	e0bffb17 	ldw	r2,-20(fp)
 402e16c:	10800817 	ldw	r2,32(r2)
 402e170:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e174:	e0bffc17 	ldw	r2,-16(fp)
 402e178:	10800104 	addi	r2,r2,4
 402e17c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402e180:	003f8c06 	br	402dfb4 <__alt_data_end+0xfffedfb4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402e184:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402e188:	0001883a 	nop
 402e18c:	e037883a 	mov	sp,fp
 402e190:	df000017 	ldw	fp,0(sp)
 402e194:	dec00104 	addi	sp,sp,4
 402e198:	f800283a 	ret

0402e19c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402e19c:	defff804 	addi	sp,sp,-32
 402e1a0:	df000715 	stw	fp,28(sp)
 402e1a4:	df000704 	addi	fp,sp,28
 402e1a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402e1ac:	e0bffb17 	ldw	r2,-20(fp)
 402e1b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402e1b4:	e0bff917 	ldw	r2,-28(fp)
 402e1b8:	10800017 	ldw	r2,0(r2)
 402e1bc:	10800104 	addi	r2,r2,4
 402e1c0:	10800037 	ldwio	r2,0(r2)
 402e1c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402e1c8:	e0bffa17 	ldw	r2,-24(fp)
 402e1cc:	1081000c 	andi	r2,r2,1024
 402e1d0:	10000b26 	beq	r2,zero,402e200 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402e1d4:	e0bff917 	ldw	r2,-28(fp)
 402e1d8:	10800017 	ldw	r2,0(r2)
 402e1dc:	10800104 	addi	r2,r2,4
 402e1e0:	1007883a 	mov	r3,r2
 402e1e4:	e0bff917 	ldw	r2,-28(fp)
 402e1e8:	10800817 	ldw	r2,32(r2)
 402e1ec:	10810014 	ori	r2,r2,1024
 402e1f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402e1f4:	e0bff917 	ldw	r2,-28(fp)
 402e1f8:	10000915 	stw	zero,36(r2)
 402e1fc:	00000a06 	br	402e228 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402e200:	e0bff917 	ldw	r2,-28(fp)
 402e204:	10c00917 	ldw	r3,36(r2)
 402e208:	00a00034 	movhi	r2,32768
 402e20c:	10bfff04 	addi	r2,r2,-4
 402e210:	10c00536 	bltu	r2,r3,402e228 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402e214:	e0bff917 	ldw	r2,-28(fp)
 402e218:	10800917 	ldw	r2,36(r2)
 402e21c:	10c00044 	addi	r3,r2,1
 402e220:	e0bff917 	ldw	r2,-28(fp)
 402e224:	10c00915 	stw	r3,36(r2)
 402e228:	d0a71817 	ldw	r2,-25504(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 402e22c:	e037883a 	mov	sp,fp
 402e230:	df000017 	ldw	fp,0(sp)
 402e234:	dec00104 	addi	sp,sp,4
 402e238:	f800283a 	ret

0402e23c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402e23c:	defffd04 	addi	sp,sp,-12
 402e240:	df000215 	stw	fp,8(sp)
 402e244:	df000204 	addi	fp,sp,8
 402e248:	e13ffe15 	stw	r4,-8(fp)
 402e24c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e250:	00000506 	br	402e268 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402e254:	e0bfff17 	ldw	r2,-4(fp)
 402e258:	1090000c 	andi	r2,r2,16384
 402e25c:	10000226 	beq	r2,zero,402e268 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402e260:	00bffd44 	movi	r2,-11
 402e264:	00000b06 	br	402e294 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e268:	e0bffe17 	ldw	r2,-8(fp)
 402e26c:	10c00d17 	ldw	r3,52(r2)
 402e270:	e0bffe17 	ldw	r2,-8(fp)
 402e274:	10800c17 	ldw	r2,48(r2)
 402e278:	18800526 	beq	r3,r2,402e290 <altera_avalon_jtag_uart_close+0x54>
 402e27c:	e0bffe17 	ldw	r2,-8(fp)
 402e280:	10c00917 	ldw	r3,36(r2)
 402e284:	e0bffe17 	ldw	r2,-8(fp)
 402e288:	10800117 	ldw	r2,4(r2)
 402e28c:	18bff136 	bltu	r3,r2,402e254 <__alt_data_end+0xfffee254>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402e290:	0005883a 	mov	r2,zero
}
 402e294:	e037883a 	mov	sp,fp
 402e298:	df000017 	ldw	fp,0(sp)
 402e29c:	dec00104 	addi	sp,sp,4
 402e2a0:	f800283a 	ret

0402e2a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402e2a4:	defffa04 	addi	sp,sp,-24
 402e2a8:	df000515 	stw	fp,20(sp)
 402e2ac:	df000504 	addi	fp,sp,20
 402e2b0:	e13ffd15 	stw	r4,-12(fp)
 402e2b4:	e17ffe15 	stw	r5,-8(fp)
 402e2b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402e2bc:	00bff9c4 	movi	r2,-25
 402e2c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402e2c4:	e0bffe17 	ldw	r2,-8(fp)
 402e2c8:	10da8060 	cmpeqi	r3,r2,27137
 402e2cc:	1800031e 	bne	r3,zero,402e2dc <altera_avalon_jtag_uart_ioctl+0x38>
 402e2d0:	109a80a0 	cmpeqi	r2,r2,27138
 402e2d4:	1000181e 	bne	r2,zero,402e338 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402e2d8:	00002906 	br	402e380 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402e2dc:	e0bffd17 	ldw	r2,-12(fp)
 402e2e0:	10c00117 	ldw	r3,4(r2)
 402e2e4:	00a00034 	movhi	r2,32768
 402e2e8:	10bfffc4 	addi	r2,r2,-1
 402e2ec:	18802126 	beq	r3,r2,402e374 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402e2f0:	e0bfff17 	ldw	r2,-4(fp)
 402e2f4:	10800017 	ldw	r2,0(r2)
 402e2f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402e2fc:	e0bffc17 	ldw	r2,-16(fp)
 402e300:	10800090 	cmplti	r2,r2,2
 402e304:	1000061e 	bne	r2,zero,402e320 <altera_avalon_jtag_uart_ioctl+0x7c>
 402e308:	e0fffc17 	ldw	r3,-16(fp)
 402e30c:	00a00034 	movhi	r2,32768
 402e310:	10bfffc4 	addi	r2,r2,-1
 402e314:	18800226 	beq	r3,r2,402e320 <altera_avalon_jtag_uart_ioctl+0x7c>
 402e318:	e0bffc17 	ldw	r2,-16(fp)
 402e31c:	00000206 	br	402e328 <altera_avalon_jtag_uart_ioctl+0x84>
 402e320:	00a00034 	movhi	r2,32768
 402e324:	10bfff84 	addi	r2,r2,-2
 402e328:	e0fffd17 	ldw	r3,-12(fp)
 402e32c:	18800115 	stw	r2,4(r3)
      rc = 0;
 402e330:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e334:	00000f06 	br	402e374 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402e338:	e0bffd17 	ldw	r2,-12(fp)
 402e33c:	10c00117 	ldw	r3,4(r2)
 402e340:	00a00034 	movhi	r2,32768
 402e344:	10bfffc4 	addi	r2,r2,-1
 402e348:	18800c26 	beq	r3,r2,402e37c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402e34c:	e0bffd17 	ldw	r2,-12(fp)
 402e350:	10c00917 	ldw	r3,36(r2)
 402e354:	e0bffd17 	ldw	r2,-12(fp)
 402e358:	10800117 	ldw	r2,4(r2)
 402e35c:	1885803a 	cmpltu	r2,r3,r2
 402e360:	10c03fcc 	andi	r3,r2,255
 402e364:	e0bfff17 	ldw	r2,-4(fp)
 402e368:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402e36c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e370:	00000206 	br	402e37c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402e374:	0001883a 	nop
 402e378:	00000106 	br	402e380 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402e37c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402e380:	e0bffb17 	ldw	r2,-20(fp)
}
 402e384:	e037883a 	mov	sp,fp
 402e388:	df000017 	ldw	fp,0(sp)
 402e38c:	dec00104 	addi	sp,sp,4
 402e390:	f800283a 	ret

0402e394 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402e394:	defff304 	addi	sp,sp,-52
 402e398:	dfc00c15 	stw	ra,48(sp)
 402e39c:	df000b15 	stw	fp,44(sp)
 402e3a0:	df000b04 	addi	fp,sp,44
 402e3a4:	e13ffc15 	stw	r4,-16(fp)
 402e3a8:	e17ffd15 	stw	r5,-12(fp)
 402e3ac:	e1bffe15 	stw	r6,-8(fp)
 402e3b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402e3b4:	e0bffd17 	ldw	r2,-12(fp)
 402e3b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e3bc:	00004706 	br	402e4dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402e3c0:	e0bffc17 	ldw	r2,-16(fp)
 402e3c4:	10800a17 	ldw	r2,40(r2)
 402e3c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 402e3cc:	e0bffc17 	ldw	r2,-16(fp)
 402e3d0:	10800b17 	ldw	r2,44(r2)
 402e3d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402e3d8:	e0fff717 	ldw	r3,-36(fp)
 402e3dc:	e0bff817 	ldw	r2,-32(fp)
 402e3e0:	18800536 	bltu	r3,r2,402e3f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402e3e4:	e0fff717 	ldw	r3,-36(fp)
 402e3e8:	e0bff817 	ldw	r2,-32(fp)
 402e3ec:	1885c83a 	sub	r2,r3,r2
 402e3f0:	e0bff615 	stw	r2,-40(fp)
 402e3f4:	00000406 	br	402e408 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402e3f8:	00c20004 	movi	r3,2048
 402e3fc:	e0bff817 	ldw	r2,-32(fp)
 402e400:	1885c83a 	sub	r2,r3,r2
 402e404:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e408:	e0bff617 	ldw	r2,-40(fp)
 402e40c:	10001e26 	beq	r2,zero,402e488 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 402e410:	e0fffe17 	ldw	r3,-8(fp)
 402e414:	e0bff617 	ldw	r2,-40(fp)
 402e418:	1880022e 	bgeu	r3,r2,402e424 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 402e41c:	e0bffe17 	ldw	r2,-8(fp)
 402e420:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402e424:	e0bffc17 	ldw	r2,-16(fp)
 402e428:	10c00e04 	addi	r3,r2,56
 402e42c:	e0bff817 	ldw	r2,-32(fp)
 402e430:	1885883a 	add	r2,r3,r2
 402e434:	e1bff617 	ldw	r6,-40(fp)
 402e438:	100b883a 	mov	r5,r2
 402e43c:	e13ff517 	ldw	r4,-44(fp)
 402e440:	40261b80 	call	40261b8 <memcpy>
      ptr   += n;
 402e444:	e0fff517 	ldw	r3,-44(fp)
 402e448:	e0bff617 	ldw	r2,-40(fp)
 402e44c:	1885883a 	add	r2,r3,r2
 402e450:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402e454:	e0fffe17 	ldw	r3,-8(fp)
 402e458:	e0bff617 	ldw	r2,-40(fp)
 402e45c:	1885c83a 	sub	r2,r3,r2
 402e460:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e464:	e0fff817 	ldw	r3,-32(fp)
 402e468:	e0bff617 	ldw	r2,-40(fp)
 402e46c:	1885883a 	add	r2,r3,r2
 402e470:	10c1ffcc 	andi	r3,r2,2047
 402e474:	e0bffc17 	ldw	r2,-16(fp)
 402e478:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 402e47c:	e0bffe17 	ldw	r2,-8(fp)
 402e480:	00bfcf16 	blt	zero,r2,402e3c0 <__alt_data_end+0xfffee3c0>
 402e484:	00000106 	br	402e48c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402e488:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402e48c:	e0fff517 	ldw	r3,-44(fp)
 402e490:	e0bffd17 	ldw	r2,-12(fp)
 402e494:	1880141e 	bne	r3,r2,402e4e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402e498:	e0bfff17 	ldw	r2,-4(fp)
 402e49c:	1090000c 	andi	r2,r2,16384
 402e4a0:	1000131e 	bne	r2,zero,402e4f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402e4a4:	0001883a 	nop
 402e4a8:	e0bffc17 	ldw	r2,-16(fp)
 402e4ac:	10c00a17 	ldw	r3,40(r2)
 402e4b0:	e0bff717 	ldw	r2,-36(fp)
 402e4b4:	1880051e 	bne	r3,r2,402e4cc <altera_avalon_jtag_uart_read+0x138>
 402e4b8:	e0bffc17 	ldw	r2,-16(fp)
 402e4bc:	10c00917 	ldw	r3,36(r2)
 402e4c0:	e0bffc17 	ldw	r2,-16(fp)
 402e4c4:	10800117 	ldw	r2,4(r2)
 402e4c8:	18bff736 	bltu	r3,r2,402e4a8 <__alt_data_end+0xfffee4a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402e4cc:	e0bffc17 	ldw	r2,-16(fp)
 402e4d0:	10c00a17 	ldw	r3,40(r2)
 402e4d4:	e0bff717 	ldw	r2,-36(fp)
 402e4d8:	18800726 	beq	r3,r2,402e4f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e4dc:	e0bffe17 	ldw	r2,-8(fp)
 402e4e0:	00bfb716 	blt	zero,r2,402e3c0 <__alt_data_end+0xfffee3c0>
 402e4e4:	00000506 	br	402e4fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402e4e8:	0001883a 	nop
 402e4ec:	00000306 	br	402e4fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402e4f0:	0001883a 	nop
 402e4f4:	00000106 	br	402e4fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402e4f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 402e4fc:	e0fff517 	ldw	r3,-44(fp)
 402e500:	e0bffd17 	ldw	r2,-12(fp)
 402e504:	18801826 	beq	r3,r2,402e568 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e508:	0005303a 	rdctl	r2,status
 402e50c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e510:	e0fffb17 	ldw	r3,-20(fp)
 402e514:	00bfff84 	movi	r2,-2
 402e518:	1884703a 	and	r2,r3,r2
 402e51c:	1001703a 	wrctl	status,r2
  
  return context;
 402e520:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402e524:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402e528:	e0bffc17 	ldw	r2,-16(fp)
 402e52c:	10800817 	ldw	r2,32(r2)
 402e530:	10c00054 	ori	r3,r2,1
 402e534:	e0bffc17 	ldw	r2,-16(fp)
 402e538:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e53c:	e0bffc17 	ldw	r2,-16(fp)
 402e540:	10800017 	ldw	r2,0(r2)
 402e544:	10800104 	addi	r2,r2,4
 402e548:	1007883a 	mov	r3,r2
 402e54c:	e0bffc17 	ldw	r2,-16(fp)
 402e550:	10800817 	ldw	r2,32(r2)
 402e554:	18800035 	stwio	r2,0(r3)
 402e558:	e0bffa17 	ldw	r2,-24(fp)
 402e55c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e560:	e0bff917 	ldw	r2,-28(fp)
 402e564:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402e568:	e0fff517 	ldw	r3,-44(fp)
 402e56c:	e0bffd17 	ldw	r2,-12(fp)
 402e570:	18800426 	beq	r3,r2,402e584 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402e574:	e0fff517 	ldw	r3,-44(fp)
 402e578:	e0bffd17 	ldw	r2,-12(fp)
 402e57c:	1885c83a 	sub	r2,r3,r2
 402e580:	00000606 	br	402e59c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402e584:	e0bfff17 	ldw	r2,-4(fp)
 402e588:	1090000c 	andi	r2,r2,16384
 402e58c:	10000226 	beq	r2,zero,402e598 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 402e590:	00bffd44 	movi	r2,-11
 402e594:	00000106 	br	402e59c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402e598:	00bffec4 	movi	r2,-5
}
 402e59c:	e037883a 	mov	sp,fp
 402e5a0:	dfc00117 	ldw	ra,4(sp)
 402e5a4:	df000017 	ldw	fp,0(sp)
 402e5a8:	dec00204 	addi	sp,sp,8
 402e5ac:	f800283a 	ret

0402e5b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402e5b0:	defff304 	addi	sp,sp,-52
 402e5b4:	dfc00c15 	stw	ra,48(sp)
 402e5b8:	df000b15 	stw	fp,44(sp)
 402e5bc:	df000b04 	addi	fp,sp,44
 402e5c0:	e13ffc15 	stw	r4,-16(fp)
 402e5c4:	e17ffd15 	stw	r5,-12(fp)
 402e5c8:	e1bffe15 	stw	r6,-8(fp)
 402e5cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402e5d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402e5d4:	e0bffd17 	ldw	r2,-12(fp)
 402e5d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e5dc:	00003706 	br	402e6bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402e5e0:	e0bffc17 	ldw	r2,-16(fp)
 402e5e4:	10800c17 	ldw	r2,48(r2)
 402e5e8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 402e5ec:	e0bffc17 	ldw	r2,-16(fp)
 402e5f0:	10800d17 	ldw	r2,52(r2)
 402e5f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402e5f8:	e0fff917 	ldw	r3,-28(fp)
 402e5fc:	e0bff517 	ldw	r2,-44(fp)
 402e600:	1880062e 	bgeu	r3,r2,402e61c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402e604:	e0fff517 	ldw	r3,-44(fp)
 402e608:	e0bff917 	ldw	r2,-28(fp)
 402e60c:	1885c83a 	sub	r2,r3,r2
 402e610:	10bfffc4 	addi	r2,r2,-1
 402e614:	e0bff615 	stw	r2,-40(fp)
 402e618:	00000b06 	br	402e648 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 402e61c:	e0bff517 	ldw	r2,-44(fp)
 402e620:	10000526 	beq	r2,zero,402e638 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402e624:	00c20004 	movi	r3,2048
 402e628:	e0bff917 	ldw	r2,-28(fp)
 402e62c:	1885c83a 	sub	r2,r3,r2
 402e630:	e0bff615 	stw	r2,-40(fp)
 402e634:	00000406 	br	402e648 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402e638:	00c1ffc4 	movi	r3,2047
 402e63c:	e0bff917 	ldw	r2,-28(fp)
 402e640:	1885c83a 	sub	r2,r3,r2
 402e644:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e648:	e0bff617 	ldw	r2,-40(fp)
 402e64c:	10001e26 	beq	r2,zero,402e6c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402e650:	e0fffe17 	ldw	r3,-8(fp)
 402e654:	e0bff617 	ldw	r2,-40(fp)
 402e658:	1880022e 	bgeu	r3,r2,402e664 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 402e65c:	e0bffe17 	ldw	r2,-8(fp)
 402e660:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402e664:	e0bffc17 	ldw	r2,-16(fp)
 402e668:	10c20e04 	addi	r3,r2,2104
 402e66c:	e0bff917 	ldw	r2,-28(fp)
 402e670:	1885883a 	add	r2,r3,r2
 402e674:	e1bff617 	ldw	r6,-40(fp)
 402e678:	e17ffd17 	ldw	r5,-12(fp)
 402e67c:	1009883a 	mov	r4,r2
 402e680:	40261b80 	call	40261b8 <memcpy>
      ptr   += n;
 402e684:	e0fffd17 	ldw	r3,-12(fp)
 402e688:	e0bff617 	ldw	r2,-40(fp)
 402e68c:	1885883a 	add	r2,r3,r2
 402e690:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402e694:	e0fffe17 	ldw	r3,-8(fp)
 402e698:	e0bff617 	ldw	r2,-40(fp)
 402e69c:	1885c83a 	sub	r2,r3,r2
 402e6a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e6a4:	e0fff917 	ldw	r3,-28(fp)
 402e6a8:	e0bff617 	ldw	r2,-40(fp)
 402e6ac:	1885883a 	add	r2,r3,r2
 402e6b0:	10c1ffcc 	andi	r3,r2,2047
 402e6b4:	e0bffc17 	ldw	r2,-16(fp)
 402e6b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e6bc:	e0bffe17 	ldw	r2,-8(fp)
 402e6c0:	00bfc716 	blt	zero,r2,402e5e0 <__alt_data_end+0xfffee5e0>
 402e6c4:	00000106 	br	402e6cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402e6c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e6cc:	0005303a 	rdctl	r2,status
 402e6d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e6d4:	e0fffb17 	ldw	r3,-20(fp)
 402e6d8:	00bfff84 	movi	r2,-2
 402e6dc:	1884703a 	and	r2,r3,r2
 402e6e0:	1001703a 	wrctl	status,r2
  
  return context;
 402e6e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402e6e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e6ec:	e0bffc17 	ldw	r2,-16(fp)
 402e6f0:	10800817 	ldw	r2,32(r2)
 402e6f4:	10c00094 	ori	r3,r2,2
 402e6f8:	e0bffc17 	ldw	r2,-16(fp)
 402e6fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e700:	e0bffc17 	ldw	r2,-16(fp)
 402e704:	10800017 	ldw	r2,0(r2)
 402e708:	10800104 	addi	r2,r2,4
 402e70c:	1007883a 	mov	r3,r2
 402e710:	e0bffc17 	ldw	r2,-16(fp)
 402e714:	10800817 	ldw	r2,32(r2)
 402e718:	18800035 	stwio	r2,0(r3)
 402e71c:	e0bffa17 	ldw	r2,-24(fp)
 402e720:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e724:	e0bff817 	ldw	r2,-32(fp)
 402e728:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402e72c:	e0bffe17 	ldw	r2,-8(fp)
 402e730:	0080100e 	bge	zero,r2,402e774 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402e734:	e0bfff17 	ldw	r2,-4(fp)
 402e738:	1090000c 	andi	r2,r2,16384
 402e73c:	1000101e 	bne	r2,zero,402e780 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402e740:	0001883a 	nop
 402e744:	e0bffc17 	ldw	r2,-16(fp)
 402e748:	10c00d17 	ldw	r3,52(r2)
 402e74c:	e0bff517 	ldw	r2,-44(fp)
 402e750:	1880051e 	bne	r3,r2,402e768 <altera_avalon_jtag_uart_write+0x1b8>
 402e754:	e0bffc17 	ldw	r2,-16(fp)
 402e758:	10c00917 	ldw	r3,36(r2)
 402e75c:	e0bffc17 	ldw	r2,-16(fp)
 402e760:	10800117 	ldw	r2,4(r2)
 402e764:	18bff736 	bltu	r3,r2,402e744 <__alt_data_end+0xfffee744>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 402e768:	e0bffc17 	ldw	r2,-16(fp)
 402e76c:	10800917 	ldw	r2,36(r2)
 402e770:	1000051e 	bne	r2,zero,402e788 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 402e774:	e0bffe17 	ldw	r2,-8(fp)
 402e778:	00bfd016 	blt	zero,r2,402e6bc <__alt_data_end+0xfffee6bc>
 402e77c:	00000306 	br	402e78c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402e780:	0001883a 	nop
 402e784:	00000106 	br	402e78c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 402e788:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 402e78c:	e0fffd17 	ldw	r3,-12(fp)
 402e790:	e0bff717 	ldw	r2,-36(fp)
 402e794:	18800426 	beq	r3,r2,402e7a8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 402e798:	e0fffd17 	ldw	r3,-12(fp)
 402e79c:	e0bff717 	ldw	r2,-36(fp)
 402e7a0:	1885c83a 	sub	r2,r3,r2
 402e7a4:	00000606 	br	402e7c0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 402e7a8:	e0bfff17 	ldw	r2,-4(fp)
 402e7ac:	1090000c 	andi	r2,r2,16384
 402e7b0:	10000226 	beq	r2,zero,402e7bc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 402e7b4:	00bffd44 	movi	r2,-11
 402e7b8:	00000106 	br	402e7c0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 402e7bc:	00bffec4 	movi	r2,-5
}
 402e7c0:	e037883a 	mov	sp,fp
 402e7c4:	dfc00117 	ldw	ra,4(sp)
 402e7c8:	df000017 	ldw	fp,0(sp)
 402e7cc:	dec00204 	addi	sp,sp,8
 402e7d0:	f800283a 	ret

0402e7d4 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 402e7d4:	defffd04 	addi	sp,sp,-12
 402e7d8:	df000215 	stw	fp,8(sp)
 402e7dc:	df000204 	addi	fp,sp,8
 402e7e0:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 402e7e4:	008e84b4 	movhi	r2,14866
 402e7e8:	10ac1144 	addi	r2,r2,-20411
 402e7ec:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 402e7f0:	e0bfff17 	ldw	r2,-4(fp)
 402e7f4:	10800a17 	ldw	r2,40(r2)
 402e7f8:	10800104 	addi	r2,r2,4
 402e7fc:	1007883a 	mov	r3,r2
 402e800:	e0bffe17 	ldw	r2,-8(fp)
 402e804:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 402e808:	e0bfff17 	ldw	r2,-4(fp)
 402e80c:	10800a17 	ldw	r2,40(r2)
 402e810:	10800104 	addi	r2,r2,4
 402e814:	10800037 	ldwio	r2,0(r2)
 402e818:	1007883a 	mov	r3,r2
 402e81c:	e0bffe17 	ldw	r2,-8(fp)
 402e820:	1880081e 	bne	r3,r2,402e844 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 402e824:	e0bfff17 	ldw	r2,-4(fp)
 402e828:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 402e82c:	e0bfff17 	ldw	r2,-4(fp)
 402e830:	10800a17 	ldw	r2,40(r2)
 402e834:	10800104 	addi	r2,r2,4
 402e838:	0007883a 	mov	r3,zero
 402e83c:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 402e840:	00000306 	br	402e850 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 402e844:	e0bfff17 	ldw	r2,-4(fp)
 402e848:	00c00044 	movi	r3,1
 402e84c:	10c00f15 	stw	r3,60(r2)
    }
}
 402e850:	0001883a 	nop
 402e854:	e037883a 	mov	sp,fp
 402e858:	df000017 	ldw	fp,0(sp)
 402e85c:	dec00104 	addi	sp,sp,4
 402e860:	f800283a 	ret

0402e864 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 402e864:	defffc04 	addi	sp,sp,-16
 402e868:	df000315 	stw	fp,12(sp)
 402e86c:	df000304 	addi	fp,sp,12
 402e870:	e13ffe15 	stw	r4,-8(fp)
 402e874:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 402e878:	e0bfff17 	ldw	r2,-4(fp)
 402e87c:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 402e880:	e0bffd17 	ldw	r2,-12(fp)
 402e884:	10001026 	beq	r2,zero,402e8c8 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 402e888:	e0bffe17 	ldw	r2,-8(fp)
 402e88c:	10800a17 	ldw	r2,40(r2)
 402e890:	10800104 	addi	r2,r2,4
 402e894:	1007883a 	mov	r3,r2
 402e898:	e0bffd17 	ldw	r2,-12(fp)
 402e89c:	10800104 	addi	r2,r2,4
 402e8a0:	10800017 	ldw	r2,0(r2)
 402e8a4:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 402e8a8:	e0bffe17 	ldw	r2,-8(fp)
 402e8ac:	10800a17 	ldw	r2,40(r2)
 402e8b0:	1007883a 	mov	r3,r2
 402e8b4:	e0bffd17 	ldw	r2,-12(fp)
 402e8b8:	10800017 	ldw	r2,0(r2)
 402e8bc:	18800035 	stwio	r2,0(r3)
        return 0;
 402e8c0:	0005883a 	mov	r2,zero
 402e8c4:	00000106 	br	402e8cc <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 402e8c8:	00bffa84 	movi	r2,-22
}
 402e8cc:	e037883a 	mov	sp,fp
 402e8d0:	df000017 	ldw	fp,0(sp)
 402e8d4:	dec00104 	addi	sp,sp,4
 402e8d8:	f800283a 	ret

0402e8dc <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 402e8dc:	defff604 	addi	sp,sp,-40
 402e8e0:	dfc00915 	stw	ra,36(sp)
 402e8e4:	df000815 	stw	fp,32(sp)
 402e8e8:	df000804 	addi	fp,sp,32
 402e8ec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402e8f0:	e0bfff17 	ldw	r2,-4(fp)
 402e8f4:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 402e8f8:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 402e8fc:	e0bff817 	ldw	r2,-32(fp)
 402e900:	10801017 	ldw	r2,64(r2)
 402e904:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402e908:	e0bff817 	ldw	r2,-32(fp)
 402e90c:	10800a17 	ldw	r2,40(r2)
 402e910:	10800304 	addi	r2,r2,12
 402e914:	10800037 	ldwio	r2,0(r2)
 402e918:	1007883a 	mov	r3,r2
 402e91c:	00bfff44 	movi	r2,-3
 402e920:	1884703a 	and	r2,r3,r2
 402e924:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e928:	e0bff817 	ldw	r2,-32(fp)
 402e92c:	10800a17 	ldw	r2,40(r2)
 402e930:	10800304 	addi	r2,r2,12
 402e934:	1007883a 	mov	r3,r2
 402e938:	e0bffb17 	ldw	r2,-20(fp)
 402e93c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 402e940:	e0bffa17 	ldw	r2,-24(fp)
 402e944:	10002d26 	beq	r2,zero,402e9fc <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 402e948:	e0bff817 	ldw	r2,-32(fp)
 402e94c:	10800a17 	ldw	r2,40(r2)
 402e950:	10800104 	addi	r2,r2,4
 402e954:	1007883a 	mov	r3,r2
 402e958:	e0bffa17 	ldw	r2,-24(fp)
 402e95c:	10800104 	addi	r2,r2,4
 402e960:	10800017 	ldw	r2,0(r2)
 402e964:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 402e968:	e0bff817 	ldw	r2,-32(fp)
 402e96c:	10800a17 	ldw	r2,40(r2)
 402e970:	1007883a 	mov	r3,r2
 402e974:	e0bffa17 	ldw	r2,-24(fp)
 402e978:	10800017 	ldw	r2,0(r2)
 402e97c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e980:	e0bff817 	ldw	r2,-32(fp)
 402e984:	10800a17 	ldw	r2,40(r2)
 402e988:	10800204 	addi	r2,r2,8
 402e98c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402e990:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e994:	1005d07a 	srai	r2,r2,1
 402e998:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 402e99c:	e0bff817 	ldw	r2,-32(fp)
 402e9a0:	10800d17 	ldw	r2,52(r2)
 402e9a4:	10001126 	beq	r2,zero,402e9ec <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e9a8:	0005303a 	rdctl	r2,status
 402e9ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e9b0:	e0fffd17 	ldw	r3,-12(fp)
 402e9b4:	00bfff84 	movi	r2,-2
 402e9b8:	1884703a 	and	r2,r3,r2
 402e9bc:	1001703a 	wrctl	status,r2
  
  return context;
 402e9c0:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 402e9c4:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 402e9c8:	e0bff817 	ldw	r2,-32(fp)
 402e9cc:	10800d17 	ldw	r2,52(r2)
 402e9d0:	e17ff917 	ldw	r5,-28(fp)
 402e9d4:	e13ffa17 	ldw	r4,-24(fp)
 402e9d8:	103ee83a 	callr	r2
 402e9dc:	e0bffc17 	ldw	r2,-16(fp)
 402e9e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e9e4:	e0bffe17 	ldw	r2,-8(fp)
 402e9e8:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402e9ec:	e0bff817 	ldw	r2,-32(fp)
 402e9f0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 402e9f4:	e0bff817 	ldw	r2,-32(fp)
 402e9f8:	10001105 	stb	zero,68(r2)
    }
}
 402e9fc:	0001883a 	nop
 402ea00:	e037883a 	mov	sp,fp
 402ea04:	dfc00117 	ldw	ra,4(sp)
 402ea08:	df000017 	ldw	fp,0(sp)
 402ea0c:	dec00204 	addi	sp,sp,8
 402ea10:	f800283a 	ret

0402ea14 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 402ea14:	defff704 	addi	sp,sp,-36
 402ea18:	dfc00815 	stw	ra,32(sp)
 402ea1c:	df000715 	stw	fp,28(sp)
 402ea20:	df000704 	addi	fp,sp,28
 402ea24:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402ea28:	e0bfff17 	ldw	r2,-4(fp)
 402ea2c:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402ea30:	e0bff917 	ldw	r2,-28(fp)
 402ea34:	10800a17 	ldw	r2,40(r2)
 402ea38:	10800104 	addi	r2,r2,4
 402ea3c:	10800037 	ldwio	r2,0(r2)
 402ea40:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402ea44:	e0bff917 	ldw	r2,-28(fp)
 402ea48:	10800a17 	ldw	r2,40(r2)
 402ea4c:	10800037 	ldwio	r2,0(r2)
 402ea50:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 402ea54:	e0bff917 	ldw	r2,-28(fp)
 402ea58:	10800e17 	ldw	r2,56(r2)
 402ea5c:	10001126 	beq	r2,zero,402eaa4 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ea60:	0005303a 	rdctl	r2,status
 402ea64:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ea68:	e0fffb17 	ldw	r3,-20(fp)
 402ea6c:	00bfff84 	movi	r2,-2
 402ea70:	1884703a 	and	r2,r3,r2
 402ea74:	1001703a 	wrctl	status,r2
  
  return context;
 402ea78:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 402ea7c:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 402ea80:	e0bff917 	ldw	r2,-28(fp)
 402ea84:	10800e17 	ldw	r2,56(r2)
 402ea88:	e0fffd04 	addi	r3,fp,-12
 402ea8c:	1809883a 	mov	r4,r3
 402ea90:	103ee83a 	callr	r2
 402ea94:	e0bffa17 	ldw	r2,-24(fp)
 402ea98:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ea9c:	e0bffc17 	ldw	r2,-16(fp)
 402eaa0:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 402eaa4:	0001883a 	nop
 402eaa8:	e037883a 	mov	sp,fp
 402eaac:	dfc00117 	ldw	ra,4(sp)
 402eab0:	df000017 	ldw	fp,0(sp)
 402eab4:	dec00204 	addi	sp,sp,8
 402eab8:	f800283a 	ret

0402eabc <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 402eabc:	defffb04 	addi	sp,sp,-20
 402eac0:	dfc00415 	stw	ra,16(sp)
 402eac4:	df000315 	stw	fp,12(sp)
 402eac8:	df000304 	addi	fp,sp,12
 402eacc:	e13ffd15 	stw	r4,-12(fp)
 402ead0:	e17ffe15 	stw	r5,-8(fp)
 402ead4:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 402ead8:	d1600e04 	addi	r5,gp,-32712
 402eadc:	e13ffd17 	ldw	r4,-12(fp)
 402eae0:	402f3f40 	call	402f3f4 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 402eae4:	e0ffff17 	ldw	r3,-4(fp)
 402eae8:	e0bffd17 	ldw	r2,-12(fp)
 402eaec:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 402eaf0:	e0fffe17 	ldw	r3,-8(fp)
 402eaf4:	e0bffd17 	ldw	r2,-12(fp)
 402eaf8:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 402eafc:	e0bffd17 	ldw	r2,-12(fp)
 402eb00:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 402eb04:	e0bffd17 	ldw	r2,-12(fp)
 402eb08:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 402eb0c:	e0bffd17 	ldw	r2,-12(fp)
 402eb10:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 402eb14:	e13ffd17 	ldw	r4,-12(fp)
 402eb18:	402e7d40 	call	402e7d4 <altera_avalon_mailbox_identify>
}
 402eb1c:	0001883a 	nop
 402eb20:	e037883a 	mov	sp,fp
 402eb24:	dfc00117 	ldw	ra,4(sp)
 402eb28:	df000017 	ldw	fp,0(sp)
 402eb2c:	dec00204 	addi	sp,sp,8
 402eb30:	f800283a 	ret

0402eb34 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 402eb34:	defff804 	addi	sp,sp,-32
 402eb38:	dfc00715 	stw	ra,28(sp)
 402eb3c:	df000615 	stw	fp,24(sp)
 402eb40:	df000604 	addi	fp,sp,24
 402eb44:	e13ffd15 	stw	r4,-12(fp)
 402eb48:	e17ffe15 	stw	r5,-8(fp)
 402eb4c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 402eb50:	d1600e04 	addi	r5,gp,-32712
 402eb54:	e13ffd17 	ldw	r4,-12(fp)
 402eb58:	402f5580 	call	402f558 <alt_find_dev>
 402eb5c:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 402eb60:	e0bffb17 	ldw	r2,-20(fp)
 402eb64:	1000021e 	bne	r2,zero,402eb70 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 402eb68:	0005883a 	mov	r2,zero
 402eb6c:	00006506 	br	402ed04 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402eb70:	e0bffb17 	ldw	r2,-20(fp)
 402eb74:	10800a17 	ldw	r2,40(r2)
 402eb78:	10800304 	addi	r2,r2,12
 402eb7c:	10800037 	ldwio	r2,0(r2)
 402eb80:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 402eb84:	e0bffb17 	ldw	r2,-20(fp)
 402eb88:	10800f17 	ldw	r2,60(r2)
 402eb8c:	1000081e 	bne	r2,zero,402ebb0 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402eb90:	e0bffb17 	ldw	r2,-20(fp)
 402eb94:	10800a17 	ldw	r2,40(r2)
 402eb98:	10800304 	addi	r2,r2,12
 402eb9c:	1009883a 	mov	r4,r2
 402eba0:	e0fffc17 	ldw	r3,-16(fp)
 402eba4:	00bfff44 	movi	r2,-3
 402eba8:	1884703a 	and	r2,r3,r2
 402ebac:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 402ebb0:	e0bffb17 	ldw	r2,-20(fp)
 402ebb4:	10800f17 	ldw	r2,60(r2)
 402ebb8:	10800058 	cmpnei	r2,r2,1
 402ebbc:	1000081e 	bne	r2,zero,402ebe0 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402ebc0:	e0bffb17 	ldw	r2,-20(fp)
 402ebc4:	10800a17 	ldw	r2,40(r2)
 402ebc8:	10800304 	addi	r2,r2,12
 402ebcc:	1009883a 	mov	r4,r2
 402ebd0:	e0fffc17 	ldw	r3,-16(fp)
 402ebd4:	00bfff84 	movi	r2,-2
 402ebd8:	1884703a 	and	r2,r3,r2
 402ebdc:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 402ebe0:	e0bffb17 	ldw	r2,-20(fp)
 402ebe4:	10800b17 	ldw	r2,44(r2)
 402ebe8:	10bfffd8 	cmpnei	r2,r2,-1
 402ebec:	1000021e 	bne	r2,zero,402ebf8 <altera_avalon_mailbox_open+0xc4>
        return dev;
 402ebf0:	e0bffb17 	ldw	r2,-20(fp)
 402ebf4:	00004306 	br	402ed04 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 402ebf8:	e0bffe17 	ldw	r2,-8(fp)
 402ebfc:	1000041e 	bne	r2,zero,402ec10 <altera_avalon_mailbox_open+0xdc>
 402ec00:	e0bfff17 	ldw	r2,-4(fp)
 402ec04:	1000021e 	bne	r2,zero,402ec10 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 402ec08:	e0bffb17 	ldw	r2,-20(fp)
 402ec0c:	00003d06 	br	402ed04 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402ec10:	e0bffb17 	ldw	r2,-20(fp)
 402ec14:	10800f17 	ldw	r2,60(r2)
 402ec18:	1000021e 	bne	r2,zero,402ec24 <altera_avalon_mailbox_open+0xf0>
 402ec1c:	e0bfff17 	ldw	r2,-4(fp)
 402ec20:	1000061e 	bne	r2,zero,402ec3c <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402ec24:	e0bffb17 	ldw	r2,-20(fp)
 402ec28:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402ec2c:	10800058 	cmpnei	r2,r2,1
 402ec30:	1000041e 	bne	r2,zero,402ec44 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402ec34:	e0bffe17 	ldw	r2,-8(fp)
 402ec38:	10000226 	beq	r2,zero,402ec44 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 402ec3c:	0005883a 	mov	r2,zero
 402ec40:	00003006 	br	402ed04 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 402ec44:	e0bffb17 	ldw	r2,-20(fp)
 402ec48:	e0fffe17 	ldw	r3,-8(fp)
 402ec4c:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 402ec50:	e0bffb17 	ldw	r2,-20(fp)
 402ec54:	e0ffff17 	ldw	r3,-4(fp)
 402ec58:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 402ec5c:	e0bffb17 	ldw	r2,-20(fp)
 402ec60:	10800f17 	ldw	r2,60(r2)
 402ec64:	10000b1e 	bne	r2,zero,402ec94 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 402ec68:	e0bffb17 	ldw	r2,-20(fp)
 402ec6c:	10c00c17 	ldw	r3,48(r2)
 402ec70:	e0bffb17 	ldw	r2,-20(fp)
 402ec74:	10800b17 	ldw	r2,44(r2)
 402ec78:	d8000015 	stw	zero,0(sp)
 402ec7c:	e1fffb17 	ldw	r7,-20(fp)
 402ec80:	018100f4 	movhi	r6,1027
 402ec84:	31ba3704 	addi	r6,r6,-5924
 402ec88:	100b883a 	mov	r5,r2
 402ec8c:	1809883a 	mov	r4,r3
 402ec90:	402d2780 	call	402d278 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 402ec94:	e0bffb17 	ldw	r2,-20(fp)
 402ec98:	10800f17 	ldw	r2,60(r2)
 402ec9c:	10800058 	cmpnei	r2,r2,1
 402eca0:	1000171e 	bne	r2,zero,402ed00 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 402eca4:	e0bffb17 	ldw	r2,-20(fp)
 402eca8:	10c00c17 	ldw	r3,48(r2)
 402ecac:	e0bffb17 	ldw	r2,-20(fp)
 402ecb0:	10800b17 	ldw	r2,44(r2)
 402ecb4:	d8000015 	stw	zero,0(sp)
 402ecb8:	e1fffb17 	ldw	r7,-20(fp)
 402ecbc:	018100f4 	movhi	r6,1027
 402ecc0:	31ba8504 	addi	r6,r6,-5612
 402ecc4:	100b883a 	mov	r5,r2
 402ecc8:	1809883a 	mov	r4,r3
 402eccc:	402d2780 	call	402d278 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402ecd0:	e0bffb17 	ldw	r2,-20(fp)
 402ecd4:	10800a17 	ldw	r2,40(r2)
 402ecd8:	10800304 	addi	r2,r2,12
 402ecdc:	10800037 	ldwio	r2,0(r2)
 402ece0:	10800054 	ori	r2,r2,1
 402ece4:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ece8:	e0bffb17 	ldw	r2,-20(fp)
 402ecec:	10800a17 	ldw	r2,40(r2)
 402ecf0:	10800304 	addi	r2,r2,12
 402ecf4:	1007883a 	mov	r3,r2
 402ecf8:	e0bffc17 	ldw	r2,-16(fp)
 402ecfc:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 402ed00:	e0bffb17 	ldw	r2,-20(fp)
}
 402ed04:	e037883a 	mov	sp,fp
 402ed08:	dfc00117 	ldw	ra,4(sp)
 402ed0c:	df000017 	ldw	fp,0(sp)
 402ed10:	dec00204 	addi	sp,sp,8
 402ed14:	f800283a 	ret

0402ed18 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 402ed18:	defffb04 	addi	sp,sp,-20
 402ed1c:	dfc00415 	stw	ra,16(sp)
 402ed20:	df000315 	stw	fp,12(sp)
 402ed24:	df000304 	addi	fp,sp,12
 402ed28:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 402ed2c:	e0bfff17 	ldw	r2,-4(fp)
 402ed30:	10003926 	beq	r2,zero,402ee18 <altera_avalon_mailbox_close+0x100>
 402ed34:	e0bfff17 	ldw	r2,-4(fp)
 402ed38:	10800b17 	ldw	r2,44(r2)
 402ed3c:	10bfffe0 	cmpeqi	r2,r2,-1
 402ed40:	1000351e 	bne	r2,zero,402ee18 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 402ed44:	e0bfff17 	ldw	r2,-4(fp)
 402ed48:	10800f17 	ldw	r2,60(r2)
 402ed4c:	10000e1e 	bne	r2,zero,402ed88 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402ed50:	e0bfff17 	ldw	r2,-4(fp)
 402ed54:	10800a17 	ldw	r2,40(r2)
 402ed58:	10800304 	addi	r2,r2,12
 402ed5c:	10800037 	ldwio	r2,0(r2)
 402ed60:	1007883a 	mov	r3,r2
 402ed64:	00bfff44 	movi	r2,-3
 402ed68:	1884703a 	and	r2,r3,r2
 402ed6c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ed70:	e0bfff17 	ldw	r2,-4(fp)
 402ed74:	10800a17 	ldw	r2,40(r2)
 402ed78:	10800304 	addi	r2,r2,12
 402ed7c:	1007883a 	mov	r3,r2
 402ed80:	e0bffe17 	ldw	r2,-8(fp)
 402ed84:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 402ed88:	e0bfff17 	ldw	r2,-4(fp)
 402ed8c:	10800f17 	ldw	r2,60(r2)
 402ed90:	10800058 	cmpnei	r2,r2,1
 402ed94:	10000e1e 	bne	r2,zero,402edd0 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402ed98:	e0bfff17 	ldw	r2,-4(fp)
 402ed9c:	10800a17 	ldw	r2,40(r2)
 402eda0:	10800304 	addi	r2,r2,12
 402eda4:	10800037 	ldwio	r2,0(r2)
 402eda8:	1007883a 	mov	r3,r2
 402edac:	00bfff84 	movi	r2,-2
 402edb0:	1884703a 	and	r2,r3,r2
 402edb4:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402edb8:	e0bfff17 	ldw	r2,-4(fp)
 402edbc:	10800a17 	ldw	r2,40(r2)
 402edc0:	10800304 	addi	r2,r2,12
 402edc4:	1007883a 	mov	r3,r2
 402edc8:	e0bffe17 	ldw	r2,-8(fp)
 402edcc:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 402edd0:	e0bfff17 	ldw	r2,-4(fp)
 402edd4:	10800b17 	ldw	r2,44(r2)
 402edd8:	10bfffe0 	cmpeqi	r2,r2,-1
 402eddc:	10000a1e 	bne	r2,zero,402ee08 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 402ede0:	e0bfff17 	ldw	r2,-4(fp)
 402ede4:	10c00c17 	ldw	r3,48(r2)
 402ede8:	e0bfff17 	ldw	r2,-4(fp)
 402edec:	10800b17 	ldw	r2,44(r2)
 402edf0:	d8000015 	stw	zero,0(sp)
 402edf4:	e1ffff17 	ldw	r7,-4(fp)
 402edf8:	000d883a 	mov	r6,zero
 402edfc:	100b883a 	mov	r5,r2
 402ee00:	1809883a 	mov	r4,r3
 402ee04:	402d2780 	call	402d278 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 402ee08:	e0bfff17 	ldw	r2,-4(fp)
 402ee0c:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 402ee10:	e0bfff17 	ldw	r2,-4(fp)
 402ee14:	10000e15 	stw	zero,56(r2)
    }
}
 402ee18:	0001883a 	nop
 402ee1c:	e037883a 	mov	sp,fp
 402ee20:	dfc00117 	ldw	ra,4(sp)
 402ee24:	df000017 	ldw	fp,0(sp)
 402ee28:	dec00204 	addi	sp,sp,8
 402ee2c:	f800283a 	ret

0402ee30 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 402ee30:	defffd04 	addi	sp,sp,-12
 402ee34:	df000215 	stw	fp,8(sp)
 402ee38:	df000204 	addi	fp,sp,8
 402ee3c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 402ee40:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 402ee44:	e0bfff17 	ldw	r2,-4(fp)
 402ee48:	10800a17 	ldw	r2,40(r2)
 402ee4c:	10800204 	addi	r2,r2,8
 402ee50:	10800037 	ldwio	r2,0(r2)
 402ee54:	108000cc 	andi	r2,r2,3
 402ee58:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 402ee5c:	e0bfff17 	ldw	r2,-4(fp)
 402ee60:	10800f17 	ldw	r2,60(r2)
 402ee64:	1000041e 	bne	r2,zero,402ee78 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402ee68:	e0bffe17 	ldw	r2,-8(fp)
 402ee6c:	1080008c 	andi	r2,r2,2
 402ee70:	1004d07a 	srli	r2,r2,1
 402ee74:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 402ee78:	e0bfff17 	ldw	r2,-4(fp)
 402ee7c:	10800f17 	ldw	r2,60(r2)
 402ee80:	10800058 	cmpnei	r2,r2,1
 402ee84:	1000031e 	bne	r2,zero,402ee94 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 402ee88:	e0bffe17 	ldw	r2,-8(fp)
 402ee8c:	1080004c 	andi	r2,r2,1
 402ee90:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 402ee94:	e0bffe17 	ldw	r2,-8(fp)
}
 402ee98:	e037883a 	mov	sp,fp
 402ee9c:	df000017 	ldw	fp,0(sp)
 402eea0:	dec00104 	addi	sp,sp,4
 402eea4:	f800283a 	ret

0402eea8 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 402eea8:	defff704 	addi	sp,sp,-36
 402eeac:	dfc00815 	stw	ra,32(sp)
 402eeb0:	df000715 	stw	fp,28(sp)
 402eeb4:	df000704 	addi	fp,sp,28
 402eeb8:	e13ffc15 	stw	r4,-16(fp)
 402eebc:	e17ffd15 	stw	r5,-12(fp)
 402eec0:	e1bffe15 	stw	r6,-8(fp)
 402eec4:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 402eec8:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402eecc:	e0bffc17 	ldw	r2,-16(fp)
 402eed0:	10801103 	ldbu	r2,68(r2)
 402eed4:	10803fcc 	andi	r2,r2,255
 402eed8:	1000061e 	bne	r2,zero,402eef4 <altera_avalon_mailbox_send+0x4c>
 402eedc:	e0bffc17 	ldw	r2,-16(fp)
 402eee0:	10800a17 	ldw	r2,40(r2)
 402eee4:	10800204 	addi	r2,r2,8
 402eee8:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 402eeec:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402eef0:	10000226 	beq	r2,zero,402eefc <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 402eef4:	00bfffc4 	movi	r2,-1
 402eef8:	00003a06 	br	402efe4 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 402eefc:	e0bffc17 	ldw	r2,-16(fp)
 402ef00:	e0fffd17 	ldw	r3,-12(fp)
 402ef04:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 402ef08:	e0bffc17 	ldw	r2,-16(fp)
 402ef0c:	00c00044 	movi	r3,1
 402ef10:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 402ef14:	e0bffc17 	ldw	r2,-16(fp)
 402ef18:	10800b17 	ldw	r2,44(r2)
 402ef1c:	10bfffe0 	cmpeqi	r2,r2,-1
 402ef20:	1000031e 	bne	r2,zero,402ef30 <altera_avalon_mailbox_send+0x88>
 402ef24:	e0bfff17 	ldw	r2,-4(fp)
 402ef28:	10800058 	cmpnei	r2,r2,1
 402ef2c:	1000201e 	bne	r2,zero,402efb0 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 402ef30:	e0bffe17 	ldw	r2,-8(fp)
 402ef34:	1000061e 	bne	r2,zero,402ef50 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402ef38:	e13ffc17 	ldw	r4,-16(fp)
 402ef3c:	402ee300 	call	402ee30 <altera_avalon_mailbox_status>
 402ef40:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 402ef44:	e0bffb17 	ldw	r2,-20(fp)
 402ef48:	103ffb1e 	bne	r2,zero,402ef38 <__alt_data_end+0xfffeef38>
 402ef4c:	00000e06 	br	402ef88 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402ef50:	e13ffc17 	ldw	r4,-16(fp)
 402ef54:	402ee300 	call	402ee30 <altera_avalon_mailbox_status>
 402ef58:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 402ef5c:	e0bffe17 	ldw	r2,-8(fp)
 402ef60:	10bfffc4 	addi	r2,r2,-1
 402ef64:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 402ef68:	e0bffb17 	ldw	r2,-20(fp)
 402ef6c:	10000226 	beq	r2,zero,402ef78 <altera_avalon_mailbox_send+0xd0>
 402ef70:	e0bffe17 	ldw	r2,-8(fp)
 402ef74:	103ff61e 	bne	r2,zero,402ef50 <__alt_data_end+0xfffeef50>
            if (timeout == 0)
 402ef78:	e0bffe17 	ldw	r2,-8(fp)
 402ef7c:	1000021e 	bne	r2,zero,402ef88 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 402ef80:	00bff084 	movi	r2,-62
 402ef84:	00001706 	br	402efe4 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 402ef88:	e17ffd17 	ldw	r5,-12(fp)
 402ef8c:	e13ffc17 	ldw	r4,-16(fp)
 402ef90:	402e8640 	call	402e864 <altera_avalon_mailbox_post>
 402ef94:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402ef98:	e0bffc17 	ldw	r2,-16(fp)
 402ef9c:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 402efa0:	e0bffc17 	ldw	r2,-16(fp)
 402efa4:	10001105 	stb	zero,68(r2)
        return status;
 402efa8:	e0bff917 	ldw	r2,-28(fp)
 402efac:	00000d06 	br	402efe4 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402efb0:	e0bffc17 	ldw	r2,-16(fp)
 402efb4:	10800a17 	ldw	r2,40(r2)
 402efb8:	10800304 	addi	r2,r2,12
 402efbc:	10800037 	ldwio	r2,0(r2)
 402efc0:	10800094 	ori	r2,r2,2
 402efc4:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402efc8:	e0bffc17 	ldw	r2,-16(fp)
 402efcc:	10800a17 	ldw	r2,40(r2)
 402efd0:	10800304 	addi	r2,r2,12
 402efd4:	1007883a 	mov	r3,r2
 402efd8:	e0bffa17 	ldw	r2,-24(fp)
 402efdc:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 402efe0:	0005883a 	mov	r2,zero
}
 402efe4:	e037883a 	mov	sp,fp
 402efe8:	dfc00117 	ldw	ra,4(sp)
 402efec:	df000017 	ldw	fp,0(sp)
 402eff0:	dec00204 	addi	sp,sp,8
 402eff4:	f800283a 	ret

0402eff8 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 402eff8:	defff904 	addi	sp,sp,-28
 402effc:	dfc00615 	stw	ra,24(sp)
 402f000:	df000515 	stw	fp,20(sp)
 402f004:	df000504 	addi	fp,sp,20
 402f008:	e13ffd15 	stw	r4,-12(fp)
 402f00c:	e17ffe15 	stw	r5,-8(fp)
 402f010:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 402f014:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 402f018:	e0bffd17 	ldw	r2,-12(fp)
 402f01c:	10003a26 	beq	r2,zero,402f108 <altera_avalon_mailbox_retrieve_poll+0x110>
 402f020:	e0bffe17 	ldw	r2,-8(fp)
 402f024:	10003826 	beq	r2,zero,402f108 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402f028:	e0bffd17 	ldw	r2,-12(fp)
 402f02c:	10800a17 	ldw	r2,40(r2)
 402f030:	10800304 	addi	r2,r2,12
 402f034:	10800037 	ldwio	r2,0(r2)
 402f038:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 402f03c:	e0bffd17 	ldw	r2,-12(fp)
 402f040:	10800a17 	ldw	r2,40(r2)
 402f044:	10800304 	addi	r2,r2,12
 402f048:	1009883a 	mov	r4,r2
 402f04c:	e0fffc17 	ldw	r3,-16(fp)
 402f050:	00bfff84 	movi	r2,-2
 402f054:	1884703a 	and	r2,r3,r2
 402f058:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 402f05c:	e0bfff17 	ldw	r2,-4(fp)
 402f060:	1000061e 	bne	r2,zero,402f07c <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 402f064:	e13ffd17 	ldw	r4,-12(fp)
 402f068:	402ee300 	call	402ee30 <altera_avalon_mailbox_status>
 402f06c:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 402f070:	e0bffb17 	ldw	r2,-20(fp)
 402f074:	103ffb26 	beq	r2,zero,402f064 <__alt_data_end+0xfffef064>
 402f078:	00000a06 	br	402f0a4 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 402f07c:	e13ffd17 	ldw	r4,-12(fp)
 402f080:	402ee300 	call	402ee30 <altera_avalon_mailbox_status>
 402f084:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 402f088:	e0bfff17 	ldw	r2,-4(fp)
 402f08c:	10bfffc4 	addi	r2,r2,-1
 402f090:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 402f094:	e0bffb17 	ldw	r2,-20(fp)
 402f098:	1000021e 	bne	r2,zero,402f0a4 <altera_avalon_mailbox_retrieve_poll+0xac>
 402f09c:	e0bfff17 	ldw	r2,-4(fp)
 402f0a0:	103ff61e 	bne	r2,zero,402f07c <__alt_data_end+0xfffef07c>
        }

        /* if timeout, status remain 0 */
        if (status)
 402f0a4:	e0bffb17 	ldw	r2,-20(fp)
 402f0a8:	10000d26 	beq	r2,zero,402f0e0 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402f0ac:	e0bffe17 	ldw	r2,-8(fp)
 402f0b0:	10800104 	addi	r2,r2,4
 402f0b4:	e0fffd17 	ldw	r3,-12(fp)
 402f0b8:	18c00a17 	ldw	r3,40(r3)
 402f0bc:	18c00104 	addi	r3,r3,4
 402f0c0:	18c00037 	ldwio	r3,0(r3)
 402f0c4:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402f0c8:	e0bffd17 	ldw	r2,-12(fp)
 402f0cc:	10800a17 	ldw	r2,40(r2)
 402f0d0:	10800037 	ldwio	r2,0(r2)
 402f0d4:	1007883a 	mov	r3,r2
 402f0d8:	e0bffe17 	ldw	r2,-8(fp)
 402f0dc:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f0e0:	e0bffd17 	ldw	r2,-12(fp)
 402f0e4:	10800a17 	ldw	r2,40(r2)
 402f0e8:	10800304 	addi	r2,r2,12
 402f0ec:	1007883a 	mov	r3,r2
 402f0f0:	e0bffc17 	ldw	r2,-16(fp)
 402f0f4:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 402f0f8:	e0bffb17 	ldw	r2,-20(fp)
 402f0fc:	10000226 	beq	r2,zero,402f108 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 402f100:	0005883a 	mov	r2,zero
 402f104:	00000606 	br	402f120 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 402f108:	e0bffe17 	ldw	r2,-8(fp)
 402f10c:	10800104 	addi	r2,r2,4
 402f110:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 402f114:	e0bffe17 	ldw	r2,-8(fp)
 402f118:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 402f11c:	00bffa84 	movi	r2,-22
}
 402f120:	e037883a 	mov	sp,fp
 402f124:	dfc00117 	ldw	ra,4(sp)
 402f128:	df000017 	ldw	fp,0(sp)
 402f12c:	dec00204 	addi	sp,sp,8
 402f130:	f800283a 	ret

0402f134 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402f134:	defff504 	addi	sp,sp,-44
 402f138:	df000a15 	stw	fp,40(sp)
 402f13c:	df000a04 	addi	fp,sp,40
 402f140:	e13ffc15 	stw	r4,-16(fp)
 402f144:	e17ffd15 	stw	r5,-12(fp)
 402f148:	e1bffe15 	stw	r6,-8(fp)
 402f14c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402f150:	e03ff615 	stw	zero,-40(fp)
 402f154:	d0a71817 	ldw	r2,-25504(gp)
  
  if (alt_ticks_per_second ())
 402f158:	10003c26 	beq	r2,zero,402f24c <alt_alarm_start+0x118>
  {
    if (alarm)
 402f15c:	e0bffc17 	ldw	r2,-16(fp)
 402f160:	10003826 	beq	r2,zero,402f244 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 402f164:	e0bffc17 	ldw	r2,-16(fp)
 402f168:	e0fffe17 	ldw	r3,-8(fp)
 402f16c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402f170:	e0bffc17 	ldw	r2,-16(fp)
 402f174:	e0ffff17 	ldw	r3,-4(fp)
 402f178:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f17c:	0005303a 	rdctl	r2,status
 402f180:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f184:	e0fff917 	ldw	r3,-28(fp)
 402f188:	00bfff84 	movi	r2,-2
 402f18c:	1884703a 	and	r2,r3,r2
 402f190:	1001703a 	wrctl	status,r2
  
  return context;
 402f194:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402f198:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 402f19c:	d0a71917 	ldw	r2,-25500(gp)
      
      current_nticks = alt_nticks();
 402f1a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 402f1a4:	e0fffd17 	ldw	r3,-12(fp)
 402f1a8:	e0bff617 	ldw	r2,-40(fp)
 402f1ac:	1885883a 	add	r2,r3,r2
 402f1b0:	10c00044 	addi	r3,r2,1
 402f1b4:	e0bffc17 	ldw	r2,-16(fp)
 402f1b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402f1bc:	e0bffc17 	ldw	r2,-16(fp)
 402f1c0:	10c00217 	ldw	r3,8(r2)
 402f1c4:	e0bff617 	ldw	r2,-40(fp)
 402f1c8:	1880042e 	bgeu	r3,r2,402f1dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 402f1cc:	e0bffc17 	ldw	r2,-16(fp)
 402f1d0:	00c00044 	movi	r3,1
 402f1d4:	10c00405 	stb	r3,16(r2)
 402f1d8:	00000206 	br	402f1e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402f1dc:	e0bffc17 	ldw	r2,-16(fp)
 402f1e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 402f1e4:	e0bffc17 	ldw	r2,-16(fp)
 402f1e8:	d0e01004 	addi	r3,gp,-32704
 402f1ec:	e0fffa15 	stw	r3,-24(fp)
 402f1f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402f1f4:	e0bffb17 	ldw	r2,-20(fp)
 402f1f8:	e0fffa17 	ldw	r3,-24(fp)
 402f1fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402f200:	e0bffa17 	ldw	r2,-24(fp)
 402f204:	10c00017 	ldw	r3,0(r2)
 402f208:	e0bffb17 	ldw	r2,-20(fp)
 402f20c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402f210:	e0bffa17 	ldw	r2,-24(fp)
 402f214:	10800017 	ldw	r2,0(r2)
 402f218:	e0fffb17 	ldw	r3,-20(fp)
 402f21c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f220:	e0bffa17 	ldw	r2,-24(fp)
 402f224:	e0fffb17 	ldw	r3,-20(fp)
 402f228:	10c00015 	stw	r3,0(r2)
 402f22c:	e0bff817 	ldw	r2,-32(fp)
 402f230:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f234:	e0bff717 	ldw	r2,-36(fp)
 402f238:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402f23c:	0005883a 	mov	r2,zero
 402f240:	00000306 	br	402f250 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 402f244:	00bffa84 	movi	r2,-22
 402f248:	00000106 	br	402f250 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402f24c:	00bfde84 	movi	r2,-134
  }
}
 402f250:	e037883a 	mov	sp,fp
 402f254:	df000017 	ldw	fp,0(sp)
 402f258:	dec00104 	addi	sp,sp,4
 402f25c:	f800283a 	ret

0402f260 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 402f260:	defffa04 	addi	sp,sp,-24
 402f264:	dfc00515 	stw	ra,20(sp)
 402f268:	df000415 	stw	fp,16(sp)
 402f26c:	df000404 	addi	fp,sp,16
 402f270:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 402f274:	008000c4 	movi	r2,3
 402f278:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 402f27c:	e0fffd17 	ldw	r3,-12(fp)
 402f280:	008003f4 	movhi	r2,15
 402f284:	10909004 	addi	r2,r2,16960
 402f288:	1885383a 	mul	r2,r3,r2
 402f28c:	100b883a 	mov	r5,r2
 402f290:	0100bef4 	movhi	r4,763
 402f294:	213c2004 	addi	r4,r4,-3968
 402f298:	402a8e80 	call	402a8e8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 402f29c:	100b883a 	mov	r5,r2
 402f2a0:	01200034 	movhi	r4,32768
 402f2a4:	213fffc4 	addi	r4,r4,-1
 402f2a8:	402a8e80 	call	402a8e8 <__udivsi3>
 402f2ac:	100b883a 	mov	r5,r2
 402f2b0:	e13fff17 	ldw	r4,-4(fp)
 402f2b4:	402a8e80 	call	402a8e8 <__udivsi3>
 402f2b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402f2bc:	e0bffe17 	ldw	r2,-8(fp)
 402f2c0:	10002a26 	beq	r2,zero,402f36c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 402f2c4:	e03ffc15 	stw	zero,-16(fp)
 402f2c8:	00001706 	br	402f328 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 402f2cc:	00a00034 	movhi	r2,32768
 402f2d0:	10bfffc4 	addi	r2,r2,-1
 402f2d4:	10bfffc4 	addi	r2,r2,-1
 402f2d8:	103ffe1e 	bne	r2,zero,402f2d4 <__alt_data_end+0xfffef2d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 402f2dc:	e0fffd17 	ldw	r3,-12(fp)
 402f2e0:	008003f4 	movhi	r2,15
 402f2e4:	10909004 	addi	r2,r2,16960
 402f2e8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 402f2ec:	100b883a 	mov	r5,r2
 402f2f0:	0100bef4 	movhi	r4,763
 402f2f4:	213c2004 	addi	r4,r4,-3968
 402f2f8:	402a8e80 	call	402a8e8 <__udivsi3>
 402f2fc:	100b883a 	mov	r5,r2
 402f300:	01200034 	movhi	r4,32768
 402f304:	213fffc4 	addi	r4,r4,-1
 402f308:	402a8e80 	call	402a8e8 <__udivsi3>
 402f30c:	1007883a 	mov	r3,r2
 402f310:	e0bfff17 	ldw	r2,-4(fp)
 402f314:	10c5c83a 	sub	r2,r2,r3
 402f318:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 402f31c:	e0bffc17 	ldw	r2,-16(fp)
 402f320:	10800044 	addi	r2,r2,1
 402f324:	e0bffc15 	stw	r2,-16(fp)
 402f328:	e0fffc17 	ldw	r3,-16(fp)
 402f32c:	e0bffe17 	ldw	r2,-8(fp)
 402f330:	18bfe616 	blt	r3,r2,402f2cc <__alt_data_end+0xfffef2cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f334:	e0fffd17 	ldw	r3,-12(fp)
 402f338:	008003f4 	movhi	r2,15
 402f33c:	10909004 	addi	r2,r2,16960
 402f340:	1885383a 	mul	r2,r3,r2
 402f344:	100b883a 	mov	r5,r2
 402f348:	0100bef4 	movhi	r4,763
 402f34c:	213c2004 	addi	r4,r4,-3968
 402f350:	402a8e80 	call	402a8e8 <__udivsi3>
 402f354:	1007883a 	mov	r3,r2
 402f358:	e0bfff17 	ldw	r2,-4(fp)
 402f35c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f360:	10bfffc4 	addi	r2,r2,-1
 402f364:	103ffe1e 	bne	r2,zero,402f360 <__alt_data_end+0xfffef360>
 402f368:	00000d06 	br	402f3a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f36c:	e0fffd17 	ldw	r3,-12(fp)
 402f370:	008003f4 	movhi	r2,15
 402f374:	10909004 	addi	r2,r2,16960
 402f378:	1885383a 	mul	r2,r3,r2
 402f37c:	100b883a 	mov	r5,r2
 402f380:	0100bef4 	movhi	r4,763
 402f384:	213c2004 	addi	r4,r4,-3968
 402f388:	402a8e80 	call	402a8e8 <__udivsi3>
 402f38c:	1007883a 	mov	r3,r2
 402f390:	e0bfff17 	ldw	r2,-4(fp)
 402f394:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f398:	10bfffc4 	addi	r2,r2,-1
 402f39c:	00bffe16 	blt	zero,r2,402f398 <__alt_data_end+0xfffef398>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 402f3a0:	0005883a 	mov	r2,zero
}
 402f3a4:	e037883a 	mov	sp,fp
 402f3a8:	dfc00117 	ldw	ra,4(sp)
 402f3ac:	df000017 	ldw	fp,0(sp)
 402f3b0:	dec00204 	addi	sp,sp,8
 402f3b4:	f800283a 	ret

0402f3b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f3b8:	defffe04 	addi	sp,sp,-8
 402f3bc:	dfc00115 	stw	ra,4(sp)
 402f3c0:	df000015 	stw	fp,0(sp)
 402f3c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f3c8:	d0a00b17 	ldw	r2,-32724(gp)
 402f3cc:	10000326 	beq	r2,zero,402f3dc <alt_get_errno+0x24>
 402f3d0:	d0a00b17 	ldw	r2,-32724(gp)
 402f3d4:	103ee83a 	callr	r2
 402f3d8:	00000106 	br	402f3e0 <alt_get_errno+0x28>
 402f3dc:	d0a71204 	addi	r2,gp,-25528
}
 402f3e0:	e037883a 	mov	sp,fp
 402f3e4:	dfc00117 	ldw	ra,4(sp)
 402f3e8:	df000017 	ldw	fp,0(sp)
 402f3ec:	dec00204 	addi	sp,sp,8
 402f3f0:	f800283a 	ret

0402f3f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 402f3f4:	defffa04 	addi	sp,sp,-24
 402f3f8:	dfc00515 	stw	ra,20(sp)
 402f3fc:	df000415 	stw	fp,16(sp)
 402f400:	df000404 	addi	fp,sp,16
 402f404:	e13ffe15 	stw	r4,-8(fp)
 402f408:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 402f40c:	e0bffe17 	ldw	r2,-8(fp)
 402f410:	10000326 	beq	r2,zero,402f420 <alt_dev_llist_insert+0x2c>
 402f414:	e0bffe17 	ldw	r2,-8(fp)
 402f418:	10800217 	ldw	r2,8(r2)
 402f41c:	1000061e 	bne	r2,zero,402f438 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 402f420:	402f3b80 	call	402f3b8 <alt_get_errno>
 402f424:	1007883a 	mov	r3,r2
 402f428:	00800584 	movi	r2,22
 402f42c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 402f430:	00bffa84 	movi	r2,-22
 402f434:	00001306 	br	402f484 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402f438:	e0bffe17 	ldw	r2,-8(fp)
 402f43c:	e0ffff17 	ldw	r3,-4(fp)
 402f440:	e0fffc15 	stw	r3,-16(fp)
 402f444:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402f448:	e0bffd17 	ldw	r2,-12(fp)
 402f44c:	e0fffc17 	ldw	r3,-16(fp)
 402f450:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402f454:	e0bffc17 	ldw	r2,-16(fp)
 402f458:	10c00017 	ldw	r3,0(r2)
 402f45c:	e0bffd17 	ldw	r2,-12(fp)
 402f460:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402f464:	e0bffc17 	ldw	r2,-16(fp)
 402f468:	10800017 	ldw	r2,0(r2)
 402f46c:	e0fffd17 	ldw	r3,-12(fp)
 402f470:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f474:	e0bffc17 	ldw	r2,-16(fp)
 402f478:	e0fffd17 	ldw	r3,-12(fp)
 402f47c:	10c00015 	stw	r3,0(r2)

  return 0;  
 402f480:	0005883a 	mov	r2,zero
}
 402f484:	e037883a 	mov	sp,fp
 402f488:	dfc00117 	ldw	ra,4(sp)
 402f48c:	df000017 	ldw	fp,0(sp)
 402f490:	dec00204 	addi	sp,sp,8
 402f494:	f800283a 	ret

0402f498 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402f498:	defffd04 	addi	sp,sp,-12
 402f49c:	dfc00215 	stw	ra,8(sp)
 402f4a0:	df000115 	stw	fp,4(sp)
 402f4a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f4a8:	008100f4 	movhi	r2,1027
 402f4ac:	10807804 	addi	r2,r2,480
 402f4b0:	e0bfff15 	stw	r2,-4(fp)
 402f4b4:	00000606 	br	402f4d0 <_do_ctors+0x38>
        (*ctor) (); 
 402f4b8:	e0bfff17 	ldw	r2,-4(fp)
 402f4bc:	10800017 	ldw	r2,0(r2)
 402f4c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f4c4:	e0bfff17 	ldw	r2,-4(fp)
 402f4c8:	10bfff04 	addi	r2,r2,-4
 402f4cc:	e0bfff15 	stw	r2,-4(fp)
 402f4d0:	e0ffff17 	ldw	r3,-4(fp)
 402f4d4:	008100f4 	movhi	r2,1027
 402f4d8:	10807904 	addi	r2,r2,484
 402f4dc:	18bff62e 	bgeu	r3,r2,402f4b8 <__alt_data_end+0xfffef4b8>
        (*ctor) (); 
}
 402f4e0:	0001883a 	nop
 402f4e4:	e037883a 	mov	sp,fp
 402f4e8:	dfc00117 	ldw	ra,4(sp)
 402f4ec:	df000017 	ldw	fp,0(sp)
 402f4f0:	dec00204 	addi	sp,sp,8
 402f4f4:	f800283a 	ret

0402f4f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 402f4f8:	defffd04 	addi	sp,sp,-12
 402f4fc:	dfc00215 	stw	ra,8(sp)
 402f500:	df000115 	stw	fp,4(sp)
 402f504:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f508:	008100f4 	movhi	r2,1027
 402f50c:	10807804 	addi	r2,r2,480
 402f510:	e0bfff15 	stw	r2,-4(fp)
 402f514:	00000606 	br	402f530 <_do_dtors+0x38>
        (*dtor) (); 
 402f518:	e0bfff17 	ldw	r2,-4(fp)
 402f51c:	10800017 	ldw	r2,0(r2)
 402f520:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f524:	e0bfff17 	ldw	r2,-4(fp)
 402f528:	10bfff04 	addi	r2,r2,-4
 402f52c:	e0bfff15 	stw	r2,-4(fp)
 402f530:	e0ffff17 	ldw	r3,-4(fp)
 402f534:	008100f4 	movhi	r2,1027
 402f538:	10807904 	addi	r2,r2,484
 402f53c:	18bff62e 	bgeu	r3,r2,402f518 <__alt_data_end+0xfffef518>
        (*dtor) (); 
}
 402f540:	0001883a 	nop
 402f544:	e037883a 	mov	sp,fp
 402f548:	dfc00117 	ldw	ra,4(sp)
 402f54c:	df000017 	ldw	fp,0(sp)
 402f550:	dec00204 	addi	sp,sp,8
 402f554:	f800283a 	ret

0402f558 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 402f558:	defffa04 	addi	sp,sp,-24
 402f55c:	dfc00515 	stw	ra,20(sp)
 402f560:	df000415 	stw	fp,16(sp)
 402f564:	df000404 	addi	fp,sp,16
 402f568:	e13ffe15 	stw	r4,-8(fp)
 402f56c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 402f570:	e0bfff17 	ldw	r2,-4(fp)
 402f574:	10800017 	ldw	r2,0(r2)
 402f578:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 402f57c:	e13ffe17 	ldw	r4,-8(fp)
 402f580:	402082c0 	call	402082c <strlen>
 402f584:	10800044 	addi	r2,r2,1
 402f588:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f58c:	00000d06 	br	402f5c4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 402f590:	e0bffc17 	ldw	r2,-16(fp)
 402f594:	10800217 	ldw	r2,8(r2)
 402f598:	e0fffd17 	ldw	r3,-12(fp)
 402f59c:	180d883a 	mov	r6,r3
 402f5a0:	e17ffe17 	ldw	r5,-8(fp)
 402f5a4:	1009883a 	mov	r4,r2
 402f5a8:	402fe9c0 	call	402fe9c <memcmp>
 402f5ac:	1000021e 	bne	r2,zero,402f5b8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402f5b0:	e0bffc17 	ldw	r2,-16(fp)
 402f5b4:	00000706 	br	402f5d4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 402f5b8:	e0bffc17 	ldw	r2,-16(fp)
 402f5bc:	10800017 	ldw	r2,0(r2)
 402f5c0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f5c4:	e0fffc17 	ldw	r3,-16(fp)
 402f5c8:	e0bfff17 	ldw	r2,-4(fp)
 402f5cc:	18bff01e 	bne	r3,r2,402f590 <__alt_data_end+0xfffef590>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 402f5d0:	0005883a 	mov	r2,zero
}
 402f5d4:	e037883a 	mov	sp,fp
 402f5d8:	dfc00117 	ldw	ra,4(sp)
 402f5dc:	df000017 	ldw	fp,0(sp)
 402f5e0:	dec00204 	addi	sp,sp,8
 402f5e4:	f800283a 	ret

0402f5e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 402f5e8:	defffe04 	addi	sp,sp,-8
 402f5ec:	dfc00115 	stw	ra,4(sp)
 402f5f0:	df000015 	stw	fp,0(sp)
 402f5f4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 402f5f8:	01440004 	movi	r5,4096
 402f5fc:	0009883a 	mov	r4,zero
 402f600:	402fdc00 	call	402fdc0 <alt_icache_flush>
#endif
}
 402f604:	0001883a 	nop
 402f608:	e037883a 	mov	sp,fp
 402f60c:	dfc00117 	ldw	ra,4(sp)
 402f610:	df000017 	ldw	fp,0(sp)
 402f614:	dec00204 	addi	sp,sp,8
 402f618:	f800283a 	ret

0402f61c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402f61c:	defffe04 	addi	sp,sp,-8
 402f620:	df000115 	stw	fp,4(sp)
 402f624:	df000104 	addi	fp,sp,4
 402f628:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402f62c:	e0bfff17 	ldw	r2,-4(fp)
 402f630:	10bffe84 	addi	r2,r2,-6
 402f634:	10c00428 	cmpgeui	r3,r2,16
 402f638:	18001a1e 	bne	r3,zero,402f6a4 <alt_exception_cause_generated_bad_addr+0x88>
 402f63c:	100690ba 	slli	r3,r2,2
 402f640:	008100f4 	movhi	r2,1027
 402f644:	10bd9504 	addi	r2,r2,-2476
 402f648:	1885883a 	add	r2,r3,r2
 402f64c:	10800017 	ldw	r2,0(r2)
 402f650:	1000683a 	jmp	r2
 402f654:	0402f694 	movui	r16,3034
 402f658:	0402f694 	movui	r16,3034
 402f65c:	0402f6a4 	muli	r16,zero,3034
 402f660:	0402f6a4 	muli	r16,zero,3034
 402f664:	0402f6a4 	muli	r16,zero,3034
 402f668:	0402f694 	movui	r16,3034
 402f66c:	0402f69c 	xori	r16,zero,3034
 402f670:	0402f6a4 	muli	r16,zero,3034
 402f674:	0402f694 	movui	r16,3034
 402f678:	0402f694 	movui	r16,3034
 402f67c:	0402f6a4 	muli	r16,zero,3034
 402f680:	0402f694 	movui	r16,3034
 402f684:	0402f69c 	xori	r16,zero,3034
 402f688:	0402f6a4 	muli	r16,zero,3034
 402f68c:	0402f6a4 	muli	r16,zero,3034
 402f690:	0402f694 	movui	r16,3034
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 402f694:	00800044 	movi	r2,1
 402f698:	00000306 	br	402f6a8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 402f69c:	0005883a 	mov	r2,zero
 402f6a0:	00000106 	br	402f6a8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 402f6a4:	0005883a 	mov	r2,zero
  }
}
 402f6a8:	e037883a 	mov	sp,fp
 402f6ac:	df000017 	ldw	fp,0(sp)
 402f6b0:	dec00104 	addi	sp,sp,4
 402f6b4:	f800283a 	ret

0402f6b8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 402f6b8:	defff904 	addi	sp,sp,-28
 402f6bc:	dfc00615 	stw	ra,24(sp)
 402f6c0:	df000515 	stw	fp,20(sp)
 402f6c4:	df000504 	addi	fp,sp,20
 402f6c8:	e13ffc15 	stw	r4,-16(fp)
 402f6cc:	e17ffd15 	stw	r5,-12(fp)
 402f6d0:	e1bffe15 	stw	r6,-8(fp)
 402f6d4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 402f6d8:	e1bfff17 	ldw	r6,-4(fp)
 402f6dc:	e17ffe17 	ldw	r5,-8(fp)
 402f6e0:	e13ffd17 	ldw	r4,-12(fp)
 402f6e4:	402f8f80 	call	402f8f8 <open>
 402f6e8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 402f6ec:	e0bffb17 	ldw	r2,-20(fp)
 402f6f0:	10001c16 	blt	r2,zero,402f764 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 402f6f4:	008100f4 	movhi	r2,1027
 402f6f8:	1083b804 	addi	r2,r2,3808
 402f6fc:	e0fffb17 	ldw	r3,-20(fp)
 402f700:	18c00324 	muli	r3,r3,12
 402f704:	10c5883a 	add	r2,r2,r3
 402f708:	10c00017 	ldw	r3,0(r2)
 402f70c:	e0bffc17 	ldw	r2,-16(fp)
 402f710:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 402f714:	008100f4 	movhi	r2,1027
 402f718:	1083b804 	addi	r2,r2,3808
 402f71c:	e0fffb17 	ldw	r3,-20(fp)
 402f720:	18c00324 	muli	r3,r3,12
 402f724:	10c5883a 	add	r2,r2,r3
 402f728:	10800104 	addi	r2,r2,4
 402f72c:	10c00017 	ldw	r3,0(r2)
 402f730:	e0bffc17 	ldw	r2,-16(fp)
 402f734:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 402f738:	008100f4 	movhi	r2,1027
 402f73c:	1083b804 	addi	r2,r2,3808
 402f740:	e0fffb17 	ldw	r3,-20(fp)
 402f744:	18c00324 	muli	r3,r3,12
 402f748:	10c5883a 	add	r2,r2,r3
 402f74c:	10800204 	addi	r2,r2,8
 402f750:	10c00017 	ldw	r3,0(r2)
 402f754:	e0bffc17 	ldw	r2,-16(fp)
 402f758:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 402f75c:	e13ffb17 	ldw	r4,-20(fp)
 402f760:	402d9f00 	call	402d9f0 <alt_release_fd>
  }
} 
 402f764:	0001883a 	nop
 402f768:	e037883a 	mov	sp,fp
 402f76c:	dfc00117 	ldw	ra,4(sp)
 402f770:	df000017 	ldw	fp,0(sp)
 402f774:	dec00204 	addi	sp,sp,8
 402f778:	f800283a 	ret

0402f77c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402f77c:	defffb04 	addi	sp,sp,-20
 402f780:	dfc00415 	stw	ra,16(sp)
 402f784:	df000315 	stw	fp,12(sp)
 402f788:	df000304 	addi	fp,sp,12
 402f78c:	e13ffd15 	stw	r4,-12(fp)
 402f790:	e17ffe15 	stw	r5,-8(fp)
 402f794:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402f798:	01c07fc4 	movi	r7,511
 402f79c:	01800044 	movi	r6,1
 402f7a0:	e17ffd17 	ldw	r5,-12(fp)
 402f7a4:	010100f4 	movhi	r4,1027
 402f7a8:	2103bb04 	addi	r4,r4,3820
 402f7ac:	402f6b80 	call	402f6b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 402f7b0:	01c07fc4 	movi	r7,511
 402f7b4:	000d883a 	mov	r6,zero
 402f7b8:	e17ffe17 	ldw	r5,-8(fp)
 402f7bc:	010100f4 	movhi	r4,1027
 402f7c0:	2103b804 	addi	r4,r4,3808
 402f7c4:	402f6b80 	call	402f6b8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 402f7c8:	01c07fc4 	movi	r7,511
 402f7cc:	01800044 	movi	r6,1
 402f7d0:	e17fff17 	ldw	r5,-4(fp)
 402f7d4:	010100f4 	movhi	r4,1027
 402f7d8:	2103be04 	addi	r4,r4,3832
 402f7dc:	402f6b80 	call	402f6b8 <alt_open_fd>
}  
 402f7e0:	0001883a 	nop
 402f7e4:	e037883a 	mov	sp,fp
 402f7e8:	dfc00117 	ldw	ra,4(sp)
 402f7ec:	df000017 	ldw	fp,0(sp)
 402f7f0:	dec00204 	addi	sp,sp,8
 402f7f4:	f800283a 	ret

0402f7f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f7f8:	defffe04 	addi	sp,sp,-8
 402f7fc:	dfc00115 	stw	ra,4(sp)
 402f800:	df000015 	stw	fp,0(sp)
 402f804:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f808:	d0a00b17 	ldw	r2,-32724(gp)
 402f80c:	10000326 	beq	r2,zero,402f81c <alt_get_errno+0x24>
 402f810:	d0a00b17 	ldw	r2,-32724(gp)
 402f814:	103ee83a 	callr	r2
 402f818:	00000106 	br	402f820 <alt_get_errno+0x28>
 402f81c:	d0a71204 	addi	r2,gp,-25528
}
 402f820:	e037883a 	mov	sp,fp
 402f824:	dfc00117 	ldw	ra,4(sp)
 402f828:	df000017 	ldw	fp,0(sp)
 402f82c:	dec00204 	addi	sp,sp,8
 402f830:	f800283a 	ret

0402f834 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402f834:	defffd04 	addi	sp,sp,-12
 402f838:	df000215 	stw	fp,8(sp)
 402f83c:	df000204 	addi	fp,sp,8
 402f840:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 402f844:	e0bfff17 	ldw	r2,-4(fp)
 402f848:	10800217 	ldw	r2,8(r2)
 402f84c:	10d00034 	orhi	r3,r2,16384
 402f850:	e0bfff17 	ldw	r2,-4(fp)
 402f854:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f858:	e03ffe15 	stw	zero,-8(fp)
 402f85c:	00001d06 	br	402f8d4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f860:	008100f4 	movhi	r2,1027
 402f864:	1083b804 	addi	r2,r2,3808
 402f868:	e0fffe17 	ldw	r3,-8(fp)
 402f86c:	18c00324 	muli	r3,r3,12
 402f870:	10c5883a 	add	r2,r2,r3
 402f874:	10c00017 	ldw	r3,0(r2)
 402f878:	e0bfff17 	ldw	r2,-4(fp)
 402f87c:	10800017 	ldw	r2,0(r2)
 402f880:	1880111e 	bne	r3,r2,402f8c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f884:	008100f4 	movhi	r2,1027
 402f888:	1083b804 	addi	r2,r2,3808
 402f88c:	e0fffe17 	ldw	r3,-8(fp)
 402f890:	18c00324 	muli	r3,r3,12
 402f894:	10c5883a 	add	r2,r2,r3
 402f898:	10800204 	addi	r2,r2,8
 402f89c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f8a0:	1000090e 	bge	r2,zero,402f8c8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 402f8a4:	e0bffe17 	ldw	r2,-8(fp)
 402f8a8:	10c00324 	muli	r3,r2,12
 402f8ac:	008100f4 	movhi	r2,1027
 402f8b0:	1083b804 	addi	r2,r2,3808
 402f8b4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f8b8:	e0bfff17 	ldw	r2,-4(fp)
 402f8bc:	18800226 	beq	r3,r2,402f8c8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 402f8c0:	00bffcc4 	movi	r2,-13
 402f8c4:	00000806 	br	402f8e8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f8c8:	e0bffe17 	ldw	r2,-8(fp)
 402f8cc:	10800044 	addi	r2,r2,1
 402f8d0:	e0bffe15 	stw	r2,-8(fp)
 402f8d4:	d0a00a17 	ldw	r2,-32728(gp)
 402f8d8:	1007883a 	mov	r3,r2
 402f8dc:	e0bffe17 	ldw	r2,-8(fp)
 402f8e0:	18bfdf2e 	bgeu	r3,r2,402f860 <__alt_data_end+0xfffef860>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 402f8e4:	0005883a 	mov	r2,zero
}
 402f8e8:	e037883a 	mov	sp,fp
 402f8ec:	df000017 	ldw	fp,0(sp)
 402f8f0:	dec00104 	addi	sp,sp,4
 402f8f4:	f800283a 	ret

0402f8f8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 402f8f8:	defff604 	addi	sp,sp,-40
 402f8fc:	dfc00915 	stw	ra,36(sp)
 402f900:	df000815 	stw	fp,32(sp)
 402f904:	df000804 	addi	fp,sp,32
 402f908:	e13ffd15 	stw	r4,-12(fp)
 402f90c:	e17ffe15 	stw	r5,-8(fp)
 402f910:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 402f914:	00bfffc4 	movi	r2,-1
 402f918:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402f91c:	00bffb44 	movi	r2,-19
 402f920:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 402f924:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402f928:	d1600804 	addi	r5,gp,-32736
 402f92c:	e13ffd17 	ldw	r4,-12(fp)
 402f930:	402f5580 	call	402f558 <alt_find_dev>
 402f934:	e0bff815 	stw	r2,-32(fp)
 402f938:	e0bff817 	ldw	r2,-32(fp)
 402f93c:	1000051e 	bne	r2,zero,402f954 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 402f940:	e13ffd17 	ldw	r4,-12(fp)
 402f944:	402fc140 	call	402fc14 <alt_find_file>
 402f948:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402f94c:	00800044 	movi	r2,1
 402f950:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 402f954:	e0bff817 	ldw	r2,-32(fp)
 402f958:	10002926 	beq	r2,zero,402fa00 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402f95c:	e13ff817 	ldw	r4,-32(fp)
 402f960:	402fd1c0 	call	402fd1c <alt_get_fd>
 402f964:	e0bff915 	stw	r2,-28(fp)
 402f968:	e0bff917 	ldw	r2,-28(fp)
 402f96c:	1000030e 	bge	r2,zero,402f97c <open+0x84>
    {
      status = index;
 402f970:	e0bff917 	ldw	r2,-28(fp)
 402f974:	e0bffa15 	stw	r2,-24(fp)
 402f978:	00002306 	br	402fa08 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 402f97c:	e0bff917 	ldw	r2,-28(fp)
 402f980:	10c00324 	muli	r3,r2,12
 402f984:	008100f4 	movhi	r2,1027
 402f988:	1083b804 	addi	r2,r2,3808
 402f98c:	1885883a 	add	r2,r3,r2
 402f990:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402f994:	e0fffe17 	ldw	r3,-8(fp)
 402f998:	00900034 	movhi	r2,16384
 402f99c:	10bfffc4 	addi	r2,r2,-1
 402f9a0:	1886703a 	and	r3,r3,r2
 402f9a4:	e0bffc17 	ldw	r2,-16(fp)
 402f9a8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402f9ac:	e0bffb17 	ldw	r2,-20(fp)
 402f9b0:	1000051e 	bne	r2,zero,402f9c8 <open+0xd0>
 402f9b4:	e13ffc17 	ldw	r4,-16(fp)
 402f9b8:	402f8340 	call	402f834 <alt_file_locked>
 402f9bc:	e0bffa15 	stw	r2,-24(fp)
 402f9c0:	e0bffa17 	ldw	r2,-24(fp)
 402f9c4:	10001016 	blt	r2,zero,402fa08 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 402f9c8:	e0bff817 	ldw	r2,-32(fp)
 402f9cc:	10800317 	ldw	r2,12(r2)
 402f9d0:	10000826 	beq	r2,zero,402f9f4 <open+0xfc>
 402f9d4:	e0bff817 	ldw	r2,-32(fp)
 402f9d8:	10800317 	ldw	r2,12(r2)
 402f9dc:	e1ffff17 	ldw	r7,-4(fp)
 402f9e0:	e1bffe17 	ldw	r6,-8(fp)
 402f9e4:	e17ffd17 	ldw	r5,-12(fp)
 402f9e8:	e13ffc17 	ldw	r4,-16(fp)
 402f9ec:	103ee83a 	callr	r2
 402f9f0:	00000106 	br	402f9f8 <open+0x100>
 402f9f4:	0005883a 	mov	r2,zero
 402f9f8:	e0bffa15 	stw	r2,-24(fp)
 402f9fc:	00000206 	br	402fa08 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 402fa00:	00bffb44 	movi	r2,-19
 402fa04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402fa08:	e0bffa17 	ldw	r2,-24(fp)
 402fa0c:	1000090e 	bge	r2,zero,402fa34 <open+0x13c>
  {
    alt_release_fd (index);  
 402fa10:	e13ff917 	ldw	r4,-28(fp)
 402fa14:	402d9f00 	call	402d9f0 <alt_release_fd>
    ALT_ERRNO = -status;
 402fa18:	402f7f80 	call	402f7f8 <alt_get_errno>
 402fa1c:	1007883a 	mov	r3,r2
 402fa20:	e0bffa17 	ldw	r2,-24(fp)
 402fa24:	0085c83a 	sub	r2,zero,r2
 402fa28:	18800015 	stw	r2,0(r3)
    return -1;
 402fa2c:	00bfffc4 	movi	r2,-1
 402fa30:	00000106 	br	402fa38 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 402fa34:	e0bff917 	ldw	r2,-28(fp)
}
 402fa38:	e037883a 	mov	sp,fp
 402fa3c:	dfc00117 	ldw	ra,4(sp)
 402fa40:	df000017 	ldw	fp,0(sp)
 402fa44:	dec00204 	addi	sp,sp,8
 402fa48:	f800283a 	ret

0402fa4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 402fa4c:	defffa04 	addi	sp,sp,-24
 402fa50:	df000515 	stw	fp,20(sp)
 402fa54:	df000504 	addi	fp,sp,20
 402fa58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402fa5c:	0005303a 	rdctl	r2,status
 402fa60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402fa64:	e0fffc17 	ldw	r3,-16(fp)
 402fa68:	00bfff84 	movi	r2,-2
 402fa6c:	1884703a 	and	r2,r3,r2
 402fa70:	1001703a 	wrctl	status,r2
  
  return context;
 402fa74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 402fa78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 402fa7c:	e0bfff17 	ldw	r2,-4(fp)
 402fa80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402fa84:	e0bffd17 	ldw	r2,-12(fp)
 402fa88:	10800017 	ldw	r2,0(r2)
 402fa8c:	e0fffd17 	ldw	r3,-12(fp)
 402fa90:	18c00117 	ldw	r3,4(r3)
 402fa94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 402fa98:	e0bffd17 	ldw	r2,-12(fp)
 402fa9c:	10800117 	ldw	r2,4(r2)
 402faa0:	e0fffd17 	ldw	r3,-12(fp)
 402faa4:	18c00017 	ldw	r3,0(r3)
 402faa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 402faac:	e0bffd17 	ldw	r2,-12(fp)
 402fab0:	e0fffd17 	ldw	r3,-12(fp)
 402fab4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 402fab8:	e0bffd17 	ldw	r2,-12(fp)
 402fabc:	e0fffd17 	ldw	r3,-12(fp)
 402fac0:	10c00015 	stw	r3,0(r2)
 402fac4:	e0bffb17 	ldw	r2,-20(fp)
 402fac8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402facc:	e0bffe17 	ldw	r2,-8(fp)
 402fad0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402fad4:	0001883a 	nop
 402fad8:	e037883a 	mov	sp,fp
 402fadc:	df000017 	ldw	fp,0(sp)
 402fae0:	dec00104 	addi	sp,sp,4
 402fae4:	f800283a 	ret

0402fae8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 402fae8:	defffb04 	addi	sp,sp,-20
 402faec:	dfc00415 	stw	ra,16(sp)
 402faf0:	df000315 	stw	fp,12(sp)
 402faf4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 402faf8:	d0a01017 	ldw	r2,-32704(gp)
 402fafc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402fb00:	d0a71917 	ldw	r2,-25500(gp)
 402fb04:	10800044 	addi	r2,r2,1
 402fb08:	d0a71915 	stw	r2,-25500(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fb0c:	00002e06 	br	402fbc8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 402fb10:	e0bffd17 	ldw	r2,-12(fp)
 402fb14:	10800017 	ldw	r2,0(r2)
 402fb18:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 402fb1c:	e0bffd17 	ldw	r2,-12(fp)
 402fb20:	10800403 	ldbu	r2,16(r2)
 402fb24:	10803fcc 	andi	r2,r2,255
 402fb28:	10000426 	beq	r2,zero,402fb3c <alt_tick+0x54>
 402fb2c:	d0a71917 	ldw	r2,-25500(gp)
 402fb30:	1000021e 	bne	r2,zero,402fb3c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402fb34:	e0bffd17 	ldw	r2,-12(fp)
 402fb38:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 402fb3c:	e0bffd17 	ldw	r2,-12(fp)
 402fb40:	10800217 	ldw	r2,8(r2)
 402fb44:	d0e71917 	ldw	r3,-25500(gp)
 402fb48:	18801d36 	bltu	r3,r2,402fbc0 <alt_tick+0xd8>
 402fb4c:	e0bffd17 	ldw	r2,-12(fp)
 402fb50:	10800403 	ldbu	r2,16(r2)
 402fb54:	10803fcc 	andi	r2,r2,255
 402fb58:	1000191e 	bne	r2,zero,402fbc0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402fb5c:	e0bffd17 	ldw	r2,-12(fp)
 402fb60:	10800317 	ldw	r2,12(r2)
 402fb64:	e0fffd17 	ldw	r3,-12(fp)
 402fb68:	18c00517 	ldw	r3,20(r3)
 402fb6c:	1809883a 	mov	r4,r3
 402fb70:	103ee83a 	callr	r2
 402fb74:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 402fb78:	e0bfff17 	ldw	r2,-4(fp)
 402fb7c:	1000031e 	bne	r2,zero,402fb8c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402fb80:	e13ffd17 	ldw	r4,-12(fp)
 402fb84:	402fa4c0 	call	402fa4c <alt_alarm_stop>
 402fb88:	00000d06 	br	402fbc0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402fb8c:	e0bffd17 	ldw	r2,-12(fp)
 402fb90:	10c00217 	ldw	r3,8(r2)
 402fb94:	e0bfff17 	ldw	r2,-4(fp)
 402fb98:	1887883a 	add	r3,r3,r2
 402fb9c:	e0bffd17 	ldw	r2,-12(fp)
 402fba0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402fba4:	e0bffd17 	ldw	r2,-12(fp)
 402fba8:	10c00217 	ldw	r3,8(r2)
 402fbac:	d0a71917 	ldw	r2,-25500(gp)
 402fbb0:	1880032e 	bgeu	r3,r2,402fbc0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402fbb4:	e0bffd17 	ldw	r2,-12(fp)
 402fbb8:	00c00044 	movi	r3,1
 402fbbc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402fbc0:	e0bffe17 	ldw	r2,-8(fp)
 402fbc4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fbc8:	e0fffd17 	ldw	r3,-12(fp)
 402fbcc:	d0a01004 	addi	r2,gp,-32704
 402fbd0:	18bfcf1e 	bne	r3,r2,402fb10 <__alt_data_end+0xfffefb10>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402fbd4:	0001883a 	nop
}
 402fbd8:	0001883a 	nop
 402fbdc:	e037883a 	mov	sp,fp
 402fbe0:	dfc00117 	ldw	ra,4(sp)
 402fbe4:	df000017 	ldw	fp,0(sp)
 402fbe8:	dec00204 	addi	sp,sp,8
 402fbec:	f800283a 	ret

0402fbf0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402fbf0:	deffff04 	addi	sp,sp,-4
 402fbf4:	df000015 	stw	fp,0(sp)
 402fbf8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 402fbfc:	000170fa 	wrctl	ienable,zero
}
 402fc00:	0001883a 	nop
 402fc04:	e037883a 	mov	sp,fp
 402fc08:	df000017 	ldw	fp,0(sp)
 402fc0c:	dec00104 	addi	sp,sp,4
 402fc10:	f800283a 	ret

0402fc14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402fc14:	defffb04 	addi	sp,sp,-20
 402fc18:	dfc00415 	stw	ra,16(sp)
 402fc1c:	df000315 	stw	fp,12(sp)
 402fc20:	df000304 	addi	fp,sp,12
 402fc24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402fc28:	d0a00617 	ldw	r2,-32744(gp)
 402fc2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fc30:	00003106 	br	402fcf8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402fc34:	e0bffd17 	ldw	r2,-12(fp)
 402fc38:	10800217 	ldw	r2,8(r2)
 402fc3c:	1009883a 	mov	r4,r2
 402fc40:	402082c0 	call	402082c <strlen>
 402fc44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 402fc48:	e0bffd17 	ldw	r2,-12(fp)
 402fc4c:	10c00217 	ldw	r3,8(r2)
 402fc50:	e0bffe17 	ldw	r2,-8(fp)
 402fc54:	10bfffc4 	addi	r2,r2,-1
 402fc58:	1885883a 	add	r2,r3,r2
 402fc5c:	10800003 	ldbu	r2,0(r2)
 402fc60:	10803fcc 	andi	r2,r2,255
 402fc64:	1080201c 	xori	r2,r2,128
 402fc68:	10bfe004 	addi	r2,r2,-128
 402fc6c:	10800bd8 	cmpnei	r2,r2,47
 402fc70:	1000031e 	bne	r2,zero,402fc80 <alt_find_file+0x6c>
    {
      len -= 1;
 402fc74:	e0bffe17 	ldw	r2,-8(fp)
 402fc78:	10bfffc4 	addi	r2,r2,-1
 402fc7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fc80:	e0bffe17 	ldw	r2,-8(fp)
 402fc84:	e0ffff17 	ldw	r3,-4(fp)
 402fc88:	1885883a 	add	r2,r3,r2
 402fc8c:	10800003 	ldbu	r2,0(r2)
 402fc90:	10803fcc 	andi	r2,r2,255
 402fc94:	1080201c 	xori	r2,r2,128
 402fc98:	10bfe004 	addi	r2,r2,-128
 402fc9c:	10800be0 	cmpeqi	r2,r2,47
 402fca0:	1000081e 	bne	r2,zero,402fcc4 <alt_find_file+0xb0>
 402fca4:	e0bffe17 	ldw	r2,-8(fp)
 402fca8:	e0ffff17 	ldw	r3,-4(fp)
 402fcac:	1885883a 	add	r2,r3,r2
 402fcb0:	10800003 	ldbu	r2,0(r2)
 402fcb4:	10803fcc 	andi	r2,r2,255
 402fcb8:	1080201c 	xori	r2,r2,128
 402fcbc:	10bfe004 	addi	r2,r2,-128
 402fcc0:	10000a1e 	bne	r2,zero,402fcec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402fcc4:	e0bffd17 	ldw	r2,-12(fp)
 402fcc8:	10800217 	ldw	r2,8(r2)
 402fccc:	e0fffe17 	ldw	r3,-8(fp)
 402fcd0:	180d883a 	mov	r6,r3
 402fcd4:	e17fff17 	ldw	r5,-4(fp)
 402fcd8:	1009883a 	mov	r4,r2
 402fcdc:	402fe9c0 	call	402fe9c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fce0:	1000021e 	bne	r2,zero,402fcec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402fce4:	e0bffd17 	ldw	r2,-12(fp)
 402fce8:	00000706 	br	402fd08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402fcec:	e0bffd17 	ldw	r2,-12(fp)
 402fcf0:	10800017 	ldw	r2,0(r2)
 402fcf4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fcf8:	e0fffd17 	ldw	r3,-12(fp)
 402fcfc:	d0a00604 	addi	r2,gp,-32744
 402fd00:	18bfcc1e 	bne	r3,r2,402fc34 <__alt_data_end+0xfffefc34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402fd04:	0005883a 	mov	r2,zero
}
 402fd08:	e037883a 	mov	sp,fp
 402fd0c:	dfc00117 	ldw	ra,4(sp)
 402fd10:	df000017 	ldw	fp,0(sp)
 402fd14:	dec00204 	addi	sp,sp,8
 402fd18:	f800283a 	ret

0402fd1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402fd1c:	defffc04 	addi	sp,sp,-16
 402fd20:	df000315 	stw	fp,12(sp)
 402fd24:	df000304 	addi	fp,sp,12
 402fd28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 402fd2c:	00bffa04 	movi	r2,-24
 402fd30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fd34:	e03ffd15 	stw	zero,-12(fp)
 402fd38:	00001906 	br	402fda0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 402fd3c:	008100f4 	movhi	r2,1027
 402fd40:	1083b804 	addi	r2,r2,3808
 402fd44:	e0fffd17 	ldw	r3,-12(fp)
 402fd48:	18c00324 	muli	r3,r3,12
 402fd4c:	10c5883a 	add	r2,r2,r3
 402fd50:	10800017 	ldw	r2,0(r2)
 402fd54:	10000f1e 	bne	r2,zero,402fd94 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 402fd58:	008100f4 	movhi	r2,1027
 402fd5c:	1083b804 	addi	r2,r2,3808
 402fd60:	e0fffd17 	ldw	r3,-12(fp)
 402fd64:	18c00324 	muli	r3,r3,12
 402fd68:	10c5883a 	add	r2,r2,r3
 402fd6c:	e0ffff17 	ldw	r3,-4(fp)
 402fd70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402fd74:	d0e00a17 	ldw	r3,-32728(gp)
 402fd78:	e0bffd17 	ldw	r2,-12(fp)
 402fd7c:	1880020e 	bge	r3,r2,402fd88 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 402fd80:	e0bffd17 	ldw	r2,-12(fp)
 402fd84:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 402fd88:	e0bffd17 	ldw	r2,-12(fp)
 402fd8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 402fd90:	00000606 	br	402fdac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fd94:	e0bffd17 	ldw	r2,-12(fp)
 402fd98:	10800044 	addi	r2,r2,1
 402fd9c:	e0bffd15 	stw	r2,-12(fp)
 402fda0:	e0bffd17 	ldw	r2,-12(fp)
 402fda4:	10800810 	cmplti	r2,r2,32
 402fda8:	103fe41e 	bne	r2,zero,402fd3c <__alt_data_end+0xfffefd3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 402fdac:	e0bffe17 	ldw	r2,-8(fp)
}
 402fdb0:	e037883a 	mov	sp,fp
 402fdb4:	df000017 	ldw	fp,0(sp)
 402fdb8:	dec00104 	addi	sp,sp,4
 402fdbc:	f800283a 	ret

0402fdc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 402fdc0:	defffb04 	addi	sp,sp,-20
 402fdc4:	df000415 	stw	fp,16(sp)
 402fdc8:	df000404 	addi	fp,sp,16
 402fdcc:	e13ffe15 	stw	r4,-8(fp)
 402fdd0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 402fdd4:	e0bfff17 	ldw	r2,-4(fp)
 402fdd8:	10840070 	cmpltui	r2,r2,4097
 402fddc:	1000021e 	bne	r2,zero,402fde8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 402fde0:	00840004 	movi	r2,4096
 402fde4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 402fde8:	e0fffe17 	ldw	r3,-8(fp)
 402fdec:	e0bfff17 	ldw	r2,-4(fp)
 402fdf0:	1885883a 	add	r2,r3,r2
 402fdf4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fdf8:	e0bffe17 	ldw	r2,-8(fp)
 402fdfc:	e0bffc15 	stw	r2,-16(fp)
 402fe00:	00000506 	br	402fe18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 402fe04:	e0bffc17 	ldw	r2,-16(fp)
 402fe08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fe0c:	e0bffc17 	ldw	r2,-16(fp)
 402fe10:	10800804 	addi	r2,r2,32
 402fe14:	e0bffc15 	stw	r2,-16(fp)
 402fe18:	e0fffc17 	ldw	r3,-16(fp)
 402fe1c:	e0bffd17 	ldw	r2,-12(fp)
 402fe20:	18bff836 	bltu	r3,r2,402fe04 <__alt_data_end+0xfffefe04>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 402fe24:	e0bffe17 	ldw	r2,-8(fp)
 402fe28:	108007cc 	andi	r2,r2,31
 402fe2c:	10000226 	beq	r2,zero,402fe38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 402fe30:	e0bffc17 	ldw	r2,-16(fp)
 402fe34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 402fe38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 402fe3c:	0001883a 	nop
 402fe40:	e037883a 	mov	sp,fp
 402fe44:	df000017 	ldw	fp,0(sp)
 402fe48:	dec00104 	addi	sp,sp,4
 402fe4c:	f800283a 	ret

0402fe50 <atexit>:
 402fe50:	200b883a 	mov	r5,r4
 402fe54:	000f883a 	mov	r7,zero
 402fe58:	000d883a 	mov	r6,zero
 402fe5c:	0009883a 	mov	r4,zero
 402fe60:	402ff181 	jmpi	402ff18 <__register_exitproc>

0402fe64 <exit>:
 402fe64:	defffe04 	addi	sp,sp,-8
 402fe68:	000b883a 	mov	r5,zero
 402fe6c:	dc000015 	stw	r16,0(sp)
 402fe70:	dfc00115 	stw	ra,4(sp)
 402fe74:	2021883a 	mov	r16,r4
 402fe78:	40300300 	call	4030030 <__call_exitprocs>
 402fe7c:	008100f4 	movhi	r2,1027
 402fe80:	10886a04 	addi	r2,r2,8616
 402fe84:	11000017 	ldw	r4,0(r2)
 402fe88:	20800f17 	ldw	r2,60(r4)
 402fe8c:	10000126 	beq	r2,zero,402fe94 <exit+0x30>
 402fe90:	103ee83a 	callr	r2
 402fe94:	8009883a 	mov	r4,r16
 402fe98:	40301b00 	call	40301b0 <_exit>

0402fe9c <memcmp>:
 402fe9c:	01c000c4 	movi	r7,3
 402fea0:	3980192e 	bgeu	r7,r6,402ff08 <memcmp+0x6c>
 402fea4:	2144b03a 	or	r2,r4,r5
 402fea8:	11c4703a 	and	r2,r2,r7
 402feac:	10000f26 	beq	r2,zero,402feec <memcmp+0x50>
 402feb0:	20800003 	ldbu	r2,0(r4)
 402feb4:	28c00003 	ldbu	r3,0(r5)
 402feb8:	10c0151e 	bne	r2,r3,402ff10 <memcmp+0x74>
 402febc:	31bfff84 	addi	r6,r6,-2
 402fec0:	01ffffc4 	movi	r7,-1
 402fec4:	00000406 	br	402fed8 <memcmp+0x3c>
 402fec8:	20800003 	ldbu	r2,0(r4)
 402fecc:	28c00003 	ldbu	r3,0(r5)
 402fed0:	31bfffc4 	addi	r6,r6,-1
 402fed4:	10c00e1e 	bne	r2,r3,402ff10 <memcmp+0x74>
 402fed8:	21000044 	addi	r4,r4,1
 402fedc:	29400044 	addi	r5,r5,1
 402fee0:	31fff91e 	bne	r6,r7,402fec8 <__alt_data_end+0xfffefec8>
 402fee4:	0005883a 	mov	r2,zero
 402fee8:	f800283a 	ret
 402feec:	20c00017 	ldw	r3,0(r4)
 402fef0:	28800017 	ldw	r2,0(r5)
 402fef4:	18bfee1e 	bne	r3,r2,402feb0 <__alt_data_end+0xfffefeb0>
 402fef8:	31bfff04 	addi	r6,r6,-4
 402fefc:	21000104 	addi	r4,r4,4
 402ff00:	29400104 	addi	r5,r5,4
 402ff04:	39bff936 	bltu	r7,r6,402feec <__alt_data_end+0xfffefeec>
 402ff08:	303fe91e 	bne	r6,zero,402feb0 <__alt_data_end+0xfffefeb0>
 402ff0c:	003ff506 	br	402fee4 <__alt_data_end+0xfffefee4>
 402ff10:	10c5c83a 	sub	r2,r2,r3
 402ff14:	f800283a 	ret

0402ff18 <__register_exitproc>:
 402ff18:	defffa04 	addi	sp,sp,-24
 402ff1c:	dc000315 	stw	r16,12(sp)
 402ff20:	040100f4 	movhi	r16,1027
 402ff24:	84086a04 	addi	r16,r16,8616
 402ff28:	80c00017 	ldw	r3,0(r16)
 402ff2c:	dc400415 	stw	r17,16(sp)
 402ff30:	dfc00515 	stw	ra,20(sp)
 402ff34:	18805217 	ldw	r2,328(r3)
 402ff38:	2023883a 	mov	r17,r4
 402ff3c:	10003726 	beq	r2,zero,403001c <__register_exitproc+0x104>
 402ff40:	10c00117 	ldw	r3,4(r2)
 402ff44:	010007c4 	movi	r4,31
 402ff48:	20c00e16 	blt	r4,r3,402ff84 <__register_exitproc+0x6c>
 402ff4c:	1a000044 	addi	r8,r3,1
 402ff50:	8800221e 	bne	r17,zero,402ffdc <__register_exitproc+0xc4>
 402ff54:	18c00084 	addi	r3,r3,2
 402ff58:	18c7883a 	add	r3,r3,r3
 402ff5c:	18c7883a 	add	r3,r3,r3
 402ff60:	12000115 	stw	r8,4(r2)
 402ff64:	10c7883a 	add	r3,r2,r3
 402ff68:	19400015 	stw	r5,0(r3)
 402ff6c:	0005883a 	mov	r2,zero
 402ff70:	dfc00517 	ldw	ra,20(sp)
 402ff74:	dc400417 	ldw	r17,16(sp)
 402ff78:	dc000317 	ldw	r16,12(sp)
 402ff7c:	dec00604 	addi	sp,sp,24
 402ff80:	f800283a 	ret
 402ff84:	00800034 	movhi	r2,0
 402ff88:	10800004 	addi	r2,r2,0
 402ff8c:	10002626 	beq	r2,zero,4030028 <__register_exitproc+0x110>
 402ff90:	01006404 	movi	r4,400
 402ff94:	d9400015 	stw	r5,0(sp)
 402ff98:	d9800115 	stw	r6,4(sp)
 402ff9c:	d9c00215 	stw	r7,8(sp)
 402ffa0:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 402ffa4:	d9400017 	ldw	r5,0(sp)
 402ffa8:	d9800117 	ldw	r6,4(sp)
 402ffac:	d9c00217 	ldw	r7,8(sp)
 402ffb0:	10001d26 	beq	r2,zero,4030028 <__register_exitproc+0x110>
 402ffb4:	81000017 	ldw	r4,0(r16)
 402ffb8:	10000115 	stw	zero,4(r2)
 402ffbc:	02000044 	movi	r8,1
 402ffc0:	22405217 	ldw	r9,328(r4)
 402ffc4:	0007883a 	mov	r3,zero
 402ffc8:	12400015 	stw	r9,0(r2)
 402ffcc:	20805215 	stw	r2,328(r4)
 402ffd0:	10006215 	stw	zero,392(r2)
 402ffd4:	10006315 	stw	zero,396(r2)
 402ffd8:	883fde26 	beq	r17,zero,402ff54 <__alt_data_end+0xfffeff54>
 402ffdc:	18c9883a 	add	r4,r3,r3
 402ffe0:	2109883a 	add	r4,r4,r4
 402ffe4:	1109883a 	add	r4,r2,r4
 402ffe8:	21802215 	stw	r6,136(r4)
 402ffec:	01800044 	movi	r6,1
 402fff0:	12406217 	ldw	r9,392(r2)
 402fff4:	30cc983a 	sll	r6,r6,r3
 402fff8:	4992b03a 	or	r9,r9,r6
 402fffc:	12406215 	stw	r9,392(r2)
 4030000:	21c04215 	stw	r7,264(r4)
 4030004:	01000084 	movi	r4,2
 4030008:	893fd21e 	bne	r17,r4,402ff54 <__alt_data_end+0xfffeff54>
 403000c:	11006317 	ldw	r4,396(r2)
 4030010:	218cb03a 	or	r6,r4,r6
 4030014:	11806315 	stw	r6,396(r2)
 4030018:	003fce06 	br	402ff54 <__alt_data_end+0xfffeff54>
 403001c:	18805304 	addi	r2,r3,332
 4030020:	18805215 	stw	r2,328(r3)
 4030024:	003fc606 	br	402ff40 <__alt_data_end+0xfffeff40>
 4030028:	00bfffc4 	movi	r2,-1
 403002c:	003fd006 	br	402ff70 <__alt_data_end+0xfffeff70>

04030030 <__call_exitprocs>:
 4030030:	defff504 	addi	sp,sp,-44
 4030034:	df000915 	stw	fp,36(sp)
 4030038:	dd400615 	stw	r21,24(sp)
 403003c:	dc800315 	stw	r18,12(sp)
 4030040:	dfc00a15 	stw	ra,40(sp)
 4030044:	ddc00815 	stw	r23,32(sp)
 4030048:	dd800715 	stw	r22,28(sp)
 403004c:	dd000515 	stw	r20,20(sp)
 4030050:	dcc00415 	stw	r19,16(sp)
 4030054:	dc400215 	stw	r17,8(sp)
 4030058:	dc000115 	stw	r16,4(sp)
 403005c:	d9000015 	stw	r4,0(sp)
 4030060:	2839883a 	mov	fp,r5
 4030064:	04800044 	movi	r18,1
 4030068:	057fffc4 	movi	r21,-1
 403006c:	008100f4 	movhi	r2,1027
 4030070:	10886a04 	addi	r2,r2,8616
 4030074:	12000017 	ldw	r8,0(r2)
 4030078:	45005217 	ldw	r20,328(r8)
 403007c:	44c05204 	addi	r19,r8,328
 4030080:	a0001c26 	beq	r20,zero,40300f4 <__call_exitprocs+0xc4>
 4030084:	a0800117 	ldw	r2,4(r20)
 4030088:	15ffffc4 	addi	r23,r2,-1
 403008c:	b8000d16 	blt	r23,zero,40300c4 <__call_exitprocs+0x94>
 4030090:	14000044 	addi	r16,r2,1
 4030094:	8421883a 	add	r16,r16,r16
 4030098:	8421883a 	add	r16,r16,r16
 403009c:	84402004 	addi	r17,r16,128
 40300a0:	a463883a 	add	r17,r20,r17
 40300a4:	a421883a 	add	r16,r20,r16
 40300a8:	e0001e26 	beq	fp,zero,4030124 <__call_exitprocs+0xf4>
 40300ac:	80804017 	ldw	r2,256(r16)
 40300b0:	e0801c26 	beq	fp,r2,4030124 <__call_exitprocs+0xf4>
 40300b4:	bdffffc4 	addi	r23,r23,-1
 40300b8:	843fff04 	addi	r16,r16,-4
 40300bc:	8c7fff04 	addi	r17,r17,-4
 40300c0:	bd7ff91e 	bne	r23,r21,40300a8 <__alt_data_end+0xffff00a8>
 40300c4:	00800034 	movhi	r2,0
 40300c8:	10800004 	addi	r2,r2,0
 40300cc:	10000926 	beq	r2,zero,40300f4 <__call_exitprocs+0xc4>
 40300d0:	a0800117 	ldw	r2,4(r20)
 40300d4:	1000301e 	bne	r2,zero,4030198 <__call_exitprocs+0x168>
 40300d8:	a0800017 	ldw	r2,0(r20)
 40300dc:	10003226 	beq	r2,zero,40301a8 <__call_exitprocs+0x178>
 40300e0:	a009883a 	mov	r4,r20
 40300e4:	98800015 	stw	r2,0(r19)
 40300e8:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 40300ec:	9d000017 	ldw	r20,0(r19)
 40300f0:	a03fe41e 	bne	r20,zero,4030084 <__alt_data_end+0xffff0084>
 40300f4:	dfc00a17 	ldw	ra,40(sp)
 40300f8:	df000917 	ldw	fp,36(sp)
 40300fc:	ddc00817 	ldw	r23,32(sp)
 4030100:	dd800717 	ldw	r22,28(sp)
 4030104:	dd400617 	ldw	r21,24(sp)
 4030108:	dd000517 	ldw	r20,20(sp)
 403010c:	dcc00417 	ldw	r19,16(sp)
 4030110:	dc800317 	ldw	r18,12(sp)
 4030114:	dc400217 	ldw	r17,8(sp)
 4030118:	dc000117 	ldw	r16,4(sp)
 403011c:	dec00b04 	addi	sp,sp,44
 4030120:	f800283a 	ret
 4030124:	a0800117 	ldw	r2,4(r20)
 4030128:	80c00017 	ldw	r3,0(r16)
 403012c:	10bfffc4 	addi	r2,r2,-1
 4030130:	15c01426 	beq	r2,r23,4030184 <__call_exitprocs+0x154>
 4030134:	80000015 	stw	zero,0(r16)
 4030138:	183fde26 	beq	r3,zero,40300b4 <__alt_data_end+0xffff00b4>
 403013c:	95c8983a 	sll	r4,r18,r23
 4030140:	a0806217 	ldw	r2,392(r20)
 4030144:	a5800117 	ldw	r22,4(r20)
 4030148:	2084703a 	and	r2,r4,r2
 403014c:	10000b26 	beq	r2,zero,403017c <__call_exitprocs+0x14c>
 4030150:	a0806317 	ldw	r2,396(r20)
 4030154:	2088703a 	and	r4,r4,r2
 4030158:	20000c1e 	bne	r4,zero,403018c <__call_exitprocs+0x15c>
 403015c:	89400017 	ldw	r5,0(r17)
 4030160:	d9000017 	ldw	r4,0(sp)
 4030164:	183ee83a 	callr	r3
 4030168:	a0800117 	ldw	r2,4(r20)
 403016c:	15bfbf1e 	bne	r2,r22,403006c <__alt_data_end+0xffff006c>
 4030170:	98800017 	ldw	r2,0(r19)
 4030174:	153fcf26 	beq	r2,r20,40300b4 <__alt_data_end+0xffff00b4>
 4030178:	003fbc06 	br	403006c <__alt_data_end+0xffff006c>
 403017c:	183ee83a 	callr	r3
 4030180:	003ff906 	br	4030168 <__alt_data_end+0xffff0168>
 4030184:	a5c00115 	stw	r23,4(r20)
 4030188:	003feb06 	br	4030138 <__alt_data_end+0xffff0138>
 403018c:	89000017 	ldw	r4,0(r17)
 4030190:	183ee83a 	callr	r3
 4030194:	003ff406 	br	4030168 <__alt_data_end+0xffff0168>
 4030198:	a0800017 	ldw	r2,0(r20)
 403019c:	a027883a 	mov	r19,r20
 40301a0:	1029883a 	mov	r20,r2
 40301a4:	003fb606 	br	4030080 <__alt_data_end+0xffff0080>
 40301a8:	0005883a 	mov	r2,zero
 40301ac:	003ffb06 	br	403019c <__alt_data_end+0xffff019c>

040301b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40301b0:	defffd04 	addi	sp,sp,-12
 40301b4:	df000215 	stw	fp,8(sp)
 40301b8:	df000204 	addi	fp,sp,8
 40301bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40301c0:	0001883a 	nop
 40301c4:	e0bfff17 	ldw	r2,-4(fp)
 40301c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40301cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40301d0:	10000226 	beq	r2,zero,40301dc <_exit+0x2c>
    ALT_SIM_FAIL();
 40301d4:	002af070 	cmpltui	zero,zero,43969
 40301d8:	00000106 	br	40301e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40301dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40301e0:	003fff06 	br	40301e0 <__alt_data_end+0xffff01e0>

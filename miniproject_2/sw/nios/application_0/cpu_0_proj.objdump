
cpu_0_proj.elf:     file format elf32-littlenios2
cpu_0_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020248

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00013968 memsz 0x00013968 flags r-x
    LOAD off    0x00014988 vaddr 0x04033988 paddr 0x040355c4 align 2**12
         filesz 0x00001c3c memsz 0x00001c3c flags rw-
    LOAD off    0x00017200 vaddr 0x04037200 paddr 0x04037200 align 2**12
         filesz 0x00000000 memsz 0x00000190 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012cb0  04020248  04020248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a90  04032ef8  04032ef8  00013ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c3c  04033988  040355c4  00014988  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000190  04037200  04037200  00017200  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00000000  00000000  000165c4  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04037390  04037390  000165c4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000165c4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001058  00000000  00000000  000165e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027190  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009ff8  00000000  00000000  0003e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ca67  00000000  00000000  000487c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002ca4  00000000  00000000  00055230  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000046ed  00000000  00000000  00057ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001977f  00000000  00000000  0005c5c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00075d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b90  00000000  00000000  00075da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007b92e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0007b931  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007b936  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007b937  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0007b938  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0007b943  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0007b94e  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0007b959  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  0007b963  2**0
                  CONTENTS, READONLY
 27 .jdi          0000b01f  00000000  00000000  0007b983  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c2caf  00000000  00000000  000869a2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020248 l    d  .text	00000000 .text
04032ef8 l    d  .rodata	00000000 .rodata
04033988 l    d  .rwdata	00000000 .rwdata
04037200 l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_2	00000000 .sdram_controller_2
04037390 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/miniproject_2/sw/nios/cpu_0_proj_bsp//obj/HAL/src/crt0.o
04020290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0403363e l     O .rodata	00000010 zeroes.4404
040241fc l     F .text	000000bc __sbprintf
0403364e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0402440c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04025f3c l     F .text	00000008 __fp_unlock
04025f50 l     F .text	0000019c __sinit.part.1
040260ec l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04033988 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04033dcc l     O .rwdata	00000020 lc_ctype_charset
04033dac l     O .rwdata	00000020 lc_message_charset
04033dec l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04033680 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04028a04 l     F .text	000000fc __sprint_r.part.0
040337b4 l     O .rodata	00000010 blanks.4348
040337a4 l     O .rodata	00000010 zeroes.4349
04029f90 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0402e764 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0402e8b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402e8e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0402eb50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402ec30 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402ed1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0402f158 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040355b0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402f3d4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402f508 l     F .text	00000034 alt_dev_reg
040343d4 l     O .rwdata	00001060 jtag_uart_0
04035434 l     O .rwdata	00000048 mailbox_simple_0
0403547c l     O .rwdata	00000048 mailbox_simple_1
040354c4 l     O .rwdata	00000030 audio_and_video_config_0
040354f4 l     O .rwdata	00000030 audio_0
04035524 l     O .rwdata	0000002c parallel_port_0
04035550 l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402f83c l     F .text	00000210 altera_avalon_jtag_uart_irq
0402fa4c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
04030084 l     F .text	00000090 altera_avalon_mailbox_identify
04030114 l     F .text	00000078 altera_avalon_mailbox_post
0403018c l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
040302c8 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04031ef4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04032158 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
04032298 l     F .text	0000003c alt_get_errno
040322d4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
04037264 g     O .bss	00000004 alt_instruction_exception_handler
04031438 g     F .text	00000038 alt_up_av_config_reset
04028514 g     F .text	00000074 _mprec_log10
04031890 g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
04030730 g     F .text	00000150 altera_avalon_mailbox_send
04028600 g     F .text	0000008c __any_on
0402a9e8 g     F .text	00000054 _isatty_r
0403368c g     O .rodata	00000028 __mprec_tinytens
040314a8 g     F .text	00000034 alt_up_av_config_disable_interrupt
0402ee2c g     F .text	0000007c alt_main
04020598 g     F .text	000000c8 check_core_status
04037290 g     O .bss	00000100 alt_irq
0402aa3c g     F .text	00000060 _lseek_r
040355c4 g       *ABS*	00000000 __flash_rwdata_start
0402d2f4 g     F .text	00000088 .hidden __eqdf2
04030df4 g     F .text	00000060 alt_up_audio_read_fifo_avail
0403156c g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
04037390 g       *ABS*	00000000 __alt_heap_start
04021fac g     F .text	0000003c printf
04020ee8 g     F .text	00000054 setup_switch_interrupts
04030e54 g     F .text	00000068 alt_up_audio_record_r
0402b314 g     F .text	0000009c _wcrtomb_r
0402882c g     F .text	0000005c __sseek
0402628c g     F .text	00000010 __sinit
04030b28 g     F .text	00000024 alt_get_cpu_freq
0402b1bc g     F .text	00000140 __swbuf_r
04026898 g     F .text	0000007c _setlocale_r
040260f4 g     F .text	00000068 __sfmoreglue
0402eecc g     F .text	00000024 __malloc_unlock
04020fc4 g     F .text	00000440 .hidden __divsf3
04030d60 g     F .text	00000094 alt_up_audio_reset_audio_core
0402aa9c g     F .text	0000015c memmove
040319f0 g     F .text	00000280 perf_print_formatted_report
04026274 g     F .text	00000018 _cleanup
04027690 g     F .text	000000a8 _Balloc
0403720c g     O .bss	00000004 success_rate
0402d37c g     F .text	000000dc .hidden __gtdf2
04032690 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
0402a4d0 g     F .text	0000005c _fstat_r
04037248 g     O .bss	00000004 errno
040287a8 g     F .text	00000008 __seofread
04020370 g     F .text	00000060 receive_callback
04030d20 g     F .text	00000040 alt_up_audio_write_interrupt_pending
04037254 g     O .bss	00000004 alt_argv
0403d57c g       *ABS*	00000000 _gp
0402f3a4 g     F .text	00000030 usleep
04030880 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04021800 g     F .text	000004e4 .hidden __subsf3
04037210 g     O .bss	00000004 error_rate
04034254 g     O .rwdata	00000180 alt_fd_list
04032094 g     F .text	00000090 alt_find_dev
04027420 g     F .text	00000148 memcpy
040206a0 g     F .text	00000210 record_process
04025f44 g     F .text	0000000c _cleanup_r
0402e5e0 g     F .text	000000dc .hidden __floatsidf
0403221c g     F .text	0000007c alt_io_redirect
0402d458 g     F .text	000000f4 .hidden __ltdf2
04032ef8 g       *ABS*	00000000 __DTOR_END__
040328f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04020660 g     F .text	00000040 reset_core
04030374 g     F .text	00000078 altera_avalon_mailbox_simple_init
0402868c g     F .text	00000074 __fpclassifyd
04028470 g     F .text	000000a4 __ratio
04029f74 g     F .text	0000001c __vfiprintf_internal
0403123c g     F .text	00000050 alt_up_audio_read_fifo_head
0402fc44 g     F .text	0000021c altera_avalon_jtag_uart_read
04021f7c g     F .text	00000030 _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0402c0a4 g     F .text	00000064 .hidden __udivsi3
0402eb8c g     F .text	000000a4 isatty
040336dc g     O .rodata	000000c8 __mprec_tens
040306b8 g     F .text	00000078 altera_avalon_mailbox_status
040305b0 g     F .text	00000108 altera_avalon_mailbox_close
04026914 g     F .text	0000000c __locale_charset
04020520 g     F .text	00000078 reset_config_device
04032860 g     F .text	00000090 alt_icache_flush
04037244 g     O .bss	00000004 __malloc_top_pad
04030ac4 g     F .text	00000040 perf_get_num_starts
040313b8 g     F .text	00000080 alt_up_av_config_read_data
04035584 g     O .rwdata	00000004 __mb_cur_max
04026944 g     F .text	0000000c _localeconv_r
0402a52c g     F .text	000004bc __sfvwrite_r
04027a9c g     F .text	0000003c __i2b
04037214 g     O .bss	00000004 audio_dev
04028700 g     F .text	00000054 _sbrk_r
0402abf8 g     F .text	00000060 _read_r
040355a4 g     O .rwdata	00000004 alt_max_fd
0403128c g     F .text	00000068 alt_up_audio_write_fifo_head
0402a1c4 g     F .text	000000f0 _fclose_r
04025f0c g     F .text	00000030 fflush
04037240 g     O .bss	00000004 __malloc_max_sbrked_mem
0402e9d0 g     F .text	00000180 alt_irq_register
04021e08 g     F .text	00000110 .hidden __extendsfdf2
0402c160 g     F .text	000008ac .hidden __adddf3
04020e7c g     F .text	0000006c isr_switches
04028218 g     F .text	0000010c __b2d
0402ba74 g     F .text	00000538 .hidden __umoddi3
0402ed58 g     F .text	000000d4 lseek
0403557c g     O .rwdata	00000004 _global_impure_ptr
0402ac58 g     F .text	00000564 _realloc_r
04037390 g       *ABS*	00000000 __bss_end
04032588 g     F .text	00000108 alt_tick
0402b4fc g     F .text	00000578 .hidden __udivdi3
0402a42c g     F .text	00000024 _fputwc_r
040336b4 g     O .rodata	00000028 __mprec_bigtens
04027880 g     F .text	00000104 __s2b
0402e6bc g     F .text	000000a8 .hidden __floatunsidf
04027f58 g     F .text	00000060 __mcmp
04030b4c g     F .text	0000003c alt_up_audio_open_dev
040262ac g     F .text	00000018 __fp_lock_all
04030f84 g     F .text	00000068 alt_up_audio_play_r
040324ec g     F .text	0000009c alt_alarm_stop
0403724c g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d8 alt_irq_handler
0403422c g     O .rwdata	00000028 alt_dev_null
0402e870 g     F .text	00000048 alt_dcache_flush_all
04027984 g     F .text	00000068 __hi0bits
0402e560 g     F .text	00000080 .hidden __fixdfsi
040355c4 g       *ABS*	00000000 __ram_rwdata_end
0403559c g     O .rwdata	00000008 alt_dev_list
0402f410 g     F .text	000000f8 write
04032a54 g     F .text	000000a0 _putc_r
04033988 g       *ABS*	00000000 __ram_rodata_end
0402e920 g     F .text	000000b0 fstat
0402d458 g     F .text	000000f4 .hidden __ledf2
04027cd0 g     F .text	00000140 __pow5mult
04028b18 g     F .text	0000145c ___vfiprintf_internal_r
04037238 g     O .bss	00000004 __nlocale_changed
0402c108 g     F .text	00000058 .hidden __umodsi3
04037390 g       *ABS*	00000000 end
0402f788 g     F .text	000000b4 altera_avalon_jtag_uart_init
040201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
04032ef8 g       *ABS*	00000000 __CTOR_LIST__
04040000 g       *ABS*	00000000 __alt_stack_pointer
04021f18 g     F .text	00000064 .hidden __clzsi2
0402fe60 g     F .text	00000224 altera_avalon_jtag_uart_write
0402629c g     F .text	00000004 __sfp_lock_acquire
0402733c g     F .text	000000e4 memchr
04021fe8 g     F .text	000021f8 ___vfprintf_internal_r
04020c40 g     F .text	0000023c choose_task
04026400 g     F .text	00000310 _free_r
0402eef0 g     F .text	0000022c alt_printf
04026920 g     F .text	00000010 __locale_mb_cur_max
04032cd4 g     F .text	00000180 __call_exitprocs
04037234 g     O .bss	00000004 __mlocale_changed
04035588 g     O .rwdata	00000004 __malloc_sbrk_base
04020248 g     F .text	0000004c _start
0403725c g     O .bss	00000004 _alt_tick_rate
04032e54 g     F .text	00000070 .hidden __floatundidf
04031134 g     F .text	00000108 alt_up_audio_write_fifo
04027e10 g     F .text	00000148 __lshift
04031354 g     F .text	00000064 alt_up_av_config_write_data
04037260 g     O .bss	00000004 _alt_nticks
0402f194 g     F .text	000000fc read
0402f574 g     F .text	000000b0 alt_sys_init
04021ce4 g     F .text	00000124 .hidden __floatsisf
04031054 g     F .text	000000e0 alt_up_audio_read_fifo
04037200 g     O .bss	00000004 audio_ready_flag
04032bbc g     F .text	00000118 __register_exitproc
04031998 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
04030c88 g     F .text	00000058 alt_up_audio_disable_write_interrupt
040203d0 g     F .text	00000054 receive_mail
04027ad8 g     F .text	000001f8 __multiply
0402faec g     F .text	00000068 altera_avalon_jtag_uart_close
04033988 g       *ABS*	00000000 __ram_rwdata_start
04032ef8 g       *ABS*	00000000 __ram_rodata_start
04037268 g     O .bss	00000028 __malloc_current_mallinfo
04028324 g     F .text	0000014c __d2b
0402f624 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040327bc g     F .text	000000a4 alt_get_fd
04037208 g     O .bss	00000004 dataword
04031d9c g     F .text	00000158 alt_busy_sleep
0402a0ac g     F .text	00000054 _close_r
04030c34 g     F .text	00000054 alt_up_audio_enable_write_interrupt
040309bc g     F .text	000000bc perf_get_section_time
040329d8 g     F .text	0000007c memcmp
0402f6e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04037390 g       *ABS*	00000000 __alt_stack_base
0402f734 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
040242b8 g     F .text	00000154 __swsetup_r
0402ca0c g     F .text	000008e8 .hidden __divdf3
04030bdc g     F .text	00000058 alt_up_audio_disable_read_interrupt
04037218 g     O .bss	00000008 mail_send
0402615c g     F .text	00000118 __sfp
04028588 g     F .text	00000078 __copybits
04030a78 g     F .text	0000004c perf_get_total_time
04033e24 g     O .rwdata	00000408 __malloc_av_
040262a8 g     F .text	00000004 __sinit_lock_release
0402d54c g     F .text	00000718 .hidden __muldf3
04028754 g     F .text	00000054 __sread
04020484 g     F .text	0000009c check_config_status
040326b4 g     F .text	00000108 alt_find_file
04031f30 g     F .text	000000a4 alt_dev_llist_insert
0402eea8 g     F .text	00000024 __malloc_lock
0402f2f4 g     F .text	000000b0 sbrk
04025eb0 g     F .text	0000005c _fflush_r
0402a100 g     F .text	000000c4 _calloc_r
04037204 g     O .bss	00000004 choice
04037200 g       *ABS*	00000000 __bss_start
04027568 g     F .text	00000128 memset
04020f70 g     F .text	00000054 main
04030f24 g     F .text	00000060 alt_up_audio_write_fifo_space
04037258 g     O .bss	00000004 alt_envp
04020424 g     F .text	00000060 setup_audio
0403723c g     O .bss	00000004 __malloc_max_total_mem
0402f684 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0402b2fc g     F .text	00000018 __swbuf
04020294 g     F .text	00000064 send_callback
04028888 g     F .text	00000008 __sclose
04040000 g       *ABS*	00000000 __alt_heap_limit
0402a2b4 g     F .text	00000014 fclose
0402460c g     F .text	00001688 _dtoa_r
04026b30 g     F .text	0000080c _malloc_r
0402b470 g     F .text	00000030 __ascii_wctomb
04020998 g     F .text	000000fc play_audio
040355a8 g     O .rwdata	00000004 alt_errno
040208b0 g     F .text	000000e8 record_audio_snippet
04026710 g     F .text	000000c4 _fwalk
04032af4 g     F .text	000000c8 putc
0402bfac g     F .text	00000084 .hidden __divsi3
040262dc g     F .text	00000124 _malloc_trim_r
04032ef8 g       *ABS*	00000000 __CTOR_END__
04021404 g     F .text	000003fc .hidden __mulsf3
04028890 g     F .text	000000dc strcmp
04032ef8 g       *ABS*	00000000 __flash_rodata_start
04032ef8 g       *ABS*	00000000 __DTOR_LIST__
04020f3c g     F .text	00000034 min
0402d2f4 g     F .text	00000088 .hidden __nedf2
040312f4 g     F .text	00000060 alt_up_av_config_open_dev
0402f53c g     F .text	00000038 alt_irq_init
0402f290 g     F .text	00000064 alt_release_fd
040334fa g     O .rodata	00000100 .hidden __clz_tab
04037230 g     O .bss	00000004 _PathLocale
0403298c g     F .text	00000014 atexit
0402a04c g     F .text	00000060 _write_r
04031534 g     F .text	00000038 alt_up_av_config_read_ready
04026950 g     F .text	00000018 setlocale
04035580 g     O .rwdata	00000004 _impure_ptr
04037250 g     O .bss	00000004 alt_argc
04025c94 g     F .text	0000021c __sflush_r
04032034 g     F .text	00000060 _do_dtors
04037220 g     O .bss	00000008 ready_audio
0402693c g     F .text	00000008 __locale_cjk_lang
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
04020020 g       .exceptions	00000000 alt_irq_entry
040281b4 g     F .text	00000064 __ulp
040262c4 g     F .text	00000018 __fp_unlock_all
04037228 g     O .bss	00000008 mail_receive
04035594 g     O .rwdata	00000008 alt_fs_list
04030ebc g     F .text	00000068 alt_up_audio_record_l
04020020 g       *ABS*	00000000 __ram_exceptions_start
04026968 g     F .text	0000000c localeconv
04031470 g     F .text	00000038 alt_up_av_config_enable_interrupt
040202f8 g     F .text	00000078 send_mail
040314dc g     F .text	00000058 alt_up_av_config_read_acknowledge
04031838 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
040355c4 g       *ABS*	00000000 _edata
04037390 g       *ABS*	00000000 _end
0402a2c8 g     F .text	00000164 __fputwc
04020248 g       *ABS*	00000000 __ram_exceptions_end
0402fb54 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04030fec g     F .text	00000068 alt_up_audio_play_l
040355b4 g     O .rwdata	00000008 alt_mailbox_simple_list
040287b0 g     F .text	0000007c __swrite
0403558c g     O .rwdata	00000004 __malloc_trim_threshold
04030b04 g     F .text	00000024 alt_get_performance_counter_base
04026930 g     F .text	0000000c __locale_msgcharset
040329a0 g     F .text	00000038 exit
040267d4 g     F .text	000000c4 _fwalk_reent
04027fb8 g     F .text	000001fc __mdiff
04031940 g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
0402c030 g     F .text	00000074 .hidden __modsi3
04040000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
040262a0 g     F .text	00000004 __sfp_lock_release
040303ec g     F .text	000001c4 altera_avalon_mailbox_open
04032ec4 g     F .text	00000034 _exit
04031c70 g     F .text	0000012c alt_alarm_start
04026974 g     F .text	000001bc __smakebuf_r
0402896c g     F .text	00000098 strlen
04032398 g     F .text	00000154 open
0402d37c g     F .text	000000dc .hidden __gedf2
0402f11c g     F .text	0000003c alt_putchar
04031610 g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
04035590 g     O .rwdata	00000004 __wctomb
04028b00 g     F .text	00000018 __sprint_r
04032124 g     F .text	00000034 alt_icache_flush_all
040355ac g     O .rwdata	00000004 alt_priority_mask
040241e0 g     F .text	0000001c __vfprintf_internal
04020a94 g     F .text	000001ac test_audio_processing
040318e8 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
0402b4a0 g     F .text	0000005c _wctomb_r
0402dc64 g     F .text	000008fc .hidden __subdf3
040279ec g     F .text	000000b0 __lo0bits
040355bc g     O .rwdata	00000008 alt_alarm_list
04031fd4 g     F .text	00000060 _do_ctors
0402b3b0 g     F .text	000000c0 wcrtomb
0402e7a0 g     F .text	000000d0 close
0402ec98 g     F .text	00000084 alt_load
04030b88 g     F .text	00000054 alt_up_audio_enable_read_interrupt
040316f8 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
0402a450 g     F .text	00000080 fputwc
040262a4 g     F .text	00000004 __sinit_lock_acquire
04027760 g     F .text	00000120 __multadd
04027738 g     F .text	00000028 _Bfree
040317e0 g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
04030ce0 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409214 	ori	at,at,584
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d40 	call	40201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001526 	beq	r2,zero,4020190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 402013c:	008100f4 	movhi	r2,1027
 4020140:	109ca404 	addi	r2,r2,29328
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100f4 	movhi	r2,1027
 4020158:	109ca404 	addi	r2,r2,29328
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	e17ffd17 	ldw	r5,-12(fp)
 4020174:	1009883a 	mov	r4,r2
 4020178:	183ee83a 	callr	r3
#endif
        break;
 402017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020180:	0005313a 	rdctl	r2,ipending
 4020184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020188:	e0bfff17 	ldw	r2,-4(fp)
 402018c:	00000706 	br	40201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 4020190:	e0bffc17 	ldw	r2,-16(fp)
 4020194:	1085883a 	add	r2,r2,r2
 4020198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 402019c:	e0bffd17 	ldw	r2,-12(fp)
 40201a0:	10800044 	addi	r2,r2,1
 40201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a8:	003fe006 	br	402012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 40201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201b0:	e0bffb17 	ldw	r2,-20(fp)
 40201b4:	103fda1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b8:	0001883a 	nop
}
 40201bc:	0001883a 	nop
 40201c0:	e037883a 	mov	sp,fp
 40201c4:	dfc00117 	ldw	ra,4(sp)
 40201c8:	df000017 	ldw	fp,0(sp)
 40201cc:	dec00204 	addi	sp,sp,8
 40201d0:	f800283a 	ret

040201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d4:	defffb04 	addi	sp,sp,-20
 40201d8:	dfc00415 	stw	ra,16(sp)
 40201dc:	df000315 	stw	fp,12(sp)
 40201e0:	df000304 	addi	fp,sp,12
 40201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e8:	000531fa 	rdctl	r2,exception
 40201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201f0:	e0bffd17 	ldw	r2,-12(fp)
 40201f4:	10801f0c 	andi	r2,r2,124
 40201f8:	1004d0ba 	srli	r2,r2,2
 40201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4020200:	0005333a 	rdctl	r2,badaddr
 4020204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020208:	d0a73a17 	ldw	r2,-25368(gp)
 402020c:	10000726 	beq	r2,zero,402022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4020210:	d0a73a17 	ldw	r2,-25368(gp)
 4020214:	e0fffd17 	ldw	r3,-12(fp)
 4020218:	e1bffe17 	ldw	r6,-8(fp)
 402021c:	e17fff17 	ldw	r5,-4(fp)
 4020220:	1809883a 	mov	r4,r3
 4020224:	103ee83a 	callr	r2
 4020228:	00000206 	br	4020234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 402022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020230:	0005883a 	mov	r2,zero
}
 4020234:	e037883a 	mov	sp,fp
 4020238:	dfc00117 	ldw	ra,4(sp)
 402023c:	df000017 	ldw	fp,0(sp)
 4020240:	dec00204 	addi	sp,sp,8
 4020244:	f800283a 	ret

Disassembly of section .text:

04020248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 402024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4020250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020254:	00bffd16 	blt	zero,r2,402024c <__alt_data_end+0xfffe024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020258:	06c10134 	movhi	sp,1028
    ori sp, sp, %lo(__alt_stack_pointer)
 402025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020260:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4020264:	d6b55f14 	ori	gp,gp,54652
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020268:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 402026c:	109c8014 	ori	r2,r2,29184

    movhi r3, %hi(__bss_end)
 4020270:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4020274:	18dce414 	ori	r3,r3,29584

    beq r2, r3, 1f
 4020278:	10c00326 	beq	r2,r3,4020288 <_start+0x40>

0:
    stw zero, (r2)
 402027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020284:	10fffd36 	bltu	r2,r3,402027c <__alt_data_end+0xfffe027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020288:	402ec980 	call	402ec98 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 402028c:	402ee2c0 	call	402ee2c <alt_main>

04020290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020290:	003fff06 	br	4020290 <__alt_data_end+0xfffe0290>

04020294 <send_callback>:
// -------------------------- Function definitions ----------------------------

// Mailbox functions

void send_callback(void* report, int status)
{
 4020294:	defffc04 	addi	sp,sp,-16
 4020298:	dfc00315 	stw	ra,12(sp)
 402029c:	df000215 	stw	fp,8(sp)
 40202a0:	df000204 	addi	fp,sp,8
 40202a4:	e13ffe15 	stw	r4,-8(fp)
 40202a8:	e17fff15 	stw	r5,-4(fp)
	if(!status)
 40202ac:	e0bfff17 	ldw	r2,-4(fp)
 40202b0:	1000081e 	bne	r2,zero,40202d4 <send_callback+0x40>
	{
		alt_printf("Sending completed, contents are %x and %x \n", mail_send[0], mail_send[1]);
 40202b4:	d0a72717 	ldw	r2,-25444(gp)
 40202b8:	d0e72817 	ldw	r3,-25440(gp)
 40202bc:	180d883a 	mov	r6,r3
 40202c0:	100b883a 	mov	r5,r2
 40202c4:	010100f4 	movhi	r4,1027
 40202c8:	210bbe04 	addi	r4,r4,12024
 40202cc:	402eef00 	call	402eef0 <alt_printf>
	}
	else
	{
		alt_printf("Sending error.\n");
	}
}
 40202d0:	00000306 	br	40202e0 <send_callback+0x4c>
	{
		alt_printf("Sending completed, contents are %x and %x \n", mail_send[0], mail_send[1]);
	}
	else
	{
		alt_printf("Sending error.\n");
 40202d4:	010100f4 	movhi	r4,1027
 40202d8:	210bc904 	addi	r4,r4,12068
 40202dc:	402eef00 	call	402eef0 <alt_printf>
	}
}
 40202e0:	0001883a 	nop
 40202e4:	e037883a 	mov	sp,fp
 40202e8:	dfc00117 	ldw	ra,4(sp)
 40202ec:	df000017 	ldw	fp,0(sp)
 40202f0:	dec00204 	addi	sp,sp,8
 40202f4:	f800283a 	ret

040202f8 <send_mail>:

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
 40202f8:	defff904 	addi	sp,sp,-28
 40202fc:	dfc00615 	stw	ra,24(sp)
 4020300:	df000515 	stw	fp,20(sp)
 4020304:	df000504 	addi	fp,sp,20
 4020308:	e13ffe15 	stw	r4,-8(fp)
 402030c:	e17fff15 	stw	r5,-4(fp)
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/mailbox_simple_0", NULL, NULL);
 4020310:	000d883a 	mov	r6,zero
 4020314:	000b883a 	mov	r5,zero
 4020318:	010100f4 	movhi	r4,1027
 402031c:	210bcd04 	addi	r4,r4,12084
 4020320:	40303ec0 	call	40303ec <altera_avalon_mailbox_open>
 4020324:	e0bffb15 	stw	r2,-20(fp)
	// Create mail "envelope"
	alt_u32 mail_send[2] = {start_addr, storage_length};
 4020328:	e0bffe17 	ldw	r2,-8(fp)
 402032c:	e0bffc15 	stw	r2,-16(fp)
 4020330:	e0bfff17 	ldw	r2,-4(fp)
 4020334:	e0bffd15 	stw	r2,-12(fp)
	// Send message
	altera_avalon_mailbox_send(mailbox_AudioToSigProc, mail_send, 0, POLL);
 4020338:	e0bffc04 	addi	r2,fp,-16
 402033c:	01c00044 	movi	r7,1
 4020340:	000d883a 	mov	r6,zero
 4020344:	100b883a 	mov	r5,r2
 4020348:	e13ffb17 	ldw	r4,-20(fp)
 402034c:	40307300 	call	4030730 <altera_avalon_mailbox_send>
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_AudioToSigProc);
 4020350:	e13ffb17 	ldw	r4,-20(fp)
 4020354:	40305b00 	call	40305b0 <altera_avalon_mailbox_close>
}
 4020358:	0001883a 	nop
 402035c:	e037883a 	mov	sp,fp
 4020360:	dfc00117 	ldw	ra,4(sp)
 4020364:	df000017 	ldw	fp,0(sp)
 4020368:	dec00204 	addi	sp,sp,8
 402036c:	f800283a 	ret

04020370 <receive_callback>:

void receive_callback(void* message)
{
 4020370:	defffd04 	addi	sp,sp,-12
 4020374:	dfc00215 	stw	ra,8(sp)
 4020378:	df000115 	stw	fp,4(sp)
 402037c:	df000104 	addi	fp,sp,4
 4020380:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4020384:	e0bfff17 	ldw	r2,-4(fp)
 4020388:	10000826 	beq	r2,zero,40203ac <receive_callback+0x3c>
	{
		alt_printf("Receiving completed, contents are %x and %x \n", mail_receive[0], mail_receive[1]);
 402038c:	d0a72b17 	ldw	r2,-25428(gp)
 4020390:	d0e72c17 	ldw	r3,-25424(gp)
 4020394:	180d883a 	mov	r6,r3
 4020398:	100b883a 	mov	r5,r2
 402039c:	010100f4 	movhi	r4,1027
 40203a0:	210bd304 	addi	r4,r4,12108
 40203a4:	402eef00 	call	402eef0 <alt_printf>
	}
	else
	{
		alt_printf("Receiving error.\n");
	}
}
 40203a8:	00000306 	br	40203b8 <receive_callback+0x48>
	{
		alt_printf("Receiving completed, contents are %x and %x \n", mail_receive[0], mail_receive[1]);
	}
	else
	{
		alt_printf("Receiving error.\n");
 40203ac:	010100f4 	movhi	r4,1027
 40203b0:	210bdf04 	addi	r4,r4,12156
 40203b4:	402eef00 	call	402eef0 <alt_printf>
	}
}
 40203b8:	0001883a 	nop
 40203bc:	e037883a 	mov	sp,fp
 40203c0:	dfc00117 	ldw	ra,4(sp)
 40203c4:	df000017 	ldw	fp,0(sp)
 40203c8:	dec00204 	addi	sp,sp,8
 40203cc:	f800283a 	ret

040203d0 <receive_mail>:

void receive_mail()
{
 40203d0:	defffd04 	addi	sp,sp,-12
 40203d4:	dfc00215 	stw	ra,8(sp)
 40203d8:	df000115 	stw	fp,4(sp)
 40203dc:	df000104 	addi	fp,sp,4
	// Open mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/mailbox_simple_1", NULL, NULL);
 40203e0:	000d883a 	mov	r6,zero
 40203e4:	000b883a 	mov	r5,zero
 40203e8:	010100f4 	movhi	r4,1027
 40203ec:	210be404 	addi	r4,r4,12176
 40203f0:	40303ec0 	call	40303ec <altera_avalon_mailbox_open>
 40203f4:	e0bfff15 	stw	r2,-4(fp)
	// Wait for mail confirming the processing is complete
	altera_avalon_mailbox_retrieve_poll(mailbox_SigProcToAudio, mail_receive, 0);
 40203f8:	000d883a 	mov	r6,zero
 40203fc:	d1672b04 	addi	r5,gp,-25428
 4020400:	e13fff17 	ldw	r4,-4(fp)
 4020404:	40308800 	call	4030880 <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 4020408:	402e8700 	call	402e870 <alt_dcache_flush_all>
}
 402040c:	0001883a 	nop
 4020410:	e037883a 	mov	sp,fp
 4020414:	dfc00117 	ldw	ra,4(sp)
 4020418:	df000017 	ldw	fp,0(sp)
 402041c:	dec00204 	addi	sp,sp,8
 4020420:	f800283a 	ret

04020424 <setup_audio>:

// Audio setup functions

void setup_audio(alt_up_audio_dev * audio_dev)
{
 4020424:	defffd04 	addi	sp,sp,-12
 4020428:	dfc00215 	stw	ra,8(sp)
 402042c:	df000115 	stw	fp,4(sp)
 4020430:	df000104 	addi	fp,sp,4
 4020434:	e13fff15 	stw	r4,-4(fp)
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
 4020438:	010100f4 	movhi	r4,1027
 402043c:	210bea04 	addi	r4,r4,12200
 4020440:	4030b4c0 	call	4030b4c <alt_up_audio_open_dev>
 4020444:	e0bfff15 	stw	r2,-4(fp)
	if ( audio_dev == NULL)
 4020448:	e0bfff17 	ldw	r2,-4(fp)
 402044c:	1000041e 	bne	r2,zero,4020460 <setup_audio+0x3c>
		alt_printf("Error: could not open audio device \n");
 4020450:	010100f4 	movhi	r4,1027
 4020454:	210bee04 	addi	r4,r4,12216
 4020458:	402eef00 	call	402eef0 <alt_printf>
	else
		alt_printf("Opened audio device \n");
}
 402045c:	00000306 	br	402046c <setup_audio+0x48>
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
	if ( audio_dev == NULL)
		alt_printf("Error: could not open audio device \n");
	else
		alt_printf("Opened audio device \n");
 4020460:	010100f4 	movhi	r4,1027
 4020464:	210bf804 	addi	r4,r4,12256
 4020468:	402eef00 	call	402eef0 <alt_printf>
}
 402046c:	0001883a 	nop
 4020470:	e037883a 	mov	sp,fp
 4020474:	dfc00117 	ldw	ra,4(sp)
 4020478:	df000017 	ldw	fp,0(sp)
 402047c:	dec00204 	addi	sp,sp,8
 4020480:	f800283a 	ret

04020484 <check_config_status>:

void check_config_status()
{
 4020484:	defffa04 	addi	sp,sp,-24
 4020488:	dfc00515 	stw	ra,20(sp)
 402048c:	df000415 	stw	fp,16(sp)
 4020490:	df000404 	addi	fp,sp,16
	alt_printf("Checking the settings of the Audio and Video Config device... \n");
 4020494:	010100f4 	movhi	r4,1027
 4020498:	210bfe04 	addi	r4,r4,12280
 402049c:	402eef00 	call	402eef0 <alt_printf>
	alt_up_av_config_dev* config_device = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 40204a0:	010100f4 	movhi	r4,1027
 40204a4:	210c0e04 	addi	r4,r4,12344
 40204a8:	40312f40 	call	40312f4 <alt_up_av_config_open_dev>
 40204ac:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 status = IORD_32DIRECT(AUDIO_AND_VIDEO_CONFIG_0_BASE, 4);
 40204b0:	00810134 	movhi	r2,1028
 40204b4:	10843504 	addi	r2,r2,4308
 40204b8:	10800037 	ldwio	r2,0(r2)
 40204bc:	e0bffd15 	stw	r2,-12(fp)
	alt_printf("The status register is %x \n", status);
 40204c0:	e17ffd17 	ldw	r5,-12(fp)
 40204c4:	010100f4 	movhi	r4,1027
 40204c8:	210c1604 	addi	r4,r4,12376
 40204cc:	402eef00 	call	402eef0 <alt_printf>
	int ready = alt_up_av_config_read_ready(config_device);
 40204d0:	e13ffc17 	ldw	r4,-16(fp)
 40204d4:	40315340 	call	4031534 <alt_up_av_config_read_ready>
 40204d8:	e0bffe15 	stw	r2,-8(fp)
	alt_printf("The Ready bit is %x \n", ready);
 40204dc:	e17ffe17 	ldw	r5,-8(fp)
 40204e0:	010100f4 	movhi	r4,1027
 40204e4:	210c1d04 	addi	r4,r4,12404
 40204e8:	402eef00 	call	402eef0 <alt_printf>
	int ackbit = alt_up_av_config_read_acknowledge(config_device);
 40204ec:	e13ffc17 	ldw	r4,-16(fp)
 40204f0:	40314dc0 	call	40314dc <alt_up_av_config_read_acknowledge>
 40204f4:	e0bfff15 	stw	r2,-4(fp)
	alt_printf("The Acknowledge bit is %x \n", ackbit);
 40204f8:	e17fff17 	ldw	r5,-4(fp)
 40204fc:	010100f4 	movhi	r4,1027
 4020500:	210c2304 	addi	r4,r4,12428
 4020504:	402eef00 	call	402eef0 <alt_printf>
}
 4020508:	0001883a 	nop
 402050c:	e037883a 	mov	sp,fp
 4020510:	dfc00117 	ldw	ra,4(sp)
 4020514:	df000017 	ldw	fp,0(sp)
 4020518:	dec00204 	addi	sp,sp,8
 402051c:	f800283a 	ret

04020520 <reset_config_device>:

void reset_config_device()
{
 4020520:	defffc04 	addi	sp,sp,-16
 4020524:	dfc00315 	stw	ra,12(sp)
 4020528:	df000215 	stw	fp,8(sp)
 402052c:	df000204 	addi	fp,sp,8
	alt_up_av_config_dev* config_device = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 4020530:	010100f4 	movhi	r4,1027
 4020534:	210c0e04 	addi	r4,r4,12344
 4020538:	40312f40 	call	40312f4 <alt_up_av_config_open_dev>
 402053c:	e0bffe15 	stw	r2,-8(fp)
	alt_printf("Resetting Audio and Video Config device... \n");
 4020540:	010100f4 	movhi	r4,1027
 4020544:	210c2a04 	addi	r4,r4,12456
 4020548:	402eef00 	call	402eef0 <alt_printf>
	int reset = alt_up_av_config_reset(config_device);
 402054c:	e13ffe17 	ldw	r4,-8(fp)
 4020550:	40314380 	call	4031438 <alt_up_av_config_reset>
 4020554:	e0bfff15 	stw	r2,-4(fp)
	if(reset == 0)
 4020558:	e0bfff17 	ldw	r2,-4(fp)
 402055c:	1000041e 	bne	r2,zero,4020570 <reset_config_device+0x50>
	{
		alt_printf("Successfully reset! \n");
 4020560:	010100f4 	movhi	r4,1027
 4020564:	210c3604 	addi	r4,r4,12504
 4020568:	402eef00 	call	402eef0 <alt_printf>
	}
	else
	{
		alt_printf("Reset failed, returned %x \n", reset);
	}
}
 402056c:	00000406 	br	4020580 <reset_config_device+0x60>
	{
		alt_printf("Successfully reset! \n");
	}
	else
	{
		alt_printf("Reset failed, returned %x \n", reset);
 4020570:	e17fff17 	ldw	r5,-4(fp)
 4020574:	010100f4 	movhi	r4,1027
 4020578:	210c3c04 	addi	r4,r4,12528
 402057c:	402eef00 	call	402eef0 <alt_printf>
	}
}
 4020580:	0001883a 	nop
 4020584:	e037883a 	mov	sp,fp
 4020588:	dfc00117 	ldw	ra,4(sp)
 402058c:	df000017 	ldw	fp,0(sp)
 4020590:	dec00204 	addi	sp,sp,8
 4020594:	f800283a 	ret

04020598 <check_core_status>:

void check_core_status()
{
 4020598:	defff904 	addi	sp,sp,-28
 402059c:	dfc00615 	stw	ra,24(sp)
 40205a0:	df000515 	stw	fp,20(sp)
 40205a4:	df000504 	addi	fp,sp,20
	alt_printf("Checking the settings of the Audio Core device... \n");
 40205a8:	010100f4 	movhi	r4,1027
 40205ac:	210c4304 	addi	r4,r4,12556
 40205b0:	402eef00 	call	402eef0 <alt_printf>
	alt_u32 statusreg = IORD_32DIRECT(AUDIO_0_BASE, 0);
 40205b4:	00810134 	movhi	r2,1028
 40205b8:	10843804 	addi	r2,r2,4320
 40205bc:	10800037 	ldwio	r2,0(r2)
 40205c0:	e0bffb15 	stw	r2,-20(fp)
	alt_printf("The status register is %x \n", statusreg);
 40205c4:	e17ffb17 	ldw	r5,-20(fp)
 40205c8:	010100f4 	movhi	r4,1027
 40205cc:	210c1604 	addi	r4,r4,12376
 40205d0:	402eef00 	call	402eef0 <alt_printf>
	alt_u32 fiforeg = IORD_32DIRECT(AUDIO_0_BASE, 4);
 40205d4:	00810134 	movhi	r2,1028
 40205d8:	10843904 	addi	r2,r2,4324
 40205dc:	10800037 	ldwio	r2,0(r2)
 40205e0:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 fiforeg2 = IORD_32DIRECT(AUDIO_0_BASE, 8);
 40205e4:	00810134 	movhi	r2,1028
 40205e8:	10843a04 	addi	r2,r2,4328
 40205ec:	10800037 	ldwio	r2,0(r2)
 40205f0:	e0bffd15 	stw	r2,-12(fp)
	alt_printf("the FIFOspace registers are %x and %x \n", fiforeg, fiforeg2);
 40205f4:	e1bffd17 	ldw	r6,-12(fp)
 40205f8:	e17ffc17 	ldw	r5,-16(fp)
 40205fc:	010100f4 	movhi	r4,1027
 4020600:	210c5004 	addi	r4,r4,12608
 4020604:	402eef00 	call	402eef0 <alt_printf>
	alt_u32 ldata = IORD_32DIRECT(AUDIO_0_BASE, 8);
 4020608:	00810134 	movhi	r2,1028
 402060c:	10843a04 	addi	r2,r2,4328
 4020610:	10800037 	ldwio	r2,0(r2)
 4020614:	e0bffe15 	stw	r2,-8(fp)
	alt_printf("The ldada register is %x \n", ldata);
 4020618:	e17ffe17 	ldw	r5,-8(fp)
 402061c:	010100f4 	movhi	r4,1027
 4020620:	210c5a04 	addi	r4,r4,12648
 4020624:	402eef00 	call	402eef0 <alt_printf>
	alt_u32 rdata = IORD_32DIRECT(AUDIO_0_BASE, 12);
 4020628:	00810134 	movhi	r2,1028
 402062c:	10843b04 	addi	r2,r2,4332
 4020630:	10800037 	ldwio	r2,0(r2)
 4020634:	e0bfff15 	stw	r2,-4(fp)
	alt_printf("The rdata register is = %x \n", rdata);
 4020638:	e17fff17 	ldw	r5,-4(fp)
 402063c:	010100f4 	movhi	r4,1027
 4020640:	210c6104 	addi	r4,r4,12676
 4020644:	402eef00 	call	402eef0 <alt_printf>
}
 4020648:	0001883a 	nop
 402064c:	e037883a 	mov	sp,fp
 4020650:	dfc00117 	ldw	ra,4(sp)
 4020654:	df000017 	ldw	fp,0(sp)
 4020658:	dec00204 	addi	sp,sp,8
 402065c:	f800283a 	ret

04020660 <reset_core>:

void reset_core()
{
 4020660:	defffe04 	addi	sp,sp,-8
 4020664:	dfc00115 	stw	ra,4(sp)
 4020668:	df000015 	stw	fp,0(sp)
 402066c:	d839883a 	mov	fp,sp
	alt_printf("Resetting Audio core... \n");
 4020670:	010100f4 	movhi	r4,1027
 4020674:	210c6904 	addi	r4,r4,12708
 4020678:	402eef00 	call	402eef0 <alt_printf>
	alt_up_audio_reset_audio_core(audio_dev);
 402067c:	d0a72617 	ldw	r2,-25448(gp)
 4020680:	1009883a 	mov	r4,r2
 4020684:	4030d600 	call	4030d60 <alt_up_audio_reset_audio_core>
}
 4020688:	0001883a 	nop
 402068c:	e037883a 	mov	sp,fp
 4020690:	dfc00117 	ldw	ra,4(sp)
 4020694:	df000017 	ldw	fp,0(sp)
 4020698:	dec00204 	addi	sp,sp,8
 402069c:	f800283a 	ret

040206a0 <record_process>:

// Audio usage functions

void record_process(int seconds, int test, int run_profiling)
{
 40206a0:	defff604 	addi	sp,sp,-40
 40206a4:	dfc00915 	stw	ra,36(sp)
 40206a8:	df000815 	stw	fp,32(sp)
 40206ac:	df000804 	addi	fp,sp,32
 40206b0:	e13ffd15 	stw	r4,-12(fp)
 40206b4:	e17ffe15 	stw	r5,-8(fp)
 40206b8:	e1bfff15 	stw	r6,-4(fp)
	if(run_profiling == 1)
 40206bc:	e0bfff17 	ldw	r2,-4(fp)
 40206c0:	10800058 	cmpnei	r2,r2,1
 40206c4:	1000041e 	bne	r2,zero,40206d8 <record_process+0x38>
	{
		// Start profiling for the time spent recording
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
 40206c8:	0007883a 	mov	r3,zero
 40206cc:	00810134 	movhi	r2,1028
 40206d0:	10840504 	addi	r2,r2,4116
 40206d4:	10c00035 	stwio	r3,0(r2)
	}
	// Lower audio_ready_flag
	audio_ready_flag = 0;
 40206d8:	d0272115 	stw	zero,-25468(gp)
	// Divide the desired recording time into quarter-second snippets
	int snippets = seconds*4;
 40206dc:	e0bffd17 	ldw	r2,-12(fp)
 40206e0:	1085883a 	add	r2,r2,r2
 40206e4:	1085883a 	add	r2,r2,r2
 40206e8:	e0bff915 	stw	r2,-28(fp)
	int snippet_counter = 0;
 40206ec:	e03ff815 	stw	zero,-32(fp)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
 40206f0:	008bb804 	movi	r2,12000
 40206f4:	e0bffa15 	stw	r2,-24(fp)
	unsigned int start_address = SDRAM_CONTROLLER_2_BASE;
 40206f8:	e03ffb15 	stw	zero,-20(fp)
	// Send mail to Signal Processing subsystem, letting it know a recording process has started, where the data will be
	// stored and how many snippets it will contain
	if(run_profiling != 1)
 40206fc:	e0bfff17 	ldw	r2,-4(fp)
 4020700:	10800060 	cmpeqi	r2,r2,1
 4020704:	1000041e 	bne	r2,zero,4020718 <record_process+0x78>
	{
		alt_printf("Sending initial mail, for a recording of %x snippets... \n", snippets);
 4020708:	e17ff917 	ldw	r5,-28(fp)
 402070c:	010100f4 	movhi	r4,1027
 4020710:	210c7004 	addi	r4,r4,12736
 4020714:	402eef00 	call	402eef0 <alt_printf>
	}
	send_mail(start_address, snippets);
 4020718:	e0bff917 	ldw	r2,-28(fp)
 402071c:	100b883a 	mov	r5,r2
 4020720:	e13ffb17 	ldw	r4,-20(fp)
 4020724:	40202f80 	call	40202f8 <send_mail>
	unsigned int current_address;
	while(snippet_counter < snippets)
 4020728:	00001a06 	br	4020794 <record_process+0xf4>
	{
		current_address = start_address + snippet_counter*words_per_snippet*4;
 402072c:	e0fff817 	ldw	r3,-32(fp)
 4020730:	e0bffa17 	ldw	r2,-24(fp)
 4020734:	1885383a 	mul	r2,r3,r2
 4020738:	1085883a 	add	r2,r2,r2
 402073c:	1085883a 	add	r2,r2,r2
 4020740:	1007883a 	mov	r3,r2
 4020744:	e0bffb17 	ldw	r2,-20(fp)
 4020748:	1885883a 	add	r2,r3,r2
 402074c:	e0bffc15 	stw	r2,-16(fp)
		// Record
		record_audio_snippet(current_address, words_per_snippet);
 4020750:	e0bffc17 	ldw	r2,-16(fp)
 4020754:	e17ffa17 	ldw	r5,-24(fp)
 4020758:	1009883a 	mov	r4,r2
 402075c:	40208b00 	call	40208b0 <record_audio_snippet>
		if(run_profiling != 1)
 4020760:	e0bfff17 	ldw	r2,-4(fp)
 4020764:	10800060 	cmpeqi	r2,r2,1
 4020768:	1000031e 	bne	r2,zero,4020778 <record_process+0xd8>
		{
			alt_printf("Snippet recorded, sending mail... \n");
 402076c:	010100f4 	movhi	r4,1027
 4020770:	210c7f04 	addi	r4,r4,12796
 4020774:	402eef00 	call	402eef0 <alt_printf>
		}
		// Send mail with snippet info
		send_mail(current_address, words_per_snippet);
 4020778:	e0bffa17 	ldw	r2,-24(fp)
 402077c:	100b883a 	mov	r5,r2
 4020780:	e13ffc17 	ldw	r4,-16(fp)
 4020784:	40202f80 	call	40202f8 <send_mail>

		snippet_counter = snippet_counter + 1;
 4020788:	e0bff817 	ldw	r2,-32(fp)
 402078c:	10800044 	addi	r2,r2,1
 4020790:	e0bff815 	stw	r2,-32(fp)
	{
		alt_printf("Sending initial mail, for a recording of %x snippets... \n", snippets);
	}
	send_mail(start_address, snippets);
	unsigned int current_address;
	while(snippet_counter < snippets)
 4020794:	e0fff817 	ldw	r3,-32(fp)
 4020798:	e0bff917 	ldw	r2,-28(fp)
 402079c:	18bfe316 	blt	r3,r2,402072c <__alt_data_end+0xfffe072c>
		// Send mail with snippet info
		send_mail(current_address, words_per_snippet);

		snippet_counter = snippet_counter + 1;
	}
	if(run_profiling == 1)
 40207a0:	e0bfff17 	ldw	r2,-4(fp)
 40207a4:	10800058 	cmpnei	r2,r2,1
 40207a8:	1000091e 	bne	r2,zero,40207d0 <record_process+0x130>
	{
		// Stop profiling for the time spent recording
		PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
 40207ac:	0007883a 	mov	r3,zero
 40207b0:	00810134 	movhi	r2,1028
 40207b4:	10840404 	addi	r2,r2,4112
 40207b8:	10c00035 	stwio	r3,0(r2)
		// Start profiling for the time spent waiting for the other subsystem
		PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 3);
 40207bc:	0007883a 	mov	r3,zero
 40207c0:	00810134 	movhi	r2,1028
 40207c4:	10840d04 	addi	r2,r2,4148
 40207c8:	10c00035 	stwio	r3,0(r2)
 40207cc:	00000306 	br	40207dc <record_process+0x13c>
	}
	else
	{
		alt_printf("Waiting for the Signal Processing subsystem to finish... \n");
 40207d0:	010100f4 	movhi	r4,1027
 40207d4:	210c8804 	addi	r4,r4,12832
 40207d8:	402eef00 	call	402eef0 <alt_printf>
	}
	receive_mail();
 40207dc:	40203d00 	call	40203d0 <receive_mail>
	if(run_profiling == 1)
 40207e0:	e0bfff17 	ldw	r2,-4(fp)
 40207e4:	10800058 	cmpnei	r2,r2,1
 40207e8:	1000041e 	bne	r2,zero,40207fc <record_process+0x15c>
	{
		// Stop profiling for the time spent waiting for the other subsystem
		PERF_END(PERFORMANCE_COUNTER_0_BASE, 3);
 40207ec:	0007883a 	mov	r3,zero
 40207f0:	00810134 	movhi	r2,1028
 40207f4:	10840c04 	addi	r2,r2,4144
 40207f8:	10c00035 	stwio	r3,0(r2)
	}
	// Store address and data size of the processed audio
	ready_audio[0] = mail_receive[0];
 40207fc:	d0a72b17 	ldw	r2,-25428(gp)
 4020800:	d0a72915 	stw	r2,-25436(gp)
	ready_audio[1] = mail_receive[1];
 4020804:	d0a72c17 	ldw	r2,-25424(gp)
 4020808:	d0a72a15 	stw	r2,-25432(gp)
	// Raise flag, enabling playback of the processed audio
	audio_ready_flag = 1;
 402080c:	00800044 	movi	r2,1
 4020810:	d0a72115 	stw	r2,-25468(gp)
	if(run_profiling != 1)
 4020814:	e0bfff17 	ldw	r2,-4(fp)
 4020818:	10800060 	cmpeqi	r2,r2,1
 402081c:	1000071e 	bne	r2,zero,402083c <record_process+0x19c>
	{
		alt_printf("Confirmation mail received.\nProcessed audio is stored at address = %x, and of memory size = %x \n", ready_audio[0], ready_audio[1]);
 4020820:	d0a72917 	ldw	r2,-25436(gp)
 4020824:	d0e72a17 	ldw	r3,-25432(gp)
 4020828:	180d883a 	mov	r6,r3
 402082c:	100b883a 	mov	r5,r2
 4020830:	010100f4 	movhi	r4,1027
 4020834:	210c9704 	addi	r4,r4,12892
 4020838:	402eef00 	call	402eef0 <alt_printf>
	}
	// Test the work
	if(test == 1)
 402083c:	e0bffe17 	ldw	r2,-8(fp)
 4020840:	10800058 	cmpnei	r2,r2,1
 4020844:	1000141e 	bne	r2,zero,4020898 <record_process+0x1f8>
	{
		if(run_profiling == 1)
 4020848:	e0bfff17 	ldw	r2,-4(fp)
 402084c:	10800058 	cmpnei	r2,r2,1
 4020850:	1000041e 	bne	r2,zero,4020864 <record_process+0x1c4>
		{
			// Start profiling for the time spent verifying the results
			PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 2);
 4020854:	0007883a 	mov	r3,zero
 4020858:	00810134 	movhi	r2,1028
 402085c:	10840904 	addi	r2,r2,4132
 4020860:	10c00035 	stwio	r3,0(r2)
		}
		test_audio_processing(SDRAM_CONTROLLER_2_BASE, ready_audio[0], ready_audio[1]);
 4020864:	d0a72917 	ldw	r2,-25436(gp)
 4020868:	d0e72a17 	ldw	r3,-25432(gp)
 402086c:	180d883a 	mov	r6,r3
 4020870:	100b883a 	mov	r5,r2
 4020874:	0009883a 	mov	r4,zero
 4020878:	4020a940 	call	4020a94 <test_audio_processing>
		if(run_profiling == 1)
 402087c:	e0bfff17 	ldw	r2,-4(fp)
 4020880:	10800058 	cmpnei	r2,r2,1
 4020884:	1000041e 	bne	r2,zero,4020898 <record_process+0x1f8>
		{
			// Stop profiling for the time spent verifying the results
			PERF_END(PERFORMANCE_COUNTER_0_BASE, 2);
 4020888:	0007883a 	mov	r3,zero
 402088c:	00810134 	movhi	r2,1028
 4020890:	10840804 	addi	r2,r2,4128
 4020894:	10c00035 	stwio	r3,0(r2)
		}
	}
}
 4020898:	0001883a 	nop
 402089c:	e037883a 	mov	sp,fp
 40208a0:	dfc00117 	ldw	ra,4(sp)
 40208a4:	df000017 	ldw	fp,0(sp)
 40208a8:	dec00204 	addi	sp,sp,8
 40208ac:	f800283a 	ret

040208b0 <record_audio_snippet>:

void record_audio_snippet(int start_addr_ptr, int record_words)
{
 40208b0:	defff804 	addi	sp,sp,-32
 40208b4:	dfc00715 	stw	ra,28(sp)
 40208b8:	df000615 	stw	fp,24(sp)
 40208bc:	df000604 	addi	fp,sp,24
 40208c0:	e13ffe15 	stw	r4,-8(fp)
 40208c4:	e17fff15 	stw	r5,-4(fp)
	int words_recorded = 0;
 40208c8:	e03ffa15 	stw	zero,-24(fp)
	int words_in_fifo = 0;
 40208cc:	e03ffc15 	stw	zero,-16(fp)
	int current_words = 0;
 40208d0:	e03ffd15 	stw	zero,-12(fp)
	int i;
	while( words_recorded < record_words)
 40208d4:	00002706 	br	4020974 <record_audio_snippet+0xc4>
	{
		words_in_fifo = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff00) >> 8;
 40208d8:	00810134 	movhi	r2,1028
 40208dc:	10843904 	addi	r2,r2,4324
 40208e0:	10800037 	ldwio	r2,0(r2)
 40208e4:	10bfc00c 	andi	r2,r2,65280
 40208e8:	1005d23a 	srai	r2,r2,8
 40208ec:	e0bffc15 	stw	r2,-16(fp)
		current_words = min(words_in_fifo, record_words - words_recorded);
 40208f0:	e0ffff17 	ldw	r3,-4(fp)
 40208f4:	e0bffa17 	ldw	r2,-24(fp)
 40208f8:	1885c83a 	sub	r2,r3,r2
 40208fc:	100b883a 	mov	r5,r2
 4020900:	e13ffc17 	ldw	r4,-16(fp)
 4020904:	4020f3c0 	call	4020f3c <min>
 4020908:	e0bffd15 	stw	r2,-12(fp)
		i = 0;
 402090c:	e03ffb15 	stw	zero,-20(fp)
		while(i < current_words)
 4020910:	00001106 	br	4020958 <record_audio_snippet+0xa8>
		{
			dataword = IORD_32DIRECT(AUDIO_0_BASE, AudioLData);
 4020914:	00810134 	movhi	r2,1028
 4020918:	10843a04 	addi	r2,r2,4328
 402091c:	10800037 	ldwio	r2,0(r2)
 4020920:	d0a72315 	stw	r2,-25460(gp)
			IOWR_32DIRECT(start_addr_ptr, (words_recorded + i)*4, dataword);
 4020924:	e0fffa17 	ldw	r3,-24(fp)
 4020928:	e0bffb17 	ldw	r2,-20(fp)
 402092c:	1885883a 	add	r2,r3,r2
 4020930:	1085883a 	add	r2,r2,r2
 4020934:	1085883a 	add	r2,r2,r2
 4020938:	1007883a 	mov	r3,r2
 402093c:	e0bffe17 	ldw	r2,-8(fp)
 4020940:	1885883a 	add	r2,r3,r2
 4020944:	d0e72317 	ldw	r3,-25460(gp)
 4020948:	10c00035 	stwio	r3,0(r2)
			i ++;
 402094c:	e0bffb17 	ldw	r2,-20(fp)
 4020950:	10800044 	addi	r2,r2,1
 4020954:	e0bffb15 	stw	r2,-20(fp)
	while( words_recorded < record_words)
	{
		words_in_fifo = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff00) >> 8;
		current_words = min(words_in_fifo, record_words - words_recorded);
		i = 0;
		while(i < current_words)
 4020958:	e0fffb17 	ldw	r3,-20(fp)
 402095c:	e0bffd17 	ldw	r2,-12(fp)
 4020960:	18bfec16 	blt	r3,r2,4020914 <__alt_data_end+0xfffe0914>
		{
			dataword = IORD_32DIRECT(AUDIO_0_BASE, AudioLData);
			IOWR_32DIRECT(start_addr_ptr, (words_recorded + i)*4, dataword);
			i ++;
		}
		words_recorded += current_words;
 4020964:	e0fffa17 	ldw	r3,-24(fp)
 4020968:	e0bffd17 	ldw	r2,-12(fp)
 402096c:	1885883a 	add	r2,r3,r2
 4020970:	e0bffa15 	stw	r2,-24(fp)
{
	int words_recorded = 0;
	int words_in_fifo = 0;
	int current_words = 0;
	int i;
	while( words_recorded < record_words)
 4020974:	e0fffa17 	ldw	r3,-24(fp)
 4020978:	e0bfff17 	ldw	r2,-4(fp)
 402097c:	18bfd616 	blt	r3,r2,40208d8 <__alt_data_end+0xfffe08d8>
			IOWR_32DIRECT(start_addr_ptr, (words_recorded + i)*4, dataword);
			i ++;
		}
		words_recorded += current_words;
	}
}
 4020980:	0001883a 	nop
 4020984:	e037883a 	mov	sp,fp
 4020988:	dfc00117 	ldw	ra,4(sp)
 402098c:	df000017 	ldw	fp,0(sp)
 4020990:	dec00204 	addi	sp,sp,8
 4020994:	f800283a 	ret

04020998 <play_audio>:

void play_audio(int start_addr_ptr, int memory_size)
{
 4020998:	defff504 	addi	sp,sp,-44
 402099c:	dfc00a15 	stw	ra,40(sp)
 40209a0:	df000915 	stw	fp,36(sp)
 40209a4:	df000904 	addi	fp,sp,36
 40209a8:	e13ffe15 	stw	r4,-8(fp)
 40209ac:	e17fff15 	stw	r5,-4(fp)
	int play_words = memory_size/4;
 40209b0:	e0bfff17 	ldw	r2,-4(fp)
 40209b4:	1000010e 	bge	r2,zero,40209bc <play_audio+0x24>
 40209b8:	108000c4 	addi	r2,r2,3
 40209bc:	1005d0ba 	srai	r2,r2,2
 40209c0:	e0bffa15 	stw	r2,-24(fp)
	int words_played = 0;
 40209c4:	e03ff715 	stw	zero,-36(fp)
	alt_32 current_address = start_addr_ptr;
 40209c8:	e0bffe17 	ldw	r2,-8(fp)
 40209cc:	e0bff815 	stw	r2,-32(fp)
	int free_space = 0;
 40209d0:	e03ffb15 	stw	zero,-20(fp)
	int words_to_buffer;
	int i;
	alt_u32 resultword;
	while( words_played < play_words)
 40209d4:	00002606 	br	4020a70 <play_audio+0xd8>
	{
		// Check how much space is available
		free_space = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff000000) >> 24;
 40209d8:	00810134 	movhi	r2,1028
 40209dc:	10843904 	addi	r2,r2,4324
 40209e0:	10800037 	ldwio	r2,0(r2)
 40209e4:	1004d63a 	srli	r2,r2,24
 40209e8:	e0bffb15 	stw	r2,-20(fp)
		words_to_buffer = min(free_space, play_words - words_played);
 40209ec:	e0fffa17 	ldw	r3,-24(fp)
 40209f0:	e0bff717 	ldw	r2,-36(fp)
 40209f4:	1885c83a 	sub	r2,r3,r2
 40209f8:	100b883a 	mov	r5,r2
 40209fc:	e13ffb17 	ldw	r4,-20(fp)
 4020a00:	4020f3c0 	call	4020f3c <min>
 4020a04:	e0bffc15 	stw	r2,-16(fp)
		i = 0;
 4020a08:	e03ff915 	stw	zero,-28(fp)
		while(i < words_to_buffer)
 4020a0c:	00001106 	br	4020a54 <play_audio+0xbc>
		{
			current_address += 4;
 4020a10:	e0bff817 	ldw	r2,-32(fp)
 4020a14:	10800104 	addi	r2,r2,4
 4020a18:	e0bff815 	stw	r2,-32(fp)
			resultword = IORD_32DIRECT(SDRAM_CONTROLLER_2_BASE, current_address);
 4020a1c:	e0bff817 	ldw	r2,-32(fp)
 4020a20:	10800037 	ldwio	r2,0(r2)
 4020a24:	e0bffd15 	stw	r2,-12(fp)
			IOWR_32DIRECT(AUDIO_0_BASE, AudioLData, resultword);
 4020a28:	e0fffd17 	ldw	r3,-12(fp)
 4020a2c:	00810134 	movhi	r2,1028
 4020a30:	10843a04 	addi	r2,r2,4328
 4020a34:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(AUDIO_0_BASE, AudioRData, resultword);
 4020a38:	e0fffd17 	ldw	r3,-12(fp)
 4020a3c:	00810134 	movhi	r2,1028
 4020a40:	10843b04 	addi	r2,r2,4332
 4020a44:	10c00035 	stwio	r3,0(r2)
			i ++;
 4020a48:	e0bff917 	ldw	r2,-28(fp)
 4020a4c:	10800044 	addi	r2,r2,1
 4020a50:	e0bff915 	stw	r2,-28(fp)
	{
		// Check how much space is available
		free_space = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff000000) >> 24;
		words_to_buffer = min(free_space, play_words - words_played);
		i = 0;
		while(i < words_to_buffer)
 4020a54:	e0fff917 	ldw	r3,-28(fp)
 4020a58:	e0bffc17 	ldw	r2,-16(fp)
 4020a5c:	18bfec16 	blt	r3,r2,4020a10 <__alt_data_end+0xfffe0a10>
			resultword = IORD_32DIRECT(SDRAM_CONTROLLER_2_BASE, current_address);
			IOWR_32DIRECT(AUDIO_0_BASE, AudioLData, resultword);
			IOWR_32DIRECT(AUDIO_0_BASE, AudioRData, resultword);
			i ++;
		}
		words_played += free_space;
 4020a60:	e0fff717 	ldw	r3,-36(fp)
 4020a64:	e0bffb17 	ldw	r2,-20(fp)
 4020a68:	1885883a 	add	r2,r3,r2
 4020a6c:	e0bff715 	stw	r2,-36(fp)
	alt_32 current_address = start_addr_ptr;
	int free_space = 0;
	int words_to_buffer;
	int i;
	alt_u32 resultword;
	while( words_played < play_words)
 4020a70:	e0fff717 	ldw	r3,-36(fp)
 4020a74:	e0bffa17 	ldw	r2,-24(fp)
 4020a78:	18bfd716 	blt	r3,r2,40209d8 <__alt_data_end+0xfffe09d8>
			IOWR_32DIRECT(AUDIO_0_BASE, AudioRData, resultword);
			i ++;
		}
		words_played += free_space;
	}
}
 4020a7c:	0001883a 	nop
 4020a80:	e037883a 	mov	sp,fp
 4020a84:	dfc00117 	ldw	ra,4(sp)
 4020a88:	df000017 	ldw	fp,0(sp)
 4020a8c:	dec00204 	addi	sp,sp,8
 4020a90:	f800283a 	ret

04020a94 <test_audio_processing>:

int test_audio_processing(alt_u32 start_recorded, alt_u32 start_processed, alt_u32 memspace)
{
 4020a94:	defff404 	addi	sp,sp,-48
 4020a98:	dfc00b15 	stw	ra,44(sp)
 4020a9c:	df000a15 	stw	fp,40(sp)
 4020aa0:	dc000915 	stw	r16,36(sp)
 4020aa4:	df000a04 	addi	fp,sp,40
 4020aa8:	e13ffc15 	stw	r4,-16(fp)
 4020aac:	e17ffd15 	stw	r5,-12(fp)
 4020ab0:	e1bffe15 	stw	r6,-8(fp)
	int wordcount = memspace/4;
 4020ab4:	e0bffe17 	ldw	r2,-8(fp)
 4020ab8:	1004d0ba 	srli	r2,r2,2
 4020abc:	e0bffa15 	stw	r2,-24(fp)
	int words_tested = 0;
 4020ac0:	e03ff615 	stw	zero,-40(fp)
	int faults_found = 0;
 4020ac4:	e03ff715 	stw	zero,-36(fp)
	alt_u32 test1;
	alt_u32 test2;
	int op_type;
	if((IORD_32DIRECT(PIO_2_BASE, 0) & 0x80) == 0)
 4020ac8:	00810134 	movhi	r2,1028
 4020acc:	10842004 	addi	r2,r2,4224
 4020ad0:	10800037 	ldwio	r2,0(r2)
 4020ad4:	1080200c 	andi	r2,r2,128
 4020ad8:	1000021e 	bne	r2,zero,4020ae4 <test_audio_processing+0x50>
	{
		op_type = 0;
 4020adc:	e03ff915 	stw	zero,-28(fp)
 4020ae0:	00002b06 	br	4020b90 <test_audio_processing+0xfc>
	}
	else
	{
		op_type = 1;
 4020ae4:	00800044 	movi	r2,1
 4020ae8:	e0bff915 	stw	r2,-28(fp)
	}
	while(words_tested < wordcount)
 4020aec:	00002806 	br	4020b90 <test_audio_processing+0xfc>
	{
		// Load both
		test1 = IORD_32DIRECT(start_recorded, words_tested*4);
 4020af0:	e0bff617 	ldw	r2,-40(fp)
 4020af4:	1085883a 	add	r2,r2,r2
 4020af8:	1085883a 	add	r2,r2,r2
 4020afc:	1007883a 	mov	r3,r2
 4020b00:	e0bffc17 	ldw	r2,-16(fp)
 4020b04:	1885883a 	add	r2,r3,r2
 4020b08:	10800037 	ldwio	r2,0(r2)
 4020b0c:	e0bff815 	stw	r2,-32(fp)
		test1 = (signed)test1;
		test2 = IORD_32DIRECT(start_processed, words_tested*4);
 4020b10:	e0bff617 	ldw	r2,-40(fp)
 4020b14:	1085883a 	add	r2,r2,r2
 4020b18:	1085883a 	add	r2,r2,r2
 4020b1c:	1007883a 	mov	r3,r2
 4020b20:	e0bffd17 	ldw	r2,-12(fp)
 4020b24:	1885883a 	add	r2,r3,r2
 4020b28:	10800037 	ldwio	r2,0(r2)
 4020b2c:	e0bffb15 	stw	r2,-20(fp)
		// Test
		if(op_type == 0)
 4020b30:	e0bff917 	ldw	r2,-28(fp)
 4020b34:	1000071e 	bne	r2,zero,4020b54 <test_audio_processing+0xc0>
		{
			test1 = (test1 & 0x80000000)+((test1 & 0xfffffffe)>>1);
 4020b38:	e0bff817 	ldw	r2,-32(fp)
 4020b3c:	10e0002c 	andhi	r3,r2,32768
 4020b40:	e0bff817 	ldw	r2,-32(fp)
 4020b44:	1004d07a 	srli	r2,r2,1
 4020b48:	1885883a 	add	r2,r3,r2
 4020b4c:	e0bff815 	stw	r2,-32(fp)
 4020b50:	00000606 	br	4020b6c <test_audio_processing+0xd8>
		}
		else if (op_type == 1)
 4020b54:	e0bff917 	ldw	r2,-28(fp)
 4020b58:	10800058 	cmpnei	r2,r2,1
 4020b5c:	1000031e 	bne	r2,zero,4020b6c <test_audio_processing+0xd8>
		{
			test1 = (test1 << 1);
 4020b60:	e0bff817 	ldw	r2,-32(fp)
 4020b64:	1085883a 	add	r2,r2,r2
 4020b68:	e0bff815 	stw	r2,-32(fp)
		}
		if((int)test1 != (int)test2)
 4020b6c:	e0fff817 	ldw	r3,-32(fp)
 4020b70:	e0bffb17 	ldw	r2,-20(fp)
 4020b74:	18800326 	beq	r3,r2,4020b84 <test_audio_processing+0xf0>
		{
			faults_found += 1;
 4020b78:	e0bff717 	ldw	r2,-36(fp)
 4020b7c:	10800044 	addi	r2,r2,1
 4020b80:	e0bff715 	stw	r2,-36(fp)
		}
		// Increment
		words_tested ++;
 4020b84:	e0bff617 	ldw	r2,-40(fp)
 4020b88:	10800044 	addi	r2,r2,1
 4020b8c:	e0bff615 	stw	r2,-40(fp)
	}
	else
	{
		op_type = 1;
	}
	while(words_tested < wordcount)
 4020b90:	e0fff617 	ldw	r3,-40(fp)
 4020b94:	e0bffa17 	ldw	r2,-24(fp)
 4020b98:	18bfd516 	blt	r3,r2,4020af0 <__alt_data_end+0xfffe0af0>
			faults_found += 1;
		}
		// Increment
		words_tested ++;
	}
	error_rate = (float)faults_found/(float)words_tested;
 4020b9c:	e13ff717 	ldw	r4,-36(fp)
 4020ba0:	4021ce40 	call	4021ce4 <__floatsisf>
 4020ba4:	1021883a 	mov	r16,r2
 4020ba8:	e13ff617 	ldw	r4,-40(fp)
 4020bac:	4021ce40 	call	4021ce4 <__floatsisf>
 4020bb0:	1007883a 	mov	r3,r2
 4020bb4:	180b883a 	mov	r5,r3
 4020bb8:	8009883a 	mov	r4,r16
 4020bbc:	4020fc40 	call	4020fc4 <__divsf3>
 4020bc0:	1007883a 	mov	r3,r2
 4020bc4:	1805883a 	mov	r2,r3
 4020bc8:	d0a72515 	stw	r2,-25452(gp)
	success_rate = 100*(1 - error_rate);
 4020bcc:	d0a72517 	ldw	r2,-25452(gp)
 4020bd0:	100b883a 	mov	r5,r2
 4020bd4:	010fe034 	movhi	r4,16256
 4020bd8:	40218000 	call	4021800 <__subsf3>
 4020bdc:	1007883a 	mov	r3,r2
 4020be0:	1805883a 	mov	r2,r3
 4020be4:	0150b234 	movhi	r5,17096
 4020be8:	1009883a 	mov	r4,r2
 4020bec:	40214040 	call	4021404 <__mulsf3>
 4020bf0:	1007883a 	mov	r3,r2
 4020bf4:	1805883a 	mov	r2,r3
 4020bf8:	d0a72415 	stw	r2,-25456(gp)
	printf("Test finished. Success rate %f %% \n", success_rate);
 4020bfc:	d0a72417 	ldw	r2,-25456(gp)
 4020c00:	1009883a 	mov	r4,r2
 4020c04:	4021e080 	call	4021e08 <__extendsfdf2>
 4020c08:	100d883a 	mov	r6,r2
 4020c0c:	180f883a 	mov	r7,r3
 4020c10:	300b883a 	mov	r5,r6
 4020c14:	380d883a 	mov	r6,r7
 4020c18:	010100f4 	movhi	r4,1027
 4020c1c:	210cb004 	addi	r4,r4,12992
 4020c20:	4021fac0 	call	4021fac <printf>
	return faults_found;
 4020c24:	e0bff717 	ldw	r2,-36(fp)
}
 4020c28:	e6ffff04 	addi	sp,fp,-4
 4020c2c:	dfc00217 	ldw	ra,8(sp)
 4020c30:	df000117 	ldw	fp,4(sp)
 4020c34:	dc000017 	ldw	r16,0(sp)
 4020c38:	dec00304 	addi	sp,sp,12
 4020c3c:	f800283a 	ret

04020c40 <choose_task>:

//Interrupt and task choosing functions

void choose_task(int task)
{
 4020c40:	defffb04 	addi	sp,sp,-20
 4020c44:	dfc00415 	stw	ra,16(sp)
 4020c48:	df000315 	stw	fp,12(sp)
 4020c4c:	df000304 	addi	fp,sp,12
 4020c50:	e13fff15 	stw	r4,-4(fp)
	if(task == 1)
 4020c54:	e0bfff17 	ldw	r2,-4(fp)
 4020c58:	10800058 	cmpnei	r2,r2,1
 4020c5c:	1000081e 	bne	r2,zero,4020c80 <choose_task+0x40>
	{
		alt_printf("Task 1: Recording... \n");
 4020c60:	010100f4 	movhi	r4,1027
 4020c64:	210cb904 	addi	r4,r4,13028
 4020c68:	402eef00 	call	402eef0 <alt_printf>
		// First switch (SW0) Record audio for a second, without testing, without profiling, using the HW accelerator
		record_process(1, 0, 0);
 4020c6c:	000d883a 	mov	r6,zero
 4020c70:	000b883a 	mov	r5,zero
 4020c74:	01000044 	movi	r4,1
 4020c78:	40206a00 	call	40206a0 <record_process>
 4020c7c:	00007506 	br	4020e54 <choose_task+0x214>
	}
	else if(task == 2)
 4020c80:	e0bfff17 	ldw	r2,-4(fp)
 4020c84:	10800098 	cmpnei	r2,r2,2
 4020c88:	1000101e 	bne	r2,zero,4020ccc <choose_task+0x8c>
	{
		alt_printf("Task 2: Playing... \n");
 4020c8c:	010100f4 	movhi	r4,1027
 4020c90:	210cbf04 	addi	r4,r4,13052
 4020c94:	402eef00 	call	402eef0 <alt_printf>
		// Second switch (SW1): Playback processed audio if ready
		if(audio_ready_flag)
 4020c98:	d0a72117 	ldw	r2,-25468(gp)
 4020c9c:	10000726 	beq	r2,zero,4020cbc <choose_task+0x7c>
		{
			play_audio((int)ready_audio[0], (int)ready_audio[1]);
 4020ca0:	d0a72917 	ldw	r2,-25436(gp)
 4020ca4:	1007883a 	mov	r3,r2
 4020ca8:	d0a72a17 	ldw	r2,-25432(gp)
 4020cac:	100b883a 	mov	r5,r2
 4020cb0:	1809883a 	mov	r4,r3
 4020cb4:	40209980 	call	4020998 <play_audio>
 4020cb8:	00006606 	br	4020e54 <choose_task+0x214>
		}
		else
		{
			alt_printf("Error: No audio is ready! Please record first. \n");
 4020cbc:	010100f4 	movhi	r4,1027
 4020cc0:	210cc504 	addi	r4,r4,13076
 4020cc4:	402eef00 	call	402eef0 <alt_printf>
 4020cc8:	00006206 	br	4020e54 <choose_task+0x214>
		}
	}
	else if(task == 4)
 4020ccc:	e0bfff17 	ldw	r2,-4(fp)
 4020cd0:	10800118 	cmpnei	r2,r2,4
 4020cd4:	1000341e 	bne	r2,zero,4020da8 <choose_task+0x168>
	{
		alt_printf("Task 3: Profiling... \n");
 4020cd8:	010100f4 	movhi	r4,1027
 4020cdc:	210cd204 	addi	r4,r4,13128
 4020ce0:	402eef00 	call	402eef0 <alt_printf>
		// Third switch (SW2): record thrice, once for each method on the Signal Processing side, with testing and profiling
		// Start overall performance counter
		PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
 4020ce4:	00c00044 	movi	r3,1
 4020ce8:	00810134 	movhi	r2,1028
 4020cec:	10840004 	addi	r2,r2,4096
 4020cf0:	10c00035 	stwio	r3,0(r2)
		PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 4020cf4:	0007883a 	mov	r3,zero
 4020cf8:	00810134 	movhi	r2,1028
 4020cfc:	10840104 	addi	r2,r2,4100
 4020d00:	10c00035 	stwio	r3,0(r2)
		// Record for HW accelerator
		alt_printf("Recording for HW accelerator... \n");
 4020d04:	010100f4 	movhi	r4,1027
 4020d08:	210cd804 	addi	r4,r4,13152
 4020d0c:	402eef00 	call	402eef0 <alt_printf>
		record_process(1, 1, 1);
 4020d10:	01800044 	movi	r6,1
 4020d14:	01400044 	movi	r5,1
 4020d18:	01000044 	movi	r4,1
 4020d1c:	40206a00 	call	40206a0 <record_process>
		// Record for custom instruction
		alt_printf("Recording for custom instruction... \n");
 4020d20:	010100f4 	movhi	r4,1027
 4020d24:	210ce104 	addi	r4,r4,13188
 4020d28:	402eef00 	call	402eef0 <alt_printf>
		record_process(1, 1, 1);
 4020d2c:	01800044 	movi	r6,1
 4020d30:	01400044 	movi	r5,1
 4020d34:	01000044 	movi	r4,1
 4020d38:	40206a00 	call	40206a0 <record_process>
		// Record for c code implementation
		alt_printf("Recording for C code implementation... \n");
 4020d3c:	010100f4 	movhi	r4,1027
 4020d40:	210ceb04 	addi	r4,r4,13228
 4020d44:	402eef00 	call	402eef0 <alt_printf>
		record_process(1, 1, 1);
 4020d48:	01800044 	movi	r6,1
 4020d4c:	01400044 	movi	r5,1
 4020d50:	01000044 	movi	r4,1
 4020d54:	40206a00 	call	40206a0 <record_process>
		// Stop overall performance counter and print results
		PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
 4020d58:	0007883a 	mov	r3,zero
 4020d5c:	00810134 	movhi	r2,1028
 4020d60:	10840004 	addi	r2,r2,4096
 4020d64:	10c00035 	stwio	r3,0(r2)
		perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(), 3, "Recording", "Verifying", "Waiting for #2");
 4020d68:	4030b280 	call	4030b28 <alt_get_cpu_freq>
 4020d6c:	1007883a 	mov	r3,r2
 4020d70:	008100f4 	movhi	r2,1027
 4020d74:	108cf904 	addi	r2,r2,13284
 4020d78:	d8800115 	stw	r2,4(sp)
 4020d7c:	008100f4 	movhi	r2,1027
 4020d80:	108cfd04 	addi	r2,r2,13300
 4020d84:	d8800015 	stw	r2,0(sp)
 4020d88:	01c100f4 	movhi	r7,1027
 4020d8c:	39ccf604 	addi	r7,r7,13272
 4020d90:	018000c4 	movi	r6,3
 4020d94:	180b883a 	mov	r5,r3
 4020d98:	01010134 	movhi	r4,1028
 4020d9c:	21040004 	addi	r4,r4,4096
 4020da0:	40319f00 	call	40319f0 <perf_print_formatted_report>
 4020da4:	00002b06 	br	4020e54 <choose_task+0x214>
	}
	else if(task == 8)
 4020da8:	e0bfff17 	ldw	r2,-4(fp)
 4020dac:	10800218 	cmpnei	r2,r2,8
 4020db0:	1000101e 	bne	r2,zero,4020df4 <choose_task+0x1b4>
	{
		alt_printf("Task 4: Verifying processed audio... \n");
 4020db4:	010100f4 	movhi	r4,1027
 4020db8:	210d0004 	addi	r4,r4,13312
 4020dbc:	402eef00 	call	402eef0 <alt_printf>
		// Fourth switch (SW3): Test audio by immediately playing back what is recorded
		if(audio_ready_flag)
 4020dc0:	d0a72117 	ldw	r2,-25468(gp)
 4020dc4:	10000726 	beq	r2,zero,4020de4 <choose_task+0x1a4>
		{
			test_audio_processing(SDRAM_CONTROLLER_2_BASE, ready_audio[0], ready_audio[1]);
 4020dc8:	d0a72917 	ldw	r2,-25436(gp)
 4020dcc:	d0e72a17 	ldw	r3,-25432(gp)
 4020dd0:	180d883a 	mov	r6,r3
 4020dd4:	100b883a 	mov	r5,r2
 4020dd8:	0009883a 	mov	r4,zero
 4020ddc:	4020a940 	call	4020a94 <test_audio_processing>
 4020de0:	00001c06 	br	4020e54 <choose_task+0x214>
		}
		else
		{
			alt_printf("Error: No audio is ready! Please record first. \n");
 4020de4:	010100f4 	movhi	r4,1027
 4020de8:	210cc504 	addi	r4,r4,13076
 4020dec:	402eef00 	call	402eef0 <alt_printf>
 4020df0:	00001806 	br	4020e54 <choose_task+0x214>
		}
	}
	else if(task == 16)
 4020df4:	e0bfff17 	ldw	r2,-4(fp)
 4020df8:	10800418 	cmpnei	r2,r2,16
 4020dfc:	1000061e 	bne	r2,zero,4020e18 <choose_task+0x1d8>
	{
		alt_printf("Task 5: Checking audio device status... \n");
 4020e00:	010100f4 	movhi	r4,1027
 4020e04:	210d0a04 	addi	r4,r4,13352
 4020e08:	402eef00 	call	402eef0 <alt_printf>
		check_config_status();
 4020e0c:	40204840 	call	4020484 <check_config_status>
		check_core_status();
 4020e10:	40205980 	call	4020598 <check_core_status>
 4020e14:	00000f06 	br	4020e54 <choose_task+0x214>
	}
	else if(task == 32)
 4020e18:	e0bfff17 	ldw	r2,-4(fp)
 4020e1c:	10800818 	cmpnei	r2,r2,32
 4020e20:	1000051e 	bne	r2,zero,4020e38 <choose_task+0x1f8>
	{
		alt_printf("Task 6: Reset Audio Core... \n");
 4020e24:	010100f4 	movhi	r4,1027
 4020e28:	210d1504 	addi	r4,r4,13396
 4020e2c:	402eef00 	call	402eef0 <alt_printf>
		reset_core();
 4020e30:	40206600 	call	4020660 <reset_core>
 4020e34:	00000706 	br	4020e54 <choose_task+0x214>
	}
	else if(task == 64)
 4020e38:	e0bfff17 	ldw	r2,-4(fp)
 4020e3c:	10801018 	cmpnei	r2,r2,64
 4020e40:	1000041e 	bne	r2,zero,4020e54 <choose_task+0x214>
	{
		alt_printf("Task 7: Reset Audio and Video Config device... \n");
 4020e44:	010100f4 	movhi	r4,1027
 4020e48:	210d1d04 	addi	r4,r4,13428
 4020e4c:	402eef00 	call	402eef0 <alt_printf>
		reset_config_device();
 4020e50:	40205200 	call	4020520 <reset_config_device>
	}
	alt_printf("Task complete. Ready for new task. \n\n", task);
 4020e54:	e17fff17 	ldw	r5,-4(fp)
 4020e58:	010100f4 	movhi	r4,1027
 4020e5c:	210d2a04 	addi	r4,r4,13480
 4020e60:	402eef00 	call	402eef0 <alt_printf>
}
 4020e64:	0001883a 	nop
 4020e68:	e037883a 	mov	sp,fp
 4020e6c:	dfc00117 	ldw	ra,4(sp)
 4020e70:	df000017 	ldw	fp,0(sp)
 4020e74:	dec00204 	addi	sp,sp,8
 4020e78:	f800283a 	ret

04020e7c <isr_switches>:

void isr_switches(void* context)
{
 4020e7c:	defffc04 	addi	sp,sp,-16
 4020e80:	dfc00315 	stw	ra,12(sp)
 4020e84:	df000215 	stw	fp,8(sp)
 4020e88:	df000204 	addi	fp,sp,8
 4020e8c:	e13fff15 	stw	r4,-4(fp)
	// Read interrupt source
	uint8_t pinvals = (IORD_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG) & 0x7f);
 4020e90:	00810134 	movhi	r2,1028
 4020e94:	10842304 	addi	r2,r2,4236
 4020e98:	10800023 	ldbuio	r2,0(r2)
 4020e9c:	10803fcc 	andi	r2,r2,255
 4020ea0:	10801fcc 	andi	r2,r2,127
 4020ea4:	e0bffe05 	stb	r2,-8(fp)
	// Save choice
	choice = (int)pinvals;
 4020ea8:	e0bffe03 	ldbu	r2,-8(fp)
 4020eac:	d0a72215 	stw	r2,-25464(gp)
	// Send mail to the other CPU, letting it know that the flag can be lowered
	send_mail(choice, 0);
 4020eb0:	d0a72217 	ldw	r2,-25464(gp)
 4020eb4:	000b883a 	mov	r5,zero
 4020eb8:	1009883a 	mov	r4,r2
 4020ebc:	40202f80 	call	40202f8 <send_mail>
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG, pinvals);
 4020ec0:	e0fffe03 	ldbu	r3,-8(fp)
 4020ec4:	00810134 	movhi	r2,1028
 4020ec8:	10842304 	addi	r2,r2,4236
 4020ecc:	10c00025 	stbio	r3,0(r2)
}
 4020ed0:	0001883a 	nop
 4020ed4:	e037883a 	mov	sp,fp
 4020ed8:	dfc00117 	ldw	ra,4(sp)
 4020edc:	df000017 	ldw	fp,0(sp)
 4020ee0:	dec00204 	addi	sp,sp,8
 4020ee4:	f800283a 	ret

04020ee8 <setup_switch_interrupts>:

void setup_switch_interrupts(uint8_t chosen_switches)
{
 4020ee8:	defffd04 	addi	sp,sp,-12
 4020eec:	dfc00215 	stw	ra,8(sp)
 4020ef0:	df000115 	stw	fp,4(sp)
 4020ef4:	df000104 	addi	fp,sp,4
 4020ef8:	2005883a 	mov	r2,r4
 4020efc:	e0bfff05 	stb	r2,-4(fp)
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
 4020f00:	e0ffff03 	ldbu	r3,-4(fp)
 4020f04:	00810134 	movhi	r2,1028
 4020f08:	10842204 	addi	r2,r2,4232
 4020f0c:	10c00025 	stbio	r3,0(r2)
	alt_irq_register(PIO_2_IRQ, NULL, isr_switches);
 4020f10:	018100b4 	movhi	r6,1026
 4020f14:	31839f04 	addi	r6,r6,3708
 4020f18:	000b883a 	mov	r5,zero
 4020f1c:	01000104 	movi	r4,4
 4020f20:	402e9d00 	call	402e9d0 <alt_irq_register>
	return;
 4020f24:	0001883a 	nop
}
 4020f28:	e037883a 	mov	sp,fp
 4020f2c:	dfc00117 	ldw	ra,4(sp)
 4020f30:	df000017 	ldw	fp,0(sp)
 4020f34:	dec00204 	addi	sp,sp,8
 4020f38:	f800283a 	ret

04020f3c <min>:

// Misc functions
int min(int a, int b)
{
 4020f3c:	defffd04 	addi	sp,sp,-12
 4020f40:	df000215 	stw	fp,8(sp)
 4020f44:	df000204 	addi	fp,sp,8
 4020f48:	e13ffe15 	stw	r4,-8(fp)
 4020f4c:	e17fff15 	stw	r5,-4(fp)
	return (a > b) ? b : a;
 4020f50:	e0ffff17 	ldw	r3,-4(fp)
 4020f54:	e0bffe17 	ldw	r2,-8(fp)
 4020f58:	1880010e 	bge	r3,r2,4020f60 <min+0x24>
 4020f5c:	1805883a 	mov	r2,r3
}
 4020f60:	e037883a 	mov	sp,fp
 4020f64:	df000017 	ldw	fp,0(sp)
 4020f68:	dec00104 	addi	sp,sp,4
 4020f6c:	f800283a 	ret

04020f70 <main>:

// ----------------------- Main function ----------------------------------

int main()
{
 4020f70:	defffe04 	addi	sp,sp,-8
 4020f74:	dfc00115 	stw	ra,4(sp)
 4020f78:	df000015 	stw	fp,0(sp)
 4020f7c:	d839883a 	mov	fp,sp
	setup_audio(audio_dev);
 4020f80:	d0a72617 	ldw	r2,-25448(gp)
 4020f84:	1009883a 	mov	r4,r2
 4020f88:	40204240 	call	4020424 <setup_audio>
	// Setup interrupts on the first 6 switches
	setup_switch_interrupts(0x7f);
 4020f8c:	01001fc4 	movi	r4,127
 4020f90:	4020ee80 	call	4020ee8 <setup_switch_interrupts>
	alt_printf("\n \n \n \n ---------- main --------------- \n");
 4020f94:	010100f4 	movhi	r4,1027
 4020f98:	210d3404 	addi	r4,r4,13520
 4020f9c:	402eef00 	call	402eef0 <alt_printf>

	// Wait for switches
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 4020fa0:	0100fa04 	movi	r4,1000
 4020fa4:	402f3a40 	call	402f3a4 <usleep>
		if(choice != 0)
 4020fa8:	d0a72217 	ldw	r2,-25464(gp)
 4020fac:	103ffc26 	beq	r2,zero,4020fa0 <__alt_data_end+0xfffe0fa0>
		{
			choose_task(choice);
 4020fb0:	d0a72217 	ldw	r2,-25464(gp)
 4020fb4:	1009883a 	mov	r4,r2
 4020fb8:	4020c400 	call	4020c40 <choose_task>
			choice = 0x0;
 4020fbc:	d0272215 	stw	zero,-25464(gp)
		}
	};
 4020fc0:	003ff706 	br	4020fa0 <__alt_data_end+0xfffe0fa0>

04020fc4 <__divsf3>:
 4020fc4:	defff504 	addi	sp,sp,-44
 4020fc8:	200cd5fa 	srli	r6,r4,23
 4020fcc:	dcc00415 	stw	r19,16(sp)
 4020fd0:	2026d7fa 	srli	r19,r4,31
 4020fd4:	00c02034 	movhi	r3,128
 4020fd8:	dd800715 	stw	r22,28(sp)
 4020fdc:	dd000515 	stw	r20,20(sp)
 4020fe0:	dc800315 	stw	r18,12(sp)
 4020fe4:	18ffffc4 	addi	r3,r3,-1
 4020fe8:	dfc00a15 	stw	ra,40(sp)
 4020fec:	df000915 	stw	fp,36(sp)
 4020ff0:	ddc00815 	stw	r23,32(sp)
 4020ff4:	dd400615 	stw	r21,24(sp)
 4020ff8:	dc400215 	stw	r17,8(sp)
 4020ffc:	dc000115 	stw	r16,4(sp)
 4021000:	35003fcc 	andi	r20,r6,255
 4021004:	1924703a 	and	r18,r3,r4
 4021008:	9d803fcc 	andi	r22,r19,255
 402100c:	a0005226 	beq	r20,zero,4021158 <__divsf3+0x194>
 4021010:	00803fc4 	movi	r2,255
 4021014:	a0802e26 	beq	r20,r2,40210d0 <__divsf3+0x10c>
 4021018:	91002034 	orhi	r4,r18,128
 402101c:	202490fa 	slli	r18,r4,3
 4021020:	a53fe044 	addi	r20,r20,-127
 4021024:	0021883a 	mov	r16,zero
 4021028:	002f883a 	mov	r23,zero
 402102c:	280cd5fa 	srli	r6,r5,23
 4021030:	282ad7fa 	srli	r21,r5,31
 4021034:	00c02034 	movhi	r3,128
 4021038:	18ffffc4 	addi	r3,r3,-1
 402103c:	31803fcc 	andi	r6,r6,255
 4021040:	1962703a 	and	r17,r3,r5
 4021044:	af003fcc 	andi	fp,r21,255
 4021048:	30004a26 	beq	r6,zero,4021174 <__divsf3+0x1b0>
 402104c:	00803fc4 	movi	r2,255
 4021050:	30804526 	beq	r6,r2,4021168 <__divsf3+0x1a4>
 4021054:	89402034 	orhi	r5,r17,128
 4021058:	282290fa 	slli	r17,r5,3
 402105c:	31bfe044 	addi	r6,r6,-127
 4021060:	000b883a 	mov	r5,zero
 4021064:	2c20b03a 	or	r16,r5,r16
 4021068:	802090ba 	slli	r16,r16,2
 402106c:	008100b4 	movhi	r2,1026
 4021070:	10842404 	addi	r2,r2,4240
 4021074:	80a1883a 	add	r16,r16,r2
 4021078:	81000017 	ldw	r4,0(r16)
 402107c:	9d46f03a 	xor	r3,r19,r21
 4021080:	180f883a 	mov	r7,r3
 4021084:	18803fcc 	andi	r2,r3,255
 4021088:	a18dc83a 	sub	r6,r20,r6
 402108c:	2000683a 	jmp	r4
 4021090:	04021274 	movhi	r16,2121
 4021094:	040210f8 	rdprs	r16,zero,2115
 4021098:	04021268 	cmpgeui	r16,zero,2121
 402109c:	040210e4 	muli	r16,zero,2115
 40210a0:	04021268 	cmpgeui	r16,zero,2121
 40210a4:	04021240 	call	402124 <__alt_mem_sdram_controller_2+0x402124>
 40210a8:	04021268 	cmpgeui	r16,zero,2121
 40210ac:	040210e4 	muli	r16,zero,2115
 40210b0:	040210f8 	rdprs	r16,zero,2115
 40210b4:	040210f8 	rdprs	r16,zero,2115
 40210b8:	04021240 	call	402124 <__alt_mem_sdram_controller_2+0x402124>
 40210bc:	040210e4 	muli	r16,zero,2115
 40210c0:	04021354 	movui	r16,2125
 40210c4:	04021354 	movui	r16,2125
 40210c8:	04021354 	movui	r16,2125
 40210cc:	04021308 	cmpgei	r16,zero,2124
 40210d0:	9000581e 	bne	r18,zero,4021234 <__divsf3+0x270>
 40210d4:	04000204 	movi	r16,8
 40210d8:	05c00084 	movi	r23,2
 40210dc:	003fd306 	br	402102c <__alt_data_end+0xfffe102c>
 40210e0:	0023883a 	mov	r17,zero
 40210e4:	e02d883a 	mov	r22,fp
 40210e8:	282f883a 	mov	r23,r5
 40210ec:	00800084 	movi	r2,2
 40210f0:	b8808f1e 	bne	r23,r2,4021330 <__divsf3+0x36c>
 40210f4:	b005883a 	mov	r2,r22
 40210f8:	11c0004c 	andi	r7,r2,1
 40210fc:	013fffc4 	movi	r4,-1
 4021100:	000d883a 	mov	r6,zero
 4021104:	21003fcc 	andi	r4,r4,255
 4021108:	200895fa 	slli	r4,r4,23
 402110c:	38803fcc 	andi	r2,r7,255
 4021110:	00c02034 	movhi	r3,128
 4021114:	100497fa 	slli	r2,r2,31
 4021118:	18ffffc4 	addi	r3,r3,-1
 402111c:	30c6703a 	and	r3,r6,r3
 4021120:	1906b03a 	or	r3,r3,r4
 4021124:	1884b03a 	or	r2,r3,r2
 4021128:	dfc00a17 	ldw	ra,40(sp)
 402112c:	df000917 	ldw	fp,36(sp)
 4021130:	ddc00817 	ldw	r23,32(sp)
 4021134:	dd800717 	ldw	r22,28(sp)
 4021138:	dd400617 	ldw	r21,24(sp)
 402113c:	dd000517 	ldw	r20,20(sp)
 4021140:	dcc00417 	ldw	r19,16(sp)
 4021144:	dc800317 	ldw	r18,12(sp)
 4021148:	dc400217 	ldw	r17,8(sp)
 402114c:	dc000117 	ldw	r16,4(sp)
 4021150:	dec00b04 	addi	sp,sp,44
 4021154:	f800283a 	ret
 4021158:	90002b1e 	bne	r18,zero,4021208 <__divsf3+0x244>
 402115c:	04000104 	movi	r16,4
 4021160:	05c00044 	movi	r23,1
 4021164:	003fb106 	br	402102c <__alt_data_end+0xfffe102c>
 4021168:	8800251e 	bne	r17,zero,4021200 <__divsf3+0x23c>
 402116c:	01400084 	movi	r5,2
 4021170:	00000206 	br	402117c <__divsf3+0x1b8>
 4021174:	88001a1e 	bne	r17,zero,40211e0 <__divsf3+0x21c>
 4021178:	01400044 	movi	r5,1
 402117c:	8160b03a 	or	r16,r16,r5
 4021180:	802090ba 	slli	r16,r16,2
 4021184:	00c100b4 	movhi	r3,1026
 4021188:	18c46804 	addi	r3,r3,4512
 402118c:	80e1883a 	add	r16,r16,r3
 4021190:	80c00017 	ldw	r3,0(r16)
 4021194:	9d44f03a 	xor	r2,r19,r21
 4021198:	a18dc83a 	sub	r6,r20,r6
 402119c:	1800683a 	jmp	r3
 40211a0:	040210f8 	rdprs	r16,zero,2115
 40211a4:	040210f8 	rdprs	r16,zero,2115
 40211a8:	04021344 	movi	r16,2125
 40211ac:	040210e0 	cmpeqi	r16,zero,2115
 40211b0:	04021344 	movi	r16,2125
 40211b4:	04021240 	call	402124 <__alt_mem_sdram_controller_2+0x402124>
 40211b8:	04021344 	movi	r16,2125
 40211bc:	040210e0 	cmpeqi	r16,zero,2115
 40211c0:	040210f8 	rdprs	r16,zero,2115
 40211c4:	040210f8 	rdprs	r16,zero,2115
 40211c8:	04021240 	call	402124 <__alt_mem_sdram_controller_2+0x402124>
 40211cc:	040210e0 	cmpeqi	r16,zero,2115
 40211d0:	04021354 	movui	r16,2125
 40211d4:	04021354 	movui	r16,2125
 40211d8:	04021354 	movui	r16,2125
 40211dc:	0402136c 	andhi	r16,zero,2125
 40211e0:	8809883a 	mov	r4,r17
 40211e4:	4021f180 	call	4021f18 <__clzsi2>
 40211e8:	10fffec4 	addi	r3,r2,-5
 40211ec:	10801d84 	addi	r2,r2,118
 40211f0:	88e2983a 	sll	r17,r17,r3
 40211f4:	008dc83a 	sub	r6,zero,r2
 40211f8:	000b883a 	mov	r5,zero
 40211fc:	003f9906 	br	4021064 <__alt_data_end+0xfffe1064>
 4021200:	014000c4 	movi	r5,3
 4021204:	003f9706 	br	4021064 <__alt_data_end+0xfffe1064>
 4021208:	9009883a 	mov	r4,r18
 402120c:	d9400015 	stw	r5,0(sp)
 4021210:	4021f180 	call	4021f18 <__clzsi2>
 4021214:	10fffec4 	addi	r3,r2,-5
 4021218:	11801d84 	addi	r6,r2,118
 402121c:	90e4983a 	sll	r18,r18,r3
 4021220:	01a9c83a 	sub	r20,zero,r6
 4021224:	0021883a 	mov	r16,zero
 4021228:	002f883a 	mov	r23,zero
 402122c:	d9400017 	ldw	r5,0(sp)
 4021230:	003f7e06 	br	402102c <__alt_data_end+0xfffe102c>
 4021234:	04000304 	movi	r16,12
 4021238:	05c000c4 	movi	r23,3
 402123c:	003f7b06 	br	402102c <__alt_data_end+0xfffe102c>
 4021240:	01802034 	movhi	r6,128
 4021244:	000f883a 	mov	r7,zero
 4021248:	31bfffc4 	addi	r6,r6,-1
 402124c:	013fffc4 	movi	r4,-1
 4021250:	003fac06 	br	4021104 <__alt_data_end+0xfffe1104>
 4021254:	01400044 	movi	r5,1
 4021258:	2909c83a 	sub	r4,r5,r4
 402125c:	00c006c4 	movi	r3,27
 4021260:	19004b0e 	bge	r3,r4,4021390 <__divsf3+0x3cc>
 4021264:	114e703a 	and	r7,r2,r5
 4021268:	0009883a 	mov	r4,zero
 402126c:	000d883a 	mov	r6,zero
 4021270:	003fa406 	br	4021104 <__alt_data_end+0xfffe1104>
 4021274:	9006917a 	slli	r3,r18,5
 4021278:	8822917a 	slli	r17,r17,5
 402127c:	1c40372e 	bgeu	r3,r17,402135c <__divsf3+0x398>
 4021280:	31bfffc4 	addi	r6,r6,-1
 4021284:	010006c4 	movi	r4,27
 4021288:	000b883a 	mov	r5,zero
 402128c:	180f883a 	mov	r7,r3
 4021290:	294b883a 	add	r5,r5,r5
 4021294:	18c7883a 	add	r3,r3,r3
 4021298:	38000116 	blt	r7,zero,40212a0 <__divsf3+0x2dc>
 402129c:	1c400236 	bltu	r3,r17,40212a8 <__divsf3+0x2e4>
 40212a0:	1c47c83a 	sub	r3,r3,r17
 40212a4:	29400054 	ori	r5,r5,1
 40212a8:	213fffc4 	addi	r4,r4,-1
 40212ac:	203ff71e 	bne	r4,zero,402128c <__alt_data_end+0xfffe128c>
 40212b0:	1806c03a 	cmpne	r3,r3,zero
 40212b4:	1962b03a 	or	r17,r3,r5
 40212b8:	31001fc4 	addi	r4,r6,127
 40212bc:	013fe50e 	bge	zero,r4,4021254 <__alt_data_end+0xfffe1254>
 40212c0:	88c001cc 	andi	r3,r17,7
 40212c4:	18000426 	beq	r3,zero,40212d8 <__divsf3+0x314>
 40212c8:	88c003cc 	andi	r3,r17,15
 40212cc:	01400104 	movi	r5,4
 40212d0:	19400126 	beq	r3,r5,40212d8 <__divsf3+0x314>
 40212d4:	8963883a 	add	r17,r17,r5
 40212d8:	88c2002c 	andhi	r3,r17,2048
 40212dc:	18000426 	beq	r3,zero,40212f0 <__divsf3+0x32c>
 40212e0:	00fe0034 	movhi	r3,63488
 40212e4:	18ffffc4 	addi	r3,r3,-1
 40212e8:	31002004 	addi	r4,r6,128
 40212ec:	88e2703a 	and	r17,r17,r3
 40212f0:	00c03f84 	movi	r3,254
 40212f4:	193f8016 	blt	r3,r4,40210f8 <__alt_data_end+0xfffe10f8>
 40212f8:	880c91ba 	slli	r6,r17,6
 40212fc:	11c0004c 	andi	r7,r2,1
 4021300:	300cd27a 	srli	r6,r6,9
 4021304:	003f7f06 	br	4021104 <__alt_data_end+0xfffe1104>
 4021308:	9080102c 	andhi	r2,r18,64
 402130c:	10000226 	beq	r2,zero,4021318 <__divsf3+0x354>
 4021310:	8880102c 	andhi	r2,r17,64
 4021314:	10001826 	beq	r2,zero,4021378 <__divsf3+0x3b4>
 4021318:	00802034 	movhi	r2,128
 402131c:	91801034 	orhi	r6,r18,64
 4021320:	10bfffc4 	addi	r2,r2,-1
 4021324:	980f883a 	mov	r7,r19
 4021328:	308c703a 	and	r6,r6,r2
 402132c:	003fc706 	br	402124c <__alt_data_end+0xfffe124c>
 4021330:	008000c4 	movi	r2,3
 4021334:	b8802d26 	beq	r23,r2,40213ec <__divsf3+0x428>
 4021338:	00c00044 	movi	r3,1
 402133c:	b005883a 	mov	r2,r22
 4021340:	b8ffdd1e 	bne	r23,r3,40212b8 <__alt_data_end+0xfffe12b8>
 4021344:	11c0004c 	andi	r7,r2,1
 4021348:	0009883a 	mov	r4,zero
 402134c:	000d883a 	mov	r6,zero
 4021350:	003f6c06 	br	4021104 <__alt_data_end+0xfffe1104>
 4021354:	9023883a 	mov	r17,r18
 4021358:	003f6406 	br	40210ec <__alt_data_end+0xfffe10ec>
 402135c:	1c47c83a 	sub	r3,r3,r17
 4021360:	01000684 	movi	r4,26
 4021364:	01400044 	movi	r5,1
 4021368:	003fc806 	br	402128c <__alt_data_end+0xfffe128c>
 402136c:	9080102c 	andhi	r2,r18,64
 4021370:	103fe926 	beq	r2,zero,4021318 <__alt_data_end+0xfffe1318>
 4021374:	0023883a 	mov	r17,zero
 4021378:	00802034 	movhi	r2,128
 402137c:	89801034 	orhi	r6,r17,64
 4021380:	10bfffc4 	addi	r2,r2,-1
 4021384:	a80f883a 	mov	r7,r21
 4021388:	308c703a 	and	r6,r6,r2
 402138c:	003faf06 	br	402124c <__alt_data_end+0xfffe124c>
 4021390:	01c00804 	movi	r7,32
 4021394:	390fc83a 	sub	r7,r7,r4
 4021398:	89ce983a 	sll	r7,r17,r7
 402139c:	890ad83a 	srl	r5,r17,r4
 40213a0:	380ec03a 	cmpne	r7,r7,zero
 40213a4:	29cab03a 	or	r5,r5,r7
 40213a8:	28c001cc 	andi	r3,r5,7
 40213ac:	18000426 	beq	r3,zero,40213c0 <__divsf3+0x3fc>
 40213b0:	28c003cc 	andi	r3,r5,15
 40213b4:	01000104 	movi	r4,4
 40213b8:	19000126 	beq	r3,r4,40213c0 <__divsf3+0x3fc>
 40213bc:	290b883a 	add	r5,r5,r4
 40213c0:	28c1002c 	andhi	r3,r5,1024
 40213c4:	18000426 	beq	r3,zero,40213d8 <__divsf3+0x414>
 40213c8:	11c0004c 	andi	r7,r2,1
 40213cc:	01000044 	movi	r4,1
 40213d0:	000d883a 	mov	r6,zero
 40213d4:	003f4b06 	br	4021104 <__alt_data_end+0xfffe1104>
 40213d8:	280a91ba 	slli	r5,r5,6
 40213dc:	11c0004c 	andi	r7,r2,1
 40213e0:	0009883a 	mov	r4,zero
 40213e4:	280cd27a 	srli	r6,r5,9
 40213e8:	003f4606 	br	4021104 <__alt_data_end+0xfffe1104>
 40213ec:	00802034 	movhi	r2,128
 40213f0:	89801034 	orhi	r6,r17,64
 40213f4:	10bfffc4 	addi	r2,r2,-1
 40213f8:	b00f883a 	mov	r7,r22
 40213fc:	308c703a 	and	r6,r6,r2
 4021400:	003f9206 	br	402124c <__alt_data_end+0xfffe124c>

04021404 <__mulsf3>:
 4021404:	defff504 	addi	sp,sp,-44
 4021408:	dc000115 	stw	r16,4(sp)
 402140c:	2020d5fa 	srli	r16,r4,23
 4021410:	dd400615 	stw	r21,24(sp)
 4021414:	202ad7fa 	srli	r21,r4,31
 4021418:	dc800315 	stw	r18,12(sp)
 402141c:	04802034 	movhi	r18,128
 4021420:	df000915 	stw	fp,36(sp)
 4021424:	dd000515 	stw	r20,20(sp)
 4021428:	94bfffc4 	addi	r18,r18,-1
 402142c:	dfc00a15 	stw	ra,40(sp)
 4021430:	ddc00815 	stw	r23,32(sp)
 4021434:	dd800715 	stw	r22,28(sp)
 4021438:	dcc00415 	stw	r19,16(sp)
 402143c:	dc400215 	stw	r17,8(sp)
 4021440:	84003fcc 	andi	r16,r16,255
 4021444:	9124703a 	and	r18,r18,r4
 4021448:	a829883a 	mov	r20,r21
 402144c:	af003fcc 	andi	fp,r21,255
 4021450:	80005426 	beq	r16,zero,40215a4 <__mulsf3+0x1a0>
 4021454:	00803fc4 	movi	r2,255
 4021458:	80802f26 	beq	r16,r2,4021518 <__mulsf3+0x114>
 402145c:	91002034 	orhi	r4,r18,128
 4021460:	202490fa 	slli	r18,r4,3
 4021464:	843fe044 	addi	r16,r16,-127
 4021468:	0023883a 	mov	r17,zero
 402146c:	002f883a 	mov	r23,zero
 4021470:	2804d5fa 	srli	r2,r5,23
 4021474:	282cd7fa 	srli	r22,r5,31
 4021478:	01002034 	movhi	r4,128
 402147c:	213fffc4 	addi	r4,r4,-1
 4021480:	10803fcc 	andi	r2,r2,255
 4021484:	2166703a 	and	r19,r4,r5
 4021488:	b1803fcc 	andi	r6,r22,255
 402148c:	10004c26 	beq	r2,zero,40215c0 <__mulsf3+0x1bc>
 4021490:	00c03fc4 	movi	r3,255
 4021494:	10c04726 	beq	r2,r3,40215b4 <__mulsf3+0x1b0>
 4021498:	99002034 	orhi	r4,r19,128
 402149c:	202690fa 	slli	r19,r4,3
 40214a0:	10bfe044 	addi	r2,r2,-127
 40214a4:	0007883a 	mov	r3,zero
 40214a8:	80a1883a 	add	r16,r16,r2
 40214ac:	010003c4 	movi	r4,15
 40214b0:	1c44b03a 	or	r2,r3,r17
 40214b4:	b56af03a 	xor	r21,r22,r21
 40214b8:	81c00044 	addi	r7,r16,1
 40214bc:	20806b36 	bltu	r4,r2,402166c <__mulsf3+0x268>
 40214c0:	100490ba 	slli	r2,r2,2
 40214c4:	010100b4 	movhi	r4,1026
 40214c8:	21053604 	addi	r4,r4,5336
 40214cc:	1105883a 	add	r2,r2,r4
 40214d0:	10800017 	ldw	r2,0(r2)
 40214d4:	1000683a 	jmp	r2
 40214d8:	0402166c 	andhi	r16,zero,2137
 40214dc:	0402152c 	andhi	r16,zero,2132
 40214e0:	0402152c 	andhi	r16,zero,2132
 40214e4:	04021528 	cmpgeui	r16,zero,2132
 40214e8:	04021650 	cmplti	r16,zero,2137
 40214ec:	04021650 	cmplti	r16,zero,2137
 40214f0:	0402163c 	xorhi	r16,zero,2136
 40214f4:	04021528 	cmpgeui	r16,zero,2132
 40214f8:	04021650 	cmplti	r16,zero,2137
 40214fc:	0402163c 	xorhi	r16,zero,2136
 4021500:	04021650 	cmplti	r16,zero,2137
 4021504:	04021528 	cmpgeui	r16,zero,2132
 4021508:	0402165c 	xori	r16,zero,2137
 402150c:	0402165c 	xori	r16,zero,2137
 4021510:	0402165c 	xori	r16,zero,2137
 4021514:	04021738 	rdprs	r16,zero,2140
 4021518:	90003b1e 	bne	r18,zero,4021608 <__mulsf3+0x204>
 402151c:	04400204 	movi	r17,8
 4021520:	05c00084 	movi	r23,2
 4021524:	003fd206 	br	4021470 <__alt_data_end+0xfffe1470>
 4021528:	302b883a 	mov	r21,r6
 402152c:	00800084 	movi	r2,2
 4021530:	18802626 	beq	r3,r2,40215cc <__mulsf3+0x1c8>
 4021534:	008000c4 	movi	r2,3
 4021538:	1880ab26 	beq	r3,r2,40217e8 <__mulsf3+0x3e4>
 402153c:	00800044 	movi	r2,1
 4021540:	1880a21e 	bne	r3,r2,40217cc <__mulsf3+0x3c8>
 4021544:	a829883a 	mov	r20,r21
 4021548:	0007883a 	mov	r3,zero
 402154c:	0009883a 	mov	r4,zero
 4021550:	18803fcc 	andi	r2,r3,255
 4021554:	100695fa 	slli	r3,r2,23
 4021558:	a0803fcc 	andi	r2,r20,255
 402155c:	100a97fa 	slli	r5,r2,31
 4021560:	00802034 	movhi	r2,128
 4021564:	10bfffc4 	addi	r2,r2,-1
 4021568:	2084703a 	and	r2,r4,r2
 402156c:	10c4b03a 	or	r2,r2,r3
 4021570:	1144b03a 	or	r2,r2,r5
 4021574:	dfc00a17 	ldw	ra,40(sp)
 4021578:	df000917 	ldw	fp,36(sp)
 402157c:	ddc00817 	ldw	r23,32(sp)
 4021580:	dd800717 	ldw	r22,28(sp)
 4021584:	dd400617 	ldw	r21,24(sp)
 4021588:	dd000517 	ldw	r20,20(sp)
 402158c:	dcc00417 	ldw	r19,16(sp)
 4021590:	dc800317 	ldw	r18,12(sp)
 4021594:	dc400217 	ldw	r17,8(sp)
 4021598:	dc000117 	ldw	r16,4(sp)
 402159c:	dec00b04 	addi	sp,sp,44
 40215a0:	f800283a 	ret
 40215a4:	90000d1e 	bne	r18,zero,40215dc <__mulsf3+0x1d8>
 40215a8:	04400104 	movi	r17,4
 40215ac:	05c00044 	movi	r23,1
 40215b0:	003faf06 	br	4021470 <__alt_data_end+0xfffe1470>
 40215b4:	9806c03a 	cmpne	r3,r19,zero
 40215b8:	18c00084 	addi	r3,r3,2
 40215bc:	003fba06 	br	40214a8 <__alt_data_end+0xfffe14a8>
 40215c0:	9800141e 	bne	r19,zero,4021614 <__mulsf3+0x210>
 40215c4:	00c00044 	movi	r3,1
 40215c8:	003fb706 	br	40214a8 <__alt_data_end+0xfffe14a8>
 40215cc:	a829883a 	mov	r20,r21
 40215d0:	00ffffc4 	movi	r3,-1
 40215d4:	0009883a 	mov	r4,zero
 40215d8:	003fdd06 	br	4021550 <__alt_data_end+0xfffe1550>
 40215dc:	9009883a 	mov	r4,r18
 40215e0:	d9400015 	stw	r5,0(sp)
 40215e4:	4021f180 	call	4021f18 <__clzsi2>
 40215e8:	10fffec4 	addi	r3,r2,-5
 40215ec:	10801d84 	addi	r2,r2,118
 40215f0:	90e4983a 	sll	r18,r18,r3
 40215f4:	00a1c83a 	sub	r16,zero,r2
 40215f8:	0023883a 	mov	r17,zero
 40215fc:	002f883a 	mov	r23,zero
 4021600:	d9400017 	ldw	r5,0(sp)
 4021604:	003f9a06 	br	4021470 <__alt_data_end+0xfffe1470>
 4021608:	04400304 	movi	r17,12
 402160c:	05c000c4 	movi	r23,3
 4021610:	003f9706 	br	4021470 <__alt_data_end+0xfffe1470>
 4021614:	9809883a 	mov	r4,r19
 4021618:	d9800015 	stw	r6,0(sp)
 402161c:	4021f180 	call	4021f18 <__clzsi2>
 4021620:	10fffec4 	addi	r3,r2,-5
 4021624:	10801d84 	addi	r2,r2,118
 4021628:	98e6983a 	sll	r19,r19,r3
 402162c:	0085c83a 	sub	r2,zero,r2
 4021630:	0007883a 	mov	r3,zero
 4021634:	d9800017 	ldw	r6,0(sp)
 4021638:	003f9b06 	br	40214a8 <__alt_data_end+0xfffe14a8>
 402163c:	01002034 	movhi	r4,128
 4021640:	0029883a 	mov	r20,zero
 4021644:	213fffc4 	addi	r4,r4,-1
 4021648:	00ffffc4 	movi	r3,-1
 402164c:	003fc006 	br	4021550 <__alt_data_end+0xfffe1550>
 4021650:	9027883a 	mov	r19,r18
 4021654:	b807883a 	mov	r3,r23
 4021658:	003fb406 	br	402152c <__alt_data_end+0xfffe152c>
 402165c:	9027883a 	mov	r19,r18
 4021660:	e02b883a 	mov	r21,fp
 4021664:	b807883a 	mov	r3,r23
 4021668:	003fb006 	br	402152c <__alt_data_end+0xfffe152c>
 402166c:	9004d43a 	srli	r2,r18,16
 4021670:	9810d43a 	srli	r8,r19,16
 4021674:	94bfffcc 	andi	r18,r18,65535
 4021678:	993fffcc 	andi	r4,r19,65535
 402167c:	910d383a 	mul	r6,r18,r4
 4021680:	20a7383a 	mul	r19,r4,r2
 4021684:	9225383a 	mul	r18,r18,r8
 4021688:	3006d43a 	srli	r3,r6,16
 402168c:	1211383a 	mul	r8,r2,r8
 4021690:	94e5883a 	add	r18,r18,r19
 4021694:	1c87883a 	add	r3,r3,r18
 4021698:	1cc0022e 	bgeu	r3,r19,40216a4 <__mulsf3+0x2a0>
 402169c:	00800074 	movhi	r2,1
 40216a0:	4091883a 	add	r8,r8,r2
 40216a4:	1804943a 	slli	r2,r3,16
 40216a8:	31bfffcc 	andi	r6,r6,65535
 40216ac:	1806d43a 	srli	r3,r3,16
 40216b0:	1185883a 	add	r2,r2,r6
 40216b4:	102691ba 	slli	r19,r2,6
 40216b8:	1a07883a 	add	r3,r3,r8
 40216bc:	1004d6ba 	srli	r2,r2,26
 40216c0:	180891ba 	slli	r4,r3,6
 40216c4:	9826c03a 	cmpne	r19,r19,zero
 40216c8:	9884b03a 	or	r2,r19,r2
 40216cc:	1126b03a 	or	r19,r2,r4
 40216d0:	9882002c 	andhi	r2,r19,2048
 40216d4:	10000426 	beq	r2,zero,40216e8 <__mulsf3+0x2e4>
 40216d8:	9804d07a 	srli	r2,r19,1
 40216dc:	9900004c 	andi	r4,r19,1
 40216e0:	3821883a 	mov	r16,r7
 40216e4:	1126b03a 	or	r19,r2,r4
 40216e8:	80c01fc4 	addi	r3,r16,127
 40216ec:	00c0210e 	bge	zero,r3,4021774 <__mulsf3+0x370>
 40216f0:	988001cc 	andi	r2,r19,7
 40216f4:	10000426 	beq	r2,zero,4021708 <__mulsf3+0x304>
 40216f8:	988003cc 	andi	r2,r19,15
 40216fc:	01000104 	movi	r4,4
 4021700:	11000126 	beq	r2,r4,4021708 <__mulsf3+0x304>
 4021704:	9927883a 	add	r19,r19,r4
 4021708:	9882002c 	andhi	r2,r19,2048
 402170c:	10000426 	beq	r2,zero,4021720 <__mulsf3+0x31c>
 4021710:	00be0034 	movhi	r2,63488
 4021714:	10bfffc4 	addi	r2,r2,-1
 4021718:	80c02004 	addi	r3,r16,128
 402171c:	98a6703a 	and	r19,r19,r2
 4021720:	00803f84 	movi	r2,254
 4021724:	10ffa916 	blt	r2,r3,40215cc <__alt_data_end+0xfffe15cc>
 4021728:	980891ba 	slli	r4,r19,6
 402172c:	a829883a 	mov	r20,r21
 4021730:	2008d27a 	srli	r4,r4,9
 4021734:	003f8606 	br	4021550 <__alt_data_end+0xfffe1550>
 4021738:	9080102c 	andhi	r2,r18,64
 402173c:	10000826 	beq	r2,zero,4021760 <__mulsf3+0x35c>
 4021740:	9880102c 	andhi	r2,r19,64
 4021744:	1000061e 	bne	r2,zero,4021760 <__mulsf3+0x35c>
 4021748:	00802034 	movhi	r2,128
 402174c:	99001034 	orhi	r4,r19,64
 4021750:	10bfffc4 	addi	r2,r2,-1
 4021754:	b029883a 	mov	r20,r22
 4021758:	2088703a 	and	r4,r4,r2
 402175c:	003fba06 	br	4021648 <__alt_data_end+0xfffe1648>
 4021760:	00802034 	movhi	r2,128
 4021764:	91001034 	orhi	r4,r18,64
 4021768:	10bfffc4 	addi	r2,r2,-1
 402176c:	2088703a 	and	r4,r4,r2
 4021770:	003fb506 	br	4021648 <__alt_data_end+0xfffe1648>
 4021774:	00800044 	movi	r2,1
 4021778:	10c7c83a 	sub	r3,r2,r3
 402177c:	008006c4 	movi	r2,27
 4021780:	10ff7016 	blt	r2,r3,4021544 <__alt_data_end+0xfffe1544>
 4021784:	00800804 	movi	r2,32
 4021788:	10c5c83a 	sub	r2,r2,r3
 402178c:	9884983a 	sll	r2,r19,r2
 4021790:	98c6d83a 	srl	r3,r19,r3
 4021794:	1004c03a 	cmpne	r2,r2,zero
 4021798:	1884b03a 	or	r2,r3,r2
 402179c:	10c001cc 	andi	r3,r2,7
 40217a0:	18000426 	beq	r3,zero,40217b4 <__mulsf3+0x3b0>
 40217a4:	10c003cc 	andi	r3,r2,15
 40217a8:	01000104 	movi	r4,4
 40217ac:	19000126 	beq	r3,r4,40217b4 <__mulsf3+0x3b0>
 40217b0:	1105883a 	add	r2,r2,r4
 40217b4:	10c1002c 	andhi	r3,r2,1024
 40217b8:	18000626 	beq	r3,zero,40217d4 <__mulsf3+0x3d0>
 40217bc:	a829883a 	mov	r20,r21
 40217c0:	00c00044 	movi	r3,1
 40217c4:	0009883a 	mov	r4,zero
 40217c8:	003f6106 	br	4021550 <__alt_data_end+0xfffe1550>
 40217cc:	3821883a 	mov	r16,r7
 40217d0:	003fc506 	br	40216e8 <__alt_data_end+0xfffe16e8>
 40217d4:	100491ba 	slli	r2,r2,6
 40217d8:	a829883a 	mov	r20,r21
 40217dc:	0007883a 	mov	r3,zero
 40217e0:	1008d27a 	srli	r4,r2,9
 40217e4:	003f5a06 	br	4021550 <__alt_data_end+0xfffe1550>
 40217e8:	00802034 	movhi	r2,128
 40217ec:	99001034 	orhi	r4,r19,64
 40217f0:	10bfffc4 	addi	r2,r2,-1
 40217f4:	a829883a 	mov	r20,r21
 40217f8:	2088703a 	and	r4,r4,r2
 40217fc:	003f9206 	br	4021648 <__alt_data_end+0xfffe1648>

04021800 <__subsf3>:
 4021800:	defffc04 	addi	sp,sp,-16
 4021804:	280cd5fa 	srli	r6,r5,23
 4021808:	dc000015 	stw	r16,0(sp)
 402180c:	01c02034 	movhi	r7,128
 4021810:	2020d5fa 	srli	r16,r4,23
 4021814:	39ffffc4 	addi	r7,r7,-1
 4021818:	3906703a 	and	r3,r7,r4
 402181c:	dc400115 	stw	r17,4(sp)
 4021820:	394e703a 	and	r7,r7,r5
 4021824:	2022d7fa 	srli	r17,r4,31
 4021828:	dfc00315 	stw	ra,12(sp)
 402182c:	dc800215 	stw	r18,8(sp)
 4021830:	31803fcc 	andi	r6,r6,255
 4021834:	01003fc4 	movi	r4,255
 4021838:	84003fcc 	andi	r16,r16,255
 402183c:	180690fa 	slli	r3,r3,3
 4021840:	2804d7fa 	srli	r2,r5,31
 4021844:	380e90fa 	slli	r7,r7,3
 4021848:	31006d26 	beq	r6,r4,4021a00 <__subsf3+0x200>
 402184c:	1080005c 	xori	r2,r2,1
 4021850:	8189c83a 	sub	r4,r16,r6
 4021854:	14404f26 	beq	r2,r17,4021994 <__subsf3+0x194>
 4021858:	0100770e 	bge	zero,r4,4021a38 <__subsf3+0x238>
 402185c:	30001e1e 	bne	r6,zero,40218d8 <__subsf3+0xd8>
 4021860:	38006a1e 	bne	r7,zero,4021a0c <__subsf3+0x20c>
 4021864:	188001cc 	andi	r2,r3,7
 4021868:	10000426 	beq	r2,zero,402187c <__subsf3+0x7c>
 402186c:	188003cc 	andi	r2,r3,15
 4021870:	01000104 	movi	r4,4
 4021874:	11000126 	beq	r2,r4,402187c <__subsf3+0x7c>
 4021878:	1907883a 	add	r3,r3,r4
 402187c:	1881002c 	andhi	r2,r3,1024
 4021880:	10003926 	beq	r2,zero,4021968 <__subsf3+0x168>
 4021884:	84000044 	addi	r16,r16,1
 4021888:	00803fc4 	movi	r2,255
 402188c:	80807526 	beq	r16,r2,4021a64 <__subsf3+0x264>
 4021890:	180691ba 	slli	r3,r3,6
 4021894:	8880004c 	andi	r2,r17,1
 4021898:	180ad27a 	srli	r5,r3,9
 402189c:	84003fcc 	andi	r16,r16,255
 40218a0:	800695fa 	slli	r3,r16,23
 40218a4:	10803fcc 	andi	r2,r2,255
 40218a8:	01002034 	movhi	r4,128
 40218ac:	213fffc4 	addi	r4,r4,-1
 40218b0:	100497fa 	slli	r2,r2,31
 40218b4:	2920703a 	and	r16,r5,r4
 40218b8:	80e0b03a 	or	r16,r16,r3
 40218bc:	8084b03a 	or	r2,r16,r2
 40218c0:	dfc00317 	ldw	ra,12(sp)
 40218c4:	dc800217 	ldw	r18,8(sp)
 40218c8:	dc400117 	ldw	r17,4(sp)
 40218cc:	dc000017 	ldw	r16,0(sp)
 40218d0:	dec00404 	addi	sp,sp,16
 40218d4:	f800283a 	ret
 40218d8:	00803fc4 	movi	r2,255
 40218dc:	80bfe126 	beq	r16,r2,4021864 <__alt_data_end+0xfffe1864>
 40218e0:	39c10034 	orhi	r7,r7,1024
 40218e4:	008006c4 	movi	r2,27
 40218e8:	11007416 	blt	r2,r4,4021abc <__subsf3+0x2bc>
 40218ec:	00800804 	movi	r2,32
 40218f0:	1105c83a 	sub	r2,r2,r4
 40218f4:	3884983a 	sll	r2,r7,r2
 40218f8:	390ed83a 	srl	r7,r7,r4
 40218fc:	1008c03a 	cmpne	r4,r2,zero
 4021900:	390eb03a 	or	r7,r7,r4
 4021904:	19c7c83a 	sub	r3,r3,r7
 4021908:	1881002c 	andhi	r2,r3,1024
 402190c:	10001426 	beq	r2,zero,4021960 <__subsf3+0x160>
 4021910:	04810034 	movhi	r18,1024
 4021914:	94bfffc4 	addi	r18,r18,-1
 4021918:	1ca4703a 	and	r18,r3,r18
 402191c:	9009883a 	mov	r4,r18
 4021920:	4021f180 	call	4021f18 <__clzsi2>
 4021924:	10bffec4 	addi	r2,r2,-5
 4021928:	90a4983a 	sll	r18,r18,r2
 402192c:	14005116 	blt	r2,r16,4021a74 <__subsf3+0x274>
 4021930:	1405c83a 	sub	r2,r2,r16
 4021934:	10c00044 	addi	r3,r2,1
 4021938:	00800804 	movi	r2,32
 402193c:	10c5c83a 	sub	r2,r2,r3
 4021940:	9084983a 	sll	r2,r18,r2
 4021944:	90e4d83a 	srl	r18,r18,r3
 4021948:	0021883a 	mov	r16,zero
 402194c:	1006c03a 	cmpne	r3,r2,zero
 4021950:	90c6b03a 	or	r3,r18,r3
 4021954:	003fc306 	br	4021864 <__alt_data_end+0xfffe1864>
 4021958:	2000e026 	beq	r4,zero,4021cdc <__subsf3+0x4dc>
 402195c:	2007883a 	mov	r3,r4
 4021960:	188001cc 	andi	r2,r3,7
 4021964:	103fc11e 	bne	r2,zero,402186c <__alt_data_end+0xfffe186c>
 4021968:	180ad0fa 	srli	r5,r3,3
 402196c:	00c03fc4 	movi	r3,255
 4021970:	8880004c 	andi	r2,r17,1
 4021974:	80c0031e 	bne	r16,r3,4021984 <__subsf3+0x184>
 4021978:	28006d26 	beq	r5,zero,4021b30 <__subsf3+0x330>
 402197c:	29401034 	orhi	r5,r5,64
 4021980:	043fffc4 	movi	r16,-1
 4021984:	00c02034 	movhi	r3,128
 4021988:	18ffffc4 	addi	r3,r3,-1
 402198c:	28ca703a 	and	r5,r5,r3
 4021990:	003fc206 	br	402189c <__alt_data_end+0xfffe189c>
 4021994:	01003c0e 	bge	zero,r4,4021a88 <__subsf3+0x288>
 4021998:	30002126 	beq	r6,zero,4021a20 <__subsf3+0x220>
 402199c:	01403fc4 	movi	r5,255
 40219a0:	817fb026 	beq	r16,r5,4021864 <__alt_data_end+0xfffe1864>
 40219a4:	39c10034 	orhi	r7,r7,1024
 40219a8:	014006c4 	movi	r5,27
 40219ac:	29007416 	blt	r5,r4,4021b80 <__subsf3+0x380>
 40219b0:	01400804 	movi	r5,32
 40219b4:	290bc83a 	sub	r5,r5,r4
 40219b8:	394a983a 	sll	r5,r7,r5
 40219bc:	390ed83a 	srl	r7,r7,r4
 40219c0:	2808c03a 	cmpne	r4,r5,zero
 40219c4:	390eb03a 	or	r7,r7,r4
 40219c8:	19c7883a 	add	r3,r3,r7
 40219cc:	1901002c 	andhi	r4,r3,1024
 40219d0:	20003826 	beq	r4,zero,4021ab4 <__subsf3+0x2b4>
 40219d4:	84000044 	addi	r16,r16,1
 40219d8:	01003fc4 	movi	r4,255
 40219dc:	81005426 	beq	r16,r4,4021b30 <__subsf3+0x330>
 40219e0:	1023883a 	mov	r17,r2
 40219e4:	00bf0034 	movhi	r2,64512
 40219e8:	10bfffc4 	addi	r2,r2,-1
 40219ec:	1900004c 	andi	r4,r3,1
 40219f0:	1886703a 	and	r3,r3,r2
 40219f4:	1806d07a 	srli	r3,r3,1
 40219f8:	1906b03a 	or	r3,r3,r4
 40219fc:	003f9906 	br	4021864 <__alt_data_end+0xfffe1864>
 4021a00:	383f9226 	beq	r7,zero,402184c <__alt_data_end+0xfffe184c>
 4021a04:	10803fcc 	andi	r2,r2,255
 4021a08:	003f9106 	br	4021850 <__alt_data_end+0xfffe1850>
 4021a0c:	213fffc4 	addi	r4,r4,-1
 4021a10:	203fbc26 	beq	r4,zero,4021904 <__alt_data_end+0xfffe1904>
 4021a14:	00803fc4 	movi	r2,255
 4021a18:	80bfb21e 	bne	r16,r2,40218e4 <__alt_data_end+0xfffe18e4>
 4021a1c:	003f9106 	br	4021864 <__alt_data_end+0xfffe1864>
 4021a20:	383f9026 	beq	r7,zero,4021864 <__alt_data_end+0xfffe1864>
 4021a24:	213fffc4 	addi	r4,r4,-1
 4021a28:	203fe726 	beq	r4,zero,40219c8 <__alt_data_end+0xfffe19c8>
 4021a2c:	01403fc4 	movi	r5,255
 4021a30:	817fdd1e 	bne	r16,r5,40219a8 <__alt_data_end+0xfffe19a8>
 4021a34:	003f8b06 	br	4021864 <__alt_data_end+0xfffe1864>
 4021a38:	2000221e 	bne	r4,zero,4021ac4 <__subsf3+0x2c4>
 4021a3c:	81000044 	addi	r4,r16,1
 4021a40:	21003fcc 	andi	r4,r4,255
 4021a44:	01400044 	movi	r5,1
 4021a48:	2900470e 	bge	r5,r4,4021b68 <__subsf3+0x368>
 4021a4c:	19e5c83a 	sub	r18,r3,r7
 4021a50:	9141002c 	andhi	r5,r18,1024
 4021a54:	28002d26 	beq	r5,zero,4021b0c <__subsf3+0x30c>
 4021a58:	38e5c83a 	sub	r18,r7,r3
 4021a5c:	1023883a 	mov	r17,r2
 4021a60:	003fae06 	br	402191c <__alt_data_end+0xfffe191c>
 4021a64:	8880004c 	andi	r2,r17,1
 4021a68:	043fffc4 	movi	r16,-1
 4021a6c:	000b883a 	mov	r5,zero
 4021a70:	003f8a06 	br	402189c <__alt_data_end+0xfffe189c>
 4021a74:	00ff0034 	movhi	r3,64512
 4021a78:	18ffffc4 	addi	r3,r3,-1
 4021a7c:	80a1c83a 	sub	r16,r16,r2
 4021a80:	90c6703a 	and	r3,r18,r3
 4021a84:	003f7706 	br	4021864 <__alt_data_end+0xfffe1864>
 4021a88:	2000431e 	bne	r4,zero,4021b98 <__subsf3+0x398>
 4021a8c:	81000044 	addi	r4,r16,1
 4021a90:	21803fcc 	andi	r6,r4,255
 4021a94:	01400044 	movi	r5,1
 4021a98:	2980280e 	bge	r5,r6,4021b3c <__subsf3+0x33c>
 4021a9c:	01403fc4 	movi	r5,255
 4021aa0:	21402326 	beq	r4,r5,4021b30 <__subsf3+0x330>
 4021aa4:	19c7883a 	add	r3,r3,r7
 4021aa8:	1806d07a 	srli	r3,r3,1
 4021aac:	2021883a 	mov	r16,r4
 4021ab0:	003f6c06 	br	4021864 <__alt_data_end+0xfffe1864>
 4021ab4:	1023883a 	mov	r17,r2
 4021ab8:	003fa906 	br	4021960 <__alt_data_end+0xfffe1960>
 4021abc:	01c00044 	movi	r7,1
 4021ac0:	003f9006 	br	4021904 <__alt_data_end+0xfffe1904>
 4021ac4:	8000151e 	bne	r16,zero,4021b1c <__subsf3+0x31c>
 4021ac8:	18002f26 	beq	r3,zero,4021b88 <__subsf3+0x388>
 4021acc:	0108303a 	nor	r4,zero,r4
 4021ad0:	20000a26 	beq	r4,zero,4021afc <__subsf3+0x2fc>
 4021ad4:	01403fc4 	movi	r5,255
 4021ad8:	31402b26 	beq	r6,r5,4021b88 <__subsf3+0x388>
 4021adc:	014006c4 	movi	r5,27
 4021ae0:	29006e16 	blt	r5,r4,4021c9c <__subsf3+0x49c>
 4021ae4:	01400804 	movi	r5,32
 4021ae8:	290bc83a 	sub	r5,r5,r4
 4021aec:	194a983a 	sll	r5,r3,r5
 4021af0:	1908d83a 	srl	r4,r3,r4
 4021af4:	2806c03a 	cmpne	r3,r5,zero
 4021af8:	20c6b03a 	or	r3,r4,r3
 4021afc:	38c7c83a 	sub	r3,r7,r3
 4021b00:	3021883a 	mov	r16,r6
 4021b04:	1023883a 	mov	r17,r2
 4021b08:	003f7f06 	br	4021908 <__alt_data_end+0xfffe1908>
 4021b0c:	903f831e 	bne	r18,zero,402191c <__alt_data_end+0xfffe191c>
 4021b10:	0005883a 	mov	r2,zero
 4021b14:	0021883a 	mov	r16,zero
 4021b18:	003f9a06 	br	4021984 <__alt_data_end+0xfffe1984>
 4021b1c:	01403fc4 	movi	r5,255
 4021b20:	31401926 	beq	r6,r5,4021b88 <__subsf3+0x388>
 4021b24:	0109c83a 	sub	r4,zero,r4
 4021b28:	18c10034 	orhi	r3,r3,1024
 4021b2c:	003feb06 	br	4021adc <__alt_data_end+0xfffe1adc>
 4021b30:	043fffc4 	movi	r16,-1
 4021b34:	000b883a 	mov	r5,zero
 4021b38:	003f5806 	br	402189c <__alt_data_end+0xfffe189c>
 4021b3c:	8000481e 	bne	r16,zero,4021c60 <__subsf3+0x460>
 4021b40:	18006226 	beq	r3,zero,4021ccc <__subsf3+0x4cc>
 4021b44:	383f4726 	beq	r7,zero,4021864 <__alt_data_end+0xfffe1864>
 4021b48:	19c7883a 	add	r3,r3,r7
 4021b4c:	1881002c 	andhi	r2,r3,1024
 4021b50:	103f8326 	beq	r2,zero,4021960 <__alt_data_end+0xfffe1960>
 4021b54:	00bf0034 	movhi	r2,64512
 4021b58:	10bfffc4 	addi	r2,r2,-1
 4021b5c:	2821883a 	mov	r16,r5
 4021b60:	1886703a 	and	r3,r3,r2
 4021b64:	003f3f06 	br	4021864 <__alt_data_end+0xfffe1864>
 4021b68:	80001c1e 	bne	r16,zero,4021bdc <__subsf3+0x3dc>
 4021b6c:	1800261e 	bne	r3,zero,4021c08 <__subsf3+0x408>
 4021b70:	38004c26 	beq	r7,zero,4021ca4 <__subsf3+0x4a4>
 4021b74:	3807883a 	mov	r3,r7
 4021b78:	1023883a 	mov	r17,r2
 4021b7c:	003f3906 	br	4021864 <__alt_data_end+0xfffe1864>
 4021b80:	01c00044 	movi	r7,1
 4021b84:	003f9006 	br	40219c8 <__alt_data_end+0xfffe19c8>
 4021b88:	3807883a 	mov	r3,r7
 4021b8c:	3021883a 	mov	r16,r6
 4021b90:	1023883a 	mov	r17,r2
 4021b94:	003f3306 	br	4021864 <__alt_data_end+0xfffe1864>
 4021b98:	8000161e 	bne	r16,zero,4021bf4 <__subsf3+0x3f4>
 4021b9c:	18002d26 	beq	r3,zero,4021c54 <__subsf3+0x454>
 4021ba0:	0108303a 	nor	r4,zero,r4
 4021ba4:	20000a26 	beq	r4,zero,4021bd0 <__subsf3+0x3d0>
 4021ba8:	01403fc4 	movi	r5,255
 4021bac:	31402926 	beq	r6,r5,4021c54 <__subsf3+0x454>
 4021bb0:	014006c4 	movi	r5,27
 4021bb4:	29004716 	blt	r5,r4,4021cd4 <__subsf3+0x4d4>
 4021bb8:	01400804 	movi	r5,32
 4021bbc:	290bc83a 	sub	r5,r5,r4
 4021bc0:	194a983a 	sll	r5,r3,r5
 4021bc4:	1908d83a 	srl	r4,r3,r4
 4021bc8:	2806c03a 	cmpne	r3,r5,zero
 4021bcc:	20c6b03a 	or	r3,r4,r3
 4021bd0:	19c7883a 	add	r3,r3,r7
 4021bd4:	3021883a 	mov	r16,r6
 4021bd8:	003f7c06 	br	40219cc <__alt_data_end+0xfffe19cc>
 4021bdc:	1800111e 	bne	r3,zero,4021c24 <__subsf3+0x424>
 4021be0:	38003326 	beq	r7,zero,4021cb0 <__subsf3+0x4b0>
 4021be4:	3807883a 	mov	r3,r7
 4021be8:	1023883a 	mov	r17,r2
 4021bec:	04003fc4 	movi	r16,255
 4021bf0:	003f1c06 	br	4021864 <__alt_data_end+0xfffe1864>
 4021bf4:	01403fc4 	movi	r5,255
 4021bf8:	31401626 	beq	r6,r5,4021c54 <__subsf3+0x454>
 4021bfc:	0109c83a 	sub	r4,zero,r4
 4021c00:	18c10034 	orhi	r3,r3,1024
 4021c04:	003fea06 	br	4021bb0 <__alt_data_end+0xfffe1bb0>
 4021c08:	383f1626 	beq	r7,zero,4021864 <__alt_data_end+0xfffe1864>
 4021c0c:	19c9c83a 	sub	r4,r3,r7
 4021c10:	2141002c 	andhi	r5,r4,1024
 4021c14:	283f5026 	beq	r5,zero,4021958 <__alt_data_end+0xfffe1958>
 4021c18:	38c7c83a 	sub	r3,r7,r3
 4021c1c:	1023883a 	mov	r17,r2
 4021c20:	003f1006 	br	4021864 <__alt_data_end+0xfffe1864>
 4021c24:	38001b26 	beq	r7,zero,4021c94 <__subsf3+0x494>
 4021c28:	1806d0fa 	srli	r3,r3,3
 4021c2c:	1900102c 	andhi	r4,r3,64
 4021c30:	20000526 	beq	r4,zero,4021c48 <__subsf3+0x448>
 4021c34:	380ed0fa 	srli	r7,r7,3
 4021c38:	3900102c 	andhi	r4,r7,64
 4021c3c:	2000021e 	bne	r4,zero,4021c48 <__subsf3+0x448>
 4021c40:	3807883a 	mov	r3,r7
 4021c44:	1023883a 	mov	r17,r2
 4021c48:	180690fa 	slli	r3,r3,3
 4021c4c:	04003fc4 	movi	r16,255
 4021c50:	003f0406 	br	4021864 <__alt_data_end+0xfffe1864>
 4021c54:	3807883a 	mov	r3,r7
 4021c58:	3021883a 	mov	r16,r6
 4021c5c:	003f0106 	br	4021864 <__alt_data_end+0xfffe1864>
 4021c60:	18001726 	beq	r3,zero,4021cc0 <__subsf3+0x4c0>
 4021c64:	38000b26 	beq	r7,zero,4021c94 <__subsf3+0x494>
 4021c68:	1806d0fa 	srli	r3,r3,3
 4021c6c:	1900102c 	andhi	r4,r3,64
 4021c70:	20000426 	beq	r4,zero,4021c84 <__subsf3+0x484>
 4021c74:	380ed0fa 	srli	r7,r7,3
 4021c78:	3900102c 	andhi	r4,r7,64
 4021c7c:	2000011e 	bne	r4,zero,4021c84 <__subsf3+0x484>
 4021c80:	3807883a 	mov	r3,r7
 4021c84:	180690fa 	slli	r3,r3,3
 4021c88:	1023883a 	mov	r17,r2
 4021c8c:	04003fc4 	movi	r16,255
 4021c90:	003ef406 	br	4021864 <__alt_data_end+0xfffe1864>
 4021c94:	04003fc4 	movi	r16,255
 4021c98:	003ef206 	br	4021864 <__alt_data_end+0xfffe1864>
 4021c9c:	00c00044 	movi	r3,1
 4021ca0:	003f9606 	br	4021afc <__alt_data_end+0xfffe1afc>
 4021ca4:	000b883a 	mov	r5,zero
 4021ca8:	0005883a 	mov	r2,zero
 4021cac:	003f3506 	br	4021984 <__alt_data_end+0xfffe1984>
 4021cb0:	01402034 	movhi	r5,128
 4021cb4:	297fffc4 	addi	r5,r5,-1
 4021cb8:	0005883a 	mov	r2,zero
 4021cbc:	003f2f06 	br	402197c <__alt_data_end+0xfffe197c>
 4021cc0:	3807883a 	mov	r3,r7
 4021cc4:	04003fc4 	movi	r16,255
 4021cc8:	003ee606 	br	4021864 <__alt_data_end+0xfffe1864>
 4021ccc:	3807883a 	mov	r3,r7
 4021cd0:	003ee406 	br	4021864 <__alt_data_end+0xfffe1864>
 4021cd4:	00c00044 	movi	r3,1
 4021cd8:	003fbd06 	br	4021bd0 <__alt_data_end+0xfffe1bd0>
 4021cdc:	0005883a 	mov	r2,zero
 4021ce0:	003f2806 	br	4021984 <__alt_data_end+0xfffe1984>

04021ce4 <__floatsisf>:
 4021ce4:	defffd04 	addi	sp,sp,-12
 4021ce8:	dfc00215 	stw	ra,8(sp)
 4021cec:	dc400115 	stw	r17,4(sp)
 4021cf0:	dc000015 	stw	r16,0(sp)
 4021cf4:	20003526 	beq	r4,zero,4021dcc <__floatsisf+0xe8>
 4021cf8:	2021883a 	mov	r16,r4
 4021cfc:	2022d7fa 	srli	r17,r4,31
 4021d00:	20003616 	blt	r4,zero,4021ddc <__floatsisf+0xf8>
 4021d04:	8009883a 	mov	r4,r16
 4021d08:	4021f180 	call	4021f18 <__clzsi2>
 4021d0c:	00c02784 	movi	r3,158
 4021d10:	1887c83a 	sub	r3,r3,r2
 4021d14:	01002584 	movi	r4,150
 4021d18:	20c01416 	blt	r4,r3,4021d6c <__floatsisf+0x88>
 4021d1c:	20c9c83a 	sub	r4,r4,r3
 4021d20:	8120983a 	sll	r16,r16,r4
 4021d24:	00802034 	movhi	r2,128
 4021d28:	10bfffc4 	addi	r2,r2,-1
 4021d2c:	8809883a 	mov	r4,r17
 4021d30:	80a0703a 	and	r16,r16,r2
 4021d34:	18803fcc 	andi	r2,r3,255
 4021d38:	100695fa 	slli	r3,r2,23
 4021d3c:	20803fcc 	andi	r2,r4,255
 4021d40:	100897fa 	slli	r4,r2,31
 4021d44:	00802034 	movhi	r2,128
 4021d48:	10bfffc4 	addi	r2,r2,-1
 4021d4c:	8084703a 	and	r2,r16,r2
 4021d50:	10c4b03a 	or	r2,r2,r3
 4021d54:	1104b03a 	or	r2,r2,r4
 4021d58:	dfc00217 	ldw	ra,8(sp)
 4021d5c:	dc400117 	ldw	r17,4(sp)
 4021d60:	dc000017 	ldw	r16,0(sp)
 4021d64:	dec00304 	addi	sp,sp,12
 4021d68:	f800283a 	ret
 4021d6c:	01002644 	movi	r4,153
 4021d70:	20c01c16 	blt	r4,r3,4021de4 <__floatsisf+0x100>
 4021d74:	20c9c83a 	sub	r4,r4,r3
 4021d78:	8120983a 	sll	r16,r16,r4
 4021d7c:	013f0034 	movhi	r4,64512
 4021d80:	213fffc4 	addi	r4,r4,-1
 4021d84:	814001cc 	andi	r5,r16,7
 4021d88:	8108703a 	and	r4,r16,r4
 4021d8c:	28000426 	beq	r5,zero,4021da0 <__floatsisf+0xbc>
 4021d90:	840003cc 	andi	r16,r16,15
 4021d94:	01400104 	movi	r5,4
 4021d98:	81400126 	beq	r16,r5,4021da0 <__floatsisf+0xbc>
 4021d9c:	2149883a 	add	r4,r4,r5
 4021da0:	2141002c 	andhi	r5,r4,1024
 4021da4:	28000526 	beq	r5,zero,4021dbc <__floatsisf+0xd8>
 4021da8:	00c027c4 	movi	r3,159
 4021dac:	1887c83a 	sub	r3,r3,r2
 4021db0:	00bf0034 	movhi	r2,64512
 4021db4:	10bfffc4 	addi	r2,r2,-1
 4021db8:	2088703a 	and	r4,r4,r2
 4021dbc:	202091ba 	slli	r16,r4,6
 4021dc0:	8809883a 	mov	r4,r17
 4021dc4:	8020d27a 	srli	r16,r16,9
 4021dc8:	003fda06 	br	4021d34 <__alt_data_end+0xfffe1d34>
 4021dcc:	0009883a 	mov	r4,zero
 4021dd0:	0007883a 	mov	r3,zero
 4021dd4:	0021883a 	mov	r16,zero
 4021dd8:	003fd606 	br	4021d34 <__alt_data_end+0xfffe1d34>
 4021ddc:	0121c83a 	sub	r16,zero,r4
 4021de0:	003fc806 	br	4021d04 <__alt_data_end+0xfffe1d04>
 4021de4:	01002e44 	movi	r4,185
 4021de8:	20c9c83a 	sub	r4,r4,r3
 4021dec:	01400144 	movi	r5,5
 4021df0:	8108983a 	sll	r4,r16,r4
 4021df4:	288bc83a 	sub	r5,r5,r2
 4021df8:	8160d83a 	srl	r16,r16,r5
 4021dfc:	2008c03a 	cmpne	r4,r4,zero
 4021e00:	8120b03a 	or	r16,r16,r4
 4021e04:	003fdd06 	br	4021d7c <__alt_data_end+0xfffe1d7c>

04021e08 <__extendsfdf2>:
 4021e08:	200ad5fa 	srli	r5,r4,23
 4021e0c:	defffd04 	addi	sp,sp,-12
 4021e10:	dc400115 	stw	r17,4(sp)
 4021e14:	29403fcc 	andi	r5,r5,255
 4021e18:	29800044 	addi	r6,r5,1
 4021e1c:	04402034 	movhi	r17,128
 4021e20:	dc000015 	stw	r16,0(sp)
 4021e24:	8c7fffc4 	addi	r17,r17,-1
 4021e28:	dfc00215 	stw	ra,8(sp)
 4021e2c:	31803fcc 	andi	r6,r6,255
 4021e30:	00800044 	movi	r2,1
 4021e34:	8922703a 	and	r17,r17,r4
 4021e38:	2020d7fa 	srli	r16,r4,31
 4021e3c:	1180110e 	bge	r2,r6,4021e84 <__extendsfdf2+0x7c>
 4021e40:	880cd0fa 	srli	r6,r17,3
 4021e44:	8822977a 	slli	r17,r17,29
 4021e48:	2940e004 	addi	r5,r5,896
 4021e4c:	2941ffcc 	andi	r5,r5,2047
 4021e50:	2804953a 	slli	r2,r5,20
 4021e54:	01400434 	movhi	r5,16
 4021e58:	800697fa 	slli	r3,r16,31
 4021e5c:	297fffc4 	addi	r5,r5,-1
 4021e60:	314a703a 	and	r5,r6,r5
 4021e64:	288ab03a 	or	r5,r5,r2
 4021e68:	28c6b03a 	or	r3,r5,r3
 4021e6c:	8805883a 	mov	r2,r17
 4021e70:	dfc00217 	ldw	ra,8(sp)
 4021e74:	dc400117 	ldw	r17,4(sp)
 4021e78:	dc000017 	ldw	r16,0(sp)
 4021e7c:	dec00304 	addi	sp,sp,12
 4021e80:	f800283a 	ret
 4021e84:	2800111e 	bne	r5,zero,4021ecc <__extendsfdf2+0xc4>
 4021e88:	88001c26 	beq	r17,zero,4021efc <__extendsfdf2+0xf4>
 4021e8c:	8809883a 	mov	r4,r17
 4021e90:	4021f180 	call	4021f18 <__clzsi2>
 4021e94:	00c00284 	movi	r3,10
 4021e98:	18801b16 	blt	r3,r2,4021f08 <__extendsfdf2+0x100>
 4021e9c:	018002c4 	movi	r6,11
 4021ea0:	308dc83a 	sub	r6,r6,r2
 4021ea4:	11000544 	addi	r4,r2,21
 4021ea8:	8986d83a 	srl	r3,r17,r6
 4021eac:	8922983a 	sll	r17,r17,r4
 4021eb0:	0180e244 	movi	r6,905
 4021eb4:	01400434 	movhi	r5,16
 4021eb8:	3085c83a 	sub	r2,r6,r2
 4021ebc:	297fffc4 	addi	r5,r5,-1
 4021ec0:	194c703a 	and	r6,r3,r5
 4021ec4:	1141ffcc 	andi	r5,r2,2047
 4021ec8:	003fe006 	br	4021e4c <__alt_data_end+0xfffe1e4c>
 4021ecc:	88000826 	beq	r17,zero,4021ef0 <__extendsfdf2+0xe8>
 4021ed0:	880cd0fa 	srli	r6,r17,3
 4021ed4:	00800434 	movhi	r2,16
 4021ed8:	10bfffc4 	addi	r2,r2,-1
 4021edc:	31800234 	orhi	r6,r6,8
 4021ee0:	8822977a 	slli	r17,r17,29
 4021ee4:	308c703a 	and	r6,r6,r2
 4021ee8:	0141ffc4 	movi	r5,2047
 4021eec:	003fd706 	br	4021e4c <__alt_data_end+0xfffe1e4c>
 4021ef0:	0141ffc4 	movi	r5,2047
 4021ef4:	000d883a 	mov	r6,zero
 4021ef8:	003fd406 	br	4021e4c <__alt_data_end+0xfffe1e4c>
 4021efc:	000b883a 	mov	r5,zero
 4021f00:	000d883a 	mov	r6,zero
 4021f04:	003fd106 	br	4021e4c <__alt_data_end+0xfffe1e4c>
 4021f08:	11bffd44 	addi	r6,r2,-11
 4021f0c:	8986983a 	sll	r3,r17,r6
 4021f10:	0023883a 	mov	r17,zero
 4021f14:	003fe606 	br	4021eb0 <__alt_data_end+0xfffe1eb0>

04021f18 <__clzsi2>:
 4021f18:	00bfffd4 	movui	r2,65535
 4021f1c:	11000536 	bltu	r2,r4,4021f34 <__clzsi2+0x1c>
 4021f20:	00803fc4 	movi	r2,255
 4021f24:	11000f36 	bltu	r2,r4,4021f64 <__clzsi2+0x4c>
 4021f28:	00800804 	movi	r2,32
 4021f2c:	0007883a 	mov	r3,zero
 4021f30:	00000506 	br	4021f48 <__clzsi2+0x30>
 4021f34:	00804034 	movhi	r2,256
 4021f38:	10bfffc4 	addi	r2,r2,-1
 4021f3c:	11000c2e 	bgeu	r2,r4,4021f70 <__clzsi2+0x58>
 4021f40:	00800204 	movi	r2,8
 4021f44:	00c00604 	movi	r3,24
 4021f48:	20c8d83a 	srl	r4,r4,r3
 4021f4c:	00c100f4 	movhi	r3,1027
 4021f50:	18cd3e84 	addi	r3,r3,13562
 4021f54:	1909883a 	add	r4,r3,r4
 4021f58:	20c00003 	ldbu	r3,0(r4)
 4021f5c:	10c5c83a 	sub	r2,r2,r3
 4021f60:	f800283a 	ret
 4021f64:	00800604 	movi	r2,24
 4021f68:	00c00204 	movi	r3,8
 4021f6c:	003ff606 	br	4021f48 <__alt_data_end+0xfffe1f48>
 4021f70:	00800404 	movi	r2,16
 4021f74:	1007883a 	mov	r3,r2
 4021f78:	003ff306 	br	4021f48 <__alt_data_end+0xfffe1f48>

04021f7c <_printf_r>:
 4021f7c:	defffd04 	addi	sp,sp,-12
 4021f80:	2805883a 	mov	r2,r5
 4021f84:	dfc00015 	stw	ra,0(sp)
 4021f88:	d9800115 	stw	r6,4(sp)
 4021f8c:	d9c00215 	stw	r7,8(sp)
 4021f90:	21400217 	ldw	r5,8(r4)
 4021f94:	d9c00104 	addi	r7,sp,4
 4021f98:	100d883a 	mov	r6,r2
 4021f9c:	4021fe80 	call	4021fe8 <___vfprintf_internal_r>
 4021fa0:	dfc00017 	ldw	ra,0(sp)
 4021fa4:	dec00304 	addi	sp,sp,12
 4021fa8:	f800283a 	ret

04021fac <printf>:
 4021fac:	defffc04 	addi	sp,sp,-16
 4021fb0:	dfc00015 	stw	ra,0(sp)
 4021fb4:	d9400115 	stw	r5,4(sp)
 4021fb8:	d9800215 	stw	r6,8(sp)
 4021fbc:	d9c00315 	stw	r7,12(sp)
 4021fc0:	008100f4 	movhi	r2,1027
 4021fc4:	10956004 	addi	r2,r2,21888
 4021fc8:	10800017 	ldw	r2,0(r2)
 4021fcc:	200b883a 	mov	r5,r4
 4021fd0:	d9800104 	addi	r6,sp,4
 4021fd4:	11000217 	ldw	r4,8(r2)
 4021fd8:	40241e00 	call	40241e0 <__vfprintf_internal>
 4021fdc:	dfc00017 	ldw	ra,0(sp)
 4021fe0:	dec00404 	addi	sp,sp,16
 4021fe4:	f800283a 	ret

04021fe8 <___vfprintf_internal_r>:
 4021fe8:	deffb804 	addi	sp,sp,-288
 4021fec:	dfc04715 	stw	ra,284(sp)
 4021ff0:	ddc04515 	stw	r23,276(sp)
 4021ff4:	dd404315 	stw	r21,268(sp)
 4021ff8:	d9002c15 	stw	r4,176(sp)
 4021ffc:	282f883a 	mov	r23,r5
 4022000:	302b883a 	mov	r21,r6
 4022004:	d9c02d15 	stw	r7,180(sp)
 4022008:	df004615 	stw	fp,280(sp)
 402200c:	dd804415 	stw	r22,272(sp)
 4022010:	dd004215 	stw	r20,264(sp)
 4022014:	dcc04115 	stw	r19,260(sp)
 4022018:	dc804015 	stw	r18,256(sp)
 402201c:	dc403f15 	stw	r17,252(sp)
 4022020:	dc003e15 	stw	r16,248(sp)
 4022024:	40269440 	call	4026944 <_localeconv_r>
 4022028:	10800017 	ldw	r2,0(r2)
 402202c:	1009883a 	mov	r4,r2
 4022030:	d8803415 	stw	r2,208(sp)
 4022034:	402896c0 	call	402896c <strlen>
 4022038:	d8803715 	stw	r2,220(sp)
 402203c:	d8802c17 	ldw	r2,176(sp)
 4022040:	10000226 	beq	r2,zero,402204c <___vfprintf_internal_r+0x64>
 4022044:	10800e17 	ldw	r2,56(r2)
 4022048:	1000f926 	beq	r2,zero,4022430 <___vfprintf_internal_r+0x448>
 402204c:	b880030b 	ldhu	r2,12(r23)
 4022050:	10c8000c 	andi	r3,r2,8192
 4022054:	1800061e 	bne	r3,zero,4022070 <___vfprintf_internal_r+0x88>
 4022058:	b9001917 	ldw	r4,100(r23)
 402205c:	00f7ffc4 	movi	r3,-8193
 4022060:	10880014 	ori	r2,r2,8192
 4022064:	20c6703a 	and	r3,r4,r3
 4022068:	b880030d 	sth	r2,12(r23)
 402206c:	b8c01915 	stw	r3,100(r23)
 4022070:	10c0020c 	andi	r3,r2,8
 4022074:	1800c126 	beq	r3,zero,402237c <___vfprintf_internal_r+0x394>
 4022078:	b8c00417 	ldw	r3,16(r23)
 402207c:	1800bf26 	beq	r3,zero,402237c <___vfprintf_internal_r+0x394>
 4022080:	1080068c 	andi	r2,r2,26
 4022084:	00c00284 	movi	r3,10
 4022088:	10c0c426 	beq	r2,r3,402239c <___vfprintf_internal_r+0x3b4>
 402208c:	d8c00404 	addi	r3,sp,16
 4022090:	050100f4 	movhi	r20,1027
 4022094:	d9001e04 	addi	r4,sp,120
 4022098:	a50d8f84 	addi	r20,r20,13886
 402209c:	d8c01e15 	stw	r3,120(sp)
 40220a0:	d8002015 	stw	zero,128(sp)
 40220a4:	d8001f15 	stw	zero,124(sp)
 40220a8:	d8003315 	stw	zero,204(sp)
 40220ac:	d8003615 	stw	zero,216(sp)
 40220b0:	d8003815 	stw	zero,224(sp)
 40220b4:	1811883a 	mov	r8,r3
 40220b8:	d8003915 	stw	zero,228(sp)
 40220bc:	d8003a15 	stw	zero,232(sp)
 40220c0:	d8002f15 	stw	zero,188(sp)
 40220c4:	d9002815 	stw	r4,160(sp)
 40220c8:	a8800007 	ldb	r2,0(r21)
 40220cc:	10027b26 	beq	r2,zero,4022abc <___vfprintf_internal_r+0xad4>
 40220d0:	00c00944 	movi	r3,37
 40220d4:	a821883a 	mov	r16,r21
 40220d8:	10c0021e 	bne	r2,r3,40220e4 <___vfprintf_internal_r+0xfc>
 40220dc:	00001406 	br	4022130 <___vfprintf_internal_r+0x148>
 40220e0:	10c00326 	beq	r2,r3,40220f0 <___vfprintf_internal_r+0x108>
 40220e4:	84000044 	addi	r16,r16,1
 40220e8:	80800007 	ldb	r2,0(r16)
 40220ec:	103ffc1e 	bne	r2,zero,40220e0 <__alt_data_end+0xfffe20e0>
 40220f0:	8563c83a 	sub	r17,r16,r21
 40220f4:	88000e26 	beq	r17,zero,4022130 <___vfprintf_internal_r+0x148>
 40220f8:	d8c02017 	ldw	r3,128(sp)
 40220fc:	d8801f17 	ldw	r2,124(sp)
 4022100:	45400015 	stw	r21,0(r8)
 4022104:	1c47883a 	add	r3,r3,r17
 4022108:	10800044 	addi	r2,r2,1
 402210c:	d8c02015 	stw	r3,128(sp)
 4022110:	44400115 	stw	r17,4(r8)
 4022114:	d8801f15 	stw	r2,124(sp)
 4022118:	00c001c4 	movi	r3,7
 402211c:	1880a716 	blt	r3,r2,40223bc <___vfprintf_internal_r+0x3d4>
 4022120:	42000204 	addi	r8,r8,8
 4022124:	d9402f17 	ldw	r5,188(sp)
 4022128:	2c4b883a 	add	r5,r5,r17
 402212c:	d9402f15 	stw	r5,188(sp)
 4022130:	80800007 	ldb	r2,0(r16)
 4022134:	1000a826 	beq	r2,zero,40223d8 <___vfprintf_internal_r+0x3f0>
 4022138:	84400047 	ldb	r17,1(r16)
 402213c:	00bfffc4 	movi	r2,-1
 4022140:	85400044 	addi	r21,r16,1
 4022144:	d8002785 	stb	zero,158(sp)
 4022148:	0007883a 	mov	r3,zero
 402214c:	000f883a 	mov	r7,zero
 4022150:	d8802915 	stw	r2,164(sp)
 4022154:	d8003115 	stw	zero,196(sp)
 4022158:	0025883a 	mov	r18,zero
 402215c:	01401604 	movi	r5,88
 4022160:	01800244 	movi	r6,9
 4022164:	02800a84 	movi	r10,42
 4022168:	02401b04 	movi	r9,108
 402216c:	ad400044 	addi	r21,r21,1
 4022170:	88bff804 	addi	r2,r17,-32
 4022174:	28830436 	bltu	r5,r2,4022d88 <___vfprintf_internal_r+0xda0>
 4022178:	100490ba 	slli	r2,r2,2
 402217c:	010100b4 	movhi	r4,1026
 4022180:	21086404 	addi	r4,r4,8592
 4022184:	1105883a 	add	r2,r2,r4
 4022188:	10800017 	ldw	r2,0(r2)
 402218c:	1000683a 	jmp	r2
 4022190:	04022ca8 	cmpgeui	r16,zero,2226
 4022194:	04022d88 	cmpgei	r16,zero,2230
 4022198:	04022d88 	cmpgei	r16,zero,2230
 402219c:	04022cc8 	cmpgei	r16,zero,2227
 40221a0:	04022d88 	cmpgei	r16,zero,2230
 40221a4:	04022d88 	cmpgei	r16,zero,2230
 40221a8:	04022d88 	cmpgei	r16,zero,2230
 40221ac:	04022d88 	cmpgei	r16,zero,2230
 40221b0:	04022d88 	cmpgei	r16,zero,2230
 40221b4:	04022d88 	cmpgei	r16,zero,2230
 40221b8:	0402243c 	xorhi	r16,zero,2192
 40221bc:	04022be4 	muli	r16,zero,2223
 40221c0:	04022d88 	cmpgei	r16,zero,2230
 40221c4:	04022304 	movi	r16,2188
 40221c8:	04022464 	muli	r16,zero,2193
 40221cc:	04022d88 	cmpgei	r16,zero,2230
 40221d0:	040224a4 	muli	r16,zero,2194
 40221d4:	040224b0 	cmpltui	r16,zero,2194
 40221d8:	040224b0 	cmpltui	r16,zero,2194
 40221dc:	040224b0 	cmpltui	r16,zero,2194
 40221e0:	040224b0 	cmpltui	r16,zero,2194
 40221e4:	040224b0 	cmpltui	r16,zero,2194
 40221e8:	040224b0 	cmpltui	r16,zero,2194
 40221ec:	040224b0 	cmpltui	r16,zero,2194
 40221f0:	040224b0 	cmpltui	r16,zero,2194
 40221f4:	040224b0 	cmpltui	r16,zero,2194
 40221f8:	04022d88 	cmpgei	r16,zero,2230
 40221fc:	04022d88 	cmpgei	r16,zero,2230
 4022200:	04022d88 	cmpgei	r16,zero,2230
 4022204:	04022d88 	cmpgei	r16,zero,2230
 4022208:	04022d88 	cmpgei	r16,zero,2230
 402220c:	04022d88 	cmpgei	r16,zero,2230
 4022210:	04022d88 	cmpgei	r16,zero,2230
 4022214:	04022d88 	cmpgei	r16,zero,2230
 4022218:	04022d88 	cmpgei	r16,zero,2230
 402221c:	04022d88 	cmpgei	r16,zero,2230
 4022220:	040224e4 	muli	r16,zero,2195
 4022224:	040225a0 	cmpeqi	r16,zero,2198
 4022228:	04022d88 	cmpgei	r16,zero,2230
 402222c:	040225a0 	cmpeqi	r16,zero,2198
 4022230:	04022d88 	cmpgei	r16,zero,2230
 4022234:	04022d88 	cmpgei	r16,zero,2230
 4022238:	04022d88 	cmpgei	r16,zero,2230
 402223c:	04022d88 	cmpgei	r16,zero,2230
 4022240:	04022640 	call	402264 <__alt_mem_sdram_controller_2+0x402264>
 4022244:	04022d88 	cmpgei	r16,zero,2230
 4022248:	04022d88 	cmpgei	r16,zero,2230
 402224c:	0402264c 	andi	r16,zero,2201
 4022250:	04022d88 	cmpgei	r16,zero,2230
 4022254:	04022d88 	cmpgei	r16,zero,2230
 4022258:	04022d88 	cmpgei	r16,zero,2230
 402225c:	04022d88 	cmpgei	r16,zero,2230
 4022260:	04022d88 	cmpgei	r16,zero,2230
 4022264:	04022ac4 	movi	r16,2219
 4022268:	04022d88 	cmpgei	r16,zero,2230
 402226c:	04022d88 	cmpgei	r16,zero,2230
 4022270:	04022b24 	muli	r16,zero,2220
 4022274:	04022d88 	cmpgei	r16,zero,2230
 4022278:	04022d88 	cmpgei	r16,zero,2230
 402227c:	04022d88 	cmpgei	r16,zero,2230
 4022280:	04022d88 	cmpgei	r16,zero,2230
 4022284:	04022d88 	cmpgei	r16,zero,2230
 4022288:	04022d88 	cmpgei	r16,zero,2230
 402228c:	04022d88 	cmpgei	r16,zero,2230
 4022290:	04022d88 	cmpgei	r16,zero,2230
 4022294:	04022d88 	cmpgei	r16,zero,2230
 4022298:	04022d88 	cmpgei	r16,zero,2230
 402229c:	04022d34 	movhi	r16,2228
 40222a0:	04022cd4 	movui	r16,2227
 40222a4:	040225a0 	cmpeqi	r16,zero,2198
 40222a8:	040225a0 	cmpeqi	r16,zero,2198
 40222ac:	040225a0 	cmpeqi	r16,zero,2198
 40222b0:	04022ce4 	muli	r16,zero,2227
 40222b4:	04022cd4 	movui	r16,2227
 40222b8:	04022d88 	cmpgei	r16,zero,2230
 40222bc:	04022d88 	cmpgei	r16,zero,2230
 40222c0:	04022cf0 	cmpltui	r16,zero,2227
 40222c4:	04022d88 	cmpgei	r16,zero,2230
 40222c8:	04022d00 	call	4022d0 <__alt_mem_sdram_controller_2+0x4022d0>
 40222cc:	04022bd4 	movui	r16,2223
 40222d0:	04022310 	cmplti	r16,zero,2188
 40222d4:	04022bf4 	movhi	r16,2223
 40222d8:	04022d88 	cmpgei	r16,zero,2230
 40222dc:	04022c00 	call	4022c0 <__alt_mem_sdram_controller_2+0x4022c0>
 40222e0:	04022d88 	cmpgei	r16,zero,2230
 40222e4:	04022c5c 	xori	r16,zero,2225
 40222e8:	04022d88 	cmpgei	r16,zero,2230
 40222ec:	04022d88 	cmpgei	r16,zero,2230
 40222f0:	04022c6c 	andhi	r16,zero,2225
 40222f4:	d9003117 	ldw	r4,196(sp)
 40222f8:	d8802d15 	stw	r2,180(sp)
 40222fc:	0109c83a 	sub	r4,zero,r4
 4022300:	d9003115 	stw	r4,196(sp)
 4022304:	94800114 	ori	r18,r18,4
 4022308:	ac400007 	ldb	r17,0(r21)
 402230c:	003f9706 	br	402216c <__alt_data_end+0xfffe216c>
 4022310:	00800c04 	movi	r2,48
 4022314:	d9002d17 	ldw	r4,180(sp)
 4022318:	d9402917 	ldw	r5,164(sp)
 402231c:	d8802705 	stb	r2,156(sp)
 4022320:	00801e04 	movi	r2,120
 4022324:	d8802745 	stb	r2,157(sp)
 4022328:	d8002785 	stb	zero,158(sp)
 402232c:	20c00104 	addi	r3,r4,4
 4022330:	24c00017 	ldw	r19,0(r4)
 4022334:	002d883a 	mov	r22,zero
 4022338:	90800094 	ori	r2,r18,2
 402233c:	28029a16 	blt	r5,zero,4022da8 <___vfprintf_internal_r+0xdc0>
 4022340:	00bfdfc4 	movi	r2,-129
 4022344:	90a4703a 	and	r18,r18,r2
 4022348:	d8c02d15 	stw	r3,180(sp)
 402234c:	94800094 	ori	r18,r18,2
 4022350:	9802871e 	bne	r19,zero,4022d70 <___vfprintf_internal_r+0xd88>
 4022354:	008100f4 	movhi	r2,1027
 4022358:	108d8804 	addi	r2,r2,13856
 402235c:	d8803915 	stw	r2,228(sp)
 4022360:	04401e04 	movi	r17,120
 4022364:	d8802917 	ldw	r2,164(sp)
 4022368:	0039883a 	mov	fp,zero
 402236c:	1001e926 	beq	r2,zero,4022b14 <___vfprintf_internal_r+0xb2c>
 4022370:	0027883a 	mov	r19,zero
 4022374:	002d883a 	mov	r22,zero
 4022378:	00020506 	br	4022b90 <___vfprintf_internal_r+0xba8>
 402237c:	d9002c17 	ldw	r4,176(sp)
 4022380:	b80b883a 	mov	r5,r23
 4022384:	40242b80 	call	40242b8 <__swsetup_r>
 4022388:	1005ac1e 	bne	r2,zero,4023a3c <___vfprintf_internal_r+0x1a54>
 402238c:	b880030b 	ldhu	r2,12(r23)
 4022390:	00c00284 	movi	r3,10
 4022394:	1080068c 	andi	r2,r2,26
 4022398:	10ff3c1e 	bne	r2,r3,402208c <__alt_data_end+0xfffe208c>
 402239c:	b880038f 	ldh	r2,14(r23)
 40223a0:	103f3a16 	blt	r2,zero,402208c <__alt_data_end+0xfffe208c>
 40223a4:	d9c02d17 	ldw	r7,180(sp)
 40223a8:	d9002c17 	ldw	r4,176(sp)
 40223ac:	a80d883a 	mov	r6,r21
 40223b0:	b80b883a 	mov	r5,r23
 40223b4:	40241fc0 	call	40241fc <__sbprintf>
 40223b8:	00001106 	br	4022400 <___vfprintf_internal_r+0x418>
 40223bc:	d9002c17 	ldw	r4,176(sp)
 40223c0:	d9801e04 	addi	r6,sp,120
 40223c4:	b80b883a 	mov	r5,r23
 40223c8:	4028b000 	call	4028b00 <__sprint_r>
 40223cc:	1000081e 	bne	r2,zero,40223f0 <___vfprintf_internal_r+0x408>
 40223d0:	da000404 	addi	r8,sp,16
 40223d4:	003f5306 	br	4022124 <__alt_data_end+0xfffe2124>
 40223d8:	d8802017 	ldw	r2,128(sp)
 40223dc:	10000426 	beq	r2,zero,40223f0 <___vfprintf_internal_r+0x408>
 40223e0:	d9002c17 	ldw	r4,176(sp)
 40223e4:	d9801e04 	addi	r6,sp,120
 40223e8:	b80b883a 	mov	r5,r23
 40223ec:	4028b000 	call	4028b00 <__sprint_r>
 40223f0:	b880030b 	ldhu	r2,12(r23)
 40223f4:	1080100c 	andi	r2,r2,64
 40223f8:	1005901e 	bne	r2,zero,4023a3c <___vfprintf_internal_r+0x1a54>
 40223fc:	d8802f17 	ldw	r2,188(sp)
 4022400:	dfc04717 	ldw	ra,284(sp)
 4022404:	df004617 	ldw	fp,280(sp)
 4022408:	ddc04517 	ldw	r23,276(sp)
 402240c:	dd804417 	ldw	r22,272(sp)
 4022410:	dd404317 	ldw	r21,268(sp)
 4022414:	dd004217 	ldw	r20,264(sp)
 4022418:	dcc04117 	ldw	r19,260(sp)
 402241c:	dc804017 	ldw	r18,256(sp)
 4022420:	dc403f17 	ldw	r17,252(sp)
 4022424:	dc003e17 	ldw	r16,248(sp)
 4022428:	dec04804 	addi	sp,sp,288
 402242c:	f800283a 	ret
 4022430:	d9002c17 	ldw	r4,176(sp)
 4022434:	402628c0 	call	402628c <__sinit>
 4022438:	003f0406 	br	402204c <__alt_data_end+0xfffe204c>
 402243c:	d8802d17 	ldw	r2,180(sp)
 4022440:	d9002d17 	ldw	r4,180(sp)
 4022444:	10800017 	ldw	r2,0(r2)
 4022448:	d8803115 	stw	r2,196(sp)
 402244c:	20800104 	addi	r2,r4,4
 4022450:	d9003117 	ldw	r4,196(sp)
 4022454:	203fa716 	blt	r4,zero,40222f4 <__alt_data_end+0xfffe22f4>
 4022458:	d8802d15 	stw	r2,180(sp)
 402245c:	ac400007 	ldb	r17,0(r21)
 4022460:	003f4206 	br	402216c <__alt_data_end+0xfffe216c>
 4022464:	ac400007 	ldb	r17,0(r21)
 4022468:	aac00044 	addi	r11,r21,1
 402246c:	8a872826 	beq	r17,r10,4024110 <___vfprintf_internal_r+0x2128>
 4022470:	88bff404 	addi	r2,r17,-48
 4022474:	0009883a 	mov	r4,zero
 4022478:	30867d36 	bltu	r6,r2,4023e70 <___vfprintf_internal_r+0x1e88>
 402247c:	5c400007 	ldb	r17,0(r11)
 4022480:	210002a4 	muli	r4,r4,10
 4022484:	5d400044 	addi	r21,r11,1
 4022488:	a817883a 	mov	r11,r21
 402248c:	2089883a 	add	r4,r4,r2
 4022490:	88bff404 	addi	r2,r17,-48
 4022494:	30bff92e 	bgeu	r6,r2,402247c <__alt_data_end+0xfffe247c>
 4022498:	2005c916 	blt	r4,zero,4023bc0 <___vfprintf_internal_r+0x1bd8>
 402249c:	d9002915 	stw	r4,164(sp)
 40224a0:	003f3306 	br	4022170 <__alt_data_end+0xfffe2170>
 40224a4:	94802014 	ori	r18,r18,128
 40224a8:	ac400007 	ldb	r17,0(r21)
 40224ac:	003f2f06 	br	402216c <__alt_data_end+0xfffe216c>
 40224b0:	a809883a 	mov	r4,r21
 40224b4:	d8003115 	stw	zero,196(sp)
 40224b8:	88bff404 	addi	r2,r17,-48
 40224bc:	0017883a 	mov	r11,zero
 40224c0:	24400007 	ldb	r17,0(r4)
 40224c4:	5ac002a4 	muli	r11,r11,10
 40224c8:	ad400044 	addi	r21,r21,1
 40224cc:	a809883a 	mov	r4,r21
 40224d0:	12d7883a 	add	r11,r2,r11
 40224d4:	88bff404 	addi	r2,r17,-48
 40224d8:	30bff92e 	bgeu	r6,r2,40224c0 <__alt_data_end+0xfffe24c0>
 40224dc:	dac03115 	stw	r11,196(sp)
 40224e0:	003f2306 	br	4022170 <__alt_data_end+0xfffe2170>
 40224e4:	18c03fcc 	andi	r3,r3,255
 40224e8:	18072b1e 	bne	r3,zero,4024198 <___vfprintf_internal_r+0x21b0>
 40224ec:	94800414 	ori	r18,r18,16
 40224f0:	9080080c 	andi	r2,r18,32
 40224f4:	10037b26 	beq	r2,zero,40232e4 <___vfprintf_internal_r+0x12fc>
 40224f8:	d9402d17 	ldw	r5,180(sp)
 40224fc:	28800117 	ldw	r2,4(r5)
 4022500:	2cc00017 	ldw	r19,0(r5)
 4022504:	29400204 	addi	r5,r5,8
 4022508:	d9402d15 	stw	r5,180(sp)
 402250c:	102d883a 	mov	r22,r2
 4022510:	10044b16 	blt	r2,zero,4023640 <___vfprintf_internal_r+0x1658>
 4022514:	d9402917 	ldw	r5,164(sp)
 4022518:	df002783 	ldbu	fp,158(sp)
 402251c:	2803bc16 	blt	r5,zero,4023410 <___vfprintf_internal_r+0x1428>
 4022520:	00ffdfc4 	movi	r3,-129
 4022524:	9d84b03a 	or	r2,r19,r22
 4022528:	90e4703a 	and	r18,r18,r3
 402252c:	10017726 	beq	r2,zero,4022b0c <___vfprintf_internal_r+0xb24>
 4022530:	b0038326 	beq	r22,zero,4023340 <___vfprintf_internal_r+0x1358>
 4022534:	dc402a15 	stw	r17,168(sp)
 4022538:	dc001e04 	addi	r16,sp,120
 402253c:	b023883a 	mov	r17,r22
 4022540:	402d883a 	mov	r22,r8
 4022544:	9809883a 	mov	r4,r19
 4022548:	880b883a 	mov	r5,r17
 402254c:	01800284 	movi	r6,10
 4022550:	000f883a 	mov	r7,zero
 4022554:	402ba740 	call	402ba74 <__umoddi3>
 4022558:	10800c04 	addi	r2,r2,48
 402255c:	843fffc4 	addi	r16,r16,-1
 4022560:	9809883a 	mov	r4,r19
 4022564:	880b883a 	mov	r5,r17
 4022568:	80800005 	stb	r2,0(r16)
 402256c:	01800284 	movi	r6,10
 4022570:	000f883a 	mov	r7,zero
 4022574:	402b4fc0 	call	402b4fc <__udivdi3>
 4022578:	1027883a 	mov	r19,r2
 402257c:	10c4b03a 	or	r2,r2,r3
 4022580:	1823883a 	mov	r17,r3
 4022584:	103fef1e 	bne	r2,zero,4022544 <__alt_data_end+0xfffe2544>
 4022588:	d8c02817 	ldw	r3,160(sp)
 402258c:	dc402a17 	ldw	r17,168(sp)
 4022590:	b011883a 	mov	r8,r22
 4022594:	1c07c83a 	sub	r3,r3,r16
 4022598:	d8c02e15 	stw	r3,184(sp)
 402259c:	00005906 	br	4022704 <___vfprintf_internal_r+0x71c>
 40225a0:	18c03fcc 	andi	r3,r3,255
 40225a4:	1806fa1e 	bne	r3,zero,4024190 <___vfprintf_internal_r+0x21a8>
 40225a8:	9080020c 	andi	r2,r18,8
 40225ac:	10048a26 	beq	r2,zero,40237d8 <___vfprintf_internal_r+0x17f0>
 40225b0:	d8c02d17 	ldw	r3,180(sp)
 40225b4:	d9002d17 	ldw	r4,180(sp)
 40225b8:	d9402d17 	ldw	r5,180(sp)
 40225bc:	18c00017 	ldw	r3,0(r3)
 40225c0:	21000117 	ldw	r4,4(r4)
 40225c4:	29400204 	addi	r5,r5,8
 40225c8:	d8c03615 	stw	r3,216(sp)
 40225cc:	d9003815 	stw	r4,224(sp)
 40225d0:	d9402d15 	stw	r5,180(sp)
 40225d4:	d9003617 	ldw	r4,216(sp)
 40225d8:	d9403817 	ldw	r5,224(sp)
 40225dc:	da003d15 	stw	r8,244(sp)
 40225e0:	04000044 	movi	r16,1
 40225e4:	402868c0 	call	402868c <__fpclassifyd>
 40225e8:	da003d17 	ldw	r8,244(sp)
 40225ec:	14041f1e 	bne	r2,r16,402366c <___vfprintf_internal_r+0x1684>
 40225f0:	d9003617 	ldw	r4,216(sp)
 40225f4:	d9403817 	ldw	r5,224(sp)
 40225f8:	000d883a 	mov	r6,zero
 40225fc:	000f883a 	mov	r7,zero
 4022600:	402d4580 	call	402d458 <__ledf2>
 4022604:	da003d17 	ldw	r8,244(sp)
 4022608:	1005be16 	blt	r2,zero,4023d04 <___vfprintf_internal_r+0x1d1c>
 402260c:	df002783 	ldbu	fp,158(sp)
 4022610:	008011c4 	movi	r2,71
 4022614:	1445330e 	bge	r2,r17,4023ae4 <___vfprintf_internal_r+0x1afc>
 4022618:	040100f4 	movhi	r16,1027
 402261c:	840d8004 	addi	r16,r16,13824
 4022620:	00c000c4 	movi	r3,3
 4022624:	00bfdfc4 	movi	r2,-129
 4022628:	d8c02a15 	stw	r3,168(sp)
 402262c:	90a4703a 	and	r18,r18,r2
 4022630:	d8c02e15 	stw	r3,184(sp)
 4022634:	d8002915 	stw	zero,164(sp)
 4022638:	d8003215 	stw	zero,200(sp)
 402263c:	00003706 	br	402271c <___vfprintf_internal_r+0x734>
 4022640:	94800214 	ori	r18,r18,8
 4022644:	ac400007 	ldb	r17,0(r21)
 4022648:	003ec806 	br	402216c <__alt_data_end+0xfffe216c>
 402264c:	18c03fcc 	andi	r3,r3,255
 4022650:	1806db1e 	bne	r3,zero,40241c0 <___vfprintf_internal_r+0x21d8>
 4022654:	94800414 	ori	r18,r18,16
 4022658:	9080080c 	andi	r2,r18,32
 402265c:	1002d826 	beq	r2,zero,40231c0 <___vfprintf_internal_r+0x11d8>
 4022660:	d9402d17 	ldw	r5,180(sp)
 4022664:	d8c02917 	ldw	r3,164(sp)
 4022668:	d8002785 	stb	zero,158(sp)
 402266c:	28800204 	addi	r2,r5,8
 4022670:	2cc00017 	ldw	r19,0(r5)
 4022674:	2d800117 	ldw	r22,4(r5)
 4022678:	18048f16 	blt	r3,zero,40238b8 <___vfprintf_internal_r+0x18d0>
 402267c:	013fdfc4 	movi	r4,-129
 4022680:	9d86b03a 	or	r3,r19,r22
 4022684:	d8802d15 	stw	r2,180(sp)
 4022688:	9124703a 	and	r18,r18,r4
 402268c:	1802d91e 	bne	r3,zero,40231f4 <___vfprintf_internal_r+0x120c>
 4022690:	d8c02917 	ldw	r3,164(sp)
 4022694:	0039883a 	mov	fp,zero
 4022698:	1805c326 	beq	r3,zero,4023da8 <___vfprintf_internal_r+0x1dc0>
 402269c:	0027883a 	mov	r19,zero
 40226a0:	002d883a 	mov	r22,zero
 40226a4:	dc001e04 	addi	r16,sp,120
 40226a8:	9806d0fa 	srli	r3,r19,3
 40226ac:	b008977a 	slli	r4,r22,29
 40226b0:	b02cd0fa 	srli	r22,r22,3
 40226b4:	9cc001cc 	andi	r19,r19,7
 40226b8:	98800c04 	addi	r2,r19,48
 40226bc:	843fffc4 	addi	r16,r16,-1
 40226c0:	20e6b03a 	or	r19,r4,r3
 40226c4:	80800005 	stb	r2,0(r16)
 40226c8:	9d86b03a 	or	r3,r19,r22
 40226cc:	183ff61e 	bne	r3,zero,40226a8 <__alt_data_end+0xfffe26a8>
 40226d0:	90c0004c 	andi	r3,r18,1
 40226d4:	18013b26 	beq	r3,zero,4022bc4 <___vfprintf_internal_r+0xbdc>
 40226d8:	10803fcc 	andi	r2,r2,255
 40226dc:	1080201c 	xori	r2,r2,128
 40226e0:	10bfe004 	addi	r2,r2,-128
 40226e4:	00c00c04 	movi	r3,48
 40226e8:	10c13626 	beq	r2,r3,4022bc4 <___vfprintf_internal_r+0xbdc>
 40226ec:	80ffffc5 	stb	r3,-1(r16)
 40226f0:	d8c02817 	ldw	r3,160(sp)
 40226f4:	80bfffc4 	addi	r2,r16,-1
 40226f8:	1021883a 	mov	r16,r2
 40226fc:	1887c83a 	sub	r3,r3,r2
 4022700:	d8c02e15 	stw	r3,184(sp)
 4022704:	d8802e17 	ldw	r2,184(sp)
 4022708:	d9002917 	ldw	r4,164(sp)
 402270c:	1100010e 	bge	r2,r4,4022714 <___vfprintf_internal_r+0x72c>
 4022710:	2005883a 	mov	r2,r4
 4022714:	d8802a15 	stw	r2,168(sp)
 4022718:	d8003215 	stw	zero,200(sp)
 402271c:	e7003fcc 	andi	fp,fp,255
 4022720:	e700201c 	xori	fp,fp,128
 4022724:	e73fe004 	addi	fp,fp,-128
 4022728:	e0000326 	beq	fp,zero,4022738 <___vfprintf_internal_r+0x750>
 402272c:	d8c02a17 	ldw	r3,168(sp)
 4022730:	18c00044 	addi	r3,r3,1
 4022734:	d8c02a15 	stw	r3,168(sp)
 4022738:	90c0008c 	andi	r3,r18,2
 402273c:	d8c02b15 	stw	r3,172(sp)
 4022740:	18000326 	beq	r3,zero,4022750 <___vfprintf_internal_r+0x768>
 4022744:	d8c02a17 	ldw	r3,168(sp)
 4022748:	18c00084 	addi	r3,r3,2
 402274c:	d8c02a15 	stw	r3,168(sp)
 4022750:	90c0210c 	andi	r3,r18,132
 4022754:	d8c03015 	stw	r3,192(sp)
 4022758:	1801a31e 	bne	r3,zero,4022de8 <___vfprintf_internal_r+0xe00>
 402275c:	d9003117 	ldw	r4,196(sp)
 4022760:	d8c02a17 	ldw	r3,168(sp)
 4022764:	20e7c83a 	sub	r19,r4,r3
 4022768:	04c19f0e 	bge	zero,r19,4022de8 <___vfprintf_internal_r+0xe00>
 402276c:	02400404 	movi	r9,16
 4022770:	d8c02017 	ldw	r3,128(sp)
 4022774:	d8801f17 	ldw	r2,124(sp)
 4022778:	4cc50d0e 	bge	r9,r19,4023bb0 <___vfprintf_internal_r+0x1bc8>
 402277c:	014100f4 	movhi	r5,1027
 4022780:	294d9384 	addi	r5,r5,13902
 4022784:	dc403b15 	stw	r17,236(sp)
 4022788:	d9403515 	stw	r5,212(sp)
 402278c:	9823883a 	mov	r17,r19
 4022790:	482d883a 	mov	r22,r9
 4022794:	9027883a 	mov	r19,r18
 4022798:	070001c4 	movi	fp,7
 402279c:	8025883a 	mov	r18,r16
 40227a0:	dc002c17 	ldw	r16,176(sp)
 40227a4:	00000306 	br	40227b4 <___vfprintf_internal_r+0x7cc>
 40227a8:	8c7ffc04 	addi	r17,r17,-16
 40227ac:	42000204 	addi	r8,r8,8
 40227b0:	b440130e 	bge	r22,r17,4022800 <___vfprintf_internal_r+0x818>
 40227b4:	010100f4 	movhi	r4,1027
 40227b8:	18c00404 	addi	r3,r3,16
 40227bc:	10800044 	addi	r2,r2,1
 40227c0:	210d9384 	addi	r4,r4,13902
 40227c4:	41000015 	stw	r4,0(r8)
 40227c8:	45800115 	stw	r22,4(r8)
 40227cc:	d8c02015 	stw	r3,128(sp)
 40227d0:	d8801f15 	stw	r2,124(sp)
 40227d4:	e0bff40e 	bge	fp,r2,40227a8 <__alt_data_end+0xfffe27a8>
 40227d8:	d9801e04 	addi	r6,sp,120
 40227dc:	b80b883a 	mov	r5,r23
 40227e0:	8009883a 	mov	r4,r16
 40227e4:	4028b000 	call	4028b00 <__sprint_r>
 40227e8:	103f011e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40227ec:	8c7ffc04 	addi	r17,r17,-16
 40227f0:	d8c02017 	ldw	r3,128(sp)
 40227f4:	d8801f17 	ldw	r2,124(sp)
 40227f8:	da000404 	addi	r8,sp,16
 40227fc:	b47fed16 	blt	r22,r17,40227b4 <__alt_data_end+0xfffe27b4>
 4022800:	9021883a 	mov	r16,r18
 4022804:	9825883a 	mov	r18,r19
 4022808:	8827883a 	mov	r19,r17
 402280c:	dc403b17 	ldw	r17,236(sp)
 4022810:	d9403517 	ldw	r5,212(sp)
 4022814:	98c7883a 	add	r3,r19,r3
 4022818:	10800044 	addi	r2,r2,1
 402281c:	41400015 	stw	r5,0(r8)
 4022820:	44c00115 	stw	r19,4(r8)
 4022824:	d8c02015 	stw	r3,128(sp)
 4022828:	d8801f15 	stw	r2,124(sp)
 402282c:	010001c4 	movi	r4,7
 4022830:	2082a316 	blt	r4,r2,40232c0 <___vfprintf_internal_r+0x12d8>
 4022834:	df002787 	ldb	fp,158(sp)
 4022838:	42000204 	addi	r8,r8,8
 402283c:	e0000c26 	beq	fp,zero,4022870 <___vfprintf_internal_r+0x888>
 4022840:	d8801f17 	ldw	r2,124(sp)
 4022844:	d9002784 	addi	r4,sp,158
 4022848:	18c00044 	addi	r3,r3,1
 402284c:	10800044 	addi	r2,r2,1
 4022850:	41000015 	stw	r4,0(r8)
 4022854:	01000044 	movi	r4,1
 4022858:	41000115 	stw	r4,4(r8)
 402285c:	d8c02015 	stw	r3,128(sp)
 4022860:	d8801f15 	stw	r2,124(sp)
 4022864:	010001c4 	movi	r4,7
 4022868:	20823c16 	blt	r4,r2,402315c <___vfprintf_internal_r+0x1174>
 402286c:	42000204 	addi	r8,r8,8
 4022870:	d8802b17 	ldw	r2,172(sp)
 4022874:	10000c26 	beq	r2,zero,40228a8 <___vfprintf_internal_r+0x8c0>
 4022878:	d8801f17 	ldw	r2,124(sp)
 402287c:	d9002704 	addi	r4,sp,156
 4022880:	18c00084 	addi	r3,r3,2
 4022884:	10800044 	addi	r2,r2,1
 4022888:	41000015 	stw	r4,0(r8)
 402288c:	01000084 	movi	r4,2
 4022890:	41000115 	stw	r4,4(r8)
 4022894:	d8c02015 	stw	r3,128(sp)
 4022898:	d8801f15 	stw	r2,124(sp)
 402289c:	010001c4 	movi	r4,7
 40228a0:	20823616 	blt	r4,r2,402317c <___vfprintf_internal_r+0x1194>
 40228a4:	42000204 	addi	r8,r8,8
 40228a8:	d9003017 	ldw	r4,192(sp)
 40228ac:	00802004 	movi	r2,128
 40228b0:	20819926 	beq	r4,r2,4022f18 <___vfprintf_internal_r+0xf30>
 40228b4:	d9402917 	ldw	r5,164(sp)
 40228b8:	d8802e17 	ldw	r2,184(sp)
 40228bc:	28adc83a 	sub	r22,r5,r2
 40228c0:	0580310e 	bge	zero,r22,4022988 <___vfprintf_internal_r+0x9a0>
 40228c4:	07000404 	movi	fp,16
 40228c8:	d8801f17 	ldw	r2,124(sp)
 40228cc:	e584140e 	bge	fp,r22,4023920 <___vfprintf_internal_r+0x1938>
 40228d0:	014100f4 	movhi	r5,1027
 40228d4:	294d8f84 	addi	r5,r5,13886
 40228d8:	dc402915 	stw	r17,164(sp)
 40228dc:	d9402b15 	stw	r5,172(sp)
 40228e0:	b023883a 	mov	r17,r22
 40228e4:	04c001c4 	movi	r19,7
 40228e8:	a82d883a 	mov	r22,r21
 40228ec:	902b883a 	mov	r21,r18
 40228f0:	8025883a 	mov	r18,r16
 40228f4:	dc002c17 	ldw	r16,176(sp)
 40228f8:	00000306 	br	4022908 <___vfprintf_internal_r+0x920>
 40228fc:	8c7ffc04 	addi	r17,r17,-16
 4022900:	42000204 	addi	r8,r8,8
 4022904:	e440110e 	bge	fp,r17,402294c <___vfprintf_internal_r+0x964>
 4022908:	18c00404 	addi	r3,r3,16
 402290c:	10800044 	addi	r2,r2,1
 4022910:	45000015 	stw	r20,0(r8)
 4022914:	47000115 	stw	fp,4(r8)
 4022918:	d8c02015 	stw	r3,128(sp)
 402291c:	d8801f15 	stw	r2,124(sp)
 4022920:	98bff60e 	bge	r19,r2,40228fc <__alt_data_end+0xfffe28fc>
 4022924:	d9801e04 	addi	r6,sp,120
 4022928:	b80b883a 	mov	r5,r23
 402292c:	8009883a 	mov	r4,r16
 4022930:	4028b000 	call	4028b00 <__sprint_r>
 4022934:	103eae1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4022938:	8c7ffc04 	addi	r17,r17,-16
 402293c:	d8c02017 	ldw	r3,128(sp)
 4022940:	d8801f17 	ldw	r2,124(sp)
 4022944:	da000404 	addi	r8,sp,16
 4022948:	e47fef16 	blt	fp,r17,4022908 <__alt_data_end+0xfffe2908>
 402294c:	9021883a 	mov	r16,r18
 4022950:	a825883a 	mov	r18,r21
 4022954:	b02b883a 	mov	r21,r22
 4022958:	882d883a 	mov	r22,r17
 402295c:	dc402917 	ldw	r17,164(sp)
 4022960:	d9002b17 	ldw	r4,172(sp)
 4022964:	1d87883a 	add	r3,r3,r22
 4022968:	10800044 	addi	r2,r2,1
 402296c:	41000015 	stw	r4,0(r8)
 4022970:	45800115 	stw	r22,4(r8)
 4022974:	d8c02015 	stw	r3,128(sp)
 4022978:	d8801f15 	stw	r2,124(sp)
 402297c:	010001c4 	movi	r4,7
 4022980:	2081ee16 	blt	r4,r2,402313c <___vfprintf_internal_r+0x1154>
 4022984:	42000204 	addi	r8,r8,8
 4022988:	9080400c 	andi	r2,r18,256
 402298c:	1001181e 	bne	r2,zero,4022df0 <___vfprintf_internal_r+0xe08>
 4022990:	d9402e17 	ldw	r5,184(sp)
 4022994:	d8801f17 	ldw	r2,124(sp)
 4022998:	44000015 	stw	r16,0(r8)
 402299c:	1947883a 	add	r3,r3,r5
 40229a0:	10800044 	addi	r2,r2,1
 40229a4:	41400115 	stw	r5,4(r8)
 40229a8:	d8c02015 	stw	r3,128(sp)
 40229ac:	d8801f15 	stw	r2,124(sp)
 40229b0:	010001c4 	movi	r4,7
 40229b4:	2081d316 	blt	r4,r2,4023104 <___vfprintf_internal_r+0x111c>
 40229b8:	42000204 	addi	r8,r8,8
 40229bc:	9480010c 	andi	r18,r18,4
 40229c0:	90003226 	beq	r18,zero,4022a8c <___vfprintf_internal_r+0xaa4>
 40229c4:	d9403117 	ldw	r5,196(sp)
 40229c8:	d8802a17 	ldw	r2,168(sp)
 40229cc:	28a1c83a 	sub	r16,r5,r2
 40229d0:	04002e0e 	bge	zero,r16,4022a8c <___vfprintf_internal_r+0xaa4>
 40229d4:	04400404 	movi	r17,16
 40229d8:	d8801f17 	ldw	r2,124(sp)
 40229dc:	8c04a20e 	bge	r17,r16,4023c68 <___vfprintf_internal_r+0x1c80>
 40229e0:	014100f4 	movhi	r5,1027
 40229e4:	294d9384 	addi	r5,r5,13902
 40229e8:	d9403515 	stw	r5,212(sp)
 40229ec:	048001c4 	movi	r18,7
 40229f0:	dcc02c17 	ldw	r19,176(sp)
 40229f4:	00000306 	br	4022a04 <___vfprintf_internal_r+0xa1c>
 40229f8:	843ffc04 	addi	r16,r16,-16
 40229fc:	42000204 	addi	r8,r8,8
 4022a00:	8c00130e 	bge	r17,r16,4022a50 <___vfprintf_internal_r+0xa68>
 4022a04:	010100f4 	movhi	r4,1027
 4022a08:	18c00404 	addi	r3,r3,16
 4022a0c:	10800044 	addi	r2,r2,1
 4022a10:	210d9384 	addi	r4,r4,13902
 4022a14:	41000015 	stw	r4,0(r8)
 4022a18:	44400115 	stw	r17,4(r8)
 4022a1c:	d8c02015 	stw	r3,128(sp)
 4022a20:	d8801f15 	stw	r2,124(sp)
 4022a24:	90bff40e 	bge	r18,r2,40229f8 <__alt_data_end+0xfffe29f8>
 4022a28:	d9801e04 	addi	r6,sp,120
 4022a2c:	b80b883a 	mov	r5,r23
 4022a30:	9809883a 	mov	r4,r19
 4022a34:	4028b000 	call	4028b00 <__sprint_r>
 4022a38:	103e6d1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4022a3c:	843ffc04 	addi	r16,r16,-16
 4022a40:	d8c02017 	ldw	r3,128(sp)
 4022a44:	d8801f17 	ldw	r2,124(sp)
 4022a48:	da000404 	addi	r8,sp,16
 4022a4c:	8c3fed16 	blt	r17,r16,4022a04 <__alt_data_end+0xfffe2a04>
 4022a50:	d9403517 	ldw	r5,212(sp)
 4022a54:	1c07883a 	add	r3,r3,r16
 4022a58:	10800044 	addi	r2,r2,1
 4022a5c:	41400015 	stw	r5,0(r8)
 4022a60:	44000115 	stw	r16,4(r8)
 4022a64:	d8c02015 	stw	r3,128(sp)
 4022a68:	d8801f15 	stw	r2,124(sp)
 4022a6c:	010001c4 	movi	r4,7
 4022a70:	2080060e 	bge	r4,r2,4022a8c <___vfprintf_internal_r+0xaa4>
 4022a74:	d9002c17 	ldw	r4,176(sp)
 4022a78:	d9801e04 	addi	r6,sp,120
 4022a7c:	b80b883a 	mov	r5,r23
 4022a80:	4028b000 	call	4028b00 <__sprint_r>
 4022a84:	103e5a1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4022a88:	d8c02017 	ldw	r3,128(sp)
 4022a8c:	d8803117 	ldw	r2,196(sp)
 4022a90:	d9002a17 	ldw	r4,168(sp)
 4022a94:	1100010e 	bge	r2,r4,4022a9c <___vfprintf_internal_r+0xab4>
 4022a98:	2005883a 	mov	r2,r4
 4022a9c:	d9402f17 	ldw	r5,188(sp)
 4022aa0:	288b883a 	add	r5,r5,r2
 4022aa4:	d9402f15 	stw	r5,188(sp)
 4022aa8:	18019e1e 	bne	r3,zero,4023124 <___vfprintf_internal_r+0x113c>
 4022aac:	a8800007 	ldb	r2,0(r21)
 4022ab0:	d8001f15 	stw	zero,124(sp)
 4022ab4:	da000404 	addi	r8,sp,16
 4022ab8:	103d851e 	bne	r2,zero,40220d0 <__alt_data_end+0xfffe20d0>
 4022abc:	a821883a 	mov	r16,r21
 4022ac0:	003d9b06 	br	4022130 <__alt_data_end+0xfffe2130>
 4022ac4:	18c03fcc 	andi	r3,r3,255
 4022ac8:	1805c11e 	bne	r3,zero,40241d0 <___vfprintf_internal_r+0x21e8>
 4022acc:	94800414 	ori	r18,r18,16
 4022ad0:	9080080c 	andi	r2,r18,32
 4022ad4:	10020c26 	beq	r2,zero,4023308 <___vfprintf_internal_r+0x1320>
 4022ad8:	d8802d17 	ldw	r2,180(sp)
 4022adc:	d9002917 	ldw	r4,164(sp)
 4022ae0:	d8002785 	stb	zero,158(sp)
 4022ae4:	10c00204 	addi	r3,r2,8
 4022ae8:	14c00017 	ldw	r19,0(r2)
 4022aec:	15800117 	ldw	r22,4(r2)
 4022af0:	20040f16 	blt	r4,zero,4023b30 <___vfprintf_internal_r+0x1b48>
 4022af4:	013fdfc4 	movi	r4,-129
 4022af8:	9d84b03a 	or	r2,r19,r22
 4022afc:	d8c02d15 	stw	r3,180(sp)
 4022b00:	9124703a 	and	r18,r18,r4
 4022b04:	0039883a 	mov	fp,zero
 4022b08:	103e891e 	bne	r2,zero,4022530 <__alt_data_end+0xfffe2530>
 4022b0c:	d9002917 	ldw	r4,164(sp)
 4022b10:	2002c11e 	bne	r4,zero,4023618 <___vfprintf_internal_r+0x1630>
 4022b14:	d8002915 	stw	zero,164(sp)
 4022b18:	d8002e15 	stw	zero,184(sp)
 4022b1c:	dc001e04 	addi	r16,sp,120
 4022b20:	003ef806 	br	4022704 <__alt_data_end+0xfffe2704>
 4022b24:	18c03fcc 	andi	r3,r3,255
 4022b28:	18059d1e 	bne	r3,zero,40241a0 <___vfprintf_internal_r+0x21b8>
 4022b2c:	014100f4 	movhi	r5,1027
 4022b30:	294d8304 	addi	r5,r5,13836
 4022b34:	d9403915 	stw	r5,228(sp)
 4022b38:	9080080c 	andi	r2,r18,32
 4022b3c:	10005226 	beq	r2,zero,4022c88 <___vfprintf_internal_r+0xca0>
 4022b40:	d8802d17 	ldw	r2,180(sp)
 4022b44:	14c00017 	ldw	r19,0(r2)
 4022b48:	15800117 	ldw	r22,4(r2)
 4022b4c:	10800204 	addi	r2,r2,8
 4022b50:	d8802d15 	stw	r2,180(sp)
 4022b54:	9080004c 	andi	r2,r18,1
 4022b58:	10019026 	beq	r2,zero,402319c <___vfprintf_internal_r+0x11b4>
 4022b5c:	9d84b03a 	or	r2,r19,r22
 4022b60:	10036926 	beq	r2,zero,4023908 <___vfprintf_internal_r+0x1920>
 4022b64:	d8c02917 	ldw	r3,164(sp)
 4022b68:	00800c04 	movi	r2,48
 4022b6c:	d8802705 	stb	r2,156(sp)
 4022b70:	dc402745 	stb	r17,157(sp)
 4022b74:	d8002785 	stb	zero,158(sp)
 4022b78:	90800094 	ori	r2,r18,2
 4022b7c:	18045d16 	blt	r3,zero,4023cf4 <___vfprintf_internal_r+0x1d0c>
 4022b80:	00bfdfc4 	movi	r2,-129
 4022b84:	90a4703a 	and	r18,r18,r2
 4022b88:	94800094 	ori	r18,r18,2
 4022b8c:	0039883a 	mov	fp,zero
 4022b90:	d9003917 	ldw	r4,228(sp)
 4022b94:	dc001e04 	addi	r16,sp,120
 4022b98:	988003cc 	andi	r2,r19,15
 4022b9c:	b006973a 	slli	r3,r22,28
 4022ba0:	2085883a 	add	r2,r4,r2
 4022ba4:	9826d13a 	srli	r19,r19,4
 4022ba8:	10800003 	ldbu	r2,0(r2)
 4022bac:	b02cd13a 	srli	r22,r22,4
 4022bb0:	843fffc4 	addi	r16,r16,-1
 4022bb4:	1ce6b03a 	or	r19,r3,r19
 4022bb8:	80800005 	stb	r2,0(r16)
 4022bbc:	9d84b03a 	or	r2,r19,r22
 4022bc0:	103ff51e 	bne	r2,zero,4022b98 <__alt_data_end+0xfffe2b98>
 4022bc4:	d8c02817 	ldw	r3,160(sp)
 4022bc8:	1c07c83a 	sub	r3,r3,r16
 4022bcc:	d8c02e15 	stw	r3,184(sp)
 4022bd0:	003ecc06 	br	4022704 <__alt_data_end+0xfffe2704>
 4022bd4:	18c03fcc 	andi	r3,r3,255
 4022bd8:	183e9f26 	beq	r3,zero,4022658 <__alt_data_end+0xfffe2658>
 4022bdc:	d9c02785 	stb	r7,158(sp)
 4022be0:	003e9d06 	br	4022658 <__alt_data_end+0xfffe2658>
 4022be4:	00c00044 	movi	r3,1
 4022be8:	01c00ac4 	movi	r7,43
 4022bec:	ac400007 	ldb	r17,0(r21)
 4022bf0:	003d5e06 	br	402216c <__alt_data_end+0xfffe216c>
 4022bf4:	94800814 	ori	r18,r18,32
 4022bf8:	ac400007 	ldb	r17,0(r21)
 4022bfc:	003d5b06 	br	402216c <__alt_data_end+0xfffe216c>
 4022c00:	d8c02d17 	ldw	r3,180(sp)
 4022c04:	d8002785 	stb	zero,158(sp)
 4022c08:	1c000017 	ldw	r16,0(r3)
 4022c0c:	1cc00104 	addi	r19,r3,4
 4022c10:	80041926 	beq	r16,zero,4023c78 <___vfprintf_internal_r+0x1c90>
 4022c14:	d9002917 	ldw	r4,164(sp)
 4022c18:	2003d016 	blt	r4,zero,4023b5c <___vfprintf_internal_r+0x1b74>
 4022c1c:	200d883a 	mov	r6,r4
 4022c20:	000b883a 	mov	r5,zero
 4022c24:	8009883a 	mov	r4,r16
 4022c28:	da003d15 	stw	r8,244(sp)
 4022c2c:	402733c0 	call	402733c <memchr>
 4022c30:	da003d17 	ldw	r8,244(sp)
 4022c34:	10045426 	beq	r2,zero,4023d88 <___vfprintf_internal_r+0x1da0>
 4022c38:	1405c83a 	sub	r2,r2,r16
 4022c3c:	d8802e15 	stw	r2,184(sp)
 4022c40:	1003cc16 	blt	r2,zero,4023b74 <___vfprintf_internal_r+0x1b8c>
 4022c44:	df002783 	ldbu	fp,158(sp)
 4022c48:	d8802a15 	stw	r2,168(sp)
 4022c4c:	dcc02d15 	stw	r19,180(sp)
 4022c50:	d8002915 	stw	zero,164(sp)
 4022c54:	d8003215 	stw	zero,200(sp)
 4022c58:	003eb006 	br	402271c <__alt_data_end+0xfffe271c>
 4022c5c:	18c03fcc 	andi	r3,r3,255
 4022c60:	183f9b26 	beq	r3,zero,4022ad0 <__alt_data_end+0xfffe2ad0>
 4022c64:	d9c02785 	stb	r7,158(sp)
 4022c68:	003f9906 	br	4022ad0 <__alt_data_end+0xfffe2ad0>
 4022c6c:	18c03fcc 	andi	r3,r3,255
 4022c70:	1805551e 	bne	r3,zero,40241c8 <___vfprintf_internal_r+0x21e0>
 4022c74:	014100f4 	movhi	r5,1027
 4022c78:	294d8804 	addi	r5,r5,13856
 4022c7c:	d9403915 	stw	r5,228(sp)
 4022c80:	9080080c 	andi	r2,r18,32
 4022c84:	103fae1e 	bne	r2,zero,4022b40 <__alt_data_end+0xfffe2b40>
 4022c88:	9080040c 	andi	r2,r18,16
 4022c8c:	1002de26 	beq	r2,zero,4023808 <___vfprintf_internal_r+0x1820>
 4022c90:	d8c02d17 	ldw	r3,180(sp)
 4022c94:	002d883a 	mov	r22,zero
 4022c98:	1cc00017 	ldw	r19,0(r3)
 4022c9c:	18c00104 	addi	r3,r3,4
 4022ca0:	d8c02d15 	stw	r3,180(sp)
 4022ca4:	003fab06 	br	4022b54 <__alt_data_end+0xfffe2b54>
 4022ca8:	38803fcc 	andi	r2,r7,255
 4022cac:	1080201c 	xori	r2,r2,128
 4022cb0:	10bfe004 	addi	r2,r2,-128
 4022cb4:	1002d21e 	bne	r2,zero,4023800 <___vfprintf_internal_r+0x1818>
 4022cb8:	00c00044 	movi	r3,1
 4022cbc:	01c00804 	movi	r7,32
 4022cc0:	ac400007 	ldb	r17,0(r21)
 4022cc4:	003d2906 	br	402216c <__alt_data_end+0xfffe216c>
 4022cc8:	94800054 	ori	r18,r18,1
 4022ccc:	ac400007 	ldb	r17,0(r21)
 4022cd0:	003d2606 	br	402216c <__alt_data_end+0xfffe216c>
 4022cd4:	18c03fcc 	andi	r3,r3,255
 4022cd8:	183e0526 	beq	r3,zero,40224f0 <__alt_data_end+0xfffe24f0>
 4022cdc:	d9c02785 	stb	r7,158(sp)
 4022ce0:	003e0306 	br	40224f0 <__alt_data_end+0xfffe24f0>
 4022ce4:	94801014 	ori	r18,r18,64
 4022ce8:	ac400007 	ldb	r17,0(r21)
 4022cec:	003d1f06 	br	402216c <__alt_data_end+0xfffe216c>
 4022cf0:	ac400007 	ldb	r17,0(r21)
 4022cf4:	8a438726 	beq	r17,r9,4023b14 <___vfprintf_internal_r+0x1b2c>
 4022cf8:	94800414 	ori	r18,r18,16
 4022cfc:	003d1b06 	br	402216c <__alt_data_end+0xfffe216c>
 4022d00:	18c03fcc 	andi	r3,r3,255
 4022d04:	1805341e 	bne	r3,zero,40241d8 <___vfprintf_internal_r+0x21f0>
 4022d08:	9080080c 	andi	r2,r18,32
 4022d0c:	1002cd26 	beq	r2,zero,4023844 <___vfprintf_internal_r+0x185c>
 4022d10:	d9402d17 	ldw	r5,180(sp)
 4022d14:	d9002f17 	ldw	r4,188(sp)
 4022d18:	28800017 	ldw	r2,0(r5)
 4022d1c:	2007d7fa 	srai	r3,r4,31
 4022d20:	29400104 	addi	r5,r5,4
 4022d24:	d9402d15 	stw	r5,180(sp)
 4022d28:	11000015 	stw	r4,0(r2)
 4022d2c:	10c00115 	stw	r3,4(r2)
 4022d30:	003ce506 	br	40220c8 <__alt_data_end+0xfffe20c8>
 4022d34:	d8c02d17 	ldw	r3,180(sp)
 4022d38:	d9002d17 	ldw	r4,180(sp)
 4022d3c:	d8002785 	stb	zero,158(sp)
 4022d40:	18800017 	ldw	r2,0(r3)
 4022d44:	21000104 	addi	r4,r4,4
 4022d48:	00c00044 	movi	r3,1
 4022d4c:	d8c02a15 	stw	r3,168(sp)
 4022d50:	d8801405 	stb	r2,80(sp)
 4022d54:	d9002d15 	stw	r4,180(sp)
 4022d58:	d8c02e15 	stw	r3,184(sp)
 4022d5c:	d8002915 	stw	zero,164(sp)
 4022d60:	d8003215 	stw	zero,200(sp)
 4022d64:	dc001404 	addi	r16,sp,80
 4022d68:	0039883a 	mov	fp,zero
 4022d6c:	003e7206 	br	4022738 <__alt_data_end+0xfffe2738>
 4022d70:	010100f4 	movhi	r4,1027
 4022d74:	210d8804 	addi	r4,r4,13856
 4022d78:	0039883a 	mov	fp,zero
 4022d7c:	d9003915 	stw	r4,228(sp)
 4022d80:	04401e04 	movi	r17,120
 4022d84:	003f8206 	br	4022b90 <__alt_data_end+0xfffe2b90>
 4022d88:	18c03fcc 	andi	r3,r3,255
 4022d8c:	1805061e 	bne	r3,zero,40241a8 <___vfprintf_internal_r+0x21c0>
 4022d90:	883d9126 	beq	r17,zero,40223d8 <__alt_data_end+0xfffe23d8>
 4022d94:	00c00044 	movi	r3,1
 4022d98:	d8c02a15 	stw	r3,168(sp)
 4022d9c:	dc401405 	stb	r17,80(sp)
 4022da0:	d8002785 	stb	zero,158(sp)
 4022da4:	003fec06 	br	4022d58 <__alt_data_end+0xfffe2d58>
 4022da8:	014100f4 	movhi	r5,1027
 4022dac:	294d8804 	addi	r5,r5,13856
 4022db0:	d9403915 	stw	r5,228(sp)
 4022db4:	d8c02d15 	stw	r3,180(sp)
 4022db8:	1025883a 	mov	r18,r2
 4022dbc:	04401e04 	movi	r17,120
 4022dc0:	9d84b03a 	or	r2,r19,r22
 4022dc4:	1000fc1e 	bne	r2,zero,40231b8 <___vfprintf_internal_r+0x11d0>
 4022dc8:	0039883a 	mov	fp,zero
 4022dcc:	00800084 	movi	r2,2
 4022dd0:	10803fcc 	andi	r2,r2,255
 4022dd4:	00c00044 	movi	r3,1
 4022dd8:	10c20f26 	beq	r2,r3,4023618 <___vfprintf_internal_r+0x1630>
 4022ddc:	00c00084 	movi	r3,2
 4022de0:	10fd6326 	beq	r2,r3,4022370 <__alt_data_end+0xfffe2370>
 4022de4:	003e2d06 	br	402269c <__alt_data_end+0xfffe269c>
 4022de8:	d8c02017 	ldw	r3,128(sp)
 4022dec:	003e9306 	br	402283c <__alt_data_end+0xfffe283c>
 4022df0:	00801944 	movi	r2,101
 4022df4:	14407e0e 	bge	r2,r17,4022ff0 <___vfprintf_internal_r+0x1008>
 4022df8:	d9003617 	ldw	r4,216(sp)
 4022dfc:	d9403817 	ldw	r5,224(sp)
 4022e00:	000d883a 	mov	r6,zero
 4022e04:	000f883a 	mov	r7,zero
 4022e08:	d8c03c15 	stw	r3,240(sp)
 4022e0c:	da003d15 	stw	r8,244(sp)
 4022e10:	402d2f40 	call	402d2f4 <__eqdf2>
 4022e14:	d8c03c17 	ldw	r3,240(sp)
 4022e18:	da003d17 	ldw	r8,244(sp)
 4022e1c:	1000f71e 	bne	r2,zero,40231fc <___vfprintf_internal_r+0x1214>
 4022e20:	d8801f17 	ldw	r2,124(sp)
 4022e24:	010100f4 	movhi	r4,1027
 4022e28:	210d8f04 	addi	r4,r4,13884
 4022e2c:	18c00044 	addi	r3,r3,1
 4022e30:	10800044 	addi	r2,r2,1
 4022e34:	41000015 	stw	r4,0(r8)
 4022e38:	01000044 	movi	r4,1
 4022e3c:	41000115 	stw	r4,4(r8)
 4022e40:	d8c02015 	stw	r3,128(sp)
 4022e44:	d8801f15 	stw	r2,124(sp)
 4022e48:	010001c4 	movi	r4,7
 4022e4c:	2082b816 	blt	r4,r2,4023930 <___vfprintf_internal_r+0x1948>
 4022e50:	42000204 	addi	r8,r8,8
 4022e54:	d8802617 	ldw	r2,152(sp)
 4022e58:	d9403317 	ldw	r5,204(sp)
 4022e5c:	11400216 	blt	r2,r5,4022e68 <___vfprintf_internal_r+0xe80>
 4022e60:	9080004c 	andi	r2,r18,1
 4022e64:	103ed526 	beq	r2,zero,40229bc <__alt_data_end+0xfffe29bc>
 4022e68:	d8803717 	ldw	r2,220(sp)
 4022e6c:	d9003417 	ldw	r4,208(sp)
 4022e70:	d9403717 	ldw	r5,220(sp)
 4022e74:	1887883a 	add	r3,r3,r2
 4022e78:	d8801f17 	ldw	r2,124(sp)
 4022e7c:	41000015 	stw	r4,0(r8)
 4022e80:	41400115 	stw	r5,4(r8)
 4022e84:	10800044 	addi	r2,r2,1
 4022e88:	d8c02015 	stw	r3,128(sp)
 4022e8c:	d8801f15 	stw	r2,124(sp)
 4022e90:	010001c4 	movi	r4,7
 4022e94:	20832916 	blt	r4,r2,4023b3c <___vfprintf_internal_r+0x1b54>
 4022e98:	42000204 	addi	r8,r8,8
 4022e9c:	d8803317 	ldw	r2,204(sp)
 4022ea0:	143fffc4 	addi	r16,r2,-1
 4022ea4:	043ec50e 	bge	zero,r16,40229bc <__alt_data_end+0xfffe29bc>
 4022ea8:	04400404 	movi	r17,16
 4022eac:	d8801f17 	ldw	r2,124(sp)
 4022eb0:	8c00880e 	bge	r17,r16,40230d4 <___vfprintf_internal_r+0x10ec>
 4022eb4:	014100f4 	movhi	r5,1027
 4022eb8:	294d8f84 	addi	r5,r5,13886
 4022ebc:	d9402b15 	stw	r5,172(sp)
 4022ec0:	058001c4 	movi	r22,7
 4022ec4:	dcc02c17 	ldw	r19,176(sp)
 4022ec8:	00000306 	br	4022ed8 <___vfprintf_internal_r+0xef0>
 4022ecc:	42000204 	addi	r8,r8,8
 4022ed0:	843ffc04 	addi	r16,r16,-16
 4022ed4:	8c00820e 	bge	r17,r16,40230e0 <___vfprintf_internal_r+0x10f8>
 4022ed8:	18c00404 	addi	r3,r3,16
 4022edc:	10800044 	addi	r2,r2,1
 4022ee0:	45000015 	stw	r20,0(r8)
 4022ee4:	44400115 	stw	r17,4(r8)
 4022ee8:	d8c02015 	stw	r3,128(sp)
 4022eec:	d8801f15 	stw	r2,124(sp)
 4022ef0:	b0bff60e 	bge	r22,r2,4022ecc <__alt_data_end+0xfffe2ecc>
 4022ef4:	d9801e04 	addi	r6,sp,120
 4022ef8:	b80b883a 	mov	r5,r23
 4022efc:	9809883a 	mov	r4,r19
 4022f00:	4028b000 	call	4028b00 <__sprint_r>
 4022f04:	103d3a1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4022f08:	d8c02017 	ldw	r3,128(sp)
 4022f0c:	d8801f17 	ldw	r2,124(sp)
 4022f10:	da000404 	addi	r8,sp,16
 4022f14:	003fee06 	br	4022ed0 <__alt_data_end+0xfffe2ed0>
 4022f18:	d9403117 	ldw	r5,196(sp)
 4022f1c:	d8802a17 	ldw	r2,168(sp)
 4022f20:	28adc83a 	sub	r22,r5,r2
 4022f24:	05be630e 	bge	zero,r22,40228b4 <__alt_data_end+0xfffe28b4>
 4022f28:	07000404 	movi	fp,16
 4022f2c:	d8801f17 	ldw	r2,124(sp)
 4022f30:	e5838f0e 	bge	fp,r22,4023d70 <___vfprintf_internal_r+0x1d88>
 4022f34:	014100f4 	movhi	r5,1027
 4022f38:	294d8f84 	addi	r5,r5,13886
 4022f3c:	dc403015 	stw	r17,192(sp)
 4022f40:	d9402b15 	stw	r5,172(sp)
 4022f44:	b023883a 	mov	r17,r22
 4022f48:	04c001c4 	movi	r19,7
 4022f4c:	a82d883a 	mov	r22,r21
 4022f50:	902b883a 	mov	r21,r18
 4022f54:	8025883a 	mov	r18,r16
 4022f58:	dc002c17 	ldw	r16,176(sp)
 4022f5c:	00000306 	br	4022f6c <___vfprintf_internal_r+0xf84>
 4022f60:	8c7ffc04 	addi	r17,r17,-16
 4022f64:	42000204 	addi	r8,r8,8
 4022f68:	e440110e 	bge	fp,r17,4022fb0 <___vfprintf_internal_r+0xfc8>
 4022f6c:	18c00404 	addi	r3,r3,16
 4022f70:	10800044 	addi	r2,r2,1
 4022f74:	45000015 	stw	r20,0(r8)
 4022f78:	47000115 	stw	fp,4(r8)
 4022f7c:	d8c02015 	stw	r3,128(sp)
 4022f80:	d8801f15 	stw	r2,124(sp)
 4022f84:	98bff60e 	bge	r19,r2,4022f60 <__alt_data_end+0xfffe2f60>
 4022f88:	d9801e04 	addi	r6,sp,120
 4022f8c:	b80b883a 	mov	r5,r23
 4022f90:	8009883a 	mov	r4,r16
 4022f94:	4028b000 	call	4028b00 <__sprint_r>
 4022f98:	103d151e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4022f9c:	8c7ffc04 	addi	r17,r17,-16
 4022fa0:	d8c02017 	ldw	r3,128(sp)
 4022fa4:	d8801f17 	ldw	r2,124(sp)
 4022fa8:	da000404 	addi	r8,sp,16
 4022fac:	e47fef16 	blt	fp,r17,4022f6c <__alt_data_end+0xfffe2f6c>
 4022fb0:	9021883a 	mov	r16,r18
 4022fb4:	a825883a 	mov	r18,r21
 4022fb8:	b02b883a 	mov	r21,r22
 4022fbc:	882d883a 	mov	r22,r17
 4022fc0:	dc403017 	ldw	r17,192(sp)
 4022fc4:	d9002b17 	ldw	r4,172(sp)
 4022fc8:	1d87883a 	add	r3,r3,r22
 4022fcc:	10800044 	addi	r2,r2,1
 4022fd0:	41000015 	stw	r4,0(r8)
 4022fd4:	45800115 	stw	r22,4(r8)
 4022fd8:	d8c02015 	stw	r3,128(sp)
 4022fdc:	d8801f15 	stw	r2,124(sp)
 4022fe0:	010001c4 	movi	r4,7
 4022fe4:	20818e16 	blt	r4,r2,4023620 <___vfprintf_internal_r+0x1638>
 4022fe8:	42000204 	addi	r8,r8,8
 4022fec:	003e3106 	br	40228b4 <__alt_data_end+0xfffe28b4>
 4022ff0:	d9403317 	ldw	r5,204(sp)
 4022ff4:	00800044 	movi	r2,1
 4022ff8:	18c00044 	addi	r3,r3,1
 4022ffc:	1141530e 	bge	r2,r5,402354c <___vfprintf_internal_r+0x1564>
 4023000:	dc401f17 	ldw	r17,124(sp)
 4023004:	00800044 	movi	r2,1
 4023008:	40800115 	stw	r2,4(r8)
 402300c:	8c400044 	addi	r17,r17,1
 4023010:	44000015 	stw	r16,0(r8)
 4023014:	d8c02015 	stw	r3,128(sp)
 4023018:	dc401f15 	stw	r17,124(sp)
 402301c:	008001c4 	movi	r2,7
 4023020:	14416b16 	blt	r2,r17,40235d0 <___vfprintf_internal_r+0x15e8>
 4023024:	42000204 	addi	r8,r8,8
 4023028:	d8803717 	ldw	r2,220(sp)
 402302c:	d9003417 	ldw	r4,208(sp)
 4023030:	8c400044 	addi	r17,r17,1
 4023034:	10c7883a 	add	r3,r2,r3
 4023038:	40800115 	stw	r2,4(r8)
 402303c:	41000015 	stw	r4,0(r8)
 4023040:	d8c02015 	stw	r3,128(sp)
 4023044:	dc401f15 	stw	r17,124(sp)
 4023048:	008001c4 	movi	r2,7
 402304c:	14416916 	blt	r2,r17,40235f4 <___vfprintf_internal_r+0x160c>
 4023050:	45800204 	addi	r22,r8,8
 4023054:	d9003617 	ldw	r4,216(sp)
 4023058:	d9403817 	ldw	r5,224(sp)
 402305c:	000d883a 	mov	r6,zero
 4023060:	000f883a 	mov	r7,zero
 4023064:	d8c03c15 	stw	r3,240(sp)
 4023068:	402d2f40 	call	402d2f4 <__eqdf2>
 402306c:	d8c03c17 	ldw	r3,240(sp)
 4023070:	1000bc26 	beq	r2,zero,4023364 <___vfprintf_internal_r+0x137c>
 4023074:	d9403317 	ldw	r5,204(sp)
 4023078:	84000044 	addi	r16,r16,1
 402307c:	8c400044 	addi	r17,r17,1
 4023080:	28bfffc4 	addi	r2,r5,-1
 4023084:	1887883a 	add	r3,r3,r2
 4023088:	b0800115 	stw	r2,4(r22)
 402308c:	b4000015 	stw	r16,0(r22)
 4023090:	d8c02015 	stw	r3,128(sp)
 4023094:	dc401f15 	stw	r17,124(sp)
 4023098:	008001c4 	movi	r2,7
 402309c:	14414316 	blt	r2,r17,40235ac <___vfprintf_internal_r+0x15c4>
 40230a0:	b5800204 	addi	r22,r22,8
 40230a4:	d9003a17 	ldw	r4,232(sp)
 40230a8:	df0022c4 	addi	fp,sp,139
 40230ac:	8c400044 	addi	r17,r17,1
 40230b0:	20c7883a 	add	r3,r4,r3
 40230b4:	b7000015 	stw	fp,0(r22)
 40230b8:	b1000115 	stw	r4,4(r22)
 40230bc:	d8c02015 	stw	r3,128(sp)
 40230c0:	dc401f15 	stw	r17,124(sp)
 40230c4:	008001c4 	movi	r2,7
 40230c8:	14400e16 	blt	r2,r17,4023104 <___vfprintf_internal_r+0x111c>
 40230cc:	b2000204 	addi	r8,r22,8
 40230d0:	003e3a06 	br	40229bc <__alt_data_end+0xfffe29bc>
 40230d4:	010100f4 	movhi	r4,1027
 40230d8:	210d8f84 	addi	r4,r4,13886
 40230dc:	d9002b15 	stw	r4,172(sp)
 40230e0:	d9002b17 	ldw	r4,172(sp)
 40230e4:	1c07883a 	add	r3,r3,r16
 40230e8:	44000115 	stw	r16,4(r8)
 40230ec:	41000015 	stw	r4,0(r8)
 40230f0:	10800044 	addi	r2,r2,1
 40230f4:	d8c02015 	stw	r3,128(sp)
 40230f8:	d8801f15 	stw	r2,124(sp)
 40230fc:	010001c4 	movi	r4,7
 4023100:	20be2d0e 	bge	r4,r2,40229b8 <__alt_data_end+0xfffe29b8>
 4023104:	d9002c17 	ldw	r4,176(sp)
 4023108:	d9801e04 	addi	r6,sp,120
 402310c:	b80b883a 	mov	r5,r23
 4023110:	4028b000 	call	4028b00 <__sprint_r>
 4023114:	103cb61e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023118:	d8c02017 	ldw	r3,128(sp)
 402311c:	da000404 	addi	r8,sp,16
 4023120:	003e2606 	br	40229bc <__alt_data_end+0xfffe29bc>
 4023124:	d9002c17 	ldw	r4,176(sp)
 4023128:	d9801e04 	addi	r6,sp,120
 402312c:	b80b883a 	mov	r5,r23
 4023130:	4028b000 	call	4028b00 <__sprint_r>
 4023134:	103e5d26 	beq	r2,zero,4022aac <__alt_data_end+0xfffe2aac>
 4023138:	003cad06 	br	40223f0 <__alt_data_end+0xfffe23f0>
 402313c:	d9002c17 	ldw	r4,176(sp)
 4023140:	d9801e04 	addi	r6,sp,120
 4023144:	b80b883a 	mov	r5,r23
 4023148:	4028b000 	call	4028b00 <__sprint_r>
 402314c:	103ca81e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023150:	d8c02017 	ldw	r3,128(sp)
 4023154:	da000404 	addi	r8,sp,16
 4023158:	003e0b06 	br	4022988 <__alt_data_end+0xfffe2988>
 402315c:	d9002c17 	ldw	r4,176(sp)
 4023160:	d9801e04 	addi	r6,sp,120
 4023164:	b80b883a 	mov	r5,r23
 4023168:	4028b000 	call	4028b00 <__sprint_r>
 402316c:	103ca01e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023170:	d8c02017 	ldw	r3,128(sp)
 4023174:	da000404 	addi	r8,sp,16
 4023178:	003dbd06 	br	4022870 <__alt_data_end+0xfffe2870>
 402317c:	d9002c17 	ldw	r4,176(sp)
 4023180:	d9801e04 	addi	r6,sp,120
 4023184:	b80b883a 	mov	r5,r23
 4023188:	4028b000 	call	4028b00 <__sprint_r>
 402318c:	103c981e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023190:	d8c02017 	ldw	r3,128(sp)
 4023194:	da000404 	addi	r8,sp,16
 4023198:	003dc306 	br	40228a8 <__alt_data_end+0xfffe28a8>
 402319c:	d8802917 	ldw	r2,164(sp)
 40231a0:	d8002785 	stb	zero,158(sp)
 40231a4:	103f0616 	blt	r2,zero,4022dc0 <__alt_data_end+0xfffe2dc0>
 40231a8:	00ffdfc4 	movi	r3,-129
 40231ac:	9d84b03a 	or	r2,r19,r22
 40231b0:	90e4703a 	and	r18,r18,r3
 40231b4:	103c6b26 	beq	r2,zero,4022364 <__alt_data_end+0xfffe2364>
 40231b8:	0039883a 	mov	fp,zero
 40231bc:	003e7406 	br	4022b90 <__alt_data_end+0xfffe2b90>
 40231c0:	9080040c 	andi	r2,r18,16
 40231c4:	1001b326 	beq	r2,zero,4023894 <___vfprintf_internal_r+0x18ac>
 40231c8:	d9002d17 	ldw	r4,180(sp)
 40231cc:	d9402917 	ldw	r5,164(sp)
 40231d0:	d8002785 	stb	zero,158(sp)
 40231d4:	20800104 	addi	r2,r4,4
 40231d8:	24c00017 	ldw	r19,0(r4)
 40231dc:	002d883a 	mov	r22,zero
 40231e0:	2801b516 	blt	r5,zero,40238b8 <___vfprintf_internal_r+0x18d0>
 40231e4:	00ffdfc4 	movi	r3,-129
 40231e8:	d8802d15 	stw	r2,180(sp)
 40231ec:	90e4703a 	and	r18,r18,r3
 40231f0:	983d2726 	beq	r19,zero,4022690 <__alt_data_end+0xfffe2690>
 40231f4:	0039883a 	mov	fp,zero
 40231f8:	003d2a06 	br	40226a4 <__alt_data_end+0xfffe26a4>
 40231fc:	dc402617 	ldw	r17,152(sp)
 4023200:	0441d30e 	bge	zero,r17,4023950 <___vfprintf_internal_r+0x1968>
 4023204:	dc403217 	ldw	r17,200(sp)
 4023208:	d8803317 	ldw	r2,204(sp)
 402320c:	1440010e 	bge	r2,r17,4023214 <___vfprintf_internal_r+0x122c>
 4023210:	1023883a 	mov	r17,r2
 4023214:	04400a0e 	bge	zero,r17,4023240 <___vfprintf_internal_r+0x1258>
 4023218:	d8801f17 	ldw	r2,124(sp)
 402321c:	1c47883a 	add	r3,r3,r17
 4023220:	44000015 	stw	r16,0(r8)
 4023224:	10800044 	addi	r2,r2,1
 4023228:	44400115 	stw	r17,4(r8)
 402322c:	d8c02015 	stw	r3,128(sp)
 4023230:	d8801f15 	stw	r2,124(sp)
 4023234:	010001c4 	movi	r4,7
 4023238:	20826516 	blt	r4,r2,4023bd0 <___vfprintf_internal_r+0x1be8>
 402323c:	42000204 	addi	r8,r8,8
 4023240:	88026116 	blt	r17,zero,4023bc8 <___vfprintf_internal_r+0x1be0>
 4023244:	d9003217 	ldw	r4,200(sp)
 4023248:	2463c83a 	sub	r17,r4,r17
 402324c:	04407b0e 	bge	zero,r17,402343c <___vfprintf_internal_r+0x1454>
 4023250:	05800404 	movi	r22,16
 4023254:	d8801f17 	ldw	r2,124(sp)
 4023258:	b4419d0e 	bge	r22,r17,40238d0 <___vfprintf_internal_r+0x18e8>
 402325c:	010100f4 	movhi	r4,1027
 4023260:	210d8f84 	addi	r4,r4,13886
 4023264:	d9002b15 	stw	r4,172(sp)
 4023268:	070001c4 	movi	fp,7
 402326c:	dcc02c17 	ldw	r19,176(sp)
 4023270:	00000306 	br	4023280 <___vfprintf_internal_r+0x1298>
 4023274:	42000204 	addi	r8,r8,8
 4023278:	8c7ffc04 	addi	r17,r17,-16
 402327c:	b441970e 	bge	r22,r17,40238dc <___vfprintf_internal_r+0x18f4>
 4023280:	18c00404 	addi	r3,r3,16
 4023284:	10800044 	addi	r2,r2,1
 4023288:	45000015 	stw	r20,0(r8)
 402328c:	45800115 	stw	r22,4(r8)
 4023290:	d8c02015 	stw	r3,128(sp)
 4023294:	d8801f15 	stw	r2,124(sp)
 4023298:	e0bff60e 	bge	fp,r2,4023274 <__alt_data_end+0xfffe3274>
 402329c:	d9801e04 	addi	r6,sp,120
 40232a0:	b80b883a 	mov	r5,r23
 40232a4:	9809883a 	mov	r4,r19
 40232a8:	4028b000 	call	4028b00 <__sprint_r>
 40232ac:	103c501e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40232b0:	d8c02017 	ldw	r3,128(sp)
 40232b4:	d8801f17 	ldw	r2,124(sp)
 40232b8:	da000404 	addi	r8,sp,16
 40232bc:	003fee06 	br	4023278 <__alt_data_end+0xfffe3278>
 40232c0:	d9002c17 	ldw	r4,176(sp)
 40232c4:	d9801e04 	addi	r6,sp,120
 40232c8:	b80b883a 	mov	r5,r23
 40232cc:	4028b000 	call	4028b00 <__sprint_r>
 40232d0:	103c471e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40232d4:	d8c02017 	ldw	r3,128(sp)
 40232d8:	df002787 	ldb	fp,158(sp)
 40232dc:	da000404 	addi	r8,sp,16
 40232e0:	003d5606 	br	402283c <__alt_data_end+0xfffe283c>
 40232e4:	9080040c 	andi	r2,r18,16
 40232e8:	10016126 	beq	r2,zero,4023870 <___vfprintf_internal_r+0x1888>
 40232ec:	d8802d17 	ldw	r2,180(sp)
 40232f0:	14c00017 	ldw	r19,0(r2)
 40232f4:	10800104 	addi	r2,r2,4
 40232f8:	d8802d15 	stw	r2,180(sp)
 40232fc:	982dd7fa 	srai	r22,r19,31
 4023300:	b005883a 	mov	r2,r22
 4023304:	003c8206 	br	4022510 <__alt_data_end+0xfffe2510>
 4023308:	9080040c 	andi	r2,r18,16
 402330c:	10003526 	beq	r2,zero,40233e4 <___vfprintf_internal_r+0x13fc>
 4023310:	d9402d17 	ldw	r5,180(sp)
 4023314:	d8c02917 	ldw	r3,164(sp)
 4023318:	d8002785 	stb	zero,158(sp)
 402331c:	28800104 	addi	r2,r5,4
 4023320:	2cc00017 	ldw	r19,0(r5)
 4023324:	002d883a 	mov	r22,zero
 4023328:	18003716 	blt	r3,zero,4023408 <___vfprintf_internal_r+0x1420>
 402332c:	00ffdfc4 	movi	r3,-129
 4023330:	d8802d15 	stw	r2,180(sp)
 4023334:	90e4703a 	and	r18,r18,r3
 4023338:	0039883a 	mov	fp,zero
 402333c:	983df326 	beq	r19,zero,4022b0c <__alt_data_end+0xfffe2b0c>
 4023340:	00800244 	movi	r2,9
 4023344:	14fc7b36 	bltu	r2,r19,4022534 <__alt_data_end+0xfffe2534>
 4023348:	d8c02817 	ldw	r3,160(sp)
 402334c:	dc001dc4 	addi	r16,sp,119
 4023350:	9cc00c04 	addi	r19,r19,48
 4023354:	1c07c83a 	sub	r3,r3,r16
 4023358:	dcc01dc5 	stb	r19,119(sp)
 402335c:	d8c02e15 	stw	r3,184(sp)
 4023360:	003ce806 	br	4022704 <__alt_data_end+0xfffe2704>
 4023364:	d8803317 	ldw	r2,204(sp)
 4023368:	143fffc4 	addi	r16,r2,-1
 402336c:	043f4d0e 	bge	zero,r16,40230a4 <__alt_data_end+0xfffe30a4>
 4023370:	07000404 	movi	fp,16
 4023374:	e400810e 	bge	fp,r16,402357c <___vfprintf_internal_r+0x1594>
 4023378:	014100f4 	movhi	r5,1027
 402337c:	294d8f84 	addi	r5,r5,13886
 4023380:	d9402b15 	stw	r5,172(sp)
 4023384:	01c001c4 	movi	r7,7
 4023388:	dcc02c17 	ldw	r19,176(sp)
 402338c:	00000306 	br	402339c <___vfprintf_internal_r+0x13b4>
 4023390:	b5800204 	addi	r22,r22,8
 4023394:	843ffc04 	addi	r16,r16,-16
 4023398:	e4007b0e 	bge	fp,r16,4023588 <___vfprintf_internal_r+0x15a0>
 402339c:	18c00404 	addi	r3,r3,16
 40233a0:	8c400044 	addi	r17,r17,1
 40233a4:	b5000015 	stw	r20,0(r22)
 40233a8:	b7000115 	stw	fp,4(r22)
 40233ac:	d8c02015 	stw	r3,128(sp)
 40233b0:	dc401f15 	stw	r17,124(sp)
 40233b4:	3c7ff60e 	bge	r7,r17,4023390 <__alt_data_end+0xfffe3390>
 40233b8:	d9801e04 	addi	r6,sp,120
 40233bc:	b80b883a 	mov	r5,r23
 40233c0:	9809883a 	mov	r4,r19
 40233c4:	d9c03c15 	stw	r7,240(sp)
 40233c8:	4028b000 	call	4028b00 <__sprint_r>
 40233cc:	d9c03c17 	ldw	r7,240(sp)
 40233d0:	103c071e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40233d4:	d8c02017 	ldw	r3,128(sp)
 40233d8:	dc401f17 	ldw	r17,124(sp)
 40233dc:	dd800404 	addi	r22,sp,16
 40233e0:	003fec06 	br	4023394 <__alt_data_end+0xfffe3394>
 40233e4:	9080100c 	andi	r2,r18,64
 40233e8:	d8002785 	stb	zero,158(sp)
 40233ec:	10010e26 	beq	r2,zero,4023828 <___vfprintf_internal_r+0x1840>
 40233f0:	d9002d17 	ldw	r4,180(sp)
 40233f4:	d9402917 	ldw	r5,164(sp)
 40233f8:	002d883a 	mov	r22,zero
 40233fc:	20800104 	addi	r2,r4,4
 4023400:	24c0000b 	ldhu	r19,0(r4)
 4023404:	283fc90e 	bge	r5,zero,402332c <__alt_data_end+0xfffe332c>
 4023408:	d8802d15 	stw	r2,180(sp)
 402340c:	0039883a 	mov	fp,zero
 4023410:	9d84b03a 	or	r2,r19,r22
 4023414:	103c461e 	bne	r2,zero,4022530 <__alt_data_end+0xfffe2530>
 4023418:	00800044 	movi	r2,1
 402341c:	003e6c06 	br	4022dd0 <__alt_data_end+0xfffe2dd0>
 4023420:	d9002c17 	ldw	r4,176(sp)
 4023424:	d9801e04 	addi	r6,sp,120
 4023428:	b80b883a 	mov	r5,r23
 402342c:	4028b000 	call	4028b00 <__sprint_r>
 4023430:	103bef1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023434:	d8c02017 	ldw	r3,128(sp)
 4023438:	da000404 	addi	r8,sp,16
 402343c:	d9003217 	ldw	r4,200(sp)
 4023440:	d8802617 	ldw	r2,152(sp)
 4023444:	d9403317 	ldw	r5,204(sp)
 4023448:	8123883a 	add	r17,r16,r4
 402344c:	11400216 	blt	r2,r5,4023458 <___vfprintf_internal_r+0x1470>
 4023450:	9100004c 	andi	r4,r18,1
 4023454:	20000d26 	beq	r4,zero,402348c <___vfprintf_internal_r+0x14a4>
 4023458:	d9003717 	ldw	r4,220(sp)
 402345c:	d9403417 	ldw	r5,208(sp)
 4023460:	1907883a 	add	r3,r3,r4
 4023464:	d9001f17 	ldw	r4,124(sp)
 4023468:	41400015 	stw	r5,0(r8)
 402346c:	d9403717 	ldw	r5,220(sp)
 4023470:	21000044 	addi	r4,r4,1
 4023474:	d8c02015 	stw	r3,128(sp)
 4023478:	41400115 	stw	r5,4(r8)
 402347c:	d9001f15 	stw	r4,124(sp)
 4023480:	014001c4 	movi	r5,7
 4023484:	2901e816 	blt	r5,r4,4023c28 <___vfprintf_internal_r+0x1c40>
 4023488:	42000204 	addi	r8,r8,8
 402348c:	d9003317 	ldw	r4,204(sp)
 4023490:	8121883a 	add	r16,r16,r4
 4023494:	2085c83a 	sub	r2,r4,r2
 4023498:	8461c83a 	sub	r16,r16,r17
 402349c:	1400010e 	bge	r2,r16,40234a4 <___vfprintf_internal_r+0x14bc>
 40234a0:	1021883a 	mov	r16,r2
 40234a4:	04000a0e 	bge	zero,r16,40234d0 <___vfprintf_internal_r+0x14e8>
 40234a8:	d9001f17 	ldw	r4,124(sp)
 40234ac:	1c07883a 	add	r3,r3,r16
 40234b0:	44400015 	stw	r17,0(r8)
 40234b4:	21000044 	addi	r4,r4,1
 40234b8:	44000115 	stw	r16,4(r8)
 40234bc:	d8c02015 	stw	r3,128(sp)
 40234c0:	d9001f15 	stw	r4,124(sp)
 40234c4:	014001c4 	movi	r5,7
 40234c8:	2901fb16 	blt	r5,r4,4023cb8 <___vfprintf_internal_r+0x1cd0>
 40234cc:	42000204 	addi	r8,r8,8
 40234d0:	8001f716 	blt	r16,zero,4023cb0 <___vfprintf_internal_r+0x1cc8>
 40234d4:	1421c83a 	sub	r16,r2,r16
 40234d8:	043d380e 	bge	zero,r16,40229bc <__alt_data_end+0xfffe29bc>
 40234dc:	04400404 	movi	r17,16
 40234e0:	d8801f17 	ldw	r2,124(sp)
 40234e4:	8c3efb0e 	bge	r17,r16,40230d4 <__alt_data_end+0xfffe30d4>
 40234e8:	014100f4 	movhi	r5,1027
 40234ec:	294d8f84 	addi	r5,r5,13886
 40234f0:	d9402b15 	stw	r5,172(sp)
 40234f4:	058001c4 	movi	r22,7
 40234f8:	dcc02c17 	ldw	r19,176(sp)
 40234fc:	00000306 	br	402350c <___vfprintf_internal_r+0x1524>
 4023500:	42000204 	addi	r8,r8,8
 4023504:	843ffc04 	addi	r16,r16,-16
 4023508:	8c3ef50e 	bge	r17,r16,40230e0 <__alt_data_end+0xfffe30e0>
 402350c:	18c00404 	addi	r3,r3,16
 4023510:	10800044 	addi	r2,r2,1
 4023514:	45000015 	stw	r20,0(r8)
 4023518:	44400115 	stw	r17,4(r8)
 402351c:	d8c02015 	stw	r3,128(sp)
 4023520:	d8801f15 	stw	r2,124(sp)
 4023524:	b0bff60e 	bge	r22,r2,4023500 <__alt_data_end+0xfffe3500>
 4023528:	d9801e04 	addi	r6,sp,120
 402352c:	b80b883a 	mov	r5,r23
 4023530:	9809883a 	mov	r4,r19
 4023534:	4028b000 	call	4028b00 <__sprint_r>
 4023538:	103bad1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 402353c:	d8c02017 	ldw	r3,128(sp)
 4023540:	d8801f17 	ldw	r2,124(sp)
 4023544:	da000404 	addi	r8,sp,16
 4023548:	003fee06 	br	4023504 <__alt_data_end+0xfffe3504>
 402354c:	9088703a 	and	r4,r18,r2
 4023550:	203eab1e 	bne	r4,zero,4023000 <__alt_data_end+0xfffe3000>
 4023554:	dc401f17 	ldw	r17,124(sp)
 4023558:	40800115 	stw	r2,4(r8)
 402355c:	44000015 	stw	r16,0(r8)
 4023560:	8c400044 	addi	r17,r17,1
 4023564:	d8c02015 	stw	r3,128(sp)
 4023568:	dc401f15 	stw	r17,124(sp)
 402356c:	008001c4 	movi	r2,7
 4023570:	14400e16 	blt	r2,r17,40235ac <___vfprintf_internal_r+0x15c4>
 4023574:	45800204 	addi	r22,r8,8
 4023578:	003eca06 	br	40230a4 <__alt_data_end+0xfffe30a4>
 402357c:	010100f4 	movhi	r4,1027
 4023580:	210d8f84 	addi	r4,r4,13886
 4023584:	d9002b15 	stw	r4,172(sp)
 4023588:	d8802b17 	ldw	r2,172(sp)
 402358c:	1c07883a 	add	r3,r3,r16
 4023590:	8c400044 	addi	r17,r17,1
 4023594:	b0800015 	stw	r2,0(r22)
 4023598:	b4000115 	stw	r16,4(r22)
 402359c:	d8c02015 	stw	r3,128(sp)
 40235a0:	dc401f15 	stw	r17,124(sp)
 40235a4:	008001c4 	movi	r2,7
 40235a8:	147ebd0e 	bge	r2,r17,40230a0 <__alt_data_end+0xfffe30a0>
 40235ac:	d9002c17 	ldw	r4,176(sp)
 40235b0:	d9801e04 	addi	r6,sp,120
 40235b4:	b80b883a 	mov	r5,r23
 40235b8:	4028b000 	call	4028b00 <__sprint_r>
 40235bc:	103b8c1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40235c0:	d8c02017 	ldw	r3,128(sp)
 40235c4:	dc401f17 	ldw	r17,124(sp)
 40235c8:	dd800404 	addi	r22,sp,16
 40235cc:	003eb506 	br	40230a4 <__alt_data_end+0xfffe30a4>
 40235d0:	d9002c17 	ldw	r4,176(sp)
 40235d4:	d9801e04 	addi	r6,sp,120
 40235d8:	b80b883a 	mov	r5,r23
 40235dc:	4028b000 	call	4028b00 <__sprint_r>
 40235e0:	103b831e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 40235e4:	d8c02017 	ldw	r3,128(sp)
 40235e8:	dc401f17 	ldw	r17,124(sp)
 40235ec:	da000404 	addi	r8,sp,16
 40235f0:	003e8d06 	br	4023028 <__alt_data_end+0xfffe3028>
 40235f4:	d9002c17 	ldw	r4,176(sp)
 40235f8:	d9801e04 	addi	r6,sp,120
 40235fc:	b80b883a 	mov	r5,r23
 4023600:	4028b000 	call	4028b00 <__sprint_r>
 4023604:	103b7a1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023608:	d8c02017 	ldw	r3,128(sp)
 402360c:	dc401f17 	ldw	r17,124(sp)
 4023610:	dd800404 	addi	r22,sp,16
 4023614:	003e8f06 	br	4023054 <__alt_data_end+0xfffe3054>
 4023618:	0027883a 	mov	r19,zero
 402361c:	003f4a06 	br	4023348 <__alt_data_end+0xfffe3348>
 4023620:	d9002c17 	ldw	r4,176(sp)
 4023624:	d9801e04 	addi	r6,sp,120
 4023628:	b80b883a 	mov	r5,r23
 402362c:	4028b000 	call	4028b00 <__sprint_r>
 4023630:	103b6f1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023634:	d8c02017 	ldw	r3,128(sp)
 4023638:	da000404 	addi	r8,sp,16
 402363c:	003c9d06 	br	40228b4 <__alt_data_end+0xfffe28b4>
 4023640:	04e7c83a 	sub	r19,zero,r19
 4023644:	9804c03a 	cmpne	r2,r19,zero
 4023648:	05adc83a 	sub	r22,zero,r22
 402364c:	b0adc83a 	sub	r22,r22,r2
 4023650:	d8802917 	ldw	r2,164(sp)
 4023654:	07000b44 	movi	fp,45
 4023658:	df002785 	stb	fp,158(sp)
 402365c:	10017b16 	blt	r2,zero,4023c4c <___vfprintf_internal_r+0x1c64>
 4023660:	00bfdfc4 	movi	r2,-129
 4023664:	90a4703a 	and	r18,r18,r2
 4023668:	003bb106 	br	4022530 <__alt_data_end+0xfffe2530>
 402366c:	d9003617 	ldw	r4,216(sp)
 4023670:	d9403817 	ldw	r5,224(sp)
 4023674:	da003d15 	stw	r8,244(sp)
 4023678:	402868c0 	call	402868c <__fpclassifyd>
 402367c:	da003d17 	ldw	r8,244(sp)
 4023680:	1000f026 	beq	r2,zero,4023a44 <___vfprintf_internal_r+0x1a5c>
 4023684:	d9002917 	ldw	r4,164(sp)
 4023688:	05bff7c4 	movi	r22,-33
 402368c:	00bfffc4 	movi	r2,-1
 4023690:	8dac703a 	and	r22,r17,r22
 4023694:	20820026 	beq	r4,r2,4023e98 <___vfprintf_internal_r+0x1eb0>
 4023698:	008011c4 	movi	r2,71
 402369c:	b081f726 	beq	r22,r2,4023e7c <___vfprintf_internal_r+0x1e94>
 40236a0:	d9003817 	ldw	r4,224(sp)
 40236a4:	90c04014 	ori	r3,r18,256
 40236a8:	d8c02b15 	stw	r3,172(sp)
 40236ac:	20021516 	blt	r4,zero,4023f04 <___vfprintf_internal_r+0x1f1c>
 40236b0:	dcc03817 	ldw	r19,224(sp)
 40236b4:	d8002a05 	stb	zero,168(sp)
 40236b8:	00801984 	movi	r2,102
 40236bc:	8881f926 	beq	r17,r2,4023ea4 <___vfprintf_internal_r+0x1ebc>
 40236c0:	00801184 	movi	r2,70
 40236c4:	88821c26 	beq	r17,r2,4023f38 <___vfprintf_internal_r+0x1f50>
 40236c8:	00801144 	movi	r2,69
 40236cc:	b081ef26 	beq	r22,r2,4023e8c <___vfprintf_internal_r+0x1ea4>
 40236d0:	d8c02917 	ldw	r3,164(sp)
 40236d4:	d8802104 	addi	r2,sp,132
 40236d8:	d8800315 	stw	r2,12(sp)
 40236dc:	d9403617 	ldw	r5,216(sp)
 40236e0:	d8802504 	addi	r2,sp,148
 40236e4:	d9002c17 	ldw	r4,176(sp)
 40236e8:	d8800215 	stw	r2,8(sp)
 40236ec:	d8802604 	addi	r2,sp,152
 40236f0:	d8c00015 	stw	r3,0(sp)
 40236f4:	d8800115 	stw	r2,4(sp)
 40236f8:	01c00084 	movi	r7,2
 40236fc:	980d883a 	mov	r6,r19
 4023700:	d8c03c15 	stw	r3,240(sp)
 4023704:	da003d15 	stw	r8,244(sp)
 4023708:	402460c0 	call	402460c <_dtoa_r>
 402370c:	1021883a 	mov	r16,r2
 4023710:	008019c4 	movi	r2,103
 4023714:	d8c03c17 	ldw	r3,240(sp)
 4023718:	da003d17 	ldw	r8,244(sp)
 402371c:	88817126 	beq	r17,r2,4023ce4 <___vfprintf_internal_r+0x1cfc>
 4023720:	008011c4 	movi	r2,71
 4023724:	88829226 	beq	r17,r2,4024170 <___vfprintf_internal_r+0x2188>
 4023728:	80f9883a 	add	fp,r16,r3
 402372c:	d9003617 	ldw	r4,216(sp)
 4023730:	000d883a 	mov	r6,zero
 4023734:	000f883a 	mov	r7,zero
 4023738:	980b883a 	mov	r5,r19
 402373c:	da003d15 	stw	r8,244(sp)
 4023740:	402d2f40 	call	402d2f4 <__eqdf2>
 4023744:	da003d17 	ldw	r8,244(sp)
 4023748:	10018d26 	beq	r2,zero,4023d80 <___vfprintf_internal_r+0x1d98>
 402374c:	d8802117 	ldw	r2,132(sp)
 4023750:	1700062e 	bgeu	r2,fp,402376c <___vfprintf_internal_r+0x1784>
 4023754:	01000c04 	movi	r4,48
 4023758:	10c00044 	addi	r3,r2,1
 402375c:	d8c02115 	stw	r3,132(sp)
 4023760:	11000005 	stb	r4,0(r2)
 4023764:	d8802117 	ldw	r2,132(sp)
 4023768:	173ffb36 	bltu	r2,fp,4023758 <__alt_data_end+0xfffe3758>
 402376c:	1405c83a 	sub	r2,r2,r16
 4023770:	d8803315 	stw	r2,204(sp)
 4023774:	008011c4 	movi	r2,71
 4023778:	b0817626 	beq	r22,r2,4023d54 <___vfprintf_internal_r+0x1d6c>
 402377c:	00801944 	movi	r2,101
 4023780:	1442810e 	bge	r2,r17,4024188 <___vfprintf_internal_r+0x21a0>
 4023784:	d8c02617 	ldw	r3,152(sp)
 4023788:	00801984 	movi	r2,102
 402378c:	d8c03215 	stw	r3,200(sp)
 4023790:	8881fe26 	beq	r17,r2,4023f8c <___vfprintf_internal_r+0x1fa4>
 4023794:	d8c03217 	ldw	r3,200(sp)
 4023798:	d9003317 	ldw	r4,204(sp)
 402379c:	1901dd16 	blt	r3,r4,4023f14 <___vfprintf_internal_r+0x1f2c>
 40237a0:	9480004c 	andi	r18,r18,1
 40237a4:	90022b1e 	bne	r18,zero,4024054 <___vfprintf_internal_r+0x206c>
 40237a8:	1805883a 	mov	r2,r3
 40237ac:	18028016 	blt	r3,zero,40241b0 <___vfprintf_internal_r+0x21c8>
 40237b0:	d8c03217 	ldw	r3,200(sp)
 40237b4:	044019c4 	movi	r17,103
 40237b8:	d8c02e15 	stw	r3,184(sp)
 40237bc:	df002a07 	ldb	fp,168(sp)
 40237c0:	e001531e 	bne	fp,zero,4023d10 <___vfprintf_internal_r+0x1d28>
 40237c4:	df002783 	ldbu	fp,158(sp)
 40237c8:	d8802a15 	stw	r2,168(sp)
 40237cc:	dc802b17 	ldw	r18,172(sp)
 40237d0:	d8002915 	stw	zero,164(sp)
 40237d4:	003bd106 	br	402271c <__alt_data_end+0xfffe271c>
 40237d8:	d8802d17 	ldw	r2,180(sp)
 40237dc:	d8c02d17 	ldw	r3,180(sp)
 40237e0:	d9002d17 	ldw	r4,180(sp)
 40237e4:	10800017 	ldw	r2,0(r2)
 40237e8:	18c00117 	ldw	r3,4(r3)
 40237ec:	21000204 	addi	r4,r4,8
 40237f0:	d8803615 	stw	r2,216(sp)
 40237f4:	d8c03815 	stw	r3,224(sp)
 40237f8:	d9002d15 	stw	r4,180(sp)
 40237fc:	003b7506 	br	40225d4 <__alt_data_end+0xfffe25d4>
 4023800:	ac400007 	ldb	r17,0(r21)
 4023804:	003a5906 	br	402216c <__alt_data_end+0xfffe216c>
 4023808:	9080100c 	andi	r2,r18,64
 402380c:	1000a826 	beq	r2,zero,4023ab0 <___vfprintf_internal_r+0x1ac8>
 4023810:	d9002d17 	ldw	r4,180(sp)
 4023814:	002d883a 	mov	r22,zero
 4023818:	24c0000b 	ldhu	r19,0(r4)
 402381c:	21000104 	addi	r4,r4,4
 4023820:	d9002d15 	stw	r4,180(sp)
 4023824:	003ccb06 	br	4022b54 <__alt_data_end+0xfffe2b54>
 4023828:	d8c02d17 	ldw	r3,180(sp)
 402382c:	d9002917 	ldw	r4,164(sp)
 4023830:	002d883a 	mov	r22,zero
 4023834:	18800104 	addi	r2,r3,4
 4023838:	1cc00017 	ldw	r19,0(r3)
 402383c:	203ebb0e 	bge	r4,zero,402332c <__alt_data_end+0xfffe332c>
 4023840:	003ef106 	br	4023408 <__alt_data_end+0xfffe3408>
 4023844:	9080040c 	andi	r2,r18,16
 4023848:	1000921e 	bne	r2,zero,4023a94 <___vfprintf_internal_r+0x1aac>
 402384c:	9480100c 	andi	r18,r18,64
 4023850:	90013926 	beq	r18,zero,4023d38 <___vfprintf_internal_r+0x1d50>
 4023854:	d9002d17 	ldw	r4,180(sp)
 4023858:	d9402f17 	ldw	r5,188(sp)
 402385c:	20800017 	ldw	r2,0(r4)
 4023860:	21000104 	addi	r4,r4,4
 4023864:	d9002d15 	stw	r4,180(sp)
 4023868:	1140000d 	sth	r5,0(r2)
 402386c:	003a1606 	br	40220c8 <__alt_data_end+0xfffe20c8>
 4023870:	9080100c 	andi	r2,r18,64
 4023874:	10008026 	beq	r2,zero,4023a78 <___vfprintf_internal_r+0x1a90>
 4023878:	d8c02d17 	ldw	r3,180(sp)
 402387c:	1cc0000f 	ldh	r19,0(r3)
 4023880:	18c00104 	addi	r3,r3,4
 4023884:	d8c02d15 	stw	r3,180(sp)
 4023888:	982dd7fa 	srai	r22,r19,31
 402388c:	b005883a 	mov	r2,r22
 4023890:	003b1f06 	br	4022510 <__alt_data_end+0xfffe2510>
 4023894:	9080100c 	andi	r2,r18,64
 4023898:	d8002785 	stb	zero,158(sp)
 402389c:	10008a1e 	bne	r2,zero,4023ac8 <___vfprintf_internal_r+0x1ae0>
 40238a0:	d9402d17 	ldw	r5,180(sp)
 40238a4:	d8c02917 	ldw	r3,164(sp)
 40238a8:	002d883a 	mov	r22,zero
 40238ac:	28800104 	addi	r2,r5,4
 40238b0:	2cc00017 	ldw	r19,0(r5)
 40238b4:	183e4b0e 	bge	r3,zero,40231e4 <__alt_data_end+0xfffe31e4>
 40238b8:	9d86b03a 	or	r3,r19,r22
 40238bc:	d8802d15 	stw	r2,180(sp)
 40238c0:	183e4c1e 	bne	r3,zero,40231f4 <__alt_data_end+0xfffe31f4>
 40238c4:	0039883a 	mov	fp,zero
 40238c8:	0005883a 	mov	r2,zero
 40238cc:	003d4006 	br	4022dd0 <__alt_data_end+0xfffe2dd0>
 40238d0:	014100f4 	movhi	r5,1027
 40238d4:	294d8f84 	addi	r5,r5,13886
 40238d8:	d9402b15 	stw	r5,172(sp)
 40238dc:	d9402b17 	ldw	r5,172(sp)
 40238e0:	1c47883a 	add	r3,r3,r17
 40238e4:	10800044 	addi	r2,r2,1
 40238e8:	41400015 	stw	r5,0(r8)
 40238ec:	44400115 	stw	r17,4(r8)
 40238f0:	d8c02015 	stw	r3,128(sp)
 40238f4:	d8801f15 	stw	r2,124(sp)
 40238f8:	010001c4 	movi	r4,7
 40238fc:	20bec816 	blt	r4,r2,4023420 <__alt_data_end+0xfffe3420>
 4023900:	42000204 	addi	r8,r8,8
 4023904:	003ecd06 	br	402343c <__alt_data_end+0xfffe343c>
 4023908:	d9002917 	ldw	r4,164(sp)
 402390c:	d8002785 	stb	zero,158(sp)
 4023910:	203d2d16 	blt	r4,zero,4022dc8 <__alt_data_end+0xfffe2dc8>
 4023914:	00bfdfc4 	movi	r2,-129
 4023918:	90a4703a 	and	r18,r18,r2
 402391c:	003a9106 	br	4022364 <__alt_data_end+0xfffe2364>
 4023920:	010100f4 	movhi	r4,1027
 4023924:	210d8f84 	addi	r4,r4,13886
 4023928:	d9002b15 	stw	r4,172(sp)
 402392c:	003c0c06 	br	4022960 <__alt_data_end+0xfffe2960>
 4023930:	d9002c17 	ldw	r4,176(sp)
 4023934:	d9801e04 	addi	r6,sp,120
 4023938:	b80b883a 	mov	r5,r23
 402393c:	4028b000 	call	4028b00 <__sprint_r>
 4023940:	103aab1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023944:	d8c02017 	ldw	r3,128(sp)
 4023948:	da000404 	addi	r8,sp,16
 402394c:	003d4106 	br	4022e54 <__alt_data_end+0xfffe2e54>
 4023950:	d8801f17 	ldw	r2,124(sp)
 4023954:	014100f4 	movhi	r5,1027
 4023958:	01000044 	movi	r4,1
 402395c:	18c00044 	addi	r3,r3,1
 4023960:	10800044 	addi	r2,r2,1
 4023964:	294d8f04 	addi	r5,r5,13884
 4023968:	41000115 	stw	r4,4(r8)
 402396c:	41400015 	stw	r5,0(r8)
 4023970:	d8c02015 	stw	r3,128(sp)
 4023974:	d8801f15 	stw	r2,124(sp)
 4023978:	010001c4 	movi	r4,7
 402397c:	20805c16 	blt	r4,r2,4023af0 <___vfprintf_internal_r+0x1b08>
 4023980:	42000204 	addi	r8,r8,8
 4023984:	8800041e 	bne	r17,zero,4023998 <___vfprintf_internal_r+0x19b0>
 4023988:	d8803317 	ldw	r2,204(sp)
 402398c:	1000021e 	bne	r2,zero,4023998 <___vfprintf_internal_r+0x19b0>
 4023990:	9080004c 	andi	r2,r18,1
 4023994:	103c0926 	beq	r2,zero,40229bc <__alt_data_end+0xfffe29bc>
 4023998:	d9003717 	ldw	r4,220(sp)
 402399c:	d8801f17 	ldw	r2,124(sp)
 40239a0:	d9403417 	ldw	r5,208(sp)
 40239a4:	20c7883a 	add	r3,r4,r3
 40239a8:	10800044 	addi	r2,r2,1
 40239ac:	41000115 	stw	r4,4(r8)
 40239b0:	41400015 	stw	r5,0(r8)
 40239b4:	d8c02015 	stw	r3,128(sp)
 40239b8:	d8801f15 	stw	r2,124(sp)
 40239bc:	010001c4 	movi	r4,7
 40239c0:	20812116 	blt	r4,r2,4023e48 <___vfprintf_internal_r+0x1e60>
 40239c4:	42000204 	addi	r8,r8,8
 40239c8:	0463c83a 	sub	r17,zero,r17
 40239cc:	0440730e 	bge	zero,r17,4023b9c <___vfprintf_internal_r+0x1bb4>
 40239d0:	05800404 	movi	r22,16
 40239d4:	b440860e 	bge	r22,r17,4023bf0 <___vfprintf_internal_r+0x1c08>
 40239d8:	014100f4 	movhi	r5,1027
 40239dc:	294d8f84 	addi	r5,r5,13886
 40239e0:	d9402b15 	stw	r5,172(sp)
 40239e4:	070001c4 	movi	fp,7
 40239e8:	dcc02c17 	ldw	r19,176(sp)
 40239ec:	00000306 	br	40239fc <___vfprintf_internal_r+0x1a14>
 40239f0:	42000204 	addi	r8,r8,8
 40239f4:	8c7ffc04 	addi	r17,r17,-16
 40239f8:	b440800e 	bge	r22,r17,4023bfc <___vfprintf_internal_r+0x1c14>
 40239fc:	18c00404 	addi	r3,r3,16
 4023a00:	10800044 	addi	r2,r2,1
 4023a04:	45000015 	stw	r20,0(r8)
 4023a08:	45800115 	stw	r22,4(r8)
 4023a0c:	d8c02015 	stw	r3,128(sp)
 4023a10:	d8801f15 	stw	r2,124(sp)
 4023a14:	e0bff60e 	bge	fp,r2,40239f0 <__alt_data_end+0xfffe39f0>
 4023a18:	d9801e04 	addi	r6,sp,120
 4023a1c:	b80b883a 	mov	r5,r23
 4023a20:	9809883a 	mov	r4,r19
 4023a24:	4028b000 	call	4028b00 <__sprint_r>
 4023a28:	103a711e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023a2c:	d8c02017 	ldw	r3,128(sp)
 4023a30:	d8801f17 	ldw	r2,124(sp)
 4023a34:	da000404 	addi	r8,sp,16
 4023a38:	003fee06 	br	40239f4 <__alt_data_end+0xfffe39f4>
 4023a3c:	00bfffc4 	movi	r2,-1
 4023a40:	003a6f06 	br	4022400 <__alt_data_end+0xfffe2400>
 4023a44:	008011c4 	movi	r2,71
 4023a48:	1440b816 	blt	r2,r17,4023d2c <___vfprintf_internal_r+0x1d44>
 4023a4c:	040100f4 	movhi	r16,1027
 4023a50:	840d8104 	addi	r16,r16,13828
 4023a54:	00c000c4 	movi	r3,3
 4023a58:	00bfdfc4 	movi	r2,-129
 4023a5c:	d8c02a15 	stw	r3,168(sp)
 4023a60:	90a4703a 	and	r18,r18,r2
 4023a64:	df002783 	ldbu	fp,158(sp)
 4023a68:	d8c02e15 	stw	r3,184(sp)
 4023a6c:	d8002915 	stw	zero,164(sp)
 4023a70:	d8003215 	stw	zero,200(sp)
 4023a74:	003b2906 	br	402271c <__alt_data_end+0xfffe271c>
 4023a78:	d9002d17 	ldw	r4,180(sp)
 4023a7c:	24c00017 	ldw	r19,0(r4)
 4023a80:	21000104 	addi	r4,r4,4
 4023a84:	d9002d15 	stw	r4,180(sp)
 4023a88:	982dd7fa 	srai	r22,r19,31
 4023a8c:	b005883a 	mov	r2,r22
 4023a90:	003a9f06 	br	4022510 <__alt_data_end+0xfffe2510>
 4023a94:	d9402d17 	ldw	r5,180(sp)
 4023a98:	d8c02f17 	ldw	r3,188(sp)
 4023a9c:	28800017 	ldw	r2,0(r5)
 4023aa0:	29400104 	addi	r5,r5,4
 4023aa4:	d9402d15 	stw	r5,180(sp)
 4023aa8:	10c00015 	stw	r3,0(r2)
 4023aac:	00398606 	br	40220c8 <__alt_data_end+0xfffe20c8>
 4023ab0:	d9402d17 	ldw	r5,180(sp)
 4023ab4:	002d883a 	mov	r22,zero
 4023ab8:	2cc00017 	ldw	r19,0(r5)
 4023abc:	29400104 	addi	r5,r5,4
 4023ac0:	d9402d15 	stw	r5,180(sp)
 4023ac4:	003c2306 	br	4022b54 <__alt_data_end+0xfffe2b54>
 4023ac8:	d8c02d17 	ldw	r3,180(sp)
 4023acc:	d9002917 	ldw	r4,164(sp)
 4023ad0:	002d883a 	mov	r22,zero
 4023ad4:	18800104 	addi	r2,r3,4
 4023ad8:	1cc0000b 	ldhu	r19,0(r3)
 4023adc:	203dc10e 	bge	r4,zero,40231e4 <__alt_data_end+0xfffe31e4>
 4023ae0:	003f7506 	br	40238b8 <__alt_data_end+0xfffe38b8>
 4023ae4:	040100f4 	movhi	r16,1027
 4023ae8:	840d7f04 	addi	r16,r16,13820
 4023aec:	003acc06 	br	4022620 <__alt_data_end+0xfffe2620>
 4023af0:	d9002c17 	ldw	r4,176(sp)
 4023af4:	d9801e04 	addi	r6,sp,120
 4023af8:	b80b883a 	mov	r5,r23
 4023afc:	4028b000 	call	4028b00 <__sprint_r>
 4023b00:	103a3b1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023b04:	dc402617 	ldw	r17,152(sp)
 4023b08:	d8c02017 	ldw	r3,128(sp)
 4023b0c:	da000404 	addi	r8,sp,16
 4023b10:	003f9c06 	br	4023984 <__alt_data_end+0xfffe3984>
 4023b14:	ac400043 	ldbu	r17,1(r21)
 4023b18:	94800814 	ori	r18,r18,32
 4023b1c:	ad400044 	addi	r21,r21,1
 4023b20:	8c403fcc 	andi	r17,r17,255
 4023b24:	8c40201c 	xori	r17,r17,128
 4023b28:	8c7fe004 	addi	r17,r17,-128
 4023b2c:	00398f06 	br	402216c <__alt_data_end+0xfffe216c>
 4023b30:	d8c02d15 	stw	r3,180(sp)
 4023b34:	0039883a 	mov	fp,zero
 4023b38:	003e3506 	br	4023410 <__alt_data_end+0xfffe3410>
 4023b3c:	d9002c17 	ldw	r4,176(sp)
 4023b40:	d9801e04 	addi	r6,sp,120
 4023b44:	b80b883a 	mov	r5,r23
 4023b48:	4028b000 	call	4028b00 <__sprint_r>
 4023b4c:	103a281e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023b50:	d8c02017 	ldw	r3,128(sp)
 4023b54:	da000404 	addi	r8,sp,16
 4023b58:	003cd006 	br	4022e9c <__alt_data_end+0xfffe2e9c>
 4023b5c:	8009883a 	mov	r4,r16
 4023b60:	da003d15 	stw	r8,244(sp)
 4023b64:	402896c0 	call	402896c <strlen>
 4023b68:	d8802e15 	stw	r2,184(sp)
 4023b6c:	da003d17 	ldw	r8,244(sp)
 4023b70:	103c340e 	bge	r2,zero,4022c44 <__alt_data_end+0xfffe2c44>
 4023b74:	0005883a 	mov	r2,zero
 4023b78:	003c3206 	br	4022c44 <__alt_data_end+0xfffe2c44>
 4023b7c:	d9002c17 	ldw	r4,176(sp)
 4023b80:	d9801e04 	addi	r6,sp,120
 4023b84:	b80b883a 	mov	r5,r23
 4023b88:	4028b000 	call	4028b00 <__sprint_r>
 4023b8c:	103a181e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023b90:	d8c02017 	ldw	r3,128(sp)
 4023b94:	d8801f17 	ldw	r2,124(sp)
 4023b98:	da000404 	addi	r8,sp,16
 4023b9c:	d9403317 	ldw	r5,204(sp)
 4023ba0:	10800044 	addi	r2,r2,1
 4023ba4:	44000015 	stw	r16,0(r8)
 4023ba8:	28c7883a 	add	r3,r5,r3
 4023bac:	003b7d06 	br	40229a4 <__alt_data_end+0xfffe29a4>
 4023bb0:	010100f4 	movhi	r4,1027
 4023bb4:	210d9384 	addi	r4,r4,13902
 4023bb8:	d9003515 	stw	r4,212(sp)
 4023bbc:	003b1406 	br	4022810 <__alt_data_end+0xfffe2810>
 4023bc0:	013fffc4 	movi	r4,-1
 4023bc4:	003a3506 	br	402249c <__alt_data_end+0xfffe249c>
 4023bc8:	0023883a 	mov	r17,zero
 4023bcc:	003d9d06 	br	4023244 <__alt_data_end+0xfffe3244>
 4023bd0:	d9002c17 	ldw	r4,176(sp)
 4023bd4:	d9801e04 	addi	r6,sp,120
 4023bd8:	b80b883a 	mov	r5,r23
 4023bdc:	4028b000 	call	4028b00 <__sprint_r>
 4023be0:	103a031e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023be4:	d8c02017 	ldw	r3,128(sp)
 4023be8:	da000404 	addi	r8,sp,16
 4023bec:	003d9406 	br	4023240 <__alt_data_end+0xfffe3240>
 4023bf0:	010100f4 	movhi	r4,1027
 4023bf4:	210d8f84 	addi	r4,r4,13886
 4023bf8:	d9002b15 	stw	r4,172(sp)
 4023bfc:	d9002b17 	ldw	r4,172(sp)
 4023c00:	1c47883a 	add	r3,r3,r17
 4023c04:	10800044 	addi	r2,r2,1
 4023c08:	41000015 	stw	r4,0(r8)
 4023c0c:	44400115 	stw	r17,4(r8)
 4023c10:	d8c02015 	stw	r3,128(sp)
 4023c14:	d8801f15 	stw	r2,124(sp)
 4023c18:	010001c4 	movi	r4,7
 4023c1c:	20bfd716 	blt	r4,r2,4023b7c <__alt_data_end+0xfffe3b7c>
 4023c20:	42000204 	addi	r8,r8,8
 4023c24:	003fdd06 	br	4023b9c <__alt_data_end+0xfffe3b9c>
 4023c28:	d9002c17 	ldw	r4,176(sp)
 4023c2c:	d9801e04 	addi	r6,sp,120
 4023c30:	b80b883a 	mov	r5,r23
 4023c34:	4028b000 	call	4028b00 <__sprint_r>
 4023c38:	1039ed1e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023c3c:	d8802617 	ldw	r2,152(sp)
 4023c40:	d8c02017 	ldw	r3,128(sp)
 4023c44:	da000404 	addi	r8,sp,16
 4023c48:	003e1006 	br	402348c <__alt_data_end+0xfffe348c>
 4023c4c:	00800044 	movi	r2,1
 4023c50:	10803fcc 	andi	r2,r2,255
 4023c54:	00c00044 	movi	r3,1
 4023c58:	10fa3526 	beq	r2,r3,4022530 <__alt_data_end+0xfffe2530>
 4023c5c:	00c00084 	movi	r3,2
 4023c60:	10fbcb26 	beq	r2,r3,4022b90 <__alt_data_end+0xfffe2b90>
 4023c64:	003a8f06 	br	40226a4 <__alt_data_end+0xfffe26a4>
 4023c68:	010100f4 	movhi	r4,1027
 4023c6c:	210d9384 	addi	r4,r4,13902
 4023c70:	d9003515 	stw	r4,212(sp)
 4023c74:	003b7606 	br	4022a50 <__alt_data_end+0xfffe2a50>
 4023c78:	d8802917 	ldw	r2,164(sp)
 4023c7c:	00c00184 	movi	r3,6
 4023c80:	1880012e 	bgeu	r3,r2,4023c88 <___vfprintf_internal_r+0x1ca0>
 4023c84:	1805883a 	mov	r2,r3
 4023c88:	d8802e15 	stw	r2,184(sp)
 4023c8c:	1000ef16 	blt	r2,zero,402404c <___vfprintf_internal_r+0x2064>
 4023c90:	040100f4 	movhi	r16,1027
 4023c94:	d8802a15 	stw	r2,168(sp)
 4023c98:	dcc02d15 	stw	r19,180(sp)
 4023c9c:	d8002915 	stw	zero,164(sp)
 4023ca0:	d8003215 	stw	zero,200(sp)
 4023ca4:	840d8d04 	addi	r16,r16,13876
 4023ca8:	0039883a 	mov	fp,zero
 4023cac:	003aa206 	br	4022738 <__alt_data_end+0xfffe2738>
 4023cb0:	0021883a 	mov	r16,zero
 4023cb4:	003e0706 	br	40234d4 <__alt_data_end+0xfffe34d4>
 4023cb8:	d9002c17 	ldw	r4,176(sp)
 4023cbc:	d9801e04 	addi	r6,sp,120
 4023cc0:	b80b883a 	mov	r5,r23
 4023cc4:	4028b000 	call	4028b00 <__sprint_r>
 4023cc8:	1039c91e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023ccc:	d8802617 	ldw	r2,152(sp)
 4023cd0:	d9403317 	ldw	r5,204(sp)
 4023cd4:	d8c02017 	ldw	r3,128(sp)
 4023cd8:	da000404 	addi	r8,sp,16
 4023cdc:	2885c83a 	sub	r2,r5,r2
 4023ce0:	003dfb06 	br	40234d0 <__alt_data_end+0xfffe34d0>
 4023ce4:	9080004c 	andi	r2,r18,1
 4023ce8:	103e8f1e 	bne	r2,zero,4023728 <__alt_data_end+0xfffe3728>
 4023cec:	d8802117 	ldw	r2,132(sp)
 4023cf0:	003e9e06 	br	402376c <__alt_data_end+0xfffe376c>
 4023cf4:	1025883a 	mov	r18,r2
 4023cf8:	0039883a 	mov	fp,zero
 4023cfc:	00800084 	movi	r2,2
 4023d00:	003fd306 	br	4023c50 <__alt_data_end+0xfffe3c50>
 4023d04:	07000b44 	movi	fp,45
 4023d08:	df002785 	stb	fp,158(sp)
 4023d0c:	003a4006 	br	4022610 <__alt_data_end+0xfffe2610>
 4023d10:	00c00b44 	movi	r3,45
 4023d14:	d8c02785 	stb	r3,158(sp)
 4023d18:	d8802a15 	stw	r2,168(sp)
 4023d1c:	dc802b17 	ldw	r18,172(sp)
 4023d20:	d8002915 	stw	zero,164(sp)
 4023d24:	07000b44 	movi	fp,45
 4023d28:	003a8006 	br	402272c <__alt_data_end+0xfffe272c>
 4023d2c:	040100f4 	movhi	r16,1027
 4023d30:	840d8204 	addi	r16,r16,13832
 4023d34:	003f4706 	br	4023a54 <__alt_data_end+0xfffe3a54>
 4023d38:	d8c02d17 	ldw	r3,180(sp)
 4023d3c:	d9002f17 	ldw	r4,188(sp)
 4023d40:	18800017 	ldw	r2,0(r3)
 4023d44:	18c00104 	addi	r3,r3,4
 4023d48:	d8c02d15 	stw	r3,180(sp)
 4023d4c:	11000015 	stw	r4,0(r2)
 4023d50:	0038dd06 	br	40220c8 <__alt_data_end+0xfffe20c8>
 4023d54:	dd802617 	ldw	r22,152(sp)
 4023d58:	00bfff44 	movi	r2,-3
 4023d5c:	b0801c16 	blt	r22,r2,4023dd0 <___vfprintf_internal_r+0x1de8>
 4023d60:	d9402917 	ldw	r5,164(sp)
 4023d64:	2d801a16 	blt	r5,r22,4023dd0 <___vfprintf_internal_r+0x1de8>
 4023d68:	dd803215 	stw	r22,200(sp)
 4023d6c:	003e8906 	br	4023794 <__alt_data_end+0xfffe3794>
 4023d70:	010100f4 	movhi	r4,1027
 4023d74:	210d8f84 	addi	r4,r4,13886
 4023d78:	d9002b15 	stw	r4,172(sp)
 4023d7c:	003c9106 	br	4022fc4 <__alt_data_end+0xfffe2fc4>
 4023d80:	e005883a 	mov	r2,fp
 4023d84:	003e7906 	br	402376c <__alt_data_end+0xfffe376c>
 4023d88:	d9402917 	ldw	r5,164(sp)
 4023d8c:	df002783 	ldbu	fp,158(sp)
 4023d90:	dcc02d15 	stw	r19,180(sp)
 4023d94:	d9402a15 	stw	r5,168(sp)
 4023d98:	d9402e15 	stw	r5,184(sp)
 4023d9c:	d8002915 	stw	zero,164(sp)
 4023da0:	d8003215 	stw	zero,200(sp)
 4023da4:	003a5d06 	br	402271c <__alt_data_end+0xfffe271c>
 4023da8:	9080004c 	andi	r2,r18,1
 4023dac:	0039883a 	mov	fp,zero
 4023db0:	10000426 	beq	r2,zero,4023dc4 <___vfprintf_internal_r+0x1ddc>
 4023db4:	00800c04 	movi	r2,48
 4023db8:	dc001dc4 	addi	r16,sp,119
 4023dbc:	d8801dc5 	stb	r2,119(sp)
 4023dc0:	003b8006 	br	4022bc4 <__alt_data_end+0xfffe2bc4>
 4023dc4:	d8002e15 	stw	zero,184(sp)
 4023dc8:	dc001e04 	addi	r16,sp,120
 4023dcc:	003a4d06 	br	4022704 <__alt_data_end+0xfffe2704>
 4023dd0:	8c7fff84 	addi	r17,r17,-2
 4023dd4:	b5bfffc4 	addi	r22,r22,-1
 4023dd8:	dd802615 	stw	r22,152(sp)
 4023ddc:	dc4022c5 	stb	r17,139(sp)
 4023de0:	b000bf16 	blt	r22,zero,40240e0 <___vfprintf_internal_r+0x20f8>
 4023de4:	00800ac4 	movi	r2,43
 4023de8:	d8802305 	stb	r2,140(sp)
 4023dec:	00800244 	movi	r2,9
 4023df0:	15807016 	blt	r2,r22,4023fb4 <___vfprintf_internal_r+0x1fcc>
 4023df4:	00800c04 	movi	r2,48
 4023df8:	b5800c04 	addi	r22,r22,48
 4023dfc:	d8802345 	stb	r2,141(sp)
 4023e00:	dd802385 	stb	r22,142(sp)
 4023e04:	d88023c4 	addi	r2,sp,143
 4023e08:	df0022c4 	addi	fp,sp,139
 4023e0c:	d8c03317 	ldw	r3,204(sp)
 4023e10:	1739c83a 	sub	fp,r2,fp
 4023e14:	d9003317 	ldw	r4,204(sp)
 4023e18:	e0c7883a 	add	r3,fp,r3
 4023e1c:	df003a15 	stw	fp,232(sp)
 4023e20:	d8c02e15 	stw	r3,184(sp)
 4023e24:	00800044 	movi	r2,1
 4023e28:	1100b30e 	bge	r2,r4,40240f8 <___vfprintf_internal_r+0x2110>
 4023e2c:	d8c02e17 	ldw	r3,184(sp)
 4023e30:	18c00044 	addi	r3,r3,1
 4023e34:	d8c02e15 	stw	r3,184(sp)
 4023e38:	1805883a 	mov	r2,r3
 4023e3c:	1800ac16 	blt	r3,zero,40240f0 <___vfprintf_internal_r+0x2108>
 4023e40:	d8003215 	stw	zero,200(sp)
 4023e44:	003e5d06 	br	40237bc <__alt_data_end+0xfffe37bc>
 4023e48:	d9002c17 	ldw	r4,176(sp)
 4023e4c:	d9801e04 	addi	r6,sp,120
 4023e50:	b80b883a 	mov	r5,r23
 4023e54:	4028b000 	call	4028b00 <__sprint_r>
 4023e58:	1039651e 	bne	r2,zero,40223f0 <__alt_data_end+0xfffe23f0>
 4023e5c:	dc402617 	ldw	r17,152(sp)
 4023e60:	d8c02017 	ldw	r3,128(sp)
 4023e64:	d8801f17 	ldw	r2,124(sp)
 4023e68:	da000404 	addi	r8,sp,16
 4023e6c:	003ed606 	br	40239c8 <__alt_data_end+0xfffe39c8>
 4023e70:	582b883a 	mov	r21,r11
 4023e74:	d8002915 	stw	zero,164(sp)
 4023e78:	0038bd06 	br	4022170 <__alt_data_end+0xfffe2170>
 4023e7c:	d8802917 	ldw	r2,164(sp)
 4023e80:	103e071e 	bne	r2,zero,40236a0 <__alt_data_end+0xfffe36a0>
 4023e84:	dc002915 	stw	r16,164(sp)
 4023e88:	003e0506 	br	40236a0 <__alt_data_end+0xfffe36a0>
 4023e8c:	d9002917 	ldw	r4,164(sp)
 4023e90:	20c00044 	addi	r3,r4,1
 4023e94:	003e0f06 	br	40236d4 <__alt_data_end+0xfffe36d4>
 4023e98:	01400184 	movi	r5,6
 4023e9c:	d9402915 	stw	r5,164(sp)
 4023ea0:	003dff06 	br	40236a0 <__alt_data_end+0xfffe36a0>
 4023ea4:	d8802104 	addi	r2,sp,132
 4023ea8:	d8800315 	stw	r2,12(sp)
 4023eac:	d8802504 	addi	r2,sp,148
 4023eb0:	d8800215 	stw	r2,8(sp)
 4023eb4:	d8802604 	addi	r2,sp,152
 4023eb8:	d8800115 	stw	r2,4(sp)
 4023ebc:	d8802917 	ldw	r2,164(sp)
 4023ec0:	d9403617 	ldw	r5,216(sp)
 4023ec4:	d9002c17 	ldw	r4,176(sp)
 4023ec8:	d8800015 	stw	r2,0(sp)
 4023ecc:	01c000c4 	movi	r7,3
 4023ed0:	980d883a 	mov	r6,r19
 4023ed4:	da003d15 	stw	r8,244(sp)
 4023ed8:	402460c0 	call	402460c <_dtoa_r>
 4023edc:	d8c02917 	ldw	r3,164(sp)
 4023ee0:	da003d17 	ldw	r8,244(sp)
 4023ee4:	1021883a 	mov	r16,r2
 4023ee8:	10f9883a 	add	fp,r2,r3
 4023eec:	81000007 	ldb	r4,0(r16)
 4023ef0:	00800c04 	movi	r2,48
 4023ef4:	20805e26 	beq	r4,r2,4024070 <___vfprintf_internal_r+0x2088>
 4023ef8:	d8c02617 	ldw	r3,152(sp)
 4023efc:	e0f9883a 	add	fp,fp,r3
 4023f00:	003e0a06 	br	402372c <__alt_data_end+0xfffe372c>
 4023f04:	00c00b44 	movi	r3,45
 4023f08:	24e0003c 	xorhi	r19,r4,32768
 4023f0c:	d8c02a05 	stb	r3,168(sp)
 4023f10:	003de906 	br	40236b8 <__alt_data_end+0xfffe36b8>
 4023f14:	d8c03217 	ldw	r3,200(sp)
 4023f18:	00c07a0e 	bge	zero,r3,4024104 <___vfprintf_internal_r+0x211c>
 4023f1c:	00800044 	movi	r2,1
 4023f20:	d9003317 	ldw	r4,204(sp)
 4023f24:	1105883a 	add	r2,r2,r4
 4023f28:	d8802e15 	stw	r2,184(sp)
 4023f2c:	10004e16 	blt	r2,zero,4024068 <___vfprintf_internal_r+0x2080>
 4023f30:	044019c4 	movi	r17,103
 4023f34:	003e2106 	br	40237bc <__alt_data_end+0xfffe37bc>
 4023f38:	d9002917 	ldw	r4,164(sp)
 4023f3c:	d8802104 	addi	r2,sp,132
 4023f40:	d8800315 	stw	r2,12(sp)
 4023f44:	d9000015 	stw	r4,0(sp)
 4023f48:	d8802504 	addi	r2,sp,148
 4023f4c:	d9403617 	ldw	r5,216(sp)
 4023f50:	d9002c17 	ldw	r4,176(sp)
 4023f54:	d8800215 	stw	r2,8(sp)
 4023f58:	d8802604 	addi	r2,sp,152
 4023f5c:	d8800115 	stw	r2,4(sp)
 4023f60:	01c000c4 	movi	r7,3
 4023f64:	980d883a 	mov	r6,r19
 4023f68:	da003d15 	stw	r8,244(sp)
 4023f6c:	402460c0 	call	402460c <_dtoa_r>
 4023f70:	d8c02917 	ldw	r3,164(sp)
 4023f74:	da003d17 	ldw	r8,244(sp)
 4023f78:	1021883a 	mov	r16,r2
 4023f7c:	00801184 	movi	r2,70
 4023f80:	80f9883a 	add	fp,r16,r3
 4023f84:	88bfd926 	beq	r17,r2,4023eec <__alt_data_end+0xfffe3eec>
 4023f88:	003de806 	br	402372c <__alt_data_end+0xfffe372c>
 4023f8c:	d9002917 	ldw	r4,164(sp)
 4023f90:	00c04d0e 	bge	zero,r3,40240c8 <___vfprintf_internal_r+0x20e0>
 4023f94:	2000441e 	bne	r4,zero,40240a8 <___vfprintf_internal_r+0x20c0>
 4023f98:	9480004c 	andi	r18,r18,1
 4023f9c:	9000421e 	bne	r18,zero,40240a8 <___vfprintf_internal_r+0x20c0>
 4023fa0:	1805883a 	mov	r2,r3
 4023fa4:	18007016 	blt	r3,zero,4024168 <___vfprintf_internal_r+0x2180>
 4023fa8:	d8c03217 	ldw	r3,200(sp)
 4023fac:	d8c02e15 	stw	r3,184(sp)
 4023fb0:	003e0206 	br	40237bc <__alt_data_end+0xfffe37bc>
 4023fb4:	df0022c4 	addi	fp,sp,139
 4023fb8:	dc002915 	stw	r16,164(sp)
 4023fbc:	4027883a 	mov	r19,r8
 4023fc0:	e021883a 	mov	r16,fp
 4023fc4:	b009883a 	mov	r4,r22
 4023fc8:	01400284 	movi	r5,10
 4023fcc:	402c0300 	call	402c030 <__modsi3>
 4023fd0:	10800c04 	addi	r2,r2,48
 4023fd4:	843fffc4 	addi	r16,r16,-1
 4023fd8:	b009883a 	mov	r4,r22
 4023fdc:	01400284 	movi	r5,10
 4023fe0:	80800005 	stb	r2,0(r16)
 4023fe4:	402bfac0 	call	402bfac <__divsi3>
 4023fe8:	102d883a 	mov	r22,r2
 4023fec:	00800244 	movi	r2,9
 4023ff0:	15bff416 	blt	r2,r22,4023fc4 <__alt_data_end+0xfffe3fc4>
 4023ff4:	9811883a 	mov	r8,r19
 4023ff8:	b0800c04 	addi	r2,r22,48
 4023ffc:	8027883a 	mov	r19,r16
 4024000:	997fffc4 	addi	r5,r19,-1
 4024004:	98bfffc5 	stb	r2,-1(r19)
 4024008:	dc002917 	ldw	r16,164(sp)
 402400c:	2f006a2e 	bgeu	r5,fp,40241b8 <___vfprintf_internal_r+0x21d0>
 4024010:	d9c02384 	addi	r7,sp,142
 4024014:	3ccfc83a 	sub	r7,r7,r19
 4024018:	d9002344 	addi	r4,sp,141
 402401c:	e1cf883a 	add	r7,fp,r7
 4024020:	00000106 	br	4024028 <___vfprintf_internal_r+0x2040>
 4024024:	28800003 	ldbu	r2,0(r5)
 4024028:	20800005 	stb	r2,0(r4)
 402402c:	21000044 	addi	r4,r4,1
 4024030:	29400044 	addi	r5,r5,1
 4024034:	393ffb1e 	bne	r7,r4,4024024 <__alt_data_end+0xfffe4024>
 4024038:	d8802304 	addi	r2,sp,140
 402403c:	14c5c83a 	sub	r2,r2,r19
 4024040:	d8c02344 	addi	r3,sp,141
 4024044:	1885883a 	add	r2,r3,r2
 4024048:	003f7006 	br	4023e0c <__alt_data_end+0xfffe3e0c>
 402404c:	0005883a 	mov	r2,zero
 4024050:	003f0f06 	br	4023c90 <__alt_data_end+0xfffe3c90>
 4024054:	d8c03217 	ldw	r3,200(sp)
 4024058:	18c00044 	addi	r3,r3,1
 402405c:	d8c02e15 	stw	r3,184(sp)
 4024060:	1805883a 	mov	r2,r3
 4024064:	183fb20e 	bge	r3,zero,4023f30 <__alt_data_end+0xfffe3f30>
 4024068:	0005883a 	mov	r2,zero
 402406c:	003fb006 	br	4023f30 <__alt_data_end+0xfffe3f30>
 4024070:	d9003617 	ldw	r4,216(sp)
 4024074:	000d883a 	mov	r6,zero
 4024078:	000f883a 	mov	r7,zero
 402407c:	980b883a 	mov	r5,r19
 4024080:	d8c03c15 	stw	r3,240(sp)
 4024084:	da003d15 	stw	r8,244(sp)
 4024088:	402d2f40 	call	402d2f4 <__eqdf2>
 402408c:	d8c03c17 	ldw	r3,240(sp)
 4024090:	da003d17 	ldw	r8,244(sp)
 4024094:	103f9826 	beq	r2,zero,4023ef8 <__alt_data_end+0xfffe3ef8>
 4024098:	00800044 	movi	r2,1
 402409c:	10c7c83a 	sub	r3,r2,r3
 40240a0:	d8c02615 	stw	r3,152(sp)
 40240a4:	003f9506 	br	4023efc <__alt_data_end+0xfffe3efc>
 40240a8:	d9002917 	ldw	r4,164(sp)
 40240ac:	d8c03217 	ldw	r3,200(sp)
 40240b0:	20800044 	addi	r2,r4,1
 40240b4:	1885883a 	add	r2,r3,r2
 40240b8:	d8802e15 	stw	r2,184(sp)
 40240bc:	103dbf0e 	bge	r2,zero,40237bc <__alt_data_end+0xfffe37bc>
 40240c0:	0005883a 	mov	r2,zero
 40240c4:	003dbd06 	br	40237bc <__alt_data_end+0xfffe37bc>
 40240c8:	2000211e 	bne	r4,zero,4024150 <___vfprintf_internal_r+0x2168>
 40240cc:	9480004c 	andi	r18,r18,1
 40240d0:	90001f1e 	bne	r18,zero,4024150 <___vfprintf_internal_r+0x2168>
 40240d4:	00800044 	movi	r2,1
 40240d8:	d8802e15 	stw	r2,184(sp)
 40240dc:	003db706 	br	40237bc <__alt_data_end+0xfffe37bc>
 40240e0:	00800b44 	movi	r2,45
 40240e4:	05adc83a 	sub	r22,zero,r22
 40240e8:	d8802305 	stb	r2,140(sp)
 40240ec:	003f3f06 	br	4023dec <__alt_data_end+0xfffe3dec>
 40240f0:	0005883a 	mov	r2,zero
 40240f4:	003f5206 	br	4023e40 <__alt_data_end+0xfffe3e40>
 40240f8:	90a4703a 	and	r18,r18,r2
 40240fc:	903f4e26 	beq	r18,zero,4023e38 <__alt_data_end+0xfffe3e38>
 4024100:	003f4a06 	br	4023e2c <__alt_data_end+0xfffe3e2c>
 4024104:	00800084 	movi	r2,2
 4024108:	10c5c83a 	sub	r2,r2,r3
 402410c:	003f8406 	br	4023f20 <__alt_data_end+0xfffe3f20>
 4024110:	d8802d17 	ldw	r2,180(sp)
 4024114:	d9002d17 	ldw	r4,180(sp)
 4024118:	ac400043 	ldbu	r17,1(r21)
 402411c:	10800017 	ldw	r2,0(r2)
 4024120:	582b883a 	mov	r21,r11
 4024124:	d8802915 	stw	r2,164(sp)
 4024128:	20800104 	addi	r2,r4,4
 402412c:	d9002917 	ldw	r4,164(sp)
 4024130:	d8802d15 	stw	r2,180(sp)
 4024134:	203e7a0e 	bge	r4,zero,4023b20 <__alt_data_end+0xfffe3b20>
 4024138:	8c403fcc 	andi	r17,r17,255
 402413c:	00bfffc4 	movi	r2,-1
 4024140:	8c40201c 	xori	r17,r17,128
 4024144:	d8802915 	stw	r2,164(sp)
 4024148:	8c7fe004 	addi	r17,r17,-128
 402414c:	00380706 	br	402216c <__alt_data_end+0xfffe216c>
 4024150:	d8c02917 	ldw	r3,164(sp)
 4024154:	18c00084 	addi	r3,r3,2
 4024158:	d8c02e15 	stw	r3,184(sp)
 402415c:	1805883a 	mov	r2,r3
 4024160:	183d960e 	bge	r3,zero,40237bc <__alt_data_end+0xfffe37bc>
 4024164:	003fd606 	br	40240c0 <__alt_data_end+0xfffe40c0>
 4024168:	0005883a 	mov	r2,zero
 402416c:	003f8e06 	br	4023fa8 <__alt_data_end+0xfffe3fa8>
 4024170:	9080004c 	andi	r2,r18,1
 4024174:	103f811e 	bne	r2,zero,4023f7c <__alt_data_end+0xfffe3f7c>
 4024178:	d8802117 	ldw	r2,132(sp)
 402417c:	1405c83a 	sub	r2,r2,r16
 4024180:	d8803315 	stw	r2,204(sp)
 4024184:	b47ef326 	beq	r22,r17,4023d54 <__alt_data_end+0xfffe3d54>
 4024188:	dd802617 	ldw	r22,152(sp)
 402418c:	003f1106 	br	4023dd4 <__alt_data_end+0xfffe3dd4>
 4024190:	d9c02785 	stb	r7,158(sp)
 4024194:	00390406 	br	40225a8 <__alt_data_end+0xfffe25a8>
 4024198:	d9c02785 	stb	r7,158(sp)
 402419c:	0038d306 	br	40224ec <__alt_data_end+0xfffe24ec>
 40241a0:	d9c02785 	stb	r7,158(sp)
 40241a4:	003a6106 	br	4022b2c <__alt_data_end+0xfffe2b2c>
 40241a8:	d9c02785 	stb	r7,158(sp)
 40241ac:	003af806 	br	4022d90 <__alt_data_end+0xfffe2d90>
 40241b0:	0005883a 	mov	r2,zero
 40241b4:	003d7e06 	br	40237b0 <__alt_data_end+0xfffe37b0>
 40241b8:	d8802344 	addi	r2,sp,141
 40241bc:	003f1306 	br	4023e0c <__alt_data_end+0xfffe3e0c>
 40241c0:	d9c02785 	stb	r7,158(sp)
 40241c4:	00392306 	br	4022654 <__alt_data_end+0xfffe2654>
 40241c8:	d9c02785 	stb	r7,158(sp)
 40241cc:	003aa906 	br	4022c74 <__alt_data_end+0xfffe2c74>
 40241d0:	d9c02785 	stb	r7,158(sp)
 40241d4:	003a3d06 	br	4022acc <__alt_data_end+0xfffe2acc>
 40241d8:	d9c02785 	stb	r7,158(sp)
 40241dc:	003aca06 	br	4022d08 <__alt_data_end+0xfffe2d08>

040241e0 <__vfprintf_internal>:
 40241e0:	008100f4 	movhi	r2,1027
 40241e4:	10956004 	addi	r2,r2,21888
 40241e8:	300f883a 	mov	r7,r6
 40241ec:	280d883a 	mov	r6,r5
 40241f0:	200b883a 	mov	r5,r4
 40241f4:	11000017 	ldw	r4,0(r2)
 40241f8:	4021fe81 	jmpi	4021fe8 <___vfprintf_internal_r>

040241fc <__sbprintf>:
 40241fc:	2880030b 	ldhu	r2,12(r5)
 4024200:	2ac01917 	ldw	r11,100(r5)
 4024204:	2a80038b 	ldhu	r10,14(r5)
 4024208:	2a400717 	ldw	r9,28(r5)
 402420c:	2a000917 	ldw	r8,36(r5)
 4024210:	defee204 	addi	sp,sp,-1144
 4024214:	00c10004 	movi	r3,1024
 4024218:	dc011a15 	stw	r16,1128(sp)
 402421c:	10bfff4c 	andi	r2,r2,65533
 4024220:	2821883a 	mov	r16,r5
 4024224:	d8cb883a 	add	r5,sp,r3
 4024228:	dc811c15 	stw	r18,1136(sp)
 402422c:	dc411b15 	stw	r17,1132(sp)
 4024230:	dfc11d15 	stw	ra,1140(sp)
 4024234:	2025883a 	mov	r18,r4
 4024238:	d881030d 	sth	r2,1036(sp)
 402423c:	dac11915 	stw	r11,1124(sp)
 4024240:	da81038d 	sth	r10,1038(sp)
 4024244:	da410715 	stw	r9,1052(sp)
 4024248:	da010915 	stw	r8,1060(sp)
 402424c:	dec10015 	stw	sp,1024(sp)
 4024250:	dec10415 	stw	sp,1040(sp)
 4024254:	d8c10215 	stw	r3,1032(sp)
 4024258:	d8c10515 	stw	r3,1044(sp)
 402425c:	d8010615 	stw	zero,1048(sp)
 4024260:	4021fe80 	call	4021fe8 <___vfprintf_internal_r>
 4024264:	1023883a 	mov	r17,r2
 4024268:	10000416 	blt	r2,zero,402427c <__sbprintf+0x80>
 402426c:	d9410004 	addi	r5,sp,1024
 4024270:	9009883a 	mov	r4,r18
 4024274:	4025eb00 	call	4025eb0 <_fflush_r>
 4024278:	10000d1e 	bne	r2,zero,40242b0 <__sbprintf+0xb4>
 402427c:	d881030b 	ldhu	r2,1036(sp)
 4024280:	1080100c 	andi	r2,r2,64
 4024284:	10000326 	beq	r2,zero,4024294 <__sbprintf+0x98>
 4024288:	8080030b 	ldhu	r2,12(r16)
 402428c:	10801014 	ori	r2,r2,64
 4024290:	8080030d 	sth	r2,12(r16)
 4024294:	8805883a 	mov	r2,r17
 4024298:	dfc11d17 	ldw	ra,1140(sp)
 402429c:	dc811c17 	ldw	r18,1136(sp)
 40242a0:	dc411b17 	ldw	r17,1132(sp)
 40242a4:	dc011a17 	ldw	r16,1128(sp)
 40242a8:	dec11e04 	addi	sp,sp,1144
 40242ac:	f800283a 	ret
 40242b0:	047fffc4 	movi	r17,-1
 40242b4:	003ff106 	br	402427c <__alt_data_end+0xfffe427c>

040242b8 <__swsetup_r>:
 40242b8:	008100f4 	movhi	r2,1027
 40242bc:	defffd04 	addi	sp,sp,-12
 40242c0:	10956004 	addi	r2,r2,21888
 40242c4:	dc400115 	stw	r17,4(sp)
 40242c8:	2023883a 	mov	r17,r4
 40242cc:	11000017 	ldw	r4,0(r2)
 40242d0:	dc000015 	stw	r16,0(sp)
 40242d4:	dfc00215 	stw	ra,8(sp)
 40242d8:	2821883a 	mov	r16,r5
 40242dc:	20000226 	beq	r4,zero,40242e8 <__swsetup_r+0x30>
 40242e0:	20800e17 	ldw	r2,56(r4)
 40242e4:	10003126 	beq	r2,zero,40243ac <__swsetup_r+0xf4>
 40242e8:	8080030b 	ldhu	r2,12(r16)
 40242ec:	10c0020c 	andi	r3,r2,8
 40242f0:	1009883a 	mov	r4,r2
 40242f4:	18000f26 	beq	r3,zero,4024334 <__swsetup_r+0x7c>
 40242f8:	80c00417 	ldw	r3,16(r16)
 40242fc:	18001526 	beq	r3,zero,4024354 <__swsetup_r+0x9c>
 4024300:	1100004c 	andi	r4,r2,1
 4024304:	20001c1e 	bne	r4,zero,4024378 <__swsetup_r+0xc0>
 4024308:	1080008c 	andi	r2,r2,2
 402430c:	1000291e 	bne	r2,zero,40243b4 <__swsetup_r+0xfc>
 4024310:	80800517 	ldw	r2,20(r16)
 4024314:	80800215 	stw	r2,8(r16)
 4024318:	18001c26 	beq	r3,zero,402438c <__swsetup_r+0xd4>
 402431c:	0005883a 	mov	r2,zero
 4024320:	dfc00217 	ldw	ra,8(sp)
 4024324:	dc400117 	ldw	r17,4(sp)
 4024328:	dc000017 	ldw	r16,0(sp)
 402432c:	dec00304 	addi	sp,sp,12
 4024330:	f800283a 	ret
 4024334:	2080040c 	andi	r2,r4,16
 4024338:	10002e26 	beq	r2,zero,40243f4 <__swsetup_r+0x13c>
 402433c:	2080010c 	andi	r2,r4,4
 4024340:	10001e1e 	bne	r2,zero,40243bc <__swsetup_r+0x104>
 4024344:	80c00417 	ldw	r3,16(r16)
 4024348:	20800214 	ori	r2,r4,8
 402434c:	8080030d 	sth	r2,12(r16)
 4024350:	183feb1e 	bne	r3,zero,4024300 <__alt_data_end+0xfffe4300>
 4024354:	1100a00c 	andi	r4,r2,640
 4024358:	01408004 	movi	r5,512
 402435c:	217fe826 	beq	r4,r5,4024300 <__alt_data_end+0xfffe4300>
 4024360:	800b883a 	mov	r5,r16
 4024364:	8809883a 	mov	r4,r17
 4024368:	40269740 	call	4026974 <__smakebuf_r>
 402436c:	8080030b 	ldhu	r2,12(r16)
 4024370:	80c00417 	ldw	r3,16(r16)
 4024374:	003fe206 	br	4024300 <__alt_data_end+0xfffe4300>
 4024378:	80800517 	ldw	r2,20(r16)
 402437c:	80000215 	stw	zero,8(r16)
 4024380:	0085c83a 	sub	r2,zero,r2
 4024384:	80800615 	stw	r2,24(r16)
 4024388:	183fe41e 	bne	r3,zero,402431c <__alt_data_end+0xfffe431c>
 402438c:	80c0030b 	ldhu	r3,12(r16)
 4024390:	0005883a 	mov	r2,zero
 4024394:	1900200c 	andi	r4,r3,128
 4024398:	203fe126 	beq	r4,zero,4024320 <__alt_data_end+0xfffe4320>
 402439c:	18c01014 	ori	r3,r3,64
 40243a0:	80c0030d 	sth	r3,12(r16)
 40243a4:	00bfffc4 	movi	r2,-1
 40243a8:	003fdd06 	br	4024320 <__alt_data_end+0xfffe4320>
 40243ac:	402628c0 	call	402628c <__sinit>
 40243b0:	003fcd06 	br	40242e8 <__alt_data_end+0xfffe42e8>
 40243b4:	0005883a 	mov	r2,zero
 40243b8:	003fd606 	br	4024314 <__alt_data_end+0xfffe4314>
 40243bc:	81400c17 	ldw	r5,48(r16)
 40243c0:	28000626 	beq	r5,zero,40243dc <__swsetup_r+0x124>
 40243c4:	80801004 	addi	r2,r16,64
 40243c8:	28800326 	beq	r5,r2,40243d8 <__swsetup_r+0x120>
 40243cc:	8809883a 	mov	r4,r17
 40243d0:	40264000 	call	4026400 <_free_r>
 40243d4:	8100030b 	ldhu	r4,12(r16)
 40243d8:	80000c15 	stw	zero,48(r16)
 40243dc:	80c00417 	ldw	r3,16(r16)
 40243e0:	00bff6c4 	movi	r2,-37
 40243e4:	1108703a 	and	r4,r2,r4
 40243e8:	80000115 	stw	zero,4(r16)
 40243ec:	80c00015 	stw	r3,0(r16)
 40243f0:	003fd506 	br	4024348 <__alt_data_end+0xfffe4348>
 40243f4:	00800244 	movi	r2,9
 40243f8:	88800015 	stw	r2,0(r17)
 40243fc:	20801014 	ori	r2,r4,64
 4024400:	8080030d 	sth	r2,12(r16)
 4024404:	00bfffc4 	movi	r2,-1
 4024408:	003fc506 	br	4024320 <__alt_data_end+0xfffe4320>

0402440c <quorem>:
 402440c:	defff704 	addi	sp,sp,-36
 4024410:	dc800215 	stw	r18,8(sp)
 4024414:	20800417 	ldw	r2,16(r4)
 4024418:	2c800417 	ldw	r18,16(r5)
 402441c:	dfc00815 	stw	ra,32(sp)
 4024420:	ddc00715 	stw	r23,28(sp)
 4024424:	dd800615 	stw	r22,24(sp)
 4024428:	dd400515 	stw	r21,20(sp)
 402442c:	dd000415 	stw	r20,16(sp)
 4024430:	dcc00315 	stw	r19,12(sp)
 4024434:	dc400115 	stw	r17,4(sp)
 4024438:	dc000015 	stw	r16,0(sp)
 402443c:	14807116 	blt	r2,r18,4024604 <quorem+0x1f8>
 4024440:	94bfffc4 	addi	r18,r18,-1
 4024444:	94ad883a 	add	r22,r18,r18
 4024448:	b5ad883a 	add	r22,r22,r22
 402444c:	2c400504 	addi	r17,r5,20
 4024450:	8da9883a 	add	r20,r17,r22
 4024454:	25400504 	addi	r21,r4,20
 4024458:	282f883a 	mov	r23,r5
 402445c:	adad883a 	add	r22,r21,r22
 4024460:	a1400017 	ldw	r5,0(r20)
 4024464:	2021883a 	mov	r16,r4
 4024468:	b1000017 	ldw	r4,0(r22)
 402446c:	29400044 	addi	r5,r5,1
 4024470:	402c0a40 	call	402c0a4 <__udivsi3>
 4024474:	1027883a 	mov	r19,r2
 4024478:	10002c26 	beq	r2,zero,402452c <quorem+0x120>
 402447c:	a813883a 	mov	r9,r21
 4024480:	880b883a 	mov	r5,r17
 4024484:	0009883a 	mov	r4,zero
 4024488:	000d883a 	mov	r6,zero
 402448c:	2a000017 	ldw	r8,0(r5)
 4024490:	49c00017 	ldw	r7,0(r9)
 4024494:	29400104 	addi	r5,r5,4
 4024498:	40bfffcc 	andi	r2,r8,65535
 402449c:	14c5383a 	mul	r2,r2,r19
 40244a0:	4010d43a 	srli	r8,r8,16
 40244a4:	38ffffcc 	andi	r3,r7,65535
 40244a8:	1105883a 	add	r2,r2,r4
 40244ac:	1008d43a 	srli	r4,r2,16
 40244b0:	44d1383a 	mul	r8,r8,r19
 40244b4:	198d883a 	add	r6,r3,r6
 40244b8:	10ffffcc 	andi	r3,r2,65535
 40244bc:	30c7c83a 	sub	r3,r6,r3
 40244c0:	380ed43a 	srli	r7,r7,16
 40244c4:	4105883a 	add	r2,r8,r4
 40244c8:	180dd43a 	srai	r6,r3,16
 40244cc:	113fffcc 	andi	r4,r2,65535
 40244d0:	390fc83a 	sub	r7,r7,r4
 40244d4:	398d883a 	add	r6,r7,r6
 40244d8:	300e943a 	slli	r7,r6,16
 40244dc:	18ffffcc 	andi	r3,r3,65535
 40244e0:	1008d43a 	srli	r4,r2,16
 40244e4:	38ceb03a 	or	r7,r7,r3
 40244e8:	49c00015 	stw	r7,0(r9)
 40244ec:	300dd43a 	srai	r6,r6,16
 40244f0:	4a400104 	addi	r9,r9,4
 40244f4:	a17fe52e 	bgeu	r20,r5,402448c <__alt_data_end+0xfffe448c>
 40244f8:	b0800017 	ldw	r2,0(r22)
 40244fc:	10000b1e 	bne	r2,zero,402452c <quorem+0x120>
 4024500:	b0bfff04 	addi	r2,r22,-4
 4024504:	a880082e 	bgeu	r21,r2,4024528 <quorem+0x11c>
 4024508:	b0ffff17 	ldw	r3,-4(r22)
 402450c:	18000326 	beq	r3,zero,402451c <quorem+0x110>
 4024510:	00000506 	br	4024528 <quorem+0x11c>
 4024514:	10c00017 	ldw	r3,0(r2)
 4024518:	1800031e 	bne	r3,zero,4024528 <quorem+0x11c>
 402451c:	10bfff04 	addi	r2,r2,-4
 4024520:	94bfffc4 	addi	r18,r18,-1
 4024524:	a8bffb36 	bltu	r21,r2,4024514 <__alt_data_end+0xfffe4514>
 4024528:	84800415 	stw	r18,16(r16)
 402452c:	b80b883a 	mov	r5,r23
 4024530:	8009883a 	mov	r4,r16
 4024534:	4027f580 	call	4027f58 <__mcmp>
 4024538:	10002616 	blt	r2,zero,40245d4 <quorem+0x1c8>
 402453c:	9cc00044 	addi	r19,r19,1
 4024540:	a805883a 	mov	r2,r21
 4024544:	000b883a 	mov	r5,zero
 4024548:	11000017 	ldw	r4,0(r2)
 402454c:	89800017 	ldw	r6,0(r17)
 4024550:	10800104 	addi	r2,r2,4
 4024554:	20ffffcc 	andi	r3,r4,65535
 4024558:	194b883a 	add	r5,r3,r5
 402455c:	30ffffcc 	andi	r3,r6,65535
 4024560:	28c7c83a 	sub	r3,r5,r3
 4024564:	300cd43a 	srli	r6,r6,16
 4024568:	2008d43a 	srli	r4,r4,16
 402456c:	180bd43a 	srai	r5,r3,16
 4024570:	18ffffcc 	andi	r3,r3,65535
 4024574:	2189c83a 	sub	r4,r4,r6
 4024578:	2149883a 	add	r4,r4,r5
 402457c:	200c943a 	slli	r6,r4,16
 4024580:	8c400104 	addi	r17,r17,4
 4024584:	200bd43a 	srai	r5,r4,16
 4024588:	30c6b03a 	or	r3,r6,r3
 402458c:	10ffff15 	stw	r3,-4(r2)
 4024590:	a47fed2e 	bgeu	r20,r17,4024548 <__alt_data_end+0xfffe4548>
 4024594:	9485883a 	add	r2,r18,r18
 4024598:	1085883a 	add	r2,r2,r2
 402459c:	a887883a 	add	r3,r21,r2
 40245a0:	18800017 	ldw	r2,0(r3)
 40245a4:	10000b1e 	bne	r2,zero,40245d4 <quorem+0x1c8>
 40245a8:	18bfff04 	addi	r2,r3,-4
 40245ac:	a880082e 	bgeu	r21,r2,40245d0 <quorem+0x1c4>
 40245b0:	18ffff17 	ldw	r3,-4(r3)
 40245b4:	18000326 	beq	r3,zero,40245c4 <quorem+0x1b8>
 40245b8:	00000506 	br	40245d0 <quorem+0x1c4>
 40245bc:	10c00017 	ldw	r3,0(r2)
 40245c0:	1800031e 	bne	r3,zero,40245d0 <quorem+0x1c4>
 40245c4:	10bfff04 	addi	r2,r2,-4
 40245c8:	94bfffc4 	addi	r18,r18,-1
 40245cc:	a8bffb36 	bltu	r21,r2,40245bc <__alt_data_end+0xfffe45bc>
 40245d0:	84800415 	stw	r18,16(r16)
 40245d4:	9805883a 	mov	r2,r19
 40245d8:	dfc00817 	ldw	ra,32(sp)
 40245dc:	ddc00717 	ldw	r23,28(sp)
 40245e0:	dd800617 	ldw	r22,24(sp)
 40245e4:	dd400517 	ldw	r21,20(sp)
 40245e8:	dd000417 	ldw	r20,16(sp)
 40245ec:	dcc00317 	ldw	r19,12(sp)
 40245f0:	dc800217 	ldw	r18,8(sp)
 40245f4:	dc400117 	ldw	r17,4(sp)
 40245f8:	dc000017 	ldw	r16,0(sp)
 40245fc:	dec00904 	addi	sp,sp,36
 4024600:	f800283a 	ret
 4024604:	0005883a 	mov	r2,zero
 4024608:	003ff306 	br	40245d8 <__alt_data_end+0xfffe45d8>

0402460c <_dtoa_r>:
 402460c:	20801017 	ldw	r2,64(r4)
 4024610:	deffde04 	addi	sp,sp,-136
 4024614:	df002015 	stw	fp,128(sp)
 4024618:	dcc01b15 	stw	r19,108(sp)
 402461c:	dc801a15 	stw	r18,104(sp)
 4024620:	dc401915 	stw	r17,100(sp)
 4024624:	dc001815 	stw	r16,96(sp)
 4024628:	dfc02115 	stw	ra,132(sp)
 402462c:	ddc01f15 	stw	r23,124(sp)
 4024630:	dd801e15 	stw	r22,120(sp)
 4024634:	dd401d15 	stw	r21,116(sp)
 4024638:	dd001c15 	stw	r20,112(sp)
 402463c:	d9c00315 	stw	r7,12(sp)
 4024640:	2039883a 	mov	fp,r4
 4024644:	3023883a 	mov	r17,r6
 4024648:	2825883a 	mov	r18,r5
 402464c:	dc002417 	ldw	r16,144(sp)
 4024650:	3027883a 	mov	r19,r6
 4024654:	10000826 	beq	r2,zero,4024678 <_dtoa_r+0x6c>
 4024658:	21801117 	ldw	r6,68(r4)
 402465c:	00c00044 	movi	r3,1
 4024660:	100b883a 	mov	r5,r2
 4024664:	1986983a 	sll	r3,r3,r6
 4024668:	11800115 	stw	r6,4(r2)
 402466c:	10c00215 	stw	r3,8(r2)
 4024670:	40277380 	call	4027738 <_Bfree>
 4024674:	e0001015 	stw	zero,64(fp)
 4024678:	88002e16 	blt	r17,zero,4024734 <_dtoa_r+0x128>
 402467c:	80000015 	stw	zero,0(r16)
 4024680:	889ffc2c 	andhi	r2,r17,32752
 4024684:	00dffc34 	movhi	r3,32752
 4024688:	10c01c26 	beq	r2,r3,40246fc <_dtoa_r+0xf0>
 402468c:	000d883a 	mov	r6,zero
 4024690:	000f883a 	mov	r7,zero
 4024694:	9009883a 	mov	r4,r18
 4024698:	980b883a 	mov	r5,r19
 402469c:	402d2f40 	call	402d2f4 <__eqdf2>
 40246a0:	10002b1e 	bne	r2,zero,4024750 <_dtoa_r+0x144>
 40246a4:	d9c02317 	ldw	r7,140(sp)
 40246a8:	00800044 	movi	r2,1
 40246ac:	38800015 	stw	r2,0(r7)
 40246b0:	d8802517 	ldw	r2,148(sp)
 40246b4:	10019e26 	beq	r2,zero,4024d30 <_dtoa_r+0x724>
 40246b8:	d8c02517 	ldw	r3,148(sp)
 40246bc:	008100f4 	movhi	r2,1027
 40246c0:	108d8f44 	addi	r2,r2,13885
 40246c4:	18800015 	stw	r2,0(r3)
 40246c8:	10bfffc4 	addi	r2,r2,-1
 40246cc:	dfc02117 	ldw	ra,132(sp)
 40246d0:	df002017 	ldw	fp,128(sp)
 40246d4:	ddc01f17 	ldw	r23,124(sp)
 40246d8:	dd801e17 	ldw	r22,120(sp)
 40246dc:	dd401d17 	ldw	r21,116(sp)
 40246e0:	dd001c17 	ldw	r20,112(sp)
 40246e4:	dcc01b17 	ldw	r19,108(sp)
 40246e8:	dc801a17 	ldw	r18,104(sp)
 40246ec:	dc401917 	ldw	r17,100(sp)
 40246f0:	dc001817 	ldw	r16,96(sp)
 40246f4:	dec02204 	addi	sp,sp,136
 40246f8:	f800283a 	ret
 40246fc:	d8c02317 	ldw	r3,140(sp)
 4024700:	0089c3c4 	movi	r2,9999
 4024704:	18800015 	stw	r2,0(r3)
 4024708:	90017726 	beq	r18,zero,4024ce8 <_dtoa_r+0x6dc>
 402470c:	008100f4 	movhi	r2,1027
 4024710:	108d9b04 	addi	r2,r2,13932
 4024714:	d9002517 	ldw	r4,148(sp)
 4024718:	203fec26 	beq	r4,zero,40246cc <__alt_data_end+0xfffe46cc>
 402471c:	10c000c7 	ldb	r3,3(r2)
 4024720:	1801781e 	bne	r3,zero,4024d04 <_dtoa_r+0x6f8>
 4024724:	10c000c4 	addi	r3,r2,3
 4024728:	d9802517 	ldw	r6,148(sp)
 402472c:	30c00015 	stw	r3,0(r6)
 4024730:	003fe606 	br	40246cc <__alt_data_end+0xfffe46cc>
 4024734:	04e00034 	movhi	r19,32768
 4024738:	9cffffc4 	addi	r19,r19,-1
 402473c:	00800044 	movi	r2,1
 4024740:	8ce6703a 	and	r19,r17,r19
 4024744:	80800015 	stw	r2,0(r16)
 4024748:	9823883a 	mov	r17,r19
 402474c:	003fcc06 	br	4024680 <__alt_data_end+0xfffe4680>
 4024750:	d8800204 	addi	r2,sp,8
 4024754:	d8800015 	stw	r2,0(sp)
 4024758:	d9c00104 	addi	r7,sp,4
 402475c:	900b883a 	mov	r5,r18
 4024760:	980d883a 	mov	r6,r19
 4024764:	e009883a 	mov	r4,fp
 4024768:	8820d53a 	srli	r16,r17,20
 402476c:	40283240 	call	4028324 <__d2b>
 4024770:	d8800915 	stw	r2,36(sp)
 4024774:	8001651e 	bne	r16,zero,4024d0c <_dtoa_r+0x700>
 4024778:	dd800217 	ldw	r22,8(sp)
 402477c:	dc000117 	ldw	r16,4(sp)
 4024780:	00800804 	movi	r2,32
 4024784:	b421883a 	add	r16,r22,r16
 4024788:	80c10c84 	addi	r3,r16,1074
 402478c:	10c2d10e 	bge	r2,r3,40252d4 <_dtoa_r+0xcc8>
 4024790:	00801004 	movi	r2,64
 4024794:	81010484 	addi	r4,r16,1042
 4024798:	10c7c83a 	sub	r3,r2,r3
 402479c:	9108d83a 	srl	r4,r18,r4
 40247a0:	88e2983a 	sll	r17,r17,r3
 40247a4:	2448b03a 	or	r4,r4,r17
 40247a8:	402e6bc0 	call	402e6bc <__floatunsidf>
 40247ac:	017f8434 	movhi	r5,65040
 40247b0:	01800044 	movi	r6,1
 40247b4:	1009883a 	mov	r4,r2
 40247b8:	194b883a 	add	r5,r3,r5
 40247bc:	843fffc4 	addi	r16,r16,-1
 40247c0:	d9801115 	stw	r6,68(sp)
 40247c4:	000d883a 	mov	r6,zero
 40247c8:	01cffe34 	movhi	r7,16376
 40247cc:	402dc640 	call	402dc64 <__subdf3>
 40247d0:	0198dbf4 	movhi	r6,25455
 40247d4:	01cff4f4 	movhi	r7,16339
 40247d8:	3190d844 	addi	r6,r6,17249
 40247dc:	39e1e9c4 	addi	r7,r7,-30809
 40247e0:	1009883a 	mov	r4,r2
 40247e4:	180b883a 	mov	r5,r3
 40247e8:	402d54c0 	call	402d54c <__muldf3>
 40247ec:	01a2d874 	movhi	r6,35681
 40247f0:	01cff1f4 	movhi	r7,16327
 40247f4:	31b22cc4 	addi	r6,r6,-14157
 40247f8:	39e28a04 	addi	r7,r7,-30168
 40247fc:	180b883a 	mov	r5,r3
 4024800:	1009883a 	mov	r4,r2
 4024804:	402c1600 	call	402c160 <__adddf3>
 4024808:	8009883a 	mov	r4,r16
 402480c:	1029883a 	mov	r20,r2
 4024810:	1823883a 	mov	r17,r3
 4024814:	402e5e00 	call	402e5e0 <__floatsidf>
 4024818:	019427f4 	movhi	r6,20639
 402481c:	01cff4f4 	movhi	r7,16339
 4024820:	319e7ec4 	addi	r6,r6,31227
 4024824:	39d104c4 	addi	r7,r7,17427
 4024828:	1009883a 	mov	r4,r2
 402482c:	180b883a 	mov	r5,r3
 4024830:	402d54c0 	call	402d54c <__muldf3>
 4024834:	100d883a 	mov	r6,r2
 4024838:	180f883a 	mov	r7,r3
 402483c:	a009883a 	mov	r4,r20
 4024840:	880b883a 	mov	r5,r17
 4024844:	402c1600 	call	402c160 <__adddf3>
 4024848:	1009883a 	mov	r4,r2
 402484c:	180b883a 	mov	r5,r3
 4024850:	1029883a 	mov	r20,r2
 4024854:	1823883a 	mov	r17,r3
 4024858:	402e5600 	call	402e560 <__fixdfsi>
 402485c:	000d883a 	mov	r6,zero
 4024860:	000f883a 	mov	r7,zero
 4024864:	a009883a 	mov	r4,r20
 4024868:	880b883a 	mov	r5,r17
 402486c:	d8800515 	stw	r2,20(sp)
 4024870:	402d4580 	call	402d458 <__ledf2>
 4024874:	10028716 	blt	r2,zero,4025294 <_dtoa_r+0xc88>
 4024878:	d8c00517 	ldw	r3,20(sp)
 402487c:	00800584 	movi	r2,22
 4024880:	10c27536 	bltu	r2,r3,4025258 <_dtoa_r+0xc4c>
 4024884:	180490fa 	slli	r2,r3,3
 4024888:	00c100f4 	movhi	r3,1027
 402488c:	18cdb704 	addi	r3,r3,14044
 4024890:	1885883a 	add	r2,r3,r2
 4024894:	11000017 	ldw	r4,0(r2)
 4024898:	11400117 	ldw	r5,4(r2)
 402489c:	900d883a 	mov	r6,r18
 40248a0:	980f883a 	mov	r7,r19
 40248a4:	402d37c0 	call	402d37c <__gedf2>
 40248a8:	00828d0e 	bge	zero,r2,40252e0 <_dtoa_r+0xcd4>
 40248ac:	d9000517 	ldw	r4,20(sp)
 40248b0:	d8000e15 	stw	zero,56(sp)
 40248b4:	213fffc4 	addi	r4,r4,-1
 40248b8:	d9000515 	stw	r4,20(sp)
 40248bc:	b42dc83a 	sub	r22,r22,r16
 40248c0:	b5bfffc4 	addi	r22,r22,-1
 40248c4:	b0026f16 	blt	r22,zero,4025284 <_dtoa_r+0xc78>
 40248c8:	d8000815 	stw	zero,32(sp)
 40248cc:	d9c00517 	ldw	r7,20(sp)
 40248d0:	38026416 	blt	r7,zero,4025264 <_dtoa_r+0xc58>
 40248d4:	b1ed883a 	add	r22,r22,r7
 40248d8:	d9c00d15 	stw	r7,52(sp)
 40248dc:	d8000a15 	stw	zero,40(sp)
 40248e0:	d9800317 	ldw	r6,12(sp)
 40248e4:	00800244 	movi	r2,9
 40248e8:	11811436 	bltu	r2,r6,4024d3c <_dtoa_r+0x730>
 40248ec:	00800144 	movi	r2,5
 40248f0:	1184e10e 	bge	r2,r6,4025c78 <_dtoa_r+0x166c>
 40248f4:	31bfff04 	addi	r6,r6,-4
 40248f8:	d9800315 	stw	r6,12(sp)
 40248fc:	0023883a 	mov	r17,zero
 4024900:	d9800317 	ldw	r6,12(sp)
 4024904:	008000c4 	movi	r2,3
 4024908:	30836726 	beq	r6,r2,40256a8 <_dtoa_r+0x109c>
 402490c:	1183410e 	bge	r2,r6,4025614 <_dtoa_r+0x1008>
 4024910:	d9c00317 	ldw	r7,12(sp)
 4024914:	00800104 	movi	r2,4
 4024918:	38827c26 	beq	r7,r2,402530c <_dtoa_r+0xd00>
 402491c:	00800144 	movi	r2,5
 4024920:	3884c41e 	bne	r7,r2,4025c34 <_dtoa_r+0x1628>
 4024924:	00800044 	movi	r2,1
 4024928:	d8800b15 	stw	r2,44(sp)
 402492c:	d8c00517 	ldw	r3,20(sp)
 4024930:	d9002217 	ldw	r4,136(sp)
 4024934:	1907883a 	add	r3,r3,r4
 4024938:	19800044 	addi	r6,r3,1
 402493c:	d8c00c15 	stw	r3,48(sp)
 4024940:	d9800615 	stw	r6,24(sp)
 4024944:	0183a40e 	bge	zero,r6,40257d8 <_dtoa_r+0x11cc>
 4024948:	d9800617 	ldw	r6,24(sp)
 402494c:	3021883a 	mov	r16,r6
 4024950:	e0001115 	stw	zero,68(fp)
 4024954:	008005c4 	movi	r2,23
 4024958:	1184c92e 	bgeu	r2,r6,4025c80 <_dtoa_r+0x1674>
 402495c:	00c00044 	movi	r3,1
 4024960:	00800104 	movi	r2,4
 4024964:	1085883a 	add	r2,r2,r2
 4024968:	11000504 	addi	r4,r2,20
 402496c:	180b883a 	mov	r5,r3
 4024970:	18c00044 	addi	r3,r3,1
 4024974:	313ffb2e 	bgeu	r6,r4,4024964 <__alt_data_end+0xfffe4964>
 4024978:	e1401115 	stw	r5,68(fp)
 402497c:	e009883a 	mov	r4,fp
 4024980:	40276900 	call	4027690 <_Balloc>
 4024984:	d8800715 	stw	r2,28(sp)
 4024988:	e0801015 	stw	r2,64(fp)
 402498c:	00800384 	movi	r2,14
 4024990:	1400f736 	bltu	r2,r16,4024d70 <_dtoa_r+0x764>
 4024994:	8800f626 	beq	r17,zero,4024d70 <_dtoa_r+0x764>
 4024998:	d9c00517 	ldw	r7,20(sp)
 402499c:	01c39a0e 	bge	zero,r7,4025808 <_dtoa_r+0x11fc>
 40249a0:	388003cc 	andi	r2,r7,15
 40249a4:	100490fa 	slli	r2,r2,3
 40249a8:	382bd13a 	srai	r21,r7,4
 40249ac:	00c100f4 	movhi	r3,1027
 40249b0:	18cdb704 	addi	r3,r3,14044
 40249b4:	1885883a 	add	r2,r3,r2
 40249b8:	a8c0040c 	andi	r3,r21,16
 40249bc:	12400017 	ldw	r9,0(r2)
 40249c0:	12000117 	ldw	r8,4(r2)
 40249c4:	18037926 	beq	r3,zero,40257ac <_dtoa_r+0x11a0>
 40249c8:	008100f4 	movhi	r2,1027
 40249cc:	108dad04 	addi	r2,r2,14004
 40249d0:	11800817 	ldw	r6,32(r2)
 40249d4:	11c00917 	ldw	r7,36(r2)
 40249d8:	9009883a 	mov	r4,r18
 40249dc:	980b883a 	mov	r5,r19
 40249e0:	da001715 	stw	r8,92(sp)
 40249e4:	da401615 	stw	r9,88(sp)
 40249e8:	402ca0c0 	call	402ca0c <__divdf3>
 40249ec:	da001717 	ldw	r8,92(sp)
 40249f0:	da401617 	ldw	r9,88(sp)
 40249f4:	ad4003cc 	andi	r21,r21,15
 40249f8:	040000c4 	movi	r16,3
 40249fc:	1023883a 	mov	r17,r2
 4024a00:	1829883a 	mov	r20,r3
 4024a04:	a8001126 	beq	r21,zero,4024a4c <_dtoa_r+0x440>
 4024a08:	05c100f4 	movhi	r23,1027
 4024a0c:	bdcdad04 	addi	r23,r23,14004
 4024a10:	4805883a 	mov	r2,r9
 4024a14:	4007883a 	mov	r3,r8
 4024a18:	a980004c 	andi	r6,r21,1
 4024a1c:	1009883a 	mov	r4,r2
 4024a20:	a82bd07a 	srai	r21,r21,1
 4024a24:	180b883a 	mov	r5,r3
 4024a28:	30000426 	beq	r6,zero,4024a3c <_dtoa_r+0x430>
 4024a2c:	b9800017 	ldw	r6,0(r23)
 4024a30:	b9c00117 	ldw	r7,4(r23)
 4024a34:	84000044 	addi	r16,r16,1
 4024a38:	402d54c0 	call	402d54c <__muldf3>
 4024a3c:	bdc00204 	addi	r23,r23,8
 4024a40:	a83ff51e 	bne	r21,zero,4024a18 <__alt_data_end+0xfffe4a18>
 4024a44:	1013883a 	mov	r9,r2
 4024a48:	1811883a 	mov	r8,r3
 4024a4c:	480d883a 	mov	r6,r9
 4024a50:	400f883a 	mov	r7,r8
 4024a54:	8809883a 	mov	r4,r17
 4024a58:	a00b883a 	mov	r5,r20
 4024a5c:	402ca0c0 	call	402ca0c <__divdf3>
 4024a60:	d8800f15 	stw	r2,60(sp)
 4024a64:	d8c01015 	stw	r3,64(sp)
 4024a68:	d8c00e17 	ldw	r3,56(sp)
 4024a6c:	18000626 	beq	r3,zero,4024a88 <_dtoa_r+0x47c>
 4024a70:	d9000f17 	ldw	r4,60(sp)
 4024a74:	d9401017 	ldw	r5,64(sp)
 4024a78:	000d883a 	mov	r6,zero
 4024a7c:	01cffc34 	movhi	r7,16368
 4024a80:	402d4580 	call	402d458 <__ledf2>
 4024a84:	10040b16 	blt	r2,zero,4025ab4 <_dtoa_r+0x14a8>
 4024a88:	8009883a 	mov	r4,r16
 4024a8c:	402e5e00 	call	402e5e0 <__floatsidf>
 4024a90:	d9800f17 	ldw	r6,60(sp)
 4024a94:	d9c01017 	ldw	r7,64(sp)
 4024a98:	1009883a 	mov	r4,r2
 4024a9c:	180b883a 	mov	r5,r3
 4024aa0:	402d54c0 	call	402d54c <__muldf3>
 4024aa4:	000d883a 	mov	r6,zero
 4024aa8:	01d00734 	movhi	r7,16412
 4024aac:	1009883a 	mov	r4,r2
 4024ab0:	180b883a 	mov	r5,r3
 4024ab4:	402c1600 	call	402c160 <__adddf3>
 4024ab8:	1021883a 	mov	r16,r2
 4024abc:	d8800617 	ldw	r2,24(sp)
 4024ac0:	047f3034 	movhi	r17,64704
 4024ac4:	1c63883a 	add	r17,r3,r17
 4024ac8:	10031826 	beq	r2,zero,402572c <_dtoa_r+0x1120>
 4024acc:	d8c00517 	ldw	r3,20(sp)
 4024ad0:	db000617 	ldw	r12,24(sp)
 4024ad4:	d8c01315 	stw	r3,76(sp)
 4024ad8:	d9000b17 	ldw	r4,44(sp)
 4024adc:	20038f26 	beq	r4,zero,402591c <_dtoa_r+0x1310>
 4024ae0:	60bfffc4 	addi	r2,r12,-1
 4024ae4:	100490fa 	slli	r2,r2,3
 4024ae8:	00c100f4 	movhi	r3,1027
 4024aec:	18cdb704 	addi	r3,r3,14044
 4024af0:	1885883a 	add	r2,r3,r2
 4024af4:	11800017 	ldw	r6,0(r2)
 4024af8:	11c00117 	ldw	r7,4(r2)
 4024afc:	d8800717 	ldw	r2,28(sp)
 4024b00:	0009883a 	mov	r4,zero
 4024b04:	014ff834 	movhi	r5,16352
 4024b08:	db001615 	stw	r12,88(sp)
 4024b0c:	15c00044 	addi	r23,r2,1
 4024b10:	402ca0c0 	call	402ca0c <__divdf3>
 4024b14:	800d883a 	mov	r6,r16
 4024b18:	880f883a 	mov	r7,r17
 4024b1c:	1009883a 	mov	r4,r2
 4024b20:	180b883a 	mov	r5,r3
 4024b24:	402dc640 	call	402dc64 <__subdf3>
 4024b28:	d9401017 	ldw	r5,64(sp)
 4024b2c:	d9000f17 	ldw	r4,60(sp)
 4024b30:	102b883a 	mov	r21,r2
 4024b34:	d8c01215 	stw	r3,72(sp)
 4024b38:	402e5600 	call	402e560 <__fixdfsi>
 4024b3c:	1009883a 	mov	r4,r2
 4024b40:	1029883a 	mov	r20,r2
 4024b44:	402e5e00 	call	402e5e0 <__floatsidf>
 4024b48:	d9000f17 	ldw	r4,60(sp)
 4024b4c:	d9401017 	ldw	r5,64(sp)
 4024b50:	100d883a 	mov	r6,r2
 4024b54:	180f883a 	mov	r7,r3
 4024b58:	402dc640 	call	402dc64 <__subdf3>
 4024b5c:	1823883a 	mov	r17,r3
 4024b60:	d8c00717 	ldw	r3,28(sp)
 4024b64:	d9401217 	ldw	r5,72(sp)
 4024b68:	a2000c04 	addi	r8,r20,48
 4024b6c:	1021883a 	mov	r16,r2
 4024b70:	1a000005 	stb	r8,0(r3)
 4024b74:	800d883a 	mov	r6,r16
 4024b78:	880f883a 	mov	r7,r17
 4024b7c:	a809883a 	mov	r4,r21
 4024b80:	4029883a 	mov	r20,r8
 4024b84:	402d37c0 	call	402d37c <__gedf2>
 4024b88:	00841d16 	blt	zero,r2,4025c00 <_dtoa_r+0x15f4>
 4024b8c:	800d883a 	mov	r6,r16
 4024b90:	880f883a 	mov	r7,r17
 4024b94:	0009883a 	mov	r4,zero
 4024b98:	014ffc34 	movhi	r5,16368
 4024b9c:	402dc640 	call	402dc64 <__subdf3>
 4024ba0:	d9401217 	ldw	r5,72(sp)
 4024ba4:	100d883a 	mov	r6,r2
 4024ba8:	180f883a 	mov	r7,r3
 4024bac:	a809883a 	mov	r4,r21
 4024bb0:	402d37c0 	call	402d37c <__gedf2>
 4024bb4:	db001617 	ldw	r12,88(sp)
 4024bb8:	00840e16 	blt	zero,r2,4025bf4 <_dtoa_r+0x15e8>
 4024bbc:	00800044 	movi	r2,1
 4024bc0:	13006b0e 	bge	r2,r12,4024d70 <_dtoa_r+0x764>
 4024bc4:	d9000717 	ldw	r4,28(sp)
 4024bc8:	dd800f15 	stw	r22,60(sp)
 4024bcc:	dcc01015 	stw	r19,64(sp)
 4024bd0:	2319883a 	add	r12,r4,r12
 4024bd4:	dcc01217 	ldw	r19,72(sp)
 4024bd8:	602d883a 	mov	r22,r12
 4024bdc:	dc801215 	stw	r18,72(sp)
 4024be0:	b825883a 	mov	r18,r23
 4024be4:	00000906 	br	4024c0c <_dtoa_r+0x600>
 4024be8:	402dc640 	call	402dc64 <__subdf3>
 4024bec:	a80d883a 	mov	r6,r21
 4024bf0:	980f883a 	mov	r7,r19
 4024bf4:	1009883a 	mov	r4,r2
 4024bf8:	180b883a 	mov	r5,r3
 4024bfc:	402d4580 	call	402d458 <__ledf2>
 4024c00:	1003e816 	blt	r2,zero,4025ba4 <_dtoa_r+0x1598>
 4024c04:	b825883a 	mov	r18,r23
 4024c08:	bd83e926 	beq	r23,r22,4025bb0 <_dtoa_r+0x15a4>
 4024c0c:	a809883a 	mov	r4,r21
 4024c10:	980b883a 	mov	r5,r19
 4024c14:	000d883a 	mov	r6,zero
 4024c18:	01d00934 	movhi	r7,16420
 4024c1c:	402d54c0 	call	402d54c <__muldf3>
 4024c20:	000d883a 	mov	r6,zero
 4024c24:	01d00934 	movhi	r7,16420
 4024c28:	8009883a 	mov	r4,r16
 4024c2c:	880b883a 	mov	r5,r17
 4024c30:	102b883a 	mov	r21,r2
 4024c34:	1827883a 	mov	r19,r3
 4024c38:	402d54c0 	call	402d54c <__muldf3>
 4024c3c:	180b883a 	mov	r5,r3
 4024c40:	1009883a 	mov	r4,r2
 4024c44:	1821883a 	mov	r16,r3
 4024c48:	1023883a 	mov	r17,r2
 4024c4c:	402e5600 	call	402e560 <__fixdfsi>
 4024c50:	1009883a 	mov	r4,r2
 4024c54:	1029883a 	mov	r20,r2
 4024c58:	402e5e00 	call	402e5e0 <__floatsidf>
 4024c5c:	8809883a 	mov	r4,r17
 4024c60:	800b883a 	mov	r5,r16
 4024c64:	100d883a 	mov	r6,r2
 4024c68:	180f883a 	mov	r7,r3
 4024c6c:	402dc640 	call	402dc64 <__subdf3>
 4024c70:	a5000c04 	addi	r20,r20,48
 4024c74:	a80d883a 	mov	r6,r21
 4024c78:	980f883a 	mov	r7,r19
 4024c7c:	1009883a 	mov	r4,r2
 4024c80:	180b883a 	mov	r5,r3
 4024c84:	95000005 	stb	r20,0(r18)
 4024c88:	1021883a 	mov	r16,r2
 4024c8c:	1823883a 	mov	r17,r3
 4024c90:	402d4580 	call	402d458 <__ledf2>
 4024c94:	bdc00044 	addi	r23,r23,1
 4024c98:	800d883a 	mov	r6,r16
 4024c9c:	880f883a 	mov	r7,r17
 4024ca0:	0009883a 	mov	r4,zero
 4024ca4:	014ffc34 	movhi	r5,16368
 4024ca8:	103fcf0e 	bge	r2,zero,4024be8 <__alt_data_end+0xfffe4be8>
 4024cac:	d8c01317 	ldw	r3,76(sp)
 4024cb0:	d8c00515 	stw	r3,20(sp)
 4024cb4:	d9400917 	ldw	r5,36(sp)
 4024cb8:	e009883a 	mov	r4,fp
 4024cbc:	40277380 	call	4027738 <_Bfree>
 4024cc0:	d9000517 	ldw	r4,20(sp)
 4024cc4:	d9802317 	ldw	r6,140(sp)
 4024cc8:	d9c02517 	ldw	r7,148(sp)
 4024ccc:	b8000005 	stb	zero,0(r23)
 4024cd0:	20800044 	addi	r2,r4,1
 4024cd4:	30800015 	stw	r2,0(r6)
 4024cd8:	3802aa26 	beq	r7,zero,4025784 <_dtoa_r+0x1178>
 4024cdc:	3dc00015 	stw	r23,0(r7)
 4024ce0:	d8800717 	ldw	r2,28(sp)
 4024ce4:	003e7906 	br	40246cc <__alt_data_end+0xfffe46cc>
 4024ce8:	00800434 	movhi	r2,16
 4024cec:	10bfffc4 	addi	r2,r2,-1
 4024cf0:	88a2703a 	and	r17,r17,r2
 4024cf4:	883e851e 	bne	r17,zero,402470c <__alt_data_end+0xfffe470c>
 4024cf8:	008100f4 	movhi	r2,1027
 4024cfc:	108d9804 	addi	r2,r2,13920
 4024d00:	003e8406 	br	4024714 <__alt_data_end+0xfffe4714>
 4024d04:	10c00204 	addi	r3,r2,8
 4024d08:	003e8706 	br	4024728 <__alt_data_end+0xfffe4728>
 4024d0c:	01400434 	movhi	r5,16
 4024d10:	297fffc4 	addi	r5,r5,-1
 4024d14:	994a703a 	and	r5,r19,r5
 4024d18:	9009883a 	mov	r4,r18
 4024d1c:	843f0044 	addi	r16,r16,-1023
 4024d20:	294ffc34 	orhi	r5,r5,16368
 4024d24:	dd800217 	ldw	r22,8(sp)
 4024d28:	d8001115 	stw	zero,68(sp)
 4024d2c:	003ea506 	br	40247c4 <__alt_data_end+0xfffe47c4>
 4024d30:	008100f4 	movhi	r2,1027
 4024d34:	108d8f04 	addi	r2,r2,13884
 4024d38:	003e6406 	br	40246cc <__alt_data_end+0xfffe46cc>
 4024d3c:	e0001115 	stw	zero,68(fp)
 4024d40:	000b883a 	mov	r5,zero
 4024d44:	e009883a 	mov	r4,fp
 4024d48:	40276900 	call	4027690 <_Balloc>
 4024d4c:	01bfffc4 	movi	r6,-1
 4024d50:	01c00044 	movi	r7,1
 4024d54:	d8800715 	stw	r2,28(sp)
 4024d58:	d9800c15 	stw	r6,48(sp)
 4024d5c:	e0801015 	stw	r2,64(fp)
 4024d60:	d8000315 	stw	zero,12(sp)
 4024d64:	d9c00b15 	stw	r7,44(sp)
 4024d68:	d9800615 	stw	r6,24(sp)
 4024d6c:	d8002215 	stw	zero,136(sp)
 4024d70:	d8800117 	ldw	r2,4(sp)
 4024d74:	10008916 	blt	r2,zero,4024f9c <_dtoa_r+0x990>
 4024d78:	d9000517 	ldw	r4,20(sp)
 4024d7c:	00c00384 	movi	r3,14
 4024d80:	19008616 	blt	r3,r4,4024f9c <_dtoa_r+0x990>
 4024d84:	200490fa 	slli	r2,r4,3
 4024d88:	00c100f4 	movhi	r3,1027
 4024d8c:	d9802217 	ldw	r6,136(sp)
 4024d90:	18cdb704 	addi	r3,r3,14044
 4024d94:	1885883a 	add	r2,r3,r2
 4024d98:	14000017 	ldw	r16,0(r2)
 4024d9c:	14400117 	ldw	r17,4(r2)
 4024da0:	30016316 	blt	r6,zero,4025330 <_dtoa_r+0xd24>
 4024da4:	800d883a 	mov	r6,r16
 4024da8:	880f883a 	mov	r7,r17
 4024dac:	9009883a 	mov	r4,r18
 4024db0:	980b883a 	mov	r5,r19
 4024db4:	402ca0c0 	call	402ca0c <__divdf3>
 4024db8:	180b883a 	mov	r5,r3
 4024dbc:	1009883a 	mov	r4,r2
 4024dc0:	402e5600 	call	402e560 <__fixdfsi>
 4024dc4:	1009883a 	mov	r4,r2
 4024dc8:	102b883a 	mov	r21,r2
 4024dcc:	402e5e00 	call	402e5e0 <__floatsidf>
 4024dd0:	800d883a 	mov	r6,r16
 4024dd4:	880f883a 	mov	r7,r17
 4024dd8:	1009883a 	mov	r4,r2
 4024ddc:	180b883a 	mov	r5,r3
 4024de0:	402d54c0 	call	402d54c <__muldf3>
 4024de4:	100d883a 	mov	r6,r2
 4024de8:	180f883a 	mov	r7,r3
 4024dec:	9009883a 	mov	r4,r18
 4024df0:	980b883a 	mov	r5,r19
 4024df4:	402dc640 	call	402dc64 <__subdf3>
 4024df8:	d9c00717 	ldw	r7,28(sp)
 4024dfc:	1009883a 	mov	r4,r2
 4024e00:	a8800c04 	addi	r2,r21,48
 4024e04:	38800005 	stb	r2,0(r7)
 4024e08:	3dc00044 	addi	r23,r7,1
 4024e0c:	d9c00617 	ldw	r7,24(sp)
 4024e10:	01800044 	movi	r6,1
 4024e14:	180b883a 	mov	r5,r3
 4024e18:	2005883a 	mov	r2,r4
 4024e1c:	39803826 	beq	r7,r6,4024f00 <_dtoa_r+0x8f4>
 4024e20:	000d883a 	mov	r6,zero
 4024e24:	01d00934 	movhi	r7,16420
 4024e28:	402d54c0 	call	402d54c <__muldf3>
 4024e2c:	000d883a 	mov	r6,zero
 4024e30:	000f883a 	mov	r7,zero
 4024e34:	1009883a 	mov	r4,r2
 4024e38:	180b883a 	mov	r5,r3
 4024e3c:	1025883a 	mov	r18,r2
 4024e40:	1827883a 	mov	r19,r3
 4024e44:	402d2f40 	call	402d2f4 <__eqdf2>
 4024e48:	103f9a26 	beq	r2,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4024e4c:	d9c00617 	ldw	r7,24(sp)
 4024e50:	d8c00717 	ldw	r3,28(sp)
 4024e54:	b829883a 	mov	r20,r23
 4024e58:	38bfffc4 	addi	r2,r7,-1
 4024e5c:	18ad883a 	add	r22,r3,r2
 4024e60:	00000a06 	br	4024e8c <_dtoa_r+0x880>
 4024e64:	402d54c0 	call	402d54c <__muldf3>
 4024e68:	000d883a 	mov	r6,zero
 4024e6c:	000f883a 	mov	r7,zero
 4024e70:	1009883a 	mov	r4,r2
 4024e74:	180b883a 	mov	r5,r3
 4024e78:	1025883a 	mov	r18,r2
 4024e7c:	1827883a 	mov	r19,r3
 4024e80:	b829883a 	mov	r20,r23
 4024e84:	402d2f40 	call	402d2f4 <__eqdf2>
 4024e88:	103f8a26 	beq	r2,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4024e8c:	800d883a 	mov	r6,r16
 4024e90:	880f883a 	mov	r7,r17
 4024e94:	9009883a 	mov	r4,r18
 4024e98:	980b883a 	mov	r5,r19
 4024e9c:	402ca0c0 	call	402ca0c <__divdf3>
 4024ea0:	180b883a 	mov	r5,r3
 4024ea4:	1009883a 	mov	r4,r2
 4024ea8:	402e5600 	call	402e560 <__fixdfsi>
 4024eac:	1009883a 	mov	r4,r2
 4024eb0:	102b883a 	mov	r21,r2
 4024eb4:	402e5e00 	call	402e5e0 <__floatsidf>
 4024eb8:	800d883a 	mov	r6,r16
 4024ebc:	880f883a 	mov	r7,r17
 4024ec0:	1009883a 	mov	r4,r2
 4024ec4:	180b883a 	mov	r5,r3
 4024ec8:	402d54c0 	call	402d54c <__muldf3>
 4024ecc:	100d883a 	mov	r6,r2
 4024ed0:	180f883a 	mov	r7,r3
 4024ed4:	9009883a 	mov	r4,r18
 4024ed8:	980b883a 	mov	r5,r19
 4024edc:	402dc640 	call	402dc64 <__subdf3>
 4024ee0:	aa000c04 	addi	r8,r21,48
 4024ee4:	a2000005 	stb	r8,0(r20)
 4024ee8:	000d883a 	mov	r6,zero
 4024eec:	01d00934 	movhi	r7,16420
 4024ef0:	1009883a 	mov	r4,r2
 4024ef4:	180b883a 	mov	r5,r3
 4024ef8:	a5c00044 	addi	r23,r20,1
 4024efc:	b53fd91e 	bne	r22,r20,4024e64 <__alt_data_end+0xfffe4e64>
 4024f00:	100d883a 	mov	r6,r2
 4024f04:	180f883a 	mov	r7,r3
 4024f08:	1009883a 	mov	r4,r2
 4024f0c:	180b883a 	mov	r5,r3
 4024f10:	402c1600 	call	402c160 <__adddf3>
 4024f14:	100d883a 	mov	r6,r2
 4024f18:	180f883a 	mov	r7,r3
 4024f1c:	8009883a 	mov	r4,r16
 4024f20:	880b883a 	mov	r5,r17
 4024f24:	1027883a 	mov	r19,r2
 4024f28:	1825883a 	mov	r18,r3
 4024f2c:	402d4580 	call	402d458 <__ledf2>
 4024f30:	10000816 	blt	r2,zero,4024f54 <_dtoa_r+0x948>
 4024f34:	980d883a 	mov	r6,r19
 4024f38:	900f883a 	mov	r7,r18
 4024f3c:	8009883a 	mov	r4,r16
 4024f40:	880b883a 	mov	r5,r17
 4024f44:	402d2f40 	call	402d2f4 <__eqdf2>
 4024f48:	103f5a1e 	bne	r2,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4024f4c:	ad40004c 	andi	r21,r21,1
 4024f50:	a83f5826 	beq	r21,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4024f54:	bd3fffc3 	ldbu	r20,-1(r23)
 4024f58:	b8bfffc4 	addi	r2,r23,-1
 4024f5c:	1007883a 	mov	r3,r2
 4024f60:	01400e44 	movi	r5,57
 4024f64:	d9800717 	ldw	r6,28(sp)
 4024f68:	00000506 	br	4024f80 <_dtoa_r+0x974>
 4024f6c:	18ffffc4 	addi	r3,r3,-1
 4024f70:	11824726 	beq	r2,r6,4025890 <_dtoa_r+0x1284>
 4024f74:	1d000003 	ldbu	r20,0(r3)
 4024f78:	102f883a 	mov	r23,r2
 4024f7c:	10bfffc4 	addi	r2,r2,-1
 4024f80:	a1003fcc 	andi	r4,r20,255
 4024f84:	2100201c 	xori	r4,r4,128
 4024f88:	213fe004 	addi	r4,r4,-128
 4024f8c:	217ff726 	beq	r4,r5,4024f6c <__alt_data_end+0xfffe4f6c>
 4024f90:	a2000044 	addi	r8,r20,1
 4024f94:	12000005 	stb	r8,0(r2)
 4024f98:	003f4606 	br	4024cb4 <__alt_data_end+0xfffe4cb4>
 4024f9c:	d9000b17 	ldw	r4,44(sp)
 4024fa0:	2000c826 	beq	r4,zero,40252c4 <_dtoa_r+0xcb8>
 4024fa4:	d9800317 	ldw	r6,12(sp)
 4024fa8:	00c00044 	movi	r3,1
 4024fac:	1980f90e 	bge	r3,r6,4025394 <_dtoa_r+0xd88>
 4024fb0:	d8800617 	ldw	r2,24(sp)
 4024fb4:	d8c00a17 	ldw	r3,40(sp)
 4024fb8:	157fffc4 	addi	r21,r2,-1
 4024fbc:	1d41f316 	blt	r3,r21,402578c <_dtoa_r+0x1180>
 4024fc0:	1d6bc83a 	sub	r21,r3,r21
 4024fc4:	d9c00617 	ldw	r7,24(sp)
 4024fc8:	3802aa16 	blt	r7,zero,4025a74 <_dtoa_r+0x1468>
 4024fcc:	dd000817 	ldw	r20,32(sp)
 4024fd0:	d8800617 	ldw	r2,24(sp)
 4024fd4:	d8c00817 	ldw	r3,32(sp)
 4024fd8:	01400044 	movi	r5,1
 4024fdc:	e009883a 	mov	r4,fp
 4024fe0:	1887883a 	add	r3,r3,r2
 4024fe4:	d8c00815 	stw	r3,32(sp)
 4024fe8:	b0ad883a 	add	r22,r22,r2
 4024fec:	4027a9c0 	call	4027a9c <__i2b>
 4024ff0:	1023883a 	mov	r17,r2
 4024ff4:	a0000826 	beq	r20,zero,4025018 <_dtoa_r+0xa0c>
 4024ff8:	0580070e 	bge	zero,r22,4025018 <_dtoa_r+0xa0c>
 4024ffc:	a005883a 	mov	r2,r20
 4025000:	b500b916 	blt	r22,r20,40252e8 <_dtoa_r+0xcdc>
 4025004:	d9000817 	ldw	r4,32(sp)
 4025008:	a0a9c83a 	sub	r20,r20,r2
 402500c:	b0adc83a 	sub	r22,r22,r2
 4025010:	2089c83a 	sub	r4,r4,r2
 4025014:	d9000815 	stw	r4,32(sp)
 4025018:	d9800a17 	ldw	r6,40(sp)
 402501c:	0181810e 	bge	zero,r6,4025624 <_dtoa_r+0x1018>
 4025020:	d9c00b17 	ldw	r7,44(sp)
 4025024:	3800b326 	beq	r7,zero,40252f4 <_dtoa_r+0xce8>
 4025028:	a800b226 	beq	r21,zero,40252f4 <_dtoa_r+0xce8>
 402502c:	880b883a 	mov	r5,r17
 4025030:	a80d883a 	mov	r6,r21
 4025034:	e009883a 	mov	r4,fp
 4025038:	4027cd00 	call	4027cd0 <__pow5mult>
 402503c:	d9800917 	ldw	r6,36(sp)
 4025040:	100b883a 	mov	r5,r2
 4025044:	e009883a 	mov	r4,fp
 4025048:	1023883a 	mov	r17,r2
 402504c:	4027ad80 	call	4027ad8 <__multiply>
 4025050:	1021883a 	mov	r16,r2
 4025054:	d8800a17 	ldw	r2,40(sp)
 4025058:	d9400917 	ldw	r5,36(sp)
 402505c:	e009883a 	mov	r4,fp
 4025060:	1545c83a 	sub	r2,r2,r21
 4025064:	d8800a15 	stw	r2,40(sp)
 4025068:	40277380 	call	4027738 <_Bfree>
 402506c:	d8c00a17 	ldw	r3,40(sp)
 4025070:	18009f1e 	bne	r3,zero,40252f0 <_dtoa_r+0xce4>
 4025074:	05c00044 	movi	r23,1
 4025078:	e009883a 	mov	r4,fp
 402507c:	b80b883a 	mov	r5,r23
 4025080:	4027a9c0 	call	4027a9c <__i2b>
 4025084:	d9000d17 	ldw	r4,52(sp)
 4025088:	102b883a 	mov	r21,r2
 402508c:	2000ce26 	beq	r4,zero,40253c8 <_dtoa_r+0xdbc>
 4025090:	200d883a 	mov	r6,r4
 4025094:	100b883a 	mov	r5,r2
 4025098:	e009883a 	mov	r4,fp
 402509c:	4027cd00 	call	4027cd0 <__pow5mult>
 40250a0:	d9800317 	ldw	r6,12(sp)
 40250a4:	102b883a 	mov	r21,r2
 40250a8:	b981810e 	bge	r23,r6,40256b0 <_dtoa_r+0x10a4>
 40250ac:	0027883a 	mov	r19,zero
 40250b0:	a8800417 	ldw	r2,16(r21)
 40250b4:	05c00804 	movi	r23,32
 40250b8:	10800104 	addi	r2,r2,4
 40250bc:	1085883a 	add	r2,r2,r2
 40250c0:	1085883a 	add	r2,r2,r2
 40250c4:	a885883a 	add	r2,r21,r2
 40250c8:	11000017 	ldw	r4,0(r2)
 40250cc:	40279840 	call	4027984 <__hi0bits>
 40250d0:	b885c83a 	sub	r2,r23,r2
 40250d4:	1585883a 	add	r2,r2,r22
 40250d8:	108007cc 	andi	r2,r2,31
 40250dc:	1000b326 	beq	r2,zero,40253ac <_dtoa_r+0xda0>
 40250e0:	00c00804 	movi	r3,32
 40250e4:	1887c83a 	sub	r3,r3,r2
 40250e8:	01000104 	movi	r4,4
 40250ec:	20c2cd0e 	bge	r4,r3,4025c24 <_dtoa_r+0x1618>
 40250f0:	00c00704 	movi	r3,28
 40250f4:	1885c83a 	sub	r2,r3,r2
 40250f8:	d8c00817 	ldw	r3,32(sp)
 40250fc:	a0a9883a 	add	r20,r20,r2
 4025100:	b0ad883a 	add	r22,r22,r2
 4025104:	1887883a 	add	r3,r3,r2
 4025108:	d8c00815 	stw	r3,32(sp)
 402510c:	d9800817 	ldw	r6,32(sp)
 4025110:	0180040e 	bge	zero,r6,4025124 <_dtoa_r+0xb18>
 4025114:	800b883a 	mov	r5,r16
 4025118:	e009883a 	mov	r4,fp
 402511c:	4027e100 	call	4027e10 <__lshift>
 4025120:	1021883a 	mov	r16,r2
 4025124:	0580050e 	bge	zero,r22,402513c <_dtoa_r+0xb30>
 4025128:	a80b883a 	mov	r5,r21
 402512c:	b00d883a 	mov	r6,r22
 4025130:	e009883a 	mov	r4,fp
 4025134:	4027e100 	call	4027e10 <__lshift>
 4025138:	102b883a 	mov	r21,r2
 402513c:	d9c00e17 	ldw	r7,56(sp)
 4025140:	3801211e 	bne	r7,zero,40255c8 <_dtoa_r+0xfbc>
 4025144:	d9800617 	ldw	r6,24(sp)
 4025148:	0181380e 	bge	zero,r6,402562c <_dtoa_r+0x1020>
 402514c:	d8c00b17 	ldw	r3,44(sp)
 4025150:	1800ab1e 	bne	r3,zero,4025400 <_dtoa_r+0xdf4>
 4025154:	dc800717 	ldw	r18,28(sp)
 4025158:	dcc00617 	ldw	r19,24(sp)
 402515c:	9029883a 	mov	r20,r18
 4025160:	00000206 	br	402516c <_dtoa_r+0xb60>
 4025164:	40277600 	call	4027760 <__multadd>
 4025168:	1021883a 	mov	r16,r2
 402516c:	a80b883a 	mov	r5,r21
 4025170:	8009883a 	mov	r4,r16
 4025174:	402440c0 	call	402440c <quorem>
 4025178:	10800c04 	addi	r2,r2,48
 402517c:	90800005 	stb	r2,0(r18)
 4025180:	94800044 	addi	r18,r18,1
 4025184:	9507c83a 	sub	r3,r18,r20
 4025188:	000f883a 	mov	r7,zero
 402518c:	01800284 	movi	r6,10
 4025190:	800b883a 	mov	r5,r16
 4025194:	e009883a 	mov	r4,fp
 4025198:	1cfff216 	blt	r3,r19,4025164 <__alt_data_end+0xfffe5164>
 402519c:	1011883a 	mov	r8,r2
 40251a0:	d8800617 	ldw	r2,24(sp)
 40251a4:	0082370e 	bge	zero,r2,4025a84 <_dtoa_r+0x1478>
 40251a8:	d9000717 	ldw	r4,28(sp)
 40251ac:	0025883a 	mov	r18,zero
 40251b0:	20af883a 	add	r23,r4,r2
 40251b4:	01800044 	movi	r6,1
 40251b8:	800b883a 	mov	r5,r16
 40251bc:	e009883a 	mov	r4,fp
 40251c0:	da001715 	stw	r8,92(sp)
 40251c4:	4027e100 	call	4027e10 <__lshift>
 40251c8:	a80b883a 	mov	r5,r21
 40251cc:	1009883a 	mov	r4,r2
 40251d0:	d8800915 	stw	r2,36(sp)
 40251d4:	4027f580 	call	4027f58 <__mcmp>
 40251d8:	da001717 	ldw	r8,92(sp)
 40251dc:	0081800e 	bge	zero,r2,40257e0 <_dtoa_r+0x11d4>
 40251e0:	b93fffc3 	ldbu	r4,-1(r23)
 40251e4:	b8bfffc4 	addi	r2,r23,-1
 40251e8:	1007883a 	mov	r3,r2
 40251ec:	01800e44 	movi	r6,57
 40251f0:	d9c00717 	ldw	r7,28(sp)
 40251f4:	00000506 	br	402520c <_dtoa_r+0xc00>
 40251f8:	18ffffc4 	addi	r3,r3,-1
 40251fc:	11c12326 	beq	r2,r7,402568c <_dtoa_r+0x1080>
 4025200:	19000003 	ldbu	r4,0(r3)
 4025204:	102f883a 	mov	r23,r2
 4025208:	10bfffc4 	addi	r2,r2,-1
 402520c:	21403fcc 	andi	r5,r4,255
 4025210:	2940201c 	xori	r5,r5,128
 4025214:	297fe004 	addi	r5,r5,-128
 4025218:	29bff726 	beq	r5,r6,40251f8 <__alt_data_end+0xfffe51f8>
 402521c:	21000044 	addi	r4,r4,1
 4025220:	11000005 	stb	r4,0(r2)
 4025224:	a80b883a 	mov	r5,r21
 4025228:	e009883a 	mov	r4,fp
 402522c:	40277380 	call	4027738 <_Bfree>
 4025230:	883ea026 	beq	r17,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4025234:	90000426 	beq	r18,zero,4025248 <_dtoa_r+0xc3c>
 4025238:	94400326 	beq	r18,r17,4025248 <_dtoa_r+0xc3c>
 402523c:	900b883a 	mov	r5,r18
 4025240:	e009883a 	mov	r4,fp
 4025244:	40277380 	call	4027738 <_Bfree>
 4025248:	880b883a 	mov	r5,r17
 402524c:	e009883a 	mov	r4,fp
 4025250:	40277380 	call	4027738 <_Bfree>
 4025254:	003e9706 	br	4024cb4 <__alt_data_end+0xfffe4cb4>
 4025258:	01800044 	movi	r6,1
 402525c:	d9800e15 	stw	r6,56(sp)
 4025260:	003d9606 	br	40248bc <__alt_data_end+0xfffe48bc>
 4025264:	d8800817 	ldw	r2,32(sp)
 4025268:	d8c00517 	ldw	r3,20(sp)
 402526c:	d8000d15 	stw	zero,52(sp)
 4025270:	10c5c83a 	sub	r2,r2,r3
 4025274:	00c9c83a 	sub	r4,zero,r3
 4025278:	d8800815 	stw	r2,32(sp)
 402527c:	d9000a15 	stw	r4,40(sp)
 4025280:	003d9706 	br	40248e0 <__alt_data_end+0xfffe48e0>
 4025284:	05adc83a 	sub	r22,zero,r22
 4025288:	dd800815 	stw	r22,32(sp)
 402528c:	002d883a 	mov	r22,zero
 4025290:	003d8e06 	br	40248cc <__alt_data_end+0xfffe48cc>
 4025294:	d9000517 	ldw	r4,20(sp)
 4025298:	402e5e00 	call	402e5e0 <__floatsidf>
 402529c:	100d883a 	mov	r6,r2
 40252a0:	180f883a 	mov	r7,r3
 40252a4:	a009883a 	mov	r4,r20
 40252a8:	880b883a 	mov	r5,r17
 40252ac:	402d2f40 	call	402d2f4 <__eqdf2>
 40252b0:	103d7126 	beq	r2,zero,4024878 <__alt_data_end+0xfffe4878>
 40252b4:	d9c00517 	ldw	r7,20(sp)
 40252b8:	39ffffc4 	addi	r7,r7,-1
 40252bc:	d9c00515 	stw	r7,20(sp)
 40252c0:	003d6d06 	br	4024878 <__alt_data_end+0xfffe4878>
 40252c4:	dd400a17 	ldw	r21,40(sp)
 40252c8:	dd000817 	ldw	r20,32(sp)
 40252cc:	0023883a 	mov	r17,zero
 40252d0:	003f4806 	br	4024ff4 <__alt_data_end+0xfffe4ff4>
 40252d4:	10e3c83a 	sub	r17,r2,r3
 40252d8:	9448983a 	sll	r4,r18,r17
 40252dc:	003d3206 	br	40247a8 <__alt_data_end+0xfffe47a8>
 40252e0:	d8000e15 	stw	zero,56(sp)
 40252e4:	003d7506 	br	40248bc <__alt_data_end+0xfffe48bc>
 40252e8:	b005883a 	mov	r2,r22
 40252ec:	003f4506 	br	4025004 <__alt_data_end+0xfffe5004>
 40252f0:	dc000915 	stw	r16,36(sp)
 40252f4:	d9800a17 	ldw	r6,40(sp)
 40252f8:	d9400917 	ldw	r5,36(sp)
 40252fc:	e009883a 	mov	r4,fp
 4025300:	4027cd00 	call	4027cd0 <__pow5mult>
 4025304:	1021883a 	mov	r16,r2
 4025308:	003f5a06 	br	4025074 <__alt_data_end+0xfffe5074>
 402530c:	01c00044 	movi	r7,1
 4025310:	d9c00b15 	stw	r7,44(sp)
 4025314:	d8802217 	ldw	r2,136(sp)
 4025318:	0081280e 	bge	zero,r2,40257bc <_dtoa_r+0x11b0>
 402531c:	100d883a 	mov	r6,r2
 4025320:	1021883a 	mov	r16,r2
 4025324:	d8800c15 	stw	r2,48(sp)
 4025328:	d8800615 	stw	r2,24(sp)
 402532c:	003d8806 	br	4024950 <__alt_data_end+0xfffe4950>
 4025330:	d8800617 	ldw	r2,24(sp)
 4025334:	00be9b16 	blt	zero,r2,4024da4 <__alt_data_end+0xfffe4da4>
 4025338:	10010f1e 	bne	r2,zero,4025778 <_dtoa_r+0x116c>
 402533c:	880b883a 	mov	r5,r17
 4025340:	000d883a 	mov	r6,zero
 4025344:	01d00534 	movhi	r7,16404
 4025348:	8009883a 	mov	r4,r16
 402534c:	402d54c0 	call	402d54c <__muldf3>
 4025350:	900d883a 	mov	r6,r18
 4025354:	980f883a 	mov	r7,r19
 4025358:	1009883a 	mov	r4,r2
 402535c:	180b883a 	mov	r5,r3
 4025360:	402d37c0 	call	402d37c <__gedf2>
 4025364:	002b883a 	mov	r21,zero
 4025368:	0023883a 	mov	r17,zero
 402536c:	1000bf16 	blt	r2,zero,402566c <_dtoa_r+0x1060>
 4025370:	d9802217 	ldw	r6,136(sp)
 4025374:	ddc00717 	ldw	r23,28(sp)
 4025378:	018c303a 	nor	r6,zero,r6
 402537c:	d9800515 	stw	r6,20(sp)
 4025380:	a80b883a 	mov	r5,r21
 4025384:	e009883a 	mov	r4,fp
 4025388:	40277380 	call	4027738 <_Bfree>
 402538c:	883e4926 	beq	r17,zero,4024cb4 <__alt_data_end+0xfffe4cb4>
 4025390:	003fad06 	br	4025248 <__alt_data_end+0xfffe5248>
 4025394:	d9c01117 	ldw	r7,68(sp)
 4025398:	3801bc26 	beq	r7,zero,4025a8c <_dtoa_r+0x1480>
 402539c:	10810cc4 	addi	r2,r2,1075
 40253a0:	dd400a17 	ldw	r21,40(sp)
 40253a4:	dd000817 	ldw	r20,32(sp)
 40253a8:	003f0a06 	br	4024fd4 <__alt_data_end+0xfffe4fd4>
 40253ac:	00800704 	movi	r2,28
 40253b0:	d9000817 	ldw	r4,32(sp)
 40253b4:	a0a9883a 	add	r20,r20,r2
 40253b8:	b0ad883a 	add	r22,r22,r2
 40253bc:	2089883a 	add	r4,r4,r2
 40253c0:	d9000815 	stw	r4,32(sp)
 40253c4:	003f5106 	br	402510c <__alt_data_end+0xfffe510c>
 40253c8:	d8c00317 	ldw	r3,12(sp)
 40253cc:	b8c1fc0e 	bge	r23,r3,4025bc0 <_dtoa_r+0x15b4>
 40253d0:	0027883a 	mov	r19,zero
 40253d4:	b805883a 	mov	r2,r23
 40253d8:	003f3e06 	br	40250d4 <__alt_data_end+0xfffe50d4>
 40253dc:	880b883a 	mov	r5,r17
 40253e0:	e009883a 	mov	r4,fp
 40253e4:	000f883a 	mov	r7,zero
 40253e8:	01800284 	movi	r6,10
 40253ec:	40277600 	call	4027760 <__multadd>
 40253f0:	d9000c17 	ldw	r4,48(sp)
 40253f4:	1023883a 	mov	r17,r2
 40253f8:	0102040e 	bge	zero,r4,4025c0c <_dtoa_r+0x1600>
 40253fc:	d9000615 	stw	r4,24(sp)
 4025400:	0500050e 	bge	zero,r20,4025418 <_dtoa_r+0xe0c>
 4025404:	880b883a 	mov	r5,r17
 4025408:	a00d883a 	mov	r6,r20
 402540c:	e009883a 	mov	r4,fp
 4025410:	4027e100 	call	4027e10 <__lshift>
 4025414:	1023883a 	mov	r17,r2
 4025418:	9801241e 	bne	r19,zero,40258ac <_dtoa_r+0x12a0>
 402541c:	8829883a 	mov	r20,r17
 4025420:	d9000617 	ldw	r4,24(sp)
 4025424:	dcc00717 	ldw	r19,28(sp)
 4025428:	9480004c 	andi	r18,r18,1
 402542c:	20bfffc4 	addi	r2,r4,-1
 4025430:	9885883a 	add	r2,r19,r2
 4025434:	d8800415 	stw	r2,16(sp)
 4025438:	dc800615 	stw	r18,24(sp)
 402543c:	a80b883a 	mov	r5,r21
 4025440:	8009883a 	mov	r4,r16
 4025444:	402440c0 	call	402440c <quorem>
 4025448:	880b883a 	mov	r5,r17
 402544c:	8009883a 	mov	r4,r16
 4025450:	102f883a 	mov	r23,r2
 4025454:	4027f580 	call	4027f58 <__mcmp>
 4025458:	a80b883a 	mov	r5,r21
 402545c:	a00d883a 	mov	r6,r20
 4025460:	e009883a 	mov	r4,fp
 4025464:	102d883a 	mov	r22,r2
 4025468:	4027fb80 	call	4027fb8 <__mdiff>
 402546c:	1007883a 	mov	r3,r2
 4025470:	10800317 	ldw	r2,12(r2)
 4025474:	bc800c04 	addi	r18,r23,48
 4025478:	180b883a 	mov	r5,r3
 402547c:	10004e1e 	bne	r2,zero,40255b8 <_dtoa_r+0xfac>
 4025480:	8009883a 	mov	r4,r16
 4025484:	d8c01615 	stw	r3,88(sp)
 4025488:	4027f580 	call	4027f58 <__mcmp>
 402548c:	d8c01617 	ldw	r3,88(sp)
 4025490:	e009883a 	mov	r4,fp
 4025494:	d8801615 	stw	r2,88(sp)
 4025498:	180b883a 	mov	r5,r3
 402549c:	40277380 	call	4027738 <_Bfree>
 40254a0:	d8801617 	ldw	r2,88(sp)
 40254a4:	1000041e 	bne	r2,zero,40254b8 <_dtoa_r+0xeac>
 40254a8:	d9800317 	ldw	r6,12(sp)
 40254ac:	3000021e 	bne	r6,zero,40254b8 <_dtoa_r+0xeac>
 40254b0:	d8c00617 	ldw	r3,24(sp)
 40254b4:	18003726 	beq	r3,zero,4025594 <_dtoa_r+0xf88>
 40254b8:	b0002016 	blt	r22,zero,402553c <_dtoa_r+0xf30>
 40254bc:	b000041e 	bne	r22,zero,40254d0 <_dtoa_r+0xec4>
 40254c0:	d9000317 	ldw	r4,12(sp)
 40254c4:	2000021e 	bne	r4,zero,40254d0 <_dtoa_r+0xec4>
 40254c8:	d8c00617 	ldw	r3,24(sp)
 40254cc:	18001b26 	beq	r3,zero,402553c <_dtoa_r+0xf30>
 40254d0:	00810716 	blt	zero,r2,40258f0 <_dtoa_r+0x12e4>
 40254d4:	d8c00417 	ldw	r3,16(sp)
 40254d8:	9d800044 	addi	r22,r19,1
 40254dc:	9c800005 	stb	r18,0(r19)
 40254e0:	b02f883a 	mov	r23,r22
 40254e4:	98c10626 	beq	r19,r3,4025900 <_dtoa_r+0x12f4>
 40254e8:	800b883a 	mov	r5,r16
 40254ec:	000f883a 	mov	r7,zero
 40254f0:	01800284 	movi	r6,10
 40254f4:	e009883a 	mov	r4,fp
 40254f8:	40277600 	call	4027760 <__multadd>
 40254fc:	1021883a 	mov	r16,r2
 4025500:	000f883a 	mov	r7,zero
 4025504:	01800284 	movi	r6,10
 4025508:	880b883a 	mov	r5,r17
 402550c:	e009883a 	mov	r4,fp
 4025510:	8d002526 	beq	r17,r20,40255a8 <_dtoa_r+0xf9c>
 4025514:	40277600 	call	4027760 <__multadd>
 4025518:	a00b883a 	mov	r5,r20
 402551c:	000f883a 	mov	r7,zero
 4025520:	01800284 	movi	r6,10
 4025524:	e009883a 	mov	r4,fp
 4025528:	1023883a 	mov	r17,r2
 402552c:	40277600 	call	4027760 <__multadd>
 4025530:	1029883a 	mov	r20,r2
 4025534:	b027883a 	mov	r19,r22
 4025538:	003fc006 	br	402543c <__alt_data_end+0xfffe543c>
 402553c:	9011883a 	mov	r8,r18
 4025540:	00800e0e 	bge	zero,r2,402557c <_dtoa_r+0xf70>
 4025544:	800b883a 	mov	r5,r16
 4025548:	01800044 	movi	r6,1
 402554c:	e009883a 	mov	r4,fp
 4025550:	da001715 	stw	r8,92(sp)
 4025554:	4027e100 	call	4027e10 <__lshift>
 4025558:	a80b883a 	mov	r5,r21
 402555c:	1009883a 	mov	r4,r2
 4025560:	1021883a 	mov	r16,r2
 4025564:	4027f580 	call	4027f58 <__mcmp>
 4025568:	da001717 	ldw	r8,92(sp)
 402556c:	0081960e 	bge	zero,r2,4025bc8 <_dtoa_r+0x15bc>
 4025570:	00800e44 	movi	r2,57
 4025574:	40817026 	beq	r8,r2,4025b38 <_dtoa_r+0x152c>
 4025578:	ba000c44 	addi	r8,r23,49
 402557c:	8825883a 	mov	r18,r17
 4025580:	9dc00044 	addi	r23,r19,1
 4025584:	9a000005 	stb	r8,0(r19)
 4025588:	a023883a 	mov	r17,r20
 402558c:	dc000915 	stw	r16,36(sp)
 4025590:	003f2406 	br	4025224 <__alt_data_end+0xfffe5224>
 4025594:	00800e44 	movi	r2,57
 4025598:	9011883a 	mov	r8,r18
 402559c:	90816626 	beq	r18,r2,4025b38 <_dtoa_r+0x152c>
 40255a0:	05bff516 	blt	zero,r22,4025578 <__alt_data_end+0xfffe5578>
 40255a4:	003ff506 	br	402557c <__alt_data_end+0xfffe557c>
 40255a8:	40277600 	call	4027760 <__multadd>
 40255ac:	1023883a 	mov	r17,r2
 40255b0:	1029883a 	mov	r20,r2
 40255b4:	003fdf06 	br	4025534 <__alt_data_end+0xfffe5534>
 40255b8:	e009883a 	mov	r4,fp
 40255bc:	40277380 	call	4027738 <_Bfree>
 40255c0:	00800044 	movi	r2,1
 40255c4:	003fbc06 	br	40254b8 <__alt_data_end+0xfffe54b8>
 40255c8:	a80b883a 	mov	r5,r21
 40255cc:	8009883a 	mov	r4,r16
 40255d0:	4027f580 	call	4027f58 <__mcmp>
 40255d4:	103edb0e 	bge	r2,zero,4025144 <__alt_data_end+0xfffe5144>
 40255d8:	800b883a 	mov	r5,r16
 40255dc:	000f883a 	mov	r7,zero
 40255e0:	01800284 	movi	r6,10
 40255e4:	e009883a 	mov	r4,fp
 40255e8:	40277600 	call	4027760 <__multadd>
 40255ec:	1021883a 	mov	r16,r2
 40255f0:	d8800517 	ldw	r2,20(sp)
 40255f4:	d8c00b17 	ldw	r3,44(sp)
 40255f8:	10bfffc4 	addi	r2,r2,-1
 40255fc:	d8800515 	stw	r2,20(sp)
 4025600:	183f761e 	bne	r3,zero,40253dc <__alt_data_end+0xfffe53dc>
 4025604:	d9000c17 	ldw	r4,48(sp)
 4025608:	0101730e 	bge	zero,r4,4025bd8 <_dtoa_r+0x15cc>
 402560c:	d9000615 	stw	r4,24(sp)
 4025610:	003ed006 	br	4025154 <__alt_data_end+0xfffe5154>
 4025614:	00800084 	movi	r2,2
 4025618:	3081861e 	bne	r6,r2,4025c34 <_dtoa_r+0x1628>
 402561c:	d8000b15 	stw	zero,44(sp)
 4025620:	003f3c06 	br	4025314 <__alt_data_end+0xfffe5314>
 4025624:	dc000917 	ldw	r16,36(sp)
 4025628:	003e9206 	br	4025074 <__alt_data_end+0xfffe5074>
 402562c:	d9c00317 	ldw	r7,12(sp)
 4025630:	00800084 	movi	r2,2
 4025634:	11fec50e 	bge	r2,r7,402514c <__alt_data_end+0xfffe514c>
 4025638:	d9000617 	ldw	r4,24(sp)
 402563c:	20013c1e 	bne	r4,zero,4025b30 <_dtoa_r+0x1524>
 4025640:	a80b883a 	mov	r5,r21
 4025644:	000f883a 	mov	r7,zero
 4025648:	01800144 	movi	r6,5
 402564c:	e009883a 	mov	r4,fp
 4025650:	40277600 	call	4027760 <__multadd>
 4025654:	100b883a 	mov	r5,r2
 4025658:	8009883a 	mov	r4,r16
 402565c:	102b883a 	mov	r21,r2
 4025660:	4027f580 	call	4027f58 <__mcmp>
 4025664:	dc000915 	stw	r16,36(sp)
 4025668:	00bf410e 	bge	zero,r2,4025370 <__alt_data_end+0xfffe5370>
 402566c:	d9c00717 	ldw	r7,28(sp)
 4025670:	00800c44 	movi	r2,49
 4025674:	38800005 	stb	r2,0(r7)
 4025678:	d8800517 	ldw	r2,20(sp)
 402567c:	3dc00044 	addi	r23,r7,1
 4025680:	10800044 	addi	r2,r2,1
 4025684:	d8800515 	stw	r2,20(sp)
 4025688:	003f3d06 	br	4025380 <__alt_data_end+0xfffe5380>
 402568c:	d9800517 	ldw	r6,20(sp)
 4025690:	d9c00717 	ldw	r7,28(sp)
 4025694:	00800c44 	movi	r2,49
 4025698:	31800044 	addi	r6,r6,1
 402569c:	d9800515 	stw	r6,20(sp)
 40256a0:	38800005 	stb	r2,0(r7)
 40256a4:	003edf06 	br	4025224 <__alt_data_end+0xfffe5224>
 40256a8:	d8000b15 	stw	zero,44(sp)
 40256ac:	003c9f06 	br	402492c <__alt_data_end+0xfffe492c>
 40256b0:	903e7e1e 	bne	r18,zero,40250ac <__alt_data_end+0xfffe50ac>
 40256b4:	00800434 	movhi	r2,16
 40256b8:	10bfffc4 	addi	r2,r2,-1
 40256bc:	9884703a 	and	r2,r19,r2
 40256c0:	1000ea1e 	bne	r2,zero,4025a6c <_dtoa_r+0x1460>
 40256c4:	9cdffc2c 	andhi	r19,r19,32752
 40256c8:	9800e826 	beq	r19,zero,4025a6c <_dtoa_r+0x1460>
 40256cc:	d9c00817 	ldw	r7,32(sp)
 40256d0:	b5800044 	addi	r22,r22,1
 40256d4:	04c00044 	movi	r19,1
 40256d8:	39c00044 	addi	r7,r7,1
 40256dc:	d9c00815 	stw	r7,32(sp)
 40256e0:	d8800d17 	ldw	r2,52(sp)
 40256e4:	103e721e 	bne	r2,zero,40250b0 <__alt_data_end+0xfffe50b0>
 40256e8:	00800044 	movi	r2,1
 40256ec:	003e7906 	br	40250d4 <__alt_data_end+0xfffe50d4>
 40256f0:	8009883a 	mov	r4,r16
 40256f4:	402e5e00 	call	402e5e0 <__floatsidf>
 40256f8:	d9800f17 	ldw	r6,60(sp)
 40256fc:	d9c01017 	ldw	r7,64(sp)
 4025700:	1009883a 	mov	r4,r2
 4025704:	180b883a 	mov	r5,r3
 4025708:	402d54c0 	call	402d54c <__muldf3>
 402570c:	000d883a 	mov	r6,zero
 4025710:	01d00734 	movhi	r7,16412
 4025714:	1009883a 	mov	r4,r2
 4025718:	180b883a 	mov	r5,r3
 402571c:	402c1600 	call	402c160 <__adddf3>
 4025720:	047f3034 	movhi	r17,64704
 4025724:	1021883a 	mov	r16,r2
 4025728:	1c63883a 	add	r17,r3,r17
 402572c:	d9000f17 	ldw	r4,60(sp)
 4025730:	d9401017 	ldw	r5,64(sp)
 4025734:	000d883a 	mov	r6,zero
 4025738:	01d00534 	movhi	r7,16404
 402573c:	402dc640 	call	402dc64 <__subdf3>
 4025740:	800d883a 	mov	r6,r16
 4025744:	880f883a 	mov	r7,r17
 4025748:	1009883a 	mov	r4,r2
 402574c:	180b883a 	mov	r5,r3
 4025750:	102b883a 	mov	r21,r2
 4025754:	1829883a 	mov	r20,r3
 4025758:	402d37c0 	call	402d37c <__gedf2>
 402575c:	00806c16 	blt	zero,r2,4025910 <_dtoa_r+0x1304>
 4025760:	89e0003c 	xorhi	r7,r17,32768
 4025764:	800d883a 	mov	r6,r16
 4025768:	a809883a 	mov	r4,r21
 402576c:	a00b883a 	mov	r5,r20
 4025770:	402d4580 	call	402d458 <__ledf2>
 4025774:	103d7e0e 	bge	r2,zero,4024d70 <__alt_data_end+0xfffe4d70>
 4025778:	002b883a 	mov	r21,zero
 402577c:	0023883a 	mov	r17,zero
 4025780:	003efb06 	br	4025370 <__alt_data_end+0xfffe5370>
 4025784:	d8800717 	ldw	r2,28(sp)
 4025788:	003bd006 	br	40246cc <__alt_data_end+0xfffe46cc>
 402578c:	d9000a17 	ldw	r4,40(sp)
 4025790:	d9800d17 	ldw	r6,52(sp)
 4025794:	dd400a15 	stw	r21,40(sp)
 4025798:	a905c83a 	sub	r2,r21,r4
 402579c:	308d883a 	add	r6,r6,r2
 40257a0:	d9800d15 	stw	r6,52(sp)
 40257a4:	002b883a 	mov	r21,zero
 40257a8:	003e0606 	br	4024fc4 <__alt_data_end+0xfffe4fc4>
 40257ac:	9023883a 	mov	r17,r18
 40257b0:	9829883a 	mov	r20,r19
 40257b4:	04000084 	movi	r16,2
 40257b8:	003c9206 	br	4024a04 <__alt_data_end+0xfffe4a04>
 40257bc:	04000044 	movi	r16,1
 40257c0:	dc000c15 	stw	r16,48(sp)
 40257c4:	dc000615 	stw	r16,24(sp)
 40257c8:	dc002215 	stw	r16,136(sp)
 40257cc:	e0001115 	stw	zero,68(fp)
 40257d0:	000b883a 	mov	r5,zero
 40257d4:	003c6906 	br	402497c <__alt_data_end+0xfffe497c>
 40257d8:	3021883a 	mov	r16,r6
 40257dc:	003ffb06 	br	40257cc <__alt_data_end+0xfffe57cc>
 40257e0:	1000021e 	bne	r2,zero,40257ec <_dtoa_r+0x11e0>
 40257e4:	4200004c 	andi	r8,r8,1
 40257e8:	403e7d1e 	bne	r8,zero,40251e0 <__alt_data_end+0xfffe51e0>
 40257ec:	01000c04 	movi	r4,48
 40257f0:	00000106 	br	40257f8 <_dtoa_r+0x11ec>
 40257f4:	102f883a 	mov	r23,r2
 40257f8:	b8bfffc4 	addi	r2,r23,-1
 40257fc:	10c00007 	ldb	r3,0(r2)
 4025800:	193ffc26 	beq	r3,r4,40257f4 <__alt_data_end+0xfffe57f4>
 4025804:	003e8706 	br	4025224 <__alt_data_end+0xfffe5224>
 4025808:	d8800517 	ldw	r2,20(sp)
 402580c:	00a3c83a 	sub	r17,zero,r2
 4025810:	8800a426 	beq	r17,zero,4025aa4 <_dtoa_r+0x1498>
 4025814:	888003cc 	andi	r2,r17,15
 4025818:	100490fa 	slli	r2,r2,3
 402581c:	00c100f4 	movhi	r3,1027
 4025820:	18cdb704 	addi	r3,r3,14044
 4025824:	1885883a 	add	r2,r3,r2
 4025828:	11800017 	ldw	r6,0(r2)
 402582c:	11c00117 	ldw	r7,4(r2)
 4025830:	9009883a 	mov	r4,r18
 4025834:	980b883a 	mov	r5,r19
 4025838:	8823d13a 	srai	r17,r17,4
 402583c:	402d54c0 	call	402d54c <__muldf3>
 4025840:	d8800f15 	stw	r2,60(sp)
 4025844:	d8c01015 	stw	r3,64(sp)
 4025848:	8800e826 	beq	r17,zero,4025bec <_dtoa_r+0x15e0>
 402584c:	050100f4 	movhi	r20,1027
 4025850:	a50dad04 	addi	r20,r20,14004
 4025854:	04000084 	movi	r16,2
 4025858:	8980004c 	andi	r6,r17,1
 402585c:	1009883a 	mov	r4,r2
 4025860:	8823d07a 	srai	r17,r17,1
 4025864:	180b883a 	mov	r5,r3
 4025868:	30000426 	beq	r6,zero,402587c <_dtoa_r+0x1270>
 402586c:	a1800017 	ldw	r6,0(r20)
 4025870:	a1c00117 	ldw	r7,4(r20)
 4025874:	84000044 	addi	r16,r16,1
 4025878:	402d54c0 	call	402d54c <__muldf3>
 402587c:	a5000204 	addi	r20,r20,8
 4025880:	883ff51e 	bne	r17,zero,4025858 <__alt_data_end+0xfffe5858>
 4025884:	d8800f15 	stw	r2,60(sp)
 4025888:	d8c01015 	stw	r3,64(sp)
 402588c:	003c7606 	br	4024a68 <__alt_data_end+0xfffe4a68>
 4025890:	00c00c04 	movi	r3,48
 4025894:	10c00005 	stb	r3,0(r2)
 4025898:	d8c00517 	ldw	r3,20(sp)
 402589c:	bd3fffc3 	ldbu	r20,-1(r23)
 40258a0:	18c00044 	addi	r3,r3,1
 40258a4:	d8c00515 	stw	r3,20(sp)
 40258a8:	003db906 	br	4024f90 <__alt_data_end+0xfffe4f90>
 40258ac:	89400117 	ldw	r5,4(r17)
 40258b0:	e009883a 	mov	r4,fp
 40258b4:	40276900 	call	4027690 <_Balloc>
 40258b8:	89800417 	ldw	r6,16(r17)
 40258bc:	89400304 	addi	r5,r17,12
 40258c0:	11000304 	addi	r4,r2,12
 40258c4:	31800084 	addi	r6,r6,2
 40258c8:	318d883a 	add	r6,r6,r6
 40258cc:	318d883a 	add	r6,r6,r6
 40258d0:	1027883a 	mov	r19,r2
 40258d4:	40274200 	call	4027420 <memcpy>
 40258d8:	01800044 	movi	r6,1
 40258dc:	980b883a 	mov	r5,r19
 40258e0:	e009883a 	mov	r4,fp
 40258e4:	4027e100 	call	4027e10 <__lshift>
 40258e8:	1029883a 	mov	r20,r2
 40258ec:	003ecc06 	br	4025420 <__alt_data_end+0xfffe5420>
 40258f0:	00800e44 	movi	r2,57
 40258f4:	90809026 	beq	r18,r2,4025b38 <_dtoa_r+0x152c>
 40258f8:	92000044 	addi	r8,r18,1
 40258fc:	003f1f06 	br	402557c <__alt_data_end+0xfffe557c>
 4025900:	9011883a 	mov	r8,r18
 4025904:	8825883a 	mov	r18,r17
 4025908:	a023883a 	mov	r17,r20
 402590c:	003e2906 	br	40251b4 <__alt_data_end+0xfffe51b4>
 4025910:	002b883a 	mov	r21,zero
 4025914:	0023883a 	mov	r17,zero
 4025918:	003f5406 	br	402566c <__alt_data_end+0xfffe566c>
 402591c:	61bfffc4 	addi	r6,r12,-1
 4025920:	300490fa 	slli	r2,r6,3
 4025924:	00c100f4 	movhi	r3,1027
 4025928:	18cdb704 	addi	r3,r3,14044
 402592c:	1885883a 	add	r2,r3,r2
 4025930:	11000017 	ldw	r4,0(r2)
 4025934:	11400117 	ldw	r5,4(r2)
 4025938:	d8800717 	ldw	r2,28(sp)
 402593c:	880f883a 	mov	r7,r17
 4025940:	d9801215 	stw	r6,72(sp)
 4025944:	800d883a 	mov	r6,r16
 4025948:	db001615 	stw	r12,88(sp)
 402594c:	15c00044 	addi	r23,r2,1
 4025950:	402d54c0 	call	402d54c <__muldf3>
 4025954:	d9401017 	ldw	r5,64(sp)
 4025958:	d9000f17 	ldw	r4,60(sp)
 402595c:	d8c01515 	stw	r3,84(sp)
 4025960:	d8801415 	stw	r2,80(sp)
 4025964:	402e5600 	call	402e560 <__fixdfsi>
 4025968:	1009883a 	mov	r4,r2
 402596c:	1021883a 	mov	r16,r2
 4025970:	402e5e00 	call	402e5e0 <__floatsidf>
 4025974:	d9000f17 	ldw	r4,60(sp)
 4025978:	d9401017 	ldw	r5,64(sp)
 402597c:	100d883a 	mov	r6,r2
 4025980:	180f883a 	mov	r7,r3
 4025984:	402dc640 	call	402dc64 <__subdf3>
 4025988:	1829883a 	mov	r20,r3
 402598c:	d8c00717 	ldw	r3,28(sp)
 4025990:	84000c04 	addi	r16,r16,48
 4025994:	1023883a 	mov	r17,r2
 4025998:	1c000005 	stb	r16,0(r3)
 402599c:	db001617 	ldw	r12,88(sp)
 40259a0:	00800044 	movi	r2,1
 40259a4:	60802226 	beq	r12,r2,4025a30 <_dtoa_r+0x1424>
 40259a8:	d9c00717 	ldw	r7,28(sp)
 40259ac:	8805883a 	mov	r2,r17
 40259b0:	b82b883a 	mov	r21,r23
 40259b4:	3b19883a 	add	r12,r7,r12
 40259b8:	6023883a 	mov	r17,r12
 40259bc:	a007883a 	mov	r3,r20
 40259c0:	dc800f15 	stw	r18,60(sp)
 40259c4:	000d883a 	mov	r6,zero
 40259c8:	01d00934 	movhi	r7,16420
 40259cc:	1009883a 	mov	r4,r2
 40259d0:	180b883a 	mov	r5,r3
 40259d4:	402d54c0 	call	402d54c <__muldf3>
 40259d8:	180b883a 	mov	r5,r3
 40259dc:	1009883a 	mov	r4,r2
 40259e0:	1829883a 	mov	r20,r3
 40259e4:	1025883a 	mov	r18,r2
 40259e8:	402e5600 	call	402e560 <__fixdfsi>
 40259ec:	1009883a 	mov	r4,r2
 40259f0:	1021883a 	mov	r16,r2
 40259f4:	402e5e00 	call	402e5e0 <__floatsidf>
 40259f8:	100d883a 	mov	r6,r2
 40259fc:	180f883a 	mov	r7,r3
 4025a00:	9009883a 	mov	r4,r18
 4025a04:	a00b883a 	mov	r5,r20
 4025a08:	84000c04 	addi	r16,r16,48
 4025a0c:	402dc640 	call	402dc64 <__subdf3>
 4025a10:	ad400044 	addi	r21,r21,1
 4025a14:	ac3fffc5 	stb	r16,-1(r21)
 4025a18:	ac7fea1e 	bne	r21,r17,40259c4 <__alt_data_end+0xfffe59c4>
 4025a1c:	1023883a 	mov	r17,r2
 4025a20:	d8801217 	ldw	r2,72(sp)
 4025a24:	dc800f17 	ldw	r18,60(sp)
 4025a28:	1829883a 	mov	r20,r3
 4025a2c:	b8af883a 	add	r23,r23,r2
 4025a30:	d9001417 	ldw	r4,80(sp)
 4025a34:	d9401517 	ldw	r5,84(sp)
 4025a38:	000d883a 	mov	r6,zero
 4025a3c:	01cff834 	movhi	r7,16352
 4025a40:	402c1600 	call	402c160 <__adddf3>
 4025a44:	880d883a 	mov	r6,r17
 4025a48:	a00f883a 	mov	r7,r20
 4025a4c:	1009883a 	mov	r4,r2
 4025a50:	180b883a 	mov	r5,r3
 4025a54:	402d4580 	call	402d458 <__ledf2>
 4025a58:	10003e0e 	bge	r2,zero,4025b54 <_dtoa_r+0x1548>
 4025a5c:	d9001317 	ldw	r4,76(sp)
 4025a60:	bd3fffc3 	ldbu	r20,-1(r23)
 4025a64:	d9000515 	stw	r4,20(sp)
 4025a68:	003d3b06 	br	4024f58 <__alt_data_end+0xfffe4f58>
 4025a6c:	0027883a 	mov	r19,zero
 4025a70:	003f1b06 	br	40256e0 <__alt_data_end+0xfffe56e0>
 4025a74:	d8800817 	ldw	r2,32(sp)
 4025a78:	11e9c83a 	sub	r20,r2,r7
 4025a7c:	0005883a 	mov	r2,zero
 4025a80:	003d5406 	br	4024fd4 <__alt_data_end+0xfffe4fd4>
 4025a84:	00800044 	movi	r2,1
 4025a88:	003dc706 	br	40251a8 <__alt_data_end+0xfffe51a8>
 4025a8c:	d8c00217 	ldw	r3,8(sp)
 4025a90:	00800d84 	movi	r2,54
 4025a94:	dd400a17 	ldw	r21,40(sp)
 4025a98:	10c5c83a 	sub	r2,r2,r3
 4025a9c:	dd000817 	ldw	r20,32(sp)
 4025aa0:	003d4c06 	br	4024fd4 <__alt_data_end+0xfffe4fd4>
 4025aa4:	dc800f15 	stw	r18,60(sp)
 4025aa8:	dcc01015 	stw	r19,64(sp)
 4025aac:	04000084 	movi	r16,2
 4025ab0:	003bed06 	br	4024a68 <__alt_data_end+0xfffe4a68>
 4025ab4:	d9000617 	ldw	r4,24(sp)
 4025ab8:	203f0d26 	beq	r4,zero,40256f0 <__alt_data_end+0xfffe56f0>
 4025abc:	d9800c17 	ldw	r6,48(sp)
 4025ac0:	01bcab0e 	bge	zero,r6,4024d70 <__alt_data_end+0xfffe4d70>
 4025ac4:	d9401017 	ldw	r5,64(sp)
 4025ac8:	d9000f17 	ldw	r4,60(sp)
 4025acc:	000d883a 	mov	r6,zero
 4025ad0:	01d00934 	movhi	r7,16420
 4025ad4:	402d54c0 	call	402d54c <__muldf3>
 4025ad8:	81000044 	addi	r4,r16,1
 4025adc:	d8800f15 	stw	r2,60(sp)
 4025ae0:	d8c01015 	stw	r3,64(sp)
 4025ae4:	402e5e00 	call	402e5e0 <__floatsidf>
 4025ae8:	d9800f17 	ldw	r6,60(sp)
 4025aec:	d9c01017 	ldw	r7,64(sp)
 4025af0:	1009883a 	mov	r4,r2
 4025af4:	180b883a 	mov	r5,r3
 4025af8:	402d54c0 	call	402d54c <__muldf3>
 4025afc:	01d00734 	movhi	r7,16412
 4025b00:	000d883a 	mov	r6,zero
 4025b04:	1009883a 	mov	r4,r2
 4025b08:	180b883a 	mov	r5,r3
 4025b0c:	402c1600 	call	402c160 <__adddf3>
 4025b10:	d9c00517 	ldw	r7,20(sp)
 4025b14:	047f3034 	movhi	r17,64704
 4025b18:	1021883a 	mov	r16,r2
 4025b1c:	39ffffc4 	addi	r7,r7,-1
 4025b20:	d9c01315 	stw	r7,76(sp)
 4025b24:	1c63883a 	add	r17,r3,r17
 4025b28:	db000c17 	ldw	r12,48(sp)
 4025b2c:	003bea06 	br	4024ad8 <__alt_data_end+0xfffe4ad8>
 4025b30:	dc000915 	stw	r16,36(sp)
 4025b34:	003e0e06 	br	4025370 <__alt_data_end+0xfffe5370>
 4025b38:	01000e44 	movi	r4,57
 4025b3c:	8825883a 	mov	r18,r17
 4025b40:	9dc00044 	addi	r23,r19,1
 4025b44:	99000005 	stb	r4,0(r19)
 4025b48:	a023883a 	mov	r17,r20
 4025b4c:	dc000915 	stw	r16,36(sp)
 4025b50:	003da406 	br	40251e4 <__alt_data_end+0xfffe51e4>
 4025b54:	d9801417 	ldw	r6,80(sp)
 4025b58:	d9c01517 	ldw	r7,84(sp)
 4025b5c:	0009883a 	mov	r4,zero
 4025b60:	014ff834 	movhi	r5,16352
 4025b64:	402dc640 	call	402dc64 <__subdf3>
 4025b68:	880d883a 	mov	r6,r17
 4025b6c:	a00f883a 	mov	r7,r20
 4025b70:	1009883a 	mov	r4,r2
 4025b74:	180b883a 	mov	r5,r3
 4025b78:	402d37c0 	call	402d37c <__gedf2>
 4025b7c:	00bc7c0e 	bge	zero,r2,4024d70 <__alt_data_end+0xfffe4d70>
 4025b80:	01000c04 	movi	r4,48
 4025b84:	00000106 	br	4025b8c <_dtoa_r+0x1580>
 4025b88:	102f883a 	mov	r23,r2
 4025b8c:	b8bfffc4 	addi	r2,r23,-1
 4025b90:	10c00007 	ldb	r3,0(r2)
 4025b94:	193ffc26 	beq	r3,r4,4025b88 <__alt_data_end+0xfffe5b88>
 4025b98:	d9801317 	ldw	r6,76(sp)
 4025b9c:	d9800515 	stw	r6,20(sp)
 4025ba0:	003c4406 	br	4024cb4 <__alt_data_end+0xfffe4cb4>
 4025ba4:	d9801317 	ldw	r6,76(sp)
 4025ba8:	d9800515 	stw	r6,20(sp)
 4025bac:	003cea06 	br	4024f58 <__alt_data_end+0xfffe4f58>
 4025bb0:	dd800f17 	ldw	r22,60(sp)
 4025bb4:	dcc01017 	ldw	r19,64(sp)
 4025bb8:	dc801217 	ldw	r18,72(sp)
 4025bbc:	003c6c06 	br	4024d70 <__alt_data_end+0xfffe4d70>
 4025bc0:	903e031e 	bne	r18,zero,40253d0 <__alt_data_end+0xfffe53d0>
 4025bc4:	003ebb06 	br	40256b4 <__alt_data_end+0xfffe56b4>
 4025bc8:	103e6c1e 	bne	r2,zero,402557c <__alt_data_end+0xfffe557c>
 4025bcc:	4080004c 	andi	r2,r8,1
 4025bd0:	103e6a26 	beq	r2,zero,402557c <__alt_data_end+0xfffe557c>
 4025bd4:	003e6606 	br	4025570 <__alt_data_end+0xfffe5570>
 4025bd8:	d8c00317 	ldw	r3,12(sp)
 4025bdc:	00800084 	movi	r2,2
 4025be0:	10c02916 	blt	r2,r3,4025c88 <_dtoa_r+0x167c>
 4025be4:	d9000c17 	ldw	r4,48(sp)
 4025be8:	003e8806 	br	402560c <__alt_data_end+0xfffe560c>
 4025bec:	04000084 	movi	r16,2
 4025bf0:	003b9d06 	br	4024a68 <__alt_data_end+0xfffe4a68>
 4025bf4:	d9001317 	ldw	r4,76(sp)
 4025bf8:	d9000515 	stw	r4,20(sp)
 4025bfc:	003cd606 	br	4024f58 <__alt_data_end+0xfffe4f58>
 4025c00:	d8801317 	ldw	r2,76(sp)
 4025c04:	d8800515 	stw	r2,20(sp)
 4025c08:	003c2a06 	br	4024cb4 <__alt_data_end+0xfffe4cb4>
 4025c0c:	d9800317 	ldw	r6,12(sp)
 4025c10:	00800084 	movi	r2,2
 4025c14:	11801516 	blt	r2,r6,4025c6c <_dtoa_r+0x1660>
 4025c18:	d9c00c17 	ldw	r7,48(sp)
 4025c1c:	d9c00615 	stw	r7,24(sp)
 4025c20:	003df706 	br	4025400 <__alt_data_end+0xfffe5400>
 4025c24:	193d3926 	beq	r3,r4,402510c <__alt_data_end+0xfffe510c>
 4025c28:	00c00f04 	movi	r3,60
 4025c2c:	1885c83a 	sub	r2,r3,r2
 4025c30:	003ddf06 	br	40253b0 <__alt_data_end+0xfffe53b0>
 4025c34:	e009883a 	mov	r4,fp
 4025c38:	e0001115 	stw	zero,68(fp)
 4025c3c:	000b883a 	mov	r5,zero
 4025c40:	40276900 	call	4027690 <_Balloc>
 4025c44:	d8800715 	stw	r2,28(sp)
 4025c48:	d8c00717 	ldw	r3,28(sp)
 4025c4c:	00bfffc4 	movi	r2,-1
 4025c50:	01000044 	movi	r4,1
 4025c54:	d8800c15 	stw	r2,48(sp)
 4025c58:	e0c01015 	stw	r3,64(fp)
 4025c5c:	d9000b15 	stw	r4,44(sp)
 4025c60:	d8800615 	stw	r2,24(sp)
 4025c64:	d8002215 	stw	zero,136(sp)
 4025c68:	003c4106 	br	4024d70 <__alt_data_end+0xfffe4d70>
 4025c6c:	d8c00c17 	ldw	r3,48(sp)
 4025c70:	d8c00615 	stw	r3,24(sp)
 4025c74:	003e7006 	br	4025638 <__alt_data_end+0xfffe5638>
 4025c78:	04400044 	movi	r17,1
 4025c7c:	003b2006 	br	4024900 <__alt_data_end+0xfffe4900>
 4025c80:	000b883a 	mov	r5,zero
 4025c84:	003b3d06 	br	402497c <__alt_data_end+0xfffe497c>
 4025c88:	d8800c17 	ldw	r2,48(sp)
 4025c8c:	d8800615 	stw	r2,24(sp)
 4025c90:	003e6906 	br	4025638 <__alt_data_end+0xfffe5638>

04025c94 <__sflush_r>:
 4025c94:	2880030b 	ldhu	r2,12(r5)
 4025c98:	defffb04 	addi	sp,sp,-20
 4025c9c:	dcc00315 	stw	r19,12(sp)
 4025ca0:	dc400115 	stw	r17,4(sp)
 4025ca4:	dfc00415 	stw	ra,16(sp)
 4025ca8:	dc800215 	stw	r18,8(sp)
 4025cac:	dc000015 	stw	r16,0(sp)
 4025cb0:	10c0020c 	andi	r3,r2,8
 4025cb4:	2823883a 	mov	r17,r5
 4025cb8:	2027883a 	mov	r19,r4
 4025cbc:	1800311e 	bne	r3,zero,4025d84 <__sflush_r+0xf0>
 4025cc0:	28c00117 	ldw	r3,4(r5)
 4025cc4:	10820014 	ori	r2,r2,2048
 4025cc8:	2880030d 	sth	r2,12(r5)
 4025ccc:	00c04b0e 	bge	zero,r3,4025dfc <__sflush_r+0x168>
 4025cd0:	8a000a17 	ldw	r8,40(r17)
 4025cd4:	40002326 	beq	r8,zero,4025d64 <__sflush_r+0xd0>
 4025cd8:	9c000017 	ldw	r16,0(r19)
 4025cdc:	10c4000c 	andi	r3,r2,4096
 4025ce0:	98000015 	stw	zero,0(r19)
 4025ce4:	18004826 	beq	r3,zero,4025e08 <__sflush_r+0x174>
 4025ce8:	89801417 	ldw	r6,80(r17)
 4025cec:	10c0010c 	andi	r3,r2,4
 4025cf0:	18000626 	beq	r3,zero,4025d0c <__sflush_r+0x78>
 4025cf4:	88c00117 	ldw	r3,4(r17)
 4025cf8:	88800c17 	ldw	r2,48(r17)
 4025cfc:	30cdc83a 	sub	r6,r6,r3
 4025d00:	10000226 	beq	r2,zero,4025d0c <__sflush_r+0x78>
 4025d04:	88800f17 	ldw	r2,60(r17)
 4025d08:	308dc83a 	sub	r6,r6,r2
 4025d0c:	89400717 	ldw	r5,28(r17)
 4025d10:	000f883a 	mov	r7,zero
 4025d14:	9809883a 	mov	r4,r19
 4025d18:	403ee83a 	callr	r8
 4025d1c:	00ffffc4 	movi	r3,-1
 4025d20:	10c04426 	beq	r2,r3,4025e34 <__sflush_r+0x1a0>
 4025d24:	88c0030b 	ldhu	r3,12(r17)
 4025d28:	89000417 	ldw	r4,16(r17)
 4025d2c:	88000115 	stw	zero,4(r17)
 4025d30:	197dffcc 	andi	r5,r3,63487
 4025d34:	8940030d 	sth	r5,12(r17)
 4025d38:	89000015 	stw	r4,0(r17)
 4025d3c:	18c4000c 	andi	r3,r3,4096
 4025d40:	18002c1e 	bne	r3,zero,4025df4 <__sflush_r+0x160>
 4025d44:	89400c17 	ldw	r5,48(r17)
 4025d48:	9c000015 	stw	r16,0(r19)
 4025d4c:	28000526 	beq	r5,zero,4025d64 <__sflush_r+0xd0>
 4025d50:	88801004 	addi	r2,r17,64
 4025d54:	28800226 	beq	r5,r2,4025d60 <__sflush_r+0xcc>
 4025d58:	9809883a 	mov	r4,r19
 4025d5c:	40264000 	call	4026400 <_free_r>
 4025d60:	88000c15 	stw	zero,48(r17)
 4025d64:	0005883a 	mov	r2,zero
 4025d68:	dfc00417 	ldw	ra,16(sp)
 4025d6c:	dcc00317 	ldw	r19,12(sp)
 4025d70:	dc800217 	ldw	r18,8(sp)
 4025d74:	dc400117 	ldw	r17,4(sp)
 4025d78:	dc000017 	ldw	r16,0(sp)
 4025d7c:	dec00504 	addi	sp,sp,20
 4025d80:	f800283a 	ret
 4025d84:	2c800417 	ldw	r18,16(r5)
 4025d88:	903ff626 	beq	r18,zero,4025d64 <__alt_data_end+0xfffe5d64>
 4025d8c:	2c000017 	ldw	r16,0(r5)
 4025d90:	108000cc 	andi	r2,r2,3
 4025d94:	2c800015 	stw	r18,0(r5)
 4025d98:	84a1c83a 	sub	r16,r16,r18
 4025d9c:	1000131e 	bne	r2,zero,4025dec <__sflush_r+0x158>
 4025da0:	28800517 	ldw	r2,20(r5)
 4025da4:	88800215 	stw	r2,8(r17)
 4025da8:	04000316 	blt	zero,r16,4025db8 <__sflush_r+0x124>
 4025dac:	003fed06 	br	4025d64 <__alt_data_end+0xfffe5d64>
 4025db0:	90a5883a 	add	r18,r18,r2
 4025db4:	043feb0e 	bge	zero,r16,4025d64 <__alt_data_end+0xfffe5d64>
 4025db8:	88800917 	ldw	r2,36(r17)
 4025dbc:	89400717 	ldw	r5,28(r17)
 4025dc0:	800f883a 	mov	r7,r16
 4025dc4:	900d883a 	mov	r6,r18
 4025dc8:	9809883a 	mov	r4,r19
 4025dcc:	103ee83a 	callr	r2
 4025dd0:	80a1c83a 	sub	r16,r16,r2
 4025dd4:	00bff616 	blt	zero,r2,4025db0 <__alt_data_end+0xfffe5db0>
 4025dd8:	88c0030b 	ldhu	r3,12(r17)
 4025ddc:	00bfffc4 	movi	r2,-1
 4025de0:	18c01014 	ori	r3,r3,64
 4025de4:	88c0030d 	sth	r3,12(r17)
 4025de8:	003fdf06 	br	4025d68 <__alt_data_end+0xfffe5d68>
 4025dec:	0005883a 	mov	r2,zero
 4025df0:	003fec06 	br	4025da4 <__alt_data_end+0xfffe5da4>
 4025df4:	88801415 	stw	r2,80(r17)
 4025df8:	003fd206 	br	4025d44 <__alt_data_end+0xfffe5d44>
 4025dfc:	28c00f17 	ldw	r3,60(r5)
 4025e00:	00ffb316 	blt	zero,r3,4025cd0 <__alt_data_end+0xfffe5cd0>
 4025e04:	003fd706 	br	4025d64 <__alt_data_end+0xfffe5d64>
 4025e08:	89400717 	ldw	r5,28(r17)
 4025e0c:	000d883a 	mov	r6,zero
 4025e10:	01c00044 	movi	r7,1
 4025e14:	9809883a 	mov	r4,r19
 4025e18:	403ee83a 	callr	r8
 4025e1c:	100d883a 	mov	r6,r2
 4025e20:	00bfffc4 	movi	r2,-1
 4025e24:	30801426 	beq	r6,r2,4025e78 <__sflush_r+0x1e4>
 4025e28:	8880030b 	ldhu	r2,12(r17)
 4025e2c:	8a000a17 	ldw	r8,40(r17)
 4025e30:	003fae06 	br	4025cec <__alt_data_end+0xfffe5cec>
 4025e34:	98c00017 	ldw	r3,0(r19)
 4025e38:	183fba26 	beq	r3,zero,4025d24 <__alt_data_end+0xfffe5d24>
 4025e3c:	01000744 	movi	r4,29
 4025e40:	19000626 	beq	r3,r4,4025e5c <__sflush_r+0x1c8>
 4025e44:	01000584 	movi	r4,22
 4025e48:	19000426 	beq	r3,r4,4025e5c <__sflush_r+0x1c8>
 4025e4c:	88c0030b 	ldhu	r3,12(r17)
 4025e50:	18c01014 	ori	r3,r3,64
 4025e54:	88c0030d 	sth	r3,12(r17)
 4025e58:	003fc306 	br	4025d68 <__alt_data_end+0xfffe5d68>
 4025e5c:	8880030b 	ldhu	r2,12(r17)
 4025e60:	88c00417 	ldw	r3,16(r17)
 4025e64:	88000115 	stw	zero,4(r17)
 4025e68:	10bdffcc 	andi	r2,r2,63487
 4025e6c:	8880030d 	sth	r2,12(r17)
 4025e70:	88c00015 	stw	r3,0(r17)
 4025e74:	003fb306 	br	4025d44 <__alt_data_end+0xfffe5d44>
 4025e78:	98800017 	ldw	r2,0(r19)
 4025e7c:	103fea26 	beq	r2,zero,4025e28 <__alt_data_end+0xfffe5e28>
 4025e80:	00c00744 	movi	r3,29
 4025e84:	10c00226 	beq	r2,r3,4025e90 <__sflush_r+0x1fc>
 4025e88:	00c00584 	movi	r3,22
 4025e8c:	10c0031e 	bne	r2,r3,4025e9c <__sflush_r+0x208>
 4025e90:	9c000015 	stw	r16,0(r19)
 4025e94:	0005883a 	mov	r2,zero
 4025e98:	003fb306 	br	4025d68 <__alt_data_end+0xfffe5d68>
 4025e9c:	88c0030b 	ldhu	r3,12(r17)
 4025ea0:	3005883a 	mov	r2,r6
 4025ea4:	18c01014 	ori	r3,r3,64
 4025ea8:	88c0030d 	sth	r3,12(r17)
 4025eac:	003fae06 	br	4025d68 <__alt_data_end+0xfffe5d68>

04025eb0 <_fflush_r>:
 4025eb0:	defffd04 	addi	sp,sp,-12
 4025eb4:	dc000115 	stw	r16,4(sp)
 4025eb8:	dfc00215 	stw	ra,8(sp)
 4025ebc:	2021883a 	mov	r16,r4
 4025ec0:	20000226 	beq	r4,zero,4025ecc <_fflush_r+0x1c>
 4025ec4:	20800e17 	ldw	r2,56(r4)
 4025ec8:	10000c26 	beq	r2,zero,4025efc <_fflush_r+0x4c>
 4025ecc:	2880030f 	ldh	r2,12(r5)
 4025ed0:	1000051e 	bne	r2,zero,4025ee8 <_fflush_r+0x38>
 4025ed4:	0005883a 	mov	r2,zero
 4025ed8:	dfc00217 	ldw	ra,8(sp)
 4025edc:	dc000117 	ldw	r16,4(sp)
 4025ee0:	dec00304 	addi	sp,sp,12
 4025ee4:	f800283a 	ret
 4025ee8:	8009883a 	mov	r4,r16
 4025eec:	dfc00217 	ldw	ra,8(sp)
 4025ef0:	dc000117 	ldw	r16,4(sp)
 4025ef4:	dec00304 	addi	sp,sp,12
 4025ef8:	4025c941 	jmpi	4025c94 <__sflush_r>
 4025efc:	d9400015 	stw	r5,0(sp)
 4025f00:	402628c0 	call	402628c <__sinit>
 4025f04:	d9400017 	ldw	r5,0(sp)
 4025f08:	003ff006 	br	4025ecc <__alt_data_end+0xfffe5ecc>

04025f0c <fflush>:
 4025f0c:	20000526 	beq	r4,zero,4025f24 <fflush+0x18>
 4025f10:	008100f4 	movhi	r2,1027
 4025f14:	10956004 	addi	r2,r2,21888
 4025f18:	200b883a 	mov	r5,r4
 4025f1c:	11000017 	ldw	r4,0(r2)
 4025f20:	4025eb01 	jmpi	4025eb0 <_fflush_r>
 4025f24:	008100f4 	movhi	r2,1027
 4025f28:	10955f04 	addi	r2,r2,21884
 4025f2c:	11000017 	ldw	r4,0(r2)
 4025f30:	014100b4 	movhi	r5,1026
 4025f34:	2957ac04 	addi	r5,r5,24240
 4025f38:	40267d41 	jmpi	40267d4 <_fwalk_reent>

04025f3c <__fp_unlock>:
 4025f3c:	0005883a 	mov	r2,zero
 4025f40:	f800283a 	ret

04025f44 <_cleanup_r>:
 4025f44:	014100f4 	movhi	r5,1027
 4025f48:	29687104 	addi	r5,r5,-24124
 4025f4c:	40267d41 	jmpi	40267d4 <_fwalk_reent>

04025f50 <__sinit.part.1>:
 4025f50:	defff704 	addi	sp,sp,-36
 4025f54:	00c100b4 	movhi	r3,1026
 4025f58:	dfc00815 	stw	ra,32(sp)
 4025f5c:	ddc00715 	stw	r23,28(sp)
 4025f60:	dd800615 	stw	r22,24(sp)
 4025f64:	dd400515 	stw	r21,20(sp)
 4025f68:	dd000415 	stw	r20,16(sp)
 4025f6c:	dcc00315 	stw	r19,12(sp)
 4025f70:	dc800215 	stw	r18,8(sp)
 4025f74:	dc400115 	stw	r17,4(sp)
 4025f78:	dc000015 	stw	r16,0(sp)
 4025f7c:	18d7d104 	addi	r3,r3,24388
 4025f80:	24000117 	ldw	r16,4(r4)
 4025f84:	20c00f15 	stw	r3,60(r4)
 4025f88:	2080bb04 	addi	r2,r4,748
 4025f8c:	00c000c4 	movi	r3,3
 4025f90:	20c0b915 	stw	r3,740(r4)
 4025f94:	2080ba15 	stw	r2,744(r4)
 4025f98:	2000b815 	stw	zero,736(r4)
 4025f9c:	05c00204 	movi	r23,8
 4025fa0:	00800104 	movi	r2,4
 4025fa4:	2025883a 	mov	r18,r4
 4025fa8:	b80d883a 	mov	r6,r23
 4025fac:	81001704 	addi	r4,r16,92
 4025fb0:	000b883a 	mov	r5,zero
 4025fb4:	80000015 	stw	zero,0(r16)
 4025fb8:	80000115 	stw	zero,4(r16)
 4025fbc:	80000215 	stw	zero,8(r16)
 4025fc0:	8080030d 	sth	r2,12(r16)
 4025fc4:	80001915 	stw	zero,100(r16)
 4025fc8:	8000038d 	sth	zero,14(r16)
 4025fcc:	80000415 	stw	zero,16(r16)
 4025fd0:	80000515 	stw	zero,20(r16)
 4025fd4:	80000615 	stw	zero,24(r16)
 4025fd8:	40275680 	call	4027568 <memset>
 4025fdc:	058100f4 	movhi	r22,1027
 4025fe0:	94400217 	ldw	r17,8(r18)
 4025fe4:	054100f4 	movhi	r21,1027
 4025fe8:	050100f4 	movhi	r20,1027
 4025fec:	04c100f4 	movhi	r19,1027
 4025ff0:	b5a1d504 	addi	r22,r22,-30892
 4025ff4:	ad61ec04 	addi	r21,r21,-30800
 4025ff8:	a5220b04 	addi	r20,r20,-30676
 4025ffc:	9ce22204 	addi	r19,r19,-30584
 4026000:	85800815 	stw	r22,32(r16)
 4026004:	85400915 	stw	r21,36(r16)
 4026008:	85000a15 	stw	r20,40(r16)
 402600c:	84c00b15 	stw	r19,44(r16)
 4026010:	84000715 	stw	r16,28(r16)
 4026014:	00800284 	movi	r2,10
 4026018:	8880030d 	sth	r2,12(r17)
 402601c:	00800044 	movi	r2,1
 4026020:	b80d883a 	mov	r6,r23
 4026024:	89001704 	addi	r4,r17,92
 4026028:	000b883a 	mov	r5,zero
 402602c:	88000015 	stw	zero,0(r17)
 4026030:	88000115 	stw	zero,4(r17)
 4026034:	88000215 	stw	zero,8(r17)
 4026038:	88001915 	stw	zero,100(r17)
 402603c:	8880038d 	sth	r2,14(r17)
 4026040:	88000415 	stw	zero,16(r17)
 4026044:	88000515 	stw	zero,20(r17)
 4026048:	88000615 	stw	zero,24(r17)
 402604c:	40275680 	call	4027568 <memset>
 4026050:	94000317 	ldw	r16,12(r18)
 4026054:	00800484 	movi	r2,18
 4026058:	8c400715 	stw	r17,28(r17)
 402605c:	8d800815 	stw	r22,32(r17)
 4026060:	8d400915 	stw	r21,36(r17)
 4026064:	8d000a15 	stw	r20,40(r17)
 4026068:	8cc00b15 	stw	r19,44(r17)
 402606c:	8080030d 	sth	r2,12(r16)
 4026070:	00800084 	movi	r2,2
 4026074:	80000015 	stw	zero,0(r16)
 4026078:	80000115 	stw	zero,4(r16)
 402607c:	80000215 	stw	zero,8(r16)
 4026080:	80001915 	stw	zero,100(r16)
 4026084:	8080038d 	sth	r2,14(r16)
 4026088:	80000415 	stw	zero,16(r16)
 402608c:	80000515 	stw	zero,20(r16)
 4026090:	80000615 	stw	zero,24(r16)
 4026094:	b80d883a 	mov	r6,r23
 4026098:	000b883a 	mov	r5,zero
 402609c:	81001704 	addi	r4,r16,92
 40260a0:	40275680 	call	4027568 <memset>
 40260a4:	00800044 	movi	r2,1
 40260a8:	84000715 	stw	r16,28(r16)
 40260ac:	85800815 	stw	r22,32(r16)
 40260b0:	85400915 	stw	r21,36(r16)
 40260b4:	85000a15 	stw	r20,40(r16)
 40260b8:	84c00b15 	stw	r19,44(r16)
 40260bc:	90800e15 	stw	r2,56(r18)
 40260c0:	dfc00817 	ldw	ra,32(sp)
 40260c4:	ddc00717 	ldw	r23,28(sp)
 40260c8:	dd800617 	ldw	r22,24(sp)
 40260cc:	dd400517 	ldw	r21,20(sp)
 40260d0:	dd000417 	ldw	r20,16(sp)
 40260d4:	dcc00317 	ldw	r19,12(sp)
 40260d8:	dc800217 	ldw	r18,8(sp)
 40260dc:	dc400117 	ldw	r17,4(sp)
 40260e0:	dc000017 	ldw	r16,0(sp)
 40260e4:	dec00904 	addi	sp,sp,36
 40260e8:	f800283a 	ret

040260ec <__fp_lock>:
 40260ec:	0005883a 	mov	r2,zero
 40260f0:	f800283a 	ret

040260f4 <__sfmoreglue>:
 40260f4:	defffc04 	addi	sp,sp,-16
 40260f8:	dc400115 	stw	r17,4(sp)
 40260fc:	2c7fffc4 	addi	r17,r5,-1
 4026100:	8c401a24 	muli	r17,r17,104
 4026104:	dc800215 	stw	r18,8(sp)
 4026108:	2825883a 	mov	r18,r5
 402610c:	89401d04 	addi	r5,r17,116
 4026110:	dc000015 	stw	r16,0(sp)
 4026114:	dfc00315 	stw	ra,12(sp)
 4026118:	4026b300 	call	4026b30 <_malloc_r>
 402611c:	1021883a 	mov	r16,r2
 4026120:	10000726 	beq	r2,zero,4026140 <__sfmoreglue+0x4c>
 4026124:	11000304 	addi	r4,r2,12
 4026128:	10000015 	stw	zero,0(r2)
 402612c:	14800115 	stw	r18,4(r2)
 4026130:	11000215 	stw	r4,8(r2)
 4026134:	89801a04 	addi	r6,r17,104
 4026138:	000b883a 	mov	r5,zero
 402613c:	40275680 	call	4027568 <memset>
 4026140:	8005883a 	mov	r2,r16
 4026144:	dfc00317 	ldw	ra,12(sp)
 4026148:	dc800217 	ldw	r18,8(sp)
 402614c:	dc400117 	ldw	r17,4(sp)
 4026150:	dc000017 	ldw	r16,0(sp)
 4026154:	dec00404 	addi	sp,sp,16
 4026158:	f800283a 	ret

0402615c <__sfp>:
 402615c:	defffb04 	addi	sp,sp,-20
 4026160:	dc000015 	stw	r16,0(sp)
 4026164:	040100f4 	movhi	r16,1027
 4026168:	84155f04 	addi	r16,r16,21884
 402616c:	dcc00315 	stw	r19,12(sp)
 4026170:	2027883a 	mov	r19,r4
 4026174:	81000017 	ldw	r4,0(r16)
 4026178:	dfc00415 	stw	ra,16(sp)
 402617c:	dc800215 	stw	r18,8(sp)
 4026180:	20800e17 	ldw	r2,56(r4)
 4026184:	dc400115 	stw	r17,4(sp)
 4026188:	1000021e 	bne	r2,zero,4026194 <__sfp+0x38>
 402618c:	4025f500 	call	4025f50 <__sinit.part.1>
 4026190:	81000017 	ldw	r4,0(r16)
 4026194:	2480b804 	addi	r18,r4,736
 4026198:	047fffc4 	movi	r17,-1
 402619c:	91000117 	ldw	r4,4(r18)
 40261a0:	94000217 	ldw	r16,8(r18)
 40261a4:	213fffc4 	addi	r4,r4,-1
 40261a8:	20000a16 	blt	r4,zero,40261d4 <__sfp+0x78>
 40261ac:	8080030f 	ldh	r2,12(r16)
 40261b0:	10000c26 	beq	r2,zero,40261e4 <__sfp+0x88>
 40261b4:	80c01d04 	addi	r3,r16,116
 40261b8:	00000206 	br	40261c4 <__sfp+0x68>
 40261bc:	18bfe60f 	ldh	r2,-104(r3)
 40261c0:	10000826 	beq	r2,zero,40261e4 <__sfp+0x88>
 40261c4:	213fffc4 	addi	r4,r4,-1
 40261c8:	1c3ffd04 	addi	r16,r3,-12
 40261cc:	18c01a04 	addi	r3,r3,104
 40261d0:	247ffa1e 	bne	r4,r17,40261bc <__alt_data_end+0xfffe61bc>
 40261d4:	90800017 	ldw	r2,0(r18)
 40261d8:	10001d26 	beq	r2,zero,4026250 <__sfp+0xf4>
 40261dc:	1025883a 	mov	r18,r2
 40261e0:	003fee06 	br	402619c <__alt_data_end+0xfffe619c>
 40261e4:	00bfffc4 	movi	r2,-1
 40261e8:	8080038d 	sth	r2,14(r16)
 40261ec:	00800044 	movi	r2,1
 40261f0:	8080030d 	sth	r2,12(r16)
 40261f4:	80001915 	stw	zero,100(r16)
 40261f8:	80000015 	stw	zero,0(r16)
 40261fc:	80000215 	stw	zero,8(r16)
 4026200:	80000115 	stw	zero,4(r16)
 4026204:	80000415 	stw	zero,16(r16)
 4026208:	80000515 	stw	zero,20(r16)
 402620c:	80000615 	stw	zero,24(r16)
 4026210:	01800204 	movi	r6,8
 4026214:	000b883a 	mov	r5,zero
 4026218:	81001704 	addi	r4,r16,92
 402621c:	40275680 	call	4027568 <memset>
 4026220:	8005883a 	mov	r2,r16
 4026224:	80000c15 	stw	zero,48(r16)
 4026228:	80000d15 	stw	zero,52(r16)
 402622c:	80001115 	stw	zero,68(r16)
 4026230:	80001215 	stw	zero,72(r16)
 4026234:	dfc00417 	ldw	ra,16(sp)
 4026238:	dcc00317 	ldw	r19,12(sp)
 402623c:	dc800217 	ldw	r18,8(sp)
 4026240:	dc400117 	ldw	r17,4(sp)
 4026244:	dc000017 	ldw	r16,0(sp)
 4026248:	dec00504 	addi	sp,sp,20
 402624c:	f800283a 	ret
 4026250:	01400104 	movi	r5,4
 4026254:	9809883a 	mov	r4,r19
 4026258:	40260f40 	call	40260f4 <__sfmoreglue>
 402625c:	90800015 	stw	r2,0(r18)
 4026260:	103fde1e 	bne	r2,zero,40261dc <__alt_data_end+0xfffe61dc>
 4026264:	00800304 	movi	r2,12
 4026268:	98800015 	stw	r2,0(r19)
 402626c:	0005883a 	mov	r2,zero
 4026270:	003ff006 	br	4026234 <__alt_data_end+0xfffe6234>

04026274 <_cleanup>:
 4026274:	008100f4 	movhi	r2,1027
 4026278:	10955f04 	addi	r2,r2,21884
 402627c:	11000017 	ldw	r4,0(r2)
 4026280:	014100f4 	movhi	r5,1027
 4026284:	29687104 	addi	r5,r5,-24124
 4026288:	40267d41 	jmpi	40267d4 <_fwalk_reent>

0402628c <__sinit>:
 402628c:	20800e17 	ldw	r2,56(r4)
 4026290:	10000126 	beq	r2,zero,4026298 <__sinit+0xc>
 4026294:	f800283a 	ret
 4026298:	4025f501 	jmpi	4025f50 <__sinit.part.1>

0402629c <__sfp_lock_acquire>:
 402629c:	f800283a 	ret

040262a0 <__sfp_lock_release>:
 40262a0:	f800283a 	ret

040262a4 <__sinit_lock_acquire>:
 40262a4:	f800283a 	ret

040262a8 <__sinit_lock_release>:
 40262a8:	f800283a 	ret

040262ac <__fp_lock_all>:
 40262ac:	008100f4 	movhi	r2,1027
 40262b0:	10956004 	addi	r2,r2,21888
 40262b4:	11000017 	ldw	r4,0(r2)
 40262b8:	014100b4 	movhi	r5,1026
 40262bc:	29583b04 	addi	r5,r5,24812
 40262c0:	40267101 	jmpi	4026710 <_fwalk>

040262c4 <__fp_unlock_all>:
 40262c4:	008100f4 	movhi	r2,1027
 40262c8:	10956004 	addi	r2,r2,21888
 40262cc:	11000017 	ldw	r4,0(r2)
 40262d0:	014100b4 	movhi	r5,1026
 40262d4:	2957cf04 	addi	r5,r5,24380
 40262d8:	40267101 	jmpi	4026710 <_fwalk>

040262dc <_malloc_trim_r>:
 40262dc:	defffb04 	addi	sp,sp,-20
 40262e0:	dcc00315 	stw	r19,12(sp)
 40262e4:	04c100f4 	movhi	r19,1027
 40262e8:	dc800215 	stw	r18,8(sp)
 40262ec:	dc400115 	stw	r17,4(sp)
 40262f0:	dc000015 	stw	r16,0(sp)
 40262f4:	dfc00415 	stw	ra,16(sp)
 40262f8:	2821883a 	mov	r16,r5
 40262fc:	9ccf8904 	addi	r19,r19,15908
 4026300:	2025883a 	mov	r18,r4
 4026304:	402eea80 	call	402eea8 <__malloc_lock>
 4026308:	98800217 	ldw	r2,8(r19)
 402630c:	14400117 	ldw	r17,4(r2)
 4026310:	00bfff04 	movi	r2,-4
 4026314:	88a2703a 	and	r17,r17,r2
 4026318:	8c21c83a 	sub	r16,r17,r16
 402631c:	8403fbc4 	addi	r16,r16,4079
 4026320:	8020d33a 	srli	r16,r16,12
 4026324:	0083ffc4 	movi	r2,4095
 4026328:	843fffc4 	addi	r16,r16,-1
 402632c:	8020933a 	slli	r16,r16,12
 4026330:	1400060e 	bge	r2,r16,402634c <_malloc_trim_r+0x70>
 4026334:	000b883a 	mov	r5,zero
 4026338:	9009883a 	mov	r4,r18
 402633c:	40287000 	call	4028700 <_sbrk_r>
 4026340:	98c00217 	ldw	r3,8(r19)
 4026344:	1c47883a 	add	r3,r3,r17
 4026348:	10c00a26 	beq	r2,r3,4026374 <_malloc_trim_r+0x98>
 402634c:	9009883a 	mov	r4,r18
 4026350:	402eecc0 	call	402eecc <__malloc_unlock>
 4026354:	0005883a 	mov	r2,zero
 4026358:	dfc00417 	ldw	ra,16(sp)
 402635c:	dcc00317 	ldw	r19,12(sp)
 4026360:	dc800217 	ldw	r18,8(sp)
 4026364:	dc400117 	ldw	r17,4(sp)
 4026368:	dc000017 	ldw	r16,0(sp)
 402636c:	dec00504 	addi	sp,sp,20
 4026370:	f800283a 	ret
 4026374:	040bc83a 	sub	r5,zero,r16
 4026378:	9009883a 	mov	r4,r18
 402637c:	40287000 	call	4028700 <_sbrk_r>
 4026380:	00ffffc4 	movi	r3,-1
 4026384:	10c00d26 	beq	r2,r3,40263bc <_malloc_trim_r+0xe0>
 4026388:	00c100f4 	movhi	r3,1027
 402638c:	18dc9a04 	addi	r3,r3,29288
 4026390:	18800017 	ldw	r2,0(r3)
 4026394:	99000217 	ldw	r4,8(r19)
 4026398:	8c23c83a 	sub	r17,r17,r16
 402639c:	8c400054 	ori	r17,r17,1
 40263a0:	1421c83a 	sub	r16,r2,r16
 40263a4:	24400115 	stw	r17,4(r4)
 40263a8:	9009883a 	mov	r4,r18
 40263ac:	1c000015 	stw	r16,0(r3)
 40263b0:	402eecc0 	call	402eecc <__malloc_unlock>
 40263b4:	00800044 	movi	r2,1
 40263b8:	003fe706 	br	4026358 <__alt_data_end+0xfffe6358>
 40263bc:	000b883a 	mov	r5,zero
 40263c0:	9009883a 	mov	r4,r18
 40263c4:	40287000 	call	4028700 <_sbrk_r>
 40263c8:	99000217 	ldw	r4,8(r19)
 40263cc:	014003c4 	movi	r5,15
 40263d0:	1107c83a 	sub	r3,r2,r4
 40263d4:	28ffdd0e 	bge	r5,r3,402634c <__alt_data_end+0xfffe634c>
 40263d8:	014100f4 	movhi	r5,1027
 40263dc:	29556204 	addi	r5,r5,21896
 40263e0:	29400017 	ldw	r5,0(r5)
 40263e4:	18c00054 	ori	r3,r3,1
 40263e8:	20c00115 	stw	r3,4(r4)
 40263ec:	00c100f4 	movhi	r3,1027
 40263f0:	1145c83a 	sub	r2,r2,r5
 40263f4:	18dc9a04 	addi	r3,r3,29288
 40263f8:	18800015 	stw	r2,0(r3)
 40263fc:	003fd306 	br	402634c <__alt_data_end+0xfffe634c>

04026400 <_free_r>:
 4026400:	28004126 	beq	r5,zero,4026508 <_free_r+0x108>
 4026404:	defffd04 	addi	sp,sp,-12
 4026408:	dc400115 	stw	r17,4(sp)
 402640c:	dc000015 	stw	r16,0(sp)
 4026410:	2023883a 	mov	r17,r4
 4026414:	2821883a 	mov	r16,r5
 4026418:	dfc00215 	stw	ra,8(sp)
 402641c:	402eea80 	call	402eea8 <__malloc_lock>
 4026420:	81ffff17 	ldw	r7,-4(r16)
 4026424:	00bfff84 	movi	r2,-2
 4026428:	010100f4 	movhi	r4,1027
 402642c:	81bffe04 	addi	r6,r16,-8
 4026430:	3884703a 	and	r2,r7,r2
 4026434:	210f8904 	addi	r4,r4,15908
 4026438:	308b883a 	add	r5,r6,r2
 402643c:	2a400117 	ldw	r9,4(r5)
 4026440:	22000217 	ldw	r8,8(r4)
 4026444:	00ffff04 	movi	r3,-4
 4026448:	48c6703a 	and	r3,r9,r3
 402644c:	2a005726 	beq	r5,r8,40265ac <_free_r+0x1ac>
 4026450:	28c00115 	stw	r3,4(r5)
 4026454:	39c0004c 	andi	r7,r7,1
 4026458:	3800091e 	bne	r7,zero,4026480 <_free_r+0x80>
 402645c:	823ffe17 	ldw	r8,-8(r16)
 4026460:	22400204 	addi	r9,r4,8
 4026464:	320dc83a 	sub	r6,r6,r8
 4026468:	31c00217 	ldw	r7,8(r6)
 402646c:	1205883a 	add	r2,r2,r8
 4026470:	3a406526 	beq	r7,r9,4026608 <_free_r+0x208>
 4026474:	32000317 	ldw	r8,12(r6)
 4026478:	3a000315 	stw	r8,12(r7)
 402647c:	41c00215 	stw	r7,8(r8)
 4026480:	28cf883a 	add	r7,r5,r3
 4026484:	39c00117 	ldw	r7,4(r7)
 4026488:	39c0004c 	andi	r7,r7,1
 402648c:	38003a26 	beq	r7,zero,4026578 <_free_r+0x178>
 4026490:	10c00054 	ori	r3,r2,1
 4026494:	30c00115 	stw	r3,4(r6)
 4026498:	3087883a 	add	r3,r6,r2
 402649c:	18800015 	stw	r2,0(r3)
 40264a0:	00c07fc4 	movi	r3,511
 40264a4:	18801936 	bltu	r3,r2,402650c <_free_r+0x10c>
 40264a8:	1004d0fa 	srli	r2,r2,3
 40264ac:	01c00044 	movi	r7,1
 40264b0:	21400117 	ldw	r5,4(r4)
 40264b4:	10c00044 	addi	r3,r2,1
 40264b8:	18c7883a 	add	r3,r3,r3
 40264bc:	1005d0ba 	srai	r2,r2,2
 40264c0:	18c7883a 	add	r3,r3,r3
 40264c4:	18c7883a 	add	r3,r3,r3
 40264c8:	1907883a 	add	r3,r3,r4
 40264cc:	3884983a 	sll	r2,r7,r2
 40264d0:	19c00017 	ldw	r7,0(r3)
 40264d4:	1a3ffe04 	addi	r8,r3,-8
 40264d8:	1144b03a 	or	r2,r2,r5
 40264dc:	32000315 	stw	r8,12(r6)
 40264e0:	31c00215 	stw	r7,8(r6)
 40264e4:	20800115 	stw	r2,4(r4)
 40264e8:	19800015 	stw	r6,0(r3)
 40264ec:	39800315 	stw	r6,12(r7)
 40264f0:	8809883a 	mov	r4,r17
 40264f4:	dfc00217 	ldw	ra,8(sp)
 40264f8:	dc400117 	ldw	r17,4(sp)
 40264fc:	dc000017 	ldw	r16,0(sp)
 4026500:	dec00304 	addi	sp,sp,12
 4026504:	402eecc1 	jmpi	402eecc <__malloc_unlock>
 4026508:	f800283a 	ret
 402650c:	100ad27a 	srli	r5,r2,9
 4026510:	00c00104 	movi	r3,4
 4026514:	19404a36 	bltu	r3,r5,4026640 <_free_r+0x240>
 4026518:	100ad1ba 	srli	r5,r2,6
 402651c:	28c00e44 	addi	r3,r5,57
 4026520:	18c7883a 	add	r3,r3,r3
 4026524:	29400e04 	addi	r5,r5,56
 4026528:	18c7883a 	add	r3,r3,r3
 402652c:	18c7883a 	add	r3,r3,r3
 4026530:	1909883a 	add	r4,r3,r4
 4026534:	20c00017 	ldw	r3,0(r4)
 4026538:	01c100f4 	movhi	r7,1027
 402653c:	213ffe04 	addi	r4,r4,-8
 4026540:	39cf8904 	addi	r7,r7,15908
 4026544:	20c04426 	beq	r4,r3,4026658 <_free_r+0x258>
 4026548:	01ffff04 	movi	r7,-4
 402654c:	19400117 	ldw	r5,4(r3)
 4026550:	29ca703a 	and	r5,r5,r7
 4026554:	1140022e 	bgeu	r2,r5,4026560 <_free_r+0x160>
 4026558:	18c00217 	ldw	r3,8(r3)
 402655c:	20fffb1e 	bne	r4,r3,402654c <__alt_data_end+0xfffe654c>
 4026560:	19000317 	ldw	r4,12(r3)
 4026564:	31000315 	stw	r4,12(r6)
 4026568:	30c00215 	stw	r3,8(r6)
 402656c:	21800215 	stw	r6,8(r4)
 4026570:	19800315 	stw	r6,12(r3)
 4026574:	003fde06 	br	40264f0 <__alt_data_end+0xfffe64f0>
 4026578:	29c00217 	ldw	r7,8(r5)
 402657c:	10c5883a 	add	r2,r2,r3
 4026580:	00c100f4 	movhi	r3,1027
 4026584:	18cf8b04 	addi	r3,r3,15916
 4026588:	38c03b26 	beq	r7,r3,4026678 <_free_r+0x278>
 402658c:	2a000317 	ldw	r8,12(r5)
 4026590:	11400054 	ori	r5,r2,1
 4026594:	3087883a 	add	r3,r6,r2
 4026598:	3a000315 	stw	r8,12(r7)
 402659c:	41c00215 	stw	r7,8(r8)
 40265a0:	31400115 	stw	r5,4(r6)
 40265a4:	18800015 	stw	r2,0(r3)
 40265a8:	003fbd06 	br	40264a0 <__alt_data_end+0xfffe64a0>
 40265ac:	39c0004c 	andi	r7,r7,1
 40265b0:	10c5883a 	add	r2,r2,r3
 40265b4:	3800071e 	bne	r7,zero,40265d4 <_free_r+0x1d4>
 40265b8:	81fffe17 	ldw	r7,-8(r16)
 40265bc:	31cdc83a 	sub	r6,r6,r7
 40265c0:	30c00317 	ldw	r3,12(r6)
 40265c4:	31400217 	ldw	r5,8(r6)
 40265c8:	11c5883a 	add	r2,r2,r7
 40265cc:	28c00315 	stw	r3,12(r5)
 40265d0:	19400215 	stw	r5,8(r3)
 40265d4:	10c00054 	ori	r3,r2,1
 40265d8:	30c00115 	stw	r3,4(r6)
 40265dc:	00c100f4 	movhi	r3,1027
 40265e0:	18d56304 	addi	r3,r3,21900
 40265e4:	18c00017 	ldw	r3,0(r3)
 40265e8:	21800215 	stw	r6,8(r4)
 40265ec:	10ffc036 	bltu	r2,r3,40264f0 <__alt_data_end+0xfffe64f0>
 40265f0:	008100f4 	movhi	r2,1027
 40265f4:	109c9104 	addi	r2,r2,29252
 40265f8:	11400017 	ldw	r5,0(r2)
 40265fc:	8809883a 	mov	r4,r17
 4026600:	40262dc0 	call	40262dc <_malloc_trim_r>
 4026604:	003fba06 	br	40264f0 <__alt_data_end+0xfffe64f0>
 4026608:	28c9883a 	add	r4,r5,r3
 402660c:	21000117 	ldw	r4,4(r4)
 4026610:	2100004c 	andi	r4,r4,1
 4026614:	2000391e 	bne	r4,zero,40266fc <_free_r+0x2fc>
 4026618:	29c00217 	ldw	r7,8(r5)
 402661c:	29000317 	ldw	r4,12(r5)
 4026620:	1885883a 	add	r2,r3,r2
 4026624:	10c00054 	ori	r3,r2,1
 4026628:	39000315 	stw	r4,12(r7)
 402662c:	21c00215 	stw	r7,8(r4)
 4026630:	30c00115 	stw	r3,4(r6)
 4026634:	308d883a 	add	r6,r6,r2
 4026638:	30800015 	stw	r2,0(r6)
 402663c:	003fac06 	br	40264f0 <__alt_data_end+0xfffe64f0>
 4026640:	00c00504 	movi	r3,20
 4026644:	19401536 	bltu	r3,r5,402669c <_free_r+0x29c>
 4026648:	28c01704 	addi	r3,r5,92
 402664c:	18c7883a 	add	r3,r3,r3
 4026650:	294016c4 	addi	r5,r5,91
 4026654:	003fb406 	br	4026528 <__alt_data_end+0xfffe6528>
 4026658:	280bd0ba 	srai	r5,r5,2
 402665c:	00c00044 	movi	r3,1
 4026660:	38800117 	ldw	r2,4(r7)
 4026664:	194a983a 	sll	r5,r3,r5
 4026668:	2007883a 	mov	r3,r4
 402666c:	2884b03a 	or	r2,r5,r2
 4026670:	38800115 	stw	r2,4(r7)
 4026674:	003fbb06 	br	4026564 <__alt_data_end+0xfffe6564>
 4026678:	21800515 	stw	r6,20(r4)
 402667c:	21800415 	stw	r6,16(r4)
 4026680:	10c00054 	ori	r3,r2,1
 4026684:	31c00315 	stw	r7,12(r6)
 4026688:	31c00215 	stw	r7,8(r6)
 402668c:	30c00115 	stw	r3,4(r6)
 4026690:	308d883a 	add	r6,r6,r2
 4026694:	30800015 	stw	r2,0(r6)
 4026698:	003f9506 	br	40264f0 <__alt_data_end+0xfffe64f0>
 402669c:	00c01504 	movi	r3,84
 40266a0:	19400536 	bltu	r3,r5,40266b8 <_free_r+0x2b8>
 40266a4:	100ad33a 	srli	r5,r2,12
 40266a8:	28c01bc4 	addi	r3,r5,111
 40266ac:	18c7883a 	add	r3,r3,r3
 40266b0:	29401b84 	addi	r5,r5,110
 40266b4:	003f9c06 	br	4026528 <__alt_data_end+0xfffe6528>
 40266b8:	00c05504 	movi	r3,340
 40266bc:	19400536 	bltu	r3,r5,40266d4 <_free_r+0x2d4>
 40266c0:	100ad3fa 	srli	r5,r2,15
 40266c4:	28c01e04 	addi	r3,r5,120
 40266c8:	18c7883a 	add	r3,r3,r3
 40266cc:	29401dc4 	addi	r5,r5,119
 40266d0:	003f9506 	br	4026528 <__alt_data_end+0xfffe6528>
 40266d4:	00c15504 	movi	r3,1364
 40266d8:	19400536 	bltu	r3,r5,40266f0 <_free_r+0x2f0>
 40266dc:	100ad4ba 	srli	r5,r2,18
 40266e0:	28c01f44 	addi	r3,r5,125
 40266e4:	18c7883a 	add	r3,r3,r3
 40266e8:	29401f04 	addi	r5,r5,124
 40266ec:	003f8e06 	br	4026528 <__alt_data_end+0xfffe6528>
 40266f0:	00c03f84 	movi	r3,254
 40266f4:	01401f84 	movi	r5,126
 40266f8:	003f8b06 	br	4026528 <__alt_data_end+0xfffe6528>
 40266fc:	10c00054 	ori	r3,r2,1
 4026700:	30c00115 	stw	r3,4(r6)
 4026704:	308d883a 	add	r6,r6,r2
 4026708:	30800015 	stw	r2,0(r6)
 402670c:	003f7806 	br	40264f0 <__alt_data_end+0xfffe64f0>

04026710 <_fwalk>:
 4026710:	defff704 	addi	sp,sp,-36
 4026714:	dd000415 	stw	r20,16(sp)
 4026718:	dfc00815 	stw	ra,32(sp)
 402671c:	ddc00715 	stw	r23,28(sp)
 4026720:	dd800615 	stw	r22,24(sp)
 4026724:	dd400515 	stw	r21,20(sp)
 4026728:	dcc00315 	stw	r19,12(sp)
 402672c:	dc800215 	stw	r18,8(sp)
 4026730:	dc400115 	stw	r17,4(sp)
 4026734:	dc000015 	stw	r16,0(sp)
 4026738:	2500b804 	addi	r20,r4,736
 402673c:	a0002326 	beq	r20,zero,40267cc <_fwalk+0xbc>
 4026740:	282b883a 	mov	r21,r5
 4026744:	002f883a 	mov	r23,zero
 4026748:	05800044 	movi	r22,1
 402674c:	04ffffc4 	movi	r19,-1
 4026750:	a4400117 	ldw	r17,4(r20)
 4026754:	a4800217 	ldw	r18,8(r20)
 4026758:	8c7fffc4 	addi	r17,r17,-1
 402675c:	88000d16 	blt	r17,zero,4026794 <_fwalk+0x84>
 4026760:	94000304 	addi	r16,r18,12
 4026764:	94800384 	addi	r18,r18,14
 4026768:	8080000b 	ldhu	r2,0(r16)
 402676c:	8c7fffc4 	addi	r17,r17,-1
 4026770:	813ffd04 	addi	r4,r16,-12
 4026774:	b080042e 	bgeu	r22,r2,4026788 <_fwalk+0x78>
 4026778:	9080000f 	ldh	r2,0(r18)
 402677c:	14c00226 	beq	r2,r19,4026788 <_fwalk+0x78>
 4026780:	a83ee83a 	callr	r21
 4026784:	b8aeb03a 	or	r23,r23,r2
 4026788:	84001a04 	addi	r16,r16,104
 402678c:	94801a04 	addi	r18,r18,104
 4026790:	8cfff51e 	bne	r17,r19,4026768 <__alt_data_end+0xfffe6768>
 4026794:	a5000017 	ldw	r20,0(r20)
 4026798:	a03fed1e 	bne	r20,zero,4026750 <__alt_data_end+0xfffe6750>
 402679c:	b805883a 	mov	r2,r23
 40267a0:	dfc00817 	ldw	ra,32(sp)
 40267a4:	ddc00717 	ldw	r23,28(sp)
 40267a8:	dd800617 	ldw	r22,24(sp)
 40267ac:	dd400517 	ldw	r21,20(sp)
 40267b0:	dd000417 	ldw	r20,16(sp)
 40267b4:	dcc00317 	ldw	r19,12(sp)
 40267b8:	dc800217 	ldw	r18,8(sp)
 40267bc:	dc400117 	ldw	r17,4(sp)
 40267c0:	dc000017 	ldw	r16,0(sp)
 40267c4:	dec00904 	addi	sp,sp,36
 40267c8:	f800283a 	ret
 40267cc:	002f883a 	mov	r23,zero
 40267d0:	003ff206 	br	402679c <__alt_data_end+0xfffe679c>

040267d4 <_fwalk_reent>:
 40267d4:	defff704 	addi	sp,sp,-36
 40267d8:	dd000415 	stw	r20,16(sp)
 40267dc:	dfc00815 	stw	ra,32(sp)
 40267e0:	ddc00715 	stw	r23,28(sp)
 40267e4:	dd800615 	stw	r22,24(sp)
 40267e8:	dd400515 	stw	r21,20(sp)
 40267ec:	dcc00315 	stw	r19,12(sp)
 40267f0:	dc800215 	stw	r18,8(sp)
 40267f4:	dc400115 	stw	r17,4(sp)
 40267f8:	dc000015 	stw	r16,0(sp)
 40267fc:	2500b804 	addi	r20,r4,736
 4026800:	a0002326 	beq	r20,zero,4026890 <_fwalk_reent+0xbc>
 4026804:	282b883a 	mov	r21,r5
 4026808:	2027883a 	mov	r19,r4
 402680c:	002f883a 	mov	r23,zero
 4026810:	05800044 	movi	r22,1
 4026814:	04bfffc4 	movi	r18,-1
 4026818:	a4400117 	ldw	r17,4(r20)
 402681c:	a4000217 	ldw	r16,8(r20)
 4026820:	8c7fffc4 	addi	r17,r17,-1
 4026824:	88000c16 	blt	r17,zero,4026858 <_fwalk_reent+0x84>
 4026828:	84000304 	addi	r16,r16,12
 402682c:	8080000b 	ldhu	r2,0(r16)
 4026830:	8c7fffc4 	addi	r17,r17,-1
 4026834:	817ffd04 	addi	r5,r16,-12
 4026838:	b080052e 	bgeu	r22,r2,4026850 <_fwalk_reent+0x7c>
 402683c:	8080008f 	ldh	r2,2(r16)
 4026840:	9809883a 	mov	r4,r19
 4026844:	14800226 	beq	r2,r18,4026850 <_fwalk_reent+0x7c>
 4026848:	a83ee83a 	callr	r21
 402684c:	b8aeb03a 	or	r23,r23,r2
 4026850:	84001a04 	addi	r16,r16,104
 4026854:	8cbff51e 	bne	r17,r18,402682c <__alt_data_end+0xfffe682c>
 4026858:	a5000017 	ldw	r20,0(r20)
 402685c:	a03fee1e 	bne	r20,zero,4026818 <__alt_data_end+0xfffe6818>
 4026860:	b805883a 	mov	r2,r23
 4026864:	dfc00817 	ldw	ra,32(sp)
 4026868:	ddc00717 	ldw	r23,28(sp)
 402686c:	dd800617 	ldw	r22,24(sp)
 4026870:	dd400517 	ldw	r21,20(sp)
 4026874:	dd000417 	ldw	r20,16(sp)
 4026878:	dcc00317 	ldw	r19,12(sp)
 402687c:	dc800217 	ldw	r18,8(sp)
 4026880:	dc400117 	ldw	r17,4(sp)
 4026884:	dc000017 	ldw	r16,0(sp)
 4026888:	dec00904 	addi	sp,sp,36
 402688c:	f800283a 	ret
 4026890:	002f883a 	mov	r23,zero
 4026894:	003ff206 	br	4026860 <__alt_data_end+0xfffe6860>

04026898 <_setlocale_r>:
 4026898:	30001b26 	beq	r6,zero,4026908 <_setlocale_r+0x70>
 402689c:	014100f4 	movhi	r5,1027
 40268a0:	defffe04 	addi	sp,sp,-8
 40268a4:	294d9d04 	addi	r5,r5,13940
 40268a8:	3009883a 	mov	r4,r6
 40268ac:	dc000015 	stw	r16,0(sp)
 40268b0:	dfc00115 	stw	ra,4(sp)
 40268b4:	3021883a 	mov	r16,r6
 40268b8:	40288900 	call	4028890 <strcmp>
 40268bc:	1000061e 	bne	r2,zero,40268d8 <_setlocale_r+0x40>
 40268c0:	008100f4 	movhi	r2,1027
 40268c4:	108d9c04 	addi	r2,r2,13936
 40268c8:	dfc00117 	ldw	ra,4(sp)
 40268cc:	dc000017 	ldw	r16,0(sp)
 40268d0:	dec00204 	addi	sp,sp,8
 40268d4:	f800283a 	ret
 40268d8:	014100f4 	movhi	r5,1027
 40268dc:	294d9c04 	addi	r5,r5,13936
 40268e0:	8009883a 	mov	r4,r16
 40268e4:	40288900 	call	4028890 <strcmp>
 40268e8:	103ff526 	beq	r2,zero,40268c0 <__alt_data_end+0xfffe68c0>
 40268ec:	014100f4 	movhi	r5,1027
 40268f0:	294d8704 	addi	r5,r5,13852
 40268f4:	8009883a 	mov	r4,r16
 40268f8:	40288900 	call	4028890 <strcmp>
 40268fc:	103ff026 	beq	r2,zero,40268c0 <__alt_data_end+0xfffe68c0>
 4026900:	0005883a 	mov	r2,zero
 4026904:	003ff006 	br	40268c8 <__alt_data_end+0xfffe68c8>
 4026908:	008100f4 	movhi	r2,1027
 402690c:	108d9c04 	addi	r2,r2,13936
 4026910:	f800283a 	ret

04026914 <__locale_charset>:
 4026914:	008100f4 	movhi	r2,1027
 4026918:	108f7304 	addi	r2,r2,15820
 402691c:	f800283a 	ret

04026920 <__locale_mb_cur_max>:
 4026920:	008100f4 	movhi	r2,1027
 4026924:	10956104 	addi	r2,r2,21892
 4026928:	10800017 	ldw	r2,0(r2)
 402692c:	f800283a 	ret

04026930 <__locale_msgcharset>:
 4026930:	008100f4 	movhi	r2,1027
 4026934:	108f6b04 	addi	r2,r2,15788
 4026938:	f800283a 	ret

0402693c <__locale_cjk_lang>:
 402693c:	0005883a 	mov	r2,zero
 4026940:	f800283a 	ret

04026944 <_localeconv_r>:
 4026944:	008100f4 	movhi	r2,1027
 4026948:	108f7b04 	addi	r2,r2,15852
 402694c:	f800283a 	ret

04026950 <setlocale>:
 4026950:	008100f4 	movhi	r2,1027
 4026954:	10956004 	addi	r2,r2,21888
 4026958:	280d883a 	mov	r6,r5
 402695c:	200b883a 	mov	r5,r4
 4026960:	11000017 	ldw	r4,0(r2)
 4026964:	40268981 	jmpi	4026898 <_setlocale_r>

04026968 <localeconv>:
 4026968:	008100f4 	movhi	r2,1027
 402696c:	108f7b04 	addi	r2,r2,15852
 4026970:	f800283a 	ret

04026974 <__smakebuf_r>:
 4026974:	2880030b 	ldhu	r2,12(r5)
 4026978:	10c0008c 	andi	r3,r2,2
 402697c:	1800411e 	bne	r3,zero,4026a84 <__smakebuf_r+0x110>
 4026980:	deffec04 	addi	sp,sp,-80
 4026984:	dc000f15 	stw	r16,60(sp)
 4026988:	2821883a 	mov	r16,r5
 402698c:	2940038f 	ldh	r5,14(r5)
 4026990:	dc401015 	stw	r17,64(sp)
 4026994:	dfc01315 	stw	ra,76(sp)
 4026998:	dcc01215 	stw	r19,72(sp)
 402699c:	dc801115 	stw	r18,68(sp)
 40269a0:	2023883a 	mov	r17,r4
 40269a4:	28001c16 	blt	r5,zero,4026a18 <__smakebuf_r+0xa4>
 40269a8:	d80d883a 	mov	r6,sp
 40269ac:	402a4d00 	call	402a4d0 <_fstat_r>
 40269b0:	10001816 	blt	r2,zero,4026a14 <__smakebuf_r+0xa0>
 40269b4:	d8800117 	ldw	r2,4(sp)
 40269b8:	00e00014 	movui	r3,32768
 40269bc:	10bc000c 	andi	r2,r2,61440
 40269c0:	14c80020 	cmpeqi	r19,r2,8192
 40269c4:	10c03726 	beq	r2,r3,4026aa4 <__smakebuf_r+0x130>
 40269c8:	80c0030b 	ldhu	r3,12(r16)
 40269cc:	18c20014 	ori	r3,r3,2048
 40269d0:	80c0030d 	sth	r3,12(r16)
 40269d4:	00c80004 	movi	r3,8192
 40269d8:	10c0521e 	bne	r2,r3,4026b24 <__smakebuf_r+0x1b0>
 40269dc:	8140038f 	ldh	r5,14(r16)
 40269e0:	8809883a 	mov	r4,r17
 40269e4:	402a9e80 	call	402a9e8 <_isatty_r>
 40269e8:	10004c26 	beq	r2,zero,4026b1c <__smakebuf_r+0x1a8>
 40269ec:	8080030b 	ldhu	r2,12(r16)
 40269f0:	80c010c4 	addi	r3,r16,67
 40269f4:	80c00015 	stw	r3,0(r16)
 40269f8:	10800054 	ori	r2,r2,1
 40269fc:	8080030d 	sth	r2,12(r16)
 4026a00:	00800044 	movi	r2,1
 4026a04:	80c00415 	stw	r3,16(r16)
 4026a08:	80800515 	stw	r2,20(r16)
 4026a0c:	04810004 	movi	r18,1024
 4026a10:	00000706 	br	4026a30 <__smakebuf_r+0xbc>
 4026a14:	8080030b 	ldhu	r2,12(r16)
 4026a18:	10c0200c 	andi	r3,r2,128
 4026a1c:	18001f1e 	bne	r3,zero,4026a9c <__smakebuf_r+0x128>
 4026a20:	04810004 	movi	r18,1024
 4026a24:	10820014 	ori	r2,r2,2048
 4026a28:	8080030d 	sth	r2,12(r16)
 4026a2c:	0027883a 	mov	r19,zero
 4026a30:	900b883a 	mov	r5,r18
 4026a34:	8809883a 	mov	r4,r17
 4026a38:	4026b300 	call	4026b30 <_malloc_r>
 4026a3c:	10002c26 	beq	r2,zero,4026af0 <__smakebuf_r+0x17c>
 4026a40:	80c0030b 	ldhu	r3,12(r16)
 4026a44:	010100b4 	movhi	r4,1026
 4026a48:	2117d104 	addi	r4,r4,24388
 4026a4c:	89000f15 	stw	r4,60(r17)
 4026a50:	18c02014 	ori	r3,r3,128
 4026a54:	80c0030d 	sth	r3,12(r16)
 4026a58:	80800015 	stw	r2,0(r16)
 4026a5c:	80800415 	stw	r2,16(r16)
 4026a60:	84800515 	stw	r18,20(r16)
 4026a64:	98001a1e 	bne	r19,zero,4026ad0 <__smakebuf_r+0x15c>
 4026a68:	dfc01317 	ldw	ra,76(sp)
 4026a6c:	dcc01217 	ldw	r19,72(sp)
 4026a70:	dc801117 	ldw	r18,68(sp)
 4026a74:	dc401017 	ldw	r17,64(sp)
 4026a78:	dc000f17 	ldw	r16,60(sp)
 4026a7c:	dec01404 	addi	sp,sp,80
 4026a80:	f800283a 	ret
 4026a84:	288010c4 	addi	r2,r5,67
 4026a88:	28800015 	stw	r2,0(r5)
 4026a8c:	28800415 	stw	r2,16(r5)
 4026a90:	00800044 	movi	r2,1
 4026a94:	28800515 	stw	r2,20(r5)
 4026a98:	f800283a 	ret
 4026a9c:	04801004 	movi	r18,64
 4026aa0:	003fe006 	br	4026a24 <__alt_data_end+0xfffe6a24>
 4026aa4:	81000a17 	ldw	r4,40(r16)
 4026aa8:	00c100f4 	movhi	r3,1027
 4026aac:	18e20b04 	addi	r3,r3,-30676
 4026ab0:	20ffc51e 	bne	r4,r3,40269c8 <__alt_data_end+0xfffe69c8>
 4026ab4:	8080030b 	ldhu	r2,12(r16)
 4026ab8:	04810004 	movi	r18,1024
 4026abc:	84801315 	stw	r18,76(r16)
 4026ac0:	1484b03a 	or	r2,r2,r18
 4026ac4:	8080030d 	sth	r2,12(r16)
 4026ac8:	0027883a 	mov	r19,zero
 4026acc:	003fd806 	br	4026a30 <__alt_data_end+0xfffe6a30>
 4026ad0:	8140038f 	ldh	r5,14(r16)
 4026ad4:	8809883a 	mov	r4,r17
 4026ad8:	402a9e80 	call	402a9e8 <_isatty_r>
 4026adc:	103fe226 	beq	r2,zero,4026a68 <__alt_data_end+0xfffe6a68>
 4026ae0:	8080030b 	ldhu	r2,12(r16)
 4026ae4:	10800054 	ori	r2,r2,1
 4026ae8:	8080030d 	sth	r2,12(r16)
 4026aec:	003fde06 	br	4026a68 <__alt_data_end+0xfffe6a68>
 4026af0:	8080030b 	ldhu	r2,12(r16)
 4026af4:	10c0800c 	andi	r3,r2,512
 4026af8:	183fdb1e 	bne	r3,zero,4026a68 <__alt_data_end+0xfffe6a68>
 4026afc:	10800094 	ori	r2,r2,2
 4026b00:	80c010c4 	addi	r3,r16,67
 4026b04:	8080030d 	sth	r2,12(r16)
 4026b08:	00800044 	movi	r2,1
 4026b0c:	80c00015 	stw	r3,0(r16)
 4026b10:	80c00415 	stw	r3,16(r16)
 4026b14:	80800515 	stw	r2,20(r16)
 4026b18:	003fd306 	br	4026a68 <__alt_data_end+0xfffe6a68>
 4026b1c:	04810004 	movi	r18,1024
 4026b20:	003fc306 	br	4026a30 <__alt_data_end+0xfffe6a30>
 4026b24:	0027883a 	mov	r19,zero
 4026b28:	04810004 	movi	r18,1024
 4026b2c:	003fc006 	br	4026a30 <__alt_data_end+0xfffe6a30>

04026b30 <_malloc_r>:
 4026b30:	defff504 	addi	sp,sp,-44
 4026b34:	dc800315 	stw	r18,12(sp)
 4026b38:	dfc00a15 	stw	ra,40(sp)
 4026b3c:	df000915 	stw	fp,36(sp)
 4026b40:	ddc00815 	stw	r23,32(sp)
 4026b44:	dd800715 	stw	r22,28(sp)
 4026b48:	dd400615 	stw	r21,24(sp)
 4026b4c:	dd000515 	stw	r20,20(sp)
 4026b50:	dcc00415 	stw	r19,16(sp)
 4026b54:	dc400215 	stw	r17,8(sp)
 4026b58:	dc000115 	stw	r16,4(sp)
 4026b5c:	288002c4 	addi	r2,r5,11
 4026b60:	00c00584 	movi	r3,22
 4026b64:	2025883a 	mov	r18,r4
 4026b68:	18807f2e 	bgeu	r3,r2,4026d68 <_malloc_r+0x238>
 4026b6c:	047ffe04 	movi	r17,-8
 4026b70:	1462703a 	and	r17,r2,r17
 4026b74:	8800a316 	blt	r17,zero,4026e04 <_malloc_r+0x2d4>
 4026b78:	8940a236 	bltu	r17,r5,4026e04 <_malloc_r+0x2d4>
 4026b7c:	402eea80 	call	402eea8 <__malloc_lock>
 4026b80:	00807dc4 	movi	r2,503
 4026b84:	1441e92e 	bgeu	r2,r17,402732c <_malloc_r+0x7fc>
 4026b88:	8804d27a 	srli	r2,r17,9
 4026b8c:	1000a126 	beq	r2,zero,4026e14 <_malloc_r+0x2e4>
 4026b90:	00c00104 	movi	r3,4
 4026b94:	18811e36 	bltu	r3,r2,4027010 <_malloc_r+0x4e0>
 4026b98:	8804d1ba 	srli	r2,r17,6
 4026b9c:	12000e44 	addi	r8,r2,57
 4026ba0:	11c00e04 	addi	r7,r2,56
 4026ba4:	4209883a 	add	r4,r8,r8
 4026ba8:	04c100f4 	movhi	r19,1027
 4026bac:	2109883a 	add	r4,r4,r4
 4026bb0:	9ccf8904 	addi	r19,r19,15908
 4026bb4:	2109883a 	add	r4,r4,r4
 4026bb8:	9909883a 	add	r4,r19,r4
 4026bbc:	24000117 	ldw	r16,4(r4)
 4026bc0:	213ffe04 	addi	r4,r4,-8
 4026bc4:	24009726 	beq	r4,r16,4026e24 <_malloc_r+0x2f4>
 4026bc8:	80800117 	ldw	r2,4(r16)
 4026bcc:	01bfff04 	movi	r6,-4
 4026bd0:	014003c4 	movi	r5,15
 4026bd4:	1184703a 	and	r2,r2,r6
 4026bd8:	1447c83a 	sub	r3,r2,r17
 4026bdc:	28c00716 	blt	r5,r3,4026bfc <_malloc_r+0xcc>
 4026be0:	1800920e 	bge	r3,zero,4026e2c <_malloc_r+0x2fc>
 4026be4:	84000317 	ldw	r16,12(r16)
 4026be8:	24008e26 	beq	r4,r16,4026e24 <_malloc_r+0x2f4>
 4026bec:	80800117 	ldw	r2,4(r16)
 4026bf0:	1184703a 	and	r2,r2,r6
 4026bf4:	1447c83a 	sub	r3,r2,r17
 4026bf8:	28fff90e 	bge	r5,r3,4026be0 <__alt_data_end+0xfffe6be0>
 4026bfc:	3809883a 	mov	r4,r7
 4026c00:	018100f4 	movhi	r6,1027
 4026c04:	9c000417 	ldw	r16,16(r19)
 4026c08:	318f8904 	addi	r6,r6,15908
 4026c0c:	32000204 	addi	r8,r6,8
 4026c10:	82013426 	beq	r16,r8,40270e4 <_malloc_r+0x5b4>
 4026c14:	80c00117 	ldw	r3,4(r16)
 4026c18:	00bfff04 	movi	r2,-4
 4026c1c:	188e703a 	and	r7,r3,r2
 4026c20:	3c45c83a 	sub	r2,r7,r17
 4026c24:	00c003c4 	movi	r3,15
 4026c28:	18811f16 	blt	r3,r2,40270a8 <_malloc_r+0x578>
 4026c2c:	32000515 	stw	r8,20(r6)
 4026c30:	32000415 	stw	r8,16(r6)
 4026c34:	10007f0e 	bge	r2,zero,4026e34 <_malloc_r+0x304>
 4026c38:	00807fc4 	movi	r2,511
 4026c3c:	11c0fd36 	bltu	r2,r7,4027034 <_malloc_r+0x504>
 4026c40:	3806d0fa 	srli	r3,r7,3
 4026c44:	01c00044 	movi	r7,1
 4026c48:	30800117 	ldw	r2,4(r6)
 4026c4c:	19400044 	addi	r5,r3,1
 4026c50:	294b883a 	add	r5,r5,r5
 4026c54:	1807d0ba 	srai	r3,r3,2
 4026c58:	294b883a 	add	r5,r5,r5
 4026c5c:	294b883a 	add	r5,r5,r5
 4026c60:	298b883a 	add	r5,r5,r6
 4026c64:	38c6983a 	sll	r3,r7,r3
 4026c68:	29c00017 	ldw	r7,0(r5)
 4026c6c:	2a7ffe04 	addi	r9,r5,-8
 4026c70:	1886b03a 	or	r3,r3,r2
 4026c74:	82400315 	stw	r9,12(r16)
 4026c78:	81c00215 	stw	r7,8(r16)
 4026c7c:	30c00115 	stw	r3,4(r6)
 4026c80:	2c000015 	stw	r16,0(r5)
 4026c84:	3c000315 	stw	r16,12(r7)
 4026c88:	2005d0ba 	srai	r2,r4,2
 4026c8c:	01400044 	movi	r5,1
 4026c90:	288a983a 	sll	r5,r5,r2
 4026c94:	19406f36 	bltu	r3,r5,4026e54 <_malloc_r+0x324>
 4026c98:	28c4703a 	and	r2,r5,r3
 4026c9c:	10000a1e 	bne	r2,zero,4026cc8 <_malloc_r+0x198>
 4026ca0:	00bfff04 	movi	r2,-4
 4026ca4:	294b883a 	add	r5,r5,r5
 4026ca8:	2088703a 	and	r4,r4,r2
 4026cac:	28c4703a 	and	r2,r5,r3
 4026cb0:	21000104 	addi	r4,r4,4
 4026cb4:	1000041e 	bne	r2,zero,4026cc8 <_malloc_r+0x198>
 4026cb8:	294b883a 	add	r5,r5,r5
 4026cbc:	28c4703a 	and	r2,r5,r3
 4026cc0:	21000104 	addi	r4,r4,4
 4026cc4:	103ffc26 	beq	r2,zero,4026cb8 <__alt_data_end+0xfffe6cb8>
 4026cc8:	02bfff04 	movi	r10,-4
 4026ccc:	024003c4 	movi	r9,15
 4026cd0:	21800044 	addi	r6,r4,1
 4026cd4:	318d883a 	add	r6,r6,r6
 4026cd8:	318d883a 	add	r6,r6,r6
 4026cdc:	318d883a 	add	r6,r6,r6
 4026ce0:	998d883a 	add	r6,r19,r6
 4026ce4:	333ffe04 	addi	r12,r6,-8
 4026ce8:	2017883a 	mov	r11,r4
 4026cec:	31800104 	addi	r6,r6,4
 4026cf0:	34000017 	ldw	r16,0(r6)
 4026cf4:	31fffd04 	addi	r7,r6,-12
 4026cf8:	81c0041e 	bne	r16,r7,4026d0c <_malloc_r+0x1dc>
 4026cfc:	0000fb06 	br	40270ec <_malloc_r+0x5bc>
 4026d00:	1801030e 	bge	r3,zero,4027110 <_malloc_r+0x5e0>
 4026d04:	84000317 	ldw	r16,12(r16)
 4026d08:	81c0f826 	beq	r16,r7,40270ec <_malloc_r+0x5bc>
 4026d0c:	80800117 	ldw	r2,4(r16)
 4026d10:	1284703a 	and	r2,r2,r10
 4026d14:	1447c83a 	sub	r3,r2,r17
 4026d18:	48fff90e 	bge	r9,r3,4026d00 <__alt_data_end+0xfffe6d00>
 4026d1c:	80800317 	ldw	r2,12(r16)
 4026d20:	81000217 	ldw	r4,8(r16)
 4026d24:	89400054 	ori	r5,r17,1
 4026d28:	81400115 	stw	r5,4(r16)
 4026d2c:	20800315 	stw	r2,12(r4)
 4026d30:	11000215 	stw	r4,8(r2)
 4026d34:	8463883a 	add	r17,r16,r17
 4026d38:	9c400515 	stw	r17,20(r19)
 4026d3c:	9c400415 	stw	r17,16(r19)
 4026d40:	18800054 	ori	r2,r3,1
 4026d44:	88800115 	stw	r2,4(r17)
 4026d48:	8a000315 	stw	r8,12(r17)
 4026d4c:	8a000215 	stw	r8,8(r17)
 4026d50:	88e3883a 	add	r17,r17,r3
 4026d54:	88c00015 	stw	r3,0(r17)
 4026d58:	9009883a 	mov	r4,r18
 4026d5c:	402eecc0 	call	402eecc <__malloc_unlock>
 4026d60:	80800204 	addi	r2,r16,8
 4026d64:	00001b06 	br	4026dd4 <_malloc_r+0x2a4>
 4026d68:	04400404 	movi	r17,16
 4026d6c:	89402536 	bltu	r17,r5,4026e04 <_malloc_r+0x2d4>
 4026d70:	402eea80 	call	402eea8 <__malloc_lock>
 4026d74:	00800184 	movi	r2,6
 4026d78:	01000084 	movi	r4,2
 4026d7c:	04c100f4 	movhi	r19,1027
 4026d80:	1085883a 	add	r2,r2,r2
 4026d84:	9ccf8904 	addi	r19,r19,15908
 4026d88:	1085883a 	add	r2,r2,r2
 4026d8c:	9885883a 	add	r2,r19,r2
 4026d90:	14000117 	ldw	r16,4(r2)
 4026d94:	10fffe04 	addi	r3,r2,-8
 4026d98:	80c0d926 	beq	r16,r3,4027100 <_malloc_r+0x5d0>
 4026d9c:	80c00117 	ldw	r3,4(r16)
 4026da0:	81000317 	ldw	r4,12(r16)
 4026da4:	00bfff04 	movi	r2,-4
 4026da8:	1884703a 	and	r2,r3,r2
 4026dac:	81400217 	ldw	r5,8(r16)
 4026db0:	8085883a 	add	r2,r16,r2
 4026db4:	10c00117 	ldw	r3,4(r2)
 4026db8:	29000315 	stw	r4,12(r5)
 4026dbc:	21400215 	stw	r5,8(r4)
 4026dc0:	18c00054 	ori	r3,r3,1
 4026dc4:	10c00115 	stw	r3,4(r2)
 4026dc8:	9009883a 	mov	r4,r18
 4026dcc:	402eecc0 	call	402eecc <__malloc_unlock>
 4026dd0:	80800204 	addi	r2,r16,8
 4026dd4:	dfc00a17 	ldw	ra,40(sp)
 4026dd8:	df000917 	ldw	fp,36(sp)
 4026ddc:	ddc00817 	ldw	r23,32(sp)
 4026de0:	dd800717 	ldw	r22,28(sp)
 4026de4:	dd400617 	ldw	r21,24(sp)
 4026de8:	dd000517 	ldw	r20,20(sp)
 4026dec:	dcc00417 	ldw	r19,16(sp)
 4026df0:	dc800317 	ldw	r18,12(sp)
 4026df4:	dc400217 	ldw	r17,8(sp)
 4026df8:	dc000117 	ldw	r16,4(sp)
 4026dfc:	dec00b04 	addi	sp,sp,44
 4026e00:	f800283a 	ret
 4026e04:	00800304 	movi	r2,12
 4026e08:	90800015 	stw	r2,0(r18)
 4026e0c:	0005883a 	mov	r2,zero
 4026e10:	003ff006 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 4026e14:	01002004 	movi	r4,128
 4026e18:	02001004 	movi	r8,64
 4026e1c:	01c00fc4 	movi	r7,63
 4026e20:	003f6106 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 4026e24:	4009883a 	mov	r4,r8
 4026e28:	003f7506 	br	4026c00 <__alt_data_end+0xfffe6c00>
 4026e2c:	81000317 	ldw	r4,12(r16)
 4026e30:	003fde06 	br	4026dac <__alt_data_end+0xfffe6dac>
 4026e34:	81c5883a 	add	r2,r16,r7
 4026e38:	11400117 	ldw	r5,4(r2)
 4026e3c:	9009883a 	mov	r4,r18
 4026e40:	29400054 	ori	r5,r5,1
 4026e44:	11400115 	stw	r5,4(r2)
 4026e48:	402eecc0 	call	402eecc <__malloc_unlock>
 4026e4c:	80800204 	addi	r2,r16,8
 4026e50:	003fe006 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 4026e54:	9c000217 	ldw	r16,8(r19)
 4026e58:	00bfff04 	movi	r2,-4
 4026e5c:	85800117 	ldw	r22,4(r16)
 4026e60:	b0ac703a 	and	r22,r22,r2
 4026e64:	b4400336 	bltu	r22,r17,4026e74 <_malloc_r+0x344>
 4026e68:	b445c83a 	sub	r2,r22,r17
 4026e6c:	00c003c4 	movi	r3,15
 4026e70:	18805d16 	blt	r3,r2,4026fe8 <_malloc_r+0x4b8>
 4026e74:	05c100f4 	movhi	r23,1027
 4026e78:	008100f4 	movhi	r2,1027
 4026e7c:	109c9104 	addi	r2,r2,29252
 4026e80:	bdd56204 	addi	r23,r23,21896
 4026e84:	15400017 	ldw	r21,0(r2)
 4026e88:	b8c00017 	ldw	r3,0(r23)
 4026e8c:	00bfffc4 	movi	r2,-1
 4026e90:	858d883a 	add	r6,r16,r22
 4026e94:	8d6b883a 	add	r21,r17,r21
 4026e98:	1880ea26 	beq	r3,r2,4027244 <_malloc_r+0x714>
 4026e9c:	ad4403c4 	addi	r21,r21,4111
 4026ea0:	00bc0004 	movi	r2,-4096
 4026ea4:	a8aa703a 	and	r21,r21,r2
 4026ea8:	a80b883a 	mov	r5,r21
 4026eac:	9009883a 	mov	r4,r18
 4026eb0:	d9800015 	stw	r6,0(sp)
 4026eb4:	40287000 	call	4028700 <_sbrk_r>
 4026eb8:	1029883a 	mov	r20,r2
 4026ebc:	00bfffc4 	movi	r2,-1
 4026ec0:	d9800017 	ldw	r6,0(sp)
 4026ec4:	a080e826 	beq	r20,r2,4027268 <_malloc_r+0x738>
 4026ec8:	a180a636 	bltu	r20,r6,4027164 <_malloc_r+0x634>
 4026ecc:	070100f4 	movhi	fp,1027
 4026ed0:	e71c9a04 	addi	fp,fp,29288
 4026ed4:	e0800017 	ldw	r2,0(fp)
 4026ed8:	a887883a 	add	r3,r21,r2
 4026edc:	e0c00015 	stw	r3,0(fp)
 4026ee0:	3500e626 	beq	r6,r20,402727c <_malloc_r+0x74c>
 4026ee4:	b9000017 	ldw	r4,0(r23)
 4026ee8:	00bfffc4 	movi	r2,-1
 4026eec:	2080ee26 	beq	r4,r2,40272a8 <_malloc_r+0x778>
 4026ef0:	a185c83a 	sub	r2,r20,r6
 4026ef4:	10c5883a 	add	r2,r2,r3
 4026ef8:	e0800015 	stw	r2,0(fp)
 4026efc:	a0c001cc 	andi	r3,r20,7
 4026f00:	1800bc26 	beq	r3,zero,40271f4 <_malloc_r+0x6c4>
 4026f04:	a0e9c83a 	sub	r20,r20,r3
 4026f08:	00840204 	movi	r2,4104
 4026f0c:	a5000204 	addi	r20,r20,8
 4026f10:	10c7c83a 	sub	r3,r2,r3
 4026f14:	a545883a 	add	r2,r20,r21
 4026f18:	1083ffcc 	andi	r2,r2,4095
 4026f1c:	18abc83a 	sub	r21,r3,r2
 4026f20:	a80b883a 	mov	r5,r21
 4026f24:	9009883a 	mov	r4,r18
 4026f28:	40287000 	call	4028700 <_sbrk_r>
 4026f2c:	00ffffc4 	movi	r3,-1
 4026f30:	10c0e126 	beq	r2,r3,40272b8 <_malloc_r+0x788>
 4026f34:	1505c83a 	sub	r2,r2,r20
 4026f38:	1545883a 	add	r2,r2,r21
 4026f3c:	10800054 	ori	r2,r2,1
 4026f40:	e0c00017 	ldw	r3,0(fp)
 4026f44:	9d000215 	stw	r20,8(r19)
 4026f48:	a0800115 	stw	r2,4(r20)
 4026f4c:	a8c7883a 	add	r3,r21,r3
 4026f50:	e0c00015 	stw	r3,0(fp)
 4026f54:	84c00e26 	beq	r16,r19,4026f90 <_malloc_r+0x460>
 4026f58:	018003c4 	movi	r6,15
 4026f5c:	3580a72e 	bgeu	r6,r22,40271fc <_malloc_r+0x6cc>
 4026f60:	81400117 	ldw	r5,4(r16)
 4026f64:	013ffe04 	movi	r4,-8
 4026f68:	b0bffd04 	addi	r2,r22,-12
 4026f6c:	1104703a 	and	r2,r2,r4
 4026f70:	2900004c 	andi	r4,r5,1
 4026f74:	2088b03a 	or	r4,r4,r2
 4026f78:	81000115 	stw	r4,4(r16)
 4026f7c:	01400144 	movi	r5,5
 4026f80:	8089883a 	add	r4,r16,r2
 4026f84:	21400115 	stw	r5,4(r4)
 4026f88:	21400215 	stw	r5,8(r4)
 4026f8c:	3080cd36 	bltu	r6,r2,40272c4 <_malloc_r+0x794>
 4026f90:	008100f4 	movhi	r2,1027
 4026f94:	109c9004 	addi	r2,r2,29248
 4026f98:	11000017 	ldw	r4,0(r2)
 4026f9c:	20c0012e 	bgeu	r4,r3,4026fa4 <_malloc_r+0x474>
 4026fa0:	10c00015 	stw	r3,0(r2)
 4026fa4:	008100f4 	movhi	r2,1027
 4026fa8:	109c8f04 	addi	r2,r2,29244
 4026fac:	11000017 	ldw	r4,0(r2)
 4026fb0:	9c000217 	ldw	r16,8(r19)
 4026fb4:	20c0012e 	bgeu	r4,r3,4026fbc <_malloc_r+0x48c>
 4026fb8:	10c00015 	stw	r3,0(r2)
 4026fbc:	80c00117 	ldw	r3,4(r16)
 4026fc0:	00bfff04 	movi	r2,-4
 4026fc4:	1886703a 	and	r3,r3,r2
 4026fc8:	1c45c83a 	sub	r2,r3,r17
 4026fcc:	1c400236 	bltu	r3,r17,4026fd8 <_malloc_r+0x4a8>
 4026fd0:	00c003c4 	movi	r3,15
 4026fd4:	18800416 	blt	r3,r2,4026fe8 <_malloc_r+0x4b8>
 4026fd8:	9009883a 	mov	r4,r18
 4026fdc:	402eecc0 	call	402eecc <__malloc_unlock>
 4026fe0:	0005883a 	mov	r2,zero
 4026fe4:	003f7b06 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 4026fe8:	88c00054 	ori	r3,r17,1
 4026fec:	80c00115 	stw	r3,4(r16)
 4026ff0:	8463883a 	add	r17,r16,r17
 4026ff4:	10800054 	ori	r2,r2,1
 4026ff8:	9c400215 	stw	r17,8(r19)
 4026ffc:	88800115 	stw	r2,4(r17)
 4027000:	9009883a 	mov	r4,r18
 4027004:	402eecc0 	call	402eecc <__malloc_unlock>
 4027008:	80800204 	addi	r2,r16,8
 402700c:	003f7106 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 4027010:	00c00504 	movi	r3,20
 4027014:	18804a2e 	bgeu	r3,r2,4027140 <_malloc_r+0x610>
 4027018:	00c01504 	movi	r3,84
 402701c:	18806e36 	bltu	r3,r2,40271d8 <_malloc_r+0x6a8>
 4027020:	8804d33a 	srli	r2,r17,12
 4027024:	12001bc4 	addi	r8,r2,111
 4027028:	11c01b84 	addi	r7,r2,110
 402702c:	4209883a 	add	r4,r8,r8
 4027030:	003edd06 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 4027034:	3804d27a 	srli	r2,r7,9
 4027038:	00c00104 	movi	r3,4
 402703c:	1880442e 	bgeu	r3,r2,4027150 <_malloc_r+0x620>
 4027040:	00c00504 	movi	r3,20
 4027044:	18808136 	bltu	r3,r2,402724c <_malloc_r+0x71c>
 4027048:	11401704 	addi	r5,r2,92
 402704c:	10c016c4 	addi	r3,r2,91
 4027050:	294b883a 	add	r5,r5,r5
 4027054:	294b883a 	add	r5,r5,r5
 4027058:	294b883a 	add	r5,r5,r5
 402705c:	994b883a 	add	r5,r19,r5
 4027060:	28800017 	ldw	r2,0(r5)
 4027064:	018100f4 	movhi	r6,1027
 4027068:	297ffe04 	addi	r5,r5,-8
 402706c:	318f8904 	addi	r6,r6,15908
 4027070:	28806526 	beq	r5,r2,4027208 <_malloc_r+0x6d8>
 4027074:	01bfff04 	movi	r6,-4
 4027078:	10c00117 	ldw	r3,4(r2)
 402707c:	1986703a 	and	r3,r3,r6
 4027080:	38c0022e 	bgeu	r7,r3,402708c <_malloc_r+0x55c>
 4027084:	10800217 	ldw	r2,8(r2)
 4027088:	28bffb1e 	bne	r5,r2,4027078 <__alt_data_end+0xfffe7078>
 402708c:	11400317 	ldw	r5,12(r2)
 4027090:	98c00117 	ldw	r3,4(r19)
 4027094:	81400315 	stw	r5,12(r16)
 4027098:	80800215 	stw	r2,8(r16)
 402709c:	2c000215 	stw	r16,8(r5)
 40270a0:	14000315 	stw	r16,12(r2)
 40270a4:	003ef806 	br	4026c88 <__alt_data_end+0xfffe6c88>
 40270a8:	88c00054 	ori	r3,r17,1
 40270ac:	80c00115 	stw	r3,4(r16)
 40270b0:	8463883a 	add	r17,r16,r17
 40270b4:	34400515 	stw	r17,20(r6)
 40270b8:	34400415 	stw	r17,16(r6)
 40270bc:	10c00054 	ori	r3,r2,1
 40270c0:	8a000315 	stw	r8,12(r17)
 40270c4:	8a000215 	stw	r8,8(r17)
 40270c8:	88c00115 	stw	r3,4(r17)
 40270cc:	88a3883a 	add	r17,r17,r2
 40270d0:	88800015 	stw	r2,0(r17)
 40270d4:	9009883a 	mov	r4,r18
 40270d8:	402eecc0 	call	402eecc <__malloc_unlock>
 40270dc:	80800204 	addi	r2,r16,8
 40270e0:	003f3c06 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 40270e4:	30c00117 	ldw	r3,4(r6)
 40270e8:	003ee706 	br	4026c88 <__alt_data_end+0xfffe6c88>
 40270ec:	5ac00044 	addi	r11,r11,1
 40270f0:	588000cc 	andi	r2,r11,3
 40270f4:	31800204 	addi	r6,r6,8
 40270f8:	103efd1e 	bne	r2,zero,4026cf0 <__alt_data_end+0xfffe6cf0>
 40270fc:	00002406 	br	4027190 <_malloc_r+0x660>
 4027100:	14000317 	ldw	r16,12(r2)
 4027104:	143f251e 	bne	r2,r16,4026d9c <__alt_data_end+0xfffe6d9c>
 4027108:	21000084 	addi	r4,r4,2
 402710c:	003ebc06 	br	4026c00 <__alt_data_end+0xfffe6c00>
 4027110:	8085883a 	add	r2,r16,r2
 4027114:	10c00117 	ldw	r3,4(r2)
 4027118:	81000317 	ldw	r4,12(r16)
 402711c:	81400217 	ldw	r5,8(r16)
 4027120:	18c00054 	ori	r3,r3,1
 4027124:	10c00115 	stw	r3,4(r2)
 4027128:	29000315 	stw	r4,12(r5)
 402712c:	21400215 	stw	r5,8(r4)
 4027130:	9009883a 	mov	r4,r18
 4027134:	402eecc0 	call	402eecc <__malloc_unlock>
 4027138:	80800204 	addi	r2,r16,8
 402713c:	003f2506 	br	4026dd4 <__alt_data_end+0xfffe6dd4>
 4027140:	12001704 	addi	r8,r2,92
 4027144:	11c016c4 	addi	r7,r2,91
 4027148:	4209883a 	add	r4,r8,r8
 402714c:	003e9606 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 4027150:	3804d1ba 	srli	r2,r7,6
 4027154:	11400e44 	addi	r5,r2,57
 4027158:	10c00e04 	addi	r3,r2,56
 402715c:	294b883a 	add	r5,r5,r5
 4027160:	003fbc06 	br	4027054 <__alt_data_end+0xfffe7054>
 4027164:	84ff5926 	beq	r16,r19,4026ecc <__alt_data_end+0xfffe6ecc>
 4027168:	008100f4 	movhi	r2,1027
 402716c:	108f8904 	addi	r2,r2,15908
 4027170:	14000217 	ldw	r16,8(r2)
 4027174:	00bfff04 	movi	r2,-4
 4027178:	80c00117 	ldw	r3,4(r16)
 402717c:	1886703a 	and	r3,r3,r2
 4027180:	003f9106 	br	4026fc8 <__alt_data_end+0xfffe6fc8>
 4027184:	60800217 	ldw	r2,8(r12)
 4027188:	213fffc4 	addi	r4,r4,-1
 402718c:	1300651e 	bne	r2,r12,4027324 <_malloc_r+0x7f4>
 4027190:	208000cc 	andi	r2,r4,3
 4027194:	633ffe04 	addi	r12,r12,-8
 4027198:	103ffa1e 	bne	r2,zero,4027184 <__alt_data_end+0xfffe7184>
 402719c:	98800117 	ldw	r2,4(r19)
 40271a0:	0146303a 	nor	r3,zero,r5
 40271a4:	1884703a 	and	r2,r3,r2
 40271a8:	98800115 	stw	r2,4(r19)
 40271ac:	294b883a 	add	r5,r5,r5
 40271b0:	117f2836 	bltu	r2,r5,4026e54 <__alt_data_end+0xfffe6e54>
 40271b4:	283f2726 	beq	r5,zero,4026e54 <__alt_data_end+0xfffe6e54>
 40271b8:	2886703a 	and	r3,r5,r2
 40271bc:	5809883a 	mov	r4,r11
 40271c0:	183ec31e 	bne	r3,zero,4026cd0 <__alt_data_end+0xfffe6cd0>
 40271c4:	294b883a 	add	r5,r5,r5
 40271c8:	2886703a 	and	r3,r5,r2
 40271cc:	21000104 	addi	r4,r4,4
 40271d0:	183ffc26 	beq	r3,zero,40271c4 <__alt_data_end+0xfffe71c4>
 40271d4:	003ebe06 	br	4026cd0 <__alt_data_end+0xfffe6cd0>
 40271d8:	00c05504 	movi	r3,340
 40271dc:	18801236 	bltu	r3,r2,4027228 <_malloc_r+0x6f8>
 40271e0:	8804d3fa 	srli	r2,r17,15
 40271e4:	12001e04 	addi	r8,r2,120
 40271e8:	11c01dc4 	addi	r7,r2,119
 40271ec:	4209883a 	add	r4,r8,r8
 40271f0:	003e6d06 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 40271f4:	00c40004 	movi	r3,4096
 40271f8:	003f4606 	br	4026f14 <__alt_data_end+0xfffe6f14>
 40271fc:	00800044 	movi	r2,1
 4027200:	a0800115 	stw	r2,4(r20)
 4027204:	003f7406 	br	4026fd8 <__alt_data_end+0xfffe6fd8>
 4027208:	1805d0ba 	srai	r2,r3,2
 402720c:	01c00044 	movi	r7,1
 4027210:	30c00117 	ldw	r3,4(r6)
 4027214:	388e983a 	sll	r7,r7,r2
 4027218:	2805883a 	mov	r2,r5
 402721c:	38c6b03a 	or	r3,r7,r3
 4027220:	30c00115 	stw	r3,4(r6)
 4027224:	003f9b06 	br	4027094 <__alt_data_end+0xfffe7094>
 4027228:	00c15504 	movi	r3,1364
 402722c:	18801a36 	bltu	r3,r2,4027298 <_malloc_r+0x768>
 4027230:	8804d4ba 	srli	r2,r17,18
 4027234:	12001f44 	addi	r8,r2,125
 4027238:	11c01f04 	addi	r7,r2,124
 402723c:	4209883a 	add	r4,r8,r8
 4027240:	003e5906 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 4027244:	ad400404 	addi	r21,r21,16
 4027248:	003f1706 	br	4026ea8 <__alt_data_end+0xfffe6ea8>
 402724c:	00c01504 	movi	r3,84
 4027250:	18802336 	bltu	r3,r2,40272e0 <_malloc_r+0x7b0>
 4027254:	3804d33a 	srli	r2,r7,12
 4027258:	11401bc4 	addi	r5,r2,111
 402725c:	10c01b84 	addi	r3,r2,110
 4027260:	294b883a 	add	r5,r5,r5
 4027264:	003f7b06 	br	4027054 <__alt_data_end+0xfffe7054>
 4027268:	9c000217 	ldw	r16,8(r19)
 402726c:	00bfff04 	movi	r2,-4
 4027270:	80c00117 	ldw	r3,4(r16)
 4027274:	1886703a 	and	r3,r3,r2
 4027278:	003f5306 	br	4026fc8 <__alt_data_end+0xfffe6fc8>
 402727c:	3083ffcc 	andi	r2,r6,4095
 4027280:	103f181e 	bne	r2,zero,4026ee4 <__alt_data_end+0xfffe6ee4>
 4027284:	99000217 	ldw	r4,8(r19)
 4027288:	b545883a 	add	r2,r22,r21
 402728c:	10800054 	ori	r2,r2,1
 4027290:	20800115 	stw	r2,4(r4)
 4027294:	003f3e06 	br	4026f90 <__alt_data_end+0xfffe6f90>
 4027298:	01003f84 	movi	r4,254
 402729c:	02001fc4 	movi	r8,127
 40272a0:	01c01f84 	movi	r7,126
 40272a4:	003e4006 	br	4026ba8 <__alt_data_end+0xfffe6ba8>
 40272a8:	008100f4 	movhi	r2,1027
 40272ac:	10956204 	addi	r2,r2,21896
 40272b0:	15000015 	stw	r20,0(r2)
 40272b4:	003f1106 	br	4026efc <__alt_data_end+0xfffe6efc>
 40272b8:	00800044 	movi	r2,1
 40272bc:	002b883a 	mov	r21,zero
 40272c0:	003f1f06 	br	4026f40 <__alt_data_end+0xfffe6f40>
 40272c4:	81400204 	addi	r5,r16,8
 40272c8:	9009883a 	mov	r4,r18
 40272cc:	40264000 	call	4026400 <_free_r>
 40272d0:	008100f4 	movhi	r2,1027
 40272d4:	109c9a04 	addi	r2,r2,29288
 40272d8:	10c00017 	ldw	r3,0(r2)
 40272dc:	003f2c06 	br	4026f90 <__alt_data_end+0xfffe6f90>
 40272e0:	00c05504 	movi	r3,340
 40272e4:	18800536 	bltu	r3,r2,40272fc <_malloc_r+0x7cc>
 40272e8:	3804d3fa 	srli	r2,r7,15
 40272ec:	11401e04 	addi	r5,r2,120
 40272f0:	10c01dc4 	addi	r3,r2,119
 40272f4:	294b883a 	add	r5,r5,r5
 40272f8:	003f5606 	br	4027054 <__alt_data_end+0xfffe7054>
 40272fc:	00c15504 	movi	r3,1364
 4027300:	18800536 	bltu	r3,r2,4027318 <_malloc_r+0x7e8>
 4027304:	3804d4ba 	srli	r2,r7,18
 4027308:	11401f44 	addi	r5,r2,125
 402730c:	10c01f04 	addi	r3,r2,124
 4027310:	294b883a 	add	r5,r5,r5
 4027314:	003f4f06 	br	4027054 <__alt_data_end+0xfffe7054>
 4027318:	01403f84 	movi	r5,254
 402731c:	00c01f84 	movi	r3,126
 4027320:	003f4c06 	br	4027054 <__alt_data_end+0xfffe7054>
 4027324:	98800117 	ldw	r2,4(r19)
 4027328:	003fa006 	br	40271ac <__alt_data_end+0xfffe71ac>
 402732c:	8808d0fa 	srli	r4,r17,3
 4027330:	20800044 	addi	r2,r4,1
 4027334:	1085883a 	add	r2,r2,r2
 4027338:	003e9006 	br	4026d7c <__alt_data_end+0xfffe6d7c>

0402733c <memchr>:
 402733c:	208000cc 	andi	r2,r4,3
 4027340:	280f883a 	mov	r7,r5
 4027344:	10003426 	beq	r2,zero,4027418 <memchr+0xdc>
 4027348:	30bfffc4 	addi	r2,r6,-1
 402734c:	30001a26 	beq	r6,zero,40273b8 <memchr+0x7c>
 4027350:	20c00003 	ldbu	r3,0(r4)
 4027354:	29803fcc 	andi	r6,r5,255
 4027358:	30c0051e 	bne	r6,r3,4027370 <memchr+0x34>
 402735c:	00001806 	br	40273c0 <memchr+0x84>
 4027360:	10001526 	beq	r2,zero,40273b8 <memchr+0x7c>
 4027364:	20c00003 	ldbu	r3,0(r4)
 4027368:	10bfffc4 	addi	r2,r2,-1
 402736c:	30c01426 	beq	r6,r3,40273c0 <memchr+0x84>
 4027370:	21000044 	addi	r4,r4,1
 4027374:	20c000cc 	andi	r3,r4,3
 4027378:	183ff91e 	bne	r3,zero,4027360 <__alt_data_end+0xfffe7360>
 402737c:	020000c4 	movi	r8,3
 4027380:	40801136 	bltu	r8,r2,40273c8 <memchr+0x8c>
 4027384:	10000c26 	beq	r2,zero,40273b8 <memchr+0x7c>
 4027388:	20c00003 	ldbu	r3,0(r4)
 402738c:	29403fcc 	andi	r5,r5,255
 4027390:	28c00b26 	beq	r5,r3,40273c0 <memchr+0x84>
 4027394:	20c00044 	addi	r3,r4,1
 4027398:	39803fcc 	andi	r6,r7,255
 402739c:	2089883a 	add	r4,r4,r2
 40273a0:	00000306 	br	40273b0 <memchr+0x74>
 40273a4:	18c00044 	addi	r3,r3,1
 40273a8:	197fffc3 	ldbu	r5,-1(r3)
 40273ac:	31400526 	beq	r6,r5,40273c4 <memchr+0x88>
 40273b0:	1805883a 	mov	r2,r3
 40273b4:	20fffb1e 	bne	r4,r3,40273a4 <__alt_data_end+0xfffe73a4>
 40273b8:	0005883a 	mov	r2,zero
 40273bc:	f800283a 	ret
 40273c0:	2005883a 	mov	r2,r4
 40273c4:	f800283a 	ret
 40273c8:	28c03fcc 	andi	r3,r5,255
 40273cc:	1812923a 	slli	r9,r3,8
 40273d0:	02ffbff4 	movhi	r11,65279
 40273d4:	02a02074 	movhi	r10,32897
 40273d8:	48d2b03a 	or	r9,r9,r3
 40273dc:	4806943a 	slli	r3,r9,16
 40273e0:	5affbfc4 	addi	r11,r11,-257
 40273e4:	52a02004 	addi	r10,r10,-32640
 40273e8:	48d2b03a 	or	r9,r9,r3
 40273ec:	20c00017 	ldw	r3,0(r4)
 40273f0:	48c6f03a 	xor	r3,r9,r3
 40273f4:	1acd883a 	add	r6,r3,r11
 40273f8:	00c6303a 	nor	r3,zero,r3
 40273fc:	30c6703a 	and	r3,r6,r3
 4027400:	1a86703a 	and	r3,r3,r10
 4027404:	183fe01e 	bne	r3,zero,4027388 <__alt_data_end+0xfffe7388>
 4027408:	10bfff04 	addi	r2,r2,-4
 402740c:	21000104 	addi	r4,r4,4
 4027410:	40bff636 	bltu	r8,r2,40273ec <__alt_data_end+0xfffe73ec>
 4027414:	003fdb06 	br	4027384 <__alt_data_end+0xfffe7384>
 4027418:	3005883a 	mov	r2,r6
 402741c:	003fd706 	br	402737c <__alt_data_end+0xfffe737c>

04027420 <memcpy>:
 4027420:	defffd04 	addi	sp,sp,-12
 4027424:	dfc00215 	stw	ra,8(sp)
 4027428:	dc400115 	stw	r17,4(sp)
 402742c:	dc000015 	stw	r16,0(sp)
 4027430:	00c003c4 	movi	r3,15
 4027434:	2005883a 	mov	r2,r4
 4027438:	1980452e 	bgeu	r3,r6,4027550 <memcpy+0x130>
 402743c:	2906b03a 	or	r3,r5,r4
 4027440:	18c000cc 	andi	r3,r3,3
 4027444:	1800441e 	bne	r3,zero,4027558 <memcpy+0x138>
 4027448:	347ffc04 	addi	r17,r6,-16
 402744c:	8822d13a 	srli	r17,r17,4
 4027450:	28c00104 	addi	r3,r5,4
 4027454:	23400104 	addi	r13,r4,4
 4027458:	8820913a 	slli	r16,r17,4
 402745c:	2b000204 	addi	r12,r5,8
 4027460:	22c00204 	addi	r11,r4,8
 4027464:	84000504 	addi	r16,r16,20
 4027468:	2a800304 	addi	r10,r5,12
 402746c:	22400304 	addi	r9,r4,12
 4027470:	2c21883a 	add	r16,r5,r16
 4027474:	2811883a 	mov	r8,r5
 4027478:	200f883a 	mov	r7,r4
 402747c:	41000017 	ldw	r4,0(r8)
 4027480:	1fc00017 	ldw	ra,0(r3)
 4027484:	63c00017 	ldw	r15,0(r12)
 4027488:	39000015 	stw	r4,0(r7)
 402748c:	53800017 	ldw	r14,0(r10)
 4027490:	6fc00015 	stw	ra,0(r13)
 4027494:	5bc00015 	stw	r15,0(r11)
 4027498:	4b800015 	stw	r14,0(r9)
 402749c:	18c00404 	addi	r3,r3,16
 40274a0:	39c00404 	addi	r7,r7,16
 40274a4:	42000404 	addi	r8,r8,16
 40274a8:	6b400404 	addi	r13,r13,16
 40274ac:	63000404 	addi	r12,r12,16
 40274b0:	5ac00404 	addi	r11,r11,16
 40274b4:	52800404 	addi	r10,r10,16
 40274b8:	4a400404 	addi	r9,r9,16
 40274bc:	1c3fef1e 	bne	r3,r16,402747c <__alt_data_end+0xfffe747c>
 40274c0:	89c00044 	addi	r7,r17,1
 40274c4:	380e913a 	slli	r7,r7,4
 40274c8:	310003cc 	andi	r4,r6,15
 40274cc:	02c000c4 	movi	r11,3
 40274d0:	11c7883a 	add	r3,r2,r7
 40274d4:	29cb883a 	add	r5,r5,r7
 40274d8:	5900212e 	bgeu	r11,r4,4027560 <memcpy+0x140>
 40274dc:	1813883a 	mov	r9,r3
 40274e0:	2811883a 	mov	r8,r5
 40274e4:	200f883a 	mov	r7,r4
 40274e8:	42800017 	ldw	r10,0(r8)
 40274ec:	4a400104 	addi	r9,r9,4
 40274f0:	39ffff04 	addi	r7,r7,-4
 40274f4:	4abfff15 	stw	r10,-4(r9)
 40274f8:	42000104 	addi	r8,r8,4
 40274fc:	59fffa36 	bltu	r11,r7,40274e8 <__alt_data_end+0xfffe74e8>
 4027500:	213fff04 	addi	r4,r4,-4
 4027504:	2008d0ba 	srli	r4,r4,2
 4027508:	318000cc 	andi	r6,r6,3
 402750c:	21000044 	addi	r4,r4,1
 4027510:	2109883a 	add	r4,r4,r4
 4027514:	2109883a 	add	r4,r4,r4
 4027518:	1907883a 	add	r3,r3,r4
 402751c:	290b883a 	add	r5,r5,r4
 4027520:	30000626 	beq	r6,zero,402753c <memcpy+0x11c>
 4027524:	198d883a 	add	r6,r3,r6
 4027528:	29c00003 	ldbu	r7,0(r5)
 402752c:	18c00044 	addi	r3,r3,1
 4027530:	29400044 	addi	r5,r5,1
 4027534:	19ffffc5 	stb	r7,-1(r3)
 4027538:	19bffb1e 	bne	r3,r6,4027528 <__alt_data_end+0xfffe7528>
 402753c:	dfc00217 	ldw	ra,8(sp)
 4027540:	dc400117 	ldw	r17,4(sp)
 4027544:	dc000017 	ldw	r16,0(sp)
 4027548:	dec00304 	addi	sp,sp,12
 402754c:	f800283a 	ret
 4027550:	2007883a 	mov	r3,r4
 4027554:	003ff206 	br	4027520 <__alt_data_end+0xfffe7520>
 4027558:	2007883a 	mov	r3,r4
 402755c:	003ff106 	br	4027524 <__alt_data_end+0xfffe7524>
 4027560:	200d883a 	mov	r6,r4
 4027564:	003fee06 	br	4027520 <__alt_data_end+0xfffe7520>

04027568 <memset>:
 4027568:	20c000cc 	andi	r3,r4,3
 402756c:	2005883a 	mov	r2,r4
 4027570:	18004426 	beq	r3,zero,4027684 <memset+0x11c>
 4027574:	31ffffc4 	addi	r7,r6,-1
 4027578:	30004026 	beq	r6,zero,402767c <memset+0x114>
 402757c:	2813883a 	mov	r9,r5
 4027580:	200d883a 	mov	r6,r4
 4027584:	2007883a 	mov	r3,r4
 4027588:	00000406 	br	402759c <memset+0x34>
 402758c:	3a3fffc4 	addi	r8,r7,-1
 4027590:	31800044 	addi	r6,r6,1
 4027594:	38003926 	beq	r7,zero,402767c <memset+0x114>
 4027598:	400f883a 	mov	r7,r8
 402759c:	18c00044 	addi	r3,r3,1
 40275a0:	32400005 	stb	r9,0(r6)
 40275a4:	1a0000cc 	andi	r8,r3,3
 40275a8:	403ff81e 	bne	r8,zero,402758c <__alt_data_end+0xfffe758c>
 40275ac:	010000c4 	movi	r4,3
 40275b0:	21c02d2e 	bgeu	r4,r7,4027668 <memset+0x100>
 40275b4:	29003fcc 	andi	r4,r5,255
 40275b8:	200c923a 	slli	r6,r4,8
 40275bc:	3108b03a 	or	r4,r6,r4
 40275c0:	200c943a 	slli	r6,r4,16
 40275c4:	218cb03a 	or	r6,r4,r6
 40275c8:	010003c4 	movi	r4,15
 40275cc:	21c0182e 	bgeu	r4,r7,4027630 <memset+0xc8>
 40275d0:	3b3ffc04 	addi	r12,r7,-16
 40275d4:	6018d13a 	srli	r12,r12,4
 40275d8:	1a000104 	addi	r8,r3,4
 40275dc:	1ac00204 	addi	r11,r3,8
 40275e0:	6008913a 	slli	r4,r12,4
 40275e4:	1a800304 	addi	r10,r3,12
 40275e8:	1813883a 	mov	r9,r3
 40275ec:	21000504 	addi	r4,r4,20
 40275f0:	1909883a 	add	r4,r3,r4
 40275f4:	49800015 	stw	r6,0(r9)
 40275f8:	41800015 	stw	r6,0(r8)
 40275fc:	59800015 	stw	r6,0(r11)
 4027600:	51800015 	stw	r6,0(r10)
 4027604:	42000404 	addi	r8,r8,16
 4027608:	4a400404 	addi	r9,r9,16
 402760c:	5ac00404 	addi	r11,r11,16
 4027610:	52800404 	addi	r10,r10,16
 4027614:	413ff71e 	bne	r8,r4,40275f4 <__alt_data_end+0xfffe75f4>
 4027618:	63000044 	addi	r12,r12,1
 402761c:	6018913a 	slli	r12,r12,4
 4027620:	39c003cc 	andi	r7,r7,15
 4027624:	010000c4 	movi	r4,3
 4027628:	1b07883a 	add	r3,r3,r12
 402762c:	21c00e2e 	bgeu	r4,r7,4027668 <memset+0x100>
 4027630:	1813883a 	mov	r9,r3
 4027634:	3811883a 	mov	r8,r7
 4027638:	010000c4 	movi	r4,3
 402763c:	49800015 	stw	r6,0(r9)
 4027640:	423fff04 	addi	r8,r8,-4
 4027644:	4a400104 	addi	r9,r9,4
 4027648:	223ffc36 	bltu	r4,r8,402763c <__alt_data_end+0xfffe763c>
 402764c:	393fff04 	addi	r4,r7,-4
 4027650:	2008d0ba 	srli	r4,r4,2
 4027654:	39c000cc 	andi	r7,r7,3
 4027658:	21000044 	addi	r4,r4,1
 402765c:	2109883a 	add	r4,r4,r4
 4027660:	2109883a 	add	r4,r4,r4
 4027664:	1907883a 	add	r3,r3,r4
 4027668:	38000526 	beq	r7,zero,4027680 <memset+0x118>
 402766c:	19cf883a 	add	r7,r3,r7
 4027670:	19400005 	stb	r5,0(r3)
 4027674:	18c00044 	addi	r3,r3,1
 4027678:	38fffd1e 	bne	r7,r3,4027670 <__alt_data_end+0xfffe7670>
 402767c:	f800283a 	ret
 4027680:	f800283a 	ret
 4027684:	2007883a 	mov	r3,r4
 4027688:	300f883a 	mov	r7,r6
 402768c:	003fc706 	br	40275ac <__alt_data_end+0xfffe75ac>

04027690 <_Balloc>:
 4027690:	20801317 	ldw	r2,76(r4)
 4027694:	defffc04 	addi	sp,sp,-16
 4027698:	dc400115 	stw	r17,4(sp)
 402769c:	dc000015 	stw	r16,0(sp)
 40276a0:	dfc00315 	stw	ra,12(sp)
 40276a4:	dc800215 	stw	r18,8(sp)
 40276a8:	2023883a 	mov	r17,r4
 40276ac:	2821883a 	mov	r16,r5
 40276b0:	10000f26 	beq	r2,zero,40276f0 <_Balloc+0x60>
 40276b4:	8407883a 	add	r3,r16,r16
 40276b8:	18c7883a 	add	r3,r3,r3
 40276bc:	10c7883a 	add	r3,r2,r3
 40276c0:	18800017 	ldw	r2,0(r3)
 40276c4:	10001126 	beq	r2,zero,402770c <_Balloc+0x7c>
 40276c8:	11000017 	ldw	r4,0(r2)
 40276cc:	19000015 	stw	r4,0(r3)
 40276d0:	10000415 	stw	zero,16(r2)
 40276d4:	10000315 	stw	zero,12(r2)
 40276d8:	dfc00317 	ldw	ra,12(sp)
 40276dc:	dc800217 	ldw	r18,8(sp)
 40276e0:	dc400117 	ldw	r17,4(sp)
 40276e4:	dc000017 	ldw	r16,0(sp)
 40276e8:	dec00404 	addi	sp,sp,16
 40276ec:	f800283a 	ret
 40276f0:	01800844 	movi	r6,33
 40276f4:	01400104 	movi	r5,4
 40276f8:	402a1000 	call	402a100 <_calloc_r>
 40276fc:	88801315 	stw	r2,76(r17)
 4027700:	103fec1e 	bne	r2,zero,40276b4 <__alt_data_end+0xfffe76b4>
 4027704:	0005883a 	mov	r2,zero
 4027708:	003ff306 	br	40276d8 <__alt_data_end+0xfffe76d8>
 402770c:	01400044 	movi	r5,1
 4027710:	2c24983a 	sll	r18,r5,r16
 4027714:	8809883a 	mov	r4,r17
 4027718:	91800144 	addi	r6,r18,5
 402771c:	318d883a 	add	r6,r6,r6
 4027720:	318d883a 	add	r6,r6,r6
 4027724:	402a1000 	call	402a100 <_calloc_r>
 4027728:	103ff626 	beq	r2,zero,4027704 <__alt_data_end+0xfffe7704>
 402772c:	14000115 	stw	r16,4(r2)
 4027730:	14800215 	stw	r18,8(r2)
 4027734:	003fe606 	br	40276d0 <__alt_data_end+0xfffe76d0>

04027738 <_Bfree>:
 4027738:	28000826 	beq	r5,zero,402775c <_Bfree+0x24>
 402773c:	28c00117 	ldw	r3,4(r5)
 4027740:	20801317 	ldw	r2,76(r4)
 4027744:	18c7883a 	add	r3,r3,r3
 4027748:	18c7883a 	add	r3,r3,r3
 402774c:	10c5883a 	add	r2,r2,r3
 4027750:	10c00017 	ldw	r3,0(r2)
 4027754:	28c00015 	stw	r3,0(r5)
 4027758:	11400015 	stw	r5,0(r2)
 402775c:	f800283a 	ret

04027760 <__multadd>:
 4027760:	defffa04 	addi	sp,sp,-24
 4027764:	dc800315 	stw	r18,12(sp)
 4027768:	dc400215 	stw	r17,8(sp)
 402776c:	dc000115 	stw	r16,4(sp)
 4027770:	2823883a 	mov	r17,r5
 4027774:	2c000417 	ldw	r16,16(r5)
 4027778:	dfc00515 	stw	ra,20(sp)
 402777c:	dcc00415 	stw	r19,16(sp)
 4027780:	2025883a 	mov	r18,r4
 4027784:	29400504 	addi	r5,r5,20
 4027788:	0011883a 	mov	r8,zero
 402778c:	28c00017 	ldw	r3,0(r5)
 4027790:	29400104 	addi	r5,r5,4
 4027794:	42000044 	addi	r8,r8,1
 4027798:	18bfffcc 	andi	r2,r3,65535
 402779c:	1185383a 	mul	r2,r2,r6
 40277a0:	1806d43a 	srli	r3,r3,16
 40277a4:	11cf883a 	add	r7,r2,r7
 40277a8:	3808d43a 	srli	r4,r7,16
 40277ac:	1987383a 	mul	r3,r3,r6
 40277b0:	38bfffcc 	andi	r2,r7,65535
 40277b4:	1907883a 	add	r3,r3,r4
 40277b8:	1808943a 	slli	r4,r3,16
 40277bc:	180ed43a 	srli	r7,r3,16
 40277c0:	2085883a 	add	r2,r4,r2
 40277c4:	28bfff15 	stw	r2,-4(r5)
 40277c8:	443ff016 	blt	r8,r16,402778c <__alt_data_end+0xfffe778c>
 40277cc:	38000926 	beq	r7,zero,40277f4 <__multadd+0x94>
 40277d0:	88800217 	ldw	r2,8(r17)
 40277d4:	80800f0e 	bge	r16,r2,4027814 <__multadd+0xb4>
 40277d8:	80800144 	addi	r2,r16,5
 40277dc:	1085883a 	add	r2,r2,r2
 40277e0:	1085883a 	add	r2,r2,r2
 40277e4:	8885883a 	add	r2,r17,r2
 40277e8:	11c00015 	stw	r7,0(r2)
 40277ec:	84000044 	addi	r16,r16,1
 40277f0:	8c000415 	stw	r16,16(r17)
 40277f4:	8805883a 	mov	r2,r17
 40277f8:	dfc00517 	ldw	ra,20(sp)
 40277fc:	dcc00417 	ldw	r19,16(sp)
 4027800:	dc800317 	ldw	r18,12(sp)
 4027804:	dc400217 	ldw	r17,8(sp)
 4027808:	dc000117 	ldw	r16,4(sp)
 402780c:	dec00604 	addi	sp,sp,24
 4027810:	f800283a 	ret
 4027814:	89400117 	ldw	r5,4(r17)
 4027818:	9009883a 	mov	r4,r18
 402781c:	d9c00015 	stw	r7,0(sp)
 4027820:	29400044 	addi	r5,r5,1
 4027824:	40276900 	call	4027690 <_Balloc>
 4027828:	89800417 	ldw	r6,16(r17)
 402782c:	89400304 	addi	r5,r17,12
 4027830:	11000304 	addi	r4,r2,12
 4027834:	31800084 	addi	r6,r6,2
 4027838:	318d883a 	add	r6,r6,r6
 402783c:	318d883a 	add	r6,r6,r6
 4027840:	1027883a 	mov	r19,r2
 4027844:	40274200 	call	4027420 <memcpy>
 4027848:	d9c00017 	ldw	r7,0(sp)
 402784c:	88000a26 	beq	r17,zero,4027878 <__multadd+0x118>
 4027850:	88c00117 	ldw	r3,4(r17)
 4027854:	90801317 	ldw	r2,76(r18)
 4027858:	18c7883a 	add	r3,r3,r3
 402785c:	18c7883a 	add	r3,r3,r3
 4027860:	10c5883a 	add	r2,r2,r3
 4027864:	10c00017 	ldw	r3,0(r2)
 4027868:	88c00015 	stw	r3,0(r17)
 402786c:	14400015 	stw	r17,0(r2)
 4027870:	9823883a 	mov	r17,r19
 4027874:	003fd806 	br	40277d8 <__alt_data_end+0xfffe77d8>
 4027878:	9823883a 	mov	r17,r19
 402787c:	003fd606 	br	40277d8 <__alt_data_end+0xfffe77d8>

04027880 <__s2b>:
 4027880:	defff904 	addi	sp,sp,-28
 4027884:	dc400115 	stw	r17,4(sp)
 4027888:	dc000015 	stw	r16,0(sp)
 402788c:	2023883a 	mov	r17,r4
 4027890:	2821883a 	mov	r16,r5
 4027894:	39000204 	addi	r4,r7,8
 4027898:	01400244 	movi	r5,9
 402789c:	dcc00315 	stw	r19,12(sp)
 40278a0:	dc800215 	stw	r18,8(sp)
 40278a4:	dfc00615 	stw	ra,24(sp)
 40278a8:	dd400515 	stw	r21,20(sp)
 40278ac:	dd000415 	stw	r20,16(sp)
 40278b0:	3825883a 	mov	r18,r7
 40278b4:	3027883a 	mov	r19,r6
 40278b8:	402bfac0 	call	402bfac <__divsi3>
 40278bc:	00c00044 	movi	r3,1
 40278c0:	000b883a 	mov	r5,zero
 40278c4:	1880030e 	bge	r3,r2,40278d4 <__s2b+0x54>
 40278c8:	18c7883a 	add	r3,r3,r3
 40278cc:	29400044 	addi	r5,r5,1
 40278d0:	18bffd16 	blt	r3,r2,40278c8 <__alt_data_end+0xfffe78c8>
 40278d4:	8809883a 	mov	r4,r17
 40278d8:	40276900 	call	4027690 <_Balloc>
 40278dc:	d8c00717 	ldw	r3,28(sp)
 40278e0:	10c00515 	stw	r3,20(r2)
 40278e4:	00c00044 	movi	r3,1
 40278e8:	10c00415 	stw	r3,16(r2)
 40278ec:	00c00244 	movi	r3,9
 40278f0:	1cc0210e 	bge	r3,r19,4027978 <__s2b+0xf8>
 40278f4:	80eb883a 	add	r21,r16,r3
 40278f8:	a829883a 	mov	r20,r21
 40278fc:	84e1883a 	add	r16,r16,r19
 4027900:	a1c00007 	ldb	r7,0(r20)
 4027904:	01800284 	movi	r6,10
 4027908:	a5000044 	addi	r20,r20,1
 402790c:	100b883a 	mov	r5,r2
 4027910:	39fff404 	addi	r7,r7,-48
 4027914:	8809883a 	mov	r4,r17
 4027918:	40277600 	call	4027760 <__multadd>
 402791c:	a43ff81e 	bne	r20,r16,4027900 <__alt_data_end+0xfffe7900>
 4027920:	ace1883a 	add	r16,r21,r19
 4027924:	843ffe04 	addi	r16,r16,-8
 4027928:	9c800a0e 	bge	r19,r18,4027954 <__s2b+0xd4>
 402792c:	94e5c83a 	sub	r18,r18,r19
 4027930:	84a5883a 	add	r18,r16,r18
 4027934:	81c00007 	ldb	r7,0(r16)
 4027938:	01800284 	movi	r6,10
 402793c:	84000044 	addi	r16,r16,1
 4027940:	100b883a 	mov	r5,r2
 4027944:	39fff404 	addi	r7,r7,-48
 4027948:	8809883a 	mov	r4,r17
 402794c:	40277600 	call	4027760 <__multadd>
 4027950:	84bff81e 	bne	r16,r18,4027934 <__alt_data_end+0xfffe7934>
 4027954:	dfc00617 	ldw	ra,24(sp)
 4027958:	dd400517 	ldw	r21,20(sp)
 402795c:	dd000417 	ldw	r20,16(sp)
 4027960:	dcc00317 	ldw	r19,12(sp)
 4027964:	dc800217 	ldw	r18,8(sp)
 4027968:	dc400117 	ldw	r17,4(sp)
 402796c:	dc000017 	ldw	r16,0(sp)
 4027970:	dec00704 	addi	sp,sp,28
 4027974:	f800283a 	ret
 4027978:	84000284 	addi	r16,r16,10
 402797c:	1827883a 	mov	r19,r3
 4027980:	003fe906 	br	4027928 <__alt_data_end+0xfffe7928>

04027984 <__hi0bits>:
 4027984:	20bfffec 	andhi	r2,r4,65535
 4027988:	1000141e 	bne	r2,zero,40279dc <__hi0bits+0x58>
 402798c:	2008943a 	slli	r4,r4,16
 4027990:	00800404 	movi	r2,16
 4027994:	20ffc02c 	andhi	r3,r4,65280
 4027998:	1800021e 	bne	r3,zero,40279a4 <__hi0bits+0x20>
 402799c:	2008923a 	slli	r4,r4,8
 40279a0:	10800204 	addi	r2,r2,8
 40279a4:	20fc002c 	andhi	r3,r4,61440
 40279a8:	1800021e 	bne	r3,zero,40279b4 <__hi0bits+0x30>
 40279ac:	2008913a 	slli	r4,r4,4
 40279b0:	10800104 	addi	r2,r2,4
 40279b4:	20f0002c 	andhi	r3,r4,49152
 40279b8:	1800031e 	bne	r3,zero,40279c8 <__hi0bits+0x44>
 40279bc:	2109883a 	add	r4,r4,r4
 40279c0:	10800084 	addi	r2,r2,2
 40279c4:	2109883a 	add	r4,r4,r4
 40279c8:	20000316 	blt	r4,zero,40279d8 <__hi0bits+0x54>
 40279cc:	2110002c 	andhi	r4,r4,16384
 40279d0:	2000041e 	bne	r4,zero,40279e4 <__hi0bits+0x60>
 40279d4:	00800804 	movi	r2,32
 40279d8:	f800283a 	ret
 40279dc:	0005883a 	mov	r2,zero
 40279e0:	003fec06 	br	4027994 <__alt_data_end+0xfffe7994>
 40279e4:	10800044 	addi	r2,r2,1
 40279e8:	f800283a 	ret

040279ec <__lo0bits>:
 40279ec:	20c00017 	ldw	r3,0(r4)
 40279f0:	188001cc 	andi	r2,r3,7
 40279f4:	10000826 	beq	r2,zero,4027a18 <__lo0bits+0x2c>
 40279f8:	1880004c 	andi	r2,r3,1
 40279fc:	1000211e 	bne	r2,zero,4027a84 <__lo0bits+0x98>
 4027a00:	1880008c 	andi	r2,r3,2
 4027a04:	1000211e 	bne	r2,zero,4027a8c <__lo0bits+0xa0>
 4027a08:	1806d0ba 	srli	r3,r3,2
 4027a0c:	00800084 	movi	r2,2
 4027a10:	20c00015 	stw	r3,0(r4)
 4027a14:	f800283a 	ret
 4027a18:	18bfffcc 	andi	r2,r3,65535
 4027a1c:	10001326 	beq	r2,zero,4027a6c <__lo0bits+0x80>
 4027a20:	0005883a 	mov	r2,zero
 4027a24:	19403fcc 	andi	r5,r3,255
 4027a28:	2800021e 	bne	r5,zero,4027a34 <__lo0bits+0x48>
 4027a2c:	1806d23a 	srli	r3,r3,8
 4027a30:	10800204 	addi	r2,r2,8
 4027a34:	194003cc 	andi	r5,r3,15
 4027a38:	2800021e 	bne	r5,zero,4027a44 <__lo0bits+0x58>
 4027a3c:	1806d13a 	srli	r3,r3,4
 4027a40:	10800104 	addi	r2,r2,4
 4027a44:	194000cc 	andi	r5,r3,3
 4027a48:	2800021e 	bne	r5,zero,4027a54 <__lo0bits+0x68>
 4027a4c:	1806d0ba 	srli	r3,r3,2
 4027a50:	10800084 	addi	r2,r2,2
 4027a54:	1940004c 	andi	r5,r3,1
 4027a58:	2800081e 	bne	r5,zero,4027a7c <__lo0bits+0x90>
 4027a5c:	1806d07a 	srli	r3,r3,1
 4027a60:	1800051e 	bne	r3,zero,4027a78 <__lo0bits+0x8c>
 4027a64:	00800804 	movi	r2,32
 4027a68:	f800283a 	ret
 4027a6c:	1806d43a 	srli	r3,r3,16
 4027a70:	00800404 	movi	r2,16
 4027a74:	003feb06 	br	4027a24 <__alt_data_end+0xfffe7a24>
 4027a78:	10800044 	addi	r2,r2,1
 4027a7c:	20c00015 	stw	r3,0(r4)
 4027a80:	f800283a 	ret
 4027a84:	0005883a 	mov	r2,zero
 4027a88:	f800283a 	ret
 4027a8c:	1806d07a 	srli	r3,r3,1
 4027a90:	00800044 	movi	r2,1
 4027a94:	20c00015 	stw	r3,0(r4)
 4027a98:	f800283a 	ret

04027a9c <__i2b>:
 4027a9c:	defffd04 	addi	sp,sp,-12
 4027aa0:	dc000015 	stw	r16,0(sp)
 4027aa4:	04000044 	movi	r16,1
 4027aa8:	dc400115 	stw	r17,4(sp)
 4027aac:	2823883a 	mov	r17,r5
 4027ab0:	800b883a 	mov	r5,r16
 4027ab4:	dfc00215 	stw	ra,8(sp)
 4027ab8:	40276900 	call	4027690 <_Balloc>
 4027abc:	14400515 	stw	r17,20(r2)
 4027ac0:	14000415 	stw	r16,16(r2)
 4027ac4:	dfc00217 	ldw	ra,8(sp)
 4027ac8:	dc400117 	ldw	r17,4(sp)
 4027acc:	dc000017 	ldw	r16,0(sp)
 4027ad0:	dec00304 	addi	sp,sp,12
 4027ad4:	f800283a 	ret

04027ad8 <__multiply>:
 4027ad8:	defffa04 	addi	sp,sp,-24
 4027adc:	dcc00315 	stw	r19,12(sp)
 4027ae0:	dc800215 	stw	r18,8(sp)
 4027ae4:	34c00417 	ldw	r19,16(r6)
 4027ae8:	2c800417 	ldw	r18,16(r5)
 4027aec:	dd000415 	stw	r20,16(sp)
 4027af0:	dc400115 	stw	r17,4(sp)
 4027af4:	dfc00515 	stw	ra,20(sp)
 4027af8:	dc000015 	stw	r16,0(sp)
 4027afc:	2829883a 	mov	r20,r5
 4027b00:	3023883a 	mov	r17,r6
 4027b04:	94c0050e 	bge	r18,r19,4027b1c <__multiply+0x44>
 4027b08:	9007883a 	mov	r3,r18
 4027b0c:	3029883a 	mov	r20,r6
 4027b10:	9825883a 	mov	r18,r19
 4027b14:	2823883a 	mov	r17,r5
 4027b18:	1827883a 	mov	r19,r3
 4027b1c:	a0800217 	ldw	r2,8(r20)
 4027b20:	94e1883a 	add	r16,r18,r19
 4027b24:	a1400117 	ldw	r5,4(r20)
 4027b28:	1400010e 	bge	r2,r16,4027b30 <__multiply+0x58>
 4027b2c:	29400044 	addi	r5,r5,1
 4027b30:	40276900 	call	4027690 <_Balloc>
 4027b34:	8415883a 	add	r10,r16,r16
 4027b38:	12c00504 	addi	r11,r2,20
 4027b3c:	5295883a 	add	r10,r10,r10
 4027b40:	5a95883a 	add	r10,r11,r10
 4027b44:	5807883a 	mov	r3,r11
 4027b48:	5a80032e 	bgeu	r11,r10,4027b58 <__multiply+0x80>
 4027b4c:	18000015 	stw	zero,0(r3)
 4027b50:	18c00104 	addi	r3,r3,4
 4027b54:	1abffd36 	bltu	r3,r10,4027b4c <__alt_data_end+0xfffe7b4c>
 4027b58:	9ce7883a 	add	r19,r19,r19
 4027b5c:	94a5883a 	add	r18,r18,r18
 4027b60:	89800504 	addi	r6,r17,20
 4027b64:	9ce7883a 	add	r19,r19,r19
 4027b68:	a3400504 	addi	r13,r20,20
 4027b6c:	94a5883a 	add	r18,r18,r18
 4027b70:	34d9883a 	add	r12,r6,r19
 4027b74:	6c93883a 	add	r9,r13,r18
 4027b78:	3300422e 	bgeu	r6,r12,4027c84 <__multiply+0x1ac>
 4027b7c:	37c00017 	ldw	ra,0(r6)
 4027b80:	fbffffcc 	andi	r15,ra,65535
 4027b84:	78001b26 	beq	r15,zero,4027bf4 <__multiply+0x11c>
 4027b88:	5811883a 	mov	r8,r11
 4027b8c:	681d883a 	mov	r14,r13
 4027b90:	000f883a 	mov	r7,zero
 4027b94:	71000017 	ldw	r4,0(r14)
 4027b98:	40c00017 	ldw	r3,0(r8)
 4027b9c:	73800104 	addi	r14,r14,4
 4027ba0:	217fffcc 	andi	r5,r4,65535
 4027ba4:	2bcb383a 	mul	r5,r5,r15
 4027ba8:	2008d43a 	srli	r4,r4,16
 4027bac:	1c7fffcc 	andi	r17,r3,65535
 4027bb0:	2c4b883a 	add	r5,r5,r17
 4027bb4:	29cb883a 	add	r5,r5,r7
 4027bb8:	23c9383a 	mul	r4,r4,r15
 4027bbc:	1806d43a 	srli	r3,r3,16
 4027bc0:	280ed43a 	srli	r7,r5,16
 4027bc4:	297fffcc 	andi	r5,r5,65535
 4027bc8:	20c7883a 	add	r3,r4,r3
 4027bcc:	19c7883a 	add	r3,r3,r7
 4027bd0:	1808943a 	slli	r4,r3,16
 4027bd4:	4023883a 	mov	r17,r8
 4027bd8:	180ed43a 	srli	r7,r3,16
 4027bdc:	214ab03a 	or	r5,r4,r5
 4027be0:	41400015 	stw	r5,0(r8)
 4027be4:	42000104 	addi	r8,r8,4
 4027be8:	727fea36 	bltu	r14,r9,4027b94 <__alt_data_end+0xfffe7b94>
 4027bec:	89c00115 	stw	r7,4(r17)
 4027bf0:	37c00017 	ldw	ra,0(r6)
 4027bf4:	f83ed43a 	srli	ra,ra,16
 4027bf8:	f8001f26 	beq	ra,zero,4027c78 <__multiply+0x1a0>
 4027bfc:	58c00017 	ldw	r3,0(r11)
 4027c00:	681d883a 	mov	r14,r13
 4027c04:	581f883a 	mov	r15,r11
 4027c08:	1811883a 	mov	r8,r3
 4027c0c:	5825883a 	mov	r18,r11
 4027c10:	000f883a 	mov	r7,zero
 4027c14:	00000106 	br	4027c1c <__multiply+0x144>
 4027c18:	8825883a 	mov	r18,r17
 4027c1c:	7140000b 	ldhu	r5,0(r14)
 4027c20:	4010d43a 	srli	r8,r8,16
 4027c24:	193fffcc 	andi	r4,r3,65535
 4027c28:	2fcb383a 	mul	r5,r5,ra
 4027c2c:	7bc00104 	addi	r15,r15,4
 4027c30:	73800104 	addi	r14,r14,4
 4027c34:	2a0b883a 	add	r5,r5,r8
 4027c38:	29cb883a 	add	r5,r5,r7
 4027c3c:	2806943a 	slli	r3,r5,16
 4027c40:	94400104 	addi	r17,r18,4
 4027c44:	280ad43a 	srli	r5,r5,16
 4027c48:	1908b03a 	or	r4,r3,r4
 4027c4c:	793fff15 	stw	r4,-4(r15)
 4027c50:	70ffff17 	ldw	r3,-4(r14)
 4027c54:	8a000017 	ldw	r8,0(r17)
 4027c58:	1806d43a 	srli	r3,r3,16
 4027c5c:	413fffcc 	andi	r4,r8,65535
 4027c60:	1fc7383a 	mul	r3,r3,ra
 4027c64:	1907883a 	add	r3,r3,r4
 4027c68:	1947883a 	add	r3,r3,r5
 4027c6c:	180ed43a 	srli	r7,r3,16
 4027c70:	727fe936 	bltu	r14,r9,4027c18 <__alt_data_end+0xfffe7c18>
 4027c74:	90c00115 	stw	r3,4(r18)
 4027c78:	31800104 	addi	r6,r6,4
 4027c7c:	5ac00104 	addi	r11,r11,4
 4027c80:	333fbe36 	bltu	r6,r12,4027b7c <__alt_data_end+0xfffe7b7c>
 4027c84:	0400090e 	bge	zero,r16,4027cac <__multiply+0x1d4>
 4027c88:	50ffff17 	ldw	r3,-4(r10)
 4027c8c:	52bfff04 	addi	r10,r10,-4
 4027c90:	18000326 	beq	r3,zero,4027ca0 <__multiply+0x1c8>
 4027c94:	00000506 	br	4027cac <__multiply+0x1d4>
 4027c98:	50c00017 	ldw	r3,0(r10)
 4027c9c:	1800031e 	bne	r3,zero,4027cac <__multiply+0x1d4>
 4027ca0:	843fffc4 	addi	r16,r16,-1
 4027ca4:	52bfff04 	addi	r10,r10,-4
 4027ca8:	803ffb1e 	bne	r16,zero,4027c98 <__alt_data_end+0xfffe7c98>
 4027cac:	14000415 	stw	r16,16(r2)
 4027cb0:	dfc00517 	ldw	ra,20(sp)
 4027cb4:	dd000417 	ldw	r20,16(sp)
 4027cb8:	dcc00317 	ldw	r19,12(sp)
 4027cbc:	dc800217 	ldw	r18,8(sp)
 4027cc0:	dc400117 	ldw	r17,4(sp)
 4027cc4:	dc000017 	ldw	r16,0(sp)
 4027cc8:	dec00604 	addi	sp,sp,24
 4027ccc:	f800283a 	ret

04027cd0 <__pow5mult>:
 4027cd0:	defffa04 	addi	sp,sp,-24
 4027cd4:	dcc00315 	stw	r19,12(sp)
 4027cd8:	dc000015 	stw	r16,0(sp)
 4027cdc:	dfc00515 	stw	ra,20(sp)
 4027ce0:	dd000415 	stw	r20,16(sp)
 4027ce4:	dc800215 	stw	r18,8(sp)
 4027ce8:	dc400115 	stw	r17,4(sp)
 4027cec:	308000cc 	andi	r2,r6,3
 4027cf0:	3021883a 	mov	r16,r6
 4027cf4:	2027883a 	mov	r19,r4
 4027cf8:	10002f1e 	bne	r2,zero,4027db8 <__pow5mult+0xe8>
 4027cfc:	2825883a 	mov	r18,r5
 4027d00:	8021d0ba 	srai	r16,r16,2
 4027d04:	80001a26 	beq	r16,zero,4027d70 <__pow5mult+0xa0>
 4027d08:	9c401217 	ldw	r17,72(r19)
 4027d0c:	8800061e 	bne	r17,zero,4027d28 <__pow5mult+0x58>
 4027d10:	00003406 	br	4027de4 <__pow5mult+0x114>
 4027d14:	8021d07a 	srai	r16,r16,1
 4027d18:	80001526 	beq	r16,zero,4027d70 <__pow5mult+0xa0>
 4027d1c:	88800017 	ldw	r2,0(r17)
 4027d20:	10001c26 	beq	r2,zero,4027d94 <__pow5mult+0xc4>
 4027d24:	1023883a 	mov	r17,r2
 4027d28:	8080004c 	andi	r2,r16,1
 4027d2c:	103ff926 	beq	r2,zero,4027d14 <__alt_data_end+0xfffe7d14>
 4027d30:	880d883a 	mov	r6,r17
 4027d34:	900b883a 	mov	r5,r18
 4027d38:	9809883a 	mov	r4,r19
 4027d3c:	4027ad80 	call	4027ad8 <__multiply>
 4027d40:	90001b26 	beq	r18,zero,4027db0 <__pow5mult+0xe0>
 4027d44:	91000117 	ldw	r4,4(r18)
 4027d48:	98c01317 	ldw	r3,76(r19)
 4027d4c:	8021d07a 	srai	r16,r16,1
 4027d50:	2109883a 	add	r4,r4,r4
 4027d54:	2109883a 	add	r4,r4,r4
 4027d58:	1907883a 	add	r3,r3,r4
 4027d5c:	19000017 	ldw	r4,0(r3)
 4027d60:	91000015 	stw	r4,0(r18)
 4027d64:	1c800015 	stw	r18,0(r3)
 4027d68:	1025883a 	mov	r18,r2
 4027d6c:	803feb1e 	bne	r16,zero,4027d1c <__alt_data_end+0xfffe7d1c>
 4027d70:	9005883a 	mov	r2,r18
 4027d74:	dfc00517 	ldw	ra,20(sp)
 4027d78:	dd000417 	ldw	r20,16(sp)
 4027d7c:	dcc00317 	ldw	r19,12(sp)
 4027d80:	dc800217 	ldw	r18,8(sp)
 4027d84:	dc400117 	ldw	r17,4(sp)
 4027d88:	dc000017 	ldw	r16,0(sp)
 4027d8c:	dec00604 	addi	sp,sp,24
 4027d90:	f800283a 	ret
 4027d94:	880d883a 	mov	r6,r17
 4027d98:	880b883a 	mov	r5,r17
 4027d9c:	9809883a 	mov	r4,r19
 4027da0:	4027ad80 	call	4027ad8 <__multiply>
 4027da4:	88800015 	stw	r2,0(r17)
 4027da8:	10000015 	stw	zero,0(r2)
 4027dac:	003fdd06 	br	4027d24 <__alt_data_end+0xfffe7d24>
 4027db0:	1025883a 	mov	r18,r2
 4027db4:	003fd706 	br	4027d14 <__alt_data_end+0xfffe7d14>
 4027db8:	10bfffc4 	addi	r2,r2,-1
 4027dbc:	1085883a 	add	r2,r2,r2
 4027dc0:	00c100f4 	movhi	r3,1027
 4027dc4:	18cda004 	addi	r3,r3,13952
 4027dc8:	1085883a 	add	r2,r2,r2
 4027dcc:	1885883a 	add	r2,r3,r2
 4027dd0:	11800017 	ldw	r6,0(r2)
 4027dd4:	000f883a 	mov	r7,zero
 4027dd8:	40277600 	call	4027760 <__multadd>
 4027ddc:	1025883a 	mov	r18,r2
 4027de0:	003fc706 	br	4027d00 <__alt_data_end+0xfffe7d00>
 4027de4:	05000044 	movi	r20,1
 4027de8:	a00b883a 	mov	r5,r20
 4027dec:	9809883a 	mov	r4,r19
 4027df0:	40276900 	call	4027690 <_Balloc>
 4027df4:	1023883a 	mov	r17,r2
 4027df8:	00809c44 	movi	r2,625
 4027dfc:	88800515 	stw	r2,20(r17)
 4027e00:	8d000415 	stw	r20,16(r17)
 4027e04:	9c401215 	stw	r17,72(r19)
 4027e08:	88000015 	stw	zero,0(r17)
 4027e0c:	003fc606 	br	4027d28 <__alt_data_end+0xfffe7d28>

04027e10 <__lshift>:
 4027e10:	defff904 	addi	sp,sp,-28
 4027e14:	dd400515 	stw	r21,20(sp)
 4027e18:	dcc00315 	stw	r19,12(sp)
 4027e1c:	302bd17a 	srai	r21,r6,5
 4027e20:	2cc00417 	ldw	r19,16(r5)
 4027e24:	28800217 	ldw	r2,8(r5)
 4027e28:	dd000415 	stw	r20,16(sp)
 4027e2c:	ace7883a 	add	r19,r21,r19
 4027e30:	dc800215 	stw	r18,8(sp)
 4027e34:	dc400115 	stw	r17,4(sp)
 4027e38:	dc000015 	stw	r16,0(sp)
 4027e3c:	dfc00615 	stw	ra,24(sp)
 4027e40:	9c000044 	addi	r16,r19,1
 4027e44:	2823883a 	mov	r17,r5
 4027e48:	3029883a 	mov	r20,r6
 4027e4c:	2025883a 	mov	r18,r4
 4027e50:	29400117 	ldw	r5,4(r5)
 4027e54:	1400030e 	bge	r2,r16,4027e64 <__lshift+0x54>
 4027e58:	1085883a 	add	r2,r2,r2
 4027e5c:	29400044 	addi	r5,r5,1
 4027e60:	143ffd16 	blt	r2,r16,4027e58 <__alt_data_end+0xfffe7e58>
 4027e64:	9009883a 	mov	r4,r18
 4027e68:	40276900 	call	4027690 <_Balloc>
 4027e6c:	10c00504 	addi	r3,r2,20
 4027e70:	0540070e 	bge	zero,r21,4027e90 <__lshift+0x80>
 4027e74:	ad6b883a 	add	r21,r21,r21
 4027e78:	ad6b883a 	add	r21,r21,r21
 4027e7c:	1809883a 	mov	r4,r3
 4027e80:	1d47883a 	add	r3,r3,r21
 4027e84:	20000015 	stw	zero,0(r4)
 4027e88:	21000104 	addi	r4,r4,4
 4027e8c:	193ffd1e 	bne	r3,r4,4027e84 <__alt_data_end+0xfffe7e84>
 4027e90:	8a000417 	ldw	r8,16(r17)
 4027e94:	89000504 	addi	r4,r17,20
 4027e98:	a18007cc 	andi	r6,r20,31
 4027e9c:	4211883a 	add	r8,r8,r8
 4027ea0:	4211883a 	add	r8,r8,r8
 4027ea4:	2211883a 	add	r8,r4,r8
 4027ea8:	30002326 	beq	r6,zero,4027f38 <__lshift+0x128>
 4027eac:	02400804 	movi	r9,32
 4027eb0:	4993c83a 	sub	r9,r9,r6
 4027eb4:	000b883a 	mov	r5,zero
 4027eb8:	21c00017 	ldw	r7,0(r4)
 4027ebc:	1815883a 	mov	r10,r3
 4027ec0:	18c00104 	addi	r3,r3,4
 4027ec4:	398e983a 	sll	r7,r7,r6
 4027ec8:	21000104 	addi	r4,r4,4
 4027ecc:	394ab03a 	or	r5,r7,r5
 4027ed0:	197fff15 	stw	r5,-4(r3)
 4027ed4:	217fff17 	ldw	r5,-4(r4)
 4027ed8:	2a4ad83a 	srl	r5,r5,r9
 4027edc:	223ff636 	bltu	r4,r8,4027eb8 <__alt_data_end+0xfffe7eb8>
 4027ee0:	51400115 	stw	r5,4(r10)
 4027ee4:	28001a1e 	bne	r5,zero,4027f50 <__lshift+0x140>
 4027ee8:	843fffc4 	addi	r16,r16,-1
 4027eec:	14000415 	stw	r16,16(r2)
 4027ef0:	88000826 	beq	r17,zero,4027f14 <__lshift+0x104>
 4027ef4:	89000117 	ldw	r4,4(r17)
 4027ef8:	90c01317 	ldw	r3,76(r18)
 4027efc:	2109883a 	add	r4,r4,r4
 4027f00:	2109883a 	add	r4,r4,r4
 4027f04:	1907883a 	add	r3,r3,r4
 4027f08:	19000017 	ldw	r4,0(r3)
 4027f0c:	89000015 	stw	r4,0(r17)
 4027f10:	1c400015 	stw	r17,0(r3)
 4027f14:	dfc00617 	ldw	ra,24(sp)
 4027f18:	dd400517 	ldw	r21,20(sp)
 4027f1c:	dd000417 	ldw	r20,16(sp)
 4027f20:	dcc00317 	ldw	r19,12(sp)
 4027f24:	dc800217 	ldw	r18,8(sp)
 4027f28:	dc400117 	ldw	r17,4(sp)
 4027f2c:	dc000017 	ldw	r16,0(sp)
 4027f30:	dec00704 	addi	sp,sp,28
 4027f34:	f800283a 	ret
 4027f38:	21400017 	ldw	r5,0(r4)
 4027f3c:	18c00104 	addi	r3,r3,4
 4027f40:	21000104 	addi	r4,r4,4
 4027f44:	197fff15 	stw	r5,-4(r3)
 4027f48:	223ffb36 	bltu	r4,r8,4027f38 <__alt_data_end+0xfffe7f38>
 4027f4c:	003fe606 	br	4027ee8 <__alt_data_end+0xfffe7ee8>
 4027f50:	9c000084 	addi	r16,r19,2
 4027f54:	003fe406 	br	4027ee8 <__alt_data_end+0xfffe7ee8>

04027f58 <__mcmp>:
 4027f58:	20800417 	ldw	r2,16(r4)
 4027f5c:	28c00417 	ldw	r3,16(r5)
 4027f60:	10c5c83a 	sub	r2,r2,r3
 4027f64:	1000111e 	bne	r2,zero,4027fac <__mcmp+0x54>
 4027f68:	18c7883a 	add	r3,r3,r3
 4027f6c:	18c7883a 	add	r3,r3,r3
 4027f70:	21000504 	addi	r4,r4,20
 4027f74:	29400504 	addi	r5,r5,20
 4027f78:	20c5883a 	add	r2,r4,r3
 4027f7c:	28cb883a 	add	r5,r5,r3
 4027f80:	00000106 	br	4027f88 <__mcmp+0x30>
 4027f84:	20800a2e 	bgeu	r4,r2,4027fb0 <__mcmp+0x58>
 4027f88:	10bfff04 	addi	r2,r2,-4
 4027f8c:	297fff04 	addi	r5,r5,-4
 4027f90:	11800017 	ldw	r6,0(r2)
 4027f94:	28c00017 	ldw	r3,0(r5)
 4027f98:	30fffa26 	beq	r6,r3,4027f84 <__alt_data_end+0xfffe7f84>
 4027f9c:	30c00236 	bltu	r6,r3,4027fa8 <__mcmp+0x50>
 4027fa0:	00800044 	movi	r2,1
 4027fa4:	f800283a 	ret
 4027fa8:	00bfffc4 	movi	r2,-1
 4027fac:	f800283a 	ret
 4027fb0:	0005883a 	mov	r2,zero
 4027fb4:	f800283a 	ret

04027fb8 <__mdiff>:
 4027fb8:	28c00417 	ldw	r3,16(r5)
 4027fbc:	30800417 	ldw	r2,16(r6)
 4027fc0:	defffa04 	addi	sp,sp,-24
 4027fc4:	dcc00315 	stw	r19,12(sp)
 4027fc8:	dc800215 	stw	r18,8(sp)
 4027fcc:	dfc00515 	stw	ra,20(sp)
 4027fd0:	dd000415 	stw	r20,16(sp)
 4027fd4:	dc400115 	stw	r17,4(sp)
 4027fd8:	dc000015 	stw	r16,0(sp)
 4027fdc:	1887c83a 	sub	r3,r3,r2
 4027fe0:	2825883a 	mov	r18,r5
 4027fe4:	3027883a 	mov	r19,r6
 4027fe8:	1800141e 	bne	r3,zero,402803c <__mdiff+0x84>
 4027fec:	1085883a 	add	r2,r2,r2
 4027ff0:	1085883a 	add	r2,r2,r2
 4027ff4:	2a000504 	addi	r8,r5,20
 4027ff8:	34000504 	addi	r16,r6,20
 4027ffc:	4087883a 	add	r3,r8,r2
 4028000:	8085883a 	add	r2,r16,r2
 4028004:	00000106 	br	402800c <__mdiff+0x54>
 4028008:	40c0592e 	bgeu	r8,r3,4028170 <__mdiff+0x1b8>
 402800c:	18ffff04 	addi	r3,r3,-4
 4028010:	10bfff04 	addi	r2,r2,-4
 4028014:	19c00017 	ldw	r7,0(r3)
 4028018:	11400017 	ldw	r5,0(r2)
 402801c:	397ffa26 	beq	r7,r5,4028008 <__alt_data_end+0xfffe8008>
 4028020:	3940592e 	bgeu	r7,r5,4028188 <__mdiff+0x1d0>
 4028024:	9005883a 	mov	r2,r18
 4028028:	4023883a 	mov	r17,r8
 402802c:	9825883a 	mov	r18,r19
 4028030:	05000044 	movi	r20,1
 4028034:	1027883a 	mov	r19,r2
 4028038:	00000406 	br	402804c <__mdiff+0x94>
 402803c:	18005616 	blt	r3,zero,4028198 <__mdiff+0x1e0>
 4028040:	34400504 	addi	r17,r6,20
 4028044:	2c000504 	addi	r16,r5,20
 4028048:	0029883a 	mov	r20,zero
 402804c:	91400117 	ldw	r5,4(r18)
 4028050:	40276900 	call	4027690 <_Balloc>
 4028054:	92400417 	ldw	r9,16(r18)
 4028058:	9b000417 	ldw	r12,16(r19)
 402805c:	12c00504 	addi	r11,r2,20
 4028060:	4a51883a 	add	r8,r9,r9
 4028064:	6319883a 	add	r12,r12,r12
 4028068:	4211883a 	add	r8,r8,r8
 402806c:	6319883a 	add	r12,r12,r12
 4028070:	15000315 	stw	r20,12(r2)
 4028074:	8211883a 	add	r8,r16,r8
 4028078:	8b19883a 	add	r12,r17,r12
 402807c:	0007883a 	mov	r3,zero
 4028080:	81400017 	ldw	r5,0(r16)
 4028084:	89c00017 	ldw	r7,0(r17)
 4028088:	59800104 	addi	r6,r11,4
 402808c:	293fffcc 	andi	r4,r5,65535
 4028090:	20c7883a 	add	r3,r4,r3
 4028094:	393fffcc 	andi	r4,r7,65535
 4028098:	1909c83a 	sub	r4,r3,r4
 402809c:	280ad43a 	srli	r5,r5,16
 40280a0:	380ed43a 	srli	r7,r7,16
 40280a4:	2007d43a 	srai	r3,r4,16
 40280a8:	213fffcc 	andi	r4,r4,65535
 40280ac:	29cbc83a 	sub	r5,r5,r7
 40280b0:	28c7883a 	add	r3,r5,r3
 40280b4:	180a943a 	slli	r5,r3,16
 40280b8:	8c400104 	addi	r17,r17,4
 40280bc:	84000104 	addi	r16,r16,4
 40280c0:	2908b03a 	or	r4,r5,r4
 40280c4:	59000015 	stw	r4,0(r11)
 40280c8:	1807d43a 	srai	r3,r3,16
 40280cc:	3015883a 	mov	r10,r6
 40280d0:	3017883a 	mov	r11,r6
 40280d4:	8b3fea36 	bltu	r17,r12,4028080 <__alt_data_end+0xfffe8080>
 40280d8:	8200162e 	bgeu	r16,r8,4028134 <__mdiff+0x17c>
 40280dc:	8017883a 	mov	r11,r16
 40280e0:	59400017 	ldw	r5,0(r11)
 40280e4:	31800104 	addi	r6,r6,4
 40280e8:	5ac00104 	addi	r11,r11,4
 40280ec:	293fffcc 	andi	r4,r5,65535
 40280f0:	20c7883a 	add	r3,r4,r3
 40280f4:	280ed43a 	srli	r7,r5,16
 40280f8:	180bd43a 	srai	r5,r3,16
 40280fc:	193fffcc 	andi	r4,r3,65535
 4028100:	3947883a 	add	r3,r7,r5
 4028104:	180a943a 	slli	r5,r3,16
 4028108:	1807d43a 	srai	r3,r3,16
 402810c:	2908b03a 	or	r4,r5,r4
 4028110:	313fff15 	stw	r4,-4(r6)
 4028114:	5a3ff236 	bltu	r11,r8,40280e0 <__alt_data_end+0xfffe80e0>
 4028118:	0406303a 	nor	r3,zero,r16
 402811c:	1a07883a 	add	r3,r3,r8
 4028120:	1806d0ba 	srli	r3,r3,2
 4028124:	18c00044 	addi	r3,r3,1
 4028128:	18c7883a 	add	r3,r3,r3
 402812c:	18c7883a 	add	r3,r3,r3
 4028130:	50d5883a 	add	r10,r10,r3
 4028134:	50ffff04 	addi	r3,r10,-4
 4028138:	2000041e 	bne	r4,zero,402814c <__mdiff+0x194>
 402813c:	18ffff04 	addi	r3,r3,-4
 4028140:	19000017 	ldw	r4,0(r3)
 4028144:	4a7fffc4 	addi	r9,r9,-1
 4028148:	203ffc26 	beq	r4,zero,402813c <__alt_data_end+0xfffe813c>
 402814c:	12400415 	stw	r9,16(r2)
 4028150:	dfc00517 	ldw	ra,20(sp)
 4028154:	dd000417 	ldw	r20,16(sp)
 4028158:	dcc00317 	ldw	r19,12(sp)
 402815c:	dc800217 	ldw	r18,8(sp)
 4028160:	dc400117 	ldw	r17,4(sp)
 4028164:	dc000017 	ldw	r16,0(sp)
 4028168:	dec00604 	addi	sp,sp,24
 402816c:	f800283a 	ret
 4028170:	000b883a 	mov	r5,zero
 4028174:	40276900 	call	4027690 <_Balloc>
 4028178:	00c00044 	movi	r3,1
 402817c:	10c00415 	stw	r3,16(r2)
 4028180:	10000515 	stw	zero,20(r2)
 4028184:	003ff206 	br	4028150 <__alt_data_end+0xfffe8150>
 4028188:	8023883a 	mov	r17,r16
 402818c:	0029883a 	mov	r20,zero
 4028190:	4021883a 	mov	r16,r8
 4028194:	003fad06 	br	402804c <__alt_data_end+0xfffe804c>
 4028198:	9005883a 	mov	r2,r18
 402819c:	94400504 	addi	r17,r18,20
 40281a0:	9c000504 	addi	r16,r19,20
 40281a4:	9825883a 	mov	r18,r19
 40281a8:	05000044 	movi	r20,1
 40281ac:	1027883a 	mov	r19,r2
 40281b0:	003fa606 	br	402804c <__alt_data_end+0xfffe804c>

040281b4 <__ulp>:
 40281b4:	295ffc2c 	andhi	r5,r5,32752
 40281b8:	00bf3034 	movhi	r2,64704
 40281bc:	2887883a 	add	r3,r5,r2
 40281c0:	00c0020e 	bge	zero,r3,40281cc <__ulp+0x18>
 40281c4:	0005883a 	mov	r2,zero
 40281c8:	f800283a 	ret
 40281cc:	00c7c83a 	sub	r3,zero,r3
 40281d0:	1807d53a 	srai	r3,r3,20
 40281d4:	008004c4 	movi	r2,19
 40281d8:	10c00b0e 	bge	r2,r3,4028208 <__ulp+0x54>
 40281dc:	18bffb04 	addi	r2,r3,-20
 40281e0:	01000784 	movi	r4,30
 40281e4:	0007883a 	mov	r3,zero
 40281e8:	20800516 	blt	r4,r2,4028200 <__ulp+0x4c>
 40281ec:	010007c4 	movi	r4,31
 40281f0:	2089c83a 	sub	r4,r4,r2
 40281f4:	00800044 	movi	r2,1
 40281f8:	1104983a 	sll	r2,r2,r4
 40281fc:	f800283a 	ret
 4028200:	00800044 	movi	r2,1
 4028204:	f800283a 	ret
 4028208:	01400234 	movhi	r5,8
 402820c:	28c7d83a 	sra	r3,r5,r3
 4028210:	0005883a 	mov	r2,zero
 4028214:	f800283a 	ret

04028218 <__b2d>:
 4028218:	defffa04 	addi	sp,sp,-24
 402821c:	dc000015 	stw	r16,0(sp)
 4028220:	24000417 	ldw	r16,16(r4)
 4028224:	dc400115 	stw	r17,4(sp)
 4028228:	24400504 	addi	r17,r4,20
 402822c:	8421883a 	add	r16,r16,r16
 4028230:	8421883a 	add	r16,r16,r16
 4028234:	8c21883a 	add	r16,r17,r16
 4028238:	dc800215 	stw	r18,8(sp)
 402823c:	84bfff17 	ldw	r18,-4(r16)
 4028240:	dd000415 	stw	r20,16(sp)
 4028244:	dcc00315 	stw	r19,12(sp)
 4028248:	9009883a 	mov	r4,r18
 402824c:	2829883a 	mov	r20,r5
 4028250:	dfc00515 	stw	ra,20(sp)
 4028254:	40279840 	call	4027984 <__hi0bits>
 4028258:	00c00804 	movi	r3,32
 402825c:	1889c83a 	sub	r4,r3,r2
 4028260:	a1000015 	stw	r4,0(r20)
 4028264:	01000284 	movi	r4,10
 4028268:	84ffff04 	addi	r19,r16,-4
 402826c:	20801216 	blt	r4,r2,40282b8 <__b2d+0xa0>
 4028270:	018002c4 	movi	r6,11
 4028274:	308dc83a 	sub	r6,r6,r2
 4028278:	9186d83a 	srl	r3,r18,r6
 402827c:	18cffc34 	orhi	r3,r3,16368
 4028280:	8cc0212e 	bgeu	r17,r19,4028308 <__b2d+0xf0>
 4028284:	813ffe17 	ldw	r4,-8(r16)
 4028288:	218cd83a 	srl	r6,r4,r6
 402828c:	10800544 	addi	r2,r2,21
 4028290:	9084983a 	sll	r2,r18,r2
 4028294:	1184b03a 	or	r2,r2,r6
 4028298:	dfc00517 	ldw	ra,20(sp)
 402829c:	dd000417 	ldw	r20,16(sp)
 40282a0:	dcc00317 	ldw	r19,12(sp)
 40282a4:	dc800217 	ldw	r18,8(sp)
 40282a8:	dc400117 	ldw	r17,4(sp)
 40282ac:	dc000017 	ldw	r16,0(sp)
 40282b0:	dec00604 	addi	sp,sp,24
 40282b4:	f800283a 	ret
 40282b8:	8cc00f2e 	bgeu	r17,r19,40282f8 <__b2d+0xe0>
 40282bc:	117ffd44 	addi	r5,r2,-11
 40282c0:	80bffe17 	ldw	r2,-8(r16)
 40282c4:	28000e26 	beq	r5,zero,4028300 <__b2d+0xe8>
 40282c8:	1949c83a 	sub	r4,r3,r5
 40282cc:	9164983a 	sll	r18,r18,r5
 40282d0:	1106d83a 	srl	r3,r2,r4
 40282d4:	81bffe04 	addi	r6,r16,-8
 40282d8:	948ffc34 	orhi	r18,r18,16368
 40282dc:	90c6b03a 	or	r3,r18,r3
 40282e0:	89800e2e 	bgeu	r17,r6,402831c <__b2d+0x104>
 40282e4:	81bffd17 	ldw	r6,-12(r16)
 40282e8:	1144983a 	sll	r2,r2,r5
 40282ec:	310ad83a 	srl	r5,r6,r4
 40282f0:	2884b03a 	or	r2,r5,r2
 40282f4:	003fe806 	br	4028298 <__alt_data_end+0xfffe8298>
 40282f8:	10bffd44 	addi	r2,r2,-11
 40282fc:	1000041e 	bne	r2,zero,4028310 <__b2d+0xf8>
 4028300:	90cffc34 	orhi	r3,r18,16368
 4028304:	003fe406 	br	4028298 <__alt_data_end+0xfffe8298>
 4028308:	000d883a 	mov	r6,zero
 402830c:	003fdf06 	br	402828c <__alt_data_end+0xfffe828c>
 4028310:	90a4983a 	sll	r18,r18,r2
 4028314:	0005883a 	mov	r2,zero
 4028318:	003ff906 	br	4028300 <__alt_data_end+0xfffe8300>
 402831c:	1144983a 	sll	r2,r2,r5
 4028320:	003fdd06 	br	4028298 <__alt_data_end+0xfffe8298>

04028324 <__d2b>:
 4028324:	defff804 	addi	sp,sp,-32
 4028328:	dc000215 	stw	r16,8(sp)
 402832c:	3021883a 	mov	r16,r6
 4028330:	dc400315 	stw	r17,12(sp)
 4028334:	8022907a 	slli	r17,r16,1
 4028338:	dd000615 	stw	r20,24(sp)
 402833c:	2829883a 	mov	r20,r5
 4028340:	01400044 	movi	r5,1
 4028344:	dcc00515 	stw	r19,20(sp)
 4028348:	dc800415 	stw	r18,16(sp)
 402834c:	dfc00715 	stw	ra,28(sp)
 4028350:	3825883a 	mov	r18,r7
 4028354:	8822d57a 	srli	r17,r17,21
 4028358:	40276900 	call	4027690 <_Balloc>
 402835c:	1027883a 	mov	r19,r2
 4028360:	00800434 	movhi	r2,16
 4028364:	10bfffc4 	addi	r2,r2,-1
 4028368:	808c703a 	and	r6,r16,r2
 402836c:	88000126 	beq	r17,zero,4028374 <__d2b+0x50>
 4028370:	31800434 	orhi	r6,r6,16
 4028374:	d9800015 	stw	r6,0(sp)
 4028378:	a0002426 	beq	r20,zero,402840c <__d2b+0xe8>
 402837c:	d9000104 	addi	r4,sp,4
 4028380:	dd000115 	stw	r20,4(sp)
 4028384:	40279ec0 	call	40279ec <__lo0bits>
 4028388:	d8c00017 	ldw	r3,0(sp)
 402838c:	10002f1e 	bne	r2,zero,402844c <__d2b+0x128>
 4028390:	d9000117 	ldw	r4,4(sp)
 4028394:	99000515 	stw	r4,20(r19)
 4028398:	1821003a 	cmpeq	r16,r3,zero
 402839c:	01000084 	movi	r4,2
 40283a0:	2421c83a 	sub	r16,r4,r16
 40283a4:	98c00615 	stw	r3,24(r19)
 40283a8:	9c000415 	stw	r16,16(r19)
 40283ac:	88001f1e 	bne	r17,zero,402842c <__d2b+0x108>
 40283b0:	10bef384 	addi	r2,r2,-1074
 40283b4:	90800015 	stw	r2,0(r18)
 40283b8:	00900034 	movhi	r2,16384
 40283bc:	10bfffc4 	addi	r2,r2,-1
 40283c0:	8085883a 	add	r2,r16,r2
 40283c4:	1085883a 	add	r2,r2,r2
 40283c8:	1085883a 	add	r2,r2,r2
 40283cc:	9885883a 	add	r2,r19,r2
 40283d0:	11000517 	ldw	r4,20(r2)
 40283d4:	8020917a 	slli	r16,r16,5
 40283d8:	40279840 	call	4027984 <__hi0bits>
 40283dc:	d8c00817 	ldw	r3,32(sp)
 40283e0:	8085c83a 	sub	r2,r16,r2
 40283e4:	18800015 	stw	r2,0(r3)
 40283e8:	9805883a 	mov	r2,r19
 40283ec:	dfc00717 	ldw	ra,28(sp)
 40283f0:	dd000617 	ldw	r20,24(sp)
 40283f4:	dcc00517 	ldw	r19,20(sp)
 40283f8:	dc800417 	ldw	r18,16(sp)
 40283fc:	dc400317 	ldw	r17,12(sp)
 4028400:	dc000217 	ldw	r16,8(sp)
 4028404:	dec00804 	addi	sp,sp,32
 4028408:	f800283a 	ret
 402840c:	d809883a 	mov	r4,sp
 4028410:	40279ec0 	call	40279ec <__lo0bits>
 4028414:	d8c00017 	ldw	r3,0(sp)
 4028418:	04000044 	movi	r16,1
 402841c:	9c000415 	stw	r16,16(r19)
 4028420:	98c00515 	stw	r3,20(r19)
 4028424:	10800804 	addi	r2,r2,32
 4028428:	883fe126 	beq	r17,zero,40283b0 <__alt_data_end+0xfffe83b0>
 402842c:	00c00d44 	movi	r3,53
 4028430:	8c7ef344 	addi	r17,r17,-1075
 4028434:	88a3883a 	add	r17,r17,r2
 4028438:	1885c83a 	sub	r2,r3,r2
 402843c:	d8c00817 	ldw	r3,32(sp)
 4028440:	94400015 	stw	r17,0(r18)
 4028444:	18800015 	stw	r2,0(r3)
 4028448:	003fe706 	br	40283e8 <__alt_data_end+0xfffe83e8>
 402844c:	01000804 	movi	r4,32
 4028450:	2089c83a 	sub	r4,r4,r2
 4028454:	1908983a 	sll	r4,r3,r4
 4028458:	d9400117 	ldw	r5,4(sp)
 402845c:	1886d83a 	srl	r3,r3,r2
 4028460:	2148b03a 	or	r4,r4,r5
 4028464:	99000515 	stw	r4,20(r19)
 4028468:	d8c00015 	stw	r3,0(sp)
 402846c:	003fca06 	br	4028398 <__alt_data_end+0xfffe8398>

04028470 <__ratio>:
 4028470:	defff904 	addi	sp,sp,-28
 4028474:	dc400315 	stw	r17,12(sp)
 4028478:	2823883a 	mov	r17,r5
 402847c:	d9400104 	addi	r5,sp,4
 4028480:	dfc00615 	stw	ra,24(sp)
 4028484:	dcc00515 	stw	r19,20(sp)
 4028488:	dc800415 	stw	r18,16(sp)
 402848c:	2027883a 	mov	r19,r4
 4028490:	dc000215 	stw	r16,8(sp)
 4028494:	40282180 	call	4028218 <__b2d>
 4028498:	d80b883a 	mov	r5,sp
 402849c:	8809883a 	mov	r4,r17
 40284a0:	1025883a 	mov	r18,r2
 40284a4:	1821883a 	mov	r16,r3
 40284a8:	40282180 	call	4028218 <__b2d>
 40284ac:	8a000417 	ldw	r8,16(r17)
 40284b0:	99000417 	ldw	r4,16(r19)
 40284b4:	d9400117 	ldw	r5,4(sp)
 40284b8:	2209c83a 	sub	r4,r4,r8
 40284bc:	2010917a 	slli	r8,r4,5
 40284c0:	d9000017 	ldw	r4,0(sp)
 40284c4:	2909c83a 	sub	r4,r5,r4
 40284c8:	4109883a 	add	r4,r8,r4
 40284cc:	01000e0e 	bge	zero,r4,4028508 <__ratio+0x98>
 40284d0:	2008953a 	slli	r4,r4,20
 40284d4:	2421883a 	add	r16,r4,r16
 40284d8:	100d883a 	mov	r6,r2
 40284dc:	180f883a 	mov	r7,r3
 40284e0:	9009883a 	mov	r4,r18
 40284e4:	800b883a 	mov	r5,r16
 40284e8:	402ca0c0 	call	402ca0c <__divdf3>
 40284ec:	dfc00617 	ldw	ra,24(sp)
 40284f0:	dcc00517 	ldw	r19,20(sp)
 40284f4:	dc800417 	ldw	r18,16(sp)
 40284f8:	dc400317 	ldw	r17,12(sp)
 40284fc:	dc000217 	ldw	r16,8(sp)
 4028500:	dec00704 	addi	sp,sp,28
 4028504:	f800283a 	ret
 4028508:	2008953a 	slli	r4,r4,20
 402850c:	1907c83a 	sub	r3,r3,r4
 4028510:	003ff106 	br	40284d8 <__alt_data_end+0xfffe84d8>

04028514 <_mprec_log10>:
 4028514:	defffe04 	addi	sp,sp,-8
 4028518:	dc000015 	stw	r16,0(sp)
 402851c:	dfc00115 	stw	ra,4(sp)
 4028520:	008005c4 	movi	r2,23
 4028524:	2021883a 	mov	r16,r4
 4028528:	11000d0e 	bge	r2,r4,4028560 <_mprec_log10+0x4c>
 402852c:	0005883a 	mov	r2,zero
 4028530:	00cffc34 	movhi	r3,16368
 4028534:	843fffc4 	addi	r16,r16,-1
 4028538:	000d883a 	mov	r6,zero
 402853c:	01d00934 	movhi	r7,16420
 4028540:	1009883a 	mov	r4,r2
 4028544:	180b883a 	mov	r5,r3
 4028548:	402d54c0 	call	402d54c <__muldf3>
 402854c:	803ff91e 	bne	r16,zero,4028534 <__alt_data_end+0xfffe8534>
 4028550:	dfc00117 	ldw	ra,4(sp)
 4028554:	dc000017 	ldw	r16,0(sp)
 4028558:	dec00204 	addi	sp,sp,8
 402855c:	f800283a 	ret
 4028560:	202090fa 	slli	r16,r4,3
 4028564:	008100f4 	movhi	r2,1027
 4028568:	108db704 	addi	r2,r2,14044
 402856c:	1421883a 	add	r16,r2,r16
 4028570:	80800017 	ldw	r2,0(r16)
 4028574:	80c00117 	ldw	r3,4(r16)
 4028578:	dfc00117 	ldw	ra,4(sp)
 402857c:	dc000017 	ldw	r16,0(sp)
 4028580:	dec00204 	addi	sp,sp,8
 4028584:	f800283a 	ret

04028588 <__copybits>:
 4028588:	297fffc4 	addi	r5,r5,-1
 402858c:	280fd17a 	srai	r7,r5,5
 4028590:	30c00417 	ldw	r3,16(r6)
 4028594:	30800504 	addi	r2,r6,20
 4028598:	39c00044 	addi	r7,r7,1
 402859c:	18c7883a 	add	r3,r3,r3
 40285a0:	39cf883a 	add	r7,r7,r7
 40285a4:	18c7883a 	add	r3,r3,r3
 40285a8:	39cf883a 	add	r7,r7,r7
 40285ac:	10c7883a 	add	r3,r2,r3
 40285b0:	21cf883a 	add	r7,r4,r7
 40285b4:	10c00d2e 	bgeu	r2,r3,40285ec <__copybits+0x64>
 40285b8:	200b883a 	mov	r5,r4
 40285bc:	12000017 	ldw	r8,0(r2)
 40285c0:	29400104 	addi	r5,r5,4
 40285c4:	10800104 	addi	r2,r2,4
 40285c8:	2a3fff15 	stw	r8,-4(r5)
 40285cc:	10fffb36 	bltu	r2,r3,40285bc <__alt_data_end+0xfffe85bc>
 40285d0:	1985c83a 	sub	r2,r3,r6
 40285d4:	10bffac4 	addi	r2,r2,-21
 40285d8:	1004d0ba 	srli	r2,r2,2
 40285dc:	10800044 	addi	r2,r2,1
 40285e0:	1085883a 	add	r2,r2,r2
 40285e4:	1085883a 	add	r2,r2,r2
 40285e8:	2089883a 	add	r4,r4,r2
 40285ec:	21c0032e 	bgeu	r4,r7,40285fc <__copybits+0x74>
 40285f0:	20000015 	stw	zero,0(r4)
 40285f4:	21000104 	addi	r4,r4,4
 40285f8:	21fffd36 	bltu	r4,r7,40285f0 <__alt_data_end+0xfffe85f0>
 40285fc:	f800283a 	ret

04028600 <__any_on>:
 4028600:	20c00417 	ldw	r3,16(r4)
 4028604:	2805d17a 	srai	r2,r5,5
 4028608:	21000504 	addi	r4,r4,20
 402860c:	18800d0e 	bge	r3,r2,4028644 <__any_on+0x44>
 4028610:	18c7883a 	add	r3,r3,r3
 4028614:	18c7883a 	add	r3,r3,r3
 4028618:	20c7883a 	add	r3,r4,r3
 402861c:	20c0192e 	bgeu	r4,r3,4028684 <__any_on+0x84>
 4028620:	18bfff17 	ldw	r2,-4(r3)
 4028624:	18ffff04 	addi	r3,r3,-4
 4028628:	1000041e 	bne	r2,zero,402863c <__any_on+0x3c>
 402862c:	20c0142e 	bgeu	r4,r3,4028680 <__any_on+0x80>
 4028630:	18ffff04 	addi	r3,r3,-4
 4028634:	19400017 	ldw	r5,0(r3)
 4028638:	283ffc26 	beq	r5,zero,402862c <__alt_data_end+0xfffe862c>
 402863c:	00800044 	movi	r2,1
 4028640:	f800283a 	ret
 4028644:	10c00a0e 	bge	r2,r3,4028670 <__any_on+0x70>
 4028648:	1085883a 	add	r2,r2,r2
 402864c:	1085883a 	add	r2,r2,r2
 4028650:	294007cc 	andi	r5,r5,31
 4028654:	2087883a 	add	r3,r4,r2
 4028658:	283ff026 	beq	r5,zero,402861c <__alt_data_end+0xfffe861c>
 402865c:	19800017 	ldw	r6,0(r3)
 4028660:	3144d83a 	srl	r2,r6,r5
 4028664:	114a983a 	sll	r5,r2,r5
 4028668:	317ff41e 	bne	r6,r5,402863c <__alt_data_end+0xfffe863c>
 402866c:	003feb06 	br	402861c <__alt_data_end+0xfffe861c>
 4028670:	1085883a 	add	r2,r2,r2
 4028674:	1085883a 	add	r2,r2,r2
 4028678:	2087883a 	add	r3,r4,r2
 402867c:	003fe706 	br	402861c <__alt_data_end+0xfffe861c>
 4028680:	f800283a 	ret
 4028684:	0005883a 	mov	r2,zero
 4028688:	f800283a 	ret

0402868c <__fpclassifyd>:
 402868c:	00a00034 	movhi	r2,32768
 4028690:	10bfffc4 	addi	r2,r2,-1
 4028694:	2884703a 	and	r2,r5,r2
 4028698:	10000726 	beq	r2,zero,40286b8 <__fpclassifyd+0x2c>
 402869c:	00fffc34 	movhi	r3,65520
 40286a0:	019ff834 	movhi	r6,32736
 40286a4:	28c7883a 	add	r3,r5,r3
 40286a8:	31bfffc4 	addi	r6,r6,-1
 40286ac:	30c00536 	bltu	r6,r3,40286c4 <__fpclassifyd+0x38>
 40286b0:	00800104 	movi	r2,4
 40286b4:	f800283a 	ret
 40286b8:	2000021e 	bne	r4,zero,40286c4 <__fpclassifyd+0x38>
 40286bc:	00800084 	movi	r2,2
 40286c0:	f800283a 	ret
 40286c4:	00dffc34 	movhi	r3,32752
 40286c8:	019ff834 	movhi	r6,32736
 40286cc:	28cb883a 	add	r5,r5,r3
 40286d0:	31bfffc4 	addi	r6,r6,-1
 40286d4:	317ff62e 	bgeu	r6,r5,40286b0 <__alt_data_end+0xfffe86b0>
 40286d8:	01400434 	movhi	r5,16
 40286dc:	297fffc4 	addi	r5,r5,-1
 40286e0:	28800236 	bltu	r5,r2,40286ec <__fpclassifyd+0x60>
 40286e4:	008000c4 	movi	r2,3
 40286e8:	f800283a 	ret
 40286ec:	10c00226 	beq	r2,r3,40286f8 <__fpclassifyd+0x6c>
 40286f0:	0005883a 	mov	r2,zero
 40286f4:	f800283a 	ret
 40286f8:	2005003a 	cmpeq	r2,r4,zero
 40286fc:	f800283a 	ret

04028700 <_sbrk_r>:
 4028700:	defffd04 	addi	sp,sp,-12
 4028704:	dc000015 	stw	r16,0(sp)
 4028708:	040100f4 	movhi	r16,1027
 402870c:	dc400115 	stw	r17,4(sp)
 4028710:	841c9204 	addi	r16,r16,29256
 4028714:	2023883a 	mov	r17,r4
 4028718:	2809883a 	mov	r4,r5
 402871c:	dfc00215 	stw	ra,8(sp)
 4028720:	80000015 	stw	zero,0(r16)
 4028724:	402f2f40 	call	402f2f4 <sbrk>
 4028728:	00ffffc4 	movi	r3,-1
 402872c:	10c00526 	beq	r2,r3,4028744 <_sbrk_r+0x44>
 4028730:	dfc00217 	ldw	ra,8(sp)
 4028734:	dc400117 	ldw	r17,4(sp)
 4028738:	dc000017 	ldw	r16,0(sp)
 402873c:	dec00304 	addi	sp,sp,12
 4028740:	f800283a 	ret
 4028744:	80c00017 	ldw	r3,0(r16)
 4028748:	183ff926 	beq	r3,zero,4028730 <__alt_data_end+0xfffe8730>
 402874c:	88c00015 	stw	r3,0(r17)
 4028750:	003ff706 	br	4028730 <__alt_data_end+0xfffe8730>

04028754 <__sread>:
 4028754:	defffe04 	addi	sp,sp,-8
 4028758:	dc000015 	stw	r16,0(sp)
 402875c:	2821883a 	mov	r16,r5
 4028760:	2940038f 	ldh	r5,14(r5)
 4028764:	dfc00115 	stw	ra,4(sp)
 4028768:	402abf80 	call	402abf8 <_read_r>
 402876c:	10000716 	blt	r2,zero,402878c <__sread+0x38>
 4028770:	80c01417 	ldw	r3,80(r16)
 4028774:	1887883a 	add	r3,r3,r2
 4028778:	80c01415 	stw	r3,80(r16)
 402877c:	dfc00117 	ldw	ra,4(sp)
 4028780:	dc000017 	ldw	r16,0(sp)
 4028784:	dec00204 	addi	sp,sp,8
 4028788:	f800283a 	ret
 402878c:	80c0030b 	ldhu	r3,12(r16)
 4028790:	18fbffcc 	andi	r3,r3,61439
 4028794:	80c0030d 	sth	r3,12(r16)
 4028798:	dfc00117 	ldw	ra,4(sp)
 402879c:	dc000017 	ldw	r16,0(sp)
 40287a0:	dec00204 	addi	sp,sp,8
 40287a4:	f800283a 	ret

040287a8 <__seofread>:
 40287a8:	0005883a 	mov	r2,zero
 40287ac:	f800283a 	ret

040287b0 <__swrite>:
 40287b0:	2880030b 	ldhu	r2,12(r5)
 40287b4:	defffb04 	addi	sp,sp,-20
 40287b8:	dcc00315 	stw	r19,12(sp)
 40287bc:	dc800215 	stw	r18,8(sp)
 40287c0:	dc400115 	stw	r17,4(sp)
 40287c4:	dc000015 	stw	r16,0(sp)
 40287c8:	dfc00415 	stw	ra,16(sp)
 40287cc:	10c0400c 	andi	r3,r2,256
 40287d0:	2821883a 	mov	r16,r5
 40287d4:	2023883a 	mov	r17,r4
 40287d8:	3025883a 	mov	r18,r6
 40287dc:	3827883a 	mov	r19,r7
 40287e0:	18000526 	beq	r3,zero,40287f8 <__swrite+0x48>
 40287e4:	2940038f 	ldh	r5,14(r5)
 40287e8:	01c00084 	movi	r7,2
 40287ec:	000d883a 	mov	r6,zero
 40287f0:	402aa3c0 	call	402aa3c <_lseek_r>
 40287f4:	8080030b 	ldhu	r2,12(r16)
 40287f8:	8140038f 	ldh	r5,14(r16)
 40287fc:	10bbffcc 	andi	r2,r2,61439
 4028800:	980f883a 	mov	r7,r19
 4028804:	900d883a 	mov	r6,r18
 4028808:	8809883a 	mov	r4,r17
 402880c:	8080030d 	sth	r2,12(r16)
 4028810:	dfc00417 	ldw	ra,16(sp)
 4028814:	dcc00317 	ldw	r19,12(sp)
 4028818:	dc800217 	ldw	r18,8(sp)
 402881c:	dc400117 	ldw	r17,4(sp)
 4028820:	dc000017 	ldw	r16,0(sp)
 4028824:	dec00504 	addi	sp,sp,20
 4028828:	402a04c1 	jmpi	402a04c <_write_r>

0402882c <__sseek>:
 402882c:	defffe04 	addi	sp,sp,-8
 4028830:	dc000015 	stw	r16,0(sp)
 4028834:	2821883a 	mov	r16,r5
 4028838:	2940038f 	ldh	r5,14(r5)
 402883c:	dfc00115 	stw	ra,4(sp)
 4028840:	402aa3c0 	call	402aa3c <_lseek_r>
 4028844:	00ffffc4 	movi	r3,-1
 4028848:	10c00826 	beq	r2,r3,402886c <__sseek+0x40>
 402884c:	80c0030b 	ldhu	r3,12(r16)
 4028850:	80801415 	stw	r2,80(r16)
 4028854:	18c40014 	ori	r3,r3,4096
 4028858:	80c0030d 	sth	r3,12(r16)
 402885c:	dfc00117 	ldw	ra,4(sp)
 4028860:	dc000017 	ldw	r16,0(sp)
 4028864:	dec00204 	addi	sp,sp,8
 4028868:	f800283a 	ret
 402886c:	80c0030b 	ldhu	r3,12(r16)
 4028870:	18fbffcc 	andi	r3,r3,61439
 4028874:	80c0030d 	sth	r3,12(r16)
 4028878:	dfc00117 	ldw	ra,4(sp)
 402887c:	dc000017 	ldw	r16,0(sp)
 4028880:	dec00204 	addi	sp,sp,8
 4028884:	f800283a 	ret

04028888 <__sclose>:
 4028888:	2940038f 	ldh	r5,14(r5)
 402888c:	402a0ac1 	jmpi	402a0ac <_close_r>

04028890 <strcmp>:
 4028890:	2144b03a 	or	r2,r4,r5
 4028894:	108000cc 	andi	r2,r2,3
 4028898:	1000171e 	bne	r2,zero,40288f8 <strcmp+0x68>
 402889c:	20800017 	ldw	r2,0(r4)
 40288a0:	28c00017 	ldw	r3,0(r5)
 40288a4:	10c0141e 	bne	r2,r3,40288f8 <strcmp+0x68>
 40288a8:	027fbff4 	movhi	r9,65279
 40288ac:	4a7fbfc4 	addi	r9,r9,-257
 40288b0:	0086303a 	nor	r3,zero,r2
 40288b4:	02202074 	movhi	r8,32897
 40288b8:	1245883a 	add	r2,r2,r9
 40288bc:	42202004 	addi	r8,r8,-32640
 40288c0:	10c4703a 	and	r2,r2,r3
 40288c4:	1204703a 	and	r2,r2,r8
 40288c8:	10000226 	beq	r2,zero,40288d4 <strcmp+0x44>
 40288cc:	00002306 	br	402895c <strcmp+0xcc>
 40288d0:	1000221e 	bne	r2,zero,402895c <strcmp+0xcc>
 40288d4:	21000104 	addi	r4,r4,4
 40288d8:	20c00017 	ldw	r3,0(r4)
 40288dc:	29400104 	addi	r5,r5,4
 40288e0:	29800017 	ldw	r6,0(r5)
 40288e4:	1a4f883a 	add	r7,r3,r9
 40288e8:	00c4303a 	nor	r2,zero,r3
 40288ec:	3884703a 	and	r2,r7,r2
 40288f0:	1204703a 	and	r2,r2,r8
 40288f4:	19bff626 	beq	r3,r6,40288d0 <__alt_data_end+0xfffe88d0>
 40288f8:	20800003 	ldbu	r2,0(r4)
 40288fc:	10c03fcc 	andi	r3,r2,255
 4028900:	18c0201c 	xori	r3,r3,128
 4028904:	18ffe004 	addi	r3,r3,-128
 4028908:	18000c26 	beq	r3,zero,402893c <strcmp+0xac>
 402890c:	29800007 	ldb	r6,0(r5)
 4028910:	19800326 	beq	r3,r6,4028920 <strcmp+0x90>
 4028914:	00001306 	br	4028964 <strcmp+0xd4>
 4028918:	29800007 	ldb	r6,0(r5)
 402891c:	11800b1e 	bne	r2,r6,402894c <strcmp+0xbc>
 4028920:	21000044 	addi	r4,r4,1
 4028924:	20c00003 	ldbu	r3,0(r4)
 4028928:	29400044 	addi	r5,r5,1
 402892c:	18803fcc 	andi	r2,r3,255
 4028930:	1080201c 	xori	r2,r2,128
 4028934:	10bfe004 	addi	r2,r2,-128
 4028938:	103ff71e 	bne	r2,zero,4028918 <__alt_data_end+0xfffe8918>
 402893c:	0007883a 	mov	r3,zero
 4028940:	28800003 	ldbu	r2,0(r5)
 4028944:	1885c83a 	sub	r2,r3,r2
 4028948:	f800283a 	ret
 402894c:	28800003 	ldbu	r2,0(r5)
 4028950:	18c03fcc 	andi	r3,r3,255
 4028954:	1885c83a 	sub	r2,r3,r2
 4028958:	f800283a 	ret
 402895c:	0005883a 	mov	r2,zero
 4028960:	f800283a 	ret
 4028964:	10c03fcc 	andi	r3,r2,255
 4028968:	003ff506 	br	4028940 <__alt_data_end+0xfffe8940>

0402896c <strlen>:
 402896c:	208000cc 	andi	r2,r4,3
 4028970:	10002026 	beq	r2,zero,40289f4 <strlen+0x88>
 4028974:	20800007 	ldb	r2,0(r4)
 4028978:	10002026 	beq	r2,zero,40289fc <strlen+0x90>
 402897c:	2005883a 	mov	r2,r4
 4028980:	00000206 	br	402898c <strlen+0x20>
 4028984:	10c00007 	ldb	r3,0(r2)
 4028988:	18001826 	beq	r3,zero,40289ec <strlen+0x80>
 402898c:	10800044 	addi	r2,r2,1
 4028990:	10c000cc 	andi	r3,r2,3
 4028994:	183ffb1e 	bne	r3,zero,4028984 <__alt_data_end+0xfffe8984>
 4028998:	10c00017 	ldw	r3,0(r2)
 402899c:	01ffbff4 	movhi	r7,65279
 40289a0:	39ffbfc4 	addi	r7,r7,-257
 40289a4:	00ca303a 	nor	r5,zero,r3
 40289a8:	01a02074 	movhi	r6,32897
 40289ac:	19c7883a 	add	r3,r3,r7
 40289b0:	31a02004 	addi	r6,r6,-32640
 40289b4:	1946703a 	and	r3,r3,r5
 40289b8:	1986703a 	and	r3,r3,r6
 40289bc:	1800091e 	bne	r3,zero,40289e4 <strlen+0x78>
 40289c0:	10800104 	addi	r2,r2,4
 40289c4:	10c00017 	ldw	r3,0(r2)
 40289c8:	19cb883a 	add	r5,r3,r7
 40289cc:	00c6303a 	nor	r3,zero,r3
 40289d0:	28c6703a 	and	r3,r5,r3
 40289d4:	1986703a 	and	r3,r3,r6
 40289d8:	183ff926 	beq	r3,zero,40289c0 <__alt_data_end+0xfffe89c0>
 40289dc:	00000106 	br	40289e4 <strlen+0x78>
 40289e0:	10800044 	addi	r2,r2,1
 40289e4:	10c00007 	ldb	r3,0(r2)
 40289e8:	183ffd1e 	bne	r3,zero,40289e0 <__alt_data_end+0xfffe89e0>
 40289ec:	1105c83a 	sub	r2,r2,r4
 40289f0:	f800283a 	ret
 40289f4:	2005883a 	mov	r2,r4
 40289f8:	003fe706 	br	4028998 <__alt_data_end+0xfffe8998>
 40289fc:	0005883a 	mov	r2,zero
 4028a00:	f800283a 	ret

04028a04 <__sprint_r.part.0>:
 4028a04:	28801917 	ldw	r2,100(r5)
 4028a08:	defff604 	addi	sp,sp,-40
 4028a0c:	dd400515 	stw	r21,20(sp)
 4028a10:	dfc00915 	stw	ra,36(sp)
 4028a14:	df000815 	stw	fp,32(sp)
 4028a18:	ddc00715 	stw	r23,28(sp)
 4028a1c:	dd800615 	stw	r22,24(sp)
 4028a20:	dd000415 	stw	r20,16(sp)
 4028a24:	dcc00315 	stw	r19,12(sp)
 4028a28:	dc800215 	stw	r18,8(sp)
 4028a2c:	dc400115 	stw	r17,4(sp)
 4028a30:	dc000015 	stw	r16,0(sp)
 4028a34:	1088000c 	andi	r2,r2,8192
 4028a38:	302b883a 	mov	r21,r6
 4028a3c:	10002e26 	beq	r2,zero,4028af8 <__sprint_r.part.0+0xf4>
 4028a40:	30800217 	ldw	r2,8(r6)
 4028a44:	35800017 	ldw	r22,0(r6)
 4028a48:	10002926 	beq	r2,zero,4028af0 <__sprint_r.part.0+0xec>
 4028a4c:	2827883a 	mov	r19,r5
 4028a50:	2029883a 	mov	r20,r4
 4028a54:	b5c00104 	addi	r23,r22,4
 4028a58:	04bfffc4 	movi	r18,-1
 4028a5c:	bc400017 	ldw	r17,0(r23)
 4028a60:	b4000017 	ldw	r16,0(r22)
 4028a64:	0039883a 	mov	fp,zero
 4028a68:	8822d0ba 	srli	r17,r17,2
 4028a6c:	8800031e 	bne	r17,zero,4028a7c <__sprint_r.part.0+0x78>
 4028a70:	00001806 	br	4028ad4 <__sprint_r.part.0+0xd0>
 4028a74:	84000104 	addi	r16,r16,4
 4028a78:	8f001526 	beq	r17,fp,4028ad0 <__sprint_r.part.0+0xcc>
 4028a7c:	81400017 	ldw	r5,0(r16)
 4028a80:	980d883a 	mov	r6,r19
 4028a84:	a009883a 	mov	r4,r20
 4028a88:	402a42c0 	call	402a42c <_fputwc_r>
 4028a8c:	e7000044 	addi	fp,fp,1
 4028a90:	14bff81e 	bne	r2,r18,4028a74 <__alt_data_end+0xfffe8a74>
 4028a94:	9005883a 	mov	r2,r18
 4028a98:	a8000215 	stw	zero,8(r21)
 4028a9c:	a8000115 	stw	zero,4(r21)
 4028aa0:	dfc00917 	ldw	ra,36(sp)
 4028aa4:	df000817 	ldw	fp,32(sp)
 4028aa8:	ddc00717 	ldw	r23,28(sp)
 4028aac:	dd800617 	ldw	r22,24(sp)
 4028ab0:	dd400517 	ldw	r21,20(sp)
 4028ab4:	dd000417 	ldw	r20,16(sp)
 4028ab8:	dcc00317 	ldw	r19,12(sp)
 4028abc:	dc800217 	ldw	r18,8(sp)
 4028ac0:	dc400117 	ldw	r17,4(sp)
 4028ac4:	dc000017 	ldw	r16,0(sp)
 4028ac8:	dec00a04 	addi	sp,sp,40
 4028acc:	f800283a 	ret
 4028ad0:	a8800217 	ldw	r2,8(r21)
 4028ad4:	8c63883a 	add	r17,r17,r17
 4028ad8:	8c63883a 	add	r17,r17,r17
 4028adc:	1445c83a 	sub	r2,r2,r17
 4028ae0:	a8800215 	stw	r2,8(r21)
 4028ae4:	b5800204 	addi	r22,r22,8
 4028ae8:	bdc00204 	addi	r23,r23,8
 4028aec:	103fdb1e 	bne	r2,zero,4028a5c <__alt_data_end+0xfffe8a5c>
 4028af0:	0005883a 	mov	r2,zero
 4028af4:	003fe806 	br	4028a98 <__alt_data_end+0xfffe8a98>
 4028af8:	402a52c0 	call	402a52c <__sfvwrite_r>
 4028afc:	003fe606 	br	4028a98 <__alt_data_end+0xfffe8a98>

04028b00 <__sprint_r>:
 4028b00:	30c00217 	ldw	r3,8(r6)
 4028b04:	18000126 	beq	r3,zero,4028b0c <__sprint_r+0xc>
 4028b08:	4028a041 	jmpi	4028a04 <__sprint_r.part.0>
 4028b0c:	30000115 	stw	zero,4(r6)
 4028b10:	0005883a 	mov	r2,zero
 4028b14:	f800283a 	ret

04028b18 <___vfiprintf_internal_r>:
 4028b18:	deffc904 	addi	sp,sp,-220
 4028b1c:	df003515 	stw	fp,212(sp)
 4028b20:	dd003115 	stw	r20,196(sp)
 4028b24:	dfc03615 	stw	ra,216(sp)
 4028b28:	ddc03415 	stw	r23,208(sp)
 4028b2c:	dd803315 	stw	r22,204(sp)
 4028b30:	dd403215 	stw	r21,200(sp)
 4028b34:	dcc03015 	stw	r19,192(sp)
 4028b38:	dc802f15 	stw	r18,188(sp)
 4028b3c:	dc402e15 	stw	r17,184(sp)
 4028b40:	dc002d15 	stw	r16,180(sp)
 4028b44:	d9002015 	stw	r4,128(sp)
 4028b48:	d9c02215 	stw	r7,136(sp)
 4028b4c:	2829883a 	mov	r20,r5
 4028b50:	3039883a 	mov	fp,r6
 4028b54:	20000226 	beq	r4,zero,4028b60 <___vfiprintf_internal_r+0x48>
 4028b58:	20800e17 	ldw	r2,56(r4)
 4028b5c:	1000cf26 	beq	r2,zero,4028e9c <___vfiprintf_internal_r+0x384>
 4028b60:	a080030b 	ldhu	r2,12(r20)
 4028b64:	10c8000c 	andi	r3,r2,8192
 4028b68:	1800061e 	bne	r3,zero,4028b84 <___vfiprintf_internal_r+0x6c>
 4028b6c:	a1001917 	ldw	r4,100(r20)
 4028b70:	00f7ffc4 	movi	r3,-8193
 4028b74:	10880014 	ori	r2,r2,8192
 4028b78:	20c6703a 	and	r3,r4,r3
 4028b7c:	a080030d 	sth	r2,12(r20)
 4028b80:	a0c01915 	stw	r3,100(r20)
 4028b84:	10c0020c 	andi	r3,r2,8
 4028b88:	1800a926 	beq	r3,zero,4028e30 <___vfiprintf_internal_r+0x318>
 4028b8c:	a0c00417 	ldw	r3,16(r20)
 4028b90:	1800a726 	beq	r3,zero,4028e30 <___vfiprintf_internal_r+0x318>
 4028b94:	1080068c 	andi	r2,r2,26
 4028b98:	00c00284 	movi	r3,10
 4028b9c:	10c0ac26 	beq	r2,r3,4028e50 <___vfiprintf_internal_r+0x338>
 4028ba0:	da801a04 	addi	r10,sp,104
 4028ba4:	da801e15 	stw	r10,120(sp)
 4028ba8:	d8801e17 	ldw	r2,120(sp)
 4028bac:	da8019c4 	addi	r10,sp,103
 4028bb0:	058100f4 	movhi	r22,1027
 4028bb4:	05c100f4 	movhi	r23,1027
 4028bb8:	da801f15 	stw	r10,124(sp)
 4028bbc:	1295c83a 	sub	r10,r2,r10
 4028bc0:	b58ded04 	addi	r22,r22,14260
 4028bc4:	bdcde904 	addi	r23,r23,14244
 4028bc8:	dec01a15 	stw	sp,104(sp)
 4028bcc:	d8001c15 	stw	zero,112(sp)
 4028bd0:	d8001b15 	stw	zero,108(sp)
 4028bd4:	d8002615 	stw	zero,152(sp)
 4028bd8:	d8002315 	stw	zero,140(sp)
 4028bdc:	da802715 	stw	r10,156(sp)
 4028be0:	d811883a 	mov	r8,sp
 4028be4:	dd002115 	stw	r20,132(sp)
 4028be8:	e021883a 	mov	r16,fp
 4028bec:	80800007 	ldb	r2,0(r16)
 4028bf0:	1003ea26 	beq	r2,zero,4029b9c <___vfiprintf_internal_r+0x1084>
 4028bf4:	00c00944 	movi	r3,37
 4028bf8:	8025883a 	mov	r18,r16
 4028bfc:	10c0021e 	bne	r2,r3,4028c08 <___vfiprintf_internal_r+0xf0>
 4028c00:	00001606 	br	4028c5c <___vfiprintf_internal_r+0x144>
 4028c04:	10c00326 	beq	r2,r3,4028c14 <___vfiprintf_internal_r+0xfc>
 4028c08:	94800044 	addi	r18,r18,1
 4028c0c:	90800007 	ldb	r2,0(r18)
 4028c10:	103ffc1e 	bne	r2,zero,4028c04 <__alt_data_end+0xfffe8c04>
 4028c14:	9423c83a 	sub	r17,r18,r16
 4028c18:	88001026 	beq	r17,zero,4028c5c <___vfiprintf_internal_r+0x144>
 4028c1c:	d8c01c17 	ldw	r3,112(sp)
 4028c20:	d8801b17 	ldw	r2,108(sp)
 4028c24:	44000015 	stw	r16,0(r8)
 4028c28:	88c7883a 	add	r3,r17,r3
 4028c2c:	10800044 	addi	r2,r2,1
 4028c30:	44400115 	stw	r17,4(r8)
 4028c34:	d8c01c15 	stw	r3,112(sp)
 4028c38:	d8801b15 	stw	r2,108(sp)
 4028c3c:	010001c4 	movi	r4,7
 4028c40:	2080760e 	bge	r4,r2,4028e1c <___vfiprintf_internal_r+0x304>
 4028c44:	1803821e 	bne	r3,zero,4029a50 <___vfiprintf_internal_r+0xf38>
 4028c48:	da802317 	ldw	r10,140(sp)
 4028c4c:	d8001b15 	stw	zero,108(sp)
 4028c50:	d811883a 	mov	r8,sp
 4028c54:	5455883a 	add	r10,r10,r17
 4028c58:	da802315 	stw	r10,140(sp)
 4028c5c:	90800007 	ldb	r2,0(r18)
 4028c60:	10044626 	beq	r2,zero,4029d7c <___vfiprintf_internal_r+0x1264>
 4028c64:	90c00047 	ldb	r3,1(r18)
 4028c68:	94000044 	addi	r16,r18,1
 4028c6c:	d8001d85 	stb	zero,118(sp)
 4028c70:	0009883a 	mov	r4,zero
 4028c74:	000f883a 	mov	r7,zero
 4028c78:	027fffc4 	movi	r9,-1
 4028c7c:	0023883a 	mov	r17,zero
 4028c80:	0029883a 	mov	r20,zero
 4028c84:	01401604 	movi	r5,88
 4028c88:	01800244 	movi	r6,9
 4028c8c:	03400a84 	movi	r13,42
 4028c90:	03001b04 	movi	r12,108
 4028c94:	84000044 	addi	r16,r16,1
 4028c98:	18bff804 	addi	r2,r3,-32
 4028c9c:	28827336 	bltu	r5,r2,402966c <___vfiprintf_internal_r+0xb54>
 4028ca0:	100490ba 	slli	r2,r2,2
 4028ca4:	028100f4 	movhi	r10,1027
 4028ca8:	52a32e04 	addi	r10,r10,-29512
 4028cac:	1285883a 	add	r2,r2,r10
 4028cb0:	10800017 	ldw	r2,0(r2)
 4028cb4:	1000683a 	jmp	r2
 4028cb8:	040293a0 	cmpeqi	r16,zero,2638
 4028cbc:	0402966c 	andhi	r16,zero,2649
 4028cc0:	0402966c 	andhi	r16,zero,2649
 4028cc4:	040293c0 	call	40293c <__alt_mem_sdram_controller_2+0x40293c>
 4028cc8:	0402966c 	andhi	r16,zero,2649
 4028ccc:	0402966c 	andhi	r16,zero,2649
 4028cd0:	0402966c 	andhi	r16,zero,2649
 4028cd4:	0402966c 	andhi	r16,zero,2649
 4028cd8:	0402966c 	andhi	r16,zero,2649
 4028cdc:	0402966c 	andhi	r16,zero,2649
 4028ce0:	040295a8 	cmpgeui	r16,zero,2646
 4028ce4:	040295c4 	movi	r16,2647
 4028ce8:	0402966c 	andhi	r16,zero,2649
 4028cec:	04028eac 	andhi	r16,zero,2618
 4028cf0:	040295d4 	movui	r16,2647
 4028cf4:	0402966c 	andhi	r16,zero,2649
 4028cf8:	040293cc 	andi	r16,zero,2639
 4028cfc:	040293d8 	cmpnei	r16,zero,2639
 4028d00:	040293d8 	cmpnei	r16,zero,2639
 4028d04:	040293d8 	cmpnei	r16,zero,2639
 4028d08:	040293d8 	cmpnei	r16,zero,2639
 4028d0c:	040293d8 	cmpnei	r16,zero,2639
 4028d10:	040293d8 	cmpnei	r16,zero,2639
 4028d14:	040293d8 	cmpnei	r16,zero,2639
 4028d18:	040293d8 	cmpnei	r16,zero,2639
 4028d1c:	040293d8 	cmpnei	r16,zero,2639
 4028d20:	0402966c 	andhi	r16,zero,2649
 4028d24:	0402966c 	andhi	r16,zero,2649
 4028d28:	0402966c 	andhi	r16,zero,2649
 4028d2c:	0402966c 	andhi	r16,zero,2649
 4028d30:	0402966c 	andhi	r16,zero,2649
 4028d34:	0402966c 	andhi	r16,zero,2649
 4028d38:	0402966c 	andhi	r16,zero,2649
 4028d3c:	0402966c 	andhi	r16,zero,2649
 4028d40:	0402966c 	andhi	r16,zero,2649
 4028d44:	0402966c 	andhi	r16,zero,2649
 4028d48:	04029404 	movi	r16,2640
 4028d4c:	0402966c 	andhi	r16,zero,2649
 4028d50:	0402966c 	andhi	r16,zero,2649
 4028d54:	0402966c 	andhi	r16,zero,2649
 4028d58:	0402966c 	andhi	r16,zero,2649
 4028d5c:	0402966c 	andhi	r16,zero,2649
 4028d60:	0402966c 	andhi	r16,zero,2649
 4028d64:	0402966c 	andhi	r16,zero,2649
 4028d68:	0402966c 	andhi	r16,zero,2649
 4028d6c:	0402966c 	andhi	r16,zero,2649
 4028d70:	0402966c 	andhi	r16,zero,2649
 4028d74:	0402943c 	xorhi	r16,zero,2640
 4028d78:	0402966c 	andhi	r16,zero,2649
 4028d7c:	0402966c 	andhi	r16,zero,2649
 4028d80:	0402966c 	andhi	r16,zero,2649
 4028d84:	0402966c 	andhi	r16,zero,2649
 4028d88:	0402966c 	andhi	r16,zero,2649
 4028d8c:	04029494 	movui	r16,2642
 4028d90:	0402966c 	andhi	r16,zero,2649
 4028d94:	0402966c 	andhi	r16,zero,2649
 4028d98:	04029504 	movi	r16,2644
 4028d9c:	0402966c 	andhi	r16,zero,2649
 4028da0:	0402966c 	andhi	r16,zero,2649
 4028da4:	0402966c 	andhi	r16,zero,2649
 4028da8:	0402966c 	andhi	r16,zero,2649
 4028dac:	0402966c 	andhi	r16,zero,2649
 4028db0:	0402966c 	andhi	r16,zero,2649
 4028db4:	0402966c 	andhi	r16,zero,2649
 4028db8:	0402966c 	andhi	r16,zero,2649
 4028dbc:	0402966c 	andhi	r16,zero,2649
 4028dc0:	0402966c 	andhi	r16,zero,2649
 4028dc4:	040292b0 	cmpltui	r16,zero,2634
 4028dc8:	040292dc 	xori	r16,zero,2635
 4028dcc:	0402966c 	andhi	r16,zero,2649
 4028dd0:	0402966c 	andhi	r16,zero,2649
 4028dd4:	0402966c 	andhi	r16,zero,2649
 4028dd8:	04029614 	movui	r16,2648
 4028ddc:	040292dc 	xori	r16,zero,2635
 4028de0:	0402966c 	andhi	r16,zero,2649
 4028de4:	0402966c 	andhi	r16,zero,2649
 4028de8:	04029170 	cmpltui	r16,zero,2629
 4028dec:	0402966c 	andhi	r16,zero,2649
 4028df0:	04029180 	call	402918 <__alt_mem_sdram_controller_2+0x402918>
 4028df4:	040291bc 	xorhi	r16,zero,2630
 4028df8:	04028eb8 	rdprs	r16,zero,2618
 4028dfc:	04029164 	muli	r16,zero,2629
 4028e00:	0402966c 	andhi	r16,zero,2649
 4028e04:	04029540 	call	402954 <__alt_mem_sdram_controller_2+0x402954>
 4028e08:	0402966c 	andhi	r16,zero,2649
 4028e0c:	04029598 	cmpnei	r16,zero,2646
 4028e10:	0402966c 	andhi	r16,zero,2649
 4028e14:	0402966c 	andhi	r16,zero,2649
 4028e18:	0402925c 	xori	r16,zero,2633
 4028e1c:	42000204 	addi	r8,r8,8
 4028e20:	da802317 	ldw	r10,140(sp)
 4028e24:	5455883a 	add	r10,r10,r17
 4028e28:	da802315 	stw	r10,140(sp)
 4028e2c:	003f8b06 	br	4028c5c <__alt_data_end+0xfffe8c5c>
 4028e30:	d9002017 	ldw	r4,128(sp)
 4028e34:	a00b883a 	mov	r5,r20
 4028e38:	40242b80 	call	40242b8 <__swsetup_r>
 4028e3c:	1003b11e 	bne	r2,zero,4029d04 <___vfiprintf_internal_r+0x11ec>
 4028e40:	a080030b 	ldhu	r2,12(r20)
 4028e44:	00c00284 	movi	r3,10
 4028e48:	1080068c 	andi	r2,r2,26
 4028e4c:	10ff541e 	bne	r2,r3,4028ba0 <__alt_data_end+0xfffe8ba0>
 4028e50:	a080038f 	ldh	r2,14(r20)
 4028e54:	103f5216 	blt	r2,zero,4028ba0 <__alt_data_end+0xfffe8ba0>
 4028e58:	d9c02217 	ldw	r7,136(sp)
 4028e5c:	d9002017 	ldw	r4,128(sp)
 4028e60:	e00d883a 	mov	r6,fp
 4028e64:	a00b883a 	mov	r5,r20
 4028e68:	4029f900 	call	4029f90 <__sbprintf>
 4028e6c:	dfc03617 	ldw	ra,216(sp)
 4028e70:	df003517 	ldw	fp,212(sp)
 4028e74:	ddc03417 	ldw	r23,208(sp)
 4028e78:	dd803317 	ldw	r22,204(sp)
 4028e7c:	dd403217 	ldw	r21,200(sp)
 4028e80:	dd003117 	ldw	r20,196(sp)
 4028e84:	dcc03017 	ldw	r19,192(sp)
 4028e88:	dc802f17 	ldw	r18,188(sp)
 4028e8c:	dc402e17 	ldw	r17,184(sp)
 4028e90:	dc002d17 	ldw	r16,180(sp)
 4028e94:	dec03704 	addi	sp,sp,220
 4028e98:	f800283a 	ret
 4028e9c:	402628c0 	call	402628c <__sinit>
 4028ea0:	003f2f06 	br	4028b60 <__alt_data_end+0xfffe8b60>
 4028ea4:	0463c83a 	sub	r17,zero,r17
 4028ea8:	d8802215 	stw	r2,136(sp)
 4028eac:	a5000114 	ori	r20,r20,4
 4028eb0:	80c00007 	ldb	r3,0(r16)
 4028eb4:	003f7706 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4028eb8:	00800c04 	movi	r2,48
 4028ebc:	da802217 	ldw	r10,136(sp)
 4028ec0:	d8801d05 	stb	r2,116(sp)
 4028ec4:	00801e04 	movi	r2,120
 4028ec8:	d8801d45 	stb	r2,117(sp)
 4028ecc:	d8001d85 	stb	zero,118(sp)
 4028ed0:	50c00104 	addi	r3,r10,4
 4028ed4:	54800017 	ldw	r18,0(r10)
 4028ed8:	0027883a 	mov	r19,zero
 4028edc:	a0800094 	ori	r2,r20,2
 4028ee0:	48030b16 	blt	r9,zero,4029b10 <___vfiprintf_internal_r+0xff8>
 4028ee4:	00bfdfc4 	movi	r2,-129
 4028ee8:	a096703a 	and	r11,r20,r2
 4028eec:	d8c02215 	stw	r3,136(sp)
 4028ef0:	5d000094 	ori	r20,r11,2
 4028ef4:	90032b1e 	bne	r18,zero,4029ba4 <___vfiprintf_internal_r+0x108c>
 4028ef8:	008100f4 	movhi	r2,1027
 4028efc:	108d8804 	addi	r2,r2,13856
 4028f00:	d8802615 	stw	r2,152(sp)
 4028f04:	0039883a 	mov	fp,zero
 4028f08:	48017b1e 	bne	r9,zero,40294f8 <___vfiprintf_internal_r+0x9e0>
 4028f0c:	0013883a 	mov	r9,zero
 4028f10:	0027883a 	mov	r19,zero
 4028f14:	dd401a04 	addi	r21,sp,104
 4028f18:	4825883a 	mov	r18,r9
 4028f1c:	4cc0010e 	bge	r9,r19,4028f24 <___vfiprintf_internal_r+0x40c>
 4028f20:	9825883a 	mov	r18,r19
 4028f24:	e7003fcc 	andi	fp,fp,255
 4028f28:	e700201c 	xori	fp,fp,128
 4028f2c:	e73fe004 	addi	fp,fp,-128
 4028f30:	e0000126 	beq	fp,zero,4028f38 <___vfiprintf_internal_r+0x420>
 4028f34:	94800044 	addi	r18,r18,1
 4028f38:	a380008c 	andi	r14,r20,2
 4028f3c:	70000126 	beq	r14,zero,4028f44 <___vfiprintf_internal_r+0x42c>
 4028f40:	94800084 	addi	r18,r18,2
 4028f44:	a700210c 	andi	fp,r20,132
 4028f48:	e001df1e 	bne	fp,zero,40296c8 <___vfiprintf_internal_r+0xbb0>
 4028f4c:	8c87c83a 	sub	r3,r17,r18
 4028f50:	00c1dd0e 	bge	zero,r3,40296c8 <___vfiprintf_internal_r+0xbb0>
 4028f54:	01c00404 	movi	r7,16
 4028f58:	d8801c17 	ldw	r2,112(sp)
 4028f5c:	38c3ad0e 	bge	r7,r3,4029e14 <___vfiprintf_internal_r+0x12fc>
 4028f60:	028100f4 	movhi	r10,1027
 4028f64:	528ded04 	addi	r10,r10,14260
 4028f68:	dc002915 	stw	r16,164(sp)
 4028f6c:	d9801b17 	ldw	r6,108(sp)
 4028f70:	da802415 	stw	r10,144(sp)
 4028f74:	03c001c4 	movi	r15,7
 4028f78:	da402515 	stw	r9,148(sp)
 4028f7c:	db802815 	stw	r14,160(sp)
 4028f80:	1821883a 	mov	r16,r3
 4028f84:	00000506 	br	4028f9c <___vfiprintf_internal_r+0x484>
 4028f88:	31400084 	addi	r5,r6,2
 4028f8c:	42000204 	addi	r8,r8,8
 4028f90:	200d883a 	mov	r6,r4
 4028f94:	843ffc04 	addi	r16,r16,-16
 4028f98:	3c000d0e 	bge	r7,r16,4028fd0 <___vfiprintf_internal_r+0x4b8>
 4028f9c:	10800404 	addi	r2,r2,16
 4028fa0:	31000044 	addi	r4,r6,1
 4028fa4:	45800015 	stw	r22,0(r8)
 4028fa8:	41c00115 	stw	r7,4(r8)
 4028fac:	d8801c15 	stw	r2,112(sp)
 4028fb0:	d9001b15 	stw	r4,108(sp)
 4028fb4:	793ff40e 	bge	r15,r4,4028f88 <__alt_data_end+0xfffe8f88>
 4028fb8:	1001b51e 	bne	r2,zero,4029690 <___vfiprintf_internal_r+0xb78>
 4028fbc:	843ffc04 	addi	r16,r16,-16
 4028fc0:	000d883a 	mov	r6,zero
 4028fc4:	01400044 	movi	r5,1
 4028fc8:	d811883a 	mov	r8,sp
 4028fcc:	3c3ff316 	blt	r7,r16,4028f9c <__alt_data_end+0xfffe8f9c>
 4028fd0:	8007883a 	mov	r3,r16
 4028fd4:	da402517 	ldw	r9,148(sp)
 4028fd8:	db802817 	ldw	r14,160(sp)
 4028fdc:	dc002917 	ldw	r16,164(sp)
 4028fe0:	da802417 	ldw	r10,144(sp)
 4028fe4:	1885883a 	add	r2,r3,r2
 4028fe8:	40c00115 	stw	r3,4(r8)
 4028fec:	42800015 	stw	r10,0(r8)
 4028ff0:	d8801c15 	stw	r2,112(sp)
 4028ff4:	d9401b15 	stw	r5,108(sp)
 4028ff8:	00c001c4 	movi	r3,7
 4028ffc:	19426016 	blt	r3,r5,4029980 <___vfiprintf_internal_r+0xe68>
 4029000:	d8c01d87 	ldb	r3,118(sp)
 4029004:	42000204 	addi	r8,r8,8
 4029008:	29000044 	addi	r4,r5,1
 402900c:	1801b31e 	bne	r3,zero,40296dc <___vfiprintf_internal_r+0xbc4>
 4029010:	7001c026 	beq	r14,zero,4029714 <___vfiprintf_internal_r+0xbfc>
 4029014:	d8c01d04 	addi	r3,sp,116
 4029018:	10800084 	addi	r2,r2,2
 402901c:	40c00015 	stw	r3,0(r8)
 4029020:	00c00084 	movi	r3,2
 4029024:	40c00115 	stw	r3,4(r8)
 4029028:	d8801c15 	stw	r2,112(sp)
 402902c:	d9001b15 	stw	r4,108(sp)
 4029030:	00c001c4 	movi	r3,7
 4029034:	1902650e 	bge	r3,r4,40299cc <___vfiprintf_internal_r+0xeb4>
 4029038:	10029a1e 	bne	r2,zero,4029aa4 <___vfiprintf_internal_r+0xf8c>
 402903c:	00c02004 	movi	r3,128
 4029040:	01000044 	movi	r4,1
 4029044:	000b883a 	mov	r5,zero
 4029048:	d811883a 	mov	r8,sp
 402904c:	e0c1b31e 	bne	fp,r3,402971c <___vfiprintf_internal_r+0xc04>
 4029050:	8cb9c83a 	sub	fp,r17,r18
 4029054:	0701b10e 	bge	zero,fp,402971c <___vfiprintf_internal_r+0xc04>
 4029058:	01c00404 	movi	r7,16
 402905c:	3f03890e 	bge	r7,fp,4029e84 <___vfiprintf_internal_r+0x136c>
 4029060:	00c100f4 	movhi	r3,1027
 4029064:	18cde904 	addi	r3,r3,14244
 4029068:	d8c02415 	stw	r3,144(sp)
 402906c:	8007883a 	mov	r3,r16
 4029070:	034001c4 	movi	r13,7
 4029074:	e021883a 	mov	r16,fp
 4029078:	da402515 	stw	r9,148(sp)
 402907c:	1839883a 	mov	fp,r3
 4029080:	00000506 	br	4029098 <___vfiprintf_internal_r+0x580>
 4029084:	29800084 	addi	r6,r5,2
 4029088:	42000204 	addi	r8,r8,8
 402908c:	180b883a 	mov	r5,r3
 4029090:	843ffc04 	addi	r16,r16,-16
 4029094:	3c000d0e 	bge	r7,r16,40290cc <___vfiprintf_internal_r+0x5b4>
 4029098:	10800404 	addi	r2,r2,16
 402909c:	28c00044 	addi	r3,r5,1
 40290a0:	45c00015 	stw	r23,0(r8)
 40290a4:	41c00115 	stw	r7,4(r8)
 40290a8:	d8801c15 	stw	r2,112(sp)
 40290ac:	d8c01b15 	stw	r3,108(sp)
 40290b0:	68fff40e 	bge	r13,r3,4029084 <__alt_data_end+0xfffe9084>
 40290b4:	1002241e 	bne	r2,zero,4029948 <___vfiprintf_internal_r+0xe30>
 40290b8:	843ffc04 	addi	r16,r16,-16
 40290bc:	01800044 	movi	r6,1
 40290c0:	000b883a 	mov	r5,zero
 40290c4:	d811883a 	mov	r8,sp
 40290c8:	3c3ff316 	blt	r7,r16,4029098 <__alt_data_end+0xfffe9098>
 40290cc:	da402517 	ldw	r9,148(sp)
 40290d0:	e007883a 	mov	r3,fp
 40290d4:	8039883a 	mov	fp,r16
 40290d8:	1821883a 	mov	r16,r3
 40290dc:	d8c02417 	ldw	r3,144(sp)
 40290e0:	1705883a 	add	r2,r2,fp
 40290e4:	47000115 	stw	fp,4(r8)
 40290e8:	40c00015 	stw	r3,0(r8)
 40290ec:	d8801c15 	stw	r2,112(sp)
 40290f0:	d9801b15 	stw	r6,108(sp)
 40290f4:	00c001c4 	movi	r3,7
 40290f8:	19827616 	blt	r3,r6,4029ad4 <___vfiprintf_internal_r+0xfbc>
 40290fc:	4cf9c83a 	sub	fp,r9,r19
 4029100:	42000204 	addi	r8,r8,8
 4029104:	31000044 	addi	r4,r6,1
 4029108:	300b883a 	mov	r5,r6
 402910c:	07018516 	blt	zero,fp,4029724 <___vfiprintf_internal_r+0xc0c>
 4029110:	9885883a 	add	r2,r19,r2
 4029114:	45400015 	stw	r21,0(r8)
 4029118:	44c00115 	stw	r19,4(r8)
 402911c:	d8801c15 	stw	r2,112(sp)
 4029120:	d9001b15 	stw	r4,108(sp)
 4029124:	00c001c4 	movi	r3,7
 4029128:	1901dd0e 	bge	r3,r4,40298a0 <___vfiprintf_internal_r+0xd88>
 402912c:	1002401e 	bne	r2,zero,4029a30 <___vfiprintf_internal_r+0xf18>
 4029130:	d8001b15 	stw	zero,108(sp)
 4029134:	a2c0010c 	andi	r11,r20,4
 4029138:	58000226 	beq	r11,zero,4029144 <___vfiprintf_internal_r+0x62c>
 402913c:	8ca7c83a 	sub	r19,r17,r18
 4029140:	04c2f216 	blt	zero,r19,4029d0c <___vfiprintf_internal_r+0x11f4>
 4029144:	8c80010e 	bge	r17,r18,402914c <___vfiprintf_internal_r+0x634>
 4029148:	9023883a 	mov	r17,r18
 402914c:	da802317 	ldw	r10,140(sp)
 4029150:	5455883a 	add	r10,r10,r17
 4029154:	da802315 	stw	r10,140(sp)
 4029158:	d8001b15 	stw	zero,108(sp)
 402915c:	d811883a 	mov	r8,sp
 4029160:	003ea206 	br	4028bec <__alt_data_end+0xfffe8bec>
 4029164:	a5000814 	ori	r20,r20,32
 4029168:	80c00007 	ldb	r3,0(r16)
 402916c:	003ec906 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029170:	80c00007 	ldb	r3,0(r16)
 4029174:	1b030926 	beq	r3,r12,4029d9c <___vfiprintf_internal_r+0x1284>
 4029178:	a5000414 	ori	r20,r20,16
 402917c:	003ec506 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029180:	21003fcc 	andi	r4,r4,255
 4029184:	20035e1e 	bne	r4,zero,4029f00 <___vfiprintf_internal_r+0x13e8>
 4029188:	a080080c 	andi	r2,r20,32
 402918c:	1002a526 	beq	r2,zero,4029c24 <___vfiprintf_internal_r+0x110c>
 4029190:	da802217 	ldw	r10,136(sp)
 4029194:	50800017 	ldw	r2,0(r10)
 4029198:	da802317 	ldw	r10,140(sp)
 402919c:	5007d7fa 	srai	r3,r10,31
 40291a0:	da802217 	ldw	r10,136(sp)
 40291a4:	10c00115 	stw	r3,4(r2)
 40291a8:	52800104 	addi	r10,r10,4
 40291ac:	da802215 	stw	r10,136(sp)
 40291b0:	da802317 	ldw	r10,140(sp)
 40291b4:	12800015 	stw	r10,0(r2)
 40291b8:	003e8c06 	br	4028bec <__alt_data_end+0xfffe8bec>
 40291bc:	21003fcc 	andi	r4,r4,255
 40291c0:	2003511e 	bne	r4,zero,4029f08 <___vfiprintf_internal_r+0x13f0>
 40291c4:	a080080c 	andi	r2,r20,32
 40291c8:	1000a126 	beq	r2,zero,4029450 <___vfiprintf_internal_r+0x938>
 40291cc:	da802217 	ldw	r10,136(sp)
 40291d0:	d8001d85 	stb	zero,118(sp)
 40291d4:	50800204 	addi	r2,r10,8
 40291d8:	54800017 	ldw	r18,0(r10)
 40291dc:	54c00117 	ldw	r19,4(r10)
 40291e0:	4802b416 	blt	r9,zero,4029cb4 <___vfiprintf_internal_r+0x119c>
 40291e4:	013fdfc4 	movi	r4,-129
 40291e8:	94c6b03a 	or	r3,r18,r19
 40291ec:	d8802215 	stw	r2,136(sp)
 40291f0:	a128703a 	and	r20,r20,r4
 40291f4:	1800a226 	beq	r3,zero,4029480 <___vfiprintf_internal_r+0x968>
 40291f8:	0039883a 	mov	fp,zero
 40291fc:	dd401a04 	addi	r21,sp,104
 4029200:	9006d0fa 	srli	r3,r18,3
 4029204:	9808977a 	slli	r4,r19,29
 4029208:	9826d0fa 	srli	r19,r19,3
 402920c:	948001cc 	andi	r18,r18,7
 4029210:	90800c04 	addi	r2,r18,48
 4029214:	ad7fffc4 	addi	r21,r21,-1
 4029218:	20e4b03a 	or	r18,r4,r3
 402921c:	a8800005 	stb	r2,0(r21)
 4029220:	94c6b03a 	or	r3,r18,r19
 4029224:	183ff61e 	bne	r3,zero,4029200 <__alt_data_end+0xfffe9200>
 4029228:	a0c0004c 	andi	r3,r20,1
 402922c:	18005926 	beq	r3,zero,4029394 <___vfiprintf_internal_r+0x87c>
 4029230:	10803fcc 	andi	r2,r2,255
 4029234:	1080201c 	xori	r2,r2,128
 4029238:	10bfe004 	addi	r2,r2,-128
 402923c:	00c00c04 	movi	r3,48
 4029240:	10c05426 	beq	r2,r3,4029394 <___vfiprintf_internal_r+0x87c>
 4029244:	da801e17 	ldw	r10,120(sp)
 4029248:	a8bfffc4 	addi	r2,r21,-1
 402924c:	a8ffffc5 	stb	r3,-1(r21)
 4029250:	50a7c83a 	sub	r19,r10,r2
 4029254:	102b883a 	mov	r21,r2
 4029258:	003f2f06 	br	4028f18 <__alt_data_end+0xfffe8f18>
 402925c:	21003fcc 	andi	r4,r4,255
 4029260:	2003421e 	bne	r4,zero,4029f6c <___vfiprintf_internal_r+0x1454>
 4029264:	008100f4 	movhi	r2,1027
 4029268:	108d8804 	addi	r2,r2,13856
 402926c:	d8802615 	stw	r2,152(sp)
 4029270:	a080080c 	andi	r2,r20,32
 4029274:	1000aa26 	beq	r2,zero,4029520 <___vfiprintf_internal_r+0xa08>
 4029278:	da802217 	ldw	r10,136(sp)
 402927c:	54800017 	ldw	r18,0(r10)
 4029280:	54c00117 	ldw	r19,4(r10)
 4029284:	52800204 	addi	r10,r10,8
 4029288:	da802215 	stw	r10,136(sp)
 402928c:	a080004c 	andi	r2,r20,1
 4029290:	1001d226 	beq	r2,zero,40299dc <___vfiprintf_internal_r+0xec4>
 4029294:	94c4b03a 	or	r2,r18,r19
 4029298:	1002351e 	bne	r2,zero,4029b70 <___vfiprintf_internal_r+0x1058>
 402929c:	d8001d85 	stb	zero,118(sp)
 40292a0:	48022216 	blt	r9,zero,4029b2c <___vfiprintf_internal_r+0x1014>
 40292a4:	00bfdfc4 	movi	r2,-129
 40292a8:	a0a8703a 	and	r20,r20,r2
 40292ac:	003f1506 	br	4028f04 <__alt_data_end+0xfffe8f04>
 40292b0:	da802217 	ldw	r10,136(sp)
 40292b4:	04800044 	movi	r18,1
 40292b8:	d8001d85 	stb	zero,118(sp)
 40292bc:	50800017 	ldw	r2,0(r10)
 40292c0:	52800104 	addi	r10,r10,4
 40292c4:	da802215 	stw	r10,136(sp)
 40292c8:	d8801005 	stb	r2,64(sp)
 40292cc:	9027883a 	mov	r19,r18
 40292d0:	dd401004 	addi	r21,sp,64
 40292d4:	0013883a 	mov	r9,zero
 40292d8:	003f1706 	br	4028f38 <__alt_data_end+0xfffe8f38>
 40292dc:	21003fcc 	andi	r4,r4,255
 40292e0:	2003201e 	bne	r4,zero,4029f64 <___vfiprintf_internal_r+0x144c>
 40292e4:	a080080c 	andi	r2,r20,32
 40292e8:	10004b26 	beq	r2,zero,4029418 <___vfiprintf_internal_r+0x900>
 40292ec:	da802217 	ldw	r10,136(sp)
 40292f0:	50800117 	ldw	r2,4(r10)
 40292f4:	54800017 	ldw	r18,0(r10)
 40292f8:	52800204 	addi	r10,r10,8
 40292fc:	da802215 	stw	r10,136(sp)
 4029300:	1027883a 	mov	r19,r2
 4029304:	10022c16 	blt	r2,zero,4029bb8 <___vfiprintf_internal_r+0x10a0>
 4029308:	df001d83 	ldbu	fp,118(sp)
 402930c:	48007216 	blt	r9,zero,40294d8 <___vfiprintf_internal_r+0x9c0>
 4029310:	00ffdfc4 	movi	r3,-129
 4029314:	94c4b03a 	or	r2,r18,r19
 4029318:	a0e8703a 	and	r20,r20,r3
 402931c:	1000cc26 	beq	r2,zero,4029650 <___vfiprintf_internal_r+0xb38>
 4029320:	98021026 	beq	r19,zero,4029b64 <___vfiprintf_internal_r+0x104c>
 4029324:	dc402415 	stw	r17,144(sp)
 4029328:	dc002515 	stw	r16,148(sp)
 402932c:	9823883a 	mov	r17,r19
 4029330:	9021883a 	mov	r16,r18
 4029334:	dd401a04 	addi	r21,sp,104
 4029338:	4825883a 	mov	r18,r9
 402933c:	4027883a 	mov	r19,r8
 4029340:	8009883a 	mov	r4,r16
 4029344:	880b883a 	mov	r5,r17
 4029348:	01800284 	movi	r6,10
 402934c:	000f883a 	mov	r7,zero
 4029350:	402ba740 	call	402ba74 <__umoddi3>
 4029354:	10800c04 	addi	r2,r2,48
 4029358:	ad7fffc4 	addi	r21,r21,-1
 402935c:	8009883a 	mov	r4,r16
 4029360:	880b883a 	mov	r5,r17
 4029364:	a8800005 	stb	r2,0(r21)
 4029368:	01800284 	movi	r6,10
 402936c:	000f883a 	mov	r7,zero
 4029370:	402b4fc0 	call	402b4fc <__udivdi3>
 4029374:	1021883a 	mov	r16,r2
 4029378:	10c4b03a 	or	r2,r2,r3
 402937c:	1823883a 	mov	r17,r3
 4029380:	103fef1e 	bne	r2,zero,4029340 <__alt_data_end+0xfffe9340>
 4029384:	dc402417 	ldw	r17,144(sp)
 4029388:	dc002517 	ldw	r16,148(sp)
 402938c:	9013883a 	mov	r9,r18
 4029390:	9811883a 	mov	r8,r19
 4029394:	da801e17 	ldw	r10,120(sp)
 4029398:	5567c83a 	sub	r19,r10,r21
 402939c:	003ede06 	br	4028f18 <__alt_data_end+0xfffe8f18>
 40293a0:	38803fcc 	andi	r2,r7,255
 40293a4:	1080201c 	xori	r2,r2,128
 40293a8:	10bfe004 	addi	r2,r2,-128
 40293ac:	1002371e 	bne	r2,zero,4029c8c <___vfiprintf_internal_r+0x1174>
 40293b0:	01000044 	movi	r4,1
 40293b4:	01c00804 	movi	r7,32
 40293b8:	80c00007 	ldb	r3,0(r16)
 40293bc:	003e3506 	br	4028c94 <__alt_data_end+0xfffe8c94>
 40293c0:	a5000054 	ori	r20,r20,1
 40293c4:	80c00007 	ldb	r3,0(r16)
 40293c8:	003e3206 	br	4028c94 <__alt_data_end+0xfffe8c94>
 40293cc:	a5002014 	ori	r20,r20,128
 40293d0:	80c00007 	ldb	r3,0(r16)
 40293d4:	003e2f06 	br	4028c94 <__alt_data_end+0xfffe8c94>
 40293d8:	8015883a 	mov	r10,r16
 40293dc:	0023883a 	mov	r17,zero
 40293e0:	18bff404 	addi	r2,r3,-48
 40293e4:	50c00007 	ldb	r3,0(r10)
 40293e8:	8c4002a4 	muli	r17,r17,10
 40293ec:	84000044 	addi	r16,r16,1
 40293f0:	8015883a 	mov	r10,r16
 40293f4:	1463883a 	add	r17,r2,r17
 40293f8:	18bff404 	addi	r2,r3,-48
 40293fc:	30bff92e 	bgeu	r6,r2,40293e4 <__alt_data_end+0xfffe93e4>
 4029400:	003e2506 	br	4028c98 <__alt_data_end+0xfffe8c98>
 4029404:	21003fcc 	andi	r4,r4,255
 4029408:	2002d41e 	bne	r4,zero,4029f5c <___vfiprintf_internal_r+0x1444>
 402940c:	a5000414 	ori	r20,r20,16
 4029410:	a080080c 	andi	r2,r20,32
 4029414:	103fb51e 	bne	r2,zero,40292ec <__alt_data_end+0xfffe92ec>
 4029418:	a080040c 	andi	r2,r20,16
 402941c:	1001f826 	beq	r2,zero,4029c00 <___vfiprintf_internal_r+0x10e8>
 4029420:	da802217 	ldw	r10,136(sp)
 4029424:	54800017 	ldw	r18,0(r10)
 4029428:	52800104 	addi	r10,r10,4
 402942c:	da802215 	stw	r10,136(sp)
 4029430:	9027d7fa 	srai	r19,r18,31
 4029434:	9805883a 	mov	r2,r19
 4029438:	003fb206 	br	4029304 <__alt_data_end+0xfffe9304>
 402943c:	21003fcc 	andi	r4,r4,255
 4029440:	2002c41e 	bne	r4,zero,4029f54 <___vfiprintf_internal_r+0x143c>
 4029444:	a5000414 	ori	r20,r20,16
 4029448:	a080080c 	andi	r2,r20,32
 402944c:	103f5f1e 	bne	r2,zero,40291cc <__alt_data_end+0xfffe91cc>
 4029450:	a080040c 	andi	r2,r20,16
 4029454:	10020f26 	beq	r2,zero,4029c94 <___vfiprintf_internal_r+0x117c>
 4029458:	da802217 	ldw	r10,136(sp)
 402945c:	d8001d85 	stb	zero,118(sp)
 4029460:	0027883a 	mov	r19,zero
 4029464:	50800104 	addi	r2,r10,4
 4029468:	54800017 	ldw	r18,0(r10)
 402946c:	48021116 	blt	r9,zero,4029cb4 <___vfiprintf_internal_r+0x119c>
 4029470:	00ffdfc4 	movi	r3,-129
 4029474:	d8802215 	stw	r2,136(sp)
 4029478:	a0e8703a 	and	r20,r20,r3
 402947c:	903f5e1e 	bne	r18,zero,40291f8 <__alt_data_end+0xfffe91f8>
 4029480:	0039883a 	mov	fp,zero
 4029484:	4802a626 	beq	r9,zero,4029f20 <___vfiprintf_internal_r+0x1408>
 4029488:	0025883a 	mov	r18,zero
 402948c:	0027883a 	mov	r19,zero
 4029490:	003f5a06 	br	40291fc <__alt_data_end+0xfffe91fc>
 4029494:	21003fcc 	andi	r4,r4,255
 4029498:	20029f1e 	bne	r4,zero,4029f18 <___vfiprintf_internal_r+0x1400>
 402949c:	a5000414 	ori	r20,r20,16
 40294a0:	a080080c 	andi	r2,r20,32
 40294a4:	10005e1e 	bne	r2,zero,4029620 <___vfiprintf_internal_r+0xb08>
 40294a8:	a080040c 	andi	r2,r20,16
 40294ac:	1001a21e 	bne	r2,zero,4029b38 <___vfiprintf_internal_r+0x1020>
 40294b0:	a080100c 	andi	r2,r20,64
 40294b4:	d8001d85 	stb	zero,118(sp)
 40294b8:	da802217 	ldw	r10,136(sp)
 40294bc:	1002231e 	bne	r2,zero,4029d4c <___vfiprintf_internal_r+0x1234>
 40294c0:	50800104 	addi	r2,r10,4
 40294c4:	54800017 	ldw	r18,0(r10)
 40294c8:	0027883a 	mov	r19,zero
 40294cc:	4801a00e 	bge	r9,zero,4029b50 <___vfiprintf_internal_r+0x1038>
 40294d0:	d8802215 	stw	r2,136(sp)
 40294d4:	0039883a 	mov	fp,zero
 40294d8:	94c4b03a 	or	r2,r18,r19
 40294dc:	103f901e 	bne	r2,zero,4029320 <__alt_data_end+0xfffe9320>
 40294e0:	00800044 	movi	r2,1
 40294e4:	10803fcc 	andi	r2,r2,255
 40294e8:	00c00044 	movi	r3,1
 40294ec:	10c05926 	beq	r2,r3,4029654 <___vfiprintf_internal_r+0xb3c>
 40294f0:	00c00084 	movi	r3,2
 40294f4:	10ffe41e 	bne	r2,r3,4029488 <__alt_data_end+0xfffe9488>
 40294f8:	0025883a 	mov	r18,zero
 40294fc:	0027883a 	mov	r19,zero
 4029500:	00013d06 	br	40299f8 <___vfiprintf_internal_r+0xee0>
 4029504:	21003fcc 	andi	r4,r4,255
 4029508:	2002811e 	bne	r4,zero,4029f10 <___vfiprintf_internal_r+0x13f8>
 402950c:	008100f4 	movhi	r2,1027
 4029510:	108d8304 	addi	r2,r2,13836
 4029514:	d8802615 	stw	r2,152(sp)
 4029518:	a080080c 	andi	r2,r20,32
 402951c:	103f561e 	bne	r2,zero,4029278 <__alt_data_end+0xfffe9278>
 4029520:	a080040c 	andi	r2,r20,16
 4029524:	1001d126 	beq	r2,zero,4029c6c <___vfiprintf_internal_r+0x1154>
 4029528:	da802217 	ldw	r10,136(sp)
 402952c:	0027883a 	mov	r19,zero
 4029530:	54800017 	ldw	r18,0(r10)
 4029534:	52800104 	addi	r10,r10,4
 4029538:	da802215 	stw	r10,136(sp)
 402953c:	003f5306 	br	402928c <__alt_data_end+0xfffe928c>
 4029540:	da802217 	ldw	r10,136(sp)
 4029544:	d8001d85 	stb	zero,118(sp)
 4029548:	55400017 	ldw	r21,0(r10)
 402954c:	50c00104 	addi	r3,r10,4
 4029550:	a8024226 	beq	r21,zero,4029e5c <___vfiprintf_internal_r+0x1344>
 4029554:	48021816 	blt	r9,zero,4029db8 <___vfiprintf_internal_r+0x12a0>
 4029558:	480d883a 	mov	r6,r9
 402955c:	000b883a 	mov	r5,zero
 4029560:	a809883a 	mov	r4,r21
 4029564:	d8c02a15 	stw	r3,168(sp)
 4029568:	da002b15 	stw	r8,172(sp)
 402956c:	da402c15 	stw	r9,176(sp)
 4029570:	402733c0 	call	402733c <memchr>
 4029574:	d8c02a17 	ldw	r3,168(sp)
 4029578:	da002b17 	ldw	r8,172(sp)
 402957c:	da402c17 	ldw	r9,176(sp)
 4029580:	10024826 	beq	r2,zero,4029ea4 <___vfiprintf_internal_r+0x138c>
 4029584:	1567c83a 	sub	r19,r2,r21
 4029588:	df001d83 	ldbu	fp,118(sp)
 402958c:	d8c02215 	stw	r3,136(sp)
 4029590:	0013883a 	mov	r9,zero
 4029594:	003e6006 	br	4028f18 <__alt_data_end+0xfffe8f18>
 4029598:	21003fcc 	andi	r4,r4,255
 402959c:	203fc026 	beq	r4,zero,40294a0 <__alt_data_end+0xfffe94a0>
 40295a0:	d9c01d85 	stb	r7,118(sp)
 40295a4:	003fbe06 	br	40294a0 <__alt_data_end+0xfffe94a0>
 40295a8:	da802217 	ldw	r10,136(sp)
 40295ac:	54400017 	ldw	r17,0(r10)
 40295b0:	50800104 	addi	r2,r10,4
 40295b4:	883e3b16 	blt	r17,zero,4028ea4 <__alt_data_end+0xfffe8ea4>
 40295b8:	d8802215 	stw	r2,136(sp)
 40295bc:	80c00007 	ldb	r3,0(r16)
 40295c0:	003db406 	br	4028c94 <__alt_data_end+0xfffe8c94>
 40295c4:	01000044 	movi	r4,1
 40295c8:	01c00ac4 	movi	r7,43
 40295cc:	80c00007 	ldb	r3,0(r16)
 40295d0:	003db006 	br	4028c94 <__alt_data_end+0xfffe8c94>
 40295d4:	80c00007 	ldb	r3,0(r16)
 40295d8:	82800044 	addi	r10,r16,1
 40295dc:	1b423c26 	beq	r3,r13,4029ed0 <___vfiprintf_internal_r+0x13b8>
 40295e0:	18bff404 	addi	r2,r3,-48
 40295e4:	0013883a 	mov	r9,zero
 40295e8:	30822b36 	bltu	r6,r2,4029e98 <___vfiprintf_internal_r+0x1380>
 40295ec:	50c00007 	ldb	r3,0(r10)
 40295f0:	4a4002a4 	muli	r9,r9,10
 40295f4:	54000044 	addi	r16,r10,1
 40295f8:	8015883a 	mov	r10,r16
 40295fc:	4893883a 	add	r9,r9,r2
 4029600:	18bff404 	addi	r2,r3,-48
 4029604:	30bff92e 	bgeu	r6,r2,40295ec <__alt_data_end+0xfffe95ec>
 4029608:	483da30e 	bge	r9,zero,4028c98 <__alt_data_end+0xfffe8c98>
 402960c:	027fffc4 	movi	r9,-1
 4029610:	003da106 	br	4028c98 <__alt_data_end+0xfffe8c98>
 4029614:	a5001014 	ori	r20,r20,64
 4029618:	80c00007 	ldb	r3,0(r16)
 402961c:	003d9d06 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029620:	da802217 	ldw	r10,136(sp)
 4029624:	d8001d85 	stb	zero,118(sp)
 4029628:	50c00204 	addi	r3,r10,8
 402962c:	54800017 	ldw	r18,0(r10)
 4029630:	54c00117 	ldw	r19,4(r10)
 4029634:	4801ca16 	blt	r9,zero,4029d60 <___vfiprintf_internal_r+0x1248>
 4029638:	013fdfc4 	movi	r4,-129
 402963c:	94c4b03a 	or	r2,r18,r19
 4029640:	d8c02215 	stw	r3,136(sp)
 4029644:	a128703a 	and	r20,r20,r4
 4029648:	0039883a 	mov	fp,zero
 402964c:	103f341e 	bne	r2,zero,4029320 <__alt_data_end+0xfffe9320>
 4029650:	483e2e26 	beq	r9,zero,4028f0c <__alt_data_end+0xfffe8f0c>
 4029654:	0025883a 	mov	r18,zero
 4029658:	94800c04 	addi	r18,r18,48
 402965c:	dc8019c5 	stb	r18,103(sp)
 4029660:	dcc02717 	ldw	r19,156(sp)
 4029664:	dd4019c4 	addi	r21,sp,103
 4029668:	003e2b06 	br	4028f18 <__alt_data_end+0xfffe8f18>
 402966c:	21003fcc 	andi	r4,r4,255
 4029670:	2002361e 	bne	r4,zero,4029f4c <___vfiprintf_internal_r+0x1434>
 4029674:	1801c126 	beq	r3,zero,4029d7c <___vfiprintf_internal_r+0x1264>
 4029678:	04800044 	movi	r18,1
 402967c:	d8c01005 	stb	r3,64(sp)
 4029680:	d8001d85 	stb	zero,118(sp)
 4029684:	9027883a 	mov	r19,r18
 4029688:	dd401004 	addi	r21,sp,64
 402968c:	003f1106 	br	40292d4 <__alt_data_end+0xfffe92d4>
 4029690:	d9402117 	ldw	r5,132(sp)
 4029694:	d9002017 	ldw	r4,128(sp)
 4029698:	d9801a04 	addi	r6,sp,104
 402969c:	d9c02b15 	stw	r7,172(sp)
 40296a0:	dbc02a15 	stw	r15,168(sp)
 40296a4:	4028a040 	call	4028a04 <__sprint_r.part.0>
 40296a8:	d9c02b17 	ldw	r7,172(sp)
 40296ac:	dbc02a17 	ldw	r15,168(sp)
 40296b0:	10006d1e 	bne	r2,zero,4029868 <___vfiprintf_internal_r+0xd50>
 40296b4:	d9801b17 	ldw	r6,108(sp)
 40296b8:	d8801c17 	ldw	r2,112(sp)
 40296bc:	d811883a 	mov	r8,sp
 40296c0:	31400044 	addi	r5,r6,1
 40296c4:	003e3306 	br	4028f94 <__alt_data_end+0xfffe8f94>
 40296c8:	d9401b17 	ldw	r5,108(sp)
 40296cc:	d8801c17 	ldw	r2,112(sp)
 40296d0:	29000044 	addi	r4,r5,1
 40296d4:	d8c01d87 	ldb	r3,118(sp)
 40296d8:	183e4d26 	beq	r3,zero,4029010 <__alt_data_end+0xfffe9010>
 40296dc:	00c00044 	movi	r3,1
 40296e0:	d9401d84 	addi	r5,sp,118
 40296e4:	10c5883a 	add	r2,r2,r3
 40296e8:	41400015 	stw	r5,0(r8)
 40296ec:	40c00115 	stw	r3,4(r8)
 40296f0:	d8801c15 	stw	r2,112(sp)
 40296f4:	d9001b15 	stw	r4,108(sp)
 40296f8:	014001c4 	movi	r5,7
 40296fc:	2900a90e 	bge	r5,r4,40299a4 <___vfiprintf_internal_r+0xe8c>
 4029700:	1000da1e 	bne	r2,zero,4029a6c <___vfiprintf_internal_r+0xf54>
 4029704:	7000ab1e 	bne	r14,zero,40299b4 <___vfiprintf_internal_r+0xe9c>
 4029708:	000b883a 	mov	r5,zero
 402970c:	1809883a 	mov	r4,r3
 4029710:	d811883a 	mov	r8,sp
 4029714:	00c02004 	movi	r3,128
 4029718:	e0fe4d26 	beq	fp,r3,4029050 <__alt_data_end+0xfffe9050>
 402971c:	4cf9c83a 	sub	fp,r9,r19
 4029720:	073e7b0e 	bge	zero,fp,4029110 <__alt_data_end+0xfffe9110>
 4029724:	01c00404 	movi	r7,16
 4029728:	3f01900e 	bge	r7,fp,4029d6c <___vfiprintf_internal_r+0x1254>
 402972c:	00c100f4 	movhi	r3,1027
 4029730:	18cde904 	addi	r3,r3,14244
 4029734:	d8c02415 	stw	r3,144(sp)
 4029738:	034001c4 	movi	r13,7
 402973c:	00000506 	br	4029754 <___vfiprintf_internal_r+0xc3c>
 4029740:	29000084 	addi	r4,r5,2
 4029744:	42000204 	addi	r8,r8,8
 4029748:	180b883a 	mov	r5,r3
 402974c:	e73ffc04 	addi	fp,fp,-16
 4029750:	3f000d0e 	bge	r7,fp,4029788 <___vfiprintf_internal_r+0xc70>
 4029754:	10800404 	addi	r2,r2,16
 4029758:	28c00044 	addi	r3,r5,1
 402975c:	45c00015 	stw	r23,0(r8)
 4029760:	41c00115 	stw	r7,4(r8)
 4029764:	d8801c15 	stw	r2,112(sp)
 4029768:	d8c01b15 	stw	r3,108(sp)
 402976c:	68fff40e 	bge	r13,r3,4029740 <__alt_data_end+0xfffe9740>
 4029770:	1000101e 	bne	r2,zero,40297b4 <___vfiprintf_internal_r+0xc9c>
 4029774:	e73ffc04 	addi	fp,fp,-16
 4029778:	01000044 	movi	r4,1
 402977c:	000b883a 	mov	r5,zero
 4029780:	d811883a 	mov	r8,sp
 4029784:	3f3ff316 	blt	r7,fp,4029754 <__alt_data_end+0xfffe9754>
 4029788:	da802417 	ldw	r10,144(sp)
 402978c:	1705883a 	add	r2,r2,fp
 4029790:	47000115 	stw	fp,4(r8)
 4029794:	42800015 	stw	r10,0(r8)
 4029798:	d8801c15 	stw	r2,112(sp)
 402979c:	d9001b15 	stw	r4,108(sp)
 40297a0:	00c001c4 	movi	r3,7
 40297a4:	19003616 	blt	r3,r4,4029880 <___vfiprintf_internal_r+0xd68>
 40297a8:	42000204 	addi	r8,r8,8
 40297ac:	21000044 	addi	r4,r4,1
 40297b0:	003e5706 	br	4029110 <__alt_data_end+0xfffe9110>
 40297b4:	d9402117 	ldw	r5,132(sp)
 40297b8:	d9002017 	ldw	r4,128(sp)
 40297bc:	d9801a04 	addi	r6,sp,104
 40297c0:	d9c02b15 	stw	r7,172(sp)
 40297c4:	db402a15 	stw	r13,168(sp)
 40297c8:	4028a040 	call	4028a04 <__sprint_r.part.0>
 40297cc:	d9c02b17 	ldw	r7,172(sp)
 40297d0:	db402a17 	ldw	r13,168(sp)
 40297d4:	1000241e 	bne	r2,zero,4029868 <___vfiprintf_internal_r+0xd50>
 40297d8:	d9401b17 	ldw	r5,108(sp)
 40297dc:	d8801c17 	ldw	r2,112(sp)
 40297e0:	d811883a 	mov	r8,sp
 40297e4:	29000044 	addi	r4,r5,1
 40297e8:	003fd806 	br	402974c <__alt_data_end+0xfffe974c>
 40297ec:	d9401b17 	ldw	r5,108(sp)
 40297f0:	00c100f4 	movhi	r3,1027
 40297f4:	18cded04 	addi	r3,r3,14260
 40297f8:	d8c02415 	stw	r3,144(sp)
 40297fc:	29400044 	addi	r5,r5,1
 4029800:	d8c02417 	ldw	r3,144(sp)
 4029804:	14c5883a 	add	r2,r2,r19
 4029808:	44c00115 	stw	r19,4(r8)
 402980c:	40c00015 	stw	r3,0(r8)
 4029810:	d8801c15 	stw	r2,112(sp)
 4029814:	d9401b15 	stw	r5,108(sp)
 4029818:	00c001c4 	movi	r3,7
 402981c:	1940070e 	bge	r3,r5,402983c <___vfiprintf_internal_r+0xd24>
 4029820:	103e4826 	beq	r2,zero,4029144 <__alt_data_end+0xfffe9144>
 4029824:	d9402117 	ldw	r5,132(sp)
 4029828:	d9002017 	ldw	r4,128(sp)
 402982c:	d9801a04 	addi	r6,sp,104
 4029830:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029834:	10000c1e 	bne	r2,zero,4029868 <___vfiprintf_internal_r+0xd50>
 4029838:	d8801c17 	ldw	r2,112(sp)
 402983c:	8c80010e 	bge	r17,r18,4029844 <___vfiprintf_internal_r+0xd2c>
 4029840:	9023883a 	mov	r17,r18
 4029844:	da802317 	ldw	r10,140(sp)
 4029848:	5455883a 	add	r10,r10,r17
 402984c:	da802315 	stw	r10,140(sp)
 4029850:	103e4126 	beq	r2,zero,4029158 <__alt_data_end+0xfffe9158>
 4029854:	d9402117 	ldw	r5,132(sp)
 4029858:	d9002017 	ldw	r4,128(sp)
 402985c:	d9801a04 	addi	r6,sp,104
 4029860:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029864:	103e3c26 	beq	r2,zero,4029158 <__alt_data_end+0xfffe9158>
 4029868:	dd002117 	ldw	r20,132(sp)
 402986c:	a080030b 	ldhu	r2,12(r20)
 4029870:	1080100c 	andi	r2,r2,64
 4029874:	1001231e 	bne	r2,zero,4029d04 <___vfiprintf_internal_r+0x11ec>
 4029878:	d8802317 	ldw	r2,140(sp)
 402987c:	003d7b06 	br	4028e6c <__alt_data_end+0xfffe8e6c>
 4029880:	1000991e 	bne	r2,zero,4029ae8 <___vfiprintf_internal_r+0xfd0>
 4029884:	00c00044 	movi	r3,1
 4029888:	9805883a 	mov	r2,r19
 402988c:	dd400015 	stw	r21,0(sp)
 4029890:	dcc00115 	stw	r19,4(sp)
 4029894:	dcc01c15 	stw	r19,112(sp)
 4029898:	d8c01b15 	stw	r3,108(sp)
 402989c:	d811883a 	mov	r8,sp
 40298a0:	42000204 	addi	r8,r8,8
 40298a4:	a2c0010c 	andi	r11,r20,4
 40298a8:	583fe426 	beq	r11,zero,402983c <__alt_data_end+0xfffe983c>
 40298ac:	8ca7c83a 	sub	r19,r17,r18
 40298b0:	04ffe20e 	bge	zero,r19,402983c <__alt_data_end+0xfffe983c>
 40298b4:	01c00404 	movi	r7,16
 40298b8:	3cffcc0e 	bge	r7,r19,40297ec <__alt_data_end+0xfffe97ec>
 40298bc:	028100f4 	movhi	r10,1027
 40298c0:	528ded04 	addi	r10,r10,14260
 40298c4:	d9001b17 	ldw	r4,108(sp)
 40298c8:	da802415 	stw	r10,144(sp)
 40298cc:	382b883a 	mov	r21,r7
 40298d0:	050001c4 	movi	r20,7
 40298d4:	df002017 	ldw	fp,128(sp)
 40298d8:	00000506 	br	40298f0 <___vfiprintf_internal_r+0xdd8>
 40298dc:	21400084 	addi	r5,r4,2
 40298e0:	42000204 	addi	r8,r8,8
 40298e4:	1809883a 	mov	r4,r3
 40298e8:	9cfffc04 	addi	r19,r19,-16
 40298ec:	acffc40e 	bge	r21,r19,4029800 <__alt_data_end+0xfffe9800>
 40298f0:	10800404 	addi	r2,r2,16
 40298f4:	20c00044 	addi	r3,r4,1
 40298f8:	45800015 	stw	r22,0(r8)
 40298fc:	45400115 	stw	r21,4(r8)
 4029900:	d8801c15 	stw	r2,112(sp)
 4029904:	d8c01b15 	stw	r3,108(sp)
 4029908:	a0fff40e 	bge	r20,r3,40298dc <__alt_data_end+0xfffe98dc>
 402990c:	1000041e 	bne	r2,zero,4029920 <___vfiprintf_internal_r+0xe08>
 4029910:	01400044 	movi	r5,1
 4029914:	0009883a 	mov	r4,zero
 4029918:	d811883a 	mov	r8,sp
 402991c:	003ff206 	br	40298e8 <__alt_data_end+0xfffe98e8>
 4029920:	d9402117 	ldw	r5,132(sp)
 4029924:	d9801a04 	addi	r6,sp,104
 4029928:	e009883a 	mov	r4,fp
 402992c:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029930:	103fcd1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029934:	d9001b17 	ldw	r4,108(sp)
 4029938:	d8801c17 	ldw	r2,112(sp)
 402993c:	d811883a 	mov	r8,sp
 4029940:	21400044 	addi	r5,r4,1
 4029944:	003fe806 	br	40298e8 <__alt_data_end+0xfffe98e8>
 4029948:	d9402117 	ldw	r5,132(sp)
 402994c:	d9002017 	ldw	r4,128(sp)
 4029950:	d9801a04 	addi	r6,sp,104
 4029954:	d9c02b15 	stw	r7,172(sp)
 4029958:	db402a15 	stw	r13,168(sp)
 402995c:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029960:	d9c02b17 	ldw	r7,172(sp)
 4029964:	db402a17 	ldw	r13,168(sp)
 4029968:	103fbf1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 402996c:	d9401b17 	ldw	r5,108(sp)
 4029970:	d8801c17 	ldw	r2,112(sp)
 4029974:	d811883a 	mov	r8,sp
 4029978:	29800044 	addi	r6,r5,1
 402997c:	003dc406 	br	4029090 <__alt_data_end+0xfffe9090>
 4029980:	1000d21e 	bne	r2,zero,4029ccc <___vfiprintf_internal_r+0x11b4>
 4029984:	d8c01d87 	ldb	r3,118(sp)
 4029988:	18009526 	beq	r3,zero,4029be0 <___vfiprintf_internal_r+0x10c8>
 402998c:	00800044 	movi	r2,1
 4029990:	d8c01d84 	addi	r3,sp,118
 4029994:	1009883a 	mov	r4,r2
 4029998:	d8c00015 	stw	r3,0(sp)
 402999c:	d8800115 	stw	r2,4(sp)
 40299a0:	d811883a 	mov	r8,sp
 40299a4:	200b883a 	mov	r5,r4
 40299a8:	42000204 	addi	r8,r8,8
 40299ac:	21000044 	addi	r4,r4,1
 40299b0:	003d9706 	br	4029010 <__alt_data_end+0xfffe9010>
 40299b4:	d9001d04 	addi	r4,sp,116
 40299b8:	00800084 	movi	r2,2
 40299bc:	d9000015 	stw	r4,0(sp)
 40299c0:	d8800115 	stw	r2,4(sp)
 40299c4:	1809883a 	mov	r4,r3
 40299c8:	d811883a 	mov	r8,sp
 40299cc:	200b883a 	mov	r5,r4
 40299d0:	42000204 	addi	r8,r8,8
 40299d4:	21000044 	addi	r4,r4,1
 40299d8:	003f4e06 	br	4029714 <__alt_data_end+0xfffe9714>
 40299dc:	d8001d85 	stb	zero,118(sp)
 40299e0:	48005016 	blt	r9,zero,4029b24 <___vfiprintf_internal_r+0x100c>
 40299e4:	00ffdfc4 	movi	r3,-129
 40299e8:	94c4b03a 	or	r2,r18,r19
 40299ec:	a0e8703a 	and	r20,r20,r3
 40299f0:	103d4426 	beq	r2,zero,4028f04 <__alt_data_end+0xfffe8f04>
 40299f4:	0039883a 	mov	fp,zero
 40299f8:	d9002617 	ldw	r4,152(sp)
 40299fc:	dd401a04 	addi	r21,sp,104
 4029a00:	908003cc 	andi	r2,r18,15
 4029a04:	9806973a 	slli	r3,r19,28
 4029a08:	2085883a 	add	r2,r4,r2
 4029a0c:	9024d13a 	srli	r18,r18,4
 4029a10:	10800003 	ldbu	r2,0(r2)
 4029a14:	9826d13a 	srli	r19,r19,4
 4029a18:	ad7fffc4 	addi	r21,r21,-1
 4029a1c:	1ca4b03a 	or	r18,r3,r18
 4029a20:	a8800005 	stb	r2,0(r21)
 4029a24:	94c4b03a 	or	r2,r18,r19
 4029a28:	103ff51e 	bne	r2,zero,4029a00 <__alt_data_end+0xfffe9a00>
 4029a2c:	003e5906 	br	4029394 <__alt_data_end+0xfffe9394>
 4029a30:	d9402117 	ldw	r5,132(sp)
 4029a34:	d9002017 	ldw	r4,128(sp)
 4029a38:	d9801a04 	addi	r6,sp,104
 4029a3c:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029a40:	103f891e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029a44:	d8801c17 	ldw	r2,112(sp)
 4029a48:	d811883a 	mov	r8,sp
 4029a4c:	003f9506 	br	40298a4 <__alt_data_end+0xfffe98a4>
 4029a50:	d9402117 	ldw	r5,132(sp)
 4029a54:	d9002017 	ldw	r4,128(sp)
 4029a58:	d9801a04 	addi	r6,sp,104
 4029a5c:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029a60:	103f811e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029a64:	d811883a 	mov	r8,sp
 4029a68:	003ced06 	br	4028e20 <__alt_data_end+0xfffe8e20>
 4029a6c:	d9402117 	ldw	r5,132(sp)
 4029a70:	d9002017 	ldw	r4,128(sp)
 4029a74:	d9801a04 	addi	r6,sp,104
 4029a78:	da402c15 	stw	r9,176(sp)
 4029a7c:	db802a15 	stw	r14,168(sp)
 4029a80:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029a84:	da402c17 	ldw	r9,176(sp)
 4029a88:	db802a17 	ldw	r14,168(sp)
 4029a8c:	103f761e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029a90:	d9401b17 	ldw	r5,108(sp)
 4029a94:	d8801c17 	ldw	r2,112(sp)
 4029a98:	d811883a 	mov	r8,sp
 4029a9c:	29000044 	addi	r4,r5,1
 4029aa0:	003d5b06 	br	4029010 <__alt_data_end+0xfffe9010>
 4029aa4:	d9402117 	ldw	r5,132(sp)
 4029aa8:	d9002017 	ldw	r4,128(sp)
 4029aac:	d9801a04 	addi	r6,sp,104
 4029ab0:	da402c15 	stw	r9,176(sp)
 4029ab4:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029ab8:	da402c17 	ldw	r9,176(sp)
 4029abc:	103f6a1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029ac0:	d9401b17 	ldw	r5,108(sp)
 4029ac4:	d8801c17 	ldw	r2,112(sp)
 4029ac8:	d811883a 	mov	r8,sp
 4029acc:	29000044 	addi	r4,r5,1
 4029ad0:	003f1006 	br	4029714 <__alt_data_end+0xfffe9714>
 4029ad4:	1000c31e 	bne	r2,zero,4029de4 <___vfiprintf_internal_r+0x12cc>
 4029ad8:	01000044 	movi	r4,1
 4029adc:	000b883a 	mov	r5,zero
 4029ae0:	d811883a 	mov	r8,sp
 4029ae4:	003f0d06 	br	402971c <__alt_data_end+0xfffe971c>
 4029ae8:	d9402117 	ldw	r5,132(sp)
 4029aec:	d9002017 	ldw	r4,128(sp)
 4029af0:	d9801a04 	addi	r6,sp,104
 4029af4:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029af8:	103f5b1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029afc:	d9001b17 	ldw	r4,108(sp)
 4029b00:	d8801c17 	ldw	r2,112(sp)
 4029b04:	d811883a 	mov	r8,sp
 4029b08:	21000044 	addi	r4,r4,1
 4029b0c:	003d8006 	br	4029110 <__alt_data_end+0xfffe9110>
 4029b10:	010100f4 	movhi	r4,1027
 4029b14:	210d8804 	addi	r4,r4,13856
 4029b18:	d9002615 	stw	r4,152(sp)
 4029b1c:	d8c02215 	stw	r3,136(sp)
 4029b20:	1029883a 	mov	r20,r2
 4029b24:	94c4b03a 	or	r2,r18,r19
 4029b28:	103fb21e 	bne	r2,zero,40299f4 <__alt_data_end+0xfffe99f4>
 4029b2c:	0039883a 	mov	fp,zero
 4029b30:	00800084 	movi	r2,2
 4029b34:	003e6b06 	br	40294e4 <__alt_data_end+0xfffe94e4>
 4029b38:	da802217 	ldw	r10,136(sp)
 4029b3c:	d8001d85 	stb	zero,118(sp)
 4029b40:	0027883a 	mov	r19,zero
 4029b44:	50800104 	addi	r2,r10,4
 4029b48:	54800017 	ldw	r18,0(r10)
 4029b4c:	483e6016 	blt	r9,zero,40294d0 <__alt_data_end+0xfffe94d0>
 4029b50:	00ffdfc4 	movi	r3,-129
 4029b54:	d8802215 	stw	r2,136(sp)
 4029b58:	a0e8703a 	and	r20,r20,r3
 4029b5c:	0039883a 	mov	fp,zero
 4029b60:	903ebb26 	beq	r18,zero,4029650 <__alt_data_end+0xfffe9650>
 4029b64:	00800244 	movi	r2,9
 4029b68:	14bdee36 	bltu	r2,r18,4029324 <__alt_data_end+0xfffe9324>
 4029b6c:	003eba06 	br	4029658 <__alt_data_end+0xfffe9658>
 4029b70:	00800c04 	movi	r2,48
 4029b74:	d8c01d45 	stb	r3,117(sp)
 4029b78:	d8801d05 	stb	r2,116(sp)
 4029b7c:	d8001d85 	stb	zero,118(sp)
 4029b80:	a0c00094 	ori	r3,r20,2
 4029b84:	4800a916 	blt	r9,zero,4029e2c <___vfiprintf_internal_r+0x1314>
 4029b88:	00bfdfc4 	movi	r2,-129
 4029b8c:	a096703a 	and	r11,r20,r2
 4029b90:	5d000094 	ori	r20,r11,2
 4029b94:	0039883a 	mov	fp,zero
 4029b98:	003f9706 	br	40299f8 <__alt_data_end+0xfffe99f8>
 4029b9c:	8025883a 	mov	r18,r16
 4029ba0:	003c2e06 	br	4028c5c <__alt_data_end+0xfffe8c5c>
 4029ba4:	008100f4 	movhi	r2,1027
 4029ba8:	108d8804 	addi	r2,r2,13856
 4029bac:	0039883a 	mov	fp,zero
 4029bb0:	d8802615 	stw	r2,152(sp)
 4029bb4:	003f9006 	br	40299f8 <__alt_data_end+0xfffe99f8>
 4029bb8:	04a5c83a 	sub	r18,zero,r18
 4029bbc:	07000b44 	movi	fp,45
 4029bc0:	9004c03a 	cmpne	r2,r18,zero
 4029bc4:	04e7c83a 	sub	r19,zero,r19
 4029bc8:	df001d85 	stb	fp,118(sp)
 4029bcc:	98a7c83a 	sub	r19,r19,r2
 4029bd0:	48009f16 	blt	r9,zero,4029e50 <___vfiprintf_internal_r+0x1338>
 4029bd4:	00bfdfc4 	movi	r2,-129
 4029bd8:	a0a8703a 	and	r20,r20,r2
 4029bdc:	003dd006 	br	4029320 <__alt_data_end+0xfffe9320>
 4029be0:	70004c26 	beq	r14,zero,4029d14 <___vfiprintf_internal_r+0x11fc>
 4029be4:	00800084 	movi	r2,2
 4029be8:	d8c01d04 	addi	r3,sp,116
 4029bec:	d8c00015 	stw	r3,0(sp)
 4029bf0:	d8800115 	stw	r2,4(sp)
 4029bf4:	01000044 	movi	r4,1
 4029bf8:	d811883a 	mov	r8,sp
 4029bfc:	003f7306 	br	40299cc <__alt_data_end+0xfffe99cc>
 4029c00:	a080100c 	andi	r2,r20,64
 4029c04:	da802217 	ldw	r10,136(sp)
 4029c08:	103e0626 	beq	r2,zero,4029424 <__alt_data_end+0xfffe9424>
 4029c0c:	5480000f 	ldh	r18,0(r10)
 4029c10:	52800104 	addi	r10,r10,4
 4029c14:	da802215 	stw	r10,136(sp)
 4029c18:	9027d7fa 	srai	r19,r18,31
 4029c1c:	9805883a 	mov	r2,r19
 4029c20:	003db806 	br	4029304 <__alt_data_end+0xfffe9304>
 4029c24:	a080040c 	andi	r2,r20,16
 4029c28:	1000091e 	bne	r2,zero,4029c50 <___vfiprintf_internal_r+0x1138>
 4029c2c:	a2c0100c 	andi	r11,r20,64
 4029c30:	58000726 	beq	r11,zero,4029c50 <___vfiprintf_internal_r+0x1138>
 4029c34:	da802217 	ldw	r10,136(sp)
 4029c38:	50800017 	ldw	r2,0(r10)
 4029c3c:	52800104 	addi	r10,r10,4
 4029c40:	da802215 	stw	r10,136(sp)
 4029c44:	da802317 	ldw	r10,140(sp)
 4029c48:	1280000d 	sth	r10,0(r2)
 4029c4c:	003be706 	br	4028bec <__alt_data_end+0xfffe8bec>
 4029c50:	da802217 	ldw	r10,136(sp)
 4029c54:	50800017 	ldw	r2,0(r10)
 4029c58:	52800104 	addi	r10,r10,4
 4029c5c:	da802215 	stw	r10,136(sp)
 4029c60:	da802317 	ldw	r10,140(sp)
 4029c64:	12800015 	stw	r10,0(r2)
 4029c68:	003be006 	br	4028bec <__alt_data_end+0xfffe8bec>
 4029c6c:	a080100c 	andi	r2,r20,64
 4029c70:	da802217 	ldw	r10,136(sp)
 4029c74:	10003026 	beq	r2,zero,4029d38 <___vfiprintf_internal_r+0x1220>
 4029c78:	5480000b 	ldhu	r18,0(r10)
 4029c7c:	52800104 	addi	r10,r10,4
 4029c80:	0027883a 	mov	r19,zero
 4029c84:	da802215 	stw	r10,136(sp)
 4029c88:	003d8006 	br	402928c <__alt_data_end+0xfffe928c>
 4029c8c:	80c00007 	ldb	r3,0(r16)
 4029c90:	003c0006 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029c94:	a080100c 	andi	r2,r20,64
 4029c98:	d8001d85 	stb	zero,118(sp)
 4029c9c:	da802217 	ldw	r10,136(sp)
 4029ca0:	1000201e 	bne	r2,zero,4029d24 <___vfiprintf_internal_r+0x120c>
 4029ca4:	50800104 	addi	r2,r10,4
 4029ca8:	54800017 	ldw	r18,0(r10)
 4029cac:	0027883a 	mov	r19,zero
 4029cb0:	483def0e 	bge	r9,zero,4029470 <__alt_data_end+0xfffe9470>
 4029cb4:	94c6b03a 	or	r3,r18,r19
 4029cb8:	d8802215 	stw	r2,136(sp)
 4029cbc:	183d4e1e 	bne	r3,zero,40291f8 <__alt_data_end+0xfffe91f8>
 4029cc0:	0039883a 	mov	fp,zero
 4029cc4:	0005883a 	mov	r2,zero
 4029cc8:	003e0606 	br	40294e4 <__alt_data_end+0xfffe94e4>
 4029ccc:	d9402117 	ldw	r5,132(sp)
 4029cd0:	d9002017 	ldw	r4,128(sp)
 4029cd4:	d9801a04 	addi	r6,sp,104
 4029cd8:	da402c15 	stw	r9,176(sp)
 4029cdc:	db802a15 	stw	r14,168(sp)
 4029ce0:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029ce4:	da402c17 	ldw	r9,176(sp)
 4029ce8:	db802a17 	ldw	r14,168(sp)
 4029cec:	103ede1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029cf0:	d9401b17 	ldw	r5,108(sp)
 4029cf4:	d8801c17 	ldw	r2,112(sp)
 4029cf8:	d811883a 	mov	r8,sp
 4029cfc:	29000044 	addi	r4,r5,1
 4029d00:	003e7406 	br	40296d4 <__alt_data_end+0xfffe96d4>
 4029d04:	00bfffc4 	movi	r2,-1
 4029d08:	003c5806 	br	4028e6c <__alt_data_end+0xfffe8e6c>
 4029d0c:	d811883a 	mov	r8,sp
 4029d10:	003ee806 	br	40298b4 <__alt_data_end+0xfffe98b4>
 4029d14:	000b883a 	mov	r5,zero
 4029d18:	01000044 	movi	r4,1
 4029d1c:	d811883a 	mov	r8,sp
 4029d20:	003e7c06 	br	4029714 <__alt_data_end+0xfffe9714>
 4029d24:	50800104 	addi	r2,r10,4
 4029d28:	5480000b 	ldhu	r18,0(r10)
 4029d2c:	0027883a 	mov	r19,zero
 4029d30:	483dcf0e 	bge	r9,zero,4029470 <__alt_data_end+0xfffe9470>
 4029d34:	003fdf06 	br	4029cb4 <__alt_data_end+0xfffe9cb4>
 4029d38:	54800017 	ldw	r18,0(r10)
 4029d3c:	52800104 	addi	r10,r10,4
 4029d40:	0027883a 	mov	r19,zero
 4029d44:	da802215 	stw	r10,136(sp)
 4029d48:	003d5006 	br	402928c <__alt_data_end+0xfffe928c>
 4029d4c:	50800104 	addi	r2,r10,4
 4029d50:	5480000b 	ldhu	r18,0(r10)
 4029d54:	0027883a 	mov	r19,zero
 4029d58:	483f7d0e 	bge	r9,zero,4029b50 <__alt_data_end+0xfffe9b50>
 4029d5c:	003ddc06 	br	40294d0 <__alt_data_end+0xfffe94d0>
 4029d60:	d8c02215 	stw	r3,136(sp)
 4029d64:	0039883a 	mov	fp,zero
 4029d68:	003ddb06 	br	40294d8 <__alt_data_end+0xfffe94d8>
 4029d6c:	028100f4 	movhi	r10,1027
 4029d70:	528de904 	addi	r10,r10,14244
 4029d74:	da802415 	stw	r10,144(sp)
 4029d78:	003e8306 	br	4029788 <__alt_data_end+0xfffe9788>
 4029d7c:	d8801c17 	ldw	r2,112(sp)
 4029d80:	dd002117 	ldw	r20,132(sp)
 4029d84:	103eb926 	beq	r2,zero,402986c <__alt_data_end+0xfffe986c>
 4029d88:	d9002017 	ldw	r4,128(sp)
 4029d8c:	d9801a04 	addi	r6,sp,104
 4029d90:	a00b883a 	mov	r5,r20
 4029d94:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029d98:	003eb406 	br	402986c <__alt_data_end+0xfffe986c>
 4029d9c:	80c00043 	ldbu	r3,1(r16)
 4029da0:	a5000814 	ori	r20,r20,32
 4029da4:	84000044 	addi	r16,r16,1
 4029da8:	18c03fcc 	andi	r3,r3,255
 4029dac:	18c0201c 	xori	r3,r3,128
 4029db0:	18ffe004 	addi	r3,r3,-128
 4029db4:	003bb706 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029db8:	a809883a 	mov	r4,r21
 4029dbc:	d8c02a15 	stw	r3,168(sp)
 4029dc0:	da002b15 	stw	r8,172(sp)
 4029dc4:	402896c0 	call	402896c <strlen>
 4029dc8:	d8c02a17 	ldw	r3,168(sp)
 4029dcc:	1027883a 	mov	r19,r2
 4029dd0:	df001d83 	ldbu	fp,118(sp)
 4029dd4:	d8c02215 	stw	r3,136(sp)
 4029dd8:	0013883a 	mov	r9,zero
 4029ddc:	da002b17 	ldw	r8,172(sp)
 4029de0:	003c4d06 	br	4028f18 <__alt_data_end+0xfffe8f18>
 4029de4:	d9402117 	ldw	r5,132(sp)
 4029de8:	d9002017 	ldw	r4,128(sp)
 4029dec:	d9801a04 	addi	r6,sp,104
 4029df0:	da402c15 	stw	r9,176(sp)
 4029df4:	4028a040 	call	4028a04 <__sprint_r.part.0>
 4029df8:	da402c17 	ldw	r9,176(sp)
 4029dfc:	103e9a1e 	bne	r2,zero,4029868 <__alt_data_end+0xfffe9868>
 4029e00:	d9401b17 	ldw	r5,108(sp)
 4029e04:	d8801c17 	ldw	r2,112(sp)
 4029e08:	d811883a 	mov	r8,sp
 4029e0c:	29000044 	addi	r4,r5,1
 4029e10:	003e4206 	br	402971c <__alt_data_end+0xfffe971c>
 4029e14:	d9401b17 	ldw	r5,108(sp)
 4029e18:	010100f4 	movhi	r4,1027
 4029e1c:	210ded04 	addi	r4,r4,14260
 4029e20:	d9002415 	stw	r4,144(sp)
 4029e24:	29400044 	addi	r5,r5,1
 4029e28:	003c6d06 	br	4028fe0 <__alt_data_end+0xfffe8fe0>
 4029e2c:	0039883a 	mov	fp,zero
 4029e30:	00800084 	movi	r2,2
 4029e34:	10803fcc 	andi	r2,r2,255
 4029e38:	01000044 	movi	r4,1
 4029e3c:	11001e26 	beq	r2,r4,4029eb8 <___vfiprintf_internal_r+0x13a0>
 4029e40:	01000084 	movi	r4,2
 4029e44:	11001e1e 	bne	r2,r4,4029ec0 <___vfiprintf_internal_r+0x13a8>
 4029e48:	1829883a 	mov	r20,r3
 4029e4c:	003eea06 	br	40299f8 <__alt_data_end+0xfffe99f8>
 4029e50:	a007883a 	mov	r3,r20
 4029e54:	00800044 	movi	r2,1
 4029e58:	003ff606 	br	4029e34 <__alt_data_end+0xfffe9e34>
 4029e5c:	00800184 	movi	r2,6
 4029e60:	1240012e 	bgeu	r2,r9,4029e68 <___vfiprintf_internal_r+0x1350>
 4029e64:	1013883a 	mov	r9,r2
 4029e68:	4827883a 	mov	r19,r9
 4029e6c:	4825883a 	mov	r18,r9
 4029e70:	48001516 	blt	r9,zero,4029ec8 <___vfiprintf_internal_r+0x13b0>
 4029e74:	054100f4 	movhi	r21,1027
 4029e78:	d8c02215 	stw	r3,136(sp)
 4029e7c:	ad4d8d04 	addi	r21,r21,13876
 4029e80:	003d1406 	br	40292d4 <__alt_data_end+0xfffe92d4>
 4029e84:	028100f4 	movhi	r10,1027
 4029e88:	528de904 	addi	r10,r10,14244
 4029e8c:	da802415 	stw	r10,144(sp)
 4029e90:	200d883a 	mov	r6,r4
 4029e94:	003c9106 	br	40290dc <__alt_data_end+0xfffe90dc>
 4029e98:	5021883a 	mov	r16,r10
 4029e9c:	0013883a 	mov	r9,zero
 4029ea0:	003b7d06 	br	4028c98 <__alt_data_end+0xfffe8c98>
 4029ea4:	4827883a 	mov	r19,r9
 4029ea8:	df001d83 	ldbu	fp,118(sp)
 4029eac:	d8c02215 	stw	r3,136(sp)
 4029eb0:	0013883a 	mov	r9,zero
 4029eb4:	003c1806 	br	4028f18 <__alt_data_end+0xfffe8f18>
 4029eb8:	1829883a 	mov	r20,r3
 4029ebc:	003d1806 	br	4029320 <__alt_data_end+0xfffe9320>
 4029ec0:	1829883a 	mov	r20,r3
 4029ec4:	003ccd06 	br	40291fc <__alt_data_end+0xfffe91fc>
 4029ec8:	0025883a 	mov	r18,zero
 4029ecc:	003fe906 	br	4029e74 <__alt_data_end+0xfffe9e74>
 4029ed0:	d8802217 	ldw	r2,136(sp)
 4029ed4:	80c00043 	ldbu	r3,1(r16)
 4029ed8:	5021883a 	mov	r16,r10
 4029edc:	12400017 	ldw	r9,0(r2)
 4029ee0:	10800104 	addi	r2,r2,4
 4029ee4:	d8802215 	stw	r2,136(sp)
 4029ee8:	483faf0e 	bge	r9,zero,4029da8 <__alt_data_end+0xfffe9da8>
 4029eec:	18c03fcc 	andi	r3,r3,255
 4029ef0:	18c0201c 	xori	r3,r3,128
 4029ef4:	027fffc4 	movi	r9,-1
 4029ef8:	18ffe004 	addi	r3,r3,-128
 4029efc:	003b6506 	br	4028c94 <__alt_data_end+0xfffe8c94>
 4029f00:	d9c01d85 	stb	r7,118(sp)
 4029f04:	003ca006 	br	4029188 <__alt_data_end+0xfffe9188>
 4029f08:	d9c01d85 	stb	r7,118(sp)
 4029f0c:	003cad06 	br	40291c4 <__alt_data_end+0xfffe91c4>
 4029f10:	d9c01d85 	stb	r7,118(sp)
 4029f14:	003d7d06 	br	402950c <__alt_data_end+0xfffe950c>
 4029f18:	d9c01d85 	stb	r7,118(sp)
 4029f1c:	003d5f06 	br	402949c <__alt_data_end+0xfffe949c>
 4029f20:	a080004c 	andi	r2,r20,1
 4029f24:	0039883a 	mov	fp,zero
 4029f28:	10000526 	beq	r2,zero,4029f40 <___vfiprintf_internal_r+0x1428>
 4029f2c:	00800c04 	movi	r2,48
 4029f30:	d88019c5 	stb	r2,103(sp)
 4029f34:	dcc02717 	ldw	r19,156(sp)
 4029f38:	dd4019c4 	addi	r21,sp,103
 4029f3c:	003bf606 	br	4028f18 <__alt_data_end+0xfffe8f18>
 4029f40:	0027883a 	mov	r19,zero
 4029f44:	dd401a04 	addi	r21,sp,104
 4029f48:	003bf306 	br	4028f18 <__alt_data_end+0xfffe8f18>
 4029f4c:	d9c01d85 	stb	r7,118(sp)
 4029f50:	003dc806 	br	4029674 <__alt_data_end+0xfffe9674>
 4029f54:	d9c01d85 	stb	r7,118(sp)
 4029f58:	003d3a06 	br	4029444 <__alt_data_end+0xfffe9444>
 4029f5c:	d9c01d85 	stb	r7,118(sp)
 4029f60:	003d2a06 	br	402940c <__alt_data_end+0xfffe940c>
 4029f64:	d9c01d85 	stb	r7,118(sp)
 4029f68:	003cde06 	br	40292e4 <__alt_data_end+0xfffe92e4>
 4029f6c:	d9c01d85 	stb	r7,118(sp)
 4029f70:	003cbc06 	br	4029264 <__alt_data_end+0xfffe9264>

04029f74 <__vfiprintf_internal>:
 4029f74:	008100f4 	movhi	r2,1027
 4029f78:	10956004 	addi	r2,r2,21888
 4029f7c:	300f883a 	mov	r7,r6
 4029f80:	280d883a 	mov	r6,r5
 4029f84:	200b883a 	mov	r5,r4
 4029f88:	11000017 	ldw	r4,0(r2)
 4029f8c:	4028b181 	jmpi	4028b18 <___vfiprintf_internal_r>

04029f90 <__sbprintf>:
 4029f90:	2880030b 	ldhu	r2,12(r5)
 4029f94:	2ac01917 	ldw	r11,100(r5)
 4029f98:	2a80038b 	ldhu	r10,14(r5)
 4029f9c:	2a400717 	ldw	r9,28(r5)
 4029fa0:	2a000917 	ldw	r8,36(r5)
 4029fa4:	defee204 	addi	sp,sp,-1144
 4029fa8:	00c10004 	movi	r3,1024
 4029fac:	dc011a15 	stw	r16,1128(sp)
 4029fb0:	10bfff4c 	andi	r2,r2,65533
 4029fb4:	2821883a 	mov	r16,r5
 4029fb8:	d8cb883a 	add	r5,sp,r3
 4029fbc:	dc811c15 	stw	r18,1136(sp)
 4029fc0:	dc411b15 	stw	r17,1132(sp)
 4029fc4:	dfc11d15 	stw	ra,1140(sp)
 4029fc8:	2025883a 	mov	r18,r4
 4029fcc:	d881030d 	sth	r2,1036(sp)
 4029fd0:	dac11915 	stw	r11,1124(sp)
 4029fd4:	da81038d 	sth	r10,1038(sp)
 4029fd8:	da410715 	stw	r9,1052(sp)
 4029fdc:	da010915 	stw	r8,1060(sp)
 4029fe0:	dec10015 	stw	sp,1024(sp)
 4029fe4:	dec10415 	stw	sp,1040(sp)
 4029fe8:	d8c10215 	stw	r3,1032(sp)
 4029fec:	d8c10515 	stw	r3,1044(sp)
 4029ff0:	d8010615 	stw	zero,1048(sp)
 4029ff4:	4028b180 	call	4028b18 <___vfiprintf_internal_r>
 4029ff8:	1023883a 	mov	r17,r2
 4029ffc:	10000416 	blt	r2,zero,402a010 <__sbprintf+0x80>
 402a000:	d9410004 	addi	r5,sp,1024
 402a004:	9009883a 	mov	r4,r18
 402a008:	4025eb00 	call	4025eb0 <_fflush_r>
 402a00c:	10000d1e 	bne	r2,zero,402a044 <__sbprintf+0xb4>
 402a010:	d881030b 	ldhu	r2,1036(sp)
 402a014:	1080100c 	andi	r2,r2,64
 402a018:	10000326 	beq	r2,zero,402a028 <__sbprintf+0x98>
 402a01c:	8080030b 	ldhu	r2,12(r16)
 402a020:	10801014 	ori	r2,r2,64
 402a024:	8080030d 	sth	r2,12(r16)
 402a028:	8805883a 	mov	r2,r17
 402a02c:	dfc11d17 	ldw	ra,1140(sp)
 402a030:	dc811c17 	ldw	r18,1136(sp)
 402a034:	dc411b17 	ldw	r17,1132(sp)
 402a038:	dc011a17 	ldw	r16,1128(sp)
 402a03c:	dec11e04 	addi	sp,sp,1144
 402a040:	f800283a 	ret
 402a044:	047fffc4 	movi	r17,-1
 402a048:	003ff106 	br	402a010 <__alt_data_end+0xfffea010>

0402a04c <_write_r>:
 402a04c:	defffd04 	addi	sp,sp,-12
 402a050:	2805883a 	mov	r2,r5
 402a054:	dc000015 	stw	r16,0(sp)
 402a058:	040100f4 	movhi	r16,1027
 402a05c:	dc400115 	stw	r17,4(sp)
 402a060:	300b883a 	mov	r5,r6
 402a064:	841c9204 	addi	r16,r16,29256
 402a068:	2023883a 	mov	r17,r4
 402a06c:	380d883a 	mov	r6,r7
 402a070:	1009883a 	mov	r4,r2
 402a074:	dfc00215 	stw	ra,8(sp)
 402a078:	80000015 	stw	zero,0(r16)
 402a07c:	402f4100 	call	402f410 <write>
 402a080:	00ffffc4 	movi	r3,-1
 402a084:	10c00526 	beq	r2,r3,402a09c <_write_r+0x50>
 402a088:	dfc00217 	ldw	ra,8(sp)
 402a08c:	dc400117 	ldw	r17,4(sp)
 402a090:	dc000017 	ldw	r16,0(sp)
 402a094:	dec00304 	addi	sp,sp,12
 402a098:	f800283a 	ret
 402a09c:	80c00017 	ldw	r3,0(r16)
 402a0a0:	183ff926 	beq	r3,zero,402a088 <__alt_data_end+0xfffea088>
 402a0a4:	88c00015 	stw	r3,0(r17)
 402a0a8:	003ff706 	br	402a088 <__alt_data_end+0xfffea088>

0402a0ac <_close_r>:
 402a0ac:	defffd04 	addi	sp,sp,-12
 402a0b0:	dc000015 	stw	r16,0(sp)
 402a0b4:	040100f4 	movhi	r16,1027
 402a0b8:	dc400115 	stw	r17,4(sp)
 402a0bc:	841c9204 	addi	r16,r16,29256
 402a0c0:	2023883a 	mov	r17,r4
 402a0c4:	2809883a 	mov	r4,r5
 402a0c8:	dfc00215 	stw	ra,8(sp)
 402a0cc:	80000015 	stw	zero,0(r16)
 402a0d0:	402e7a00 	call	402e7a0 <close>
 402a0d4:	00ffffc4 	movi	r3,-1
 402a0d8:	10c00526 	beq	r2,r3,402a0f0 <_close_r+0x44>
 402a0dc:	dfc00217 	ldw	ra,8(sp)
 402a0e0:	dc400117 	ldw	r17,4(sp)
 402a0e4:	dc000017 	ldw	r16,0(sp)
 402a0e8:	dec00304 	addi	sp,sp,12
 402a0ec:	f800283a 	ret
 402a0f0:	80c00017 	ldw	r3,0(r16)
 402a0f4:	183ff926 	beq	r3,zero,402a0dc <__alt_data_end+0xfffea0dc>
 402a0f8:	88c00015 	stw	r3,0(r17)
 402a0fc:	003ff706 	br	402a0dc <__alt_data_end+0xfffea0dc>

0402a100 <_calloc_r>:
 402a100:	298b383a 	mul	r5,r5,r6
 402a104:	defffe04 	addi	sp,sp,-8
 402a108:	dfc00115 	stw	ra,4(sp)
 402a10c:	dc000015 	stw	r16,0(sp)
 402a110:	4026b300 	call	4026b30 <_malloc_r>
 402a114:	10002926 	beq	r2,zero,402a1bc <_calloc_r+0xbc>
 402a118:	11bfff17 	ldw	r6,-4(r2)
 402a11c:	1021883a 	mov	r16,r2
 402a120:	00bfff04 	movi	r2,-4
 402a124:	308c703a 	and	r6,r6,r2
 402a128:	00c00904 	movi	r3,36
 402a12c:	308d883a 	add	r6,r6,r2
 402a130:	19801636 	bltu	r3,r6,402a18c <_calloc_r+0x8c>
 402a134:	008004c4 	movi	r2,19
 402a138:	11800b2e 	bgeu	r2,r6,402a168 <_calloc_r+0x68>
 402a13c:	80000015 	stw	zero,0(r16)
 402a140:	80000115 	stw	zero,4(r16)
 402a144:	008006c4 	movi	r2,27
 402a148:	11801a2e 	bgeu	r2,r6,402a1b4 <_calloc_r+0xb4>
 402a14c:	80000215 	stw	zero,8(r16)
 402a150:	80000315 	stw	zero,12(r16)
 402a154:	30c0151e 	bne	r6,r3,402a1ac <_calloc_r+0xac>
 402a158:	80000415 	stw	zero,16(r16)
 402a15c:	80800604 	addi	r2,r16,24
 402a160:	80000515 	stw	zero,20(r16)
 402a164:	00000106 	br	402a16c <_calloc_r+0x6c>
 402a168:	8005883a 	mov	r2,r16
 402a16c:	10000015 	stw	zero,0(r2)
 402a170:	10000115 	stw	zero,4(r2)
 402a174:	10000215 	stw	zero,8(r2)
 402a178:	8005883a 	mov	r2,r16
 402a17c:	dfc00117 	ldw	ra,4(sp)
 402a180:	dc000017 	ldw	r16,0(sp)
 402a184:	dec00204 	addi	sp,sp,8
 402a188:	f800283a 	ret
 402a18c:	000b883a 	mov	r5,zero
 402a190:	8009883a 	mov	r4,r16
 402a194:	40275680 	call	4027568 <memset>
 402a198:	8005883a 	mov	r2,r16
 402a19c:	dfc00117 	ldw	ra,4(sp)
 402a1a0:	dc000017 	ldw	r16,0(sp)
 402a1a4:	dec00204 	addi	sp,sp,8
 402a1a8:	f800283a 	ret
 402a1ac:	80800404 	addi	r2,r16,16
 402a1b0:	003fee06 	br	402a16c <__alt_data_end+0xfffea16c>
 402a1b4:	80800204 	addi	r2,r16,8
 402a1b8:	003fec06 	br	402a16c <__alt_data_end+0xfffea16c>
 402a1bc:	0005883a 	mov	r2,zero
 402a1c0:	003fee06 	br	402a17c <__alt_data_end+0xfffea17c>

0402a1c4 <_fclose_r>:
 402a1c4:	28003926 	beq	r5,zero,402a2ac <_fclose_r+0xe8>
 402a1c8:	defffc04 	addi	sp,sp,-16
 402a1cc:	dc400115 	stw	r17,4(sp)
 402a1d0:	dc000015 	stw	r16,0(sp)
 402a1d4:	dfc00315 	stw	ra,12(sp)
 402a1d8:	dc800215 	stw	r18,8(sp)
 402a1dc:	2023883a 	mov	r17,r4
 402a1e0:	2821883a 	mov	r16,r5
 402a1e4:	20000226 	beq	r4,zero,402a1f0 <_fclose_r+0x2c>
 402a1e8:	20800e17 	ldw	r2,56(r4)
 402a1ec:	10002726 	beq	r2,zero,402a28c <_fclose_r+0xc8>
 402a1f0:	8080030f 	ldh	r2,12(r16)
 402a1f4:	1000071e 	bne	r2,zero,402a214 <_fclose_r+0x50>
 402a1f8:	0005883a 	mov	r2,zero
 402a1fc:	dfc00317 	ldw	ra,12(sp)
 402a200:	dc800217 	ldw	r18,8(sp)
 402a204:	dc400117 	ldw	r17,4(sp)
 402a208:	dc000017 	ldw	r16,0(sp)
 402a20c:	dec00404 	addi	sp,sp,16
 402a210:	f800283a 	ret
 402a214:	800b883a 	mov	r5,r16
 402a218:	8809883a 	mov	r4,r17
 402a21c:	4025c940 	call	4025c94 <__sflush_r>
 402a220:	1025883a 	mov	r18,r2
 402a224:	80800b17 	ldw	r2,44(r16)
 402a228:	10000426 	beq	r2,zero,402a23c <_fclose_r+0x78>
 402a22c:	81400717 	ldw	r5,28(r16)
 402a230:	8809883a 	mov	r4,r17
 402a234:	103ee83a 	callr	r2
 402a238:	10001616 	blt	r2,zero,402a294 <_fclose_r+0xd0>
 402a23c:	8080030b 	ldhu	r2,12(r16)
 402a240:	1080200c 	andi	r2,r2,128
 402a244:	1000151e 	bne	r2,zero,402a29c <_fclose_r+0xd8>
 402a248:	81400c17 	ldw	r5,48(r16)
 402a24c:	28000526 	beq	r5,zero,402a264 <_fclose_r+0xa0>
 402a250:	80801004 	addi	r2,r16,64
 402a254:	28800226 	beq	r5,r2,402a260 <_fclose_r+0x9c>
 402a258:	8809883a 	mov	r4,r17
 402a25c:	40264000 	call	4026400 <_free_r>
 402a260:	80000c15 	stw	zero,48(r16)
 402a264:	81401117 	ldw	r5,68(r16)
 402a268:	28000326 	beq	r5,zero,402a278 <_fclose_r+0xb4>
 402a26c:	8809883a 	mov	r4,r17
 402a270:	40264000 	call	4026400 <_free_r>
 402a274:	80001115 	stw	zero,68(r16)
 402a278:	402629c0 	call	402629c <__sfp_lock_acquire>
 402a27c:	8000030d 	sth	zero,12(r16)
 402a280:	40262a00 	call	40262a0 <__sfp_lock_release>
 402a284:	9005883a 	mov	r2,r18
 402a288:	003fdc06 	br	402a1fc <__alt_data_end+0xfffea1fc>
 402a28c:	402628c0 	call	402628c <__sinit>
 402a290:	003fd706 	br	402a1f0 <__alt_data_end+0xfffea1f0>
 402a294:	04bfffc4 	movi	r18,-1
 402a298:	003fe806 	br	402a23c <__alt_data_end+0xfffea23c>
 402a29c:	81400417 	ldw	r5,16(r16)
 402a2a0:	8809883a 	mov	r4,r17
 402a2a4:	40264000 	call	4026400 <_free_r>
 402a2a8:	003fe706 	br	402a248 <__alt_data_end+0xfffea248>
 402a2ac:	0005883a 	mov	r2,zero
 402a2b0:	f800283a 	ret

0402a2b4 <fclose>:
 402a2b4:	008100f4 	movhi	r2,1027
 402a2b8:	10956004 	addi	r2,r2,21888
 402a2bc:	200b883a 	mov	r5,r4
 402a2c0:	11000017 	ldw	r4,0(r2)
 402a2c4:	402a1c41 	jmpi	402a1c4 <_fclose_r>

0402a2c8 <__fputwc>:
 402a2c8:	defff804 	addi	sp,sp,-32
 402a2cc:	dcc00415 	stw	r19,16(sp)
 402a2d0:	dc800315 	stw	r18,12(sp)
 402a2d4:	dc000115 	stw	r16,4(sp)
 402a2d8:	dfc00715 	stw	ra,28(sp)
 402a2dc:	dd400615 	stw	r21,24(sp)
 402a2e0:	dd000515 	stw	r20,20(sp)
 402a2e4:	dc400215 	stw	r17,8(sp)
 402a2e8:	2027883a 	mov	r19,r4
 402a2ec:	2825883a 	mov	r18,r5
 402a2f0:	3021883a 	mov	r16,r6
 402a2f4:	40269200 	call	4026920 <__locale_mb_cur_max>
 402a2f8:	00c00044 	movi	r3,1
 402a2fc:	10c03e26 	beq	r2,r3,402a3f8 <__fputwc+0x130>
 402a300:	81c01704 	addi	r7,r16,92
 402a304:	900d883a 	mov	r6,r18
 402a308:	d80b883a 	mov	r5,sp
 402a30c:	9809883a 	mov	r4,r19
 402a310:	402b3140 	call	402b314 <_wcrtomb_r>
 402a314:	1029883a 	mov	r20,r2
 402a318:	00bfffc4 	movi	r2,-1
 402a31c:	a0802026 	beq	r20,r2,402a3a0 <__fputwc+0xd8>
 402a320:	d9400003 	ldbu	r5,0(sp)
 402a324:	a0001c26 	beq	r20,zero,402a398 <__fputwc+0xd0>
 402a328:	0023883a 	mov	r17,zero
 402a32c:	05400284 	movi	r21,10
 402a330:	00000906 	br	402a358 <__fputwc+0x90>
 402a334:	80800017 	ldw	r2,0(r16)
 402a338:	11400005 	stb	r5,0(r2)
 402a33c:	80c00017 	ldw	r3,0(r16)
 402a340:	18c00044 	addi	r3,r3,1
 402a344:	80c00015 	stw	r3,0(r16)
 402a348:	8c400044 	addi	r17,r17,1
 402a34c:	dc45883a 	add	r2,sp,r17
 402a350:	8d00112e 	bgeu	r17,r20,402a398 <__fputwc+0xd0>
 402a354:	11400003 	ldbu	r5,0(r2)
 402a358:	80c00217 	ldw	r3,8(r16)
 402a35c:	18ffffc4 	addi	r3,r3,-1
 402a360:	80c00215 	stw	r3,8(r16)
 402a364:	183ff30e 	bge	r3,zero,402a334 <__alt_data_end+0xfffea334>
 402a368:	80800617 	ldw	r2,24(r16)
 402a36c:	18801916 	blt	r3,r2,402a3d4 <__fputwc+0x10c>
 402a370:	80800017 	ldw	r2,0(r16)
 402a374:	11400005 	stb	r5,0(r2)
 402a378:	80800017 	ldw	r2,0(r16)
 402a37c:	10c00003 	ldbu	r3,0(r2)
 402a380:	10800044 	addi	r2,r2,1
 402a384:	1d402326 	beq	r3,r21,402a414 <__fputwc+0x14c>
 402a388:	80800015 	stw	r2,0(r16)
 402a38c:	8c400044 	addi	r17,r17,1
 402a390:	dc45883a 	add	r2,sp,r17
 402a394:	8d3fef36 	bltu	r17,r20,402a354 <__alt_data_end+0xfffea354>
 402a398:	9005883a 	mov	r2,r18
 402a39c:	00000406 	br	402a3b0 <__fputwc+0xe8>
 402a3a0:	80c0030b 	ldhu	r3,12(r16)
 402a3a4:	a005883a 	mov	r2,r20
 402a3a8:	18c01014 	ori	r3,r3,64
 402a3ac:	80c0030d 	sth	r3,12(r16)
 402a3b0:	dfc00717 	ldw	ra,28(sp)
 402a3b4:	dd400617 	ldw	r21,24(sp)
 402a3b8:	dd000517 	ldw	r20,20(sp)
 402a3bc:	dcc00417 	ldw	r19,16(sp)
 402a3c0:	dc800317 	ldw	r18,12(sp)
 402a3c4:	dc400217 	ldw	r17,8(sp)
 402a3c8:	dc000117 	ldw	r16,4(sp)
 402a3cc:	dec00804 	addi	sp,sp,32
 402a3d0:	f800283a 	ret
 402a3d4:	800d883a 	mov	r6,r16
 402a3d8:	29403fcc 	andi	r5,r5,255
 402a3dc:	9809883a 	mov	r4,r19
 402a3e0:	402b1bc0 	call	402b1bc <__swbuf_r>
 402a3e4:	10bfffe0 	cmpeqi	r2,r2,-1
 402a3e8:	10803fcc 	andi	r2,r2,255
 402a3ec:	103fd626 	beq	r2,zero,402a348 <__alt_data_end+0xfffea348>
 402a3f0:	00bfffc4 	movi	r2,-1
 402a3f4:	003fee06 	br	402a3b0 <__alt_data_end+0xfffea3b0>
 402a3f8:	90ffffc4 	addi	r3,r18,-1
 402a3fc:	01003f84 	movi	r4,254
 402a400:	20ffbf36 	bltu	r4,r3,402a300 <__alt_data_end+0xfffea300>
 402a404:	900b883a 	mov	r5,r18
 402a408:	dc800005 	stb	r18,0(sp)
 402a40c:	1029883a 	mov	r20,r2
 402a410:	003fc506 	br	402a328 <__alt_data_end+0xfffea328>
 402a414:	800d883a 	mov	r6,r16
 402a418:	a80b883a 	mov	r5,r21
 402a41c:	9809883a 	mov	r4,r19
 402a420:	402b1bc0 	call	402b1bc <__swbuf_r>
 402a424:	10bfffe0 	cmpeqi	r2,r2,-1
 402a428:	003fef06 	br	402a3e8 <__alt_data_end+0xfffea3e8>

0402a42c <_fputwc_r>:
 402a42c:	3080030b 	ldhu	r2,12(r6)
 402a430:	10c8000c 	andi	r3,r2,8192
 402a434:	1800051e 	bne	r3,zero,402a44c <_fputwc_r+0x20>
 402a438:	30c01917 	ldw	r3,100(r6)
 402a43c:	10880014 	ori	r2,r2,8192
 402a440:	3080030d 	sth	r2,12(r6)
 402a444:	18880014 	ori	r2,r3,8192
 402a448:	30801915 	stw	r2,100(r6)
 402a44c:	402a2c81 	jmpi	402a2c8 <__fputwc>

0402a450 <fputwc>:
 402a450:	008100f4 	movhi	r2,1027
 402a454:	defffc04 	addi	sp,sp,-16
 402a458:	10956004 	addi	r2,r2,21888
 402a45c:	dc000115 	stw	r16,4(sp)
 402a460:	14000017 	ldw	r16,0(r2)
 402a464:	dc400215 	stw	r17,8(sp)
 402a468:	dfc00315 	stw	ra,12(sp)
 402a46c:	2023883a 	mov	r17,r4
 402a470:	80000226 	beq	r16,zero,402a47c <fputwc+0x2c>
 402a474:	80800e17 	ldw	r2,56(r16)
 402a478:	10001026 	beq	r2,zero,402a4bc <fputwc+0x6c>
 402a47c:	2880030b 	ldhu	r2,12(r5)
 402a480:	10c8000c 	andi	r3,r2,8192
 402a484:	1800051e 	bne	r3,zero,402a49c <fputwc+0x4c>
 402a488:	28c01917 	ldw	r3,100(r5)
 402a48c:	10880014 	ori	r2,r2,8192
 402a490:	2880030d 	sth	r2,12(r5)
 402a494:	18880014 	ori	r2,r3,8192
 402a498:	28801915 	stw	r2,100(r5)
 402a49c:	280d883a 	mov	r6,r5
 402a4a0:	8009883a 	mov	r4,r16
 402a4a4:	880b883a 	mov	r5,r17
 402a4a8:	dfc00317 	ldw	ra,12(sp)
 402a4ac:	dc400217 	ldw	r17,8(sp)
 402a4b0:	dc000117 	ldw	r16,4(sp)
 402a4b4:	dec00404 	addi	sp,sp,16
 402a4b8:	402a2c81 	jmpi	402a2c8 <__fputwc>
 402a4bc:	8009883a 	mov	r4,r16
 402a4c0:	d9400015 	stw	r5,0(sp)
 402a4c4:	402628c0 	call	402628c <__sinit>
 402a4c8:	d9400017 	ldw	r5,0(sp)
 402a4cc:	003feb06 	br	402a47c <__alt_data_end+0xfffea47c>

0402a4d0 <_fstat_r>:
 402a4d0:	defffd04 	addi	sp,sp,-12
 402a4d4:	2805883a 	mov	r2,r5
 402a4d8:	dc000015 	stw	r16,0(sp)
 402a4dc:	040100f4 	movhi	r16,1027
 402a4e0:	dc400115 	stw	r17,4(sp)
 402a4e4:	841c9204 	addi	r16,r16,29256
 402a4e8:	2023883a 	mov	r17,r4
 402a4ec:	300b883a 	mov	r5,r6
 402a4f0:	1009883a 	mov	r4,r2
 402a4f4:	dfc00215 	stw	ra,8(sp)
 402a4f8:	80000015 	stw	zero,0(r16)
 402a4fc:	402e9200 	call	402e920 <fstat>
 402a500:	00ffffc4 	movi	r3,-1
 402a504:	10c00526 	beq	r2,r3,402a51c <_fstat_r+0x4c>
 402a508:	dfc00217 	ldw	ra,8(sp)
 402a50c:	dc400117 	ldw	r17,4(sp)
 402a510:	dc000017 	ldw	r16,0(sp)
 402a514:	dec00304 	addi	sp,sp,12
 402a518:	f800283a 	ret
 402a51c:	80c00017 	ldw	r3,0(r16)
 402a520:	183ff926 	beq	r3,zero,402a508 <__alt_data_end+0xfffea508>
 402a524:	88c00015 	stw	r3,0(r17)
 402a528:	003ff706 	br	402a508 <__alt_data_end+0xfffea508>

0402a52c <__sfvwrite_r>:
 402a52c:	30800217 	ldw	r2,8(r6)
 402a530:	10006726 	beq	r2,zero,402a6d0 <__sfvwrite_r+0x1a4>
 402a534:	28c0030b 	ldhu	r3,12(r5)
 402a538:	defff404 	addi	sp,sp,-48
 402a53c:	dd400715 	stw	r21,28(sp)
 402a540:	dd000615 	stw	r20,24(sp)
 402a544:	dc000215 	stw	r16,8(sp)
 402a548:	dfc00b15 	stw	ra,44(sp)
 402a54c:	df000a15 	stw	fp,40(sp)
 402a550:	ddc00915 	stw	r23,36(sp)
 402a554:	dd800815 	stw	r22,32(sp)
 402a558:	dcc00515 	stw	r19,20(sp)
 402a55c:	dc800415 	stw	r18,16(sp)
 402a560:	dc400315 	stw	r17,12(sp)
 402a564:	1880020c 	andi	r2,r3,8
 402a568:	2821883a 	mov	r16,r5
 402a56c:	202b883a 	mov	r21,r4
 402a570:	3029883a 	mov	r20,r6
 402a574:	10002726 	beq	r2,zero,402a614 <__sfvwrite_r+0xe8>
 402a578:	28800417 	ldw	r2,16(r5)
 402a57c:	10002526 	beq	r2,zero,402a614 <__sfvwrite_r+0xe8>
 402a580:	1880008c 	andi	r2,r3,2
 402a584:	a4400017 	ldw	r17,0(r20)
 402a588:	10002a26 	beq	r2,zero,402a634 <__sfvwrite_r+0x108>
 402a58c:	05a00034 	movhi	r22,32768
 402a590:	0027883a 	mov	r19,zero
 402a594:	0025883a 	mov	r18,zero
 402a598:	b5bf0004 	addi	r22,r22,-1024
 402a59c:	980d883a 	mov	r6,r19
 402a5a0:	a809883a 	mov	r4,r21
 402a5a4:	90004626 	beq	r18,zero,402a6c0 <__sfvwrite_r+0x194>
 402a5a8:	900f883a 	mov	r7,r18
 402a5ac:	b480022e 	bgeu	r22,r18,402a5b8 <__sfvwrite_r+0x8c>
 402a5b0:	01e00034 	movhi	r7,32768
 402a5b4:	39ff0004 	addi	r7,r7,-1024
 402a5b8:	80800917 	ldw	r2,36(r16)
 402a5bc:	81400717 	ldw	r5,28(r16)
 402a5c0:	103ee83a 	callr	r2
 402a5c4:	0080570e 	bge	zero,r2,402a724 <__sfvwrite_r+0x1f8>
 402a5c8:	a0c00217 	ldw	r3,8(r20)
 402a5cc:	98a7883a 	add	r19,r19,r2
 402a5d0:	90a5c83a 	sub	r18,r18,r2
 402a5d4:	1885c83a 	sub	r2,r3,r2
 402a5d8:	a0800215 	stw	r2,8(r20)
 402a5dc:	103fef1e 	bne	r2,zero,402a59c <__alt_data_end+0xfffea59c>
 402a5e0:	0005883a 	mov	r2,zero
 402a5e4:	dfc00b17 	ldw	ra,44(sp)
 402a5e8:	df000a17 	ldw	fp,40(sp)
 402a5ec:	ddc00917 	ldw	r23,36(sp)
 402a5f0:	dd800817 	ldw	r22,32(sp)
 402a5f4:	dd400717 	ldw	r21,28(sp)
 402a5f8:	dd000617 	ldw	r20,24(sp)
 402a5fc:	dcc00517 	ldw	r19,20(sp)
 402a600:	dc800417 	ldw	r18,16(sp)
 402a604:	dc400317 	ldw	r17,12(sp)
 402a608:	dc000217 	ldw	r16,8(sp)
 402a60c:	dec00c04 	addi	sp,sp,48
 402a610:	f800283a 	ret
 402a614:	800b883a 	mov	r5,r16
 402a618:	a809883a 	mov	r4,r21
 402a61c:	40242b80 	call	40242b8 <__swsetup_r>
 402a620:	1000eb1e 	bne	r2,zero,402a9d0 <__sfvwrite_r+0x4a4>
 402a624:	80c0030b 	ldhu	r3,12(r16)
 402a628:	a4400017 	ldw	r17,0(r20)
 402a62c:	1880008c 	andi	r2,r3,2
 402a630:	103fd61e 	bne	r2,zero,402a58c <__alt_data_end+0xfffea58c>
 402a634:	1880004c 	andi	r2,r3,1
 402a638:	10003f1e 	bne	r2,zero,402a738 <__sfvwrite_r+0x20c>
 402a63c:	0039883a 	mov	fp,zero
 402a640:	0025883a 	mov	r18,zero
 402a644:	90001a26 	beq	r18,zero,402a6b0 <__sfvwrite_r+0x184>
 402a648:	1880800c 	andi	r2,r3,512
 402a64c:	84c00217 	ldw	r19,8(r16)
 402a650:	10002126 	beq	r2,zero,402a6d8 <__sfvwrite_r+0x1ac>
 402a654:	982f883a 	mov	r23,r19
 402a658:	94c09336 	bltu	r18,r19,402a8a8 <__sfvwrite_r+0x37c>
 402a65c:	1881200c 	andi	r2,r3,1152
 402a660:	10009e1e 	bne	r2,zero,402a8dc <__sfvwrite_r+0x3b0>
 402a664:	81000017 	ldw	r4,0(r16)
 402a668:	b80d883a 	mov	r6,r23
 402a66c:	e00b883a 	mov	r5,fp
 402a670:	402aa9c0 	call	402aa9c <memmove>
 402a674:	80c00217 	ldw	r3,8(r16)
 402a678:	81000017 	ldw	r4,0(r16)
 402a67c:	9005883a 	mov	r2,r18
 402a680:	1ce7c83a 	sub	r19,r3,r19
 402a684:	25cf883a 	add	r7,r4,r23
 402a688:	84c00215 	stw	r19,8(r16)
 402a68c:	81c00015 	stw	r7,0(r16)
 402a690:	a0c00217 	ldw	r3,8(r20)
 402a694:	e0b9883a 	add	fp,fp,r2
 402a698:	90a5c83a 	sub	r18,r18,r2
 402a69c:	18a7c83a 	sub	r19,r3,r2
 402a6a0:	a4c00215 	stw	r19,8(r20)
 402a6a4:	983fce26 	beq	r19,zero,402a5e0 <__alt_data_end+0xfffea5e0>
 402a6a8:	80c0030b 	ldhu	r3,12(r16)
 402a6ac:	903fe61e 	bne	r18,zero,402a648 <__alt_data_end+0xfffea648>
 402a6b0:	8f000017 	ldw	fp,0(r17)
 402a6b4:	8c800117 	ldw	r18,4(r17)
 402a6b8:	8c400204 	addi	r17,r17,8
 402a6bc:	003fe106 	br	402a644 <__alt_data_end+0xfffea644>
 402a6c0:	8cc00017 	ldw	r19,0(r17)
 402a6c4:	8c800117 	ldw	r18,4(r17)
 402a6c8:	8c400204 	addi	r17,r17,8
 402a6cc:	003fb306 	br	402a59c <__alt_data_end+0xfffea59c>
 402a6d0:	0005883a 	mov	r2,zero
 402a6d4:	f800283a 	ret
 402a6d8:	81000017 	ldw	r4,0(r16)
 402a6dc:	80800417 	ldw	r2,16(r16)
 402a6e0:	11005736 	bltu	r2,r4,402a840 <__sfvwrite_r+0x314>
 402a6e4:	85c00517 	ldw	r23,20(r16)
 402a6e8:	95c05536 	bltu	r18,r23,402a840 <__sfvwrite_r+0x314>
 402a6ec:	00a00034 	movhi	r2,32768
 402a6f0:	10bfffc4 	addi	r2,r2,-1
 402a6f4:	9009883a 	mov	r4,r18
 402a6f8:	1480012e 	bgeu	r2,r18,402a700 <__sfvwrite_r+0x1d4>
 402a6fc:	1009883a 	mov	r4,r2
 402a700:	b80b883a 	mov	r5,r23
 402a704:	402bfac0 	call	402bfac <__divsi3>
 402a708:	15cf383a 	mul	r7,r2,r23
 402a70c:	81400717 	ldw	r5,28(r16)
 402a710:	80800917 	ldw	r2,36(r16)
 402a714:	e00d883a 	mov	r6,fp
 402a718:	a809883a 	mov	r4,r21
 402a71c:	103ee83a 	callr	r2
 402a720:	00bfdb16 	blt	zero,r2,402a690 <__alt_data_end+0xfffea690>
 402a724:	8080030b 	ldhu	r2,12(r16)
 402a728:	10801014 	ori	r2,r2,64
 402a72c:	8080030d 	sth	r2,12(r16)
 402a730:	00bfffc4 	movi	r2,-1
 402a734:	003fab06 	br	402a5e4 <__alt_data_end+0xfffea5e4>
 402a738:	0027883a 	mov	r19,zero
 402a73c:	0011883a 	mov	r8,zero
 402a740:	0039883a 	mov	fp,zero
 402a744:	0025883a 	mov	r18,zero
 402a748:	90001f26 	beq	r18,zero,402a7c8 <__sfvwrite_r+0x29c>
 402a74c:	40005a26 	beq	r8,zero,402a8b8 <__sfvwrite_r+0x38c>
 402a750:	982d883a 	mov	r22,r19
 402a754:	94c0012e 	bgeu	r18,r19,402a75c <__sfvwrite_r+0x230>
 402a758:	902d883a 	mov	r22,r18
 402a75c:	81000017 	ldw	r4,0(r16)
 402a760:	80800417 	ldw	r2,16(r16)
 402a764:	b02f883a 	mov	r23,r22
 402a768:	81c00517 	ldw	r7,20(r16)
 402a76c:	1100032e 	bgeu	r2,r4,402a77c <__sfvwrite_r+0x250>
 402a770:	80c00217 	ldw	r3,8(r16)
 402a774:	38c7883a 	add	r3,r7,r3
 402a778:	1d801816 	blt	r3,r22,402a7dc <__sfvwrite_r+0x2b0>
 402a77c:	b1c03e16 	blt	r22,r7,402a878 <__sfvwrite_r+0x34c>
 402a780:	80800917 	ldw	r2,36(r16)
 402a784:	81400717 	ldw	r5,28(r16)
 402a788:	e00d883a 	mov	r6,fp
 402a78c:	da000115 	stw	r8,4(sp)
 402a790:	a809883a 	mov	r4,r21
 402a794:	103ee83a 	callr	r2
 402a798:	102f883a 	mov	r23,r2
 402a79c:	da000117 	ldw	r8,4(sp)
 402a7a0:	00bfe00e 	bge	zero,r2,402a724 <__alt_data_end+0xfffea724>
 402a7a4:	9de7c83a 	sub	r19,r19,r23
 402a7a8:	98001f26 	beq	r19,zero,402a828 <__sfvwrite_r+0x2fc>
 402a7ac:	a0800217 	ldw	r2,8(r20)
 402a7b0:	e5f9883a 	add	fp,fp,r23
 402a7b4:	95e5c83a 	sub	r18,r18,r23
 402a7b8:	15efc83a 	sub	r23,r2,r23
 402a7bc:	a5c00215 	stw	r23,8(r20)
 402a7c0:	b83f8726 	beq	r23,zero,402a5e0 <__alt_data_end+0xfffea5e0>
 402a7c4:	903fe11e 	bne	r18,zero,402a74c <__alt_data_end+0xfffea74c>
 402a7c8:	8f000017 	ldw	fp,0(r17)
 402a7cc:	8c800117 	ldw	r18,4(r17)
 402a7d0:	0011883a 	mov	r8,zero
 402a7d4:	8c400204 	addi	r17,r17,8
 402a7d8:	003fdb06 	br	402a748 <__alt_data_end+0xfffea748>
 402a7dc:	180d883a 	mov	r6,r3
 402a7e0:	e00b883a 	mov	r5,fp
 402a7e4:	da000115 	stw	r8,4(sp)
 402a7e8:	d8c00015 	stw	r3,0(sp)
 402a7ec:	402aa9c0 	call	402aa9c <memmove>
 402a7f0:	d8c00017 	ldw	r3,0(sp)
 402a7f4:	80800017 	ldw	r2,0(r16)
 402a7f8:	800b883a 	mov	r5,r16
 402a7fc:	a809883a 	mov	r4,r21
 402a800:	10c5883a 	add	r2,r2,r3
 402a804:	80800015 	stw	r2,0(r16)
 402a808:	d8c00015 	stw	r3,0(sp)
 402a80c:	4025eb00 	call	4025eb0 <_fflush_r>
 402a810:	d8c00017 	ldw	r3,0(sp)
 402a814:	da000117 	ldw	r8,4(sp)
 402a818:	103fc21e 	bne	r2,zero,402a724 <__alt_data_end+0xfffea724>
 402a81c:	182f883a 	mov	r23,r3
 402a820:	9de7c83a 	sub	r19,r19,r23
 402a824:	983fe11e 	bne	r19,zero,402a7ac <__alt_data_end+0xfffea7ac>
 402a828:	800b883a 	mov	r5,r16
 402a82c:	a809883a 	mov	r4,r21
 402a830:	4025eb00 	call	4025eb0 <_fflush_r>
 402a834:	103fbb1e 	bne	r2,zero,402a724 <__alt_data_end+0xfffea724>
 402a838:	0011883a 	mov	r8,zero
 402a83c:	003fdb06 	br	402a7ac <__alt_data_end+0xfffea7ac>
 402a840:	94c0012e 	bgeu	r18,r19,402a848 <__sfvwrite_r+0x31c>
 402a844:	9027883a 	mov	r19,r18
 402a848:	980d883a 	mov	r6,r19
 402a84c:	e00b883a 	mov	r5,fp
 402a850:	402aa9c0 	call	402aa9c <memmove>
 402a854:	80800217 	ldw	r2,8(r16)
 402a858:	80c00017 	ldw	r3,0(r16)
 402a85c:	14c5c83a 	sub	r2,r2,r19
 402a860:	1cc7883a 	add	r3,r3,r19
 402a864:	80800215 	stw	r2,8(r16)
 402a868:	80c00015 	stw	r3,0(r16)
 402a86c:	10004326 	beq	r2,zero,402a97c <__sfvwrite_r+0x450>
 402a870:	9805883a 	mov	r2,r19
 402a874:	003f8606 	br	402a690 <__alt_data_end+0xfffea690>
 402a878:	b00d883a 	mov	r6,r22
 402a87c:	e00b883a 	mov	r5,fp
 402a880:	da000115 	stw	r8,4(sp)
 402a884:	402aa9c0 	call	402aa9c <memmove>
 402a888:	80800217 	ldw	r2,8(r16)
 402a88c:	80c00017 	ldw	r3,0(r16)
 402a890:	da000117 	ldw	r8,4(sp)
 402a894:	1585c83a 	sub	r2,r2,r22
 402a898:	1dad883a 	add	r22,r3,r22
 402a89c:	80800215 	stw	r2,8(r16)
 402a8a0:	85800015 	stw	r22,0(r16)
 402a8a4:	003fbf06 	br	402a7a4 <__alt_data_end+0xfffea7a4>
 402a8a8:	81000017 	ldw	r4,0(r16)
 402a8ac:	9027883a 	mov	r19,r18
 402a8b0:	902f883a 	mov	r23,r18
 402a8b4:	003f6c06 	br	402a668 <__alt_data_end+0xfffea668>
 402a8b8:	900d883a 	mov	r6,r18
 402a8bc:	01400284 	movi	r5,10
 402a8c0:	e009883a 	mov	r4,fp
 402a8c4:	402733c0 	call	402733c <memchr>
 402a8c8:	10003e26 	beq	r2,zero,402a9c4 <__sfvwrite_r+0x498>
 402a8cc:	10800044 	addi	r2,r2,1
 402a8d0:	1727c83a 	sub	r19,r2,fp
 402a8d4:	02000044 	movi	r8,1
 402a8d8:	003f9d06 	br	402a750 <__alt_data_end+0xfffea750>
 402a8dc:	80800517 	ldw	r2,20(r16)
 402a8e0:	81400417 	ldw	r5,16(r16)
 402a8e4:	81c00017 	ldw	r7,0(r16)
 402a8e8:	10a7883a 	add	r19,r2,r2
 402a8ec:	9885883a 	add	r2,r19,r2
 402a8f0:	1026d7fa 	srli	r19,r2,31
 402a8f4:	396dc83a 	sub	r22,r7,r5
 402a8f8:	b1000044 	addi	r4,r22,1
 402a8fc:	9885883a 	add	r2,r19,r2
 402a900:	1027d07a 	srai	r19,r2,1
 402a904:	2485883a 	add	r2,r4,r18
 402a908:	980d883a 	mov	r6,r19
 402a90c:	9880022e 	bgeu	r19,r2,402a918 <__sfvwrite_r+0x3ec>
 402a910:	1027883a 	mov	r19,r2
 402a914:	100d883a 	mov	r6,r2
 402a918:	18c1000c 	andi	r3,r3,1024
 402a91c:	18001c26 	beq	r3,zero,402a990 <__sfvwrite_r+0x464>
 402a920:	300b883a 	mov	r5,r6
 402a924:	a809883a 	mov	r4,r21
 402a928:	4026b300 	call	4026b30 <_malloc_r>
 402a92c:	102f883a 	mov	r23,r2
 402a930:	10002926 	beq	r2,zero,402a9d8 <__sfvwrite_r+0x4ac>
 402a934:	81400417 	ldw	r5,16(r16)
 402a938:	b00d883a 	mov	r6,r22
 402a93c:	1009883a 	mov	r4,r2
 402a940:	40274200 	call	4027420 <memcpy>
 402a944:	8080030b 	ldhu	r2,12(r16)
 402a948:	00fedfc4 	movi	r3,-1153
 402a94c:	10c4703a 	and	r2,r2,r3
 402a950:	10802014 	ori	r2,r2,128
 402a954:	8080030d 	sth	r2,12(r16)
 402a958:	bd89883a 	add	r4,r23,r22
 402a95c:	9d8fc83a 	sub	r7,r19,r22
 402a960:	85c00415 	stw	r23,16(r16)
 402a964:	84c00515 	stw	r19,20(r16)
 402a968:	81000015 	stw	r4,0(r16)
 402a96c:	9027883a 	mov	r19,r18
 402a970:	81c00215 	stw	r7,8(r16)
 402a974:	902f883a 	mov	r23,r18
 402a978:	003f3b06 	br	402a668 <__alt_data_end+0xfffea668>
 402a97c:	800b883a 	mov	r5,r16
 402a980:	a809883a 	mov	r4,r21
 402a984:	4025eb00 	call	4025eb0 <_fflush_r>
 402a988:	103fb926 	beq	r2,zero,402a870 <__alt_data_end+0xfffea870>
 402a98c:	003f6506 	br	402a724 <__alt_data_end+0xfffea724>
 402a990:	a809883a 	mov	r4,r21
 402a994:	402ac580 	call	402ac58 <_realloc_r>
 402a998:	102f883a 	mov	r23,r2
 402a99c:	103fee1e 	bne	r2,zero,402a958 <__alt_data_end+0xfffea958>
 402a9a0:	81400417 	ldw	r5,16(r16)
 402a9a4:	a809883a 	mov	r4,r21
 402a9a8:	40264000 	call	4026400 <_free_r>
 402a9ac:	8080030b 	ldhu	r2,12(r16)
 402a9b0:	00ffdfc4 	movi	r3,-129
 402a9b4:	1884703a 	and	r2,r3,r2
 402a9b8:	00c00304 	movi	r3,12
 402a9bc:	a8c00015 	stw	r3,0(r21)
 402a9c0:	003f5906 	br	402a728 <__alt_data_end+0xfffea728>
 402a9c4:	94c00044 	addi	r19,r18,1
 402a9c8:	02000044 	movi	r8,1
 402a9cc:	003f6006 	br	402a750 <__alt_data_end+0xfffea750>
 402a9d0:	00bfffc4 	movi	r2,-1
 402a9d4:	003f0306 	br	402a5e4 <__alt_data_end+0xfffea5e4>
 402a9d8:	00800304 	movi	r2,12
 402a9dc:	a8800015 	stw	r2,0(r21)
 402a9e0:	8080030b 	ldhu	r2,12(r16)
 402a9e4:	003f5006 	br	402a728 <__alt_data_end+0xfffea728>

0402a9e8 <_isatty_r>:
 402a9e8:	defffd04 	addi	sp,sp,-12
 402a9ec:	dc000015 	stw	r16,0(sp)
 402a9f0:	040100f4 	movhi	r16,1027
 402a9f4:	dc400115 	stw	r17,4(sp)
 402a9f8:	841c9204 	addi	r16,r16,29256
 402a9fc:	2023883a 	mov	r17,r4
 402aa00:	2809883a 	mov	r4,r5
 402aa04:	dfc00215 	stw	ra,8(sp)
 402aa08:	80000015 	stw	zero,0(r16)
 402aa0c:	402eb8c0 	call	402eb8c <isatty>
 402aa10:	00ffffc4 	movi	r3,-1
 402aa14:	10c00526 	beq	r2,r3,402aa2c <_isatty_r+0x44>
 402aa18:	dfc00217 	ldw	ra,8(sp)
 402aa1c:	dc400117 	ldw	r17,4(sp)
 402aa20:	dc000017 	ldw	r16,0(sp)
 402aa24:	dec00304 	addi	sp,sp,12
 402aa28:	f800283a 	ret
 402aa2c:	80c00017 	ldw	r3,0(r16)
 402aa30:	183ff926 	beq	r3,zero,402aa18 <__alt_data_end+0xfffeaa18>
 402aa34:	88c00015 	stw	r3,0(r17)
 402aa38:	003ff706 	br	402aa18 <__alt_data_end+0xfffeaa18>

0402aa3c <_lseek_r>:
 402aa3c:	defffd04 	addi	sp,sp,-12
 402aa40:	2805883a 	mov	r2,r5
 402aa44:	dc000015 	stw	r16,0(sp)
 402aa48:	040100f4 	movhi	r16,1027
 402aa4c:	dc400115 	stw	r17,4(sp)
 402aa50:	300b883a 	mov	r5,r6
 402aa54:	841c9204 	addi	r16,r16,29256
 402aa58:	2023883a 	mov	r17,r4
 402aa5c:	380d883a 	mov	r6,r7
 402aa60:	1009883a 	mov	r4,r2
 402aa64:	dfc00215 	stw	ra,8(sp)
 402aa68:	80000015 	stw	zero,0(r16)
 402aa6c:	402ed580 	call	402ed58 <lseek>
 402aa70:	00ffffc4 	movi	r3,-1
 402aa74:	10c00526 	beq	r2,r3,402aa8c <_lseek_r+0x50>
 402aa78:	dfc00217 	ldw	ra,8(sp)
 402aa7c:	dc400117 	ldw	r17,4(sp)
 402aa80:	dc000017 	ldw	r16,0(sp)
 402aa84:	dec00304 	addi	sp,sp,12
 402aa88:	f800283a 	ret
 402aa8c:	80c00017 	ldw	r3,0(r16)
 402aa90:	183ff926 	beq	r3,zero,402aa78 <__alt_data_end+0xfffeaa78>
 402aa94:	88c00015 	stw	r3,0(r17)
 402aa98:	003ff706 	br	402aa78 <__alt_data_end+0xfffeaa78>

0402aa9c <memmove>:
 402aa9c:	2005883a 	mov	r2,r4
 402aaa0:	29000b2e 	bgeu	r5,r4,402aad0 <memmove+0x34>
 402aaa4:	298f883a 	add	r7,r5,r6
 402aaa8:	21c0092e 	bgeu	r4,r7,402aad0 <memmove+0x34>
 402aaac:	2187883a 	add	r3,r4,r6
 402aab0:	198bc83a 	sub	r5,r3,r6
 402aab4:	30004826 	beq	r6,zero,402abd8 <memmove+0x13c>
 402aab8:	39ffffc4 	addi	r7,r7,-1
 402aabc:	39000003 	ldbu	r4,0(r7)
 402aac0:	18ffffc4 	addi	r3,r3,-1
 402aac4:	19000005 	stb	r4,0(r3)
 402aac8:	28fffb1e 	bne	r5,r3,402aab8 <__alt_data_end+0xfffeaab8>
 402aacc:	f800283a 	ret
 402aad0:	00c003c4 	movi	r3,15
 402aad4:	1980412e 	bgeu	r3,r6,402abdc <memmove+0x140>
 402aad8:	2886b03a 	or	r3,r5,r2
 402aadc:	18c000cc 	andi	r3,r3,3
 402aae0:	1800401e 	bne	r3,zero,402abe4 <memmove+0x148>
 402aae4:	33fffc04 	addi	r15,r6,-16
 402aae8:	781ed13a 	srli	r15,r15,4
 402aaec:	28c00104 	addi	r3,r5,4
 402aaf0:	13400104 	addi	r13,r2,4
 402aaf4:	781c913a 	slli	r14,r15,4
 402aaf8:	2b000204 	addi	r12,r5,8
 402aafc:	12c00204 	addi	r11,r2,8
 402ab00:	73800504 	addi	r14,r14,20
 402ab04:	2a800304 	addi	r10,r5,12
 402ab08:	12400304 	addi	r9,r2,12
 402ab0c:	2b9d883a 	add	r14,r5,r14
 402ab10:	2811883a 	mov	r8,r5
 402ab14:	100f883a 	mov	r7,r2
 402ab18:	41000017 	ldw	r4,0(r8)
 402ab1c:	39c00404 	addi	r7,r7,16
 402ab20:	18c00404 	addi	r3,r3,16
 402ab24:	393ffc15 	stw	r4,-16(r7)
 402ab28:	193ffc17 	ldw	r4,-16(r3)
 402ab2c:	6b400404 	addi	r13,r13,16
 402ab30:	5ac00404 	addi	r11,r11,16
 402ab34:	693ffc15 	stw	r4,-16(r13)
 402ab38:	61000017 	ldw	r4,0(r12)
 402ab3c:	4a400404 	addi	r9,r9,16
 402ab40:	42000404 	addi	r8,r8,16
 402ab44:	593ffc15 	stw	r4,-16(r11)
 402ab48:	51000017 	ldw	r4,0(r10)
 402ab4c:	63000404 	addi	r12,r12,16
 402ab50:	52800404 	addi	r10,r10,16
 402ab54:	493ffc15 	stw	r4,-16(r9)
 402ab58:	1bbfef1e 	bne	r3,r14,402ab18 <__alt_data_end+0xfffeab18>
 402ab5c:	79000044 	addi	r4,r15,1
 402ab60:	2008913a 	slli	r4,r4,4
 402ab64:	328003cc 	andi	r10,r6,15
 402ab68:	02c000c4 	movi	r11,3
 402ab6c:	1107883a 	add	r3,r2,r4
 402ab70:	290b883a 	add	r5,r5,r4
 402ab74:	5a801e2e 	bgeu	r11,r10,402abf0 <memmove+0x154>
 402ab78:	1813883a 	mov	r9,r3
 402ab7c:	2811883a 	mov	r8,r5
 402ab80:	500f883a 	mov	r7,r10
 402ab84:	41000017 	ldw	r4,0(r8)
 402ab88:	4a400104 	addi	r9,r9,4
 402ab8c:	39ffff04 	addi	r7,r7,-4
 402ab90:	493fff15 	stw	r4,-4(r9)
 402ab94:	42000104 	addi	r8,r8,4
 402ab98:	59fffa36 	bltu	r11,r7,402ab84 <__alt_data_end+0xfffeab84>
 402ab9c:	513fff04 	addi	r4,r10,-4
 402aba0:	2008d0ba 	srli	r4,r4,2
 402aba4:	318000cc 	andi	r6,r6,3
 402aba8:	21000044 	addi	r4,r4,1
 402abac:	2109883a 	add	r4,r4,r4
 402abb0:	2109883a 	add	r4,r4,r4
 402abb4:	1907883a 	add	r3,r3,r4
 402abb8:	290b883a 	add	r5,r5,r4
 402abbc:	30000b26 	beq	r6,zero,402abec <memmove+0x150>
 402abc0:	198d883a 	add	r6,r3,r6
 402abc4:	29c00003 	ldbu	r7,0(r5)
 402abc8:	18c00044 	addi	r3,r3,1
 402abcc:	29400044 	addi	r5,r5,1
 402abd0:	19ffffc5 	stb	r7,-1(r3)
 402abd4:	19bffb1e 	bne	r3,r6,402abc4 <__alt_data_end+0xfffeabc4>
 402abd8:	f800283a 	ret
 402abdc:	1007883a 	mov	r3,r2
 402abe0:	003ff606 	br	402abbc <__alt_data_end+0xfffeabbc>
 402abe4:	1007883a 	mov	r3,r2
 402abe8:	003ff506 	br	402abc0 <__alt_data_end+0xfffeabc0>
 402abec:	f800283a 	ret
 402abf0:	500d883a 	mov	r6,r10
 402abf4:	003ff106 	br	402abbc <__alt_data_end+0xfffeabbc>

0402abf8 <_read_r>:
 402abf8:	defffd04 	addi	sp,sp,-12
 402abfc:	2805883a 	mov	r2,r5
 402ac00:	dc000015 	stw	r16,0(sp)
 402ac04:	040100f4 	movhi	r16,1027
 402ac08:	dc400115 	stw	r17,4(sp)
 402ac0c:	300b883a 	mov	r5,r6
 402ac10:	841c9204 	addi	r16,r16,29256
 402ac14:	2023883a 	mov	r17,r4
 402ac18:	380d883a 	mov	r6,r7
 402ac1c:	1009883a 	mov	r4,r2
 402ac20:	dfc00215 	stw	ra,8(sp)
 402ac24:	80000015 	stw	zero,0(r16)
 402ac28:	402f1940 	call	402f194 <read>
 402ac2c:	00ffffc4 	movi	r3,-1
 402ac30:	10c00526 	beq	r2,r3,402ac48 <_read_r+0x50>
 402ac34:	dfc00217 	ldw	ra,8(sp)
 402ac38:	dc400117 	ldw	r17,4(sp)
 402ac3c:	dc000017 	ldw	r16,0(sp)
 402ac40:	dec00304 	addi	sp,sp,12
 402ac44:	f800283a 	ret
 402ac48:	80c00017 	ldw	r3,0(r16)
 402ac4c:	183ff926 	beq	r3,zero,402ac34 <__alt_data_end+0xfffeac34>
 402ac50:	88c00015 	stw	r3,0(r17)
 402ac54:	003ff706 	br	402ac34 <__alt_data_end+0xfffeac34>

0402ac58 <_realloc_r>:
 402ac58:	defff604 	addi	sp,sp,-40
 402ac5c:	dc800215 	stw	r18,8(sp)
 402ac60:	dfc00915 	stw	ra,36(sp)
 402ac64:	df000815 	stw	fp,32(sp)
 402ac68:	ddc00715 	stw	r23,28(sp)
 402ac6c:	dd800615 	stw	r22,24(sp)
 402ac70:	dd400515 	stw	r21,20(sp)
 402ac74:	dd000415 	stw	r20,16(sp)
 402ac78:	dcc00315 	stw	r19,12(sp)
 402ac7c:	dc400115 	stw	r17,4(sp)
 402ac80:	dc000015 	stw	r16,0(sp)
 402ac84:	3025883a 	mov	r18,r6
 402ac88:	2800b726 	beq	r5,zero,402af68 <_realloc_r+0x310>
 402ac8c:	282b883a 	mov	r21,r5
 402ac90:	2029883a 	mov	r20,r4
 402ac94:	402eea80 	call	402eea8 <__malloc_lock>
 402ac98:	a8bfff17 	ldw	r2,-4(r21)
 402ac9c:	043fff04 	movi	r16,-4
 402aca0:	90c002c4 	addi	r3,r18,11
 402aca4:	01000584 	movi	r4,22
 402aca8:	acfffe04 	addi	r19,r21,-8
 402acac:	1420703a 	and	r16,r2,r16
 402acb0:	20c0332e 	bgeu	r4,r3,402ad80 <_realloc_r+0x128>
 402acb4:	047ffe04 	movi	r17,-8
 402acb8:	1c62703a 	and	r17,r3,r17
 402acbc:	8807883a 	mov	r3,r17
 402acc0:	88005816 	blt	r17,zero,402ae24 <_realloc_r+0x1cc>
 402acc4:	8c805736 	bltu	r17,r18,402ae24 <_realloc_r+0x1cc>
 402acc8:	80c0300e 	bge	r16,r3,402ad8c <_realloc_r+0x134>
 402accc:	070100f4 	movhi	fp,1027
 402acd0:	e70f8904 	addi	fp,fp,15908
 402acd4:	e1c00217 	ldw	r7,8(fp)
 402acd8:	9c09883a 	add	r4,r19,r16
 402acdc:	22000117 	ldw	r8,4(r4)
 402ace0:	21c06326 	beq	r4,r7,402ae70 <_realloc_r+0x218>
 402ace4:	017fff84 	movi	r5,-2
 402ace8:	414a703a 	and	r5,r8,r5
 402acec:	214b883a 	add	r5,r4,r5
 402acf0:	29800117 	ldw	r6,4(r5)
 402acf4:	3180004c 	andi	r6,r6,1
 402acf8:	30003f26 	beq	r6,zero,402adf8 <_realloc_r+0x1a0>
 402acfc:	1080004c 	andi	r2,r2,1
 402ad00:	10008326 	beq	r2,zero,402af10 <_realloc_r+0x2b8>
 402ad04:	900b883a 	mov	r5,r18
 402ad08:	a009883a 	mov	r4,r20
 402ad0c:	4026b300 	call	4026b30 <_malloc_r>
 402ad10:	1025883a 	mov	r18,r2
 402ad14:	10011e26 	beq	r2,zero,402b190 <_realloc_r+0x538>
 402ad18:	a93fff17 	ldw	r4,-4(r21)
 402ad1c:	10fffe04 	addi	r3,r2,-8
 402ad20:	00bfff84 	movi	r2,-2
 402ad24:	2084703a 	and	r2,r4,r2
 402ad28:	9885883a 	add	r2,r19,r2
 402ad2c:	1880ee26 	beq	r3,r2,402b0e8 <_realloc_r+0x490>
 402ad30:	81bfff04 	addi	r6,r16,-4
 402ad34:	00800904 	movi	r2,36
 402ad38:	1180b836 	bltu	r2,r6,402b01c <_realloc_r+0x3c4>
 402ad3c:	00c004c4 	movi	r3,19
 402ad40:	19809636 	bltu	r3,r6,402af9c <_realloc_r+0x344>
 402ad44:	9005883a 	mov	r2,r18
 402ad48:	a807883a 	mov	r3,r21
 402ad4c:	19000017 	ldw	r4,0(r3)
 402ad50:	11000015 	stw	r4,0(r2)
 402ad54:	19000117 	ldw	r4,4(r3)
 402ad58:	11000115 	stw	r4,4(r2)
 402ad5c:	18c00217 	ldw	r3,8(r3)
 402ad60:	10c00215 	stw	r3,8(r2)
 402ad64:	a80b883a 	mov	r5,r21
 402ad68:	a009883a 	mov	r4,r20
 402ad6c:	40264000 	call	4026400 <_free_r>
 402ad70:	a009883a 	mov	r4,r20
 402ad74:	402eecc0 	call	402eecc <__malloc_unlock>
 402ad78:	9005883a 	mov	r2,r18
 402ad7c:	00001206 	br	402adc8 <_realloc_r+0x170>
 402ad80:	00c00404 	movi	r3,16
 402ad84:	1823883a 	mov	r17,r3
 402ad88:	003fce06 	br	402acc4 <__alt_data_end+0xfffeacc4>
 402ad8c:	a825883a 	mov	r18,r21
 402ad90:	8445c83a 	sub	r2,r16,r17
 402ad94:	00c003c4 	movi	r3,15
 402ad98:	18802636 	bltu	r3,r2,402ae34 <_realloc_r+0x1dc>
 402ad9c:	99800117 	ldw	r6,4(r19)
 402ada0:	9c07883a 	add	r3,r19,r16
 402ada4:	3180004c 	andi	r6,r6,1
 402ada8:	3420b03a 	or	r16,r6,r16
 402adac:	9c000115 	stw	r16,4(r19)
 402adb0:	18800117 	ldw	r2,4(r3)
 402adb4:	10800054 	ori	r2,r2,1
 402adb8:	18800115 	stw	r2,4(r3)
 402adbc:	a009883a 	mov	r4,r20
 402adc0:	402eecc0 	call	402eecc <__malloc_unlock>
 402adc4:	9005883a 	mov	r2,r18
 402adc8:	dfc00917 	ldw	ra,36(sp)
 402adcc:	df000817 	ldw	fp,32(sp)
 402add0:	ddc00717 	ldw	r23,28(sp)
 402add4:	dd800617 	ldw	r22,24(sp)
 402add8:	dd400517 	ldw	r21,20(sp)
 402addc:	dd000417 	ldw	r20,16(sp)
 402ade0:	dcc00317 	ldw	r19,12(sp)
 402ade4:	dc800217 	ldw	r18,8(sp)
 402ade8:	dc400117 	ldw	r17,4(sp)
 402adec:	dc000017 	ldw	r16,0(sp)
 402adf0:	dec00a04 	addi	sp,sp,40
 402adf4:	f800283a 	ret
 402adf8:	017fff04 	movi	r5,-4
 402adfc:	414a703a 	and	r5,r8,r5
 402ae00:	814d883a 	add	r6,r16,r5
 402ae04:	30c01f16 	blt	r6,r3,402ae84 <_realloc_r+0x22c>
 402ae08:	20800317 	ldw	r2,12(r4)
 402ae0c:	20c00217 	ldw	r3,8(r4)
 402ae10:	a825883a 	mov	r18,r21
 402ae14:	3021883a 	mov	r16,r6
 402ae18:	18800315 	stw	r2,12(r3)
 402ae1c:	10c00215 	stw	r3,8(r2)
 402ae20:	003fdb06 	br	402ad90 <__alt_data_end+0xfffead90>
 402ae24:	00800304 	movi	r2,12
 402ae28:	a0800015 	stw	r2,0(r20)
 402ae2c:	0005883a 	mov	r2,zero
 402ae30:	003fe506 	br	402adc8 <__alt_data_end+0xfffeadc8>
 402ae34:	98c00117 	ldw	r3,4(r19)
 402ae38:	9c4b883a 	add	r5,r19,r17
 402ae3c:	11000054 	ori	r4,r2,1
 402ae40:	18c0004c 	andi	r3,r3,1
 402ae44:	1c62b03a 	or	r17,r3,r17
 402ae48:	9c400115 	stw	r17,4(r19)
 402ae4c:	29000115 	stw	r4,4(r5)
 402ae50:	2885883a 	add	r2,r5,r2
 402ae54:	10c00117 	ldw	r3,4(r2)
 402ae58:	29400204 	addi	r5,r5,8
 402ae5c:	a009883a 	mov	r4,r20
 402ae60:	18c00054 	ori	r3,r3,1
 402ae64:	10c00115 	stw	r3,4(r2)
 402ae68:	40264000 	call	4026400 <_free_r>
 402ae6c:	003fd306 	br	402adbc <__alt_data_end+0xfffeadbc>
 402ae70:	017fff04 	movi	r5,-4
 402ae74:	414a703a 	and	r5,r8,r5
 402ae78:	89800404 	addi	r6,r17,16
 402ae7c:	8151883a 	add	r8,r16,r5
 402ae80:	4180590e 	bge	r8,r6,402afe8 <_realloc_r+0x390>
 402ae84:	1080004c 	andi	r2,r2,1
 402ae88:	103f9e1e 	bne	r2,zero,402ad04 <__alt_data_end+0xfffead04>
 402ae8c:	adbffe17 	ldw	r22,-8(r21)
 402ae90:	00bfff04 	movi	r2,-4
 402ae94:	9dadc83a 	sub	r22,r19,r22
 402ae98:	b1800117 	ldw	r6,4(r22)
 402ae9c:	3084703a 	and	r2,r6,r2
 402aea0:	20002026 	beq	r4,zero,402af24 <_realloc_r+0x2cc>
 402aea4:	80af883a 	add	r23,r16,r2
 402aea8:	b96f883a 	add	r23,r23,r5
 402aeac:	21c05f26 	beq	r4,r7,402b02c <_realloc_r+0x3d4>
 402aeb0:	b8c01c16 	blt	r23,r3,402af24 <_realloc_r+0x2cc>
 402aeb4:	20800317 	ldw	r2,12(r4)
 402aeb8:	20c00217 	ldw	r3,8(r4)
 402aebc:	81bfff04 	addi	r6,r16,-4
 402aec0:	01000904 	movi	r4,36
 402aec4:	18800315 	stw	r2,12(r3)
 402aec8:	10c00215 	stw	r3,8(r2)
 402aecc:	b0c00217 	ldw	r3,8(r22)
 402aed0:	b0800317 	ldw	r2,12(r22)
 402aed4:	b4800204 	addi	r18,r22,8
 402aed8:	18800315 	stw	r2,12(r3)
 402aedc:	10c00215 	stw	r3,8(r2)
 402aee0:	21801b36 	bltu	r4,r6,402af50 <_realloc_r+0x2f8>
 402aee4:	008004c4 	movi	r2,19
 402aee8:	1180352e 	bgeu	r2,r6,402afc0 <_realloc_r+0x368>
 402aeec:	a8800017 	ldw	r2,0(r21)
 402aef0:	b0800215 	stw	r2,8(r22)
 402aef4:	a8800117 	ldw	r2,4(r21)
 402aef8:	b0800315 	stw	r2,12(r22)
 402aefc:	008006c4 	movi	r2,27
 402af00:	11807f36 	bltu	r2,r6,402b100 <_realloc_r+0x4a8>
 402af04:	b0800404 	addi	r2,r22,16
 402af08:	ad400204 	addi	r21,r21,8
 402af0c:	00002d06 	br	402afc4 <_realloc_r+0x36c>
 402af10:	adbffe17 	ldw	r22,-8(r21)
 402af14:	00bfff04 	movi	r2,-4
 402af18:	9dadc83a 	sub	r22,r19,r22
 402af1c:	b1000117 	ldw	r4,4(r22)
 402af20:	2084703a 	and	r2,r4,r2
 402af24:	b03f7726 	beq	r22,zero,402ad04 <__alt_data_end+0xfffead04>
 402af28:	80af883a 	add	r23,r16,r2
 402af2c:	b8ff7516 	blt	r23,r3,402ad04 <__alt_data_end+0xfffead04>
 402af30:	b0800317 	ldw	r2,12(r22)
 402af34:	b0c00217 	ldw	r3,8(r22)
 402af38:	81bfff04 	addi	r6,r16,-4
 402af3c:	01000904 	movi	r4,36
 402af40:	18800315 	stw	r2,12(r3)
 402af44:	10c00215 	stw	r3,8(r2)
 402af48:	b4800204 	addi	r18,r22,8
 402af4c:	21bfe52e 	bgeu	r4,r6,402aee4 <__alt_data_end+0xfffeaee4>
 402af50:	a80b883a 	mov	r5,r21
 402af54:	9009883a 	mov	r4,r18
 402af58:	402aa9c0 	call	402aa9c <memmove>
 402af5c:	b821883a 	mov	r16,r23
 402af60:	b027883a 	mov	r19,r22
 402af64:	003f8a06 	br	402ad90 <__alt_data_end+0xfffead90>
 402af68:	300b883a 	mov	r5,r6
 402af6c:	dfc00917 	ldw	ra,36(sp)
 402af70:	df000817 	ldw	fp,32(sp)
 402af74:	ddc00717 	ldw	r23,28(sp)
 402af78:	dd800617 	ldw	r22,24(sp)
 402af7c:	dd400517 	ldw	r21,20(sp)
 402af80:	dd000417 	ldw	r20,16(sp)
 402af84:	dcc00317 	ldw	r19,12(sp)
 402af88:	dc800217 	ldw	r18,8(sp)
 402af8c:	dc400117 	ldw	r17,4(sp)
 402af90:	dc000017 	ldw	r16,0(sp)
 402af94:	dec00a04 	addi	sp,sp,40
 402af98:	4026b301 	jmpi	4026b30 <_malloc_r>
 402af9c:	a8c00017 	ldw	r3,0(r21)
 402afa0:	90c00015 	stw	r3,0(r18)
 402afa4:	a8c00117 	ldw	r3,4(r21)
 402afa8:	90c00115 	stw	r3,4(r18)
 402afac:	00c006c4 	movi	r3,27
 402afb0:	19804536 	bltu	r3,r6,402b0c8 <_realloc_r+0x470>
 402afb4:	90800204 	addi	r2,r18,8
 402afb8:	a8c00204 	addi	r3,r21,8
 402afbc:	003f6306 	br	402ad4c <__alt_data_end+0xfffead4c>
 402afc0:	9005883a 	mov	r2,r18
 402afc4:	a8c00017 	ldw	r3,0(r21)
 402afc8:	b821883a 	mov	r16,r23
 402afcc:	b027883a 	mov	r19,r22
 402afd0:	10c00015 	stw	r3,0(r2)
 402afd4:	a8c00117 	ldw	r3,4(r21)
 402afd8:	10c00115 	stw	r3,4(r2)
 402afdc:	a8c00217 	ldw	r3,8(r21)
 402afe0:	10c00215 	stw	r3,8(r2)
 402afe4:	003f6a06 	br	402ad90 <__alt_data_end+0xfffead90>
 402afe8:	9c67883a 	add	r19,r19,r17
 402afec:	4445c83a 	sub	r2,r8,r17
 402aff0:	e4c00215 	stw	r19,8(fp)
 402aff4:	10800054 	ori	r2,r2,1
 402aff8:	98800115 	stw	r2,4(r19)
 402affc:	a8bfff17 	ldw	r2,-4(r21)
 402b000:	a009883a 	mov	r4,r20
 402b004:	1080004c 	andi	r2,r2,1
 402b008:	1462b03a 	or	r17,r2,r17
 402b00c:	ac7fff15 	stw	r17,-4(r21)
 402b010:	402eecc0 	call	402eecc <__malloc_unlock>
 402b014:	a805883a 	mov	r2,r21
 402b018:	003f6b06 	br	402adc8 <__alt_data_end+0xfffeadc8>
 402b01c:	a80b883a 	mov	r5,r21
 402b020:	9009883a 	mov	r4,r18
 402b024:	402aa9c0 	call	402aa9c <memmove>
 402b028:	003f4e06 	br	402ad64 <__alt_data_end+0xfffead64>
 402b02c:	89000404 	addi	r4,r17,16
 402b030:	b93fbc16 	blt	r23,r4,402af24 <__alt_data_end+0xfffeaf24>
 402b034:	b0800317 	ldw	r2,12(r22)
 402b038:	b0c00217 	ldw	r3,8(r22)
 402b03c:	81bfff04 	addi	r6,r16,-4
 402b040:	01000904 	movi	r4,36
 402b044:	18800315 	stw	r2,12(r3)
 402b048:	10c00215 	stw	r3,8(r2)
 402b04c:	b4800204 	addi	r18,r22,8
 402b050:	21804336 	bltu	r4,r6,402b160 <_realloc_r+0x508>
 402b054:	008004c4 	movi	r2,19
 402b058:	11803f2e 	bgeu	r2,r6,402b158 <_realloc_r+0x500>
 402b05c:	a8800017 	ldw	r2,0(r21)
 402b060:	b0800215 	stw	r2,8(r22)
 402b064:	a8800117 	ldw	r2,4(r21)
 402b068:	b0800315 	stw	r2,12(r22)
 402b06c:	008006c4 	movi	r2,27
 402b070:	11803f36 	bltu	r2,r6,402b170 <_realloc_r+0x518>
 402b074:	b0800404 	addi	r2,r22,16
 402b078:	ad400204 	addi	r21,r21,8
 402b07c:	a8c00017 	ldw	r3,0(r21)
 402b080:	10c00015 	stw	r3,0(r2)
 402b084:	a8c00117 	ldw	r3,4(r21)
 402b088:	10c00115 	stw	r3,4(r2)
 402b08c:	a8c00217 	ldw	r3,8(r21)
 402b090:	10c00215 	stw	r3,8(r2)
 402b094:	b447883a 	add	r3,r22,r17
 402b098:	bc45c83a 	sub	r2,r23,r17
 402b09c:	e0c00215 	stw	r3,8(fp)
 402b0a0:	10800054 	ori	r2,r2,1
 402b0a4:	18800115 	stw	r2,4(r3)
 402b0a8:	b0800117 	ldw	r2,4(r22)
 402b0ac:	a009883a 	mov	r4,r20
 402b0b0:	1080004c 	andi	r2,r2,1
 402b0b4:	1462b03a 	or	r17,r2,r17
 402b0b8:	b4400115 	stw	r17,4(r22)
 402b0bc:	402eecc0 	call	402eecc <__malloc_unlock>
 402b0c0:	9005883a 	mov	r2,r18
 402b0c4:	003f4006 	br	402adc8 <__alt_data_end+0xfffeadc8>
 402b0c8:	a8c00217 	ldw	r3,8(r21)
 402b0cc:	90c00215 	stw	r3,8(r18)
 402b0d0:	a8c00317 	ldw	r3,12(r21)
 402b0d4:	90c00315 	stw	r3,12(r18)
 402b0d8:	30801126 	beq	r6,r2,402b120 <_realloc_r+0x4c8>
 402b0dc:	90800404 	addi	r2,r18,16
 402b0e0:	a8c00404 	addi	r3,r21,16
 402b0e4:	003f1906 	br	402ad4c <__alt_data_end+0xfffead4c>
 402b0e8:	90ffff17 	ldw	r3,-4(r18)
 402b0ec:	00bfff04 	movi	r2,-4
 402b0f0:	a825883a 	mov	r18,r21
 402b0f4:	1884703a 	and	r2,r3,r2
 402b0f8:	80a1883a 	add	r16,r16,r2
 402b0fc:	003f2406 	br	402ad90 <__alt_data_end+0xfffead90>
 402b100:	a8800217 	ldw	r2,8(r21)
 402b104:	b0800415 	stw	r2,16(r22)
 402b108:	a8800317 	ldw	r2,12(r21)
 402b10c:	b0800515 	stw	r2,20(r22)
 402b110:	31000a26 	beq	r6,r4,402b13c <_realloc_r+0x4e4>
 402b114:	b0800604 	addi	r2,r22,24
 402b118:	ad400404 	addi	r21,r21,16
 402b11c:	003fa906 	br	402afc4 <__alt_data_end+0xfffeafc4>
 402b120:	a9000417 	ldw	r4,16(r21)
 402b124:	90800604 	addi	r2,r18,24
 402b128:	a8c00604 	addi	r3,r21,24
 402b12c:	91000415 	stw	r4,16(r18)
 402b130:	a9000517 	ldw	r4,20(r21)
 402b134:	91000515 	stw	r4,20(r18)
 402b138:	003f0406 	br	402ad4c <__alt_data_end+0xfffead4c>
 402b13c:	a8c00417 	ldw	r3,16(r21)
 402b140:	ad400604 	addi	r21,r21,24
 402b144:	b0800804 	addi	r2,r22,32
 402b148:	b0c00615 	stw	r3,24(r22)
 402b14c:	a8ffff17 	ldw	r3,-4(r21)
 402b150:	b0c00715 	stw	r3,28(r22)
 402b154:	003f9b06 	br	402afc4 <__alt_data_end+0xfffeafc4>
 402b158:	9005883a 	mov	r2,r18
 402b15c:	003fc706 	br	402b07c <__alt_data_end+0xfffeb07c>
 402b160:	a80b883a 	mov	r5,r21
 402b164:	9009883a 	mov	r4,r18
 402b168:	402aa9c0 	call	402aa9c <memmove>
 402b16c:	003fc906 	br	402b094 <__alt_data_end+0xfffeb094>
 402b170:	a8800217 	ldw	r2,8(r21)
 402b174:	b0800415 	stw	r2,16(r22)
 402b178:	a8800317 	ldw	r2,12(r21)
 402b17c:	b0800515 	stw	r2,20(r22)
 402b180:	31000726 	beq	r6,r4,402b1a0 <_realloc_r+0x548>
 402b184:	b0800604 	addi	r2,r22,24
 402b188:	ad400404 	addi	r21,r21,16
 402b18c:	003fbb06 	br	402b07c <__alt_data_end+0xfffeb07c>
 402b190:	a009883a 	mov	r4,r20
 402b194:	402eecc0 	call	402eecc <__malloc_unlock>
 402b198:	0005883a 	mov	r2,zero
 402b19c:	003f0a06 	br	402adc8 <__alt_data_end+0xfffeadc8>
 402b1a0:	a8c00417 	ldw	r3,16(r21)
 402b1a4:	ad400604 	addi	r21,r21,24
 402b1a8:	b0800804 	addi	r2,r22,32
 402b1ac:	b0c00615 	stw	r3,24(r22)
 402b1b0:	a8ffff17 	ldw	r3,-4(r21)
 402b1b4:	b0c00715 	stw	r3,28(r22)
 402b1b8:	003fb006 	br	402b07c <__alt_data_end+0xfffeb07c>

0402b1bc <__swbuf_r>:
 402b1bc:	defffb04 	addi	sp,sp,-20
 402b1c0:	dcc00315 	stw	r19,12(sp)
 402b1c4:	dc800215 	stw	r18,8(sp)
 402b1c8:	dc000015 	stw	r16,0(sp)
 402b1cc:	dfc00415 	stw	ra,16(sp)
 402b1d0:	dc400115 	stw	r17,4(sp)
 402b1d4:	2025883a 	mov	r18,r4
 402b1d8:	2827883a 	mov	r19,r5
 402b1dc:	3021883a 	mov	r16,r6
 402b1e0:	20000226 	beq	r4,zero,402b1ec <__swbuf_r+0x30>
 402b1e4:	20800e17 	ldw	r2,56(r4)
 402b1e8:	10004226 	beq	r2,zero,402b2f4 <__swbuf_r+0x138>
 402b1ec:	80800617 	ldw	r2,24(r16)
 402b1f0:	8100030b 	ldhu	r4,12(r16)
 402b1f4:	80800215 	stw	r2,8(r16)
 402b1f8:	2080020c 	andi	r2,r4,8
 402b1fc:	10003626 	beq	r2,zero,402b2d8 <__swbuf_r+0x11c>
 402b200:	80c00417 	ldw	r3,16(r16)
 402b204:	18003426 	beq	r3,zero,402b2d8 <__swbuf_r+0x11c>
 402b208:	2088000c 	andi	r2,r4,8192
 402b20c:	9c403fcc 	andi	r17,r19,255
 402b210:	10001a26 	beq	r2,zero,402b27c <__swbuf_r+0xc0>
 402b214:	80800017 	ldw	r2,0(r16)
 402b218:	81000517 	ldw	r4,20(r16)
 402b21c:	10c7c83a 	sub	r3,r2,r3
 402b220:	1900200e 	bge	r3,r4,402b2a4 <__swbuf_r+0xe8>
 402b224:	18c00044 	addi	r3,r3,1
 402b228:	81000217 	ldw	r4,8(r16)
 402b22c:	11400044 	addi	r5,r2,1
 402b230:	81400015 	stw	r5,0(r16)
 402b234:	213fffc4 	addi	r4,r4,-1
 402b238:	81000215 	stw	r4,8(r16)
 402b23c:	14c00005 	stb	r19,0(r2)
 402b240:	80800517 	ldw	r2,20(r16)
 402b244:	10c01e26 	beq	r2,r3,402b2c0 <__swbuf_r+0x104>
 402b248:	8080030b 	ldhu	r2,12(r16)
 402b24c:	1080004c 	andi	r2,r2,1
 402b250:	10000226 	beq	r2,zero,402b25c <__swbuf_r+0xa0>
 402b254:	00800284 	movi	r2,10
 402b258:	88801926 	beq	r17,r2,402b2c0 <__swbuf_r+0x104>
 402b25c:	8805883a 	mov	r2,r17
 402b260:	dfc00417 	ldw	ra,16(sp)
 402b264:	dcc00317 	ldw	r19,12(sp)
 402b268:	dc800217 	ldw	r18,8(sp)
 402b26c:	dc400117 	ldw	r17,4(sp)
 402b270:	dc000017 	ldw	r16,0(sp)
 402b274:	dec00504 	addi	sp,sp,20
 402b278:	f800283a 	ret
 402b27c:	81401917 	ldw	r5,100(r16)
 402b280:	00b7ffc4 	movi	r2,-8193
 402b284:	21080014 	ori	r4,r4,8192
 402b288:	2884703a 	and	r2,r5,r2
 402b28c:	80801915 	stw	r2,100(r16)
 402b290:	80800017 	ldw	r2,0(r16)
 402b294:	8100030d 	sth	r4,12(r16)
 402b298:	81000517 	ldw	r4,20(r16)
 402b29c:	10c7c83a 	sub	r3,r2,r3
 402b2a0:	193fe016 	blt	r3,r4,402b224 <__alt_data_end+0xfffeb224>
 402b2a4:	800b883a 	mov	r5,r16
 402b2a8:	9009883a 	mov	r4,r18
 402b2ac:	4025eb00 	call	4025eb0 <_fflush_r>
 402b2b0:	1000071e 	bne	r2,zero,402b2d0 <__swbuf_r+0x114>
 402b2b4:	80800017 	ldw	r2,0(r16)
 402b2b8:	00c00044 	movi	r3,1
 402b2bc:	003fda06 	br	402b228 <__alt_data_end+0xfffeb228>
 402b2c0:	800b883a 	mov	r5,r16
 402b2c4:	9009883a 	mov	r4,r18
 402b2c8:	4025eb00 	call	4025eb0 <_fflush_r>
 402b2cc:	103fe326 	beq	r2,zero,402b25c <__alt_data_end+0xfffeb25c>
 402b2d0:	00bfffc4 	movi	r2,-1
 402b2d4:	003fe206 	br	402b260 <__alt_data_end+0xfffeb260>
 402b2d8:	800b883a 	mov	r5,r16
 402b2dc:	9009883a 	mov	r4,r18
 402b2e0:	40242b80 	call	40242b8 <__swsetup_r>
 402b2e4:	103ffa1e 	bne	r2,zero,402b2d0 <__alt_data_end+0xfffeb2d0>
 402b2e8:	8100030b 	ldhu	r4,12(r16)
 402b2ec:	80c00417 	ldw	r3,16(r16)
 402b2f0:	003fc506 	br	402b208 <__alt_data_end+0xfffeb208>
 402b2f4:	402628c0 	call	402628c <__sinit>
 402b2f8:	003fbc06 	br	402b1ec <__alt_data_end+0xfffeb1ec>

0402b2fc <__swbuf>:
 402b2fc:	008100f4 	movhi	r2,1027
 402b300:	10956004 	addi	r2,r2,21888
 402b304:	280d883a 	mov	r6,r5
 402b308:	200b883a 	mov	r5,r4
 402b30c:	11000017 	ldw	r4,0(r2)
 402b310:	402b1bc1 	jmpi	402b1bc <__swbuf_r>

0402b314 <_wcrtomb_r>:
 402b314:	defff604 	addi	sp,sp,-40
 402b318:	008100f4 	movhi	r2,1027
 402b31c:	dc800815 	stw	r18,32(sp)
 402b320:	dc400715 	stw	r17,28(sp)
 402b324:	dc000615 	stw	r16,24(sp)
 402b328:	10956404 	addi	r2,r2,21904
 402b32c:	dfc00915 	stw	ra,36(sp)
 402b330:	2021883a 	mov	r16,r4
 402b334:	3823883a 	mov	r17,r7
 402b338:	14800017 	ldw	r18,0(r2)
 402b33c:	28001426 	beq	r5,zero,402b390 <_wcrtomb_r+0x7c>
 402b340:	d9400415 	stw	r5,16(sp)
 402b344:	d9800515 	stw	r6,20(sp)
 402b348:	40269140 	call	4026914 <__locale_charset>
 402b34c:	d9800517 	ldw	r6,20(sp)
 402b350:	d9400417 	ldw	r5,16(sp)
 402b354:	100f883a 	mov	r7,r2
 402b358:	dc400015 	stw	r17,0(sp)
 402b35c:	8009883a 	mov	r4,r16
 402b360:	903ee83a 	callr	r18
 402b364:	00ffffc4 	movi	r3,-1
 402b368:	10c0031e 	bne	r2,r3,402b378 <_wcrtomb_r+0x64>
 402b36c:	88000015 	stw	zero,0(r17)
 402b370:	00c02284 	movi	r3,138
 402b374:	80c00015 	stw	r3,0(r16)
 402b378:	dfc00917 	ldw	ra,36(sp)
 402b37c:	dc800817 	ldw	r18,32(sp)
 402b380:	dc400717 	ldw	r17,28(sp)
 402b384:	dc000617 	ldw	r16,24(sp)
 402b388:	dec00a04 	addi	sp,sp,40
 402b38c:	f800283a 	ret
 402b390:	40269140 	call	4026914 <__locale_charset>
 402b394:	100f883a 	mov	r7,r2
 402b398:	dc400015 	stw	r17,0(sp)
 402b39c:	000d883a 	mov	r6,zero
 402b3a0:	d9400104 	addi	r5,sp,4
 402b3a4:	8009883a 	mov	r4,r16
 402b3a8:	903ee83a 	callr	r18
 402b3ac:	003fed06 	br	402b364 <__alt_data_end+0xfffeb364>

0402b3b0 <wcrtomb>:
 402b3b0:	defff604 	addi	sp,sp,-40
 402b3b4:	008100f4 	movhi	r2,1027
 402b3b8:	dc800615 	stw	r18,24(sp)
 402b3bc:	dc400515 	stw	r17,20(sp)
 402b3c0:	10956004 	addi	r2,r2,21888
 402b3c4:	dfc00915 	stw	ra,36(sp)
 402b3c8:	dd000815 	stw	r20,32(sp)
 402b3cc:	dcc00715 	stw	r19,28(sp)
 402b3d0:	dc000415 	stw	r16,16(sp)
 402b3d4:	3025883a 	mov	r18,r6
 402b3d8:	14400017 	ldw	r17,0(r2)
 402b3dc:	20001926 	beq	r4,zero,402b444 <wcrtomb+0x94>
 402b3e0:	008100f4 	movhi	r2,1027
 402b3e4:	10956404 	addi	r2,r2,21904
 402b3e8:	15000017 	ldw	r20,0(r2)
 402b3ec:	2021883a 	mov	r16,r4
 402b3f0:	2827883a 	mov	r19,r5
 402b3f4:	40269140 	call	4026914 <__locale_charset>
 402b3f8:	100f883a 	mov	r7,r2
 402b3fc:	dc800015 	stw	r18,0(sp)
 402b400:	980d883a 	mov	r6,r19
 402b404:	800b883a 	mov	r5,r16
 402b408:	8809883a 	mov	r4,r17
 402b40c:	a03ee83a 	callr	r20
 402b410:	00ffffc4 	movi	r3,-1
 402b414:	10c0031e 	bne	r2,r3,402b424 <wcrtomb+0x74>
 402b418:	90000015 	stw	zero,0(r18)
 402b41c:	00c02284 	movi	r3,138
 402b420:	88c00015 	stw	r3,0(r17)
 402b424:	dfc00917 	ldw	ra,36(sp)
 402b428:	dd000817 	ldw	r20,32(sp)
 402b42c:	dcc00717 	ldw	r19,28(sp)
 402b430:	dc800617 	ldw	r18,24(sp)
 402b434:	dc400517 	ldw	r17,20(sp)
 402b438:	dc000417 	ldw	r16,16(sp)
 402b43c:	dec00a04 	addi	sp,sp,40
 402b440:	f800283a 	ret
 402b444:	008100f4 	movhi	r2,1027
 402b448:	10956404 	addi	r2,r2,21904
 402b44c:	14000017 	ldw	r16,0(r2)
 402b450:	40269140 	call	4026914 <__locale_charset>
 402b454:	100f883a 	mov	r7,r2
 402b458:	dc800015 	stw	r18,0(sp)
 402b45c:	000d883a 	mov	r6,zero
 402b460:	d9400104 	addi	r5,sp,4
 402b464:	8809883a 	mov	r4,r17
 402b468:	803ee83a 	callr	r16
 402b46c:	003fe806 	br	402b410 <__alt_data_end+0xfffeb410>

0402b470 <__ascii_wctomb>:
 402b470:	28000526 	beq	r5,zero,402b488 <__ascii_wctomb+0x18>
 402b474:	00803fc4 	movi	r2,255
 402b478:	11800536 	bltu	r2,r6,402b490 <__ascii_wctomb+0x20>
 402b47c:	29800005 	stb	r6,0(r5)
 402b480:	00800044 	movi	r2,1
 402b484:	f800283a 	ret
 402b488:	0005883a 	mov	r2,zero
 402b48c:	f800283a 	ret
 402b490:	00802284 	movi	r2,138
 402b494:	20800015 	stw	r2,0(r4)
 402b498:	00bfffc4 	movi	r2,-1
 402b49c:	f800283a 	ret

0402b4a0 <_wctomb_r>:
 402b4a0:	008100f4 	movhi	r2,1027
 402b4a4:	defff904 	addi	sp,sp,-28
 402b4a8:	10956404 	addi	r2,r2,21904
 402b4ac:	dfc00615 	stw	ra,24(sp)
 402b4b0:	dc400515 	stw	r17,20(sp)
 402b4b4:	dc000415 	stw	r16,16(sp)
 402b4b8:	3823883a 	mov	r17,r7
 402b4bc:	14000017 	ldw	r16,0(r2)
 402b4c0:	d9000115 	stw	r4,4(sp)
 402b4c4:	d9400215 	stw	r5,8(sp)
 402b4c8:	d9800315 	stw	r6,12(sp)
 402b4cc:	40269140 	call	4026914 <__locale_charset>
 402b4d0:	d9800317 	ldw	r6,12(sp)
 402b4d4:	d9400217 	ldw	r5,8(sp)
 402b4d8:	d9000117 	ldw	r4,4(sp)
 402b4dc:	100f883a 	mov	r7,r2
 402b4e0:	dc400015 	stw	r17,0(sp)
 402b4e4:	803ee83a 	callr	r16
 402b4e8:	dfc00617 	ldw	ra,24(sp)
 402b4ec:	dc400517 	ldw	r17,20(sp)
 402b4f0:	dc000417 	ldw	r16,16(sp)
 402b4f4:	dec00704 	addi	sp,sp,28
 402b4f8:	f800283a 	ret

0402b4fc <__udivdi3>:
 402b4fc:	defff504 	addi	sp,sp,-44
 402b500:	dcc00415 	stw	r19,16(sp)
 402b504:	dc000115 	stw	r16,4(sp)
 402b508:	dfc00a15 	stw	ra,40(sp)
 402b50c:	df000915 	stw	fp,36(sp)
 402b510:	ddc00815 	stw	r23,32(sp)
 402b514:	dd800715 	stw	r22,28(sp)
 402b518:	dd400615 	stw	r21,24(sp)
 402b51c:	dd000515 	stw	r20,20(sp)
 402b520:	dc800315 	stw	r18,12(sp)
 402b524:	dc400215 	stw	r17,8(sp)
 402b528:	2027883a 	mov	r19,r4
 402b52c:	2821883a 	mov	r16,r5
 402b530:	3800411e 	bne	r7,zero,402b638 <__udivdi3+0x13c>
 402b534:	3023883a 	mov	r17,r6
 402b538:	2025883a 	mov	r18,r4
 402b53c:	2980522e 	bgeu	r5,r6,402b688 <__udivdi3+0x18c>
 402b540:	00bfffd4 	movui	r2,65535
 402b544:	282d883a 	mov	r22,r5
 402b548:	1180a836 	bltu	r2,r6,402b7ec <__udivdi3+0x2f0>
 402b54c:	00803fc4 	movi	r2,255
 402b550:	1185803a 	cmpltu	r2,r2,r6
 402b554:	100490fa 	slli	r2,r2,3
 402b558:	3086d83a 	srl	r3,r6,r2
 402b55c:	010100f4 	movhi	r4,1027
 402b560:	210d3e84 	addi	r4,r4,13562
 402b564:	20c7883a 	add	r3,r4,r3
 402b568:	18c00003 	ldbu	r3,0(r3)
 402b56c:	1885883a 	add	r2,r3,r2
 402b570:	00c00804 	movi	r3,32
 402b574:	1887c83a 	sub	r3,r3,r2
 402b578:	18000526 	beq	r3,zero,402b590 <__udivdi3+0x94>
 402b57c:	80e0983a 	sll	r16,r16,r3
 402b580:	9884d83a 	srl	r2,r19,r2
 402b584:	30e2983a 	sll	r17,r6,r3
 402b588:	98e4983a 	sll	r18,r19,r3
 402b58c:	142cb03a 	or	r22,r2,r16
 402b590:	882ad43a 	srli	r21,r17,16
 402b594:	b009883a 	mov	r4,r22
 402b598:	8d3fffcc 	andi	r20,r17,65535
 402b59c:	a80b883a 	mov	r5,r21
 402b5a0:	402c1080 	call	402c108 <__umodsi3>
 402b5a4:	b009883a 	mov	r4,r22
 402b5a8:	a80b883a 	mov	r5,r21
 402b5ac:	1027883a 	mov	r19,r2
 402b5b0:	402c0a40 	call	402c0a4 <__udivsi3>
 402b5b4:	102d883a 	mov	r22,r2
 402b5b8:	9826943a 	slli	r19,r19,16
 402b5bc:	9004d43a 	srli	r2,r18,16
 402b5c0:	a5a1383a 	mul	r16,r20,r22
 402b5c4:	14c4b03a 	or	r2,r2,r19
 402b5c8:	1400052e 	bgeu	r2,r16,402b5e0 <__udivdi3+0xe4>
 402b5cc:	1445883a 	add	r2,r2,r17
 402b5d0:	b0ffffc4 	addi	r3,r22,-1
 402b5d4:	14400136 	bltu	r2,r17,402b5dc <__udivdi3+0xe0>
 402b5d8:	14012336 	bltu	r2,r16,402ba68 <__udivdi3+0x56c>
 402b5dc:	182d883a 	mov	r22,r3
 402b5e0:	1421c83a 	sub	r16,r2,r16
 402b5e4:	a80b883a 	mov	r5,r21
 402b5e8:	8009883a 	mov	r4,r16
 402b5ec:	402c1080 	call	402c108 <__umodsi3>
 402b5f0:	1027883a 	mov	r19,r2
 402b5f4:	a80b883a 	mov	r5,r21
 402b5f8:	8009883a 	mov	r4,r16
 402b5fc:	402c0a40 	call	402c0a4 <__udivsi3>
 402b600:	9826943a 	slli	r19,r19,16
 402b604:	a0a9383a 	mul	r20,r20,r2
 402b608:	94bfffcc 	andi	r18,r18,65535
 402b60c:	94e4b03a 	or	r18,r18,r19
 402b610:	9500052e 	bgeu	r18,r20,402b628 <__udivdi3+0x12c>
 402b614:	8ca5883a 	add	r18,r17,r18
 402b618:	10ffffc4 	addi	r3,r2,-1
 402b61c:	9440f136 	bltu	r18,r17,402b9e4 <__udivdi3+0x4e8>
 402b620:	9500f02e 	bgeu	r18,r20,402b9e4 <__udivdi3+0x4e8>
 402b624:	10bfff84 	addi	r2,r2,-2
 402b628:	b00c943a 	slli	r6,r22,16
 402b62c:	0007883a 	mov	r3,zero
 402b630:	3084b03a 	or	r2,r6,r2
 402b634:	00005906 	br	402b79c <__udivdi3+0x2a0>
 402b638:	29c05636 	bltu	r5,r7,402b794 <__udivdi3+0x298>
 402b63c:	00bfffd4 	movui	r2,65535
 402b640:	11c0622e 	bgeu	r2,r7,402b7cc <__udivdi3+0x2d0>
 402b644:	00804034 	movhi	r2,256
 402b648:	10bfffc4 	addi	r2,r2,-1
 402b64c:	11c0ee36 	bltu	r2,r7,402ba08 <__udivdi3+0x50c>
 402b650:	00800404 	movi	r2,16
 402b654:	3886d83a 	srl	r3,r7,r2
 402b658:	010100f4 	movhi	r4,1027
 402b65c:	210d3e84 	addi	r4,r4,13562
 402b660:	20c7883a 	add	r3,r4,r3
 402b664:	18c00003 	ldbu	r3,0(r3)
 402b668:	05400804 	movi	r21,32
 402b66c:	1885883a 	add	r2,r3,r2
 402b670:	a8abc83a 	sub	r21,r21,r2
 402b674:	a800621e 	bne	r21,zero,402b800 <__udivdi3+0x304>
 402b678:	3c00e936 	bltu	r7,r16,402ba20 <__udivdi3+0x524>
 402b67c:	9985403a 	cmpgeu	r2,r19,r6
 402b680:	0007883a 	mov	r3,zero
 402b684:	00004506 	br	402b79c <__udivdi3+0x2a0>
 402b688:	3000041e 	bne	r6,zero,402b69c <__udivdi3+0x1a0>
 402b68c:	000b883a 	mov	r5,zero
 402b690:	01000044 	movi	r4,1
 402b694:	402c0a40 	call	402c0a4 <__udivsi3>
 402b698:	1023883a 	mov	r17,r2
 402b69c:	00bfffd4 	movui	r2,65535
 402b6a0:	14404e2e 	bgeu	r2,r17,402b7dc <__udivdi3+0x2e0>
 402b6a4:	00804034 	movhi	r2,256
 402b6a8:	10bfffc4 	addi	r2,r2,-1
 402b6ac:	1440d836 	bltu	r2,r17,402ba10 <__udivdi3+0x514>
 402b6b0:	00800404 	movi	r2,16
 402b6b4:	8886d83a 	srl	r3,r17,r2
 402b6b8:	010100f4 	movhi	r4,1027
 402b6bc:	210d3e84 	addi	r4,r4,13562
 402b6c0:	20c7883a 	add	r3,r4,r3
 402b6c4:	18c00003 	ldbu	r3,0(r3)
 402b6c8:	1885883a 	add	r2,r3,r2
 402b6cc:	00c00804 	movi	r3,32
 402b6d0:	1887c83a 	sub	r3,r3,r2
 402b6d4:	18008f1e 	bne	r3,zero,402b914 <__udivdi3+0x418>
 402b6d8:	882ad43a 	srli	r21,r17,16
 402b6dc:	8461c83a 	sub	r16,r16,r17
 402b6e0:	8d3fffcc 	andi	r20,r17,65535
 402b6e4:	00c00044 	movi	r3,1
 402b6e8:	8009883a 	mov	r4,r16
 402b6ec:	a80b883a 	mov	r5,r21
 402b6f0:	d8c00015 	stw	r3,0(sp)
 402b6f4:	402c1080 	call	402c108 <__umodsi3>
 402b6f8:	8009883a 	mov	r4,r16
 402b6fc:	a80b883a 	mov	r5,r21
 402b700:	1027883a 	mov	r19,r2
 402b704:	402c0a40 	call	402c0a4 <__udivsi3>
 402b708:	9826943a 	slli	r19,r19,16
 402b70c:	9008d43a 	srli	r4,r18,16
 402b710:	1521383a 	mul	r16,r2,r20
 402b714:	102d883a 	mov	r22,r2
 402b718:	24c8b03a 	or	r4,r4,r19
 402b71c:	d8c00017 	ldw	r3,0(sp)
 402b720:	2400052e 	bgeu	r4,r16,402b738 <__udivdi3+0x23c>
 402b724:	2449883a 	add	r4,r4,r17
 402b728:	b0bfffc4 	addi	r2,r22,-1
 402b72c:	24400136 	bltu	r4,r17,402b734 <__udivdi3+0x238>
 402b730:	2400ca36 	bltu	r4,r16,402ba5c <__udivdi3+0x560>
 402b734:	102d883a 	mov	r22,r2
 402b738:	2421c83a 	sub	r16,r4,r16
 402b73c:	a80b883a 	mov	r5,r21
 402b740:	8009883a 	mov	r4,r16
 402b744:	d8c00015 	stw	r3,0(sp)
 402b748:	402c1080 	call	402c108 <__umodsi3>
 402b74c:	1027883a 	mov	r19,r2
 402b750:	a80b883a 	mov	r5,r21
 402b754:	8009883a 	mov	r4,r16
 402b758:	402c0a40 	call	402c0a4 <__udivsi3>
 402b75c:	9826943a 	slli	r19,r19,16
 402b760:	1529383a 	mul	r20,r2,r20
 402b764:	94bfffcc 	andi	r18,r18,65535
 402b768:	94e4b03a 	or	r18,r18,r19
 402b76c:	d8c00017 	ldw	r3,0(sp)
 402b770:	9500052e 	bgeu	r18,r20,402b788 <__udivdi3+0x28c>
 402b774:	8ca5883a 	add	r18,r17,r18
 402b778:	113fffc4 	addi	r4,r2,-1
 402b77c:	94409736 	bltu	r18,r17,402b9dc <__udivdi3+0x4e0>
 402b780:	9500962e 	bgeu	r18,r20,402b9dc <__udivdi3+0x4e0>
 402b784:	10bfff84 	addi	r2,r2,-2
 402b788:	b00c943a 	slli	r6,r22,16
 402b78c:	3084b03a 	or	r2,r6,r2
 402b790:	00000206 	br	402b79c <__udivdi3+0x2a0>
 402b794:	0007883a 	mov	r3,zero
 402b798:	0005883a 	mov	r2,zero
 402b79c:	dfc00a17 	ldw	ra,40(sp)
 402b7a0:	df000917 	ldw	fp,36(sp)
 402b7a4:	ddc00817 	ldw	r23,32(sp)
 402b7a8:	dd800717 	ldw	r22,28(sp)
 402b7ac:	dd400617 	ldw	r21,24(sp)
 402b7b0:	dd000517 	ldw	r20,20(sp)
 402b7b4:	dcc00417 	ldw	r19,16(sp)
 402b7b8:	dc800317 	ldw	r18,12(sp)
 402b7bc:	dc400217 	ldw	r17,8(sp)
 402b7c0:	dc000117 	ldw	r16,4(sp)
 402b7c4:	dec00b04 	addi	sp,sp,44
 402b7c8:	f800283a 	ret
 402b7cc:	00803fc4 	movi	r2,255
 402b7d0:	11c5803a 	cmpltu	r2,r2,r7
 402b7d4:	100490fa 	slli	r2,r2,3
 402b7d8:	003f9e06 	br	402b654 <__alt_data_end+0xfffeb654>
 402b7dc:	00803fc4 	movi	r2,255
 402b7e0:	1445803a 	cmpltu	r2,r2,r17
 402b7e4:	100490fa 	slli	r2,r2,3
 402b7e8:	003fb206 	br	402b6b4 <__alt_data_end+0xfffeb6b4>
 402b7ec:	00804034 	movhi	r2,256
 402b7f0:	10bfffc4 	addi	r2,r2,-1
 402b7f4:	11808836 	bltu	r2,r6,402ba18 <__udivdi3+0x51c>
 402b7f8:	00800404 	movi	r2,16
 402b7fc:	003f5606 	br	402b558 <__alt_data_end+0xfffeb558>
 402b800:	30aed83a 	srl	r23,r6,r2
 402b804:	3d4e983a 	sll	r7,r7,r21
 402b808:	80acd83a 	srl	r22,r16,r2
 402b80c:	9884d83a 	srl	r2,r19,r2
 402b810:	3deeb03a 	or	r23,r7,r23
 402b814:	b824d43a 	srli	r18,r23,16
 402b818:	8560983a 	sll	r16,r16,r21
 402b81c:	b009883a 	mov	r4,r22
 402b820:	900b883a 	mov	r5,r18
 402b824:	3568983a 	sll	r20,r6,r21
 402b828:	1420b03a 	or	r16,r2,r16
 402b82c:	402c1080 	call	402c108 <__umodsi3>
 402b830:	b009883a 	mov	r4,r22
 402b834:	900b883a 	mov	r5,r18
 402b838:	1023883a 	mov	r17,r2
 402b83c:	402c0a40 	call	402c0a4 <__udivsi3>
 402b840:	8808943a 	slli	r4,r17,16
 402b844:	bf3fffcc 	andi	fp,r23,65535
 402b848:	8006d43a 	srli	r3,r16,16
 402b84c:	e0a3383a 	mul	r17,fp,r2
 402b850:	100d883a 	mov	r6,r2
 402b854:	1906b03a 	or	r3,r3,r4
 402b858:	1c40042e 	bgeu	r3,r17,402b86c <__udivdi3+0x370>
 402b85c:	1dc7883a 	add	r3,r3,r23
 402b860:	10bfffc4 	addi	r2,r2,-1
 402b864:	1dc0752e 	bgeu	r3,r23,402ba3c <__udivdi3+0x540>
 402b868:	100d883a 	mov	r6,r2
 402b86c:	1c63c83a 	sub	r17,r3,r17
 402b870:	900b883a 	mov	r5,r18
 402b874:	8809883a 	mov	r4,r17
 402b878:	d9800015 	stw	r6,0(sp)
 402b87c:	402c1080 	call	402c108 <__umodsi3>
 402b880:	102d883a 	mov	r22,r2
 402b884:	8809883a 	mov	r4,r17
 402b888:	900b883a 	mov	r5,r18
 402b88c:	402c0a40 	call	402c0a4 <__udivsi3>
 402b890:	b02c943a 	slli	r22,r22,16
 402b894:	e089383a 	mul	r4,fp,r2
 402b898:	843fffcc 	andi	r16,r16,65535
 402b89c:	85a0b03a 	or	r16,r16,r22
 402b8a0:	d9800017 	ldw	r6,0(sp)
 402b8a4:	8100042e 	bgeu	r16,r4,402b8b8 <__udivdi3+0x3bc>
 402b8a8:	85e1883a 	add	r16,r16,r23
 402b8ac:	10ffffc4 	addi	r3,r2,-1
 402b8b0:	85c05e2e 	bgeu	r16,r23,402ba2c <__udivdi3+0x530>
 402b8b4:	1805883a 	mov	r2,r3
 402b8b8:	300c943a 	slli	r6,r6,16
 402b8bc:	a17fffcc 	andi	r5,r20,65535
 402b8c0:	a028d43a 	srli	r20,r20,16
 402b8c4:	3084b03a 	or	r2,r6,r2
 402b8c8:	10ffffcc 	andi	r3,r2,65535
 402b8cc:	100cd43a 	srli	r6,r2,16
 402b8d0:	194f383a 	mul	r7,r3,r5
 402b8d4:	1d07383a 	mul	r3,r3,r20
 402b8d8:	314b383a 	mul	r5,r6,r5
 402b8dc:	3810d43a 	srli	r8,r7,16
 402b8e0:	8121c83a 	sub	r16,r16,r4
 402b8e4:	1947883a 	add	r3,r3,r5
 402b8e8:	40c7883a 	add	r3,r8,r3
 402b8ec:	350d383a 	mul	r6,r6,r20
 402b8f0:	1940022e 	bgeu	r3,r5,402b8fc <__udivdi3+0x400>
 402b8f4:	01000074 	movhi	r4,1
 402b8f8:	310d883a 	add	r6,r6,r4
 402b8fc:	1828d43a 	srli	r20,r3,16
 402b900:	a18d883a 	add	r6,r20,r6
 402b904:	81803e36 	bltu	r16,r6,402ba00 <__udivdi3+0x504>
 402b908:	81803826 	beq	r16,r6,402b9ec <__udivdi3+0x4f0>
 402b90c:	0007883a 	mov	r3,zero
 402b910:	003fa206 	br	402b79c <__alt_data_end+0xfffeb79c>
 402b914:	88e2983a 	sll	r17,r17,r3
 402b918:	80a8d83a 	srl	r20,r16,r2
 402b91c:	80e0983a 	sll	r16,r16,r3
 402b920:	882ad43a 	srli	r21,r17,16
 402b924:	9884d83a 	srl	r2,r19,r2
 402b928:	a009883a 	mov	r4,r20
 402b92c:	a80b883a 	mov	r5,r21
 402b930:	142eb03a 	or	r23,r2,r16
 402b934:	98e4983a 	sll	r18,r19,r3
 402b938:	402c1080 	call	402c108 <__umodsi3>
 402b93c:	a009883a 	mov	r4,r20
 402b940:	a80b883a 	mov	r5,r21
 402b944:	1021883a 	mov	r16,r2
 402b948:	402c0a40 	call	402c0a4 <__udivsi3>
 402b94c:	1039883a 	mov	fp,r2
 402b950:	8d3fffcc 	andi	r20,r17,65535
 402b954:	8020943a 	slli	r16,r16,16
 402b958:	b804d43a 	srli	r2,r23,16
 402b95c:	a72d383a 	mul	r22,r20,fp
 402b960:	1404b03a 	or	r2,r2,r16
 402b964:	1580062e 	bgeu	r2,r22,402b980 <__udivdi3+0x484>
 402b968:	1445883a 	add	r2,r2,r17
 402b96c:	e0ffffc4 	addi	r3,fp,-1
 402b970:	14403836 	bltu	r2,r17,402ba54 <__udivdi3+0x558>
 402b974:	1580372e 	bgeu	r2,r22,402ba54 <__udivdi3+0x558>
 402b978:	e73fff84 	addi	fp,fp,-2
 402b97c:	1445883a 	add	r2,r2,r17
 402b980:	15adc83a 	sub	r22,r2,r22
 402b984:	a80b883a 	mov	r5,r21
 402b988:	b009883a 	mov	r4,r22
 402b98c:	402c1080 	call	402c108 <__umodsi3>
 402b990:	1027883a 	mov	r19,r2
 402b994:	b009883a 	mov	r4,r22
 402b998:	a80b883a 	mov	r5,r21
 402b99c:	402c0a40 	call	402c0a4 <__udivsi3>
 402b9a0:	9826943a 	slli	r19,r19,16
 402b9a4:	a0a1383a 	mul	r16,r20,r2
 402b9a8:	b93fffcc 	andi	r4,r23,65535
 402b9ac:	24c8b03a 	or	r4,r4,r19
 402b9b0:	2400062e 	bgeu	r4,r16,402b9cc <__udivdi3+0x4d0>
 402b9b4:	2449883a 	add	r4,r4,r17
 402b9b8:	10ffffc4 	addi	r3,r2,-1
 402b9bc:	24402336 	bltu	r4,r17,402ba4c <__udivdi3+0x550>
 402b9c0:	2400222e 	bgeu	r4,r16,402ba4c <__udivdi3+0x550>
 402b9c4:	10bfff84 	addi	r2,r2,-2
 402b9c8:	2449883a 	add	r4,r4,r17
 402b9cc:	e038943a 	slli	fp,fp,16
 402b9d0:	2421c83a 	sub	r16,r4,r16
 402b9d4:	e086b03a 	or	r3,fp,r2
 402b9d8:	003f4306 	br	402b6e8 <__alt_data_end+0xfffeb6e8>
 402b9dc:	2005883a 	mov	r2,r4
 402b9e0:	003f6906 	br	402b788 <__alt_data_end+0xfffeb788>
 402b9e4:	1805883a 	mov	r2,r3
 402b9e8:	003f0f06 	br	402b628 <__alt_data_end+0xfffeb628>
 402b9ec:	1806943a 	slli	r3,r3,16
 402b9f0:	9d66983a 	sll	r19,r19,r21
 402b9f4:	39ffffcc 	andi	r7,r7,65535
 402b9f8:	19c7883a 	add	r3,r3,r7
 402b9fc:	98ffc32e 	bgeu	r19,r3,402b90c <__alt_data_end+0xfffeb90c>
 402ba00:	10bfffc4 	addi	r2,r2,-1
 402ba04:	003fc106 	br	402b90c <__alt_data_end+0xfffeb90c>
 402ba08:	00800604 	movi	r2,24
 402ba0c:	003f1106 	br	402b654 <__alt_data_end+0xfffeb654>
 402ba10:	00800604 	movi	r2,24
 402ba14:	003f2706 	br	402b6b4 <__alt_data_end+0xfffeb6b4>
 402ba18:	00800604 	movi	r2,24
 402ba1c:	003ece06 	br	402b558 <__alt_data_end+0xfffeb558>
 402ba20:	0007883a 	mov	r3,zero
 402ba24:	00800044 	movi	r2,1
 402ba28:	003f5c06 	br	402b79c <__alt_data_end+0xfffeb79c>
 402ba2c:	813fa12e 	bgeu	r16,r4,402b8b4 <__alt_data_end+0xfffeb8b4>
 402ba30:	10bfff84 	addi	r2,r2,-2
 402ba34:	85e1883a 	add	r16,r16,r23
 402ba38:	003f9f06 	br	402b8b8 <__alt_data_end+0xfffeb8b8>
 402ba3c:	1c7f8a2e 	bgeu	r3,r17,402b868 <__alt_data_end+0xfffeb868>
 402ba40:	31bfff84 	addi	r6,r6,-2
 402ba44:	1dc7883a 	add	r3,r3,r23
 402ba48:	003f8806 	br	402b86c <__alt_data_end+0xfffeb86c>
 402ba4c:	1805883a 	mov	r2,r3
 402ba50:	003fde06 	br	402b9cc <__alt_data_end+0xfffeb9cc>
 402ba54:	1839883a 	mov	fp,r3
 402ba58:	003fc906 	br	402b980 <__alt_data_end+0xfffeb980>
 402ba5c:	b5bfff84 	addi	r22,r22,-2
 402ba60:	2449883a 	add	r4,r4,r17
 402ba64:	003f3406 	br	402b738 <__alt_data_end+0xfffeb738>
 402ba68:	b5bfff84 	addi	r22,r22,-2
 402ba6c:	1445883a 	add	r2,r2,r17
 402ba70:	003edb06 	br	402b5e0 <__alt_data_end+0xfffeb5e0>

0402ba74 <__umoddi3>:
 402ba74:	defff404 	addi	sp,sp,-48
 402ba78:	df000a15 	stw	fp,40(sp)
 402ba7c:	dc400315 	stw	r17,12(sp)
 402ba80:	dc000215 	stw	r16,8(sp)
 402ba84:	dfc00b15 	stw	ra,44(sp)
 402ba88:	ddc00915 	stw	r23,36(sp)
 402ba8c:	dd800815 	stw	r22,32(sp)
 402ba90:	dd400715 	stw	r21,28(sp)
 402ba94:	dd000615 	stw	r20,24(sp)
 402ba98:	dcc00515 	stw	r19,20(sp)
 402ba9c:	dc800415 	stw	r18,16(sp)
 402baa0:	2021883a 	mov	r16,r4
 402baa4:	2823883a 	mov	r17,r5
 402baa8:	2839883a 	mov	fp,r5
 402baac:	38003c1e 	bne	r7,zero,402bba0 <__umoddi3+0x12c>
 402bab0:	3027883a 	mov	r19,r6
 402bab4:	2029883a 	mov	r20,r4
 402bab8:	2980512e 	bgeu	r5,r6,402bc00 <__umoddi3+0x18c>
 402babc:	00bfffd4 	movui	r2,65535
 402bac0:	11809a36 	bltu	r2,r6,402bd2c <__umoddi3+0x2b8>
 402bac4:	01003fc4 	movi	r4,255
 402bac8:	2189803a 	cmpltu	r4,r4,r6
 402bacc:	200890fa 	slli	r4,r4,3
 402bad0:	3104d83a 	srl	r2,r6,r4
 402bad4:	00c100f4 	movhi	r3,1027
 402bad8:	18cd3e84 	addi	r3,r3,13562
 402badc:	1885883a 	add	r2,r3,r2
 402bae0:	10c00003 	ldbu	r3,0(r2)
 402bae4:	00800804 	movi	r2,32
 402bae8:	1909883a 	add	r4,r3,r4
 402baec:	1125c83a 	sub	r18,r2,r4
 402baf0:	90000526 	beq	r18,zero,402bb08 <__umoddi3+0x94>
 402baf4:	8ca2983a 	sll	r17,r17,r18
 402baf8:	8108d83a 	srl	r4,r16,r4
 402bafc:	34a6983a 	sll	r19,r6,r18
 402bb00:	84a8983a 	sll	r20,r16,r18
 402bb04:	2478b03a 	or	fp,r4,r17
 402bb08:	982ed43a 	srli	r23,r19,16
 402bb0c:	e009883a 	mov	r4,fp
 402bb10:	9dbfffcc 	andi	r22,r19,65535
 402bb14:	b80b883a 	mov	r5,r23
 402bb18:	402c1080 	call	402c108 <__umodsi3>
 402bb1c:	e009883a 	mov	r4,fp
 402bb20:	b80b883a 	mov	r5,r23
 402bb24:	102b883a 	mov	r21,r2
 402bb28:	402c0a40 	call	402c0a4 <__udivsi3>
 402bb2c:	a806943a 	slli	r3,r21,16
 402bb30:	a008d43a 	srli	r4,r20,16
 402bb34:	b085383a 	mul	r2,r22,r2
 402bb38:	20c8b03a 	or	r4,r4,r3
 402bb3c:	2080032e 	bgeu	r4,r2,402bb4c <__umoddi3+0xd8>
 402bb40:	24c9883a 	add	r4,r4,r19
 402bb44:	24c00136 	bltu	r4,r19,402bb4c <__umoddi3+0xd8>
 402bb48:	20811036 	bltu	r4,r2,402bf8c <__umoddi3+0x518>
 402bb4c:	20abc83a 	sub	r21,r4,r2
 402bb50:	b80b883a 	mov	r5,r23
 402bb54:	a809883a 	mov	r4,r21
 402bb58:	402c1080 	call	402c108 <__umodsi3>
 402bb5c:	1023883a 	mov	r17,r2
 402bb60:	b80b883a 	mov	r5,r23
 402bb64:	a809883a 	mov	r4,r21
 402bb68:	402c0a40 	call	402c0a4 <__udivsi3>
 402bb6c:	8822943a 	slli	r17,r17,16
 402bb70:	b085383a 	mul	r2,r22,r2
 402bb74:	a0ffffcc 	andi	r3,r20,65535
 402bb78:	1c46b03a 	or	r3,r3,r17
 402bb7c:	1880042e 	bgeu	r3,r2,402bb90 <__umoddi3+0x11c>
 402bb80:	1cc7883a 	add	r3,r3,r19
 402bb84:	1cc00236 	bltu	r3,r19,402bb90 <__umoddi3+0x11c>
 402bb88:	1880012e 	bgeu	r3,r2,402bb90 <__umoddi3+0x11c>
 402bb8c:	1cc7883a 	add	r3,r3,r19
 402bb90:	1885c83a 	sub	r2,r3,r2
 402bb94:	1484d83a 	srl	r2,r2,r18
 402bb98:	0007883a 	mov	r3,zero
 402bb9c:	00004f06 	br	402bcdc <__umoddi3+0x268>
 402bba0:	29c04c36 	bltu	r5,r7,402bcd4 <__umoddi3+0x260>
 402bba4:	00bfffd4 	movui	r2,65535
 402bba8:	11c0582e 	bgeu	r2,r7,402bd0c <__umoddi3+0x298>
 402bbac:	00804034 	movhi	r2,256
 402bbb0:	10bfffc4 	addi	r2,r2,-1
 402bbb4:	11c0e736 	bltu	r2,r7,402bf54 <__umoddi3+0x4e0>
 402bbb8:	01000404 	movi	r4,16
 402bbbc:	3904d83a 	srl	r2,r7,r4
 402bbc0:	00c100f4 	movhi	r3,1027
 402bbc4:	18cd3e84 	addi	r3,r3,13562
 402bbc8:	1885883a 	add	r2,r3,r2
 402bbcc:	14c00003 	ldbu	r19,0(r2)
 402bbd0:	00c00804 	movi	r3,32
 402bbd4:	9927883a 	add	r19,r19,r4
 402bbd8:	1ce9c83a 	sub	r20,r3,r19
 402bbdc:	a000581e 	bne	r20,zero,402bd40 <__umoddi3+0x2cc>
 402bbe0:	3c400136 	bltu	r7,r17,402bbe8 <__umoddi3+0x174>
 402bbe4:	8180eb36 	bltu	r16,r6,402bf94 <__umoddi3+0x520>
 402bbe8:	8185c83a 	sub	r2,r16,r6
 402bbec:	89e3c83a 	sub	r17,r17,r7
 402bbf0:	8089803a 	cmpltu	r4,r16,r2
 402bbf4:	8939c83a 	sub	fp,r17,r4
 402bbf8:	e007883a 	mov	r3,fp
 402bbfc:	00003706 	br	402bcdc <__umoddi3+0x268>
 402bc00:	3000041e 	bne	r6,zero,402bc14 <__umoddi3+0x1a0>
 402bc04:	000b883a 	mov	r5,zero
 402bc08:	01000044 	movi	r4,1
 402bc0c:	402c0a40 	call	402c0a4 <__udivsi3>
 402bc10:	1027883a 	mov	r19,r2
 402bc14:	00bfffd4 	movui	r2,65535
 402bc18:	14c0402e 	bgeu	r2,r19,402bd1c <__umoddi3+0x2a8>
 402bc1c:	00804034 	movhi	r2,256
 402bc20:	10bfffc4 	addi	r2,r2,-1
 402bc24:	14c0cd36 	bltu	r2,r19,402bf5c <__umoddi3+0x4e8>
 402bc28:	00800404 	movi	r2,16
 402bc2c:	9886d83a 	srl	r3,r19,r2
 402bc30:	010100f4 	movhi	r4,1027
 402bc34:	210d3e84 	addi	r4,r4,13562
 402bc38:	20c7883a 	add	r3,r4,r3
 402bc3c:	18c00003 	ldbu	r3,0(r3)
 402bc40:	1887883a 	add	r3,r3,r2
 402bc44:	00800804 	movi	r2,32
 402bc48:	10e5c83a 	sub	r18,r2,r3
 402bc4c:	9000901e 	bne	r18,zero,402be90 <__umoddi3+0x41c>
 402bc50:	982cd43a 	srli	r22,r19,16
 402bc54:	8ce3c83a 	sub	r17,r17,r19
 402bc58:	9d7fffcc 	andi	r21,r19,65535
 402bc5c:	b00b883a 	mov	r5,r22
 402bc60:	8809883a 	mov	r4,r17
 402bc64:	402c1080 	call	402c108 <__umodsi3>
 402bc68:	8809883a 	mov	r4,r17
 402bc6c:	b00b883a 	mov	r5,r22
 402bc70:	1021883a 	mov	r16,r2
 402bc74:	402c0a40 	call	402c0a4 <__udivsi3>
 402bc78:	8006943a 	slli	r3,r16,16
 402bc7c:	a008d43a 	srli	r4,r20,16
 402bc80:	1545383a 	mul	r2,r2,r21
 402bc84:	20c8b03a 	or	r4,r4,r3
 402bc88:	2080042e 	bgeu	r4,r2,402bc9c <__umoddi3+0x228>
 402bc8c:	24c9883a 	add	r4,r4,r19
 402bc90:	24c00236 	bltu	r4,r19,402bc9c <__umoddi3+0x228>
 402bc94:	2080012e 	bgeu	r4,r2,402bc9c <__umoddi3+0x228>
 402bc98:	24c9883a 	add	r4,r4,r19
 402bc9c:	20a1c83a 	sub	r16,r4,r2
 402bca0:	b00b883a 	mov	r5,r22
 402bca4:	8009883a 	mov	r4,r16
 402bca8:	402c1080 	call	402c108 <__umodsi3>
 402bcac:	1023883a 	mov	r17,r2
 402bcb0:	b00b883a 	mov	r5,r22
 402bcb4:	8009883a 	mov	r4,r16
 402bcb8:	402c0a40 	call	402c0a4 <__udivsi3>
 402bcbc:	8822943a 	slli	r17,r17,16
 402bcc0:	1545383a 	mul	r2,r2,r21
 402bcc4:	a53fffcc 	andi	r20,r20,65535
 402bcc8:	a446b03a 	or	r3,r20,r17
 402bccc:	18bfb02e 	bgeu	r3,r2,402bb90 <__alt_data_end+0xfffebb90>
 402bcd0:	003fab06 	br	402bb80 <__alt_data_end+0xfffebb80>
 402bcd4:	2005883a 	mov	r2,r4
 402bcd8:	2807883a 	mov	r3,r5
 402bcdc:	dfc00b17 	ldw	ra,44(sp)
 402bce0:	df000a17 	ldw	fp,40(sp)
 402bce4:	ddc00917 	ldw	r23,36(sp)
 402bce8:	dd800817 	ldw	r22,32(sp)
 402bcec:	dd400717 	ldw	r21,28(sp)
 402bcf0:	dd000617 	ldw	r20,24(sp)
 402bcf4:	dcc00517 	ldw	r19,20(sp)
 402bcf8:	dc800417 	ldw	r18,16(sp)
 402bcfc:	dc400317 	ldw	r17,12(sp)
 402bd00:	dc000217 	ldw	r16,8(sp)
 402bd04:	dec00c04 	addi	sp,sp,48
 402bd08:	f800283a 	ret
 402bd0c:	04c03fc4 	movi	r19,255
 402bd10:	99c9803a 	cmpltu	r4,r19,r7
 402bd14:	200890fa 	slli	r4,r4,3
 402bd18:	003fa806 	br	402bbbc <__alt_data_end+0xfffebbbc>
 402bd1c:	00803fc4 	movi	r2,255
 402bd20:	14c5803a 	cmpltu	r2,r2,r19
 402bd24:	100490fa 	slli	r2,r2,3
 402bd28:	003fc006 	br	402bc2c <__alt_data_end+0xfffebc2c>
 402bd2c:	00804034 	movhi	r2,256
 402bd30:	10bfffc4 	addi	r2,r2,-1
 402bd34:	11808b36 	bltu	r2,r6,402bf64 <__umoddi3+0x4f0>
 402bd38:	01000404 	movi	r4,16
 402bd3c:	003f6406 	br	402bad0 <__alt_data_end+0xfffebad0>
 402bd40:	34c4d83a 	srl	r2,r6,r19
 402bd44:	3d0e983a 	sll	r7,r7,r20
 402bd48:	8cf8d83a 	srl	fp,r17,r19
 402bd4c:	8d10983a 	sll	r8,r17,r20
 402bd50:	38aab03a 	or	r21,r7,r2
 402bd54:	a82cd43a 	srli	r22,r21,16
 402bd58:	84e2d83a 	srl	r17,r16,r19
 402bd5c:	e009883a 	mov	r4,fp
 402bd60:	b00b883a 	mov	r5,r22
 402bd64:	8a22b03a 	or	r17,r17,r8
 402bd68:	3524983a 	sll	r18,r6,r20
 402bd6c:	402c1080 	call	402c108 <__umodsi3>
 402bd70:	e009883a 	mov	r4,fp
 402bd74:	b00b883a 	mov	r5,r22
 402bd78:	102f883a 	mov	r23,r2
 402bd7c:	402c0a40 	call	402c0a4 <__udivsi3>
 402bd80:	100d883a 	mov	r6,r2
 402bd84:	b808943a 	slli	r4,r23,16
 402bd88:	aa3fffcc 	andi	r8,r21,65535
 402bd8c:	8804d43a 	srli	r2,r17,16
 402bd90:	41af383a 	mul	r23,r8,r6
 402bd94:	8520983a 	sll	r16,r16,r20
 402bd98:	1104b03a 	or	r2,r2,r4
 402bd9c:	15c0042e 	bgeu	r2,r23,402bdb0 <__umoddi3+0x33c>
 402bda0:	1545883a 	add	r2,r2,r21
 402bda4:	30ffffc4 	addi	r3,r6,-1
 402bda8:	1540742e 	bgeu	r2,r21,402bf7c <__umoddi3+0x508>
 402bdac:	180d883a 	mov	r6,r3
 402bdb0:	15efc83a 	sub	r23,r2,r23
 402bdb4:	b00b883a 	mov	r5,r22
 402bdb8:	b809883a 	mov	r4,r23
 402bdbc:	d9800115 	stw	r6,4(sp)
 402bdc0:	da000015 	stw	r8,0(sp)
 402bdc4:	402c1080 	call	402c108 <__umodsi3>
 402bdc8:	b00b883a 	mov	r5,r22
 402bdcc:	b809883a 	mov	r4,r23
 402bdd0:	1039883a 	mov	fp,r2
 402bdd4:	402c0a40 	call	402c0a4 <__udivsi3>
 402bdd8:	da000017 	ldw	r8,0(sp)
 402bddc:	e038943a 	slli	fp,fp,16
 402bde0:	100b883a 	mov	r5,r2
 402bde4:	4089383a 	mul	r4,r8,r2
 402bde8:	8a3fffcc 	andi	r8,r17,65535
 402bdec:	4710b03a 	or	r8,r8,fp
 402bdf0:	d9800117 	ldw	r6,4(sp)
 402bdf4:	4100042e 	bgeu	r8,r4,402be08 <__umoddi3+0x394>
 402bdf8:	4551883a 	add	r8,r8,r21
 402bdfc:	10bfffc4 	addi	r2,r2,-1
 402be00:	45405a2e 	bgeu	r8,r21,402bf6c <__umoddi3+0x4f8>
 402be04:	100b883a 	mov	r5,r2
 402be08:	300c943a 	slli	r6,r6,16
 402be0c:	91ffffcc 	andi	r7,r18,65535
 402be10:	9004d43a 	srli	r2,r18,16
 402be14:	314cb03a 	or	r6,r6,r5
 402be18:	317fffcc 	andi	r5,r6,65535
 402be1c:	300cd43a 	srli	r6,r6,16
 402be20:	29d3383a 	mul	r9,r5,r7
 402be24:	288b383a 	mul	r5,r5,r2
 402be28:	31cf383a 	mul	r7,r6,r7
 402be2c:	4806d43a 	srli	r3,r9,16
 402be30:	4111c83a 	sub	r8,r8,r4
 402be34:	29cb883a 	add	r5,r5,r7
 402be38:	194b883a 	add	r5,r3,r5
 402be3c:	3085383a 	mul	r2,r6,r2
 402be40:	29c0022e 	bgeu	r5,r7,402be4c <__umoddi3+0x3d8>
 402be44:	00c00074 	movhi	r3,1
 402be48:	10c5883a 	add	r2,r2,r3
 402be4c:	2808d43a 	srli	r4,r5,16
 402be50:	280a943a 	slli	r5,r5,16
 402be54:	4a7fffcc 	andi	r9,r9,65535
 402be58:	2085883a 	add	r2,r4,r2
 402be5c:	2a4b883a 	add	r5,r5,r9
 402be60:	40803636 	bltu	r8,r2,402bf3c <__umoddi3+0x4c8>
 402be64:	40804d26 	beq	r8,r2,402bf9c <__umoddi3+0x528>
 402be68:	4089c83a 	sub	r4,r8,r2
 402be6c:	280f883a 	mov	r7,r5
 402be70:	81cfc83a 	sub	r7,r16,r7
 402be74:	81c7803a 	cmpltu	r3,r16,r7
 402be78:	20c7c83a 	sub	r3,r4,r3
 402be7c:	1cc4983a 	sll	r2,r3,r19
 402be80:	3d0ed83a 	srl	r7,r7,r20
 402be84:	1d06d83a 	srl	r3,r3,r20
 402be88:	11c4b03a 	or	r2,r2,r7
 402be8c:	003f9306 	br	402bcdc <__alt_data_end+0xfffebcdc>
 402be90:	9ca6983a 	sll	r19,r19,r18
 402be94:	88e8d83a 	srl	r20,r17,r3
 402be98:	80c4d83a 	srl	r2,r16,r3
 402be9c:	982cd43a 	srli	r22,r19,16
 402bea0:	8ca2983a 	sll	r17,r17,r18
 402bea4:	a009883a 	mov	r4,r20
 402bea8:	b00b883a 	mov	r5,r22
 402beac:	1478b03a 	or	fp,r2,r17
 402beb0:	402c1080 	call	402c108 <__umodsi3>
 402beb4:	a009883a 	mov	r4,r20
 402beb8:	b00b883a 	mov	r5,r22
 402bebc:	1023883a 	mov	r17,r2
 402bec0:	402c0a40 	call	402c0a4 <__udivsi3>
 402bec4:	9d7fffcc 	andi	r21,r19,65535
 402bec8:	880a943a 	slli	r5,r17,16
 402becc:	e008d43a 	srli	r4,fp,16
 402bed0:	a885383a 	mul	r2,r21,r2
 402bed4:	84a8983a 	sll	r20,r16,r18
 402bed8:	2148b03a 	or	r4,r4,r5
 402bedc:	2080042e 	bgeu	r4,r2,402bef0 <__umoddi3+0x47c>
 402bee0:	24c9883a 	add	r4,r4,r19
 402bee4:	24c00236 	bltu	r4,r19,402bef0 <__umoddi3+0x47c>
 402bee8:	2080012e 	bgeu	r4,r2,402bef0 <__umoddi3+0x47c>
 402beec:	24c9883a 	add	r4,r4,r19
 402bef0:	20a3c83a 	sub	r17,r4,r2
 402bef4:	b00b883a 	mov	r5,r22
 402bef8:	8809883a 	mov	r4,r17
 402befc:	402c1080 	call	402c108 <__umodsi3>
 402bf00:	102f883a 	mov	r23,r2
 402bf04:	8809883a 	mov	r4,r17
 402bf08:	b00b883a 	mov	r5,r22
 402bf0c:	402c0a40 	call	402c0a4 <__udivsi3>
 402bf10:	b82e943a 	slli	r23,r23,16
 402bf14:	a885383a 	mul	r2,r21,r2
 402bf18:	e13fffcc 	andi	r4,fp,65535
 402bf1c:	25c8b03a 	or	r4,r4,r23
 402bf20:	2080042e 	bgeu	r4,r2,402bf34 <__umoddi3+0x4c0>
 402bf24:	24c9883a 	add	r4,r4,r19
 402bf28:	24c00236 	bltu	r4,r19,402bf34 <__umoddi3+0x4c0>
 402bf2c:	2080012e 	bgeu	r4,r2,402bf34 <__umoddi3+0x4c0>
 402bf30:	24c9883a 	add	r4,r4,r19
 402bf34:	20a3c83a 	sub	r17,r4,r2
 402bf38:	003f4806 	br	402bc5c <__alt_data_end+0xfffebc5c>
 402bf3c:	2c8fc83a 	sub	r7,r5,r18
 402bf40:	1545c83a 	sub	r2,r2,r21
 402bf44:	29cb803a 	cmpltu	r5,r5,r7
 402bf48:	1145c83a 	sub	r2,r2,r5
 402bf4c:	4089c83a 	sub	r4,r8,r2
 402bf50:	003fc706 	br	402be70 <__alt_data_end+0xfffebe70>
 402bf54:	01000604 	movi	r4,24
 402bf58:	003f1806 	br	402bbbc <__alt_data_end+0xfffebbbc>
 402bf5c:	00800604 	movi	r2,24
 402bf60:	003f3206 	br	402bc2c <__alt_data_end+0xfffebc2c>
 402bf64:	01000604 	movi	r4,24
 402bf68:	003ed906 	br	402bad0 <__alt_data_end+0xfffebad0>
 402bf6c:	413fa52e 	bgeu	r8,r4,402be04 <__alt_data_end+0xfffebe04>
 402bf70:	297fff84 	addi	r5,r5,-2
 402bf74:	4551883a 	add	r8,r8,r21
 402bf78:	003fa306 	br	402be08 <__alt_data_end+0xfffebe08>
 402bf7c:	15ff8b2e 	bgeu	r2,r23,402bdac <__alt_data_end+0xfffebdac>
 402bf80:	31bfff84 	addi	r6,r6,-2
 402bf84:	1545883a 	add	r2,r2,r21
 402bf88:	003f8906 	br	402bdb0 <__alt_data_end+0xfffebdb0>
 402bf8c:	24c9883a 	add	r4,r4,r19
 402bf90:	003eee06 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402bf94:	8005883a 	mov	r2,r16
 402bf98:	003f1706 	br	402bbf8 <__alt_data_end+0xfffebbf8>
 402bf9c:	817fe736 	bltu	r16,r5,402bf3c <__alt_data_end+0xfffebf3c>
 402bfa0:	280f883a 	mov	r7,r5
 402bfa4:	0009883a 	mov	r4,zero
 402bfa8:	003fb106 	br	402be70 <__alt_data_end+0xfffebe70>

0402bfac <__divsi3>:
 402bfac:	20001b16 	blt	r4,zero,402c01c <__divsi3+0x70>
 402bfb0:	000f883a 	mov	r7,zero
 402bfb4:	28001616 	blt	r5,zero,402c010 <__divsi3+0x64>
 402bfb8:	200d883a 	mov	r6,r4
 402bfbc:	29001a2e 	bgeu	r5,r4,402c028 <__divsi3+0x7c>
 402bfc0:	00800804 	movi	r2,32
 402bfc4:	00c00044 	movi	r3,1
 402bfc8:	00000106 	br	402bfd0 <__divsi3+0x24>
 402bfcc:	10000d26 	beq	r2,zero,402c004 <__divsi3+0x58>
 402bfd0:	294b883a 	add	r5,r5,r5
 402bfd4:	10bfffc4 	addi	r2,r2,-1
 402bfd8:	18c7883a 	add	r3,r3,r3
 402bfdc:	293ffb36 	bltu	r5,r4,402bfcc <__alt_data_end+0xfffebfcc>
 402bfe0:	0005883a 	mov	r2,zero
 402bfe4:	18000726 	beq	r3,zero,402c004 <__divsi3+0x58>
 402bfe8:	0005883a 	mov	r2,zero
 402bfec:	31400236 	bltu	r6,r5,402bff8 <__divsi3+0x4c>
 402bff0:	314dc83a 	sub	r6,r6,r5
 402bff4:	10c4b03a 	or	r2,r2,r3
 402bff8:	1806d07a 	srli	r3,r3,1
 402bffc:	280ad07a 	srli	r5,r5,1
 402c000:	183ffa1e 	bne	r3,zero,402bfec <__alt_data_end+0xfffebfec>
 402c004:	38000126 	beq	r7,zero,402c00c <__divsi3+0x60>
 402c008:	0085c83a 	sub	r2,zero,r2
 402c00c:	f800283a 	ret
 402c010:	014bc83a 	sub	r5,zero,r5
 402c014:	39c0005c 	xori	r7,r7,1
 402c018:	003fe706 	br	402bfb8 <__alt_data_end+0xfffebfb8>
 402c01c:	0109c83a 	sub	r4,zero,r4
 402c020:	01c00044 	movi	r7,1
 402c024:	003fe306 	br	402bfb4 <__alt_data_end+0xfffebfb4>
 402c028:	00c00044 	movi	r3,1
 402c02c:	003fee06 	br	402bfe8 <__alt_data_end+0xfffebfe8>

0402c030 <__modsi3>:
 402c030:	20001716 	blt	r4,zero,402c090 <__modsi3+0x60>
 402c034:	000f883a 	mov	r7,zero
 402c038:	2005883a 	mov	r2,r4
 402c03c:	28001216 	blt	r5,zero,402c088 <__modsi3+0x58>
 402c040:	2900162e 	bgeu	r5,r4,402c09c <__modsi3+0x6c>
 402c044:	01800804 	movi	r6,32
 402c048:	00c00044 	movi	r3,1
 402c04c:	00000106 	br	402c054 <__modsi3+0x24>
 402c050:	30000a26 	beq	r6,zero,402c07c <__modsi3+0x4c>
 402c054:	294b883a 	add	r5,r5,r5
 402c058:	31bfffc4 	addi	r6,r6,-1
 402c05c:	18c7883a 	add	r3,r3,r3
 402c060:	293ffb36 	bltu	r5,r4,402c050 <__alt_data_end+0xfffec050>
 402c064:	18000526 	beq	r3,zero,402c07c <__modsi3+0x4c>
 402c068:	1806d07a 	srli	r3,r3,1
 402c06c:	11400136 	bltu	r2,r5,402c074 <__modsi3+0x44>
 402c070:	1145c83a 	sub	r2,r2,r5
 402c074:	280ad07a 	srli	r5,r5,1
 402c078:	183ffb1e 	bne	r3,zero,402c068 <__alt_data_end+0xfffec068>
 402c07c:	38000126 	beq	r7,zero,402c084 <__modsi3+0x54>
 402c080:	0085c83a 	sub	r2,zero,r2
 402c084:	f800283a 	ret
 402c088:	014bc83a 	sub	r5,zero,r5
 402c08c:	003fec06 	br	402c040 <__alt_data_end+0xfffec040>
 402c090:	0109c83a 	sub	r4,zero,r4
 402c094:	01c00044 	movi	r7,1
 402c098:	003fe706 	br	402c038 <__alt_data_end+0xfffec038>
 402c09c:	00c00044 	movi	r3,1
 402c0a0:	003ff106 	br	402c068 <__alt_data_end+0xfffec068>

0402c0a4 <__udivsi3>:
 402c0a4:	200d883a 	mov	r6,r4
 402c0a8:	2900152e 	bgeu	r5,r4,402c100 <__udivsi3+0x5c>
 402c0ac:	28001416 	blt	r5,zero,402c100 <__udivsi3+0x5c>
 402c0b0:	00800804 	movi	r2,32
 402c0b4:	00c00044 	movi	r3,1
 402c0b8:	00000206 	br	402c0c4 <__udivsi3+0x20>
 402c0bc:	10000e26 	beq	r2,zero,402c0f8 <__udivsi3+0x54>
 402c0c0:	28000516 	blt	r5,zero,402c0d8 <__udivsi3+0x34>
 402c0c4:	294b883a 	add	r5,r5,r5
 402c0c8:	10bfffc4 	addi	r2,r2,-1
 402c0cc:	18c7883a 	add	r3,r3,r3
 402c0d0:	293ffa36 	bltu	r5,r4,402c0bc <__alt_data_end+0xfffec0bc>
 402c0d4:	18000826 	beq	r3,zero,402c0f8 <__udivsi3+0x54>
 402c0d8:	0005883a 	mov	r2,zero
 402c0dc:	31400236 	bltu	r6,r5,402c0e8 <__udivsi3+0x44>
 402c0e0:	314dc83a 	sub	r6,r6,r5
 402c0e4:	10c4b03a 	or	r2,r2,r3
 402c0e8:	1806d07a 	srli	r3,r3,1
 402c0ec:	280ad07a 	srli	r5,r5,1
 402c0f0:	183ffa1e 	bne	r3,zero,402c0dc <__alt_data_end+0xfffec0dc>
 402c0f4:	f800283a 	ret
 402c0f8:	0005883a 	mov	r2,zero
 402c0fc:	f800283a 	ret
 402c100:	00c00044 	movi	r3,1
 402c104:	003ff406 	br	402c0d8 <__alt_data_end+0xfffec0d8>

0402c108 <__umodsi3>:
 402c108:	2005883a 	mov	r2,r4
 402c10c:	2900122e 	bgeu	r5,r4,402c158 <__umodsi3+0x50>
 402c110:	28001116 	blt	r5,zero,402c158 <__umodsi3+0x50>
 402c114:	01800804 	movi	r6,32
 402c118:	00c00044 	movi	r3,1
 402c11c:	00000206 	br	402c128 <__umodsi3+0x20>
 402c120:	30000c26 	beq	r6,zero,402c154 <__umodsi3+0x4c>
 402c124:	28000516 	blt	r5,zero,402c13c <__umodsi3+0x34>
 402c128:	294b883a 	add	r5,r5,r5
 402c12c:	31bfffc4 	addi	r6,r6,-1
 402c130:	18c7883a 	add	r3,r3,r3
 402c134:	293ffa36 	bltu	r5,r4,402c120 <__alt_data_end+0xfffec120>
 402c138:	18000626 	beq	r3,zero,402c154 <__umodsi3+0x4c>
 402c13c:	1806d07a 	srli	r3,r3,1
 402c140:	11400136 	bltu	r2,r5,402c148 <__umodsi3+0x40>
 402c144:	1145c83a 	sub	r2,r2,r5
 402c148:	280ad07a 	srli	r5,r5,1
 402c14c:	183ffb1e 	bne	r3,zero,402c13c <__alt_data_end+0xfffec13c>
 402c150:	f800283a 	ret
 402c154:	f800283a 	ret
 402c158:	00c00044 	movi	r3,1
 402c15c:	003ff706 	br	402c13c <__alt_data_end+0xfffec13c>

0402c160 <__adddf3>:
 402c160:	02c00434 	movhi	r11,16
 402c164:	5affffc4 	addi	r11,r11,-1
 402c168:	2806d7fa 	srli	r3,r5,31
 402c16c:	2ad4703a 	and	r10,r5,r11
 402c170:	3ad2703a 	and	r9,r7,r11
 402c174:	3804d53a 	srli	r2,r7,20
 402c178:	3018d77a 	srli	r12,r6,29
 402c17c:	280ad53a 	srli	r5,r5,20
 402c180:	501490fa 	slli	r10,r10,3
 402c184:	2010d77a 	srli	r8,r4,29
 402c188:	481290fa 	slli	r9,r9,3
 402c18c:	380ed7fa 	srli	r7,r7,31
 402c190:	defffb04 	addi	sp,sp,-20
 402c194:	dc800215 	stw	r18,8(sp)
 402c198:	dc400115 	stw	r17,4(sp)
 402c19c:	dc000015 	stw	r16,0(sp)
 402c1a0:	dfc00415 	stw	ra,16(sp)
 402c1a4:	dcc00315 	stw	r19,12(sp)
 402c1a8:	1c803fcc 	andi	r18,r3,255
 402c1ac:	2c01ffcc 	andi	r16,r5,2047
 402c1b0:	5210b03a 	or	r8,r10,r8
 402c1b4:	202290fa 	slli	r17,r4,3
 402c1b8:	1081ffcc 	andi	r2,r2,2047
 402c1bc:	4b12b03a 	or	r9,r9,r12
 402c1c0:	300c90fa 	slli	r6,r6,3
 402c1c4:	91c07526 	beq	r18,r7,402c39c <__adddf3+0x23c>
 402c1c8:	8087c83a 	sub	r3,r16,r2
 402c1cc:	00c0ab0e 	bge	zero,r3,402c47c <__adddf3+0x31c>
 402c1d0:	10002a1e 	bne	r2,zero,402c27c <__adddf3+0x11c>
 402c1d4:	4984b03a 	or	r2,r9,r6
 402c1d8:	1000961e 	bne	r2,zero,402c434 <__adddf3+0x2d4>
 402c1dc:	888001cc 	andi	r2,r17,7
 402c1e0:	10000726 	beq	r2,zero,402c200 <__adddf3+0xa0>
 402c1e4:	888003cc 	andi	r2,r17,15
 402c1e8:	00c00104 	movi	r3,4
 402c1ec:	10c00426 	beq	r2,r3,402c200 <__adddf3+0xa0>
 402c1f0:	88c7883a 	add	r3,r17,r3
 402c1f4:	1c63803a 	cmpltu	r17,r3,r17
 402c1f8:	4451883a 	add	r8,r8,r17
 402c1fc:	1823883a 	mov	r17,r3
 402c200:	4080202c 	andhi	r2,r8,128
 402c204:	10005926 	beq	r2,zero,402c36c <__adddf3+0x20c>
 402c208:	84000044 	addi	r16,r16,1
 402c20c:	0081ffc4 	movi	r2,2047
 402c210:	8080ba26 	beq	r16,r2,402c4fc <__adddf3+0x39c>
 402c214:	00bfe034 	movhi	r2,65408
 402c218:	10bfffc4 	addi	r2,r2,-1
 402c21c:	4090703a 	and	r8,r8,r2
 402c220:	4004977a 	slli	r2,r8,29
 402c224:	4010927a 	slli	r8,r8,9
 402c228:	8822d0fa 	srli	r17,r17,3
 402c22c:	8401ffcc 	andi	r16,r16,2047
 402c230:	4010d33a 	srli	r8,r8,12
 402c234:	9007883a 	mov	r3,r18
 402c238:	1444b03a 	or	r2,r2,r17
 402c23c:	8401ffcc 	andi	r16,r16,2047
 402c240:	8020953a 	slli	r16,r16,20
 402c244:	18c03fcc 	andi	r3,r3,255
 402c248:	01000434 	movhi	r4,16
 402c24c:	213fffc4 	addi	r4,r4,-1
 402c250:	180697fa 	slli	r3,r3,31
 402c254:	4110703a 	and	r8,r8,r4
 402c258:	4410b03a 	or	r8,r8,r16
 402c25c:	40c6b03a 	or	r3,r8,r3
 402c260:	dfc00417 	ldw	ra,16(sp)
 402c264:	dcc00317 	ldw	r19,12(sp)
 402c268:	dc800217 	ldw	r18,8(sp)
 402c26c:	dc400117 	ldw	r17,4(sp)
 402c270:	dc000017 	ldw	r16,0(sp)
 402c274:	dec00504 	addi	sp,sp,20
 402c278:	f800283a 	ret
 402c27c:	0081ffc4 	movi	r2,2047
 402c280:	80bfd626 	beq	r16,r2,402c1dc <__alt_data_end+0xfffec1dc>
 402c284:	4a402034 	orhi	r9,r9,128
 402c288:	00800e04 	movi	r2,56
 402c28c:	10c09f16 	blt	r2,r3,402c50c <__adddf3+0x3ac>
 402c290:	008007c4 	movi	r2,31
 402c294:	10c0c216 	blt	r2,r3,402c5a0 <__adddf3+0x440>
 402c298:	00800804 	movi	r2,32
 402c29c:	10c5c83a 	sub	r2,r2,r3
 402c2a0:	488a983a 	sll	r5,r9,r2
 402c2a4:	30c8d83a 	srl	r4,r6,r3
 402c2a8:	3084983a 	sll	r2,r6,r2
 402c2ac:	48c6d83a 	srl	r3,r9,r3
 402c2b0:	290cb03a 	or	r6,r5,r4
 402c2b4:	1004c03a 	cmpne	r2,r2,zero
 402c2b8:	308cb03a 	or	r6,r6,r2
 402c2bc:	898dc83a 	sub	r6,r17,r6
 402c2c0:	89a3803a 	cmpltu	r17,r17,r6
 402c2c4:	40d1c83a 	sub	r8,r8,r3
 402c2c8:	4451c83a 	sub	r8,r8,r17
 402c2cc:	3023883a 	mov	r17,r6
 402c2d0:	4080202c 	andhi	r2,r8,128
 402c2d4:	10002326 	beq	r2,zero,402c364 <__adddf3+0x204>
 402c2d8:	04c02034 	movhi	r19,128
 402c2dc:	9cffffc4 	addi	r19,r19,-1
 402c2e0:	44e6703a 	and	r19,r8,r19
 402c2e4:	98007626 	beq	r19,zero,402c4c0 <__adddf3+0x360>
 402c2e8:	9809883a 	mov	r4,r19
 402c2ec:	4021f180 	call	4021f18 <__clzsi2>
 402c2f0:	10fffe04 	addi	r3,r2,-8
 402c2f4:	010007c4 	movi	r4,31
 402c2f8:	20c07716 	blt	r4,r3,402c4d8 <__adddf3+0x378>
 402c2fc:	00800804 	movi	r2,32
 402c300:	10c5c83a 	sub	r2,r2,r3
 402c304:	8884d83a 	srl	r2,r17,r2
 402c308:	98d0983a 	sll	r8,r19,r3
 402c30c:	88e2983a 	sll	r17,r17,r3
 402c310:	1204b03a 	or	r2,r2,r8
 402c314:	1c007416 	blt	r3,r16,402c4e8 <__adddf3+0x388>
 402c318:	1c21c83a 	sub	r16,r3,r16
 402c31c:	82000044 	addi	r8,r16,1
 402c320:	00c007c4 	movi	r3,31
 402c324:	1a009116 	blt	r3,r8,402c56c <__adddf3+0x40c>
 402c328:	00c00804 	movi	r3,32
 402c32c:	1a07c83a 	sub	r3,r3,r8
 402c330:	8a08d83a 	srl	r4,r17,r8
 402c334:	88e2983a 	sll	r17,r17,r3
 402c338:	10c6983a 	sll	r3,r2,r3
 402c33c:	1210d83a 	srl	r8,r2,r8
 402c340:	8804c03a 	cmpne	r2,r17,zero
 402c344:	1906b03a 	or	r3,r3,r4
 402c348:	18a2b03a 	or	r17,r3,r2
 402c34c:	0021883a 	mov	r16,zero
 402c350:	003fa206 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c354:	1890b03a 	or	r8,r3,r2
 402c358:	40017d26 	beq	r8,zero,402c950 <__adddf3+0x7f0>
 402c35c:	1011883a 	mov	r8,r2
 402c360:	1823883a 	mov	r17,r3
 402c364:	888001cc 	andi	r2,r17,7
 402c368:	103f9e1e 	bne	r2,zero,402c1e4 <__alt_data_end+0xfffec1e4>
 402c36c:	4004977a 	slli	r2,r8,29
 402c370:	8822d0fa 	srli	r17,r17,3
 402c374:	4010d0fa 	srli	r8,r8,3
 402c378:	9007883a 	mov	r3,r18
 402c37c:	1444b03a 	or	r2,r2,r17
 402c380:	0101ffc4 	movi	r4,2047
 402c384:	81002426 	beq	r16,r4,402c418 <__adddf3+0x2b8>
 402c388:	8120703a 	and	r16,r16,r4
 402c38c:	01000434 	movhi	r4,16
 402c390:	213fffc4 	addi	r4,r4,-1
 402c394:	4110703a 	and	r8,r8,r4
 402c398:	003fa806 	br	402c23c <__alt_data_end+0xfffec23c>
 402c39c:	8089c83a 	sub	r4,r16,r2
 402c3a0:	01005e0e 	bge	zero,r4,402c51c <__adddf3+0x3bc>
 402c3a4:	10002b26 	beq	r2,zero,402c454 <__adddf3+0x2f4>
 402c3a8:	0081ffc4 	movi	r2,2047
 402c3ac:	80bf8b26 	beq	r16,r2,402c1dc <__alt_data_end+0xfffec1dc>
 402c3b0:	4a402034 	orhi	r9,r9,128
 402c3b4:	00800e04 	movi	r2,56
 402c3b8:	1100a40e 	bge	r2,r4,402c64c <__adddf3+0x4ec>
 402c3bc:	498cb03a 	or	r6,r9,r6
 402c3c0:	300ac03a 	cmpne	r5,r6,zero
 402c3c4:	0013883a 	mov	r9,zero
 402c3c8:	2c4b883a 	add	r5,r5,r17
 402c3cc:	2c63803a 	cmpltu	r17,r5,r17
 402c3d0:	4a11883a 	add	r8,r9,r8
 402c3d4:	8a11883a 	add	r8,r17,r8
 402c3d8:	2823883a 	mov	r17,r5
 402c3dc:	4080202c 	andhi	r2,r8,128
 402c3e0:	103fe026 	beq	r2,zero,402c364 <__alt_data_end+0xfffec364>
 402c3e4:	84000044 	addi	r16,r16,1
 402c3e8:	0081ffc4 	movi	r2,2047
 402c3ec:	8080d226 	beq	r16,r2,402c738 <__adddf3+0x5d8>
 402c3f0:	00bfe034 	movhi	r2,65408
 402c3f4:	10bfffc4 	addi	r2,r2,-1
 402c3f8:	4090703a 	and	r8,r8,r2
 402c3fc:	880ad07a 	srli	r5,r17,1
 402c400:	400897fa 	slli	r4,r8,31
 402c404:	88c0004c 	andi	r3,r17,1
 402c408:	28e2b03a 	or	r17,r5,r3
 402c40c:	4010d07a 	srli	r8,r8,1
 402c410:	2462b03a 	or	r17,r4,r17
 402c414:	003f7106 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c418:	4088b03a 	or	r4,r8,r2
 402c41c:	20014526 	beq	r4,zero,402c934 <__adddf3+0x7d4>
 402c420:	01000434 	movhi	r4,16
 402c424:	42000234 	orhi	r8,r8,8
 402c428:	213fffc4 	addi	r4,r4,-1
 402c42c:	4110703a 	and	r8,r8,r4
 402c430:	003f8206 	br	402c23c <__alt_data_end+0xfffec23c>
 402c434:	18ffffc4 	addi	r3,r3,-1
 402c438:	1800491e 	bne	r3,zero,402c560 <__adddf3+0x400>
 402c43c:	898bc83a 	sub	r5,r17,r6
 402c440:	8963803a 	cmpltu	r17,r17,r5
 402c444:	4251c83a 	sub	r8,r8,r9
 402c448:	4451c83a 	sub	r8,r8,r17
 402c44c:	2823883a 	mov	r17,r5
 402c450:	003f9f06 	br	402c2d0 <__alt_data_end+0xfffec2d0>
 402c454:	4984b03a 	or	r2,r9,r6
 402c458:	103f6026 	beq	r2,zero,402c1dc <__alt_data_end+0xfffec1dc>
 402c45c:	213fffc4 	addi	r4,r4,-1
 402c460:	2000931e 	bne	r4,zero,402c6b0 <__adddf3+0x550>
 402c464:	898d883a 	add	r6,r17,r6
 402c468:	3463803a 	cmpltu	r17,r6,r17
 402c46c:	4251883a 	add	r8,r8,r9
 402c470:	8a11883a 	add	r8,r17,r8
 402c474:	3023883a 	mov	r17,r6
 402c478:	003fd806 	br	402c3dc <__alt_data_end+0xfffec3dc>
 402c47c:	1800541e 	bne	r3,zero,402c5d0 <__adddf3+0x470>
 402c480:	80800044 	addi	r2,r16,1
 402c484:	1081ffcc 	andi	r2,r2,2047
 402c488:	00c00044 	movi	r3,1
 402c48c:	1880a00e 	bge	r3,r2,402c710 <__adddf3+0x5b0>
 402c490:	8989c83a 	sub	r4,r17,r6
 402c494:	8905803a 	cmpltu	r2,r17,r4
 402c498:	4267c83a 	sub	r19,r8,r9
 402c49c:	98a7c83a 	sub	r19,r19,r2
 402c4a0:	9880202c 	andhi	r2,r19,128
 402c4a4:	10006326 	beq	r2,zero,402c634 <__adddf3+0x4d4>
 402c4a8:	3463c83a 	sub	r17,r6,r17
 402c4ac:	4a07c83a 	sub	r3,r9,r8
 402c4b0:	344d803a 	cmpltu	r6,r6,r17
 402c4b4:	19a7c83a 	sub	r19,r3,r6
 402c4b8:	3825883a 	mov	r18,r7
 402c4bc:	983f8a1e 	bne	r19,zero,402c2e8 <__alt_data_end+0xfffec2e8>
 402c4c0:	8809883a 	mov	r4,r17
 402c4c4:	4021f180 	call	4021f18 <__clzsi2>
 402c4c8:	10800804 	addi	r2,r2,32
 402c4cc:	10fffe04 	addi	r3,r2,-8
 402c4d0:	010007c4 	movi	r4,31
 402c4d4:	20ff890e 	bge	r4,r3,402c2fc <__alt_data_end+0xfffec2fc>
 402c4d8:	10bff604 	addi	r2,r2,-40
 402c4dc:	8884983a 	sll	r2,r17,r2
 402c4e0:	0023883a 	mov	r17,zero
 402c4e4:	1c3f8c0e 	bge	r3,r16,402c318 <__alt_data_end+0xfffec318>
 402c4e8:	023fe034 	movhi	r8,65408
 402c4ec:	423fffc4 	addi	r8,r8,-1
 402c4f0:	80e1c83a 	sub	r16,r16,r3
 402c4f4:	1210703a 	and	r8,r2,r8
 402c4f8:	003f3806 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c4fc:	9007883a 	mov	r3,r18
 402c500:	0011883a 	mov	r8,zero
 402c504:	0005883a 	mov	r2,zero
 402c508:	003f4c06 	br	402c23c <__alt_data_end+0xfffec23c>
 402c50c:	498cb03a 	or	r6,r9,r6
 402c510:	300cc03a 	cmpne	r6,r6,zero
 402c514:	0007883a 	mov	r3,zero
 402c518:	003f6806 	br	402c2bc <__alt_data_end+0xfffec2bc>
 402c51c:	20009c1e 	bne	r4,zero,402c790 <__adddf3+0x630>
 402c520:	80800044 	addi	r2,r16,1
 402c524:	1141ffcc 	andi	r5,r2,2047
 402c528:	01000044 	movi	r4,1
 402c52c:	2140670e 	bge	r4,r5,402c6cc <__adddf3+0x56c>
 402c530:	0101ffc4 	movi	r4,2047
 402c534:	11007f26 	beq	r2,r4,402c734 <__adddf3+0x5d4>
 402c538:	898d883a 	add	r6,r17,r6
 402c53c:	4247883a 	add	r3,r8,r9
 402c540:	3451803a 	cmpltu	r8,r6,r17
 402c544:	40d1883a 	add	r8,r8,r3
 402c548:	402297fa 	slli	r17,r8,31
 402c54c:	300cd07a 	srli	r6,r6,1
 402c550:	4010d07a 	srli	r8,r8,1
 402c554:	1021883a 	mov	r16,r2
 402c558:	89a2b03a 	or	r17,r17,r6
 402c55c:	003f1f06 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c560:	0081ffc4 	movi	r2,2047
 402c564:	80bf481e 	bne	r16,r2,402c288 <__alt_data_end+0xfffec288>
 402c568:	003f1c06 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c56c:	843ff844 	addi	r16,r16,-31
 402c570:	01000804 	movi	r4,32
 402c574:	1406d83a 	srl	r3,r2,r16
 402c578:	41005026 	beq	r8,r4,402c6bc <__adddf3+0x55c>
 402c57c:	01001004 	movi	r4,64
 402c580:	2211c83a 	sub	r8,r4,r8
 402c584:	1204983a 	sll	r2,r2,r8
 402c588:	88a2b03a 	or	r17,r17,r2
 402c58c:	8822c03a 	cmpne	r17,r17,zero
 402c590:	1c62b03a 	or	r17,r3,r17
 402c594:	0011883a 	mov	r8,zero
 402c598:	0021883a 	mov	r16,zero
 402c59c:	003f7106 	br	402c364 <__alt_data_end+0xfffec364>
 402c5a0:	193ff804 	addi	r4,r3,-32
 402c5a4:	00800804 	movi	r2,32
 402c5a8:	4908d83a 	srl	r4,r9,r4
 402c5ac:	18804526 	beq	r3,r2,402c6c4 <__adddf3+0x564>
 402c5b0:	00801004 	movi	r2,64
 402c5b4:	10c5c83a 	sub	r2,r2,r3
 402c5b8:	4886983a 	sll	r3,r9,r2
 402c5bc:	198cb03a 	or	r6,r3,r6
 402c5c0:	300cc03a 	cmpne	r6,r6,zero
 402c5c4:	218cb03a 	or	r6,r4,r6
 402c5c8:	0007883a 	mov	r3,zero
 402c5cc:	003f3b06 	br	402c2bc <__alt_data_end+0xfffec2bc>
 402c5d0:	80002a26 	beq	r16,zero,402c67c <__adddf3+0x51c>
 402c5d4:	0101ffc4 	movi	r4,2047
 402c5d8:	11006826 	beq	r2,r4,402c77c <__adddf3+0x61c>
 402c5dc:	00c7c83a 	sub	r3,zero,r3
 402c5e0:	42002034 	orhi	r8,r8,128
 402c5e4:	01000e04 	movi	r4,56
 402c5e8:	20c07c16 	blt	r4,r3,402c7dc <__adddf3+0x67c>
 402c5ec:	010007c4 	movi	r4,31
 402c5f0:	20c0da16 	blt	r4,r3,402c95c <__adddf3+0x7fc>
 402c5f4:	01000804 	movi	r4,32
 402c5f8:	20c9c83a 	sub	r4,r4,r3
 402c5fc:	4114983a 	sll	r10,r8,r4
 402c600:	88cad83a 	srl	r5,r17,r3
 402c604:	8908983a 	sll	r4,r17,r4
 402c608:	40c6d83a 	srl	r3,r8,r3
 402c60c:	5162b03a 	or	r17,r10,r5
 402c610:	2008c03a 	cmpne	r4,r4,zero
 402c614:	8922b03a 	or	r17,r17,r4
 402c618:	3463c83a 	sub	r17,r6,r17
 402c61c:	48c7c83a 	sub	r3,r9,r3
 402c620:	344d803a 	cmpltu	r6,r6,r17
 402c624:	1991c83a 	sub	r8,r3,r6
 402c628:	1021883a 	mov	r16,r2
 402c62c:	3825883a 	mov	r18,r7
 402c630:	003f2706 	br	402c2d0 <__alt_data_end+0xfffec2d0>
 402c634:	24d0b03a 	or	r8,r4,r19
 402c638:	40001b1e 	bne	r8,zero,402c6a8 <__adddf3+0x548>
 402c63c:	0005883a 	mov	r2,zero
 402c640:	0007883a 	mov	r3,zero
 402c644:	0021883a 	mov	r16,zero
 402c648:	003f4d06 	br	402c380 <__alt_data_end+0xfffec380>
 402c64c:	008007c4 	movi	r2,31
 402c650:	11003c16 	blt	r2,r4,402c744 <__adddf3+0x5e4>
 402c654:	00800804 	movi	r2,32
 402c658:	1105c83a 	sub	r2,r2,r4
 402c65c:	488e983a 	sll	r7,r9,r2
 402c660:	310ad83a 	srl	r5,r6,r4
 402c664:	3084983a 	sll	r2,r6,r2
 402c668:	4912d83a 	srl	r9,r9,r4
 402c66c:	394ab03a 	or	r5,r7,r5
 402c670:	1004c03a 	cmpne	r2,r2,zero
 402c674:	288ab03a 	or	r5,r5,r2
 402c678:	003f5306 	br	402c3c8 <__alt_data_end+0xfffec3c8>
 402c67c:	4448b03a 	or	r4,r8,r17
 402c680:	20003e26 	beq	r4,zero,402c77c <__adddf3+0x61c>
 402c684:	00c6303a 	nor	r3,zero,r3
 402c688:	18003a1e 	bne	r3,zero,402c774 <__adddf3+0x614>
 402c68c:	3463c83a 	sub	r17,r6,r17
 402c690:	4a07c83a 	sub	r3,r9,r8
 402c694:	344d803a 	cmpltu	r6,r6,r17
 402c698:	1991c83a 	sub	r8,r3,r6
 402c69c:	1021883a 	mov	r16,r2
 402c6a0:	3825883a 	mov	r18,r7
 402c6a4:	003f0a06 	br	402c2d0 <__alt_data_end+0xfffec2d0>
 402c6a8:	2023883a 	mov	r17,r4
 402c6ac:	003f0d06 	br	402c2e4 <__alt_data_end+0xfffec2e4>
 402c6b0:	0081ffc4 	movi	r2,2047
 402c6b4:	80bf3f1e 	bne	r16,r2,402c3b4 <__alt_data_end+0xfffec3b4>
 402c6b8:	003ec806 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c6bc:	0005883a 	mov	r2,zero
 402c6c0:	003fb106 	br	402c588 <__alt_data_end+0xfffec588>
 402c6c4:	0007883a 	mov	r3,zero
 402c6c8:	003fbc06 	br	402c5bc <__alt_data_end+0xfffec5bc>
 402c6cc:	4444b03a 	or	r2,r8,r17
 402c6d0:	8000871e 	bne	r16,zero,402c8f0 <__adddf3+0x790>
 402c6d4:	1000ba26 	beq	r2,zero,402c9c0 <__adddf3+0x860>
 402c6d8:	4984b03a 	or	r2,r9,r6
 402c6dc:	103ebf26 	beq	r2,zero,402c1dc <__alt_data_end+0xfffec1dc>
 402c6e0:	8985883a 	add	r2,r17,r6
 402c6e4:	4247883a 	add	r3,r8,r9
 402c6e8:	1451803a 	cmpltu	r8,r2,r17
 402c6ec:	40d1883a 	add	r8,r8,r3
 402c6f0:	40c0202c 	andhi	r3,r8,128
 402c6f4:	1023883a 	mov	r17,r2
 402c6f8:	183f1a26 	beq	r3,zero,402c364 <__alt_data_end+0xfffec364>
 402c6fc:	00bfe034 	movhi	r2,65408
 402c700:	10bfffc4 	addi	r2,r2,-1
 402c704:	2021883a 	mov	r16,r4
 402c708:	4090703a 	and	r8,r8,r2
 402c70c:	003eb306 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c710:	4444b03a 	or	r2,r8,r17
 402c714:	8000291e 	bne	r16,zero,402c7bc <__adddf3+0x65c>
 402c718:	10004b1e 	bne	r2,zero,402c848 <__adddf3+0x6e8>
 402c71c:	4990b03a 	or	r8,r9,r6
 402c720:	40008b26 	beq	r8,zero,402c950 <__adddf3+0x7f0>
 402c724:	4811883a 	mov	r8,r9
 402c728:	3023883a 	mov	r17,r6
 402c72c:	3825883a 	mov	r18,r7
 402c730:	003eaa06 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c734:	1021883a 	mov	r16,r2
 402c738:	0011883a 	mov	r8,zero
 402c73c:	0005883a 	mov	r2,zero
 402c740:	003f0f06 	br	402c380 <__alt_data_end+0xfffec380>
 402c744:	217ff804 	addi	r5,r4,-32
 402c748:	00800804 	movi	r2,32
 402c74c:	494ad83a 	srl	r5,r9,r5
 402c750:	20807d26 	beq	r4,r2,402c948 <__adddf3+0x7e8>
 402c754:	00801004 	movi	r2,64
 402c758:	1109c83a 	sub	r4,r2,r4
 402c75c:	4912983a 	sll	r9,r9,r4
 402c760:	498cb03a 	or	r6,r9,r6
 402c764:	300cc03a 	cmpne	r6,r6,zero
 402c768:	298ab03a 	or	r5,r5,r6
 402c76c:	0013883a 	mov	r9,zero
 402c770:	003f1506 	br	402c3c8 <__alt_data_end+0xfffec3c8>
 402c774:	0101ffc4 	movi	r4,2047
 402c778:	113f9a1e 	bne	r2,r4,402c5e4 <__alt_data_end+0xfffec5e4>
 402c77c:	4811883a 	mov	r8,r9
 402c780:	3023883a 	mov	r17,r6
 402c784:	1021883a 	mov	r16,r2
 402c788:	3825883a 	mov	r18,r7
 402c78c:	003e9306 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c790:	8000161e 	bne	r16,zero,402c7ec <__adddf3+0x68c>
 402c794:	444ab03a 	or	r5,r8,r17
 402c798:	28005126 	beq	r5,zero,402c8e0 <__adddf3+0x780>
 402c79c:	0108303a 	nor	r4,zero,r4
 402c7a0:	20004d1e 	bne	r4,zero,402c8d8 <__adddf3+0x778>
 402c7a4:	89a3883a 	add	r17,r17,r6
 402c7a8:	4253883a 	add	r9,r8,r9
 402c7ac:	898d803a 	cmpltu	r6,r17,r6
 402c7b0:	3251883a 	add	r8,r6,r9
 402c7b4:	1021883a 	mov	r16,r2
 402c7b8:	003f0806 	br	402c3dc <__alt_data_end+0xfffec3dc>
 402c7bc:	1000301e 	bne	r2,zero,402c880 <__adddf3+0x720>
 402c7c0:	4984b03a 	or	r2,r9,r6
 402c7c4:	10007126 	beq	r2,zero,402c98c <__adddf3+0x82c>
 402c7c8:	4811883a 	mov	r8,r9
 402c7cc:	3023883a 	mov	r17,r6
 402c7d0:	3825883a 	mov	r18,r7
 402c7d4:	0401ffc4 	movi	r16,2047
 402c7d8:	003e8006 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c7dc:	4462b03a 	or	r17,r8,r17
 402c7e0:	8822c03a 	cmpne	r17,r17,zero
 402c7e4:	0007883a 	mov	r3,zero
 402c7e8:	003f8b06 	br	402c618 <__alt_data_end+0xfffec618>
 402c7ec:	0141ffc4 	movi	r5,2047
 402c7f0:	11403b26 	beq	r2,r5,402c8e0 <__adddf3+0x780>
 402c7f4:	0109c83a 	sub	r4,zero,r4
 402c7f8:	42002034 	orhi	r8,r8,128
 402c7fc:	01400e04 	movi	r5,56
 402c800:	29006716 	blt	r5,r4,402c9a0 <__adddf3+0x840>
 402c804:	014007c4 	movi	r5,31
 402c808:	29007016 	blt	r5,r4,402c9cc <__adddf3+0x86c>
 402c80c:	01400804 	movi	r5,32
 402c810:	290bc83a 	sub	r5,r5,r4
 402c814:	4154983a 	sll	r10,r8,r5
 402c818:	890ed83a 	srl	r7,r17,r4
 402c81c:	894a983a 	sll	r5,r17,r5
 402c820:	4108d83a 	srl	r4,r8,r4
 402c824:	51e2b03a 	or	r17,r10,r7
 402c828:	280ac03a 	cmpne	r5,r5,zero
 402c82c:	8962b03a 	or	r17,r17,r5
 402c830:	89a3883a 	add	r17,r17,r6
 402c834:	2253883a 	add	r9,r4,r9
 402c838:	898d803a 	cmpltu	r6,r17,r6
 402c83c:	3251883a 	add	r8,r6,r9
 402c840:	1021883a 	mov	r16,r2
 402c844:	003ee506 	br	402c3dc <__alt_data_end+0xfffec3dc>
 402c848:	4984b03a 	or	r2,r9,r6
 402c84c:	103e6326 	beq	r2,zero,402c1dc <__alt_data_end+0xfffec1dc>
 402c850:	8987c83a 	sub	r3,r17,r6
 402c854:	88c9803a 	cmpltu	r4,r17,r3
 402c858:	4245c83a 	sub	r2,r8,r9
 402c85c:	1105c83a 	sub	r2,r2,r4
 402c860:	1100202c 	andhi	r4,r2,128
 402c864:	203ebb26 	beq	r4,zero,402c354 <__alt_data_end+0xfffec354>
 402c868:	3463c83a 	sub	r17,r6,r17
 402c86c:	4a07c83a 	sub	r3,r9,r8
 402c870:	344d803a 	cmpltu	r6,r6,r17
 402c874:	1991c83a 	sub	r8,r3,r6
 402c878:	3825883a 	mov	r18,r7
 402c87c:	003e5706 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c880:	4984b03a 	or	r2,r9,r6
 402c884:	10002e26 	beq	r2,zero,402c940 <__adddf3+0x7e0>
 402c888:	4004d0fa 	srli	r2,r8,3
 402c88c:	8822d0fa 	srli	r17,r17,3
 402c890:	4010977a 	slli	r8,r8,29
 402c894:	10c0022c 	andhi	r3,r2,8
 402c898:	4462b03a 	or	r17,r8,r17
 402c89c:	18000826 	beq	r3,zero,402c8c0 <__adddf3+0x760>
 402c8a0:	4808d0fa 	srli	r4,r9,3
 402c8a4:	20c0022c 	andhi	r3,r4,8
 402c8a8:	1800051e 	bne	r3,zero,402c8c0 <__adddf3+0x760>
 402c8ac:	300cd0fa 	srli	r6,r6,3
 402c8b0:	4806977a 	slli	r3,r9,29
 402c8b4:	2005883a 	mov	r2,r4
 402c8b8:	3825883a 	mov	r18,r7
 402c8bc:	19a2b03a 	or	r17,r3,r6
 402c8c0:	8810d77a 	srli	r8,r17,29
 402c8c4:	100490fa 	slli	r2,r2,3
 402c8c8:	882290fa 	slli	r17,r17,3
 402c8cc:	0401ffc4 	movi	r16,2047
 402c8d0:	4090b03a 	or	r8,r8,r2
 402c8d4:	003e4106 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c8d8:	0141ffc4 	movi	r5,2047
 402c8dc:	117fc71e 	bne	r2,r5,402c7fc <__alt_data_end+0xfffec7fc>
 402c8e0:	4811883a 	mov	r8,r9
 402c8e4:	3023883a 	mov	r17,r6
 402c8e8:	1021883a 	mov	r16,r2
 402c8ec:	003e3b06 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c8f0:	10002f26 	beq	r2,zero,402c9b0 <__adddf3+0x850>
 402c8f4:	4984b03a 	or	r2,r9,r6
 402c8f8:	10001126 	beq	r2,zero,402c940 <__adddf3+0x7e0>
 402c8fc:	4004d0fa 	srli	r2,r8,3
 402c900:	8822d0fa 	srli	r17,r17,3
 402c904:	4010977a 	slli	r8,r8,29
 402c908:	10c0022c 	andhi	r3,r2,8
 402c90c:	4462b03a 	or	r17,r8,r17
 402c910:	183feb26 	beq	r3,zero,402c8c0 <__alt_data_end+0xfffec8c0>
 402c914:	4808d0fa 	srli	r4,r9,3
 402c918:	20c0022c 	andhi	r3,r4,8
 402c91c:	183fe81e 	bne	r3,zero,402c8c0 <__alt_data_end+0xfffec8c0>
 402c920:	300cd0fa 	srli	r6,r6,3
 402c924:	4806977a 	slli	r3,r9,29
 402c928:	2005883a 	mov	r2,r4
 402c92c:	19a2b03a 	or	r17,r3,r6
 402c930:	003fe306 	br	402c8c0 <__alt_data_end+0xfffec8c0>
 402c934:	0011883a 	mov	r8,zero
 402c938:	0005883a 	mov	r2,zero
 402c93c:	003e3f06 	br	402c23c <__alt_data_end+0xfffec23c>
 402c940:	0401ffc4 	movi	r16,2047
 402c944:	003e2506 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c948:	0013883a 	mov	r9,zero
 402c94c:	003f8406 	br	402c760 <__alt_data_end+0xfffec760>
 402c950:	0005883a 	mov	r2,zero
 402c954:	0007883a 	mov	r3,zero
 402c958:	003e8906 	br	402c380 <__alt_data_end+0xfffec380>
 402c95c:	197ff804 	addi	r5,r3,-32
 402c960:	01000804 	movi	r4,32
 402c964:	414ad83a 	srl	r5,r8,r5
 402c968:	19002426 	beq	r3,r4,402c9fc <__adddf3+0x89c>
 402c96c:	01001004 	movi	r4,64
 402c970:	20c7c83a 	sub	r3,r4,r3
 402c974:	40c6983a 	sll	r3,r8,r3
 402c978:	1c46b03a 	or	r3,r3,r17
 402c97c:	1806c03a 	cmpne	r3,r3,zero
 402c980:	28e2b03a 	or	r17,r5,r3
 402c984:	0007883a 	mov	r3,zero
 402c988:	003f2306 	br	402c618 <__alt_data_end+0xfffec618>
 402c98c:	0007883a 	mov	r3,zero
 402c990:	5811883a 	mov	r8,r11
 402c994:	00bfffc4 	movi	r2,-1
 402c998:	0401ffc4 	movi	r16,2047
 402c99c:	003e7806 	br	402c380 <__alt_data_end+0xfffec380>
 402c9a0:	4462b03a 	or	r17,r8,r17
 402c9a4:	8822c03a 	cmpne	r17,r17,zero
 402c9a8:	0009883a 	mov	r4,zero
 402c9ac:	003fa006 	br	402c830 <__alt_data_end+0xfffec830>
 402c9b0:	4811883a 	mov	r8,r9
 402c9b4:	3023883a 	mov	r17,r6
 402c9b8:	0401ffc4 	movi	r16,2047
 402c9bc:	003e0706 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c9c0:	4811883a 	mov	r8,r9
 402c9c4:	3023883a 	mov	r17,r6
 402c9c8:	003e0406 	br	402c1dc <__alt_data_end+0xfffec1dc>
 402c9cc:	21fff804 	addi	r7,r4,-32
 402c9d0:	01400804 	movi	r5,32
 402c9d4:	41ced83a 	srl	r7,r8,r7
 402c9d8:	21400a26 	beq	r4,r5,402ca04 <__adddf3+0x8a4>
 402c9dc:	01401004 	movi	r5,64
 402c9e0:	2909c83a 	sub	r4,r5,r4
 402c9e4:	4108983a 	sll	r4,r8,r4
 402c9e8:	2448b03a 	or	r4,r4,r17
 402c9ec:	2008c03a 	cmpne	r4,r4,zero
 402c9f0:	3922b03a 	or	r17,r7,r4
 402c9f4:	0009883a 	mov	r4,zero
 402c9f8:	003f8d06 	br	402c830 <__alt_data_end+0xfffec830>
 402c9fc:	0007883a 	mov	r3,zero
 402ca00:	003fdd06 	br	402c978 <__alt_data_end+0xfffec978>
 402ca04:	0009883a 	mov	r4,zero
 402ca08:	003ff706 	br	402c9e8 <__alt_data_end+0xfffec9e8>

0402ca0c <__divdf3>:
 402ca0c:	defff204 	addi	sp,sp,-56
 402ca10:	dd400915 	stw	r21,36(sp)
 402ca14:	282ad53a 	srli	r21,r5,20
 402ca18:	dd000815 	stw	r20,32(sp)
 402ca1c:	2828d7fa 	srli	r20,r5,31
 402ca20:	dc000415 	stw	r16,16(sp)
 402ca24:	04000434 	movhi	r16,16
 402ca28:	df000c15 	stw	fp,48(sp)
 402ca2c:	843fffc4 	addi	r16,r16,-1
 402ca30:	dfc00d15 	stw	ra,52(sp)
 402ca34:	ddc00b15 	stw	r23,44(sp)
 402ca38:	dd800a15 	stw	r22,40(sp)
 402ca3c:	dcc00715 	stw	r19,28(sp)
 402ca40:	dc800615 	stw	r18,24(sp)
 402ca44:	dc400515 	stw	r17,20(sp)
 402ca48:	ad41ffcc 	andi	r21,r21,2047
 402ca4c:	2c20703a 	and	r16,r5,r16
 402ca50:	a7003fcc 	andi	fp,r20,255
 402ca54:	a8006126 	beq	r21,zero,402cbdc <__divdf3+0x1d0>
 402ca58:	0081ffc4 	movi	r2,2047
 402ca5c:	2025883a 	mov	r18,r4
 402ca60:	a8803726 	beq	r21,r2,402cb40 <__divdf3+0x134>
 402ca64:	80800434 	orhi	r2,r16,16
 402ca68:	100490fa 	slli	r2,r2,3
 402ca6c:	2020d77a 	srli	r16,r4,29
 402ca70:	202490fa 	slli	r18,r4,3
 402ca74:	ad7f0044 	addi	r21,r21,-1023
 402ca78:	80a0b03a 	or	r16,r16,r2
 402ca7c:	0027883a 	mov	r19,zero
 402ca80:	0013883a 	mov	r9,zero
 402ca84:	3804d53a 	srli	r2,r7,20
 402ca88:	382cd7fa 	srli	r22,r7,31
 402ca8c:	04400434 	movhi	r17,16
 402ca90:	8c7fffc4 	addi	r17,r17,-1
 402ca94:	1081ffcc 	andi	r2,r2,2047
 402ca98:	3011883a 	mov	r8,r6
 402ca9c:	3c62703a 	and	r17,r7,r17
 402caa0:	b5c03fcc 	andi	r23,r22,255
 402caa4:	10006c26 	beq	r2,zero,402cc58 <__divdf3+0x24c>
 402caa8:	00c1ffc4 	movi	r3,2047
 402caac:	10c06426 	beq	r2,r3,402cc40 <__divdf3+0x234>
 402cab0:	88c00434 	orhi	r3,r17,16
 402cab4:	180690fa 	slli	r3,r3,3
 402cab8:	3022d77a 	srli	r17,r6,29
 402cabc:	301090fa 	slli	r8,r6,3
 402cac0:	10bf0044 	addi	r2,r2,-1023
 402cac4:	88e2b03a 	or	r17,r17,r3
 402cac8:	000f883a 	mov	r7,zero
 402cacc:	a58cf03a 	xor	r6,r20,r22
 402cad0:	3cc8b03a 	or	r4,r7,r19
 402cad4:	a8abc83a 	sub	r21,r21,r2
 402cad8:	008003c4 	movi	r2,15
 402cadc:	3007883a 	mov	r3,r6
 402cae0:	34c03fcc 	andi	r19,r6,255
 402cae4:	11009036 	bltu	r2,r4,402cd28 <__divdf3+0x31c>
 402cae8:	200890ba 	slli	r4,r4,2
 402caec:	008100f4 	movhi	r2,1027
 402caf0:	10b2c004 	addi	r2,r2,-13568
 402caf4:	2089883a 	add	r4,r4,r2
 402caf8:	20800017 	ldw	r2,0(r4)
 402cafc:	1000683a 	jmp	r2
 402cb00:	0402cd28 	cmpgeui	r16,zero,2868
 402cb04:	0402cb78 	rdprs	r16,zero,2861
 402cb08:	0402cd18 	cmpnei	r16,zero,2868
 402cb0c:	0402cb6c 	andhi	r16,zero,2861
 402cb10:	0402cd18 	cmpnei	r16,zero,2868
 402cb14:	0402ccec 	andhi	r16,zero,2867
 402cb18:	0402cd18 	cmpnei	r16,zero,2868
 402cb1c:	0402cb6c 	andhi	r16,zero,2861
 402cb20:	0402cb78 	rdprs	r16,zero,2861
 402cb24:	0402cb78 	rdprs	r16,zero,2861
 402cb28:	0402ccec 	andhi	r16,zero,2867
 402cb2c:	0402cb6c 	andhi	r16,zero,2861
 402cb30:	0402cb5c 	xori	r16,zero,2861
 402cb34:	0402cb5c 	xori	r16,zero,2861
 402cb38:	0402cb5c 	xori	r16,zero,2861
 402cb3c:	0402d00c 	andi	r16,zero,2880
 402cb40:	2404b03a 	or	r2,r4,r16
 402cb44:	1000661e 	bne	r2,zero,402cce0 <__divdf3+0x2d4>
 402cb48:	04c00204 	movi	r19,8
 402cb4c:	0021883a 	mov	r16,zero
 402cb50:	0025883a 	mov	r18,zero
 402cb54:	02400084 	movi	r9,2
 402cb58:	003fca06 	br	402ca84 <__alt_data_end+0xfffeca84>
 402cb5c:	8023883a 	mov	r17,r16
 402cb60:	9011883a 	mov	r8,r18
 402cb64:	e02f883a 	mov	r23,fp
 402cb68:	480f883a 	mov	r7,r9
 402cb6c:	00800084 	movi	r2,2
 402cb70:	3881311e 	bne	r7,r2,402d038 <__divdf3+0x62c>
 402cb74:	b827883a 	mov	r19,r23
 402cb78:	98c0004c 	andi	r3,r19,1
 402cb7c:	0081ffc4 	movi	r2,2047
 402cb80:	000b883a 	mov	r5,zero
 402cb84:	0025883a 	mov	r18,zero
 402cb88:	1004953a 	slli	r2,r2,20
 402cb8c:	18c03fcc 	andi	r3,r3,255
 402cb90:	04400434 	movhi	r17,16
 402cb94:	8c7fffc4 	addi	r17,r17,-1
 402cb98:	180697fa 	slli	r3,r3,31
 402cb9c:	2c4a703a 	and	r5,r5,r17
 402cba0:	288ab03a 	or	r5,r5,r2
 402cba4:	28c6b03a 	or	r3,r5,r3
 402cba8:	9005883a 	mov	r2,r18
 402cbac:	dfc00d17 	ldw	ra,52(sp)
 402cbb0:	df000c17 	ldw	fp,48(sp)
 402cbb4:	ddc00b17 	ldw	r23,44(sp)
 402cbb8:	dd800a17 	ldw	r22,40(sp)
 402cbbc:	dd400917 	ldw	r21,36(sp)
 402cbc0:	dd000817 	ldw	r20,32(sp)
 402cbc4:	dcc00717 	ldw	r19,28(sp)
 402cbc8:	dc800617 	ldw	r18,24(sp)
 402cbcc:	dc400517 	ldw	r17,20(sp)
 402cbd0:	dc000417 	ldw	r16,16(sp)
 402cbd4:	dec00e04 	addi	sp,sp,56
 402cbd8:	f800283a 	ret
 402cbdc:	2404b03a 	or	r2,r4,r16
 402cbe0:	2027883a 	mov	r19,r4
 402cbe4:	10003926 	beq	r2,zero,402cccc <__divdf3+0x2c0>
 402cbe8:	80012e26 	beq	r16,zero,402d0a4 <__divdf3+0x698>
 402cbec:	8009883a 	mov	r4,r16
 402cbf0:	d9800315 	stw	r6,12(sp)
 402cbf4:	d9c00215 	stw	r7,8(sp)
 402cbf8:	4021f180 	call	4021f18 <__clzsi2>
 402cbfc:	d9800317 	ldw	r6,12(sp)
 402cc00:	d9c00217 	ldw	r7,8(sp)
 402cc04:	113ffd44 	addi	r4,r2,-11
 402cc08:	00c00704 	movi	r3,28
 402cc0c:	19012116 	blt	r3,r4,402d094 <__divdf3+0x688>
 402cc10:	00c00744 	movi	r3,29
 402cc14:	147ffe04 	addi	r17,r2,-8
 402cc18:	1907c83a 	sub	r3,r3,r4
 402cc1c:	8460983a 	sll	r16,r16,r17
 402cc20:	98c6d83a 	srl	r3,r19,r3
 402cc24:	9c64983a 	sll	r18,r19,r17
 402cc28:	1c20b03a 	or	r16,r3,r16
 402cc2c:	1080fcc4 	addi	r2,r2,1011
 402cc30:	00abc83a 	sub	r21,zero,r2
 402cc34:	0027883a 	mov	r19,zero
 402cc38:	0013883a 	mov	r9,zero
 402cc3c:	003f9106 	br	402ca84 <__alt_data_end+0xfffeca84>
 402cc40:	3446b03a 	or	r3,r6,r17
 402cc44:	18001f1e 	bne	r3,zero,402ccc4 <__divdf3+0x2b8>
 402cc48:	0023883a 	mov	r17,zero
 402cc4c:	0011883a 	mov	r8,zero
 402cc50:	01c00084 	movi	r7,2
 402cc54:	003f9d06 	br	402cacc <__alt_data_end+0xfffecacc>
 402cc58:	3446b03a 	or	r3,r6,r17
 402cc5c:	18001526 	beq	r3,zero,402ccb4 <__divdf3+0x2a8>
 402cc60:	88011b26 	beq	r17,zero,402d0d0 <__divdf3+0x6c4>
 402cc64:	8809883a 	mov	r4,r17
 402cc68:	d9800315 	stw	r6,12(sp)
 402cc6c:	da400115 	stw	r9,4(sp)
 402cc70:	4021f180 	call	4021f18 <__clzsi2>
 402cc74:	d9800317 	ldw	r6,12(sp)
 402cc78:	da400117 	ldw	r9,4(sp)
 402cc7c:	113ffd44 	addi	r4,r2,-11
 402cc80:	00c00704 	movi	r3,28
 402cc84:	19010e16 	blt	r3,r4,402d0c0 <__divdf3+0x6b4>
 402cc88:	00c00744 	movi	r3,29
 402cc8c:	123ffe04 	addi	r8,r2,-8
 402cc90:	1907c83a 	sub	r3,r3,r4
 402cc94:	8a22983a 	sll	r17,r17,r8
 402cc98:	30c6d83a 	srl	r3,r6,r3
 402cc9c:	3210983a 	sll	r8,r6,r8
 402cca0:	1c62b03a 	or	r17,r3,r17
 402cca4:	1080fcc4 	addi	r2,r2,1011
 402cca8:	0085c83a 	sub	r2,zero,r2
 402ccac:	000f883a 	mov	r7,zero
 402ccb0:	003f8606 	br	402cacc <__alt_data_end+0xfffecacc>
 402ccb4:	0023883a 	mov	r17,zero
 402ccb8:	0011883a 	mov	r8,zero
 402ccbc:	01c00044 	movi	r7,1
 402ccc0:	003f8206 	br	402cacc <__alt_data_end+0xfffecacc>
 402ccc4:	01c000c4 	movi	r7,3
 402ccc8:	003f8006 	br	402cacc <__alt_data_end+0xfffecacc>
 402cccc:	04c00104 	movi	r19,4
 402ccd0:	0021883a 	mov	r16,zero
 402ccd4:	0025883a 	mov	r18,zero
 402ccd8:	02400044 	movi	r9,1
 402ccdc:	003f6906 	br	402ca84 <__alt_data_end+0xfffeca84>
 402cce0:	04c00304 	movi	r19,12
 402cce4:	024000c4 	movi	r9,3
 402cce8:	003f6606 	br	402ca84 <__alt_data_end+0xfffeca84>
 402ccec:	01400434 	movhi	r5,16
 402ccf0:	0007883a 	mov	r3,zero
 402ccf4:	297fffc4 	addi	r5,r5,-1
 402ccf8:	04bfffc4 	movi	r18,-1
 402ccfc:	0081ffc4 	movi	r2,2047
 402cd00:	003fa106 	br	402cb88 <__alt_data_end+0xfffecb88>
 402cd04:	00c00044 	movi	r3,1
 402cd08:	1887c83a 	sub	r3,r3,r2
 402cd0c:	01000e04 	movi	r4,56
 402cd10:	20c1210e 	bge	r4,r3,402d198 <__divdf3+0x78c>
 402cd14:	98c0004c 	andi	r3,r19,1
 402cd18:	0005883a 	mov	r2,zero
 402cd1c:	000b883a 	mov	r5,zero
 402cd20:	0025883a 	mov	r18,zero
 402cd24:	003f9806 	br	402cb88 <__alt_data_end+0xfffecb88>
 402cd28:	8c00fd36 	bltu	r17,r16,402d120 <__divdf3+0x714>
 402cd2c:	8440fb26 	beq	r16,r17,402d11c <__divdf3+0x710>
 402cd30:	8007883a 	mov	r3,r16
 402cd34:	ad7fffc4 	addi	r21,r21,-1
 402cd38:	0021883a 	mov	r16,zero
 402cd3c:	4004d63a 	srli	r2,r8,24
 402cd40:	8822923a 	slli	r17,r17,8
 402cd44:	1809883a 	mov	r4,r3
 402cd48:	402c923a 	slli	r22,r8,8
 402cd4c:	88b8b03a 	or	fp,r17,r2
 402cd50:	e028d43a 	srli	r20,fp,16
 402cd54:	d8c00015 	stw	r3,0(sp)
 402cd58:	e5ffffcc 	andi	r23,fp,65535
 402cd5c:	a00b883a 	mov	r5,r20
 402cd60:	402c0a40 	call	402c0a4 <__udivsi3>
 402cd64:	d8c00017 	ldw	r3,0(sp)
 402cd68:	a00b883a 	mov	r5,r20
 402cd6c:	d8800315 	stw	r2,12(sp)
 402cd70:	1809883a 	mov	r4,r3
 402cd74:	402c1080 	call	402c108 <__umodsi3>
 402cd78:	d9800317 	ldw	r6,12(sp)
 402cd7c:	1006943a 	slli	r3,r2,16
 402cd80:	9004d43a 	srli	r2,r18,16
 402cd84:	b9a3383a 	mul	r17,r23,r6
 402cd88:	10c4b03a 	or	r2,r2,r3
 402cd8c:	1440062e 	bgeu	r2,r17,402cda8 <__divdf3+0x39c>
 402cd90:	1705883a 	add	r2,r2,fp
 402cd94:	30ffffc4 	addi	r3,r6,-1
 402cd98:	1700ee36 	bltu	r2,fp,402d154 <__divdf3+0x748>
 402cd9c:	1440ed2e 	bgeu	r2,r17,402d154 <__divdf3+0x748>
 402cda0:	31bfff84 	addi	r6,r6,-2
 402cda4:	1705883a 	add	r2,r2,fp
 402cda8:	1463c83a 	sub	r17,r2,r17
 402cdac:	a00b883a 	mov	r5,r20
 402cdb0:	8809883a 	mov	r4,r17
 402cdb4:	d9800315 	stw	r6,12(sp)
 402cdb8:	402c0a40 	call	402c0a4 <__udivsi3>
 402cdbc:	a00b883a 	mov	r5,r20
 402cdc0:	8809883a 	mov	r4,r17
 402cdc4:	d8800215 	stw	r2,8(sp)
 402cdc8:	402c1080 	call	402c108 <__umodsi3>
 402cdcc:	d9c00217 	ldw	r7,8(sp)
 402cdd0:	1004943a 	slli	r2,r2,16
 402cdd4:	94bfffcc 	andi	r18,r18,65535
 402cdd8:	b9d1383a 	mul	r8,r23,r7
 402cddc:	90a4b03a 	or	r18,r18,r2
 402cde0:	d9800317 	ldw	r6,12(sp)
 402cde4:	9200062e 	bgeu	r18,r8,402ce00 <__divdf3+0x3f4>
 402cde8:	9725883a 	add	r18,r18,fp
 402cdec:	38bfffc4 	addi	r2,r7,-1
 402cdf0:	9700d636 	bltu	r18,fp,402d14c <__divdf3+0x740>
 402cdf4:	9200d52e 	bgeu	r18,r8,402d14c <__divdf3+0x740>
 402cdf8:	39ffff84 	addi	r7,r7,-2
 402cdfc:	9725883a 	add	r18,r18,fp
 402ce00:	3004943a 	slli	r2,r6,16
 402ce04:	b012d43a 	srli	r9,r22,16
 402ce08:	b1bfffcc 	andi	r6,r22,65535
 402ce0c:	11e2b03a 	or	r17,r2,r7
 402ce10:	8806d43a 	srli	r3,r17,16
 402ce14:	893fffcc 	andi	r4,r17,65535
 402ce18:	218b383a 	mul	r5,r4,r6
 402ce1c:	30c5383a 	mul	r2,r6,r3
 402ce20:	2249383a 	mul	r4,r4,r9
 402ce24:	280ed43a 	srli	r7,r5,16
 402ce28:	9225c83a 	sub	r18,r18,r8
 402ce2c:	2089883a 	add	r4,r4,r2
 402ce30:	3909883a 	add	r4,r7,r4
 402ce34:	1a47383a 	mul	r3,r3,r9
 402ce38:	2080022e 	bgeu	r4,r2,402ce44 <__divdf3+0x438>
 402ce3c:	00800074 	movhi	r2,1
 402ce40:	1887883a 	add	r3,r3,r2
 402ce44:	2004d43a 	srli	r2,r4,16
 402ce48:	2008943a 	slli	r4,r4,16
 402ce4c:	297fffcc 	andi	r5,r5,65535
 402ce50:	10c7883a 	add	r3,r2,r3
 402ce54:	2149883a 	add	r4,r4,r5
 402ce58:	90c0a536 	bltu	r18,r3,402d0f0 <__divdf3+0x6e4>
 402ce5c:	90c0bf26 	beq	r18,r3,402d15c <__divdf3+0x750>
 402ce60:	90c7c83a 	sub	r3,r18,r3
 402ce64:	810fc83a 	sub	r7,r16,r4
 402ce68:	81e5803a 	cmpltu	r18,r16,r7
 402ce6c:	1ca5c83a 	sub	r18,r3,r18
 402ce70:	e480c126 	beq	fp,r18,402d178 <__divdf3+0x76c>
 402ce74:	a00b883a 	mov	r5,r20
 402ce78:	9009883a 	mov	r4,r18
 402ce7c:	d9800315 	stw	r6,12(sp)
 402ce80:	d9c00215 	stw	r7,8(sp)
 402ce84:	da400115 	stw	r9,4(sp)
 402ce88:	402c0a40 	call	402c0a4 <__udivsi3>
 402ce8c:	a00b883a 	mov	r5,r20
 402ce90:	9009883a 	mov	r4,r18
 402ce94:	d8800015 	stw	r2,0(sp)
 402ce98:	402c1080 	call	402c108 <__umodsi3>
 402ce9c:	d9c00217 	ldw	r7,8(sp)
 402cea0:	da000017 	ldw	r8,0(sp)
 402cea4:	1006943a 	slli	r3,r2,16
 402cea8:	3804d43a 	srli	r2,r7,16
 402ceac:	ba21383a 	mul	r16,r23,r8
 402ceb0:	d9800317 	ldw	r6,12(sp)
 402ceb4:	10c4b03a 	or	r2,r2,r3
 402ceb8:	da400117 	ldw	r9,4(sp)
 402cebc:	1400062e 	bgeu	r2,r16,402ced8 <__divdf3+0x4cc>
 402cec0:	1705883a 	add	r2,r2,fp
 402cec4:	40ffffc4 	addi	r3,r8,-1
 402cec8:	1700ad36 	bltu	r2,fp,402d180 <__divdf3+0x774>
 402cecc:	1400ac2e 	bgeu	r2,r16,402d180 <__divdf3+0x774>
 402ced0:	423fff84 	addi	r8,r8,-2
 402ced4:	1705883a 	add	r2,r2,fp
 402ced8:	1421c83a 	sub	r16,r2,r16
 402cedc:	a00b883a 	mov	r5,r20
 402cee0:	8009883a 	mov	r4,r16
 402cee4:	d9800315 	stw	r6,12(sp)
 402cee8:	d9c00215 	stw	r7,8(sp)
 402ceec:	da000015 	stw	r8,0(sp)
 402cef0:	da400115 	stw	r9,4(sp)
 402cef4:	402c0a40 	call	402c0a4 <__udivsi3>
 402cef8:	8009883a 	mov	r4,r16
 402cefc:	a00b883a 	mov	r5,r20
 402cf00:	1025883a 	mov	r18,r2
 402cf04:	402c1080 	call	402c108 <__umodsi3>
 402cf08:	d9c00217 	ldw	r7,8(sp)
 402cf0c:	1004943a 	slli	r2,r2,16
 402cf10:	bcaf383a 	mul	r23,r23,r18
 402cf14:	393fffcc 	andi	r4,r7,65535
 402cf18:	2088b03a 	or	r4,r4,r2
 402cf1c:	d9800317 	ldw	r6,12(sp)
 402cf20:	da000017 	ldw	r8,0(sp)
 402cf24:	da400117 	ldw	r9,4(sp)
 402cf28:	25c0062e 	bgeu	r4,r23,402cf44 <__divdf3+0x538>
 402cf2c:	2709883a 	add	r4,r4,fp
 402cf30:	90bfffc4 	addi	r2,r18,-1
 402cf34:	27009436 	bltu	r4,fp,402d188 <__divdf3+0x77c>
 402cf38:	25c0932e 	bgeu	r4,r23,402d188 <__divdf3+0x77c>
 402cf3c:	94bfff84 	addi	r18,r18,-2
 402cf40:	2709883a 	add	r4,r4,fp
 402cf44:	4004943a 	slli	r2,r8,16
 402cf48:	25efc83a 	sub	r23,r4,r23
 402cf4c:	1490b03a 	or	r8,r2,r18
 402cf50:	4008d43a 	srli	r4,r8,16
 402cf54:	40ffffcc 	andi	r3,r8,65535
 402cf58:	30c5383a 	mul	r2,r6,r3
 402cf5c:	1a47383a 	mul	r3,r3,r9
 402cf60:	310d383a 	mul	r6,r6,r4
 402cf64:	100ad43a 	srli	r5,r2,16
 402cf68:	4913383a 	mul	r9,r9,r4
 402cf6c:	1987883a 	add	r3,r3,r6
 402cf70:	28c7883a 	add	r3,r5,r3
 402cf74:	1980022e 	bgeu	r3,r6,402cf80 <__divdf3+0x574>
 402cf78:	01000074 	movhi	r4,1
 402cf7c:	4913883a 	add	r9,r9,r4
 402cf80:	1808d43a 	srli	r4,r3,16
 402cf84:	1806943a 	slli	r3,r3,16
 402cf88:	10bfffcc 	andi	r2,r2,65535
 402cf8c:	2253883a 	add	r9,r4,r9
 402cf90:	1887883a 	add	r3,r3,r2
 402cf94:	ba403836 	bltu	r23,r9,402d078 <__divdf3+0x66c>
 402cf98:	ba403626 	beq	r23,r9,402d074 <__divdf3+0x668>
 402cf9c:	42000054 	ori	r8,r8,1
 402cfa0:	a880ffc4 	addi	r2,r21,1023
 402cfa4:	00bf570e 	bge	zero,r2,402cd04 <__alt_data_end+0xfffecd04>
 402cfa8:	40c001cc 	andi	r3,r8,7
 402cfac:	18000726 	beq	r3,zero,402cfcc <__divdf3+0x5c0>
 402cfb0:	40c003cc 	andi	r3,r8,15
 402cfb4:	01000104 	movi	r4,4
 402cfb8:	19000426 	beq	r3,r4,402cfcc <__divdf3+0x5c0>
 402cfbc:	4107883a 	add	r3,r8,r4
 402cfc0:	1a11803a 	cmpltu	r8,r3,r8
 402cfc4:	8a23883a 	add	r17,r17,r8
 402cfc8:	1811883a 	mov	r8,r3
 402cfcc:	88c0402c 	andhi	r3,r17,256
 402cfd0:	18000426 	beq	r3,zero,402cfe4 <__divdf3+0x5d8>
 402cfd4:	00ffc034 	movhi	r3,65280
 402cfd8:	18ffffc4 	addi	r3,r3,-1
 402cfdc:	a8810004 	addi	r2,r21,1024
 402cfe0:	88e2703a 	and	r17,r17,r3
 402cfe4:	00c1ff84 	movi	r3,2046
 402cfe8:	18bee316 	blt	r3,r2,402cb78 <__alt_data_end+0xfffecb78>
 402cfec:	8824977a 	slli	r18,r17,29
 402cff0:	4010d0fa 	srli	r8,r8,3
 402cff4:	8822927a 	slli	r17,r17,9
 402cff8:	1081ffcc 	andi	r2,r2,2047
 402cffc:	9224b03a 	or	r18,r18,r8
 402d000:	880ad33a 	srli	r5,r17,12
 402d004:	98c0004c 	andi	r3,r19,1
 402d008:	003edf06 	br	402cb88 <__alt_data_end+0xfffecb88>
 402d00c:	8080022c 	andhi	r2,r16,8
 402d010:	10001226 	beq	r2,zero,402d05c <__divdf3+0x650>
 402d014:	8880022c 	andhi	r2,r17,8
 402d018:	1000101e 	bne	r2,zero,402d05c <__divdf3+0x650>
 402d01c:	00800434 	movhi	r2,16
 402d020:	89400234 	orhi	r5,r17,8
 402d024:	10bfffc4 	addi	r2,r2,-1
 402d028:	b007883a 	mov	r3,r22
 402d02c:	288a703a 	and	r5,r5,r2
 402d030:	4025883a 	mov	r18,r8
 402d034:	003f3106 	br	402ccfc <__alt_data_end+0xfffeccfc>
 402d038:	008000c4 	movi	r2,3
 402d03c:	3880a626 	beq	r7,r2,402d2d8 <__divdf3+0x8cc>
 402d040:	00800044 	movi	r2,1
 402d044:	3880521e 	bne	r7,r2,402d190 <__divdf3+0x784>
 402d048:	b807883a 	mov	r3,r23
 402d04c:	0005883a 	mov	r2,zero
 402d050:	000b883a 	mov	r5,zero
 402d054:	0025883a 	mov	r18,zero
 402d058:	003ecb06 	br	402cb88 <__alt_data_end+0xfffecb88>
 402d05c:	00800434 	movhi	r2,16
 402d060:	81400234 	orhi	r5,r16,8
 402d064:	10bfffc4 	addi	r2,r2,-1
 402d068:	a007883a 	mov	r3,r20
 402d06c:	288a703a 	and	r5,r5,r2
 402d070:	003f2206 	br	402ccfc <__alt_data_end+0xfffeccfc>
 402d074:	183fca26 	beq	r3,zero,402cfa0 <__alt_data_end+0xfffecfa0>
 402d078:	e5ef883a 	add	r23,fp,r23
 402d07c:	40bfffc4 	addi	r2,r8,-1
 402d080:	bf00392e 	bgeu	r23,fp,402d168 <__divdf3+0x75c>
 402d084:	1011883a 	mov	r8,r2
 402d088:	ba7fc41e 	bne	r23,r9,402cf9c <__alt_data_end+0xfffecf9c>
 402d08c:	b0ffc31e 	bne	r22,r3,402cf9c <__alt_data_end+0xfffecf9c>
 402d090:	003fc306 	br	402cfa0 <__alt_data_end+0xfffecfa0>
 402d094:	143ff604 	addi	r16,r2,-40
 402d098:	9c20983a 	sll	r16,r19,r16
 402d09c:	0025883a 	mov	r18,zero
 402d0a0:	003ee206 	br	402cc2c <__alt_data_end+0xfffecc2c>
 402d0a4:	d9800315 	stw	r6,12(sp)
 402d0a8:	d9c00215 	stw	r7,8(sp)
 402d0ac:	4021f180 	call	4021f18 <__clzsi2>
 402d0b0:	10800804 	addi	r2,r2,32
 402d0b4:	d9c00217 	ldw	r7,8(sp)
 402d0b8:	d9800317 	ldw	r6,12(sp)
 402d0bc:	003ed106 	br	402cc04 <__alt_data_end+0xfffecc04>
 402d0c0:	147ff604 	addi	r17,r2,-40
 402d0c4:	3462983a 	sll	r17,r6,r17
 402d0c8:	0011883a 	mov	r8,zero
 402d0cc:	003ef506 	br	402cca4 <__alt_data_end+0xfffecca4>
 402d0d0:	3009883a 	mov	r4,r6
 402d0d4:	d9800315 	stw	r6,12(sp)
 402d0d8:	da400115 	stw	r9,4(sp)
 402d0dc:	4021f180 	call	4021f18 <__clzsi2>
 402d0e0:	10800804 	addi	r2,r2,32
 402d0e4:	da400117 	ldw	r9,4(sp)
 402d0e8:	d9800317 	ldw	r6,12(sp)
 402d0ec:	003ee306 	br	402cc7c <__alt_data_end+0xfffecc7c>
 402d0f0:	85a1883a 	add	r16,r16,r22
 402d0f4:	8585803a 	cmpltu	r2,r16,r22
 402d0f8:	1705883a 	add	r2,r2,fp
 402d0fc:	14a5883a 	add	r18,r2,r18
 402d100:	88bfffc4 	addi	r2,r17,-1
 402d104:	e4800c2e 	bgeu	fp,r18,402d138 <__divdf3+0x72c>
 402d108:	90c03e36 	bltu	r18,r3,402d204 <__divdf3+0x7f8>
 402d10c:	1c806926 	beq	r3,r18,402d2b4 <__divdf3+0x8a8>
 402d110:	90c7c83a 	sub	r3,r18,r3
 402d114:	1023883a 	mov	r17,r2
 402d118:	003f5206 	br	402ce64 <__alt_data_end+0xfffece64>
 402d11c:	923f0436 	bltu	r18,r8,402cd30 <__alt_data_end+0xfffecd30>
 402d120:	800897fa 	slli	r4,r16,31
 402d124:	9004d07a 	srli	r2,r18,1
 402d128:	8006d07a 	srli	r3,r16,1
 402d12c:	902097fa 	slli	r16,r18,31
 402d130:	20a4b03a 	or	r18,r4,r2
 402d134:	003f0106 	br	402cd3c <__alt_data_end+0xfffecd3c>
 402d138:	e4bff51e 	bne	fp,r18,402d110 <__alt_data_end+0xfffed110>
 402d13c:	85bff22e 	bgeu	r16,r22,402d108 <__alt_data_end+0xfffed108>
 402d140:	e0c7c83a 	sub	r3,fp,r3
 402d144:	1023883a 	mov	r17,r2
 402d148:	003f4606 	br	402ce64 <__alt_data_end+0xfffece64>
 402d14c:	100f883a 	mov	r7,r2
 402d150:	003f2b06 	br	402ce00 <__alt_data_end+0xfffece00>
 402d154:	180d883a 	mov	r6,r3
 402d158:	003f1306 	br	402cda8 <__alt_data_end+0xfffecda8>
 402d15c:	813fe436 	bltu	r16,r4,402d0f0 <__alt_data_end+0xfffed0f0>
 402d160:	0007883a 	mov	r3,zero
 402d164:	003f3f06 	br	402ce64 <__alt_data_end+0xfffece64>
 402d168:	ba402c36 	bltu	r23,r9,402d21c <__divdf3+0x810>
 402d16c:	4dc05426 	beq	r9,r23,402d2c0 <__divdf3+0x8b4>
 402d170:	1011883a 	mov	r8,r2
 402d174:	003f8906 	br	402cf9c <__alt_data_end+0xfffecf9c>
 402d178:	023fffc4 	movi	r8,-1
 402d17c:	003f8806 	br	402cfa0 <__alt_data_end+0xfffecfa0>
 402d180:	1811883a 	mov	r8,r3
 402d184:	003f5406 	br	402ced8 <__alt_data_end+0xfffeced8>
 402d188:	1025883a 	mov	r18,r2
 402d18c:	003f6d06 	br	402cf44 <__alt_data_end+0xfffecf44>
 402d190:	b827883a 	mov	r19,r23
 402d194:	003f8206 	br	402cfa0 <__alt_data_end+0xfffecfa0>
 402d198:	010007c4 	movi	r4,31
 402d19c:	20c02616 	blt	r4,r3,402d238 <__divdf3+0x82c>
 402d1a0:	00800804 	movi	r2,32
 402d1a4:	10c5c83a 	sub	r2,r2,r3
 402d1a8:	888a983a 	sll	r5,r17,r2
 402d1ac:	40c8d83a 	srl	r4,r8,r3
 402d1b0:	4084983a 	sll	r2,r8,r2
 402d1b4:	88e2d83a 	srl	r17,r17,r3
 402d1b8:	2906b03a 	or	r3,r5,r4
 402d1bc:	1004c03a 	cmpne	r2,r2,zero
 402d1c0:	1886b03a 	or	r3,r3,r2
 402d1c4:	188001cc 	andi	r2,r3,7
 402d1c8:	10000726 	beq	r2,zero,402d1e8 <__divdf3+0x7dc>
 402d1cc:	188003cc 	andi	r2,r3,15
 402d1d0:	01000104 	movi	r4,4
 402d1d4:	11000426 	beq	r2,r4,402d1e8 <__divdf3+0x7dc>
 402d1d8:	1805883a 	mov	r2,r3
 402d1dc:	10c00104 	addi	r3,r2,4
 402d1e0:	1885803a 	cmpltu	r2,r3,r2
 402d1e4:	88a3883a 	add	r17,r17,r2
 402d1e8:	8880202c 	andhi	r2,r17,128
 402d1ec:	10002726 	beq	r2,zero,402d28c <__divdf3+0x880>
 402d1f0:	98c0004c 	andi	r3,r19,1
 402d1f4:	00800044 	movi	r2,1
 402d1f8:	000b883a 	mov	r5,zero
 402d1fc:	0025883a 	mov	r18,zero
 402d200:	003e6106 	br	402cb88 <__alt_data_end+0xfffecb88>
 402d204:	85a1883a 	add	r16,r16,r22
 402d208:	8585803a 	cmpltu	r2,r16,r22
 402d20c:	1705883a 	add	r2,r2,fp
 402d210:	14a5883a 	add	r18,r2,r18
 402d214:	8c7fff84 	addi	r17,r17,-2
 402d218:	003f1106 	br	402ce60 <__alt_data_end+0xfffece60>
 402d21c:	b589883a 	add	r4,r22,r22
 402d220:	25ad803a 	cmpltu	r22,r4,r22
 402d224:	b739883a 	add	fp,r22,fp
 402d228:	40bfff84 	addi	r2,r8,-2
 402d22c:	bf2f883a 	add	r23,r23,fp
 402d230:	202d883a 	mov	r22,r4
 402d234:	003f9306 	br	402d084 <__alt_data_end+0xfffed084>
 402d238:	013ff844 	movi	r4,-31
 402d23c:	2085c83a 	sub	r2,r4,r2
 402d240:	8888d83a 	srl	r4,r17,r2
 402d244:	00800804 	movi	r2,32
 402d248:	18802126 	beq	r3,r2,402d2d0 <__divdf3+0x8c4>
 402d24c:	00801004 	movi	r2,64
 402d250:	10c5c83a 	sub	r2,r2,r3
 402d254:	8884983a 	sll	r2,r17,r2
 402d258:	1204b03a 	or	r2,r2,r8
 402d25c:	1004c03a 	cmpne	r2,r2,zero
 402d260:	2084b03a 	or	r2,r4,r2
 402d264:	144001cc 	andi	r17,r2,7
 402d268:	88000d1e 	bne	r17,zero,402d2a0 <__divdf3+0x894>
 402d26c:	000b883a 	mov	r5,zero
 402d270:	1024d0fa 	srli	r18,r2,3
 402d274:	98c0004c 	andi	r3,r19,1
 402d278:	0005883a 	mov	r2,zero
 402d27c:	9464b03a 	or	r18,r18,r17
 402d280:	003e4106 	br	402cb88 <__alt_data_end+0xfffecb88>
 402d284:	1007883a 	mov	r3,r2
 402d288:	0023883a 	mov	r17,zero
 402d28c:	880a927a 	slli	r5,r17,9
 402d290:	1805883a 	mov	r2,r3
 402d294:	8822977a 	slli	r17,r17,29
 402d298:	280ad33a 	srli	r5,r5,12
 402d29c:	003ff406 	br	402d270 <__alt_data_end+0xfffed270>
 402d2a0:	10c003cc 	andi	r3,r2,15
 402d2a4:	01000104 	movi	r4,4
 402d2a8:	193ff626 	beq	r3,r4,402d284 <__alt_data_end+0xfffed284>
 402d2ac:	0023883a 	mov	r17,zero
 402d2b0:	003fca06 	br	402d1dc <__alt_data_end+0xfffed1dc>
 402d2b4:	813fd336 	bltu	r16,r4,402d204 <__alt_data_end+0xfffed204>
 402d2b8:	1023883a 	mov	r17,r2
 402d2bc:	003fa806 	br	402d160 <__alt_data_end+0xfffed160>
 402d2c0:	b0ffd636 	bltu	r22,r3,402d21c <__alt_data_end+0xfffed21c>
 402d2c4:	1011883a 	mov	r8,r2
 402d2c8:	b0ff341e 	bne	r22,r3,402cf9c <__alt_data_end+0xfffecf9c>
 402d2cc:	003f3406 	br	402cfa0 <__alt_data_end+0xfffecfa0>
 402d2d0:	0005883a 	mov	r2,zero
 402d2d4:	003fe006 	br	402d258 <__alt_data_end+0xfffed258>
 402d2d8:	00800434 	movhi	r2,16
 402d2dc:	89400234 	orhi	r5,r17,8
 402d2e0:	10bfffc4 	addi	r2,r2,-1
 402d2e4:	b807883a 	mov	r3,r23
 402d2e8:	288a703a 	and	r5,r5,r2
 402d2ec:	4025883a 	mov	r18,r8
 402d2f0:	003e8206 	br	402ccfc <__alt_data_end+0xfffeccfc>

0402d2f4 <__eqdf2>:
 402d2f4:	2804d53a 	srli	r2,r5,20
 402d2f8:	3806d53a 	srli	r3,r7,20
 402d2fc:	02000434 	movhi	r8,16
 402d300:	423fffc4 	addi	r8,r8,-1
 402d304:	1081ffcc 	andi	r2,r2,2047
 402d308:	0281ffc4 	movi	r10,2047
 402d30c:	2a12703a 	and	r9,r5,r8
 402d310:	18c1ffcc 	andi	r3,r3,2047
 402d314:	3a10703a 	and	r8,r7,r8
 402d318:	280ad7fa 	srli	r5,r5,31
 402d31c:	380ed7fa 	srli	r7,r7,31
 402d320:	12801026 	beq	r2,r10,402d364 <__eqdf2+0x70>
 402d324:	0281ffc4 	movi	r10,2047
 402d328:	1a800a26 	beq	r3,r10,402d354 <__eqdf2+0x60>
 402d32c:	10c00226 	beq	r2,r3,402d338 <__eqdf2+0x44>
 402d330:	00800044 	movi	r2,1
 402d334:	f800283a 	ret
 402d338:	4a3ffd1e 	bne	r9,r8,402d330 <__alt_data_end+0xfffed330>
 402d33c:	21bffc1e 	bne	r4,r6,402d330 <__alt_data_end+0xfffed330>
 402d340:	29c00c26 	beq	r5,r7,402d374 <__eqdf2+0x80>
 402d344:	103ffa1e 	bne	r2,zero,402d330 <__alt_data_end+0xfffed330>
 402d348:	2244b03a 	or	r2,r4,r9
 402d34c:	1004c03a 	cmpne	r2,r2,zero
 402d350:	f800283a 	ret
 402d354:	3214b03a 	or	r10,r6,r8
 402d358:	503ff426 	beq	r10,zero,402d32c <__alt_data_end+0xfffed32c>
 402d35c:	00800044 	movi	r2,1
 402d360:	f800283a 	ret
 402d364:	2254b03a 	or	r10,r4,r9
 402d368:	503fee26 	beq	r10,zero,402d324 <__alt_data_end+0xfffed324>
 402d36c:	00800044 	movi	r2,1
 402d370:	f800283a 	ret
 402d374:	0005883a 	mov	r2,zero
 402d378:	f800283a 	ret

0402d37c <__gedf2>:
 402d37c:	2804d53a 	srli	r2,r5,20
 402d380:	3806d53a 	srli	r3,r7,20
 402d384:	02000434 	movhi	r8,16
 402d388:	423fffc4 	addi	r8,r8,-1
 402d38c:	1081ffcc 	andi	r2,r2,2047
 402d390:	0241ffc4 	movi	r9,2047
 402d394:	2a14703a 	and	r10,r5,r8
 402d398:	18c1ffcc 	andi	r3,r3,2047
 402d39c:	3a10703a 	and	r8,r7,r8
 402d3a0:	280ad7fa 	srli	r5,r5,31
 402d3a4:	380ed7fa 	srli	r7,r7,31
 402d3a8:	12401d26 	beq	r2,r9,402d420 <__gedf2+0xa4>
 402d3ac:	0241ffc4 	movi	r9,2047
 402d3b0:	1a401226 	beq	r3,r9,402d3fc <__gedf2+0x80>
 402d3b4:	1000081e 	bne	r2,zero,402d3d8 <__gedf2+0x5c>
 402d3b8:	2296b03a 	or	r11,r4,r10
 402d3bc:	5813003a 	cmpeq	r9,r11,zero
 402d3c0:	1800091e 	bne	r3,zero,402d3e8 <__gedf2+0x6c>
 402d3c4:	3218b03a 	or	r12,r6,r8
 402d3c8:	6000071e 	bne	r12,zero,402d3e8 <__gedf2+0x6c>
 402d3cc:	0005883a 	mov	r2,zero
 402d3d0:	5800101e 	bne	r11,zero,402d414 <__gedf2+0x98>
 402d3d4:	f800283a 	ret
 402d3d8:	18000c1e 	bne	r3,zero,402d40c <__gedf2+0x90>
 402d3dc:	3212b03a 	or	r9,r6,r8
 402d3e0:	48000c26 	beq	r9,zero,402d414 <__gedf2+0x98>
 402d3e4:	0013883a 	mov	r9,zero
 402d3e8:	39c03fcc 	andi	r7,r7,255
 402d3ec:	48000826 	beq	r9,zero,402d410 <__gedf2+0x94>
 402d3f0:	38000926 	beq	r7,zero,402d418 <__gedf2+0x9c>
 402d3f4:	00800044 	movi	r2,1
 402d3f8:	f800283a 	ret
 402d3fc:	3212b03a 	or	r9,r6,r8
 402d400:	483fec26 	beq	r9,zero,402d3b4 <__alt_data_end+0xfffed3b4>
 402d404:	00bfff84 	movi	r2,-2
 402d408:	f800283a 	ret
 402d40c:	39c03fcc 	andi	r7,r7,255
 402d410:	29c00626 	beq	r5,r7,402d42c <__gedf2+0xb0>
 402d414:	283ff726 	beq	r5,zero,402d3f4 <__alt_data_end+0xfffed3f4>
 402d418:	00bfffc4 	movi	r2,-1
 402d41c:	f800283a 	ret
 402d420:	2292b03a 	or	r9,r4,r10
 402d424:	483fe126 	beq	r9,zero,402d3ac <__alt_data_end+0xfffed3ac>
 402d428:	003ff606 	br	402d404 <__alt_data_end+0xfffed404>
 402d42c:	18bff916 	blt	r3,r2,402d414 <__alt_data_end+0xfffed414>
 402d430:	10c00316 	blt	r2,r3,402d440 <__gedf2+0xc4>
 402d434:	42bff736 	bltu	r8,r10,402d414 <__alt_data_end+0xfffed414>
 402d438:	52000326 	beq	r10,r8,402d448 <__gedf2+0xcc>
 402d43c:	5200042e 	bgeu	r10,r8,402d450 <__gedf2+0xd4>
 402d440:	283fec1e 	bne	r5,zero,402d3f4 <__alt_data_end+0xfffed3f4>
 402d444:	003ff406 	br	402d418 <__alt_data_end+0xfffed418>
 402d448:	313ff236 	bltu	r6,r4,402d414 <__alt_data_end+0xfffed414>
 402d44c:	21bffc36 	bltu	r4,r6,402d440 <__alt_data_end+0xfffed440>
 402d450:	0005883a 	mov	r2,zero
 402d454:	f800283a 	ret

0402d458 <__ledf2>:
 402d458:	2804d53a 	srli	r2,r5,20
 402d45c:	3810d53a 	srli	r8,r7,20
 402d460:	00c00434 	movhi	r3,16
 402d464:	18ffffc4 	addi	r3,r3,-1
 402d468:	1081ffcc 	andi	r2,r2,2047
 402d46c:	0241ffc4 	movi	r9,2047
 402d470:	28d4703a 	and	r10,r5,r3
 402d474:	4201ffcc 	andi	r8,r8,2047
 402d478:	38c6703a 	and	r3,r7,r3
 402d47c:	280ad7fa 	srli	r5,r5,31
 402d480:	380ed7fa 	srli	r7,r7,31
 402d484:	12401f26 	beq	r2,r9,402d504 <__ledf2+0xac>
 402d488:	0241ffc4 	movi	r9,2047
 402d48c:	42401426 	beq	r8,r9,402d4e0 <__ledf2+0x88>
 402d490:	1000091e 	bne	r2,zero,402d4b8 <__ledf2+0x60>
 402d494:	2296b03a 	or	r11,r4,r10
 402d498:	5813003a 	cmpeq	r9,r11,zero
 402d49c:	29403fcc 	andi	r5,r5,255
 402d4a0:	40000a1e 	bne	r8,zero,402d4cc <__ledf2+0x74>
 402d4a4:	30d8b03a 	or	r12,r6,r3
 402d4a8:	6000081e 	bne	r12,zero,402d4cc <__ledf2+0x74>
 402d4ac:	0005883a 	mov	r2,zero
 402d4b0:	5800111e 	bne	r11,zero,402d4f8 <__ledf2+0xa0>
 402d4b4:	f800283a 	ret
 402d4b8:	29403fcc 	andi	r5,r5,255
 402d4bc:	40000c1e 	bne	r8,zero,402d4f0 <__ledf2+0x98>
 402d4c0:	30d2b03a 	or	r9,r6,r3
 402d4c4:	48000c26 	beq	r9,zero,402d4f8 <__ledf2+0xa0>
 402d4c8:	0013883a 	mov	r9,zero
 402d4cc:	39c03fcc 	andi	r7,r7,255
 402d4d0:	48000826 	beq	r9,zero,402d4f4 <__ledf2+0x9c>
 402d4d4:	38001126 	beq	r7,zero,402d51c <__ledf2+0xc4>
 402d4d8:	00800044 	movi	r2,1
 402d4dc:	f800283a 	ret
 402d4e0:	30d2b03a 	or	r9,r6,r3
 402d4e4:	483fea26 	beq	r9,zero,402d490 <__alt_data_end+0xfffed490>
 402d4e8:	00800084 	movi	r2,2
 402d4ec:	f800283a 	ret
 402d4f0:	39c03fcc 	andi	r7,r7,255
 402d4f4:	39400726 	beq	r7,r5,402d514 <__ledf2+0xbc>
 402d4f8:	2800081e 	bne	r5,zero,402d51c <__ledf2+0xc4>
 402d4fc:	00800044 	movi	r2,1
 402d500:	f800283a 	ret
 402d504:	2292b03a 	or	r9,r4,r10
 402d508:	483fdf26 	beq	r9,zero,402d488 <__alt_data_end+0xfffed488>
 402d50c:	00800084 	movi	r2,2
 402d510:	f800283a 	ret
 402d514:	4080030e 	bge	r8,r2,402d524 <__ledf2+0xcc>
 402d518:	383fef26 	beq	r7,zero,402d4d8 <__alt_data_end+0xfffed4d8>
 402d51c:	00bfffc4 	movi	r2,-1
 402d520:	f800283a 	ret
 402d524:	123feb16 	blt	r2,r8,402d4d4 <__alt_data_end+0xfffed4d4>
 402d528:	1abff336 	bltu	r3,r10,402d4f8 <__alt_data_end+0xfffed4f8>
 402d52c:	50c00326 	beq	r10,r3,402d53c <__ledf2+0xe4>
 402d530:	50c0042e 	bgeu	r10,r3,402d544 <__ledf2+0xec>
 402d534:	283fe81e 	bne	r5,zero,402d4d8 <__alt_data_end+0xfffed4d8>
 402d538:	003ff806 	br	402d51c <__alt_data_end+0xfffed51c>
 402d53c:	313fee36 	bltu	r6,r4,402d4f8 <__alt_data_end+0xfffed4f8>
 402d540:	21bffc36 	bltu	r4,r6,402d534 <__alt_data_end+0xfffed534>
 402d544:	0005883a 	mov	r2,zero
 402d548:	f800283a 	ret

0402d54c <__muldf3>:
 402d54c:	defff304 	addi	sp,sp,-52
 402d550:	2804d53a 	srli	r2,r5,20
 402d554:	dd800915 	stw	r22,36(sp)
 402d558:	282cd7fa 	srli	r22,r5,31
 402d55c:	dc000315 	stw	r16,12(sp)
 402d560:	04000434 	movhi	r16,16
 402d564:	dd400815 	stw	r21,32(sp)
 402d568:	dc800515 	stw	r18,20(sp)
 402d56c:	843fffc4 	addi	r16,r16,-1
 402d570:	dfc00c15 	stw	ra,48(sp)
 402d574:	df000b15 	stw	fp,44(sp)
 402d578:	ddc00a15 	stw	r23,40(sp)
 402d57c:	dd000715 	stw	r20,28(sp)
 402d580:	dcc00615 	stw	r19,24(sp)
 402d584:	dc400415 	stw	r17,16(sp)
 402d588:	1481ffcc 	andi	r18,r2,2047
 402d58c:	2c20703a 	and	r16,r5,r16
 402d590:	b02b883a 	mov	r21,r22
 402d594:	b2403fcc 	andi	r9,r22,255
 402d598:	90006026 	beq	r18,zero,402d71c <__muldf3+0x1d0>
 402d59c:	0081ffc4 	movi	r2,2047
 402d5a0:	2029883a 	mov	r20,r4
 402d5a4:	90803626 	beq	r18,r2,402d680 <__muldf3+0x134>
 402d5a8:	80800434 	orhi	r2,r16,16
 402d5ac:	100490fa 	slli	r2,r2,3
 402d5b0:	2020d77a 	srli	r16,r4,29
 402d5b4:	202890fa 	slli	r20,r4,3
 402d5b8:	94bf0044 	addi	r18,r18,-1023
 402d5bc:	80a0b03a 	or	r16,r16,r2
 402d5c0:	0027883a 	mov	r19,zero
 402d5c4:	0039883a 	mov	fp,zero
 402d5c8:	3804d53a 	srli	r2,r7,20
 402d5cc:	382ed7fa 	srli	r23,r7,31
 402d5d0:	04400434 	movhi	r17,16
 402d5d4:	8c7fffc4 	addi	r17,r17,-1
 402d5d8:	1081ffcc 	andi	r2,r2,2047
 402d5dc:	3011883a 	mov	r8,r6
 402d5e0:	3c62703a 	and	r17,r7,r17
 402d5e4:	ba803fcc 	andi	r10,r23,255
 402d5e8:	10006d26 	beq	r2,zero,402d7a0 <__muldf3+0x254>
 402d5ec:	00c1ffc4 	movi	r3,2047
 402d5f0:	10c06526 	beq	r2,r3,402d788 <__muldf3+0x23c>
 402d5f4:	88c00434 	orhi	r3,r17,16
 402d5f8:	180690fa 	slli	r3,r3,3
 402d5fc:	3022d77a 	srli	r17,r6,29
 402d600:	301090fa 	slli	r8,r6,3
 402d604:	10bf0044 	addi	r2,r2,-1023
 402d608:	88e2b03a 	or	r17,r17,r3
 402d60c:	000b883a 	mov	r5,zero
 402d610:	9085883a 	add	r2,r18,r2
 402d614:	2cc8b03a 	or	r4,r5,r19
 402d618:	00c003c4 	movi	r3,15
 402d61c:	bdacf03a 	xor	r22,r23,r22
 402d620:	12c00044 	addi	r11,r2,1
 402d624:	19009936 	bltu	r3,r4,402d88c <__muldf3+0x340>
 402d628:	200890ba 	slli	r4,r4,2
 402d62c:	00c100f4 	movhi	r3,1027
 402d630:	18f59004 	addi	r3,r3,-10688
 402d634:	20c9883a 	add	r4,r4,r3
 402d638:	20c00017 	ldw	r3,0(r4)
 402d63c:	1800683a 	jmp	r3
 402d640:	0402d88c 	andi	r16,zero,2914
 402d644:	0402d6a0 	cmpeqi	r16,zero,2906
 402d648:	0402d6a0 	cmpeqi	r16,zero,2906
 402d64c:	0402d69c 	xori	r16,zero,2906
 402d650:	0402d868 	cmpgeui	r16,zero,2913
 402d654:	0402d868 	cmpgeui	r16,zero,2913
 402d658:	0402d850 	cmplti	r16,zero,2913
 402d65c:	0402d69c 	xori	r16,zero,2906
 402d660:	0402d868 	cmpgeui	r16,zero,2913
 402d664:	0402d850 	cmplti	r16,zero,2913
 402d668:	0402d868 	cmpgeui	r16,zero,2913
 402d66c:	0402d69c 	xori	r16,zero,2906
 402d670:	0402d878 	rdprs	r16,zero,2913
 402d674:	0402d878 	rdprs	r16,zero,2913
 402d678:	0402d878 	rdprs	r16,zero,2913
 402d67c:	0402da94 	movui	r16,2922
 402d680:	2404b03a 	or	r2,r4,r16
 402d684:	10006f1e 	bne	r2,zero,402d844 <__muldf3+0x2f8>
 402d688:	04c00204 	movi	r19,8
 402d68c:	0021883a 	mov	r16,zero
 402d690:	0029883a 	mov	r20,zero
 402d694:	07000084 	movi	fp,2
 402d698:	003fcb06 	br	402d5c8 <__alt_data_end+0xfffed5c8>
 402d69c:	502d883a 	mov	r22,r10
 402d6a0:	00800084 	movi	r2,2
 402d6a4:	28805726 	beq	r5,r2,402d804 <__muldf3+0x2b8>
 402d6a8:	008000c4 	movi	r2,3
 402d6ac:	28816626 	beq	r5,r2,402dc48 <__muldf3+0x6fc>
 402d6b0:	00800044 	movi	r2,1
 402d6b4:	2881411e 	bne	r5,r2,402dbbc <__muldf3+0x670>
 402d6b8:	b02b883a 	mov	r21,r22
 402d6bc:	0005883a 	mov	r2,zero
 402d6c0:	000b883a 	mov	r5,zero
 402d6c4:	0029883a 	mov	r20,zero
 402d6c8:	1004953a 	slli	r2,r2,20
 402d6cc:	a8c03fcc 	andi	r3,r21,255
 402d6d0:	04400434 	movhi	r17,16
 402d6d4:	8c7fffc4 	addi	r17,r17,-1
 402d6d8:	180697fa 	slli	r3,r3,31
 402d6dc:	2c4a703a 	and	r5,r5,r17
 402d6e0:	288ab03a 	or	r5,r5,r2
 402d6e4:	28c6b03a 	or	r3,r5,r3
 402d6e8:	a005883a 	mov	r2,r20
 402d6ec:	dfc00c17 	ldw	ra,48(sp)
 402d6f0:	df000b17 	ldw	fp,44(sp)
 402d6f4:	ddc00a17 	ldw	r23,40(sp)
 402d6f8:	dd800917 	ldw	r22,36(sp)
 402d6fc:	dd400817 	ldw	r21,32(sp)
 402d700:	dd000717 	ldw	r20,28(sp)
 402d704:	dcc00617 	ldw	r19,24(sp)
 402d708:	dc800517 	ldw	r18,20(sp)
 402d70c:	dc400417 	ldw	r17,16(sp)
 402d710:	dc000317 	ldw	r16,12(sp)
 402d714:	dec00d04 	addi	sp,sp,52
 402d718:	f800283a 	ret
 402d71c:	2404b03a 	or	r2,r4,r16
 402d720:	2027883a 	mov	r19,r4
 402d724:	10004226 	beq	r2,zero,402d830 <__muldf3+0x2e4>
 402d728:	8000fc26 	beq	r16,zero,402db1c <__muldf3+0x5d0>
 402d72c:	8009883a 	mov	r4,r16
 402d730:	d9800215 	stw	r6,8(sp)
 402d734:	d9c00015 	stw	r7,0(sp)
 402d738:	da400115 	stw	r9,4(sp)
 402d73c:	4021f180 	call	4021f18 <__clzsi2>
 402d740:	d9800217 	ldw	r6,8(sp)
 402d744:	d9c00017 	ldw	r7,0(sp)
 402d748:	da400117 	ldw	r9,4(sp)
 402d74c:	113ffd44 	addi	r4,r2,-11
 402d750:	00c00704 	movi	r3,28
 402d754:	1900ed16 	blt	r3,r4,402db0c <__muldf3+0x5c0>
 402d758:	00c00744 	movi	r3,29
 402d75c:	147ffe04 	addi	r17,r2,-8
 402d760:	1907c83a 	sub	r3,r3,r4
 402d764:	8460983a 	sll	r16,r16,r17
 402d768:	98c6d83a 	srl	r3,r19,r3
 402d76c:	9c68983a 	sll	r20,r19,r17
 402d770:	1c20b03a 	or	r16,r3,r16
 402d774:	1080fcc4 	addi	r2,r2,1011
 402d778:	00a5c83a 	sub	r18,zero,r2
 402d77c:	0027883a 	mov	r19,zero
 402d780:	0039883a 	mov	fp,zero
 402d784:	003f9006 	br	402d5c8 <__alt_data_end+0xfffed5c8>
 402d788:	3446b03a 	or	r3,r6,r17
 402d78c:	1800261e 	bne	r3,zero,402d828 <__muldf3+0x2dc>
 402d790:	0023883a 	mov	r17,zero
 402d794:	0011883a 	mov	r8,zero
 402d798:	01400084 	movi	r5,2
 402d79c:	003f9c06 	br	402d610 <__alt_data_end+0xfffed610>
 402d7a0:	3446b03a 	or	r3,r6,r17
 402d7a4:	18001c26 	beq	r3,zero,402d818 <__muldf3+0x2cc>
 402d7a8:	8800ce26 	beq	r17,zero,402dae4 <__muldf3+0x598>
 402d7ac:	8809883a 	mov	r4,r17
 402d7b0:	d9800215 	stw	r6,8(sp)
 402d7b4:	da400115 	stw	r9,4(sp)
 402d7b8:	da800015 	stw	r10,0(sp)
 402d7bc:	4021f180 	call	4021f18 <__clzsi2>
 402d7c0:	d9800217 	ldw	r6,8(sp)
 402d7c4:	da400117 	ldw	r9,4(sp)
 402d7c8:	da800017 	ldw	r10,0(sp)
 402d7cc:	113ffd44 	addi	r4,r2,-11
 402d7d0:	00c00704 	movi	r3,28
 402d7d4:	1900bf16 	blt	r3,r4,402dad4 <__muldf3+0x588>
 402d7d8:	00c00744 	movi	r3,29
 402d7dc:	123ffe04 	addi	r8,r2,-8
 402d7e0:	1907c83a 	sub	r3,r3,r4
 402d7e4:	8a22983a 	sll	r17,r17,r8
 402d7e8:	30c6d83a 	srl	r3,r6,r3
 402d7ec:	3210983a 	sll	r8,r6,r8
 402d7f0:	1c62b03a 	or	r17,r3,r17
 402d7f4:	1080fcc4 	addi	r2,r2,1011
 402d7f8:	0085c83a 	sub	r2,zero,r2
 402d7fc:	000b883a 	mov	r5,zero
 402d800:	003f8306 	br	402d610 <__alt_data_end+0xfffed610>
 402d804:	b02b883a 	mov	r21,r22
 402d808:	0081ffc4 	movi	r2,2047
 402d80c:	000b883a 	mov	r5,zero
 402d810:	0029883a 	mov	r20,zero
 402d814:	003fac06 	br	402d6c8 <__alt_data_end+0xfffed6c8>
 402d818:	0023883a 	mov	r17,zero
 402d81c:	0011883a 	mov	r8,zero
 402d820:	01400044 	movi	r5,1
 402d824:	003f7a06 	br	402d610 <__alt_data_end+0xfffed610>
 402d828:	014000c4 	movi	r5,3
 402d82c:	003f7806 	br	402d610 <__alt_data_end+0xfffed610>
 402d830:	04c00104 	movi	r19,4
 402d834:	0021883a 	mov	r16,zero
 402d838:	0029883a 	mov	r20,zero
 402d83c:	07000044 	movi	fp,1
 402d840:	003f6106 	br	402d5c8 <__alt_data_end+0xfffed5c8>
 402d844:	04c00304 	movi	r19,12
 402d848:	070000c4 	movi	fp,3
 402d84c:	003f5e06 	br	402d5c8 <__alt_data_end+0xfffed5c8>
 402d850:	01400434 	movhi	r5,16
 402d854:	002b883a 	mov	r21,zero
 402d858:	297fffc4 	addi	r5,r5,-1
 402d85c:	053fffc4 	movi	r20,-1
 402d860:	0081ffc4 	movi	r2,2047
 402d864:	003f9806 	br	402d6c8 <__alt_data_end+0xfffed6c8>
 402d868:	8023883a 	mov	r17,r16
 402d86c:	a011883a 	mov	r8,r20
 402d870:	e00b883a 	mov	r5,fp
 402d874:	003f8a06 	br	402d6a0 <__alt_data_end+0xfffed6a0>
 402d878:	8023883a 	mov	r17,r16
 402d87c:	a011883a 	mov	r8,r20
 402d880:	482d883a 	mov	r22,r9
 402d884:	e00b883a 	mov	r5,fp
 402d888:	003f8506 	br	402d6a0 <__alt_data_end+0xfffed6a0>
 402d88c:	a00ad43a 	srli	r5,r20,16
 402d890:	401ad43a 	srli	r13,r8,16
 402d894:	a53fffcc 	andi	r20,r20,65535
 402d898:	423fffcc 	andi	r8,r8,65535
 402d89c:	4519383a 	mul	r12,r8,r20
 402d8a0:	4147383a 	mul	r3,r8,r5
 402d8a4:	6d09383a 	mul	r4,r13,r20
 402d8a8:	600cd43a 	srli	r6,r12,16
 402d8ac:	2b5d383a 	mul	r14,r5,r13
 402d8b0:	20c9883a 	add	r4,r4,r3
 402d8b4:	310d883a 	add	r6,r6,r4
 402d8b8:	30c0022e 	bgeu	r6,r3,402d8c4 <__muldf3+0x378>
 402d8bc:	00c00074 	movhi	r3,1
 402d8c0:	70dd883a 	add	r14,r14,r3
 402d8c4:	8826d43a 	srli	r19,r17,16
 402d8c8:	8bffffcc 	andi	r15,r17,65535
 402d8cc:	7d23383a 	mul	r17,r15,r20
 402d8d0:	7949383a 	mul	r4,r15,r5
 402d8d4:	9d29383a 	mul	r20,r19,r20
 402d8d8:	8814d43a 	srli	r10,r17,16
 402d8dc:	3012943a 	slli	r9,r6,16
 402d8e0:	a129883a 	add	r20,r20,r4
 402d8e4:	633fffcc 	andi	r12,r12,65535
 402d8e8:	5515883a 	add	r10,r10,r20
 402d8ec:	3006d43a 	srli	r3,r6,16
 402d8f0:	4b13883a 	add	r9,r9,r12
 402d8f4:	2ccb383a 	mul	r5,r5,r19
 402d8f8:	5100022e 	bgeu	r10,r4,402d904 <__muldf3+0x3b8>
 402d8fc:	01000074 	movhi	r4,1
 402d900:	290b883a 	add	r5,r5,r4
 402d904:	802ad43a 	srli	r21,r16,16
 402d908:	843fffcc 	andi	r16,r16,65535
 402d90c:	440d383a 	mul	r6,r8,r16
 402d910:	4565383a 	mul	r18,r8,r21
 402d914:	8349383a 	mul	r4,r16,r13
 402d918:	500e943a 	slli	r7,r10,16
 402d91c:	3010d43a 	srli	r8,r6,16
 402d920:	5028d43a 	srli	r20,r10,16
 402d924:	2489883a 	add	r4,r4,r18
 402d928:	8abfffcc 	andi	r10,r17,65535
 402d92c:	3a95883a 	add	r10,r7,r10
 402d930:	4119883a 	add	r12,r8,r4
 402d934:	a169883a 	add	r20,r20,r5
 402d938:	1a87883a 	add	r3,r3,r10
 402d93c:	6d5b383a 	mul	r13,r13,r21
 402d940:	6480022e 	bgeu	r12,r18,402d94c <__muldf3+0x400>
 402d944:	01000074 	movhi	r4,1
 402d948:	691b883a 	add	r13,r13,r4
 402d94c:	7c25383a 	mul	r18,r15,r16
 402d950:	7d4b383a 	mul	r5,r15,r21
 402d954:	84cf383a 	mul	r7,r16,r19
 402d958:	901ed43a 	srli	r15,r18,16
 402d95c:	6008d43a 	srli	r4,r12,16
 402d960:	6010943a 	slli	r8,r12,16
 402d964:	394f883a 	add	r7,r7,r5
 402d968:	333fffcc 	andi	r12,r6,65535
 402d96c:	79df883a 	add	r15,r15,r7
 402d970:	235b883a 	add	r13,r4,r13
 402d974:	9d63383a 	mul	r17,r19,r21
 402d978:	4309883a 	add	r4,r8,r12
 402d97c:	7940022e 	bgeu	r15,r5,402d988 <__muldf3+0x43c>
 402d980:	01400074 	movhi	r5,1
 402d984:	8963883a 	add	r17,r17,r5
 402d988:	780a943a 	slli	r5,r15,16
 402d98c:	91bfffcc 	andi	r6,r18,65535
 402d990:	70c7883a 	add	r3,r14,r3
 402d994:	298d883a 	add	r6,r5,r6
 402d998:	1a8f803a 	cmpltu	r7,r3,r10
 402d99c:	350b883a 	add	r5,r6,r20
 402d9a0:	20c7883a 	add	r3,r4,r3
 402d9a4:	3955883a 	add	r10,r7,r5
 402d9a8:	1909803a 	cmpltu	r4,r3,r4
 402d9ac:	6a91883a 	add	r8,r13,r10
 402d9b0:	780cd43a 	srli	r6,r15,16
 402d9b4:	2219883a 	add	r12,r4,r8
 402d9b8:	2d0b803a 	cmpltu	r5,r5,r20
 402d9bc:	51cf803a 	cmpltu	r7,r10,r7
 402d9c0:	29ceb03a 	or	r7,r5,r7
 402d9c4:	4351803a 	cmpltu	r8,r8,r13
 402d9c8:	610b803a 	cmpltu	r5,r12,r4
 402d9cc:	4148b03a 	or	r4,r8,r5
 402d9d0:	398f883a 	add	r7,r7,r6
 402d9d4:	3909883a 	add	r4,r7,r4
 402d9d8:	1810927a 	slli	r8,r3,9
 402d9dc:	2449883a 	add	r4,r4,r17
 402d9e0:	2008927a 	slli	r4,r4,9
 402d9e4:	6022d5fa 	srli	r17,r12,23
 402d9e8:	1806d5fa 	srli	r3,r3,23
 402d9ec:	4252b03a 	or	r9,r8,r9
 402d9f0:	600a927a 	slli	r5,r12,9
 402d9f4:	4810c03a 	cmpne	r8,r9,zero
 402d9f8:	2462b03a 	or	r17,r4,r17
 402d9fc:	40c6b03a 	or	r3,r8,r3
 402da00:	8900402c 	andhi	r4,r17,256
 402da04:	1950b03a 	or	r8,r3,r5
 402da08:	20000726 	beq	r4,zero,402da28 <__muldf3+0x4dc>
 402da0c:	4006d07a 	srli	r3,r8,1
 402da10:	880497fa 	slli	r2,r17,31
 402da14:	4200004c 	andi	r8,r8,1
 402da18:	8822d07a 	srli	r17,r17,1
 402da1c:	1a10b03a 	or	r8,r3,r8
 402da20:	1210b03a 	or	r8,r2,r8
 402da24:	5805883a 	mov	r2,r11
 402da28:	1140ffc4 	addi	r5,r2,1023
 402da2c:	0140440e 	bge	zero,r5,402db40 <__muldf3+0x5f4>
 402da30:	40c001cc 	andi	r3,r8,7
 402da34:	18000726 	beq	r3,zero,402da54 <__muldf3+0x508>
 402da38:	40c003cc 	andi	r3,r8,15
 402da3c:	01000104 	movi	r4,4
 402da40:	19000426 	beq	r3,r4,402da54 <__muldf3+0x508>
 402da44:	4107883a 	add	r3,r8,r4
 402da48:	1a11803a 	cmpltu	r8,r3,r8
 402da4c:	8a23883a 	add	r17,r17,r8
 402da50:	1811883a 	mov	r8,r3
 402da54:	88c0402c 	andhi	r3,r17,256
 402da58:	18000426 	beq	r3,zero,402da6c <__muldf3+0x520>
 402da5c:	11410004 	addi	r5,r2,1024
 402da60:	00bfc034 	movhi	r2,65280
 402da64:	10bfffc4 	addi	r2,r2,-1
 402da68:	88a2703a 	and	r17,r17,r2
 402da6c:	0081ff84 	movi	r2,2046
 402da70:	117f6416 	blt	r2,r5,402d804 <__alt_data_end+0xfffed804>
 402da74:	8828977a 	slli	r20,r17,29
 402da78:	4010d0fa 	srli	r8,r8,3
 402da7c:	8822927a 	slli	r17,r17,9
 402da80:	2881ffcc 	andi	r2,r5,2047
 402da84:	a228b03a 	or	r20,r20,r8
 402da88:	880ad33a 	srli	r5,r17,12
 402da8c:	b02b883a 	mov	r21,r22
 402da90:	003f0d06 	br	402d6c8 <__alt_data_end+0xfffed6c8>
 402da94:	8080022c 	andhi	r2,r16,8
 402da98:	10000926 	beq	r2,zero,402dac0 <__muldf3+0x574>
 402da9c:	8880022c 	andhi	r2,r17,8
 402daa0:	1000071e 	bne	r2,zero,402dac0 <__muldf3+0x574>
 402daa4:	00800434 	movhi	r2,16
 402daa8:	89400234 	orhi	r5,r17,8
 402daac:	10bfffc4 	addi	r2,r2,-1
 402dab0:	b82b883a 	mov	r21,r23
 402dab4:	288a703a 	and	r5,r5,r2
 402dab8:	4029883a 	mov	r20,r8
 402dabc:	003f6806 	br	402d860 <__alt_data_end+0xfffed860>
 402dac0:	00800434 	movhi	r2,16
 402dac4:	81400234 	orhi	r5,r16,8
 402dac8:	10bfffc4 	addi	r2,r2,-1
 402dacc:	288a703a 	and	r5,r5,r2
 402dad0:	003f6306 	br	402d860 <__alt_data_end+0xfffed860>
 402dad4:	147ff604 	addi	r17,r2,-40
 402dad8:	3462983a 	sll	r17,r6,r17
 402dadc:	0011883a 	mov	r8,zero
 402dae0:	003f4406 	br	402d7f4 <__alt_data_end+0xfffed7f4>
 402dae4:	3009883a 	mov	r4,r6
 402dae8:	d9800215 	stw	r6,8(sp)
 402daec:	da400115 	stw	r9,4(sp)
 402daf0:	da800015 	stw	r10,0(sp)
 402daf4:	4021f180 	call	4021f18 <__clzsi2>
 402daf8:	10800804 	addi	r2,r2,32
 402dafc:	da800017 	ldw	r10,0(sp)
 402db00:	da400117 	ldw	r9,4(sp)
 402db04:	d9800217 	ldw	r6,8(sp)
 402db08:	003f3006 	br	402d7cc <__alt_data_end+0xfffed7cc>
 402db0c:	143ff604 	addi	r16,r2,-40
 402db10:	9c20983a 	sll	r16,r19,r16
 402db14:	0029883a 	mov	r20,zero
 402db18:	003f1606 	br	402d774 <__alt_data_end+0xfffed774>
 402db1c:	d9800215 	stw	r6,8(sp)
 402db20:	d9c00015 	stw	r7,0(sp)
 402db24:	da400115 	stw	r9,4(sp)
 402db28:	4021f180 	call	4021f18 <__clzsi2>
 402db2c:	10800804 	addi	r2,r2,32
 402db30:	da400117 	ldw	r9,4(sp)
 402db34:	d9c00017 	ldw	r7,0(sp)
 402db38:	d9800217 	ldw	r6,8(sp)
 402db3c:	003f0306 	br	402d74c <__alt_data_end+0xfffed74c>
 402db40:	00c00044 	movi	r3,1
 402db44:	1947c83a 	sub	r3,r3,r5
 402db48:	00800e04 	movi	r2,56
 402db4c:	10feda16 	blt	r2,r3,402d6b8 <__alt_data_end+0xfffed6b8>
 402db50:	008007c4 	movi	r2,31
 402db54:	10c01b16 	blt	r2,r3,402dbc4 <__muldf3+0x678>
 402db58:	00800804 	movi	r2,32
 402db5c:	10c5c83a 	sub	r2,r2,r3
 402db60:	888a983a 	sll	r5,r17,r2
 402db64:	40c8d83a 	srl	r4,r8,r3
 402db68:	4084983a 	sll	r2,r8,r2
 402db6c:	88e2d83a 	srl	r17,r17,r3
 402db70:	2906b03a 	or	r3,r5,r4
 402db74:	1004c03a 	cmpne	r2,r2,zero
 402db78:	1886b03a 	or	r3,r3,r2
 402db7c:	188001cc 	andi	r2,r3,7
 402db80:	10000726 	beq	r2,zero,402dba0 <__muldf3+0x654>
 402db84:	188003cc 	andi	r2,r3,15
 402db88:	01000104 	movi	r4,4
 402db8c:	11000426 	beq	r2,r4,402dba0 <__muldf3+0x654>
 402db90:	1805883a 	mov	r2,r3
 402db94:	10c00104 	addi	r3,r2,4
 402db98:	1885803a 	cmpltu	r2,r3,r2
 402db9c:	88a3883a 	add	r17,r17,r2
 402dba0:	8880202c 	andhi	r2,r17,128
 402dba4:	10001c26 	beq	r2,zero,402dc18 <__muldf3+0x6cc>
 402dba8:	b02b883a 	mov	r21,r22
 402dbac:	00800044 	movi	r2,1
 402dbb0:	000b883a 	mov	r5,zero
 402dbb4:	0029883a 	mov	r20,zero
 402dbb8:	003ec306 	br	402d6c8 <__alt_data_end+0xfffed6c8>
 402dbbc:	5805883a 	mov	r2,r11
 402dbc0:	003f9906 	br	402da28 <__alt_data_end+0xfffeda28>
 402dbc4:	00bff844 	movi	r2,-31
 402dbc8:	1145c83a 	sub	r2,r2,r5
 402dbcc:	8888d83a 	srl	r4,r17,r2
 402dbd0:	00800804 	movi	r2,32
 402dbd4:	18801a26 	beq	r3,r2,402dc40 <__muldf3+0x6f4>
 402dbd8:	00801004 	movi	r2,64
 402dbdc:	10c5c83a 	sub	r2,r2,r3
 402dbe0:	8884983a 	sll	r2,r17,r2
 402dbe4:	1204b03a 	or	r2,r2,r8
 402dbe8:	1004c03a 	cmpne	r2,r2,zero
 402dbec:	2084b03a 	or	r2,r4,r2
 402dbf0:	144001cc 	andi	r17,r2,7
 402dbf4:	88000d1e 	bne	r17,zero,402dc2c <__muldf3+0x6e0>
 402dbf8:	000b883a 	mov	r5,zero
 402dbfc:	1028d0fa 	srli	r20,r2,3
 402dc00:	b02b883a 	mov	r21,r22
 402dc04:	0005883a 	mov	r2,zero
 402dc08:	a468b03a 	or	r20,r20,r17
 402dc0c:	003eae06 	br	402d6c8 <__alt_data_end+0xfffed6c8>
 402dc10:	1007883a 	mov	r3,r2
 402dc14:	0023883a 	mov	r17,zero
 402dc18:	880a927a 	slli	r5,r17,9
 402dc1c:	1805883a 	mov	r2,r3
 402dc20:	8822977a 	slli	r17,r17,29
 402dc24:	280ad33a 	srli	r5,r5,12
 402dc28:	003ff406 	br	402dbfc <__alt_data_end+0xfffedbfc>
 402dc2c:	10c003cc 	andi	r3,r2,15
 402dc30:	01000104 	movi	r4,4
 402dc34:	193ff626 	beq	r3,r4,402dc10 <__alt_data_end+0xfffedc10>
 402dc38:	0023883a 	mov	r17,zero
 402dc3c:	003fd506 	br	402db94 <__alt_data_end+0xfffedb94>
 402dc40:	0005883a 	mov	r2,zero
 402dc44:	003fe706 	br	402dbe4 <__alt_data_end+0xfffedbe4>
 402dc48:	00800434 	movhi	r2,16
 402dc4c:	89400234 	orhi	r5,r17,8
 402dc50:	10bfffc4 	addi	r2,r2,-1
 402dc54:	b02b883a 	mov	r21,r22
 402dc58:	288a703a 	and	r5,r5,r2
 402dc5c:	4029883a 	mov	r20,r8
 402dc60:	003eff06 	br	402d860 <__alt_data_end+0xfffed860>

0402dc64 <__subdf3>:
 402dc64:	02000434 	movhi	r8,16
 402dc68:	423fffc4 	addi	r8,r8,-1
 402dc6c:	defffb04 	addi	sp,sp,-20
 402dc70:	2a14703a 	and	r10,r5,r8
 402dc74:	3812d53a 	srli	r9,r7,20
 402dc78:	3a10703a 	and	r8,r7,r8
 402dc7c:	2006d77a 	srli	r3,r4,29
 402dc80:	3004d77a 	srli	r2,r6,29
 402dc84:	dc000015 	stw	r16,0(sp)
 402dc88:	501490fa 	slli	r10,r10,3
 402dc8c:	2820d53a 	srli	r16,r5,20
 402dc90:	401090fa 	slli	r8,r8,3
 402dc94:	dc800215 	stw	r18,8(sp)
 402dc98:	dc400115 	stw	r17,4(sp)
 402dc9c:	dfc00415 	stw	ra,16(sp)
 402dca0:	202290fa 	slli	r17,r4,3
 402dca4:	dcc00315 	stw	r19,12(sp)
 402dca8:	4a41ffcc 	andi	r9,r9,2047
 402dcac:	0101ffc4 	movi	r4,2047
 402dcb0:	2824d7fa 	srli	r18,r5,31
 402dcb4:	8401ffcc 	andi	r16,r16,2047
 402dcb8:	50c6b03a 	or	r3,r10,r3
 402dcbc:	380ed7fa 	srli	r7,r7,31
 402dcc0:	408ab03a 	or	r5,r8,r2
 402dcc4:	300c90fa 	slli	r6,r6,3
 402dcc8:	49009626 	beq	r9,r4,402df24 <__subdf3+0x2c0>
 402dccc:	39c0005c 	xori	r7,r7,1
 402dcd0:	8245c83a 	sub	r2,r16,r9
 402dcd4:	3c807426 	beq	r7,r18,402dea8 <__subdf3+0x244>
 402dcd8:	0080af0e 	bge	zero,r2,402df98 <__subdf3+0x334>
 402dcdc:	48002a1e 	bne	r9,zero,402dd88 <__subdf3+0x124>
 402dce0:	2988b03a 	or	r4,r5,r6
 402dce4:	20009a1e 	bne	r4,zero,402df50 <__subdf3+0x2ec>
 402dce8:	888001cc 	andi	r2,r17,7
 402dcec:	10000726 	beq	r2,zero,402dd0c <__subdf3+0xa8>
 402dcf0:	888003cc 	andi	r2,r17,15
 402dcf4:	01000104 	movi	r4,4
 402dcf8:	11000426 	beq	r2,r4,402dd0c <__subdf3+0xa8>
 402dcfc:	890b883a 	add	r5,r17,r4
 402dd00:	2c63803a 	cmpltu	r17,r5,r17
 402dd04:	1c47883a 	add	r3,r3,r17
 402dd08:	2823883a 	mov	r17,r5
 402dd0c:	1880202c 	andhi	r2,r3,128
 402dd10:	10005926 	beq	r2,zero,402de78 <__subdf3+0x214>
 402dd14:	84000044 	addi	r16,r16,1
 402dd18:	0081ffc4 	movi	r2,2047
 402dd1c:	8080be26 	beq	r16,r2,402e018 <__subdf3+0x3b4>
 402dd20:	017fe034 	movhi	r5,65408
 402dd24:	297fffc4 	addi	r5,r5,-1
 402dd28:	1946703a 	and	r3,r3,r5
 402dd2c:	1804977a 	slli	r2,r3,29
 402dd30:	1806927a 	slli	r3,r3,9
 402dd34:	8822d0fa 	srli	r17,r17,3
 402dd38:	8401ffcc 	andi	r16,r16,2047
 402dd3c:	180ad33a 	srli	r5,r3,12
 402dd40:	9100004c 	andi	r4,r18,1
 402dd44:	1444b03a 	or	r2,r2,r17
 402dd48:	80c1ffcc 	andi	r3,r16,2047
 402dd4c:	1820953a 	slli	r16,r3,20
 402dd50:	20c03fcc 	andi	r3,r4,255
 402dd54:	180897fa 	slli	r4,r3,31
 402dd58:	00c00434 	movhi	r3,16
 402dd5c:	18ffffc4 	addi	r3,r3,-1
 402dd60:	28c6703a 	and	r3,r5,r3
 402dd64:	1c06b03a 	or	r3,r3,r16
 402dd68:	1906b03a 	or	r3,r3,r4
 402dd6c:	dfc00417 	ldw	ra,16(sp)
 402dd70:	dcc00317 	ldw	r19,12(sp)
 402dd74:	dc800217 	ldw	r18,8(sp)
 402dd78:	dc400117 	ldw	r17,4(sp)
 402dd7c:	dc000017 	ldw	r16,0(sp)
 402dd80:	dec00504 	addi	sp,sp,20
 402dd84:	f800283a 	ret
 402dd88:	0101ffc4 	movi	r4,2047
 402dd8c:	813fd626 	beq	r16,r4,402dce8 <__alt_data_end+0xfffedce8>
 402dd90:	29402034 	orhi	r5,r5,128
 402dd94:	01000e04 	movi	r4,56
 402dd98:	2080a316 	blt	r4,r2,402e028 <__subdf3+0x3c4>
 402dd9c:	010007c4 	movi	r4,31
 402dda0:	2080c616 	blt	r4,r2,402e0bc <__subdf3+0x458>
 402dda4:	01000804 	movi	r4,32
 402dda8:	2089c83a 	sub	r4,r4,r2
 402ddac:	2910983a 	sll	r8,r5,r4
 402ddb0:	308ed83a 	srl	r7,r6,r2
 402ddb4:	3108983a 	sll	r4,r6,r4
 402ddb8:	2884d83a 	srl	r2,r5,r2
 402ddbc:	41ccb03a 	or	r6,r8,r7
 402ddc0:	2008c03a 	cmpne	r4,r4,zero
 402ddc4:	310cb03a 	or	r6,r6,r4
 402ddc8:	898dc83a 	sub	r6,r17,r6
 402ddcc:	89a3803a 	cmpltu	r17,r17,r6
 402ddd0:	1887c83a 	sub	r3,r3,r2
 402ddd4:	1c47c83a 	sub	r3,r3,r17
 402ddd8:	3023883a 	mov	r17,r6
 402dddc:	1880202c 	andhi	r2,r3,128
 402dde0:	10002326 	beq	r2,zero,402de70 <__subdf3+0x20c>
 402dde4:	04c02034 	movhi	r19,128
 402dde8:	9cffffc4 	addi	r19,r19,-1
 402ddec:	1ce6703a 	and	r19,r3,r19
 402ddf0:	98007a26 	beq	r19,zero,402dfdc <__subdf3+0x378>
 402ddf4:	9809883a 	mov	r4,r19
 402ddf8:	4021f180 	call	4021f18 <__clzsi2>
 402ddfc:	113ffe04 	addi	r4,r2,-8
 402de00:	00c007c4 	movi	r3,31
 402de04:	19007b16 	blt	r3,r4,402dff4 <__subdf3+0x390>
 402de08:	00800804 	movi	r2,32
 402de0c:	1105c83a 	sub	r2,r2,r4
 402de10:	8884d83a 	srl	r2,r17,r2
 402de14:	9906983a 	sll	r3,r19,r4
 402de18:	8922983a 	sll	r17,r17,r4
 402de1c:	10c4b03a 	or	r2,r2,r3
 402de20:	24007816 	blt	r4,r16,402e004 <__subdf3+0x3a0>
 402de24:	2421c83a 	sub	r16,r4,r16
 402de28:	80c00044 	addi	r3,r16,1
 402de2c:	010007c4 	movi	r4,31
 402de30:	20c09516 	blt	r4,r3,402e088 <__subdf3+0x424>
 402de34:	01400804 	movi	r5,32
 402de38:	28cbc83a 	sub	r5,r5,r3
 402de3c:	88c8d83a 	srl	r4,r17,r3
 402de40:	8962983a 	sll	r17,r17,r5
 402de44:	114a983a 	sll	r5,r2,r5
 402de48:	10c6d83a 	srl	r3,r2,r3
 402de4c:	8804c03a 	cmpne	r2,r17,zero
 402de50:	290ab03a 	or	r5,r5,r4
 402de54:	28a2b03a 	or	r17,r5,r2
 402de58:	0021883a 	mov	r16,zero
 402de5c:	003fa206 	br	402dce8 <__alt_data_end+0xfffedce8>
 402de60:	2090b03a 	or	r8,r4,r2
 402de64:	40018e26 	beq	r8,zero,402e4a0 <__subdf3+0x83c>
 402de68:	1007883a 	mov	r3,r2
 402de6c:	2023883a 	mov	r17,r4
 402de70:	888001cc 	andi	r2,r17,7
 402de74:	103f9e1e 	bne	r2,zero,402dcf0 <__alt_data_end+0xfffedcf0>
 402de78:	1804977a 	slli	r2,r3,29
 402de7c:	8822d0fa 	srli	r17,r17,3
 402de80:	1810d0fa 	srli	r8,r3,3
 402de84:	9100004c 	andi	r4,r18,1
 402de88:	1444b03a 	or	r2,r2,r17
 402de8c:	00c1ffc4 	movi	r3,2047
 402de90:	80c02826 	beq	r16,r3,402df34 <__subdf3+0x2d0>
 402de94:	01400434 	movhi	r5,16
 402de98:	297fffc4 	addi	r5,r5,-1
 402de9c:	80e0703a 	and	r16,r16,r3
 402dea0:	414a703a 	and	r5,r8,r5
 402dea4:	003fa806 	br	402dd48 <__alt_data_end+0xfffedd48>
 402dea8:	0080630e 	bge	zero,r2,402e038 <__subdf3+0x3d4>
 402deac:	48003026 	beq	r9,zero,402df70 <__subdf3+0x30c>
 402deb0:	0101ffc4 	movi	r4,2047
 402deb4:	813f8c26 	beq	r16,r4,402dce8 <__alt_data_end+0xfffedce8>
 402deb8:	29402034 	orhi	r5,r5,128
 402debc:	01000e04 	movi	r4,56
 402dec0:	2080a90e 	bge	r4,r2,402e168 <__subdf3+0x504>
 402dec4:	298cb03a 	or	r6,r5,r6
 402dec8:	3012c03a 	cmpne	r9,r6,zero
 402decc:	0005883a 	mov	r2,zero
 402ded0:	4c53883a 	add	r9,r9,r17
 402ded4:	4c63803a 	cmpltu	r17,r9,r17
 402ded8:	10c7883a 	add	r3,r2,r3
 402dedc:	88c7883a 	add	r3,r17,r3
 402dee0:	4823883a 	mov	r17,r9
 402dee4:	1880202c 	andhi	r2,r3,128
 402dee8:	1000d026 	beq	r2,zero,402e22c <__subdf3+0x5c8>
 402deec:	84000044 	addi	r16,r16,1
 402def0:	0081ffc4 	movi	r2,2047
 402def4:	8080fe26 	beq	r16,r2,402e2f0 <__subdf3+0x68c>
 402def8:	00bfe034 	movhi	r2,65408
 402defc:	10bfffc4 	addi	r2,r2,-1
 402df00:	1886703a 	and	r3,r3,r2
 402df04:	880ad07a 	srli	r5,r17,1
 402df08:	180497fa 	slli	r2,r3,31
 402df0c:	8900004c 	andi	r4,r17,1
 402df10:	2922b03a 	or	r17,r5,r4
 402df14:	1806d07a 	srli	r3,r3,1
 402df18:	1462b03a 	or	r17,r2,r17
 402df1c:	3825883a 	mov	r18,r7
 402df20:	003f7106 	br	402dce8 <__alt_data_end+0xfffedce8>
 402df24:	2984b03a 	or	r2,r5,r6
 402df28:	103f6826 	beq	r2,zero,402dccc <__alt_data_end+0xfffedccc>
 402df2c:	39c03fcc 	andi	r7,r7,255
 402df30:	003f6706 	br	402dcd0 <__alt_data_end+0xfffedcd0>
 402df34:	4086b03a 	or	r3,r8,r2
 402df38:	18015226 	beq	r3,zero,402e484 <__subdf3+0x820>
 402df3c:	00c00434 	movhi	r3,16
 402df40:	41400234 	orhi	r5,r8,8
 402df44:	18ffffc4 	addi	r3,r3,-1
 402df48:	28ca703a 	and	r5,r5,r3
 402df4c:	003f7e06 	br	402dd48 <__alt_data_end+0xfffedd48>
 402df50:	10bfffc4 	addi	r2,r2,-1
 402df54:	1000491e 	bne	r2,zero,402e07c <__subdf3+0x418>
 402df58:	898fc83a 	sub	r7,r17,r6
 402df5c:	89e3803a 	cmpltu	r17,r17,r7
 402df60:	1947c83a 	sub	r3,r3,r5
 402df64:	1c47c83a 	sub	r3,r3,r17
 402df68:	3823883a 	mov	r17,r7
 402df6c:	003f9b06 	br	402dddc <__alt_data_end+0xfffedddc>
 402df70:	2988b03a 	or	r4,r5,r6
 402df74:	203f5c26 	beq	r4,zero,402dce8 <__alt_data_end+0xfffedce8>
 402df78:	10bfffc4 	addi	r2,r2,-1
 402df7c:	1000931e 	bne	r2,zero,402e1cc <__subdf3+0x568>
 402df80:	898d883a 	add	r6,r17,r6
 402df84:	3463803a 	cmpltu	r17,r6,r17
 402df88:	1947883a 	add	r3,r3,r5
 402df8c:	88c7883a 	add	r3,r17,r3
 402df90:	3023883a 	mov	r17,r6
 402df94:	003fd306 	br	402dee4 <__alt_data_end+0xfffedee4>
 402df98:	1000541e 	bne	r2,zero,402e0ec <__subdf3+0x488>
 402df9c:	80800044 	addi	r2,r16,1
 402dfa0:	1081ffcc 	andi	r2,r2,2047
 402dfa4:	01000044 	movi	r4,1
 402dfa8:	2080a20e 	bge	r4,r2,402e234 <__subdf3+0x5d0>
 402dfac:	8989c83a 	sub	r4,r17,r6
 402dfb0:	8905803a 	cmpltu	r2,r17,r4
 402dfb4:	1967c83a 	sub	r19,r3,r5
 402dfb8:	98a7c83a 	sub	r19,r19,r2
 402dfbc:	9880202c 	andhi	r2,r19,128
 402dfc0:	10006326 	beq	r2,zero,402e150 <__subdf3+0x4ec>
 402dfc4:	3463c83a 	sub	r17,r6,r17
 402dfc8:	28c7c83a 	sub	r3,r5,r3
 402dfcc:	344d803a 	cmpltu	r6,r6,r17
 402dfd0:	19a7c83a 	sub	r19,r3,r6
 402dfd4:	3825883a 	mov	r18,r7
 402dfd8:	983f861e 	bne	r19,zero,402ddf4 <__alt_data_end+0xfffeddf4>
 402dfdc:	8809883a 	mov	r4,r17
 402dfe0:	4021f180 	call	4021f18 <__clzsi2>
 402dfe4:	10800804 	addi	r2,r2,32
 402dfe8:	113ffe04 	addi	r4,r2,-8
 402dfec:	00c007c4 	movi	r3,31
 402dff0:	193f850e 	bge	r3,r4,402de08 <__alt_data_end+0xfffede08>
 402dff4:	10bff604 	addi	r2,r2,-40
 402dff8:	8884983a 	sll	r2,r17,r2
 402dffc:	0023883a 	mov	r17,zero
 402e000:	243f880e 	bge	r4,r16,402de24 <__alt_data_end+0xfffede24>
 402e004:	00ffe034 	movhi	r3,65408
 402e008:	18ffffc4 	addi	r3,r3,-1
 402e00c:	8121c83a 	sub	r16,r16,r4
 402e010:	10c6703a 	and	r3,r2,r3
 402e014:	003f3406 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e018:	9100004c 	andi	r4,r18,1
 402e01c:	000b883a 	mov	r5,zero
 402e020:	0005883a 	mov	r2,zero
 402e024:	003f4806 	br	402dd48 <__alt_data_end+0xfffedd48>
 402e028:	298cb03a 	or	r6,r5,r6
 402e02c:	300cc03a 	cmpne	r6,r6,zero
 402e030:	0005883a 	mov	r2,zero
 402e034:	003f6406 	br	402ddc8 <__alt_data_end+0xfffeddc8>
 402e038:	10009a1e 	bne	r2,zero,402e2a4 <__subdf3+0x640>
 402e03c:	82400044 	addi	r9,r16,1
 402e040:	4881ffcc 	andi	r2,r9,2047
 402e044:	02800044 	movi	r10,1
 402e048:	5080670e 	bge	r10,r2,402e1e8 <__subdf3+0x584>
 402e04c:	0081ffc4 	movi	r2,2047
 402e050:	4880af26 	beq	r9,r2,402e310 <__subdf3+0x6ac>
 402e054:	898d883a 	add	r6,r17,r6
 402e058:	1945883a 	add	r2,r3,r5
 402e05c:	3447803a 	cmpltu	r3,r6,r17
 402e060:	1887883a 	add	r3,r3,r2
 402e064:	182297fa 	slli	r17,r3,31
 402e068:	300cd07a 	srli	r6,r6,1
 402e06c:	1806d07a 	srli	r3,r3,1
 402e070:	4821883a 	mov	r16,r9
 402e074:	89a2b03a 	or	r17,r17,r6
 402e078:	003f1b06 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e07c:	0101ffc4 	movi	r4,2047
 402e080:	813f441e 	bne	r16,r4,402dd94 <__alt_data_end+0xfffedd94>
 402e084:	003f1806 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e088:	843ff844 	addi	r16,r16,-31
 402e08c:	01400804 	movi	r5,32
 402e090:	1408d83a 	srl	r4,r2,r16
 402e094:	19405026 	beq	r3,r5,402e1d8 <__subdf3+0x574>
 402e098:	01401004 	movi	r5,64
 402e09c:	28c7c83a 	sub	r3,r5,r3
 402e0a0:	10c4983a 	sll	r2,r2,r3
 402e0a4:	88a2b03a 	or	r17,r17,r2
 402e0a8:	8822c03a 	cmpne	r17,r17,zero
 402e0ac:	2462b03a 	or	r17,r4,r17
 402e0b0:	0007883a 	mov	r3,zero
 402e0b4:	0021883a 	mov	r16,zero
 402e0b8:	003f6d06 	br	402de70 <__alt_data_end+0xfffede70>
 402e0bc:	11fff804 	addi	r7,r2,-32
 402e0c0:	01000804 	movi	r4,32
 402e0c4:	29ced83a 	srl	r7,r5,r7
 402e0c8:	11004526 	beq	r2,r4,402e1e0 <__subdf3+0x57c>
 402e0cc:	01001004 	movi	r4,64
 402e0d0:	2089c83a 	sub	r4,r4,r2
 402e0d4:	2904983a 	sll	r2,r5,r4
 402e0d8:	118cb03a 	or	r6,r2,r6
 402e0dc:	300cc03a 	cmpne	r6,r6,zero
 402e0e0:	398cb03a 	or	r6,r7,r6
 402e0e4:	0005883a 	mov	r2,zero
 402e0e8:	003f3706 	br	402ddc8 <__alt_data_end+0xfffeddc8>
 402e0ec:	80002a26 	beq	r16,zero,402e198 <__subdf3+0x534>
 402e0f0:	0101ffc4 	movi	r4,2047
 402e0f4:	49006626 	beq	r9,r4,402e290 <__subdf3+0x62c>
 402e0f8:	0085c83a 	sub	r2,zero,r2
 402e0fc:	18c02034 	orhi	r3,r3,128
 402e100:	01000e04 	movi	r4,56
 402e104:	20807e16 	blt	r4,r2,402e300 <__subdf3+0x69c>
 402e108:	010007c4 	movi	r4,31
 402e10c:	2080e716 	blt	r4,r2,402e4ac <__subdf3+0x848>
 402e110:	01000804 	movi	r4,32
 402e114:	2089c83a 	sub	r4,r4,r2
 402e118:	1914983a 	sll	r10,r3,r4
 402e11c:	8890d83a 	srl	r8,r17,r2
 402e120:	8908983a 	sll	r4,r17,r4
 402e124:	1884d83a 	srl	r2,r3,r2
 402e128:	5222b03a 	or	r17,r10,r8
 402e12c:	2006c03a 	cmpne	r3,r4,zero
 402e130:	88e2b03a 	or	r17,r17,r3
 402e134:	3463c83a 	sub	r17,r6,r17
 402e138:	2885c83a 	sub	r2,r5,r2
 402e13c:	344d803a 	cmpltu	r6,r6,r17
 402e140:	1187c83a 	sub	r3,r2,r6
 402e144:	4821883a 	mov	r16,r9
 402e148:	3825883a 	mov	r18,r7
 402e14c:	003f2306 	br	402dddc <__alt_data_end+0xfffedddc>
 402e150:	24d0b03a 	or	r8,r4,r19
 402e154:	40001b1e 	bne	r8,zero,402e1c4 <__subdf3+0x560>
 402e158:	0005883a 	mov	r2,zero
 402e15c:	0009883a 	mov	r4,zero
 402e160:	0021883a 	mov	r16,zero
 402e164:	003f4906 	br	402de8c <__alt_data_end+0xfffede8c>
 402e168:	010007c4 	movi	r4,31
 402e16c:	20803a16 	blt	r4,r2,402e258 <__subdf3+0x5f4>
 402e170:	01000804 	movi	r4,32
 402e174:	2089c83a 	sub	r4,r4,r2
 402e178:	2912983a 	sll	r9,r5,r4
 402e17c:	3090d83a 	srl	r8,r6,r2
 402e180:	3108983a 	sll	r4,r6,r4
 402e184:	2884d83a 	srl	r2,r5,r2
 402e188:	4a12b03a 	or	r9,r9,r8
 402e18c:	2008c03a 	cmpne	r4,r4,zero
 402e190:	4912b03a 	or	r9,r9,r4
 402e194:	003f4e06 	br	402ded0 <__alt_data_end+0xfffeded0>
 402e198:	1c48b03a 	or	r4,r3,r17
 402e19c:	20003c26 	beq	r4,zero,402e290 <__subdf3+0x62c>
 402e1a0:	0084303a 	nor	r2,zero,r2
 402e1a4:	1000381e 	bne	r2,zero,402e288 <__subdf3+0x624>
 402e1a8:	3463c83a 	sub	r17,r6,r17
 402e1ac:	28c5c83a 	sub	r2,r5,r3
 402e1b0:	344d803a 	cmpltu	r6,r6,r17
 402e1b4:	1187c83a 	sub	r3,r2,r6
 402e1b8:	4821883a 	mov	r16,r9
 402e1bc:	3825883a 	mov	r18,r7
 402e1c0:	003f0606 	br	402dddc <__alt_data_end+0xfffedddc>
 402e1c4:	2023883a 	mov	r17,r4
 402e1c8:	003f0906 	br	402ddf0 <__alt_data_end+0xfffeddf0>
 402e1cc:	0101ffc4 	movi	r4,2047
 402e1d0:	813f3a1e 	bne	r16,r4,402debc <__alt_data_end+0xfffedebc>
 402e1d4:	003ec406 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e1d8:	0005883a 	mov	r2,zero
 402e1dc:	003fb106 	br	402e0a4 <__alt_data_end+0xfffee0a4>
 402e1e0:	0005883a 	mov	r2,zero
 402e1e4:	003fbc06 	br	402e0d8 <__alt_data_end+0xfffee0d8>
 402e1e8:	1c44b03a 	or	r2,r3,r17
 402e1ec:	80008e1e 	bne	r16,zero,402e428 <__subdf3+0x7c4>
 402e1f0:	1000c826 	beq	r2,zero,402e514 <__subdf3+0x8b0>
 402e1f4:	2984b03a 	or	r2,r5,r6
 402e1f8:	103ebb26 	beq	r2,zero,402dce8 <__alt_data_end+0xfffedce8>
 402e1fc:	8989883a 	add	r4,r17,r6
 402e200:	1945883a 	add	r2,r3,r5
 402e204:	2447803a 	cmpltu	r3,r4,r17
 402e208:	1887883a 	add	r3,r3,r2
 402e20c:	1880202c 	andhi	r2,r3,128
 402e210:	2023883a 	mov	r17,r4
 402e214:	103f1626 	beq	r2,zero,402de70 <__alt_data_end+0xfffede70>
 402e218:	00bfe034 	movhi	r2,65408
 402e21c:	10bfffc4 	addi	r2,r2,-1
 402e220:	5021883a 	mov	r16,r10
 402e224:	1886703a 	and	r3,r3,r2
 402e228:	003eaf06 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e22c:	3825883a 	mov	r18,r7
 402e230:	003f0f06 	br	402de70 <__alt_data_end+0xfffede70>
 402e234:	1c44b03a 	or	r2,r3,r17
 402e238:	8000251e 	bne	r16,zero,402e2d0 <__subdf3+0x66c>
 402e23c:	1000661e 	bne	r2,zero,402e3d8 <__subdf3+0x774>
 402e240:	2990b03a 	or	r8,r5,r6
 402e244:	40009626 	beq	r8,zero,402e4a0 <__subdf3+0x83c>
 402e248:	2807883a 	mov	r3,r5
 402e24c:	3023883a 	mov	r17,r6
 402e250:	3825883a 	mov	r18,r7
 402e254:	003ea406 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e258:	127ff804 	addi	r9,r2,-32
 402e25c:	01000804 	movi	r4,32
 402e260:	2a52d83a 	srl	r9,r5,r9
 402e264:	11008c26 	beq	r2,r4,402e498 <__subdf3+0x834>
 402e268:	01001004 	movi	r4,64
 402e26c:	2085c83a 	sub	r2,r4,r2
 402e270:	2884983a 	sll	r2,r5,r2
 402e274:	118cb03a 	or	r6,r2,r6
 402e278:	300cc03a 	cmpne	r6,r6,zero
 402e27c:	4992b03a 	or	r9,r9,r6
 402e280:	0005883a 	mov	r2,zero
 402e284:	003f1206 	br	402ded0 <__alt_data_end+0xfffeded0>
 402e288:	0101ffc4 	movi	r4,2047
 402e28c:	493f9c1e 	bne	r9,r4,402e100 <__alt_data_end+0xfffee100>
 402e290:	2807883a 	mov	r3,r5
 402e294:	3023883a 	mov	r17,r6
 402e298:	4821883a 	mov	r16,r9
 402e29c:	3825883a 	mov	r18,r7
 402e2a0:	003e9106 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e2a4:	80001f1e 	bne	r16,zero,402e324 <__subdf3+0x6c0>
 402e2a8:	1c48b03a 	or	r4,r3,r17
 402e2ac:	20005a26 	beq	r4,zero,402e418 <__subdf3+0x7b4>
 402e2b0:	0084303a 	nor	r2,zero,r2
 402e2b4:	1000561e 	bne	r2,zero,402e410 <__subdf3+0x7ac>
 402e2b8:	89a3883a 	add	r17,r17,r6
 402e2bc:	1945883a 	add	r2,r3,r5
 402e2c0:	898d803a 	cmpltu	r6,r17,r6
 402e2c4:	3087883a 	add	r3,r6,r2
 402e2c8:	4821883a 	mov	r16,r9
 402e2cc:	003f0506 	br	402dee4 <__alt_data_end+0xfffedee4>
 402e2d0:	10002b1e 	bne	r2,zero,402e380 <__subdf3+0x71c>
 402e2d4:	2984b03a 	or	r2,r5,r6
 402e2d8:	10008026 	beq	r2,zero,402e4dc <__subdf3+0x878>
 402e2dc:	2807883a 	mov	r3,r5
 402e2e0:	3023883a 	mov	r17,r6
 402e2e4:	3825883a 	mov	r18,r7
 402e2e8:	0401ffc4 	movi	r16,2047
 402e2ec:	003e7e06 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e2f0:	3809883a 	mov	r4,r7
 402e2f4:	0011883a 	mov	r8,zero
 402e2f8:	0005883a 	mov	r2,zero
 402e2fc:	003ee306 	br	402de8c <__alt_data_end+0xfffede8c>
 402e300:	1c62b03a 	or	r17,r3,r17
 402e304:	8822c03a 	cmpne	r17,r17,zero
 402e308:	0005883a 	mov	r2,zero
 402e30c:	003f8906 	br	402e134 <__alt_data_end+0xfffee134>
 402e310:	3809883a 	mov	r4,r7
 402e314:	4821883a 	mov	r16,r9
 402e318:	0011883a 	mov	r8,zero
 402e31c:	0005883a 	mov	r2,zero
 402e320:	003eda06 	br	402de8c <__alt_data_end+0xfffede8c>
 402e324:	0101ffc4 	movi	r4,2047
 402e328:	49003b26 	beq	r9,r4,402e418 <__subdf3+0x7b4>
 402e32c:	0085c83a 	sub	r2,zero,r2
 402e330:	18c02034 	orhi	r3,r3,128
 402e334:	01000e04 	movi	r4,56
 402e338:	20806e16 	blt	r4,r2,402e4f4 <__subdf3+0x890>
 402e33c:	010007c4 	movi	r4,31
 402e340:	20807716 	blt	r4,r2,402e520 <__subdf3+0x8bc>
 402e344:	01000804 	movi	r4,32
 402e348:	2089c83a 	sub	r4,r4,r2
 402e34c:	1914983a 	sll	r10,r3,r4
 402e350:	8890d83a 	srl	r8,r17,r2
 402e354:	8908983a 	sll	r4,r17,r4
 402e358:	1884d83a 	srl	r2,r3,r2
 402e35c:	5222b03a 	or	r17,r10,r8
 402e360:	2006c03a 	cmpne	r3,r4,zero
 402e364:	88e2b03a 	or	r17,r17,r3
 402e368:	89a3883a 	add	r17,r17,r6
 402e36c:	1145883a 	add	r2,r2,r5
 402e370:	898d803a 	cmpltu	r6,r17,r6
 402e374:	3087883a 	add	r3,r6,r2
 402e378:	4821883a 	mov	r16,r9
 402e37c:	003ed906 	br	402dee4 <__alt_data_end+0xfffedee4>
 402e380:	2984b03a 	or	r2,r5,r6
 402e384:	10004226 	beq	r2,zero,402e490 <__subdf3+0x82c>
 402e388:	1808d0fa 	srli	r4,r3,3
 402e38c:	8822d0fa 	srli	r17,r17,3
 402e390:	1806977a 	slli	r3,r3,29
 402e394:	2080022c 	andhi	r2,r4,8
 402e398:	1c62b03a 	or	r17,r3,r17
 402e39c:	10000826 	beq	r2,zero,402e3c0 <__subdf3+0x75c>
 402e3a0:	2812d0fa 	srli	r9,r5,3
 402e3a4:	4880022c 	andhi	r2,r9,8
 402e3a8:	1000051e 	bne	r2,zero,402e3c0 <__subdf3+0x75c>
 402e3ac:	300cd0fa 	srli	r6,r6,3
 402e3b0:	2804977a 	slli	r2,r5,29
 402e3b4:	4809883a 	mov	r4,r9
 402e3b8:	3825883a 	mov	r18,r7
 402e3bc:	11a2b03a 	or	r17,r2,r6
 402e3c0:	8806d77a 	srli	r3,r17,29
 402e3c4:	200890fa 	slli	r4,r4,3
 402e3c8:	882290fa 	slli	r17,r17,3
 402e3cc:	0401ffc4 	movi	r16,2047
 402e3d0:	1906b03a 	or	r3,r3,r4
 402e3d4:	003e4406 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e3d8:	2984b03a 	or	r2,r5,r6
 402e3dc:	103e4226 	beq	r2,zero,402dce8 <__alt_data_end+0xfffedce8>
 402e3e0:	8989c83a 	sub	r4,r17,r6
 402e3e4:	8911803a 	cmpltu	r8,r17,r4
 402e3e8:	1945c83a 	sub	r2,r3,r5
 402e3ec:	1205c83a 	sub	r2,r2,r8
 402e3f0:	1200202c 	andhi	r8,r2,128
 402e3f4:	403e9a26 	beq	r8,zero,402de60 <__alt_data_end+0xfffede60>
 402e3f8:	3463c83a 	sub	r17,r6,r17
 402e3fc:	28c5c83a 	sub	r2,r5,r3
 402e400:	344d803a 	cmpltu	r6,r6,r17
 402e404:	1187c83a 	sub	r3,r2,r6
 402e408:	3825883a 	mov	r18,r7
 402e40c:	003e3606 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e410:	0101ffc4 	movi	r4,2047
 402e414:	493fc71e 	bne	r9,r4,402e334 <__alt_data_end+0xfffee334>
 402e418:	2807883a 	mov	r3,r5
 402e41c:	3023883a 	mov	r17,r6
 402e420:	4821883a 	mov	r16,r9
 402e424:	003e3006 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e428:	10003626 	beq	r2,zero,402e504 <__subdf3+0x8a0>
 402e42c:	2984b03a 	or	r2,r5,r6
 402e430:	10001726 	beq	r2,zero,402e490 <__subdf3+0x82c>
 402e434:	1808d0fa 	srli	r4,r3,3
 402e438:	8822d0fa 	srli	r17,r17,3
 402e43c:	1806977a 	slli	r3,r3,29
 402e440:	2080022c 	andhi	r2,r4,8
 402e444:	1c62b03a 	or	r17,r3,r17
 402e448:	10000726 	beq	r2,zero,402e468 <__subdf3+0x804>
 402e44c:	2812d0fa 	srli	r9,r5,3
 402e450:	4880022c 	andhi	r2,r9,8
 402e454:	1000041e 	bne	r2,zero,402e468 <__subdf3+0x804>
 402e458:	300cd0fa 	srli	r6,r6,3
 402e45c:	2804977a 	slli	r2,r5,29
 402e460:	4809883a 	mov	r4,r9
 402e464:	11a2b03a 	or	r17,r2,r6
 402e468:	8806d77a 	srli	r3,r17,29
 402e46c:	200890fa 	slli	r4,r4,3
 402e470:	882290fa 	slli	r17,r17,3
 402e474:	3825883a 	mov	r18,r7
 402e478:	1906b03a 	or	r3,r3,r4
 402e47c:	0401ffc4 	movi	r16,2047
 402e480:	003e1906 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e484:	000b883a 	mov	r5,zero
 402e488:	0005883a 	mov	r2,zero
 402e48c:	003e2e06 	br	402dd48 <__alt_data_end+0xfffedd48>
 402e490:	0401ffc4 	movi	r16,2047
 402e494:	003e1406 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e498:	0005883a 	mov	r2,zero
 402e49c:	003f7506 	br	402e274 <__alt_data_end+0xfffee274>
 402e4a0:	0005883a 	mov	r2,zero
 402e4a4:	0009883a 	mov	r4,zero
 402e4a8:	003e7806 	br	402de8c <__alt_data_end+0xfffede8c>
 402e4ac:	123ff804 	addi	r8,r2,-32
 402e4b0:	01000804 	movi	r4,32
 402e4b4:	1a10d83a 	srl	r8,r3,r8
 402e4b8:	11002526 	beq	r2,r4,402e550 <__subdf3+0x8ec>
 402e4bc:	01001004 	movi	r4,64
 402e4c0:	2085c83a 	sub	r2,r4,r2
 402e4c4:	1884983a 	sll	r2,r3,r2
 402e4c8:	1444b03a 	or	r2,r2,r17
 402e4cc:	1004c03a 	cmpne	r2,r2,zero
 402e4d0:	40a2b03a 	or	r17,r8,r2
 402e4d4:	0005883a 	mov	r2,zero
 402e4d8:	003f1606 	br	402e134 <__alt_data_end+0xfffee134>
 402e4dc:	02000434 	movhi	r8,16
 402e4e0:	0009883a 	mov	r4,zero
 402e4e4:	423fffc4 	addi	r8,r8,-1
 402e4e8:	00bfffc4 	movi	r2,-1
 402e4ec:	0401ffc4 	movi	r16,2047
 402e4f0:	003e6606 	br	402de8c <__alt_data_end+0xfffede8c>
 402e4f4:	1c62b03a 	or	r17,r3,r17
 402e4f8:	8822c03a 	cmpne	r17,r17,zero
 402e4fc:	0005883a 	mov	r2,zero
 402e500:	003f9906 	br	402e368 <__alt_data_end+0xfffee368>
 402e504:	2807883a 	mov	r3,r5
 402e508:	3023883a 	mov	r17,r6
 402e50c:	0401ffc4 	movi	r16,2047
 402e510:	003df506 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e514:	2807883a 	mov	r3,r5
 402e518:	3023883a 	mov	r17,r6
 402e51c:	003df206 	br	402dce8 <__alt_data_end+0xfffedce8>
 402e520:	123ff804 	addi	r8,r2,-32
 402e524:	01000804 	movi	r4,32
 402e528:	1a10d83a 	srl	r8,r3,r8
 402e52c:	11000a26 	beq	r2,r4,402e558 <__subdf3+0x8f4>
 402e530:	01001004 	movi	r4,64
 402e534:	2085c83a 	sub	r2,r4,r2
 402e538:	1884983a 	sll	r2,r3,r2
 402e53c:	1444b03a 	or	r2,r2,r17
 402e540:	1004c03a 	cmpne	r2,r2,zero
 402e544:	40a2b03a 	or	r17,r8,r2
 402e548:	0005883a 	mov	r2,zero
 402e54c:	003f8606 	br	402e368 <__alt_data_end+0xfffee368>
 402e550:	0005883a 	mov	r2,zero
 402e554:	003fdc06 	br	402e4c8 <__alt_data_end+0xfffee4c8>
 402e558:	0005883a 	mov	r2,zero
 402e55c:	003ff706 	br	402e53c <__alt_data_end+0xfffee53c>

0402e560 <__fixdfsi>:
 402e560:	280cd53a 	srli	r6,r5,20
 402e564:	00c00434 	movhi	r3,16
 402e568:	18ffffc4 	addi	r3,r3,-1
 402e56c:	3181ffcc 	andi	r6,r6,2047
 402e570:	01c0ff84 	movi	r7,1022
 402e574:	28c6703a 	and	r3,r5,r3
 402e578:	280ad7fa 	srli	r5,r5,31
 402e57c:	3980120e 	bge	r7,r6,402e5c8 <__fixdfsi+0x68>
 402e580:	00810744 	movi	r2,1053
 402e584:	11800c16 	blt	r2,r6,402e5b8 <__fixdfsi+0x58>
 402e588:	00810cc4 	movi	r2,1075
 402e58c:	1185c83a 	sub	r2,r2,r6
 402e590:	01c007c4 	movi	r7,31
 402e594:	18c00434 	orhi	r3,r3,16
 402e598:	38800d16 	blt	r7,r2,402e5d0 <__fixdfsi+0x70>
 402e59c:	31befb44 	addi	r6,r6,-1043
 402e5a0:	2084d83a 	srl	r2,r4,r2
 402e5a4:	1986983a 	sll	r3,r3,r6
 402e5a8:	1884b03a 	or	r2,r3,r2
 402e5ac:	28000726 	beq	r5,zero,402e5cc <__fixdfsi+0x6c>
 402e5b0:	0085c83a 	sub	r2,zero,r2
 402e5b4:	f800283a 	ret
 402e5b8:	00a00034 	movhi	r2,32768
 402e5bc:	10bfffc4 	addi	r2,r2,-1
 402e5c0:	2885883a 	add	r2,r5,r2
 402e5c4:	f800283a 	ret
 402e5c8:	0005883a 	mov	r2,zero
 402e5cc:	f800283a 	ret
 402e5d0:	008104c4 	movi	r2,1043
 402e5d4:	1185c83a 	sub	r2,r2,r6
 402e5d8:	1884d83a 	srl	r2,r3,r2
 402e5dc:	003ff306 	br	402e5ac <__alt_data_end+0xfffee5ac>

0402e5e0 <__floatsidf>:
 402e5e0:	defffd04 	addi	sp,sp,-12
 402e5e4:	dfc00215 	stw	ra,8(sp)
 402e5e8:	dc400115 	stw	r17,4(sp)
 402e5ec:	dc000015 	stw	r16,0(sp)
 402e5f0:	20002b26 	beq	r4,zero,402e6a0 <__floatsidf+0xc0>
 402e5f4:	2023883a 	mov	r17,r4
 402e5f8:	2020d7fa 	srli	r16,r4,31
 402e5fc:	20002d16 	blt	r4,zero,402e6b4 <__floatsidf+0xd4>
 402e600:	8809883a 	mov	r4,r17
 402e604:	4021f180 	call	4021f18 <__clzsi2>
 402e608:	01410784 	movi	r5,1054
 402e60c:	288bc83a 	sub	r5,r5,r2
 402e610:	01010cc4 	movi	r4,1075
 402e614:	2149c83a 	sub	r4,r4,r5
 402e618:	00c007c4 	movi	r3,31
 402e61c:	1900160e 	bge	r3,r4,402e678 <__floatsidf+0x98>
 402e620:	00c104c4 	movi	r3,1043
 402e624:	1947c83a 	sub	r3,r3,r5
 402e628:	88c6983a 	sll	r3,r17,r3
 402e62c:	00800434 	movhi	r2,16
 402e630:	10bfffc4 	addi	r2,r2,-1
 402e634:	1886703a 	and	r3,r3,r2
 402e638:	2941ffcc 	andi	r5,r5,2047
 402e63c:	800d883a 	mov	r6,r16
 402e640:	0005883a 	mov	r2,zero
 402e644:	280a953a 	slli	r5,r5,20
 402e648:	31803fcc 	andi	r6,r6,255
 402e64c:	01000434 	movhi	r4,16
 402e650:	300c97fa 	slli	r6,r6,31
 402e654:	213fffc4 	addi	r4,r4,-1
 402e658:	1906703a 	and	r3,r3,r4
 402e65c:	1946b03a 	or	r3,r3,r5
 402e660:	1986b03a 	or	r3,r3,r6
 402e664:	dfc00217 	ldw	ra,8(sp)
 402e668:	dc400117 	ldw	r17,4(sp)
 402e66c:	dc000017 	ldw	r16,0(sp)
 402e670:	dec00304 	addi	sp,sp,12
 402e674:	f800283a 	ret
 402e678:	00c002c4 	movi	r3,11
 402e67c:	1887c83a 	sub	r3,r3,r2
 402e680:	88c6d83a 	srl	r3,r17,r3
 402e684:	8904983a 	sll	r2,r17,r4
 402e688:	01000434 	movhi	r4,16
 402e68c:	213fffc4 	addi	r4,r4,-1
 402e690:	2941ffcc 	andi	r5,r5,2047
 402e694:	1906703a 	and	r3,r3,r4
 402e698:	800d883a 	mov	r6,r16
 402e69c:	003fe906 	br	402e644 <__alt_data_end+0xfffee644>
 402e6a0:	000d883a 	mov	r6,zero
 402e6a4:	000b883a 	mov	r5,zero
 402e6a8:	0007883a 	mov	r3,zero
 402e6ac:	0005883a 	mov	r2,zero
 402e6b0:	003fe406 	br	402e644 <__alt_data_end+0xfffee644>
 402e6b4:	0123c83a 	sub	r17,zero,r4
 402e6b8:	003fd106 	br	402e600 <__alt_data_end+0xfffee600>

0402e6bc <__floatunsidf>:
 402e6bc:	defffe04 	addi	sp,sp,-8
 402e6c0:	dc000015 	stw	r16,0(sp)
 402e6c4:	dfc00115 	stw	ra,4(sp)
 402e6c8:	2021883a 	mov	r16,r4
 402e6cc:	20002226 	beq	r4,zero,402e758 <__floatunsidf+0x9c>
 402e6d0:	4021f180 	call	4021f18 <__clzsi2>
 402e6d4:	01010784 	movi	r4,1054
 402e6d8:	2089c83a 	sub	r4,r4,r2
 402e6dc:	01810cc4 	movi	r6,1075
 402e6e0:	310dc83a 	sub	r6,r6,r4
 402e6e4:	00c007c4 	movi	r3,31
 402e6e8:	1980120e 	bge	r3,r6,402e734 <__floatunsidf+0x78>
 402e6ec:	00c104c4 	movi	r3,1043
 402e6f0:	1907c83a 	sub	r3,r3,r4
 402e6f4:	80ca983a 	sll	r5,r16,r3
 402e6f8:	00800434 	movhi	r2,16
 402e6fc:	10bfffc4 	addi	r2,r2,-1
 402e700:	2101ffcc 	andi	r4,r4,2047
 402e704:	0021883a 	mov	r16,zero
 402e708:	288a703a 	and	r5,r5,r2
 402e70c:	2008953a 	slli	r4,r4,20
 402e710:	00c00434 	movhi	r3,16
 402e714:	18ffffc4 	addi	r3,r3,-1
 402e718:	28c6703a 	and	r3,r5,r3
 402e71c:	8005883a 	mov	r2,r16
 402e720:	1906b03a 	or	r3,r3,r4
 402e724:	dfc00117 	ldw	ra,4(sp)
 402e728:	dc000017 	ldw	r16,0(sp)
 402e72c:	dec00204 	addi	sp,sp,8
 402e730:	f800283a 	ret
 402e734:	00c002c4 	movi	r3,11
 402e738:	188bc83a 	sub	r5,r3,r2
 402e73c:	814ad83a 	srl	r5,r16,r5
 402e740:	00c00434 	movhi	r3,16
 402e744:	18ffffc4 	addi	r3,r3,-1
 402e748:	81a0983a 	sll	r16,r16,r6
 402e74c:	2101ffcc 	andi	r4,r4,2047
 402e750:	28ca703a 	and	r5,r5,r3
 402e754:	003fed06 	br	402e70c <__alt_data_end+0xfffee70c>
 402e758:	0009883a 	mov	r4,zero
 402e75c:	000b883a 	mov	r5,zero
 402e760:	003fea06 	br	402e70c <__alt_data_end+0xfffee70c>

0402e764 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402e764:	defffe04 	addi	sp,sp,-8
 402e768:	dfc00115 	stw	ra,4(sp)
 402e76c:	df000015 	stw	fp,0(sp)
 402e770:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402e774:	d0a00b17 	ldw	r2,-32724(gp)
 402e778:	10000326 	beq	r2,zero,402e788 <alt_get_errno+0x24>
 402e77c:	d0a00b17 	ldw	r2,-32724(gp)
 402e780:	103ee83a 	callr	r2
 402e784:	00000106 	br	402e78c <alt_get_errno+0x28>
 402e788:	d0a73304 	addi	r2,gp,-25396
}
 402e78c:	e037883a 	mov	sp,fp
 402e790:	dfc00117 	ldw	ra,4(sp)
 402e794:	df000017 	ldw	fp,0(sp)
 402e798:	dec00204 	addi	sp,sp,8
 402e79c:	f800283a 	ret

0402e7a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402e7a0:	defffb04 	addi	sp,sp,-20
 402e7a4:	dfc00415 	stw	ra,16(sp)
 402e7a8:	df000315 	stw	fp,12(sp)
 402e7ac:	df000304 	addi	fp,sp,12
 402e7b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402e7b4:	e0bfff17 	ldw	r2,-4(fp)
 402e7b8:	10000616 	blt	r2,zero,402e7d4 <close+0x34>
 402e7bc:	e0bfff17 	ldw	r2,-4(fp)
 402e7c0:	10c00324 	muli	r3,r2,12
 402e7c4:	008100f4 	movhi	r2,1027
 402e7c8:	10909504 	addi	r2,r2,16980
 402e7cc:	1885883a 	add	r2,r3,r2
 402e7d0:	00000106 	br	402e7d8 <close+0x38>
 402e7d4:	0005883a 	mov	r2,zero
 402e7d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402e7dc:	e0bffd17 	ldw	r2,-12(fp)
 402e7e0:	10001926 	beq	r2,zero,402e848 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402e7e4:	e0bffd17 	ldw	r2,-12(fp)
 402e7e8:	10800017 	ldw	r2,0(r2)
 402e7ec:	10800417 	ldw	r2,16(r2)
 402e7f0:	10000626 	beq	r2,zero,402e80c <close+0x6c>
 402e7f4:	e0bffd17 	ldw	r2,-12(fp)
 402e7f8:	10800017 	ldw	r2,0(r2)
 402e7fc:	10800417 	ldw	r2,16(r2)
 402e800:	e13ffd17 	ldw	r4,-12(fp)
 402e804:	103ee83a 	callr	r2
 402e808:	00000106 	br	402e810 <close+0x70>
 402e80c:	0005883a 	mov	r2,zero
 402e810:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402e814:	e13fff17 	ldw	r4,-4(fp)
 402e818:	402f2900 	call	402f290 <alt_release_fd>
    if (rval < 0)
 402e81c:	e0bffe17 	ldw	r2,-8(fp)
 402e820:	1000070e 	bge	r2,zero,402e840 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 402e824:	402e7640 	call	402e764 <alt_get_errno>
 402e828:	1007883a 	mov	r3,r2
 402e82c:	e0bffe17 	ldw	r2,-8(fp)
 402e830:	0085c83a 	sub	r2,zero,r2
 402e834:	18800015 	stw	r2,0(r3)
      return -1;
 402e838:	00bfffc4 	movi	r2,-1
 402e83c:	00000706 	br	402e85c <close+0xbc>
    }
    return 0;
 402e840:	0005883a 	mov	r2,zero
 402e844:	00000506 	br	402e85c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402e848:	402e7640 	call	402e764 <alt_get_errno>
 402e84c:	1007883a 	mov	r3,r2
 402e850:	00801444 	movi	r2,81
 402e854:	18800015 	stw	r2,0(r3)
    return -1;
 402e858:	00bfffc4 	movi	r2,-1
  }
}
 402e85c:	e037883a 	mov	sp,fp
 402e860:	dfc00117 	ldw	ra,4(sp)
 402e864:	df000017 	ldw	fp,0(sp)
 402e868:	dec00204 	addi	sp,sp,8
 402e86c:	f800283a 	ret

0402e870 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402e870:	defffe04 	addi	sp,sp,-8
 402e874:	df000115 	stw	fp,4(sp)
 402e878:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402e87c:	e03fff15 	stw	zero,-4(fp)
 402e880:	00000506 	br	402e898 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 402e884:	e0bfff17 	ldw	r2,-4(fp)
 402e888:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402e88c:	e0bfff17 	ldw	r2,-4(fp)
 402e890:	10800804 	addi	r2,r2,32
 402e894:	e0bfff15 	stw	r2,-4(fp)
 402e898:	e0bfff17 	ldw	r2,-4(fp)
 402e89c:	10820030 	cmpltui	r2,r2,2048
 402e8a0:	103ff81e 	bne	r2,zero,402e884 <__alt_data_end+0xfffee884>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402e8a4:	0001883a 	nop
 402e8a8:	e037883a 	mov	sp,fp
 402e8ac:	df000017 	ldw	fp,0(sp)
 402e8b0:	dec00104 	addi	sp,sp,4
 402e8b4:	f800283a 	ret

0402e8b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402e8b8:	defffc04 	addi	sp,sp,-16
 402e8bc:	df000315 	stw	fp,12(sp)
 402e8c0:	df000304 	addi	fp,sp,12
 402e8c4:	e13ffd15 	stw	r4,-12(fp)
 402e8c8:	e17ffe15 	stw	r5,-8(fp)
 402e8cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402e8d0:	e0bfff17 	ldw	r2,-4(fp)
}
 402e8d4:	e037883a 	mov	sp,fp
 402e8d8:	df000017 	ldw	fp,0(sp)
 402e8dc:	dec00104 	addi	sp,sp,4
 402e8e0:	f800283a 	ret

0402e8e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402e8e4:	defffe04 	addi	sp,sp,-8
 402e8e8:	dfc00115 	stw	ra,4(sp)
 402e8ec:	df000015 	stw	fp,0(sp)
 402e8f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402e8f4:	d0a00b17 	ldw	r2,-32724(gp)
 402e8f8:	10000326 	beq	r2,zero,402e908 <alt_get_errno+0x24>
 402e8fc:	d0a00b17 	ldw	r2,-32724(gp)
 402e900:	103ee83a 	callr	r2
 402e904:	00000106 	br	402e90c <alt_get_errno+0x28>
 402e908:	d0a73304 	addi	r2,gp,-25396
}
 402e90c:	e037883a 	mov	sp,fp
 402e910:	dfc00117 	ldw	ra,4(sp)
 402e914:	df000017 	ldw	fp,0(sp)
 402e918:	dec00204 	addi	sp,sp,8
 402e91c:	f800283a 	ret

0402e920 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402e920:	defffb04 	addi	sp,sp,-20
 402e924:	dfc00415 	stw	ra,16(sp)
 402e928:	df000315 	stw	fp,12(sp)
 402e92c:	df000304 	addi	fp,sp,12
 402e930:	e13ffe15 	stw	r4,-8(fp)
 402e934:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402e938:	e0bffe17 	ldw	r2,-8(fp)
 402e93c:	10000616 	blt	r2,zero,402e958 <fstat+0x38>
 402e940:	e0bffe17 	ldw	r2,-8(fp)
 402e944:	10c00324 	muli	r3,r2,12
 402e948:	008100f4 	movhi	r2,1027
 402e94c:	10909504 	addi	r2,r2,16980
 402e950:	1885883a 	add	r2,r3,r2
 402e954:	00000106 	br	402e95c <fstat+0x3c>
 402e958:	0005883a 	mov	r2,zero
 402e95c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402e960:	e0bffd17 	ldw	r2,-12(fp)
 402e964:	10001026 	beq	r2,zero,402e9a8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402e968:	e0bffd17 	ldw	r2,-12(fp)
 402e96c:	10800017 	ldw	r2,0(r2)
 402e970:	10800817 	ldw	r2,32(r2)
 402e974:	10000726 	beq	r2,zero,402e994 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 402e978:	e0bffd17 	ldw	r2,-12(fp)
 402e97c:	10800017 	ldw	r2,0(r2)
 402e980:	10800817 	ldw	r2,32(r2)
 402e984:	e17fff17 	ldw	r5,-4(fp)
 402e988:	e13ffd17 	ldw	r4,-12(fp)
 402e98c:	103ee83a 	callr	r2
 402e990:	00000a06 	br	402e9bc <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402e994:	e0bfff17 	ldw	r2,-4(fp)
 402e998:	00c80004 	movi	r3,8192
 402e99c:	10c00115 	stw	r3,4(r2)
      return 0;
 402e9a0:	0005883a 	mov	r2,zero
 402e9a4:	00000506 	br	402e9bc <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402e9a8:	402e8e40 	call	402e8e4 <alt_get_errno>
 402e9ac:	1007883a 	mov	r3,r2
 402e9b0:	00801444 	movi	r2,81
 402e9b4:	18800015 	stw	r2,0(r3)
    return -1;
 402e9b8:	00bfffc4 	movi	r2,-1
  }
}
 402e9bc:	e037883a 	mov	sp,fp
 402e9c0:	dfc00117 	ldw	ra,4(sp)
 402e9c4:	df000017 	ldw	fp,0(sp)
 402e9c8:	dec00204 	addi	sp,sp,8
 402e9cc:	f800283a 	ret

0402e9d0 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 402e9d0:	defff004 	addi	sp,sp,-64
 402e9d4:	df000f15 	stw	fp,60(sp)
 402e9d8:	df000f04 	addi	fp,sp,60
 402e9dc:	e13ffd15 	stw	r4,-12(fp)
 402e9e0:	e17ffe15 	stw	r5,-8(fp)
 402e9e4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 402e9e8:	00bffa84 	movi	r2,-22
 402e9ec:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402e9f0:	e0bffd17 	ldw	r2,-12(fp)
 402e9f4:	10800828 	cmpgeui	r2,r2,32
 402e9f8:	1000501e 	bne	r2,zero,402eb3c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e9fc:	0005303a 	rdctl	r2,status
 402ea00:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ea04:	e0fff617 	ldw	r3,-40(fp)
 402ea08:	00bfff84 	movi	r2,-2
 402ea0c:	1884703a 	and	r2,r3,r2
 402ea10:	1001703a 	wrctl	status,r2
  
  return context;
 402ea14:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 402ea18:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 402ea1c:	008100f4 	movhi	r2,1027
 402ea20:	109ca404 	addi	r2,r2,29328
 402ea24:	e0fffd17 	ldw	r3,-12(fp)
 402ea28:	180690fa 	slli	r3,r3,3
 402ea2c:	10c5883a 	add	r2,r2,r3
 402ea30:	e0ffff17 	ldw	r3,-4(fp)
 402ea34:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 402ea38:	008100f4 	movhi	r2,1027
 402ea3c:	109ca404 	addi	r2,r2,29328
 402ea40:	e0fffd17 	ldw	r3,-12(fp)
 402ea44:	180690fa 	slli	r3,r3,3
 402ea48:	10c5883a 	add	r2,r2,r3
 402ea4c:	10800104 	addi	r2,r2,4
 402ea50:	e0fffe17 	ldw	r3,-8(fp)
 402ea54:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 402ea58:	e0bfff17 	ldw	r2,-4(fp)
 402ea5c:	10001926 	beq	r2,zero,402eac4 <alt_irq_register+0xf4>
 402ea60:	e0bffd17 	ldw	r2,-12(fp)
 402ea64:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ea68:	0005303a 	rdctl	r2,status
 402ea6c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ea70:	e0fff717 	ldw	r3,-36(fp)
 402ea74:	00bfff84 	movi	r2,-2
 402ea78:	1884703a 	and	r2,r3,r2
 402ea7c:	1001703a 	wrctl	status,r2
  
  return context;
 402ea80:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402ea84:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 402ea88:	00c00044 	movi	r3,1
 402ea8c:	e0bff217 	ldw	r2,-56(fp)
 402ea90:	1884983a 	sll	r2,r3,r2
 402ea94:	1007883a 	mov	r3,r2
 402ea98:	d0a73417 	ldw	r2,-25392(gp)
 402ea9c:	1884b03a 	or	r2,r3,r2
 402eaa0:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402eaa4:	d0a73417 	ldw	r2,-25392(gp)
 402eaa8:	100170fa 	wrctl	ienable,r2
 402eaac:	e0bff817 	ldw	r2,-32(fp)
 402eab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402eab4:	e0bff917 	ldw	r2,-28(fp)
 402eab8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402eabc:	0005883a 	mov	r2,zero
 402eac0:	00001906 	br	402eb28 <alt_irq_register+0x158>
 402eac4:	e0bffd17 	ldw	r2,-12(fp)
 402eac8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402eacc:	0005303a 	rdctl	r2,status
 402ead0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ead4:	e0fffa17 	ldw	r3,-24(fp)
 402ead8:	00bfff84 	movi	r2,-2
 402eadc:	1884703a 	and	r2,r3,r2
 402eae0:	1001703a 	wrctl	status,r2
  
  return context;
 402eae4:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402eae8:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 402eaec:	00c00044 	movi	r3,1
 402eaf0:	e0bff417 	ldw	r2,-48(fp)
 402eaf4:	1884983a 	sll	r2,r3,r2
 402eaf8:	0084303a 	nor	r2,zero,r2
 402eafc:	1007883a 	mov	r3,r2
 402eb00:	d0a73417 	ldw	r2,-25392(gp)
 402eb04:	1884703a 	and	r2,r3,r2
 402eb08:	d0a73415 	stw	r2,-25392(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402eb0c:	d0a73417 	ldw	r2,-25392(gp)
 402eb10:	100170fa 	wrctl	ienable,r2
 402eb14:	e0bffb17 	ldw	r2,-20(fp)
 402eb18:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402eb1c:	e0bffc17 	ldw	r2,-16(fp)
 402eb20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402eb24:	0005883a 	mov	r2,zero
 402eb28:	e0bff115 	stw	r2,-60(fp)
 402eb2c:	e0bff317 	ldw	r2,-52(fp)
 402eb30:	e0bff515 	stw	r2,-44(fp)
 402eb34:	e0bff517 	ldw	r2,-44(fp)
 402eb38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 402eb3c:	e0bff117 	ldw	r2,-60(fp)
}
 402eb40:	e037883a 	mov	sp,fp
 402eb44:	df000017 	ldw	fp,0(sp)
 402eb48:	dec00104 	addi	sp,sp,4
 402eb4c:	f800283a 	ret

0402eb50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402eb50:	defffe04 	addi	sp,sp,-8
 402eb54:	dfc00115 	stw	ra,4(sp)
 402eb58:	df000015 	stw	fp,0(sp)
 402eb5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402eb60:	d0a00b17 	ldw	r2,-32724(gp)
 402eb64:	10000326 	beq	r2,zero,402eb74 <alt_get_errno+0x24>
 402eb68:	d0a00b17 	ldw	r2,-32724(gp)
 402eb6c:	103ee83a 	callr	r2
 402eb70:	00000106 	br	402eb78 <alt_get_errno+0x28>
 402eb74:	d0a73304 	addi	r2,gp,-25396
}
 402eb78:	e037883a 	mov	sp,fp
 402eb7c:	dfc00117 	ldw	ra,4(sp)
 402eb80:	df000017 	ldw	fp,0(sp)
 402eb84:	dec00204 	addi	sp,sp,8
 402eb88:	f800283a 	ret

0402eb8c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402eb8c:	deffed04 	addi	sp,sp,-76
 402eb90:	dfc01215 	stw	ra,72(sp)
 402eb94:	df001115 	stw	fp,68(sp)
 402eb98:	df001104 	addi	fp,sp,68
 402eb9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402eba0:	e0bfff17 	ldw	r2,-4(fp)
 402eba4:	10000616 	blt	r2,zero,402ebc0 <isatty+0x34>
 402eba8:	e0bfff17 	ldw	r2,-4(fp)
 402ebac:	10c00324 	muli	r3,r2,12
 402ebb0:	008100f4 	movhi	r2,1027
 402ebb4:	10909504 	addi	r2,r2,16980
 402ebb8:	1885883a 	add	r2,r3,r2
 402ebbc:	00000106 	br	402ebc4 <isatty+0x38>
 402ebc0:	0005883a 	mov	r2,zero
 402ebc4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402ebc8:	e0bfef17 	ldw	r2,-68(fp)
 402ebcc:	10000e26 	beq	r2,zero,402ec08 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402ebd0:	e0bfef17 	ldw	r2,-68(fp)
 402ebd4:	10800017 	ldw	r2,0(r2)
 402ebd8:	10800817 	ldw	r2,32(r2)
 402ebdc:	1000021e 	bne	r2,zero,402ebe8 <isatty+0x5c>
    {
      return 1;
 402ebe0:	00800044 	movi	r2,1
 402ebe4:	00000d06 	br	402ec1c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402ebe8:	e0bff004 	addi	r2,fp,-64
 402ebec:	100b883a 	mov	r5,r2
 402ebf0:	e13fff17 	ldw	r4,-4(fp)
 402ebf4:	402e9200 	call	402e920 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402ebf8:	e0bff117 	ldw	r2,-60(fp)
 402ebfc:	10880020 	cmpeqi	r2,r2,8192
 402ec00:	10803fcc 	andi	r2,r2,255
 402ec04:	00000506 	br	402ec1c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402ec08:	402eb500 	call	402eb50 <alt_get_errno>
 402ec0c:	1007883a 	mov	r3,r2
 402ec10:	00801444 	movi	r2,81
 402ec14:	18800015 	stw	r2,0(r3)
    return 0;
 402ec18:	0005883a 	mov	r2,zero
  }
}
 402ec1c:	e037883a 	mov	sp,fp
 402ec20:	dfc00117 	ldw	ra,4(sp)
 402ec24:	df000017 	ldw	fp,0(sp)
 402ec28:	dec00204 	addi	sp,sp,8
 402ec2c:	f800283a 	ret

0402ec30 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402ec30:	defffc04 	addi	sp,sp,-16
 402ec34:	df000315 	stw	fp,12(sp)
 402ec38:	df000304 	addi	fp,sp,12
 402ec3c:	e13ffd15 	stw	r4,-12(fp)
 402ec40:	e17ffe15 	stw	r5,-8(fp)
 402ec44:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402ec48:	e0fffe17 	ldw	r3,-8(fp)
 402ec4c:	e0bffd17 	ldw	r2,-12(fp)
 402ec50:	18800c26 	beq	r3,r2,402ec84 <alt_load_section+0x54>
  {
    while( to != end )
 402ec54:	00000806 	br	402ec78 <alt_load_section+0x48>
    {
      *to++ = *from++;
 402ec58:	e0bffe17 	ldw	r2,-8(fp)
 402ec5c:	10c00104 	addi	r3,r2,4
 402ec60:	e0fffe15 	stw	r3,-8(fp)
 402ec64:	e0fffd17 	ldw	r3,-12(fp)
 402ec68:	19000104 	addi	r4,r3,4
 402ec6c:	e13ffd15 	stw	r4,-12(fp)
 402ec70:	18c00017 	ldw	r3,0(r3)
 402ec74:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402ec78:	e0fffe17 	ldw	r3,-8(fp)
 402ec7c:	e0bfff17 	ldw	r2,-4(fp)
 402ec80:	18bff51e 	bne	r3,r2,402ec58 <__alt_data_end+0xfffeec58>
    {
      *to++ = *from++;
    }
  }
}
 402ec84:	0001883a 	nop
 402ec88:	e037883a 	mov	sp,fp
 402ec8c:	df000017 	ldw	fp,0(sp)
 402ec90:	dec00104 	addi	sp,sp,4
 402ec94:	f800283a 	ret

0402ec98 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402ec98:	defffe04 	addi	sp,sp,-8
 402ec9c:	dfc00115 	stw	ra,4(sp)
 402eca0:	df000015 	stw	fp,0(sp)
 402eca4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402eca8:	018100f4 	movhi	r6,1027
 402ecac:	31957104 	addi	r6,r6,21956
 402ecb0:	014100f4 	movhi	r5,1027
 402ecb4:	294e6204 	addi	r5,r5,14728
 402ecb8:	010100f4 	movhi	r4,1027
 402ecbc:	21157104 	addi	r4,r4,21956
 402ecc0:	402ec300 	call	402ec30 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402ecc4:	018100b4 	movhi	r6,1026
 402ecc8:	31809204 	addi	r6,r6,584
 402eccc:	014100b4 	movhi	r5,1026
 402ecd0:	29400804 	addi	r5,r5,32
 402ecd4:	010100b4 	movhi	r4,1026
 402ecd8:	21000804 	addi	r4,r4,32
 402ecdc:	402ec300 	call	402ec30 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402ece0:	018100f4 	movhi	r6,1027
 402ece4:	318e6204 	addi	r6,r6,14728
 402ece8:	014100f4 	movhi	r5,1027
 402ecec:	294bbe04 	addi	r5,r5,12024
 402ecf0:	010100f4 	movhi	r4,1027
 402ecf4:	210bbe04 	addi	r4,r4,12024
 402ecf8:	402ec300 	call	402ec30 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402ecfc:	402e8700 	call	402e870 <alt_dcache_flush_all>
  alt_icache_flush_all();
 402ed00:	40321240 	call	4032124 <alt_icache_flush_all>
}
 402ed04:	0001883a 	nop
 402ed08:	e037883a 	mov	sp,fp
 402ed0c:	dfc00117 	ldw	ra,4(sp)
 402ed10:	df000017 	ldw	fp,0(sp)
 402ed14:	dec00204 	addi	sp,sp,8
 402ed18:	f800283a 	ret

0402ed1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402ed1c:	defffe04 	addi	sp,sp,-8
 402ed20:	dfc00115 	stw	ra,4(sp)
 402ed24:	df000015 	stw	fp,0(sp)
 402ed28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402ed2c:	d0a00b17 	ldw	r2,-32724(gp)
 402ed30:	10000326 	beq	r2,zero,402ed40 <alt_get_errno+0x24>
 402ed34:	d0a00b17 	ldw	r2,-32724(gp)
 402ed38:	103ee83a 	callr	r2
 402ed3c:	00000106 	br	402ed44 <alt_get_errno+0x28>
 402ed40:	d0a73304 	addi	r2,gp,-25396
}
 402ed44:	e037883a 	mov	sp,fp
 402ed48:	dfc00117 	ldw	ra,4(sp)
 402ed4c:	df000017 	ldw	fp,0(sp)
 402ed50:	dec00204 	addi	sp,sp,8
 402ed54:	f800283a 	ret

0402ed58 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402ed58:	defff904 	addi	sp,sp,-28
 402ed5c:	dfc00615 	stw	ra,24(sp)
 402ed60:	df000515 	stw	fp,20(sp)
 402ed64:	df000504 	addi	fp,sp,20
 402ed68:	e13ffd15 	stw	r4,-12(fp)
 402ed6c:	e17ffe15 	stw	r5,-8(fp)
 402ed70:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402ed74:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402ed78:	e0bffd17 	ldw	r2,-12(fp)
 402ed7c:	10000616 	blt	r2,zero,402ed98 <lseek+0x40>
 402ed80:	e0bffd17 	ldw	r2,-12(fp)
 402ed84:	10c00324 	muli	r3,r2,12
 402ed88:	008100f4 	movhi	r2,1027
 402ed8c:	10909504 	addi	r2,r2,16980
 402ed90:	1885883a 	add	r2,r3,r2
 402ed94:	00000106 	br	402ed9c <lseek+0x44>
 402ed98:	0005883a 	mov	r2,zero
 402ed9c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402eda0:	e0bffc17 	ldw	r2,-16(fp)
 402eda4:	10001026 	beq	r2,zero,402ede8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402eda8:	e0bffc17 	ldw	r2,-16(fp)
 402edac:	10800017 	ldw	r2,0(r2)
 402edb0:	10800717 	ldw	r2,28(r2)
 402edb4:	10000926 	beq	r2,zero,402eddc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402edb8:	e0bffc17 	ldw	r2,-16(fp)
 402edbc:	10800017 	ldw	r2,0(r2)
 402edc0:	10800717 	ldw	r2,28(r2)
 402edc4:	e1bfff17 	ldw	r6,-4(fp)
 402edc8:	e17ffe17 	ldw	r5,-8(fp)
 402edcc:	e13ffc17 	ldw	r4,-16(fp)
 402edd0:	103ee83a 	callr	r2
 402edd4:	e0bffb15 	stw	r2,-20(fp)
 402edd8:	00000506 	br	402edf0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402eddc:	00bfde84 	movi	r2,-134
 402ede0:	e0bffb15 	stw	r2,-20(fp)
 402ede4:	00000206 	br	402edf0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 402ede8:	00bfebc4 	movi	r2,-81
 402edec:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402edf0:	e0bffb17 	ldw	r2,-20(fp)
 402edf4:	1000070e 	bge	r2,zero,402ee14 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 402edf8:	402ed1c0 	call	402ed1c <alt_get_errno>
 402edfc:	1007883a 	mov	r3,r2
 402ee00:	e0bffb17 	ldw	r2,-20(fp)
 402ee04:	0085c83a 	sub	r2,zero,r2
 402ee08:	18800015 	stw	r2,0(r3)
    rc = -1;
 402ee0c:	00bfffc4 	movi	r2,-1
 402ee10:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402ee14:	e0bffb17 	ldw	r2,-20(fp)
}
 402ee18:	e037883a 	mov	sp,fp
 402ee1c:	dfc00117 	ldw	ra,4(sp)
 402ee20:	df000017 	ldw	fp,0(sp)
 402ee24:	dec00204 	addi	sp,sp,8
 402ee28:	f800283a 	ret

0402ee2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402ee2c:	defffd04 	addi	sp,sp,-12
 402ee30:	dfc00215 	stw	ra,8(sp)
 402ee34:	df000115 	stw	fp,4(sp)
 402ee38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402ee3c:	0009883a 	mov	r4,zero
 402ee40:	402f53c0 	call	402f53c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402ee44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402ee48:	402f5740 	call	402f574 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402ee4c:	018100f4 	movhi	r6,1027
 402ee50:	318df404 	addi	r6,r6,14288
 402ee54:	014100f4 	movhi	r5,1027
 402ee58:	294df404 	addi	r5,r5,14288
 402ee5c:	010100f4 	movhi	r4,1027
 402ee60:	210df404 	addi	r4,r4,14288
 402ee64:	403221c0 	call	403221c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402ee68:	4031fd40 	call	4031fd4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402ee6c:	010100f4 	movhi	r4,1027
 402ee70:	21080d04 	addi	r4,r4,8244
 402ee74:	403298c0 	call	403298c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402ee78:	d0a73517 	ldw	r2,-25388(gp)
 402ee7c:	d0e73617 	ldw	r3,-25384(gp)
 402ee80:	d1273717 	ldw	r4,-25380(gp)
 402ee84:	200d883a 	mov	r6,r4
 402ee88:	180b883a 	mov	r5,r3
 402ee8c:	1009883a 	mov	r4,r2
 402ee90:	4020f700 	call	4020f70 <main>
 402ee94:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402ee98:	01000044 	movi	r4,1
 402ee9c:	402e7a00 	call	402e7a0 <close>
  exit (result);
 402eea0:	e13fff17 	ldw	r4,-4(fp)
 402eea4:	40329a00 	call	40329a0 <exit>

0402eea8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402eea8:	defffe04 	addi	sp,sp,-8
 402eeac:	df000115 	stw	fp,4(sp)
 402eeb0:	df000104 	addi	fp,sp,4
 402eeb4:	e13fff15 	stw	r4,-4(fp)
}
 402eeb8:	0001883a 	nop
 402eebc:	e037883a 	mov	sp,fp
 402eec0:	df000017 	ldw	fp,0(sp)
 402eec4:	dec00104 	addi	sp,sp,4
 402eec8:	f800283a 	ret

0402eecc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402eecc:	defffe04 	addi	sp,sp,-8
 402eed0:	df000115 	stw	fp,4(sp)
 402eed4:	df000104 	addi	fp,sp,4
 402eed8:	e13fff15 	stw	r4,-4(fp)
}
 402eedc:	0001883a 	nop
 402eee0:	e037883a 	mov	sp,fp
 402eee4:	df000017 	ldw	fp,0(sp)
 402eee8:	dec00104 	addi	sp,sp,4
 402eeec:	f800283a 	ret

0402eef0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 402eef0:	defff204 	addi	sp,sp,-56
 402eef4:	dfc00a15 	stw	ra,40(sp)
 402eef8:	df000915 	stw	fp,36(sp)
 402eefc:	df000904 	addi	fp,sp,36
 402ef00:	e13fff15 	stw	r4,-4(fp)
 402ef04:	e1400215 	stw	r5,8(fp)
 402ef08:	e1800315 	stw	r6,12(fp)
 402ef0c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 402ef10:	e0800204 	addi	r2,fp,8
 402ef14:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 402ef18:	e0bfff17 	ldw	r2,-4(fp)
 402ef1c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 402ef20:	00006f06 	br	402f0e0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 402ef24:	e0bff807 	ldb	r2,-32(fp)
 402ef28:	10800960 	cmpeqi	r2,r2,37
 402ef2c:	1000041e 	bne	r2,zero,402ef40 <alt_printf+0x50>
        {
            alt_putchar(c);
 402ef30:	e0bff807 	ldb	r2,-32(fp)
 402ef34:	1009883a 	mov	r4,r2
 402ef38:	402f11c0 	call	402f11c <alt_putchar>
 402ef3c:	00006806 	br	402f0e0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 402ef40:	e0bff717 	ldw	r2,-36(fp)
 402ef44:	10c00044 	addi	r3,r2,1
 402ef48:	e0fff715 	stw	r3,-36(fp)
 402ef4c:	10800003 	ldbu	r2,0(r2)
 402ef50:	e0bff805 	stb	r2,-32(fp)
 402ef54:	e0bff807 	ldb	r2,-32(fp)
 402ef58:	10006926 	beq	r2,zero,402f100 <alt_printf+0x210>
            {
                if (c == '%')
 402ef5c:	e0bff807 	ldb	r2,-32(fp)
 402ef60:	10800958 	cmpnei	r2,r2,37
 402ef64:	1000041e 	bne	r2,zero,402ef78 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 402ef68:	e0bff807 	ldb	r2,-32(fp)
 402ef6c:	1009883a 	mov	r4,r2
 402ef70:	402f11c0 	call	402f11c <alt_putchar>
 402ef74:	00005a06 	br	402f0e0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 402ef78:	e0bff807 	ldb	r2,-32(fp)
 402ef7c:	108018d8 	cmpnei	r2,r2,99
 402ef80:	1000081e 	bne	r2,zero,402efa4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 402ef84:	e0bffe17 	ldw	r2,-8(fp)
 402ef88:	10c00104 	addi	r3,r2,4
 402ef8c:	e0fffe15 	stw	r3,-8(fp)
 402ef90:	10800017 	ldw	r2,0(r2)
 402ef94:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 402ef98:	e13ffd17 	ldw	r4,-12(fp)
 402ef9c:	402f11c0 	call	402f11c <alt_putchar>
 402efa0:	00004f06 	br	402f0e0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
 402efa4:	e0bff807 	ldb	r2,-32(fp)
 402efa8:	10801e18 	cmpnei	r2,r2,120
 402efac:	1000341e 	bne	r2,zero,402f080 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 402efb0:	e0bffe17 	ldw	r2,-8(fp)
 402efb4:	10c00104 	addi	r3,r2,4
 402efb8:	e0fffe15 	stw	r3,-8(fp)
 402efbc:	10800017 	ldw	r2,0(r2)
 402efc0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 402efc4:	e0bffb17 	ldw	r2,-20(fp)
 402efc8:	1000031e 	bne	r2,zero,402efd8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 402efcc:	01000c04 	movi	r4,48
 402efd0:	402f11c0 	call	402f11c <alt_putchar>
                        continue;
 402efd4:	00004206 	br	402f0e0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 402efd8:	00800704 	movi	r2,28
 402efdc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 402efe0:	00000306 	br	402eff0 <alt_printf+0x100>
                        digit_shift -= 4;
 402efe4:	e0bff917 	ldw	r2,-28(fp)
 402efe8:	10bfff04 	addi	r2,r2,-4
 402efec:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 402eff0:	00c003c4 	movi	r3,15
 402eff4:	e0bff917 	ldw	r2,-28(fp)
 402eff8:	1884983a 	sll	r2,r3,r2
 402effc:	1007883a 	mov	r3,r2
 402f000:	e0bffb17 	ldw	r2,-20(fp)
 402f004:	1884703a 	and	r2,r3,r2
 402f008:	103ff626 	beq	r2,zero,402efe4 <__alt_data_end+0xfffeefe4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 402f00c:	00001906 	br	402f074 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 402f010:	00c003c4 	movi	r3,15
 402f014:	e0bff917 	ldw	r2,-28(fp)
 402f018:	1884983a 	sll	r2,r3,r2
 402f01c:	1007883a 	mov	r3,r2
 402f020:	e0bffb17 	ldw	r2,-20(fp)
 402f024:	1886703a 	and	r3,r3,r2
 402f028:	e0bff917 	ldw	r2,-28(fp)
 402f02c:	1884d83a 	srl	r2,r3,r2
 402f030:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 402f034:	e0bffc17 	ldw	r2,-16(fp)
 402f038:	108002a8 	cmpgeui	r2,r2,10
 402f03c:	1000041e 	bne	r2,zero,402f050 <alt_printf+0x160>
                            c = '0' + digit;
 402f040:	e0bffc17 	ldw	r2,-16(fp)
 402f044:	10800c04 	addi	r2,r2,48
 402f048:	e0bff805 	stb	r2,-32(fp)
 402f04c:	00000306 	br	402f05c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 402f050:	e0bffc17 	ldw	r2,-16(fp)
 402f054:	108015c4 	addi	r2,r2,87
 402f058:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 402f05c:	e0bff807 	ldb	r2,-32(fp)
 402f060:	1009883a 	mov	r4,r2
 402f064:	402f11c0 	call	402f11c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 402f068:	e0bff917 	ldw	r2,-28(fp)
 402f06c:	10bfff04 	addi	r2,r2,-4
 402f070:	e0bff915 	stw	r2,-28(fp)
 402f074:	e0bff917 	ldw	r2,-28(fp)
 402f078:	103fe50e 	bge	r2,zero,402f010 <__alt_data_end+0xfffef010>
 402f07c:	00001806 	br	402f0e0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 402f080:	e0bff807 	ldb	r2,-32(fp)
 402f084:	10801cd8 	cmpnei	r2,r2,115
 402f088:	1000151e 	bne	r2,zero,402f0e0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 402f08c:	e0bffe17 	ldw	r2,-8(fp)
 402f090:	10c00104 	addi	r3,r2,4
 402f094:	e0fffe15 	stw	r3,-8(fp)
 402f098:	10800017 	ldw	r2,0(r2)
 402f09c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 402f0a0:	00000906 	br	402f0c8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 402f0a4:	e0bffa17 	ldw	r2,-24(fp)
 402f0a8:	10c00044 	addi	r3,r2,1
 402f0ac:	e0fffa15 	stw	r3,-24(fp)
 402f0b0:	10800003 	ldbu	r2,0(r2)
 402f0b4:	10803fcc 	andi	r2,r2,255
 402f0b8:	1080201c 	xori	r2,r2,128
 402f0bc:	10bfe004 	addi	r2,r2,-128
 402f0c0:	1009883a 	mov	r4,r2
 402f0c4:	402f11c0 	call	402f11c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 402f0c8:	e0bffa17 	ldw	r2,-24(fp)
 402f0cc:	10800003 	ldbu	r2,0(r2)
 402f0d0:	10803fcc 	andi	r2,r2,255
 402f0d4:	1080201c 	xori	r2,r2,128
 402f0d8:	10bfe004 	addi	r2,r2,-128
 402f0dc:	103ff11e 	bne	r2,zero,402f0a4 <__alt_data_end+0xfffef0a4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 402f0e0:	e0bff717 	ldw	r2,-36(fp)
 402f0e4:	10c00044 	addi	r3,r2,1
 402f0e8:	e0fff715 	stw	r3,-36(fp)
 402f0ec:	10800003 	ldbu	r2,0(r2)
 402f0f0:	e0bff805 	stb	r2,-32(fp)
 402f0f4:	e0bff807 	ldb	r2,-32(fp)
 402f0f8:	103f8a1e 	bne	r2,zero,402ef24 <__alt_data_end+0xfffeef24>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 402f0fc:	00000106 	br	402f104 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 402f100:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 402f104:	0001883a 	nop
 402f108:	e037883a 	mov	sp,fp
 402f10c:	dfc00117 	ldw	ra,4(sp)
 402f110:	df000017 	ldw	fp,0(sp)
 402f114:	dec00504 	addi	sp,sp,20
 402f118:	f800283a 	ret

0402f11c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 402f11c:	defffd04 	addi	sp,sp,-12
 402f120:	dfc00215 	stw	ra,8(sp)
 402f124:	df000115 	stw	fp,4(sp)
 402f128:	df000104 	addi	fp,sp,4
 402f12c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 402f130:	d0a00117 	ldw	r2,-32764(gp)
 402f134:	10800217 	ldw	r2,8(r2)
 402f138:	100b883a 	mov	r5,r2
 402f13c:	e13fff17 	ldw	r4,-4(fp)
 402f140:	4032af40 	call	4032af4 <putc>
#endif
#endif
}
 402f144:	e037883a 	mov	sp,fp
 402f148:	dfc00117 	ldw	ra,4(sp)
 402f14c:	df000017 	ldw	fp,0(sp)
 402f150:	dec00204 	addi	sp,sp,8
 402f154:	f800283a 	ret

0402f158 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f158:	defffe04 	addi	sp,sp,-8
 402f15c:	dfc00115 	stw	ra,4(sp)
 402f160:	df000015 	stw	fp,0(sp)
 402f164:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f168:	d0a00b17 	ldw	r2,-32724(gp)
 402f16c:	10000326 	beq	r2,zero,402f17c <alt_get_errno+0x24>
 402f170:	d0a00b17 	ldw	r2,-32724(gp)
 402f174:	103ee83a 	callr	r2
 402f178:	00000106 	br	402f180 <alt_get_errno+0x28>
 402f17c:	d0a73304 	addi	r2,gp,-25396
}
 402f180:	e037883a 	mov	sp,fp
 402f184:	dfc00117 	ldw	ra,4(sp)
 402f188:	df000017 	ldw	fp,0(sp)
 402f18c:	dec00204 	addi	sp,sp,8
 402f190:	f800283a 	ret

0402f194 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402f194:	defff904 	addi	sp,sp,-28
 402f198:	dfc00615 	stw	ra,24(sp)
 402f19c:	df000515 	stw	fp,20(sp)
 402f1a0:	df000504 	addi	fp,sp,20
 402f1a4:	e13ffd15 	stw	r4,-12(fp)
 402f1a8:	e17ffe15 	stw	r5,-8(fp)
 402f1ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402f1b0:	e0bffd17 	ldw	r2,-12(fp)
 402f1b4:	10000616 	blt	r2,zero,402f1d0 <read+0x3c>
 402f1b8:	e0bffd17 	ldw	r2,-12(fp)
 402f1bc:	10c00324 	muli	r3,r2,12
 402f1c0:	008100f4 	movhi	r2,1027
 402f1c4:	10909504 	addi	r2,r2,16980
 402f1c8:	1885883a 	add	r2,r3,r2
 402f1cc:	00000106 	br	402f1d4 <read+0x40>
 402f1d0:	0005883a 	mov	r2,zero
 402f1d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402f1d8:	e0bffb17 	ldw	r2,-20(fp)
 402f1dc:	10002226 	beq	r2,zero,402f268 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402f1e0:	e0bffb17 	ldw	r2,-20(fp)
 402f1e4:	10800217 	ldw	r2,8(r2)
 402f1e8:	108000cc 	andi	r2,r2,3
 402f1ec:	10800060 	cmpeqi	r2,r2,1
 402f1f0:	1000181e 	bne	r2,zero,402f254 <read+0xc0>
        (fd->dev->read))
 402f1f4:	e0bffb17 	ldw	r2,-20(fp)
 402f1f8:	10800017 	ldw	r2,0(r2)
 402f1fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402f200:	10001426 	beq	r2,zero,402f254 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402f204:	e0bffb17 	ldw	r2,-20(fp)
 402f208:	10800017 	ldw	r2,0(r2)
 402f20c:	10800517 	ldw	r2,20(r2)
 402f210:	e0ffff17 	ldw	r3,-4(fp)
 402f214:	180d883a 	mov	r6,r3
 402f218:	e17ffe17 	ldw	r5,-8(fp)
 402f21c:	e13ffb17 	ldw	r4,-20(fp)
 402f220:	103ee83a 	callr	r2
 402f224:	e0bffc15 	stw	r2,-16(fp)
 402f228:	e0bffc17 	ldw	r2,-16(fp)
 402f22c:	1000070e 	bge	r2,zero,402f24c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 402f230:	402f1580 	call	402f158 <alt_get_errno>
 402f234:	1007883a 	mov	r3,r2
 402f238:	e0bffc17 	ldw	r2,-16(fp)
 402f23c:	0085c83a 	sub	r2,zero,r2
 402f240:	18800015 	stw	r2,0(r3)
          return -1;
 402f244:	00bfffc4 	movi	r2,-1
 402f248:	00000c06 	br	402f27c <read+0xe8>
        }
        return rval;
 402f24c:	e0bffc17 	ldw	r2,-16(fp)
 402f250:	00000a06 	br	402f27c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402f254:	402f1580 	call	402f158 <alt_get_errno>
 402f258:	1007883a 	mov	r3,r2
 402f25c:	00800344 	movi	r2,13
 402f260:	18800015 	stw	r2,0(r3)
 402f264:	00000406 	br	402f278 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402f268:	402f1580 	call	402f158 <alt_get_errno>
 402f26c:	1007883a 	mov	r3,r2
 402f270:	00801444 	movi	r2,81
 402f274:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402f278:	00bfffc4 	movi	r2,-1
}
 402f27c:	e037883a 	mov	sp,fp
 402f280:	dfc00117 	ldw	ra,4(sp)
 402f284:	df000017 	ldw	fp,0(sp)
 402f288:	dec00204 	addi	sp,sp,8
 402f28c:	f800283a 	ret

0402f290 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402f290:	defffe04 	addi	sp,sp,-8
 402f294:	df000115 	stw	fp,4(sp)
 402f298:	df000104 	addi	fp,sp,4
 402f29c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 402f2a0:	e0bfff17 	ldw	r2,-4(fp)
 402f2a4:	108000d0 	cmplti	r2,r2,3
 402f2a8:	10000d1e 	bne	r2,zero,402f2e0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402f2ac:	008100f4 	movhi	r2,1027
 402f2b0:	10909504 	addi	r2,r2,16980
 402f2b4:	e0ffff17 	ldw	r3,-4(fp)
 402f2b8:	18c00324 	muli	r3,r3,12
 402f2bc:	10c5883a 	add	r2,r2,r3
 402f2c0:	10800204 	addi	r2,r2,8
 402f2c4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402f2c8:	008100f4 	movhi	r2,1027
 402f2cc:	10909504 	addi	r2,r2,16980
 402f2d0:	e0ffff17 	ldw	r3,-4(fp)
 402f2d4:	18c00324 	muli	r3,r3,12
 402f2d8:	10c5883a 	add	r2,r2,r3
 402f2dc:	10000015 	stw	zero,0(r2)
  }
}
 402f2e0:	0001883a 	nop
 402f2e4:	e037883a 	mov	sp,fp
 402f2e8:	df000017 	ldw	fp,0(sp)
 402f2ec:	dec00104 	addi	sp,sp,4
 402f2f0:	f800283a 	ret

0402f2f4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402f2f4:	defff904 	addi	sp,sp,-28
 402f2f8:	df000615 	stw	fp,24(sp)
 402f2fc:	df000604 	addi	fp,sp,24
 402f300:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f304:	0005303a 	rdctl	r2,status
 402f308:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f30c:	e0fffe17 	ldw	r3,-8(fp)
 402f310:	00bfff84 	movi	r2,-2
 402f314:	1884703a 	and	r2,r3,r2
 402f318:	1001703a 	wrctl	status,r2
  
  return context;
 402f31c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402f320:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402f324:	d0a00d17 	ldw	r2,-32716(gp)
 402f328:	10c000c4 	addi	r3,r2,3
 402f32c:	00bfff04 	movi	r2,-4
 402f330:	1884703a 	and	r2,r3,r2
 402f334:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402f338:	d0e00d17 	ldw	r3,-32716(gp)
 402f33c:	e0bfff17 	ldw	r2,-4(fp)
 402f340:	1887883a 	add	r3,r3,r2
 402f344:	00810134 	movhi	r2,1028
 402f348:	10800004 	addi	r2,r2,0
 402f34c:	10c0062e 	bgeu	r2,r3,402f368 <sbrk+0x74>
 402f350:	e0bffb17 	ldw	r2,-20(fp)
 402f354:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f358:	e0bffa17 	ldw	r2,-24(fp)
 402f35c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402f360:	00bfffc4 	movi	r2,-1
 402f364:	00000b06 	br	402f394 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402f368:	d0a00d17 	ldw	r2,-32716(gp)
 402f36c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402f370:	d0e00d17 	ldw	r3,-32716(gp)
 402f374:	e0bfff17 	ldw	r2,-4(fp)
 402f378:	1885883a 	add	r2,r3,r2
 402f37c:	d0a00d15 	stw	r2,-32716(gp)
 402f380:	e0bffb17 	ldw	r2,-20(fp)
 402f384:	e0bffc15 	stw	r2,-16(fp)
 402f388:	e0bffc17 	ldw	r2,-16(fp)
 402f38c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402f390:	e0bffd17 	ldw	r2,-12(fp)
} 
 402f394:	e037883a 	mov	sp,fp
 402f398:	df000017 	ldw	fp,0(sp)
 402f39c:	dec00104 	addi	sp,sp,4
 402f3a0:	f800283a 	ret

0402f3a4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402f3a4:	defffd04 	addi	sp,sp,-12
 402f3a8:	dfc00215 	stw	ra,8(sp)
 402f3ac:	df000115 	stw	fp,4(sp)
 402f3b0:	df000104 	addi	fp,sp,4
 402f3b4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402f3b8:	e13fff17 	ldw	r4,-4(fp)
 402f3bc:	4031d9c0 	call	4031d9c <alt_busy_sleep>
}
 402f3c0:	e037883a 	mov	sp,fp
 402f3c4:	dfc00117 	ldw	ra,4(sp)
 402f3c8:	df000017 	ldw	fp,0(sp)
 402f3cc:	dec00204 	addi	sp,sp,8
 402f3d0:	f800283a 	ret

0402f3d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f3d4:	defffe04 	addi	sp,sp,-8
 402f3d8:	dfc00115 	stw	ra,4(sp)
 402f3dc:	df000015 	stw	fp,0(sp)
 402f3e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f3e4:	d0a00b17 	ldw	r2,-32724(gp)
 402f3e8:	10000326 	beq	r2,zero,402f3f8 <alt_get_errno+0x24>
 402f3ec:	d0a00b17 	ldw	r2,-32724(gp)
 402f3f0:	103ee83a 	callr	r2
 402f3f4:	00000106 	br	402f3fc <alt_get_errno+0x28>
 402f3f8:	d0a73304 	addi	r2,gp,-25396
}
 402f3fc:	e037883a 	mov	sp,fp
 402f400:	dfc00117 	ldw	ra,4(sp)
 402f404:	df000017 	ldw	fp,0(sp)
 402f408:	dec00204 	addi	sp,sp,8
 402f40c:	f800283a 	ret

0402f410 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402f410:	defff904 	addi	sp,sp,-28
 402f414:	dfc00615 	stw	ra,24(sp)
 402f418:	df000515 	stw	fp,20(sp)
 402f41c:	df000504 	addi	fp,sp,20
 402f420:	e13ffd15 	stw	r4,-12(fp)
 402f424:	e17ffe15 	stw	r5,-8(fp)
 402f428:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402f42c:	e0bffd17 	ldw	r2,-12(fp)
 402f430:	10000616 	blt	r2,zero,402f44c <write+0x3c>
 402f434:	e0bffd17 	ldw	r2,-12(fp)
 402f438:	10c00324 	muli	r3,r2,12
 402f43c:	008100f4 	movhi	r2,1027
 402f440:	10909504 	addi	r2,r2,16980
 402f444:	1885883a 	add	r2,r3,r2
 402f448:	00000106 	br	402f450 <write+0x40>
 402f44c:	0005883a 	mov	r2,zero
 402f450:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402f454:	e0bffb17 	ldw	r2,-20(fp)
 402f458:	10002126 	beq	r2,zero,402f4e0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402f45c:	e0bffb17 	ldw	r2,-20(fp)
 402f460:	10800217 	ldw	r2,8(r2)
 402f464:	108000cc 	andi	r2,r2,3
 402f468:	10001826 	beq	r2,zero,402f4cc <write+0xbc>
 402f46c:	e0bffb17 	ldw	r2,-20(fp)
 402f470:	10800017 	ldw	r2,0(r2)
 402f474:	10800617 	ldw	r2,24(r2)
 402f478:	10001426 	beq	r2,zero,402f4cc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402f47c:	e0bffb17 	ldw	r2,-20(fp)
 402f480:	10800017 	ldw	r2,0(r2)
 402f484:	10800617 	ldw	r2,24(r2)
 402f488:	e0ffff17 	ldw	r3,-4(fp)
 402f48c:	180d883a 	mov	r6,r3
 402f490:	e17ffe17 	ldw	r5,-8(fp)
 402f494:	e13ffb17 	ldw	r4,-20(fp)
 402f498:	103ee83a 	callr	r2
 402f49c:	e0bffc15 	stw	r2,-16(fp)
 402f4a0:	e0bffc17 	ldw	r2,-16(fp)
 402f4a4:	1000070e 	bge	r2,zero,402f4c4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 402f4a8:	402f3d40 	call	402f3d4 <alt_get_errno>
 402f4ac:	1007883a 	mov	r3,r2
 402f4b0:	e0bffc17 	ldw	r2,-16(fp)
 402f4b4:	0085c83a 	sub	r2,zero,r2
 402f4b8:	18800015 	stw	r2,0(r3)
        return -1;
 402f4bc:	00bfffc4 	movi	r2,-1
 402f4c0:	00000c06 	br	402f4f4 <write+0xe4>
      }
      return rval;
 402f4c4:	e0bffc17 	ldw	r2,-16(fp)
 402f4c8:	00000a06 	br	402f4f4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402f4cc:	402f3d40 	call	402f3d4 <alt_get_errno>
 402f4d0:	1007883a 	mov	r3,r2
 402f4d4:	00800344 	movi	r2,13
 402f4d8:	18800015 	stw	r2,0(r3)
 402f4dc:	00000406 	br	402f4f0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402f4e0:	402f3d40 	call	402f3d4 <alt_get_errno>
 402f4e4:	1007883a 	mov	r3,r2
 402f4e8:	00801444 	movi	r2,81
 402f4ec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402f4f0:	00bfffc4 	movi	r2,-1
}
 402f4f4:	e037883a 	mov	sp,fp
 402f4f8:	dfc00117 	ldw	ra,4(sp)
 402f4fc:	df000017 	ldw	fp,0(sp)
 402f500:	dec00204 	addi	sp,sp,8
 402f504:	f800283a 	ret

0402f508 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402f508:	defffd04 	addi	sp,sp,-12
 402f50c:	dfc00215 	stw	ra,8(sp)
 402f510:	df000115 	stw	fp,4(sp)
 402f514:	df000104 	addi	fp,sp,4
 402f518:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402f51c:	d1600804 	addi	r5,gp,-32736
 402f520:	e13fff17 	ldw	r4,-4(fp)
 402f524:	4031f300 	call	4031f30 <alt_dev_llist_insert>
}
 402f528:	e037883a 	mov	sp,fp
 402f52c:	dfc00117 	ldw	ra,4(sp)
 402f530:	df000017 	ldw	fp,0(sp)
 402f534:	dec00204 	addi	sp,sp,8
 402f538:	f800283a 	ret

0402f53c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402f53c:	defffd04 	addi	sp,sp,-12
 402f540:	dfc00215 	stw	ra,8(sp)
 402f544:	df000115 	stw	fp,4(sp)
 402f548:	df000104 	addi	fp,sp,4
 402f54c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 402f550:	40326900 	call	4032690 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402f554:	00800044 	movi	r2,1
 402f558:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402f55c:	0001883a 	nop
 402f560:	e037883a 	mov	sp,fp
 402f564:	dfc00117 	ldw	ra,4(sp)
 402f568:	df000017 	ldw	fp,0(sp)
 402f56c:	dec00204 	addi	sp,sp,8
 402f570:	f800283a 	ret

0402f574 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402f574:	defffe04 	addi	sp,sp,-8
 402f578:	dfc00115 	stw	ra,4(sp)
 402f57c:	df000015 	stw	fp,0(sp)
 402f580:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 402f584:	018000c4 	movi	r6,3
 402f588:	000b883a 	mov	r5,zero
 402f58c:	010100f4 	movhi	r4,1027
 402f590:	2110ff04 	addi	r4,r4,17404
 402f594:	402f7880 	call	402f788 <altera_avalon_jtag_uart_init>
 402f598:	010100f4 	movhi	r4,1027
 402f59c:	2110f504 	addi	r4,r4,17364
 402f5a0:	402f5080 	call	402f508 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 402f5a4:	01bfffc4 	movi	r6,-1
 402f5a8:	000b883a 	mov	r5,zero
 402f5ac:	010100f4 	movhi	r4,1027
 402f5b0:	21150d04 	addi	r4,r4,21556
 402f5b4:	40303740 	call	4030374 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_1, mailbox_simple_1);
 402f5b8:	01800044 	movi	r6,1
 402f5bc:	000b883a 	mov	r5,zero
 402f5c0:	010100f4 	movhi	r4,1027
 402f5c4:	21151f04 	addi	r4,r4,21628
 402f5c8:	40303740 	call	4030374 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 402f5cc:	00c00044 	movi	r3,1
 402f5d0:	00810134 	movhi	r2,1028
 402f5d4:	10840004 	addi	r2,r2,4096
 402f5d8:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 402f5dc:	010100f4 	movhi	r4,1027
 402f5e0:	21153104 	addi	r4,r4,21700
 402f5e4:	402f5080 	call	402f508 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 402f5e8:	010100f4 	movhi	r4,1027
 402f5ec:	21153d04 	addi	r4,r4,21748
 402f5f0:	402f5080 	call	402f508 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 402f5f4:	010100f4 	movhi	r4,1027
 402f5f8:	21154904 	addi	r4,r4,21796
 402f5fc:	402f5080 	call	402f508 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 402f600:	010100f4 	movhi	r4,1027
 402f604:	21155404 	addi	r4,r4,21840
 402f608:	402f5080 	call	402f508 <alt_dev_reg>
}
 402f60c:	0001883a 	nop
 402f610:	e037883a 	mov	sp,fp
 402f614:	dfc00117 	ldw	ra,4(sp)
 402f618:	df000017 	ldw	fp,0(sp)
 402f61c:	dec00204 	addi	sp,sp,8
 402f620:	f800283a 	ret

0402f624 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402f624:	defffa04 	addi	sp,sp,-24
 402f628:	dfc00515 	stw	ra,20(sp)
 402f62c:	df000415 	stw	fp,16(sp)
 402f630:	df000404 	addi	fp,sp,16
 402f634:	e13ffd15 	stw	r4,-12(fp)
 402f638:	e17ffe15 	stw	r5,-8(fp)
 402f63c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402f640:	e0bffd17 	ldw	r2,-12(fp)
 402f644:	10800017 	ldw	r2,0(r2)
 402f648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402f64c:	e0bffc17 	ldw	r2,-16(fp)
 402f650:	10c00a04 	addi	r3,r2,40
 402f654:	e0bffd17 	ldw	r2,-12(fp)
 402f658:	10800217 	ldw	r2,8(r2)
 402f65c:	100f883a 	mov	r7,r2
 402f660:	e1bfff17 	ldw	r6,-4(fp)
 402f664:	e17ffe17 	ldw	r5,-8(fp)
 402f668:	1809883a 	mov	r4,r3
 402f66c:	402fc440 	call	402fc44 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402f670:	e037883a 	mov	sp,fp
 402f674:	dfc00117 	ldw	ra,4(sp)
 402f678:	df000017 	ldw	fp,0(sp)
 402f67c:	dec00204 	addi	sp,sp,8
 402f680:	f800283a 	ret

0402f684 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402f684:	defffa04 	addi	sp,sp,-24
 402f688:	dfc00515 	stw	ra,20(sp)
 402f68c:	df000415 	stw	fp,16(sp)
 402f690:	df000404 	addi	fp,sp,16
 402f694:	e13ffd15 	stw	r4,-12(fp)
 402f698:	e17ffe15 	stw	r5,-8(fp)
 402f69c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402f6a0:	e0bffd17 	ldw	r2,-12(fp)
 402f6a4:	10800017 	ldw	r2,0(r2)
 402f6a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402f6ac:	e0bffc17 	ldw	r2,-16(fp)
 402f6b0:	10c00a04 	addi	r3,r2,40
 402f6b4:	e0bffd17 	ldw	r2,-12(fp)
 402f6b8:	10800217 	ldw	r2,8(r2)
 402f6bc:	100f883a 	mov	r7,r2
 402f6c0:	e1bfff17 	ldw	r6,-4(fp)
 402f6c4:	e17ffe17 	ldw	r5,-8(fp)
 402f6c8:	1809883a 	mov	r4,r3
 402f6cc:	402fe600 	call	402fe60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402f6d0:	e037883a 	mov	sp,fp
 402f6d4:	dfc00117 	ldw	ra,4(sp)
 402f6d8:	df000017 	ldw	fp,0(sp)
 402f6dc:	dec00204 	addi	sp,sp,8
 402f6e0:	f800283a 	ret

0402f6e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402f6e4:	defffc04 	addi	sp,sp,-16
 402f6e8:	dfc00315 	stw	ra,12(sp)
 402f6ec:	df000215 	stw	fp,8(sp)
 402f6f0:	df000204 	addi	fp,sp,8
 402f6f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402f6f8:	e0bfff17 	ldw	r2,-4(fp)
 402f6fc:	10800017 	ldw	r2,0(r2)
 402f700:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402f704:	e0bffe17 	ldw	r2,-8(fp)
 402f708:	10c00a04 	addi	r3,r2,40
 402f70c:	e0bfff17 	ldw	r2,-4(fp)
 402f710:	10800217 	ldw	r2,8(r2)
 402f714:	100b883a 	mov	r5,r2
 402f718:	1809883a 	mov	r4,r3
 402f71c:	402faec0 	call	402faec <altera_avalon_jtag_uart_close>
}
 402f720:	e037883a 	mov	sp,fp
 402f724:	dfc00117 	ldw	ra,4(sp)
 402f728:	df000017 	ldw	fp,0(sp)
 402f72c:	dec00204 	addi	sp,sp,8
 402f730:	f800283a 	ret

0402f734 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402f734:	defffa04 	addi	sp,sp,-24
 402f738:	dfc00515 	stw	ra,20(sp)
 402f73c:	df000415 	stw	fp,16(sp)
 402f740:	df000404 	addi	fp,sp,16
 402f744:	e13ffd15 	stw	r4,-12(fp)
 402f748:	e17ffe15 	stw	r5,-8(fp)
 402f74c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402f750:	e0bffd17 	ldw	r2,-12(fp)
 402f754:	10800017 	ldw	r2,0(r2)
 402f758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402f75c:	e0bffc17 	ldw	r2,-16(fp)
 402f760:	10800a04 	addi	r2,r2,40
 402f764:	e1bfff17 	ldw	r6,-4(fp)
 402f768:	e17ffe17 	ldw	r5,-8(fp)
 402f76c:	1009883a 	mov	r4,r2
 402f770:	402fb540 	call	402fb54 <altera_avalon_jtag_uart_ioctl>
}
 402f774:	e037883a 	mov	sp,fp
 402f778:	dfc00117 	ldw	ra,4(sp)
 402f77c:	df000017 	ldw	fp,0(sp)
 402f780:	dec00204 	addi	sp,sp,8
 402f784:	f800283a 	ret

0402f788 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402f788:	defffb04 	addi	sp,sp,-20
 402f78c:	dfc00415 	stw	ra,16(sp)
 402f790:	df000315 	stw	fp,12(sp)
 402f794:	df000304 	addi	fp,sp,12
 402f798:	e13ffd15 	stw	r4,-12(fp)
 402f79c:	e17ffe15 	stw	r5,-8(fp)
 402f7a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402f7a4:	e0bffd17 	ldw	r2,-12(fp)
 402f7a8:	00c00044 	movi	r3,1
 402f7ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402f7b0:	e0bffd17 	ldw	r2,-12(fp)
 402f7b4:	10800017 	ldw	r2,0(r2)
 402f7b8:	10800104 	addi	r2,r2,4
 402f7bc:	1007883a 	mov	r3,r2
 402f7c0:	e0bffd17 	ldw	r2,-12(fp)
 402f7c4:	10800817 	ldw	r2,32(r2)
 402f7c8:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 402f7cc:	e0bfff17 	ldw	r2,-4(fp)
 402f7d0:	018100f4 	movhi	r6,1027
 402f7d4:	31be0f04 	addi	r6,r6,-1988
 402f7d8:	e17ffd17 	ldw	r5,-12(fp)
 402f7dc:	1009883a 	mov	r4,r2
 402f7e0:	402e9d00 	call	402e9d0 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402f7e4:	e0bffd17 	ldw	r2,-12(fp)
 402f7e8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402f7ec:	e0bffd17 	ldw	r2,-12(fp)
 402f7f0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402f7f4:	d0e73817 	ldw	r3,-25376(gp)
 402f7f8:	e1fffd17 	ldw	r7,-12(fp)
 402f7fc:	018100f4 	movhi	r6,1027
 402f800:	31be9304 	addi	r6,r6,-1460
 402f804:	180b883a 	mov	r5,r3
 402f808:	1009883a 	mov	r4,r2
 402f80c:	4031c700 	call	4031c70 <alt_alarm_start>
 402f810:	1000040e 	bge	r2,zero,402f824 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402f814:	e0fffd17 	ldw	r3,-12(fp)
 402f818:	00a00034 	movhi	r2,32768
 402f81c:	10bfffc4 	addi	r2,r2,-1
 402f820:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402f824:	0001883a 	nop
 402f828:	e037883a 	mov	sp,fp
 402f82c:	dfc00117 	ldw	ra,4(sp)
 402f830:	df000017 	ldw	fp,0(sp)
 402f834:	dec00204 	addi	sp,sp,8
 402f838:	f800283a 	ret

0402f83c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402f83c:	defff704 	addi	sp,sp,-36
 402f840:	df000815 	stw	fp,32(sp)
 402f844:	df000804 	addi	fp,sp,32
 402f848:	e13ffe15 	stw	r4,-8(fp)
 402f84c:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402f850:	e0bffe17 	ldw	r2,-8(fp)
 402f854:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 402f858:	e0bffa17 	ldw	r2,-24(fp)
 402f85c:	10800017 	ldw	r2,0(r2)
 402f860:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402f864:	e0bffb17 	ldw	r2,-20(fp)
 402f868:	10800104 	addi	r2,r2,4
 402f86c:	10800037 	ldwio	r2,0(r2)
 402f870:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402f874:	e0bffc17 	ldw	r2,-16(fp)
 402f878:	1080c00c 	andi	r2,r2,768
 402f87c:	10006d26 	beq	r2,zero,402fa34 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402f880:	e0bffc17 	ldw	r2,-16(fp)
 402f884:	1080400c 	andi	r2,r2,256
 402f888:	10003526 	beq	r2,zero,402f960 <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402f88c:	00800074 	movhi	r2,1
 402f890:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402f894:	e0bffa17 	ldw	r2,-24(fp)
 402f898:	10800a17 	ldw	r2,40(r2)
 402f89c:	10800044 	addi	r2,r2,1
 402f8a0:	1081ffcc 	andi	r2,r2,2047
 402f8a4:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 402f8a8:	e0bffa17 	ldw	r2,-24(fp)
 402f8ac:	10c00b17 	ldw	r3,44(r2)
 402f8b0:	e0bffd17 	ldw	r2,-12(fp)
 402f8b4:	18801526 	beq	r3,r2,402f90c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402f8b8:	e0bffb17 	ldw	r2,-20(fp)
 402f8bc:	10800037 	ldwio	r2,0(r2)
 402f8c0:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402f8c4:	e0bff817 	ldw	r2,-32(fp)
 402f8c8:	10a0000c 	andi	r2,r2,32768
 402f8cc:	10001126 	beq	r2,zero,402f914 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402f8d0:	e0bffa17 	ldw	r2,-24(fp)
 402f8d4:	10800a17 	ldw	r2,40(r2)
 402f8d8:	e0fff817 	ldw	r3,-32(fp)
 402f8dc:	1809883a 	mov	r4,r3
 402f8e0:	e0fffa17 	ldw	r3,-24(fp)
 402f8e4:	1885883a 	add	r2,r3,r2
 402f8e8:	10800e04 	addi	r2,r2,56
 402f8ec:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402f8f0:	e0bffa17 	ldw	r2,-24(fp)
 402f8f4:	10800a17 	ldw	r2,40(r2)
 402f8f8:	10800044 	addi	r2,r2,1
 402f8fc:	10c1ffcc 	andi	r3,r2,2047
 402f900:	e0bffa17 	ldw	r2,-24(fp)
 402f904:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402f908:	003fe206 	br	402f894 <__alt_data_end+0xfffef894>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402f90c:	0001883a 	nop
 402f910:	00000106 	br	402f918 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402f914:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402f918:	e0bff817 	ldw	r2,-32(fp)
 402f91c:	10bfffec 	andhi	r2,r2,65535
 402f920:	10000f26 	beq	r2,zero,402f960 <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402f924:	e0bffa17 	ldw	r2,-24(fp)
 402f928:	10c00817 	ldw	r3,32(r2)
 402f92c:	00bfff84 	movi	r2,-2
 402f930:	1886703a 	and	r3,r3,r2
 402f934:	e0bffa17 	ldw	r2,-24(fp)
 402f938:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402f93c:	e0bffb17 	ldw	r2,-20(fp)
 402f940:	10800104 	addi	r2,r2,4
 402f944:	1007883a 	mov	r3,r2
 402f948:	e0bffa17 	ldw	r2,-24(fp)
 402f94c:	10800817 	ldw	r2,32(r2)
 402f950:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402f954:	e0bffb17 	ldw	r2,-20(fp)
 402f958:	10800104 	addi	r2,r2,4
 402f95c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402f960:	e0bffc17 	ldw	r2,-16(fp)
 402f964:	1080800c 	andi	r2,r2,512
 402f968:	103fbe26 	beq	r2,zero,402f864 <__alt_data_end+0xfffef864>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402f96c:	e0bffc17 	ldw	r2,-16(fp)
 402f970:	1004d43a 	srli	r2,r2,16
 402f974:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402f978:	00001406 	br	402f9cc <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402f97c:	e0bffb17 	ldw	r2,-20(fp)
 402f980:	e0fffa17 	ldw	r3,-24(fp)
 402f984:	18c00d17 	ldw	r3,52(r3)
 402f988:	e13ffa17 	ldw	r4,-24(fp)
 402f98c:	20c7883a 	add	r3,r4,r3
 402f990:	18c20e04 	addi	r3,r3,2104
 402f994:	18c00003 	ldbu	r3,0(r3)
 402f998:	18c03fcc 	andi	r3,r3,255
 402f99c:	18c0201c 	xori	r3,r3,128
 402f9a0:	18ffe004 	addi	r3,r3,-128
 402f9a4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402f9a8:	e0bffa17 	ldw	r2,-24(fp)
 402f9ac:	10800d17 	ldw	r2,52(r2)
 402f9b0:	10800044 	addi	r2,r2,1
 402f9b4:	10c1ffcc 	andi	r3,r2,2047
 402f9b8:	e0bffa17 	ldw	r2,-24(fp)
 402f9bc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 402f9c0:	e0bff917 	ldw	r2,-28(fp)
 402f9c4:	10bfffc4 	addi	r2,r2,-1
 402f9c8:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402f9cc:	e0bff917 	ldw	r2,-28(fp)
 402f9d0:	10000526 	beq	r2,zero,402f9e8 <altera_avalon_jtag_uart_irq+0x1ac>
 402f9d4:	e0bffa17 	ldw	r2,-24(fp)
 402f9d8:	10c00d17 	ldw	r3,52(r2)
 402f9dc:	e0bffa17 	ldw	r2,-24(fp)
 402f9e0:	10800c17 	ldw	r2,48(r2)
 402f9e4:	18bfe51e 	bne	r3,r2,402f97c <__alt_data_end+0xfffef97c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402f9e8:	e0bff917 	ldw	r2,-28(fp)
 402f9ec:	103f9d26 	beq	r2,zero,402f864 <__alt_data_end+0xfffef864>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402f9f0:	e0bffa17 	ldw	r2,-24(fp)
 402f9f4:	10c00817 	ldw	r3,32(r2)
 402f9f8:	00bfff44 	movi	r2,-3
 402f9fc:	1886703a 	and	r3,r3,r2
 402fa00:	e0bffa17 	ldw	r2,-24(fp)
 402fa04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402fa08:	e0bffa17 	ldw	r2,-24(fp)
 402fa0c:	10800017 	ldw	r2,0(r2)
 402fa10:	10800104 	addi	r2,r2,4
 402fa14:	1007883a 	mov	r3,r2
 402fa18:	e0bffa17 	ldw	r2,-24(fp)
 402fa1c:	10800817 	ldw	r2,32(r2)
 402fa20:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402fa24:	e0bffb17 	ldw	r2,-20(fp)
 402fa28:	10800104 	addi	r2,r2,4
 402fa2c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402fa30:	003f8c06 	br	402f864 <__alt_data_end+0xfffef864>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402fa34:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402fa38:	0001883a 	nop
 402fa3c:	e037883a 	mov	sp,fp
 402fa40:	df000017 	ldw	fp,0(sp)
 402fa44:	dec00104 	addi	sp,sp,4
 402fa48:	f800283a 	ret

0402fa4c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402fa4c:	defff804 	addi	sp,sp,-32
 402fa50:	df000715 	stw	fp,28(sp)
 402fa54:	df000704 	addi	fp,sp,28
 402fa58:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402fa5c:	e0bffb17 	ldw	r2,-20(fp)
 402fa60:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402fa64:	e0bff917 	ldw	r2,-28(fp)
 402fa68:	10800017 	ldw	r2,0(r2)
 402fa6c:	10800104 	addi	r2,r2,4
 402fa70:	10800037 	ldwio	r2,0(r2)
 402fa74:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402fa78:	e0bffa17 	ldw	r2,-24(fp)
 402fa7c:	1081000c 	andi	r2,r2,1024
 402fa80:	10000b26 	beq	r2,zero,402fab0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402fa84:	e0bff917 	ldw	r2,-28(fp)
 402fa88:	10800017 	ldw	r2,0(r2)
 402fa8c:	10800104 	addi	r2,r2,4
 402fa90:	1007883a 	mov	r3,r2
 402fa94:	e0bff917 	ldw	r2,-28(fp)
 402fa98:	10800817 	ldw	r2,32(r2)
 402fa9c:	10810014 	ori	r2,r2,1024
 402faa0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402faa4:	e0bff917 	ldw	r2,-28(fp)
 402faa8:	10000915 	stw	zero,36(r2)
 402faac:	00000a06 	br	402fad8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402fab0:	e0bff917 	ldw	r2,-28(fp)
 402fab4:	10c00917 	ldw	r3,36(r2)
 402fab8:	00a00034 	movhi	r2,32768
 402fabc:	10bfff04 	addi	r2,r2,-4
 402fac0:	10c00536 	bltu	r2,r3,402fad8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402fac4:	e0bff917 	ldw	r2,-28(fp)
 402fac8:	10800917 	ldw	r2,36(r2)
 402facc:	10c00044 	addi	r3,r2,1
 402fad0:	e0bff917 	ldw	r2,-28(fp)
 402fad4:	10c00915 	stw	r3,36(r2)
 402fad8:	d0a73817 	ldw	r2,-25376(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 402fadc:	e037883a 	mov	sp,fp
 402fae0:	df000017 	ldw	fp,0(sp)
 402fae4:	dec00104 	addi	sp,sp,4
 402fae8:	f800283a 	ret

0402faec <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402faec:	defffd04 	addi	sp,sp,-12
 402faf0:	df000215 	stw	fp,8(sp)
 402faf4:	df000204 	addi	fp,sp,8
 402faf8:	e13ffe15 	stw	r4,-8(fp)
 402fafc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402fb00:	00000506 	br	402fb18 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402fb04:	e0bfff17 	ldw	r2,-4(fp)
 402fb08:	1090000c 	andi	r2,r2,16384
 402fb0c:	10000226 	beq	r2,zero,402fb18 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402fb10:	00bffd44 	movi	r2,-11
 402fb14:	00000b06 	br	402fb44 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402fb18:	e0bffe17 	ldw	r2,-8(fp)
 402fb1c:	10c00d17 	ldw	r3,52(r2)
 402fb20:	e0bffe17 	ldw	r2,-8(fp)
 402fb24:	10800c17 	ldw	r2,48(r2)
 402fb28:	18800526 	beq	r3,r2,402fb40 <altera_avalon_jtag_uart_close+0x54>
 402fb2c:	e0bffe17 	ldw	r2,-8(fp)
 402fb30:	10c00917 	ldw	r3,36(r2)
 402fb34:	e0bffe17 	ldw	r2,-8(fp)
 402fb38:	10800117 	ldw	r2,4(r2)
 402fb3c:	18bff136 	bltu	r3,r2,402fb04 <__alt_data_end+0xfffefb04>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402fb40:	0005883a 	mov	r2,zero
}
 402fb44:	e037883a 	mov	sp,fp
 402fb48:	df000017 	ldw	fp,0(sp)
 402fb4c:	dec00104 	addi	sp,sp,4
 402fb50:	f800283a 	ret

0402fb54 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402fb54:	defffa04 	addi	sp,sp,-24
 402fb58:	df000515 	stw	fp,20(sp)
 402fb5c:	df000504 	addi	fp,sp,20
 402fb60:	e13ffd15 	stw	r4,-12(fp)
 402fb64:	e17ffe15 	stw	r5,-8(fp)
 402fb68:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402fb6c:	00bff9c4 	movi	r2,-25
 402fb70:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402fb74:	e0bffe17 	ldw	r2,-8(fp)
 402fb78:	10da8060 	cmpeqi	r3,r2,27137
 402fb7c:	1800031e 	bne	r3,zero,402fb8c <altera_avalon_jtag_uart_ioctl+0x38>
 402fb80:	109a80a0 	cmpeqi	r2,r2,27138
 402fb84:	1000181e 	bne	r2,zero,402fbe8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402fb88:	00002906 	br	402fc30 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402fb8c:	e0bffd17 	ldw	r2,-12(fp)
 402fb90:	10c00117 	ldw	r3,4(r2)
 402fb94:	00a00034 	movhi	r2,32768
 402fb98:	10bfffc4 	addi	r2,r2,-1
 402fb9c:	18802126 	beq	r3,r2,402fc24 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402fba0:	e0bfff17 	ldw	r2,-4(fp)
 402fba4:	10800017 	ldw	r2,0(r2)
 402fba8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402fbac:	e0bffc17 	ldw	r2,-16(fp)
 402fbb0:	10800090 	cmplti	r2,r2,2
 402fbb4:	1000061e 	bne	r2,zero,402fbd0 <altera_avalon_jtag_uart_ioctl+0x7c>
 402fbb8:	e0fffc17 	ldw	r3,-16(fp)
 402fbbc:	00a00034 	movhi	r2,32768
 402fbc0:	10bfffc4 	addi	r2,r2,-1
 402fbc4:	18800226 	beq	r3,r2,402fbd0 <altera_avalon_jtag_uart_ioctl+0x7c>
 402fbc8:	e0bffc17 	ldw	r2,-16(fp)
 402fbcc:	00000206 	br	402fbd8 <altera_avalon_jtag_uart_ioctl+0x84>
 402fbd0:	00a00034 	movhi	r2,32768
 402fbd4:	10bfff84 	addi	r2,r2,-2
 402fbd8:	e0fffd17 	ldw	r3,-12(fp)
 402fbdc:	18800115 	stw	r2,4(r3)
      rc = 0;
 402fbe0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402fbe4:	00000f06 	br	402fc24 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402fbe8:	e0bffd17 	ldw	r2,-12(fp)
 402fbec:	10c00117 	ldw	r3,4(r2)
 402fbf0:	00a00034 	movhi	r2,32768
 402fbf4:	10bfffc4 	addi	r2,r2,-1
 402fbf8:	18800c26 	beq	r3,r2,402fc2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402fbfc:	e0bffd17 	ldw	r2,-12(fp)
 402fc00:	10c00917 	ldw	r3,36(r2)
 402fc04:	e0bffd17 	ldw	r2,-12(fp)
 402fc08:	10800117 	ldw	r2,4(r2)
 402fc0c:	1885803a 	cmpltu	r2,r3,r2
 402fc10:	10c03fcc 	andi	r3,r2,255
 402fc14:	e0bfff17 	ldw	r2,-4(fp)
 402fc18:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402fc1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402fc20:	00000206 	br	402fc2c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402fc24:	0001883a 	nop
 402fc28:	00000106 	br	402fc30 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402fc2c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402fc30:	e0bffb17 	ldw	r2,-20(fp)
}
 402fc34:	e037883a 	mov	sp,fp
 402fc38:	df000017 	ldw	fp,0(sp)
 402fc3c:	dec00104 	addi	sp,sp,4
 402fc40:	f800283a 	ret

0402fc44 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402fc44:	defff304 	addi	sp,sp,-52
 402fc48:	dfc00c15 	stw	ra,48(sp)
 402fc4c:	df000b15 	stw	fp,44(sp)
 402fc50:	df000b04 	addi	fp,sp,44
 402fc54:	e13ffc15 	stw	r4,-16(fp)
 402fc58:	e17ffd15 	stw	r5,-12(fp)
 402fc5c:	e1bffe15 	stw	r6,-8(fp)
 402fc60:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402fc64:	e0bffd17 	ldw	r2,-12(fp)
 402fc68:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402fc6c:	00004706 	br	402fd8c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402fc70:	e0bffc17 	ldw	r2,-16(fp)
 402fc74:	10800a17 	ldw	r2,40(r2)
 402fc78:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 402fc7c:	e0bffc17 	ldw	r2,-16(fp)
 402fc80:	10800b17 	ldw	r2,44(r2)
 402fc84:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402fc88:	e0fff717 	ldw	r3,-36(fp)
 402fc8c:	e0bff817 	ldw	r2,-32(fp)
 402fc90:	18800536 	bltu	r3,r2,402fca8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402fc94:	e0fff717 	ldw	r3,-36(fp)
 402fc98:	e0bff817 	ldw	r2,-32(fp)
 402fc9c:	1885c83a 	sub	r2,r3,r2
 402fca0:	e0bff615 	stw	r2,-40(fp)
 402fca4:	00000406 	br	402fcb8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402fca8:	00c20004 	movi	r3,2048
 402fcac:	e0bff817 	ldw	r2,-32(fp)
 402fcb0:	1885c83a 	sub	r2,r3,r2
 402fcb4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402fcb8:	e0bff617 	ldw	r2,-40(fp)
 402fcbc:	10001e26 	beq	r2,zero,402fd38 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 402fcc0:	e0fffe17 	ldw	r3,-8(fp)
 402fcc4:	e0bff617 	ldw	r2,-40(fp)
 402fcc8:	1880022e 	bgeu	r3,r2,402fcd4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 402fccc:	e0bffe17 	ldw	r2,-8(fp)
 402fcd0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402fcd4:	e0bffc17 	ldw	r2,-16(fp)
 402fcd8:	10c00e04 	addi	r3,r2,56
 402fcdc:	e0bff817 	ldw	r2,-32(fp)
 402fce0:	1885883a 	add	r2,r3,r2
 402fce4:	e1bff617 	ldw	r6,-40(fp)
 402fce8:	100b883a 	mov	r5,r2
 402fcec:	e13ff517 	ldw	r4,-44(fp)
 402fcf0:	40274200 	call	4027420 <memcpy>
      ptr   += n;
 402fcf4:	e0fff517 	ldw	r3,-44(fp)
 402fcf8:	e0bff617 	ldw	r2,-40(fp)
 402fcfc:	1885883a 	add	r2,r3,r2
 402fd00:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402fd04:	e0fffe17 	ldw	r3,-8(fp)
 402fd08:	e0bff617 	ldw	r2,-40(fp)
 402fd0c:	1885c83a 	sub	r2,r3,r2
 402fd10:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402fd14:	e0fff817 	ldw	r3,-32(fp)
 402fd18:	e0bff617 	ldw	r2,-40(fp)
 402fd1c:	1885883a 	add	r2,r3,r2
 402fd20:	10c1ffcc 	andi	r3,r2,2047
 402fd24:	e0bffc17 	ldw	r2,-16(fp)
 402fd28:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 402fd2c:	e0bffe17 	ldw	r2,-8(fp)
 402fd30:	00bfcf16 	blt	zero,r2,402fc70 <__alt_data_end+0xfffefc70>
 402fd34:	00000106 	br	402fd3c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402fd38:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402fd3c:	e0fff517 	ldw	r3,-44(fp)
 402fd40:	e0bffd17 	ldw	r2,-12(fp)
 402fd44:	1880141e 	bne	r3,r2,402fd98 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402fd48:	e0bfff17 	ldw	r2,-4(fp)
 402fd4c:	1090000c 	andi	r2,r2,16384
 402fd50:	1000131e 	bne	r2,zero,402fda0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402fd54:	0001883a 	nop
 402fd58:	e0bffc17 	ldw	r2,-16(fp)
 402fd5c:	10c00a17 	ldw	r3,40(r2)
 402fd60:	e0bff717 	ldw	r2,-36(fp)
 402fd64:	1880051e 	bne	r3,r2,402fd7c <altera_avalon_jtag_uart_read+0x138>
 402fd68:	e0bffc17 	ldw	r2,-16(fp)
 402fd6c:	10c00917 	ldw	r3,36(r2)
 402fd70:	e0bffc17 	ldw	r2,-16(fp)
 402fd74:	10800117 	ldw	r2,4(r2)
 402fd78:	18bff736 	bltu	r3,r2,402fd58 <__alt_data_end+0xfffefd58>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402fd7c:	e0bffc17 	ldw	r2,-16(fp)
 402fd80:	10c00a17 	ldw	r3,40(r2)
 402fd84:	e0bff717 	ldw	r2,-36(fp)
 402fd88:	18800726 	beq	r3,r2,402fda8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402fd8c:	e0bffe17 	ldw	r2,-8(fp)
 402fd90:	00bfb716 	blt	zero,r2,402fc70 <__alt_data_end+0xfffefc70>
 402fd94:	00000506 	br	402fdac <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402fd98:	0001883a 	nop
 402fd9c:	00000306 	br	402fdac <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402fda0:	0001883a 	nop
 402fda4:	00000106 	br	402fdac <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402fda8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 402fdac:	e0fff517 	ldw	r3,-44(fp)
 402fdb0:	e0bffd17 	ldw	r2,-12(fp)
 402fdb4:	18801826 	beq	r3,r2,402fe18 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402fdb8:	0005303a 	rdctl	r2,status
 402fdbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402fdc0:	e0fffb17 	ldw	r3,-20(fp)
 402fdc4:	00bfff84 	movi	r2,-2
 402fdc8:	1884703a 	and	r2,r3,r2
 402fdcc:	1001703a 	wrctl	status,r2
  
  return context;
 402fdd0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402fdd4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402fdd8:	e0bffc17 	ldw	r2,-16(fp)
 402fddc:	10800817 	ldw	r2,32(r2)
 402fde0:	10c00054 	ori	r3,r2,1
 402fde4:	e0bffc17 	ldw	r2,-16(fp)
 402fde8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402fdec:	e0bffc17 	ldw	r2,-16(fp)
 402fdf0:	10800017 	ldw	r2,0(r2)
 402fdf4:	10800104 	addi	r2,r2,4
 402fdf8:	1007883a 	mov	r3,r2
 402fdfc:	e0bffc17 	ldw	r2,-16(fp)
 402fe00:	10800817 	ldw	r2,32(r2)
 402fe04:	18800035 	stwio	r2,0(r3)
 402fe08:	e0bffa17 	ldw	r2,-24(fp)
 402fe0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402fe10:	e0bff917 	ldw	r2,-28(fp)
 402fe14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402fe18:	e0fff517 	ldw	r3,-44(fp)
 402fe1c:	e0bffd17 	ldw	r2,-12(fp)
 402fe20:	18800426 	beq	r3,r2,402fe34 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402fe24:	e0fff517 	ldw	r3,-44(fp)
 402fe28:	e0bffd17 	ldw	r2,-12(fp)
 402fe2c:	1885c83a 	sub	r2,r3,r2
 402fe30:	00000606 	br	402fe4c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402fe34:	e0bfff17 	ldw	r2,-4(fp)
 402fe38:	1090000c 	andi	r2,r2,16384
 402fe3c:	10000226 	beq	r2,zero,402fe48 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 402fe40:	00bffd44 	movi	r2,-11
 402fe44:	00000106 	br	402fe4c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402fe48:	00bffec4 	movi	r2,-5
}
 402fe4c:	e037883a 	mov	sp,fp
 402fe50:	dfc00117 	ldw	ra,4(sp)
 402fe54:	df000017 	ldw	fp,0(sp)
 402fe58:	dec00204 	addi	sp,sp,8
 402fe5c:	f800283a 	ret

0402fe60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402fe60:	defff304 	addi	sp,sp,-52
 402fe64:	dfc00c15 	stw	ra,48(sp)
 402fe68:	df000b15 	stw	fp,44(sp)
 402fe6c:	df000b04 	addi	fp,sp,44
 402fe70:	e13ffc15 	stw	r4,-16(fp)
 402fe74:	e17ffd15 	stw	r5,-12(fp)
 402fe78:	e1bffe15 	stw	r6,-8(fp)
 402fe7c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402fe80:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402fe84:	e0bffd17 	ldw	r2,-12(fp)
 402fe88:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402fe8c:	00003706 	br	402ff6c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402fe90:	e0bffc17 	ldw	r2,-16(fp)
 402fe94:	10800c17 	ldw	r2,48(r2)
 402fe98:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 402fe9c:	e0bffc17 	ldw	r2,-16(fp)
 402fea0:	10800d17 	ldw	r2,52(r2)
 402fea4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402fea8:	e0fff917 	ldw	r3,-28(fp)
 402feac:	e0bff517 	ldw	r2,-44(fp)
 402feb0:	1880062e 	bgeu	r3,r2,402fecc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402feb4:	e0fff517 	ldw	r3,-44(fp)
 402feb8:	e0bff917 	ldw	r2,-28(fp)
 402febc:	1885c83a 	sub	r2,r3,r2
 402fec0:	10bfffc4 	addi	r2,r2,-1
 402fec4:	e0bff615 	stw	r2,-40(fp)
 402fec8:	00000b06 	br	402fef8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 402fecc:	e0bff517 	ldw	r2,-44(fp)
 402fed0:	10000526 	beq	r2,zero,402fee8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402fed4:	00c20004 	movi	r3,2048
 402fed8:	e0bff917 	ldw	r2,-28(fp)
 402fedc:	1885c83a 	sub	r2,r3,r2
 402fee0:	e0bff615 	stw	r2,-40(fp)
 402fee4:	00000406 	br	402fef8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402fee8:	00c1ffc4 	movi	r3,2047
 402feec:	e0bff917 	ldw	r2,-28(fp)
 402fef0:	1885c83a 	sub	r2,r3,r2
 402fef4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402fef8:	e0bff617 	ldw	r2,-40(fp)
 402fefc:	10001e26 	beq	r2,zero,402ff78 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402ff00:	e0fffe17 	ldw	r3,-8(fp)
 402ff04:	e0bff617 	ldw	r2,-40(fp)
 402ff08:	1880022e 	bgeu	r3,r2,402ff14 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 402ff0c:	e0bffe17 	ldw	r2,-8(fp)
 402ff10:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402ff14:	e0bffc17 	ldw	r2,-16(fp)
 402ff18:	10c20e04 	addi	r3,r2,2104
 402ff1c:	e0bff917 	ldw	r2,-28(fp)
 402ff20:	1885883a 	add	r2,r3,r2
 402ff24:	e1bff617 	ldw	r6,-40(fp)
 402ff28:	e17ffd17 	ldw	r5,-12(fp)
 402ff2c:	1009883a 	mov	r4,r2
 402ff30:	40274200 	call	4027420 <memcpy>
      ptr   += n;
 402ff34:	e0fffd17 	ldw	r3,-12(fp)
 402ff38:	e0bff617 	ldw	r2,-40(fp)
 402ff3c:	1885883a 	add	r2,r3,r2
 402ff40:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402ff44:	e0fffe17 	ldw	r3,-8(fp)
 402ff48:	e0bff617 	ldw	r2,-40(fp)
 402ff4c:	1885c83a 	sub	r2,r3,r2
 402ff50:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402ff54:	e0fff917 	ldw	r3,-28(fp)
 402ff58:	e0bff617 	ldw	r2,-40(fp)
 402ff5c:	1885883a 	add	r2,r3,r2
 402ff60:	10c1ffcc 	andi	r3,r2,2047
 402ff64:	e0bffc17 	ldw	r2,-16(fp)
 402ff68:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402ff6c:	e0bffe17 	ldw	r2,-8(fp)
 402ff70:	00bfc716 	blt	zero,r2,402fe90 <__alt_data_end+0xfffefe90>
 402ff74:	00000106 	br	402ff7c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402ff78:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ff7c:	0005303a 	rdctl	r2,status
 402ff80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ff84:	e0fffb17 	ldw	r3,-20(fp)
 402ff88:	00bfff84 	movi	r2,-2
 402ff8c:	1884703a 	and	r2,r3,r2
 402ff90:	1001703a 	wrctl	status,r2
  
  return context;
 402ff94:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402ff98:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402ff9c:	e0bffc17 	ldw	r2,-16(fp)
 402ffa0:	10800817 	ldw	r2,32(r2)
 402ffa4:	10c00094 	ori	r3,r2,2
 402ffa8:	e0bffc17 	ldw	r2,-16(fp)
 402ffac:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402ffb0:	e0bffc17 	ldw	r2,-16(fp)
 402ffb4:	10800017 	ldw	r2,0(r2)
 402ffb8:	10800104 	addi	r2,r2,4
 402ffbc:	1007883a 	mov	r3,r2
 402ffc0:	e0bffc17 	ldw	r2,-16(fp)
 402ffc4:	10800817 	ldw	r2,32(r2)
 402ffc8:	18800035 	stwio	r2,0(r3)
 402ffcc:	e0bffa17 	ldw	r2,-24(fp)
 402ffd0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ffd4:	e0bff817 	ldw	r2,-32(fp)
 402ffd8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402ffdc:	e0bffe17 	ldw	r2,-8(fp)
 402ffe0:	0080100e 	bge	zero,r2,4030024 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402ffe4:	e0bfff17 	ldw	r2,-4(fp)
 402ffe8:	1090000c 	andi	r2,r2,16384
 402ffec:	1000101e 	bne	r2,zero,4030030 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402fff0:	0001883a 	nop
 402fff4:	e0bffc17 	ldw	r2,-16(fp)
 402fff8:	10c00d17 	ldw	r3,52(r2)
 402fffc:	e0bff517 	ldw	r2,-44(fp)
 4030000:	1880051e 	bne	r3,r2,4030018 <altera_avalon_jtag_uart_write+0x1b8>
 4030004:	e0bffc17 	ldw	r2,-16(fp)
 4030008:	10c00917 	ldw	r3,36(r2)
 403000c:	e0bffc17 	ldw	r2,-16(fp)
 4030010:	10800117 	ldw	r2,4(r2)
 4030014:	18bff736 	bltu	r3,r2,402fff4 <__alt_data_end+0xfffefff4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4030018:	e0bffc17 	ldw	r2,-16(fp)
 403001c:	10800917 	ldw	r2,36(r2)
 4030020:	1000051e 	bne	r2,zero,4030038 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4030024:	e0bffe17 	ldw	r2,-8(fp)
 4030028:	00bfd016 	blt	zero,r2,402ff6c <__alt_data_end+0xfffeff6c>
 403002c:	00000306 	br	403003c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 4030030:	0001883a 	nop
 4030034:	00000106 	br	403003c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4030038:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 403003c:	e0fffd17 	ldw	r3,-12(fp)
 4030040:	e0bff717 	ldw	r2,-36(fp)
 4030044:	18800426 	beq	r3,r2,4030058 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4030048:	e0fffd17 	ldw	r3,-12(fp)
 403004c:	e0bff717 	ldw	r2,-36(fp)
 4030050:	1885c83a 	sub	r2,r3,r2
 4030054:	00000606 	br	4030070 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4030058:	e0bfff17 	ldw	r2,-4(fp)
 403005c:	1090000c 	andi	r2,r2,16384
 4030060:	10000226 	beq	r2,zero,403006c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 4030064:	00bffd44 	movi	r2,-11
 4030068:	00000106 	br	4030070 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 403006c:	00bffec4 	movi	r2,-5
}
 4030070:	e037883a 	mov	sp,fp
 4030074:	dfc00117 	ldw	ra,4(sp)
 4030078:	df000017 	ldw	fp,0(sp)
 403007c:	dec00204 	addi	sp,sp,8
 4030080:	f800283a 	ret

04030084 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 4030084:	defffd04 	addi	sp,sp,-12
 4030088:	df000215 	stw	fp,8(sp)
 403008c:	df000204 	addi	fp,sp,8
 4030090:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 4030094:	008e84b4 	movhi	r2,14866
 4030098:	10ac1144 	addi	r2,r2,-20411
 403009c:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 40300a0:	e0bfff17 	ldw	r2,-4(fp)
 40300a4:	10800a17 	ldw	r2,40(r2)
 40300a8:	10800104 	addi	r2,r2,4
 40300ac:	1007883a 	mov	r3,r2
 40300b0:	e0bffe17 	ldw	r2,-8(fp)
 40300b4:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 40300b8:	e0bfff17 	ldw	r2,-4(fp)
 40300bc:	10800a17 	ldw	r2,40(r2)
 40300c0:	10800104 	addi	r2,r2,4
 40300c4:	10800037 	ldwio	r2,0(r2)
 40300c8:	1007883a 	mov	r3,r2
 40300cc:	e0bffe17 	ldw	r2,-8(fp)
 40300d0:	1880081e 	bne	r3,r2,40300f4 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 40300d4:	e0bfff17 	ldw	r2,-4(fp)
 40300d8:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 40300dc:	e0bfff17 	ldw	r2,-4(fp)
 40300e0:	10800a17 	ldw	r2,40(r2)
 40300e4:	10800104 	addi	r2,r2,4
 40300e8:	0007883a 	mov	r3,zero
 40300ec:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 40300f0:	00000306 	br	4030100 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 40300f4:	e0bfff17 	ldw	r2,-4(fp)
 40300f8:	00c00044 	movi	r3,1
 40300fc:	10c00f15 	stw	r3,60(r2)
    }
}
 4030100:	0001883a 	nop
 4030104:	e037883a 	mov	sp,fp
 4030108:	df000017 	ldw	fp,0(sp)
 403010c:	dec00104 	addi	sp,sp,4
 4030110:	f800283a 	ret

04030114 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 4030114:	defffc04 	addi	sp,sp,-16
 4030118:	df000315 	stw	fp,12(sp)
 403011c:	df000304 	addi	fp,sp,12
 4030120:	e13ffe15 	stw	r4,-8(fp)
 4030124:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4030128:	e0bfff17 	ldw	r2,-4(fp)
 403012c:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 4030130:	e0bffd17 	ldw	r2,-12(fp)
 4030134:	10001026 	beq	r2,zero,4030178 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4030138:	e0bffe17 	ldw	r2,-8(fp)
 403013c:	10800a17 	ldw	r2,40(r2)
 4030140:	10800104 	addi	r2,r2,4
 4030144:	1007883a 	mov	r3,r2
 4030148:	e0bffd17 	ldw	r2,-12(fp)
 403014c:	10800104 	addi	r2,r2,4
 4030150:	10800017 	ldw	r2,0(r2)
 4030154:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 4030158:	e0bffe17 	ldw	r2,-8(fp)
 403015c:	10800a17 	ldw	r2,40(r2)
 4030160:	1007883a 	mov	r3,r2
 4030164:	e0bffd17 	ldw	r2,-12(fp)
 4030168:	10800017 	ldw	r2,0(r2)
 403016c:	18800035 	stwio	r2,0(r3)
        return 0;
 4030170:	0005883a 	mov	r2,zero
 4030174:	00000106 	br	403017c <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 4030178:	00bffa84 	movi	r2,-22
}
 403017c:	e037883a 	mov	sp,fp
 4030180:	df000017 	ldw	fp,0(sp)
 4030184:	dec00104 	addi	sp,sp,4
 4030188:	f800283a 	ret

0403018c <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 403018c:	defff504 	addi	sp,sp,-44
 4030190:	dfc00a15 	stw	ra,40(sp)
 4030194:	df000915 	stw	fp,36(sp)
 4030198:	df000904 	addi	fp,sp,36
 403019c:	e13ffe15 	stw	r4,-8(fp)
 40301a0:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 40301a4:	e0bffe17 	ldw	r2,-8(fp)
 40301a8:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 40301ac:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 40301b0:	e0bff717 	ldw	r2,-36(fp)
 40301b4:	10801017 	ldw	r2,64(r2)
 40301b8:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 40301bc:	e0bff717 	ldw	r2,-36(fp)
 40301c0:	10800a17 	ldw	r2,40(r2)
 40301c4:	10800304 	addi	r2,r2,12
 40301c8:	10800037 	ldwio	r2,0(r2)
 40301cc:	1007883a 	mov	r3,r2
 40301d0:	00bfff44 	movi	r2,-3
 40301d4:	1884703a 	and	r2,r3,r2
 40301d8:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 40301dc:	e0bff717 	ldw	r2,-36(fp)
 40301e0:	10800a17 	ldw	r2,40(r2)
 40301e4:	10800304 	addi	r2,r2,12
 40301e8:	1007883a 	mov	r3,r2
 40301ec:	e0bffa17 	ldw	r2,-24(fp)
 40301f0:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 40301f4:	e0bff917 	ldw	r2,-28(fp)
 40301f8:	10002d26 	beq	r2,zero,40302b0 <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 40301fc:	e0bff717 	ldw	r2,-36(fp)
 4030200:	10800a17 	ldw	r2,40(r2)
 4030204:	10800104 	addi	r2,r2,4
 4030208:	1007883a 	mov	r3,r2
 403020c:	e0bff917 	ldw	r2,-28(fp)
 4030210:	10800104 	addi	r2,r2,4
 4030214:	10800017 	ldw	r2,0(r2)
 4030218:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 403021c:	e0bff717 	ldw	r2,-36(fp)
 4030220:	10800a17 	ldw	r2,40(r2)
 4030224:	1007883a 	mov	r3,r2
 4030228:	e0bff917 	ldw	r2,-28(fp)
 403022c:	10800017 	ldw	r2,0(r2)
 4030230:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4030234:	e0bff717 	ldw	r2,-36(fp)
 4030238:	10800a17 	ldw	r2,40(r2)
 403023c:	10800204 	addi	r2,r2,8
 4030240:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4030244:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4030248:	1005d07a 	srai	r2,r2,1
 403024c:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 4030250:	e0bff717 	ldw	r2,-36(fp)
 4030254:	10800d17 	ldw	r2,52(r2)
 4030258:	10001126 	beq	r2,zero,40302a0 <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 403025c:	0005303a 	rdctl	r2,status
 4030260:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4030264:	e0fffc17 	ldw	r3,-16(fp)
 4030268:	00bfff84 	movi	r2,-2
 403026c:	1884703a 	and	r2,r3,r2
 4030270:	1001703a 	wrctl	status,r2
  
  return context;
 4030274:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 4030278:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 403027c:	e0bff717 	ldw	r2,-36(fp)
 4030280:	10800d17 	ldw	r2,52(r2)
 4030284:	e17ff817 	ldw	r5,-32(fp)
 4030288:	e13ff917 	ldw	r4,-28(fp)
 403028c:	103ee83a 	callr	r2
 4030290:	e0bffb17 	ldw	r2,-20(fp)
 4030294:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4030298:	e0bffd17 	ldw	r2,-12(fp)
 403029c:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 40302a0:	e0bff717 	ldw	r2,-36(fp)
 40302a4:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 40302a8:	e0bff717 	ldw	r2,-36(fp)
 40302ac:	10001105 	stb	zero,68(r2)
    }
}
 40302b0:	0001883a 	nop
 40302b4:	e037883a 	mov	sp,fp
 40302b8:	dfc00117 	ldw	ra,4(sp)
 40302bc:	df000017 	ldw	fp,0(sp)
 40302c0:	dec00204 	addi	sp,sp,8
 40302c4:	f800283a 	ret

040302c8 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 40302c8:	defff604 	addi	sp,sp,-40
 40302cc:	dfc00915 	stw	ra,36(sp)
 40302d0:	df000815 	stw	fp,32(sp)
 40302d4:	df000804 	addi	fp,sp,32
 40302d8:	e13ffe15 	stw	r4,-8(fp)
 40302dc:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 40302e0:	e0bffe17 	ldw	r2,-8(fp)
 40302e4:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 40302e8:	e0bff817 	ldw	r2,-32(fp)
 40302ec:	10800a17 	ldw	r2,40(r2)
 40302f0:	10800104 	addi	r2,r2,4
 40302f4:	10800037 	ldwio	r2,0(r2)
 40302f8:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 40302fc:	e0bff817 	ldw	r2,-32(fp)
 4030300:	10800a17 	ldw	r2,40(r2)
 4030304:	10800037 	ldwio	r2,0(r2)
 4030308:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 403030c:	e0bff817 	ldw	r2,-32(fp)
 4030310:	10800e17 	ldw	r2,56(r2)
 4030314:	10001126 	beq	r2,zero,403035c <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4030318:	0005303a 	rdctl	r2,status
 403031c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4030320:	e0fffa17 	ldw	r3,-24(fp)
 4030324:	00bfff84 	movi	r2,-2
 4030328:	1884703a 	and	r2,r3,r2
 403032c:	1001703a 	wrctl	status,r2
  
  return context;
 4030330:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4030334:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 4030338:	e0bff817 	ldw	r2,-32(fp)
 403033c:	10800e17 	ldw	r2,56(r2)
 4030340:	e0fffc04 	addi	r3,fp,-16
 4030344:	1809883a 	mov	r4,r3
 4030348:	103ee83a 	callr	r2
 403034c:	e0bff917 	ldw	r2,-28(fp)
 4030350:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4030354:	e0bffb17 	ldw	r2,-20(fp)
 4030358:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 403035c:	0001883a 	nop
 4030360:	e037883a 	mov	sp,fp
 4030364:	dfc00117 	ldw	ra,4(sp)
 4030368:	df000017 	ldw	fp,0(sp)
 403036c:	dec00204 	addi	sp,sp,8
 4030370:	f800283a 	ret

04030374 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 4030374:	defffb04 	addi	sp,sp,-20
 4030378:	dfc00415 	stw	ra,16(sp)
 403037c:	df000315 	stw	fp,12(sp)
 4030380:	df000304 	addi	fp,sp,12
 4030384:	e13ffd15 	stw	r4,-12(fp)
 4030388:	e17ffe15 	stw	r5,-8(fp)
 403038c:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 4030390:	d1600e04 	addi	r5,gp,-32712
 4030394:	e13ffd17 	ldw	r4,-12(fp)
 4030398:	4031f300 	call	4031f30 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 403039c:	e0ffff17 	ldw	r3,-4(fp)
 40303a0:	e0bffd17 	ldw	r2,-12(fp)
 40303a4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 40303a8:	e0fffe17 	ldw	r3,-8(fp)
 40303ac:	e0bffd17 	ldw	r2,-12(fp)
 40303b0:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 40303b4:	e0bffd17 	ldw	r2,-12(fp)
 40303b8:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 40303bc:	e0bffd17 	ldw	r2,-12(fp)
 40303c0:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 40303c4:	e0bffd17 	ldw	r2,-12(fp)
 40303c8:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 40303cc:	e13ffd17 	ldw	r4,-12(fp)
 40303d0:	40300840 	call	4030084 <altera_avalon_mailbox_identify>
}
 40303d4:	0001883a 	nop
 40303d8:	e037883a 	mov	sp,fp
 40303dc:	dfc00117 	ldw	ra,4(sp)
 40303e0:	df000017 	ldw	fp,0(sp)
 40303e4:	dec00204 	addi	sp,sp,8
 40303e8:	f800283a 	ret

040303ec <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 40303ec:	defff904 	addi	sp,sp,-28
 40303f0:	dfc00615 	stw	ra,24(sp)
 40303f4:	df000515 	stw	fp,20(sp)
 40303f8:	df000504 	addi	fp,sp,20
 40303fc:	e13ffd15 	stw	r4,-12(fp)
 4030400:	e17ffe15 	stw	r5,-8(fp)
 4030404:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4030408:	d1600e04 	addi	r5,gp,-32712
 403040c:	e13ffd17 	ldw	r4,-12(fp)
 4030410:	40320940 	call	4032094 <alt_find_dev>
 4030414:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 4030418:	e0bffb17 	ldw	r2,-20(fp)
 403041c:	1000021e 	bne	r2,zero,4030428 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 4030420:	0005883a 	mov	r2,zero
 4030424:	00005d06 	br	403059c <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4030428:	e0bffb17 	ldw	r2,-20(fp)
 403042c:	10800a17 	ldw	r2,40(r2)
 4030430:	10800304 	addi	r2,r2,12
 4030434:	10800037 	ldwio	r2,0(r2)
 4030438:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 403043c:	e0bffb17 	ldw	r2,-20(fp)
 4030440:	10800f17 	ldw	r2,60(r2)
 4030444:	1000081e 	bne	r2,zero,4030468 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4030448:	e0bffb17 	ldw	r2,-20(fp)
 403044c:	10800a17 	ldw	r2,40(r2)
 4030450:	10800304 	addi	r2,r2,12
 4030454:	1009883a 	mov	r4,r2
 4030458:	e0fffc17 	ldw	r3,-16(fp)
 403045c:	00bfff44 	movi	r2,-3
 4030460:	1884703a 	and	r2,r3,r2
 4030464:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 4030468:	e0bffb17 	ldw	r2,-20(fp)
 403046c:	10800f17 	ldw	r2,60(r2)
 4030470:	10800058 	cmpnei	r2,r2,1
 4030474:	1000081e 	bne	r2,zero,4030498 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4030478:	e0bffb17 	ldw	r2,-20(fp)
 403047c:	10800a17 	ldw	r2,40(r2)
 4030480:	10800304 	addi	r2,r2,12
 4030484:	1009883a 	mov	r4,r2
 4030488:	e0fffc17 	ldw	r3,-16(fp)
 403048c:	00bfff84 	movi	r2,-2
 4030490:	1884703a 	and	r2,r3,r2
 4030494:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 4030498:	e0bffb17 	ldw	r2,-20(fp)
 403049c:	10800b17 	ldw	r2,44(r2)
 40304a0:	10bfffd8 	cmpnei	r2,r2,-1
 40304a4:	1000021e 	bne	r2,zero,40304b0 <altera_avalon_mailbox_open+0xc4>
        return dev;
 40304a8:	e0bffb17 	ldw	r2,-20(fp)
 40304ac:	00003b06 	br	403059c <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 40304b0:	e0bffe17 	ldw	r2,-8(fp)
 40304b4:	1000041e 	bne	r2,zero,40304c8 <altera_avalon_mailbox_open+0xdc>
 40304b8:	e0bfff17 	ldw	r2,-4(fp)
 40304bc:	1000021e 	bne	r2,zero,40304c8 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 40304c0:	e0bffb17 	ldw	r2,-20(fp)
 40304c4:	00003506 	br	403059c <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 40304c8:	e0bffb17 	ldw	r2,-20(fp)
 40304cc:	10800f17 	ldw	r2,60(r2)
 40304d0:	1000021e 	bne	r2,zero,40304dc <altera_avalon_mailbox_open+0xf0>
 40304d4:	e0bfff17 	ldw	r2,-4(fp)
 40304d8:	1000061e 	bne	r2,zero,40304f4 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 40304dc:	e0bffb17 	ldw	r2,-20(fp)
 40304e0:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 40304e4:	10800058 	cmpnei	r2,r2,1
 40304e8:	1000041e 	bne	r2,zero,40304fc <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 40304ec:	e0bffe17 	ldw	r2,-8(fp)
 40304f0:	10000226 	beq	r2,zero,40304fc <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 40304f4:	0005883a 	mov	r2,zero
 40304f8:	00002806 	br	403059c <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 40304fc:	e0bffb17 	ldw	r2,-20(fp)
 4030500:	e0fffe17 	ldw	r3,-8(fp)
 4030504:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4030508:	e0bffb17 	ldw	r2,-20(fp)
 403050c:	e0ffff17 	ldw	r3,-4(fp)
 4030510:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4030514:	e0bffb17 	ldw	r2,-20(fp)
 4030518:	10800f17 	ldw	r2,60(r2)
 403051c:	1000071e 	bne	r2,zero,403053c <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 4030520:	e0bffb17 	ldw	r2,-20(fp)
 4030524:	10800b17 	ldw	r2,44(r2)
 4030528:	018100f4 	movhi	r6,1027
 403052c:	31806304 	addi	r6,r6,396
 4030530:	e17ffb17 	ldw	r5,-20(fp)
 4030534:	1009883a 	mov	r4,r2
 4030538:	402e9d00 	call	402e9d0 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 403053c:	e0bffb17 	ldw	r2,-20(fp)
 4030540:	10800f17 	ldw	r2,60(r2)
 4030544:	10800058 	cmpnei	r2,r2,1
 4030548:	1000131e 	bne	r2,zero,4030598 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 403054c:	e0bffb17 	ldw	r2,-20(fp)
 4030550:	10800b17 	ldw	r2,44(r2)
 4030554:	018100f4 	movhi	r6,1027
 4030558:	3180b204 	addi	r6,r6,712
 403055c:	e17ffb17 	ldw	r5,-20(fp)
 4030560:	1009883a 	mov	r4,r2
 4030564:	402e9d00 	call	402e9d0 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4030568:	e0bffb17 	ldw	r2,-20(fp)
 403056c:	10800a17 	ldw	r2,40(r2)
 4030570:	10800304 	addi	r2,r2,12
 4030574:	10800037 	ldwio	r2,0(r2)
 4030578:	10800054 	ori	r2,r2,1
 403057c:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4030580:	e0bffb17 	ldw	r2,-20(fp)
 4030584:	10800a17 	ldw	r2,40(r2)
 4030588:	10800304 	addi	r2,r2,12
 403058c:	1007883a 	mov	r3,r2
 4030590:	e0bffc17 	ldw	r2,-16(fp)
 4030594:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 4030598:	e0bffb17 	ldw	r2,-20(fp)
}
 403059c:	e037883a 	mov	sp,fp
 40305a0:	dfc00117 	ldw	ra,4(sp)
 40305a4:	df000017 	ldw	fp,0(sp)
 40305a8:	dec00204 	addi	sp,sp,8
 40305ac:	f800283a 	ret

040305b0 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 40305b0:	defffc04 	addi	sp,sp,-16
 40305b4:	dfc00315 	stw	ra,12(sp)
 40305b8:	df000215 	stw	fp,8(sp)
 40305bc:	df000204 	addi	fp,sp,8
 40305c0:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 40305c4:	e0bfff17 	ldw	r2,-4(fp)
 40305c8:	10003526 	beq	r2,zero,40306a0 <altera_avalon_mailbox_close+0xf0>
 40305cc:	e0bfff17 	ldw	r2,-4(fp)
 40305d0:	10800b17 	ldw	r2,44(r2)
 40305d4:	10bfffe0 	cmpeqi	r2,r2,-1
 40305d8:	1000311e 	bne	r2,zero,40306a0 <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 40305dc:	e0bfff17 	ldw	r2,-4(fp)
 40305e0:	10800f17 	ldw	r2,60(r2)
 40305e4:	10000e1e 	bne	r2,zero,4030620 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 40305e8:	e0bfff17 	ldw	r2,-4(fp)
 40305ec:	10800a17 	ldw	r2,40(r2)
 40305f0:	10800304 	addi	r2,r2,12
 40305f4:	10800037 	ldwio	r2,0(r2)
 40305f8:	1007883a 	mov	r3,r2
 40305fc:	00bfff44 	movi	r2,-3
 4030600:	1884703a 	and	r2,r3,r2
 4030604:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4030608:	e0bfff17 	ldw	r2,-4(fp)
 403060c:	10800a17 	ldw	r2,40(r2)
 4030610:	10800304 	addi	r2,r2,12
 4030614:	1007883a 	mov	r3,r2
 4030618:	e0bffe17 	ldw	r2,-8(fp)
 403061c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 4030620:	e0bfff17 	ldw	r2,-4(fp)
 4030624:	10800f17 	ldw	r2,60(r2)
 4030628:	10800058 	cmpnei	r2,r2,1
 403062c:	10000e1e 	bne	r2,zero,4030668 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4030630:	e0bfff17 	ldw	r2,-4(fp)
 4030634:	10800a17 	ldw	r2,40(r2)
 4030638:	10800304 	addi	r2,r2,12
 403063c:	10800037 	ldwio	r2,0(r2)
 4030640:	1007883a 	mov	r3,r2
 4030644:	00bfff84 	movi	r2,-2
 4030648:	1884703a 	and	r2,r3,r2
 403064c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4030650:	e0bfff17 	ldw	r2,-4(fp)
 4030654:	10800a17 	ldw	r2,40(r2)
 4030658:	10800304 	addi	r2,r2,12
 403065c:	1007883a 	mov	r3,r2
 4030660:	e0bffe17 	ldw	r2,-8(fp)
 4030664:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 4030668:	e0bfff17 	ldw	r2,-4(fp)
 403066c:	10800b17 	ldw	r2,44(r2)
 4030670:	10bfffe0 	cmpeqi	r2,r2,-1
 4030674:	1000061e 	bne	r2,zero,4030690 <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 4030678:	e0bfff17 	ldw	r2,-4(fp)
 403067c:	10800b17 	ldw	r2,44(r2)
 4030680:	000d883a 	mov	r6,zero
 4030684:	e17fff17 	ldw	r5,-4(fp)
 4030688:	1009883a 	mov	r4,r2
 403068c:	402e9d00 	call	402e9d0 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 4030690:	e0bfff17 	ldw	r2,-4(fp)
 4030694:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 4030698:	e0bfff17 	ldw	r2,-4(fp)
 403069c:	10000e15 	stw	zero,56(r2)
    }
}
 40306a0:	0001883a 	nop
 40306a4:	e037883a 	mov	sp,fp
 40306a8:	dfc00117 	ldw	ra,4(sp)
 40306ac:	df000017 	ldw	fp,0(sp)
 40306b0:	dec00204 	addi	sp,sp,8
 40306b4:	f800283a 	ret

040306b8 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 40306b8:	defffd04 	addi	sp,sp,-12
 40306bc:	df000215 	stw	fp,8(sp)
 40306c0:	df000204 	addi	fp,sp,8
 40306c4:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 40306c8:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 40306cc:	e0bfff17 	ldw	r2,-4(fp)
 40306d0:	10800a17 	ldw	r2,40(r2)
 40306d4:	10800204 	addi	r2,r2,8
 40306d8:	10800037 	ldwio	r2,0(r2)
 40306dc:	108000cc 	andi	r2,r2,3
 40306e0:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 40306e4:	e0bfff17 	ldw	r2,-4(fp)
 40306e8:	10800f17 	ldw	r2,60(r2)
 40306ec:	1000041e 	bne	r2,zero,4030700 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 40306f0:	e0bffe17 	ldw	r2,-8(fp)
 40306f4:	1080008c 	andi	r2,r2,2
 40306f8:	1004d07a 	srli	r2,r2,1
 40306fc:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 4030700:	e0bfff17 	ldw	r2,-4(fp)
 4030704:	10800f17 	ldw	r2,60(r2)
 4030708:	10800058 	cmpnei	r2,r2,1
 403070c:	1000031e 	bne	r2,zero,403071c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 4030710:	e0bffe17 	ldw	r2,-8(fp)
 4030714:	1080004c 	andi	r2,r2,1
 4030718:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 403071c:	e0bffe17 	ldw	r2,-8(fp)
}
 4030720:	e037883a 	mov	sp,fp
 4030724:	df000017 	ldw	fp,0(sp)
 4030728:	dec00104 	addi	sp,sp,4
 403072c:	f800283a 	ret

04030730 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 4030730:	defff704 	addi	sp,sp,-36
 4030734:	dfc00815 	stw	ra,32(sp)
 4030738:	df000715 	stw	fp,28(sp)
 403073c:	df000704 	addi	fp,sp,28
 4030740:	e13ffc15 	stw	r4,-16(fp)
 4030744:	e17ffd15 	stw	r5,-12(fp)
 4030748:	e1bffe15 	stw	r6,-8(fp)
 403074c:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 4030750:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4030754:	e0bffc17 	ldw	r2,-16(fp)
 4030758:	10801103 	ldbu	r2,68(r2)
 403075c:	10803fcc 	andi	r2,r2,255
 4030760:	1000061e 	bne	r2,zero,403077c <altera_avalon_mailbox_send+0x4c>
 4030764:	e0bffc17 	ldw	r2,-16(fp)
 4030768:	10800a17 	ldw	r2,40(r2)
 403076c:	10800204 	addi	r2,r2,8
 4030770:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 4030774:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4030778:	10000226 	beq	r2,zero,4030784 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 403077c:	00bfffc4 	movi	r2,-1
 4030780:	00003a06 	br	403086c <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 4030784:	e0bffc17 	ldw	r2,-16(fp)
 4030788:	e0fffd17 	ldw	r3,-12(fp)
 403078c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 4030790:	e0bffc17 	ldw	r2,-16(fp)
 4030794:	00c00044 	movi	r3,1
 4030798:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 403079c:	e0bffc17 	ldw	r2,-16(fp)
 40307a0:	10800b17 	ldw	r2,44(r2)
 40307a4:	10bfffe0 	cmpeqi	r2,r2,-1
 40307a8:	1000031e 	bne	r2,zero,40307b8 <altera_avalon_mailbox_send+0x88>
 40307ac:	e0bfff17 	ldw	r2,-4(fp)
 40307b0:	10800058 	cmpnei	r2,r2,1
 40307b4:	1000201e 	bne	r2,zero,4030838 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 40307b8:	e0bffe17 	ldw	r2,-8(fp)
 40307bc:	1000061e 	bne	r2,zero,40307d8 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 40307c0:	e13ffc17 	ldw	r4,-16(fp)
 40307c4:	40306b80 	call	40306b8 <altera_avalon_mailbox_status>
 40307c8:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 40307cc:	e0bffb17 	ldw	r2,-20(fp)
 40307d0:	103ffb1e 	bne	r2,zero,40307c0 <__alt_data_end+0xffff07c0>
 40307d4:	00000e06 	br	4030810 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 40307d8:	e13ffc17 	ldw	r4,-16(fp)
 40307dc:	40306b80 	call	40306b8 <altera_avalon_mailbox_status>
 40307e0:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 40307e4:	e0bffe17 	ldw	r2,-8(fp)
 40307e8:	10bfffc4 	addi	r2,r2,-1
 40307ec:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 40307f0:	e0bffb17 	ldw	r2,-20(fp)
 40307f4:	10000226 	beq	r2,zero,4030800 <altera_avalon_mailbox_send+0xd0>
 40307f8:	e0bffe17 	ldw	r2,-8(fp)
 40307fc:	103ff61e 	bne	r2,zero,40307d8 <__alt_data_end+0xffff07d8>
            if (timeout == 0)
 4030800:	e0bffe17 	ldw	r2,-8(fp)
 4030804:	1000021e 	bne	r2,zero,4030810 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4030808:	00bff084 	movi	r2,-62
 403080c:	00001706 	br	403086c <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 4030810:	e17ffd17 	ldw	r5,-12(fp)
 4030814:	e13ffc17 	ldw	r4,-16(fp)
 4030818:	40301140 	call	4030114 <altera_avalon_mailbox_post>
 403081c:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 4030820:	e0bffc17 	ldw	r2,-16(fp)
 4030824:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 4030828:	e0bffc17 	ldw	r2,-16(fp)
 403082c:	10001105 	stb	zero,68(r2)
        return status;
 4030830:	e0bff917 	ldw	r2,-28(fp)
 4030834:	00000d06 	br	403086c <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4030838:	e0bffc17 	ldw	r2,-16(fp)
 403083c:	10800a17 	ldw	r2,40(r2)
 4030840:	10800304 	addi	r2,r2,12
 4030844:	10800037 	ldwio	r2,0(r2)
 4030848:	10800094 	ori	r2,r2,2
 403084c:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4030850:	e0bffc17 	ldw	r2,-16(fp)
 4030854:	10800a17 	ldw	r2,40(r2)
 4030858:	10800304 	addi	r2,r2,12
 403085c:	1007883a 	mov	r3,r2
 4030860:	e0bffa17 	ldw	r2,-24(fp)
 4030864:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 4030868:	0005883a 	mov	r2,zero
}
 403086c:	e037883a 	mov	sp,fp
 4030870:	dfc00117 	ldw	ra,4(sp)
 4030874:	df000017 	ldw	fp,0(sp)
 4030878:	dec00204 	addi	sp,sp,8
 403087c:	f800283a 	ret

04030880 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 4030880:	defff904 	addi	sp,sp,-28
 4030884:	dfc00615 	stw	ra,24(sp)
 4030888:	df000515 	stw	fp,20(sp)
 403088c:	df000504 	addi	fp,sp,20
 4030890:	e13ffd15 	stw	r4,-12(fp)
 4030894:	e17ffe15 	stw	r5,-8(fp)
 4030898:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 403089c:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 40308a0:	e0bffd17 	ldw	r2,-12(fp)
 40308a4:	10003a26 	beq	r2,zero,4030990 <altera_avalon_mailbox_retrieve_poll+0x110>
 40308a8:	e0bffe17 	ldw	r2,-8(fp)
 40308ac:	10003826 	beq	r2,zero,4030990 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 40308b0:	e0bffd17 	ldw	r2,-12(fp)
 40308b4:	10800a17 	ldw	r2,40(r2)
 40308b8:	10800304 	addi	r2,r2,12
 40308bc:	10800037 	ldwio	r2,0(r2)
 40308c0:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 40308c4:	e0bffd17 	ldw	r2,-12(fp)
 40308c8:	10800a17 	ldw	r2,40(r2)
 40308cc:	10800304 	addi	r2,r2,12
 40308d0:	1009883a 	mov	r4,r2
 40308d4:	e0fffc17 	ldw	r3,-16(fp)
 40308d8:	00bfff84 	movi	r2,-2
 40308dc:	1884703a 	and	r2,r3,r2
 40308e0:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 40308e4:	e0bfff17 	ldw	r2,-4(fp)
 40308e8:	1000061e 	bne	r2,zero,4030904 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 40308ec:	e13ffd17 	ldw	r4,-12(fp)
 40308f0:	40306b80 	call	40306b8 <altera_avalon_mailbox_status>
 40308f4:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 40308f8:	e0bffb17 	ldw	r2,-20(fp)
 40308fc:	103ffb26 	beq	r2,zero,40308ec <__alt_data_end+0xffff08ec>
 4030900:	00000a06 	br	403092c <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 4030904:	e13ffd17 	ldw	r4,-12(fp)
 4030908:	40306b80 	call	40306b8 <altera_avalon_mailbox_status>
 403090c:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 4030910:	e0bfff17 	ldw	r2,-4(fp)
 4030914:	10bfffc4 	addi	r2,r2,-1
 4030918:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 403091c:	e0bffb17 	ldw	r2,-20(fp)
 4030920:	1000021e 	bne	r2,zero,403092c <altera_avalon_mailbox_retrieve_poll+0xac>
 4030924:	e0bfff17 	ldw	r2,-4(fp)
 4030928:	103ff61e 	bne	r2,zero,4030904 <__alt_data_end+0xffff0904>
        }

        /* if timeout, status remain 0 */
        if (status)
 403092c:	e0bffb17 	ldw	r2,-20(fp)
 4030930:	10000d26 	beq	r2,zero,4030968 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4030934:	e0bffe17 	ldw	r2,-8(fp)
 4030938:	10800104 	addi	r2,r2,4
 403093c:	e0fffd17 	ldw	r3,-12(fp)
 4030940:	18c00a17 	ldw	r3,40(r3)
 4030944:	18c00104 	addi	r3,r3,4
 4030948:	18c00037 	ldwio	r3,0(r3)
 403094c:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4030950:	e0bffd17 	ldw	r2,-12(fp)
 4030954:	10800a17 	ldw	r2,40(r2)
 4030958:	10800037 	ldwio	r2,0(r2)
 403095c:	1007883a 	mov	r3,r2
 4030960:	e0bffe17 	ldw	r2,-8(fp)
 4030964:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4030968:	e0bffd17 	ldw	r2,-12(fp)
 403096c:	10800a17 	ldw	r2,40(r2)
 4030970:	10800304 	addi	r2,r2,12
 4030974:	1007883a 	mov	r3,r2
 4030978:	e0bffc17 	ldw	r2,-16(fp)
 403097c:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4030980:	e0bffb17 	ldw	r2,-20(fp)
 4030984:	10000226 	beq	r2,zero,4030990 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4030988:	0005883a 	mov	r2,zero
 403098c:	00000606 	br	40309a8 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4030990:	e0bffe17 	ldw	r2,-8(fp)
 4030994:	10800104 	addi	r2,r2,4
 4030998:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 403099c:	e0bffe17 	ldw	r2,-8(fp)
 40309a0:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 40309a4:	00bffa84 	movi	r2,-22
}
 40309a8:	e037883a 	mov	sp,fp
 40309ac:	dfc00117 	ldw	ra,4(sp)
 40309b0:	df000017 	ldw	fp,0(sp)
 40309b4:	dec00204 	addi	sp,sp,8
 40309b8:	f800283a 	ret

040309bc <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 40309bc:	defff904 	addi	sp,sp,-28
 40309c0:	df000615 	stw	fp,24(sp)
 40309c4:	df000604 	addi	fp,sp,24
 40309c8:	e13ffe15 	stw	r4,-8(fp)
 40309cc:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 40309d0:	e03ffa15 	stw	zero,-24(fp)
 40309d4:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 40309d8:	000b883a 	mov	r5,zero
 40309dc:	e13ffe17 	ldw	r4,-8(fp)
 40309e0:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 40309e4:	e13fff17 	ldw	r4,-4(fp)
 40309e8:	2008913a 	slli	r4,r4,4
 40309ec:	200b883a 	mov	r5,r4
 40309f0:	e13ffe17 	ldw	r4,-8(fp)
 40309f4:	2149883a 	add	r4,r4,r5
 40309f8:	21000037 	ldwio	r4,0(r4)
 40309fc:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 4030a00:	e13fff17 	ldw	r4,-4(fp)
 4030a04:	2008913a 	slli	r4,r4,4
 4030a08:	21000104 	addi	r4,r4,4
 4030a0c:	200b883a 	mov	r5,r4
 4030a10:	e13ffe17 	ldw	r4,-8(fp)
 4030a14:	2149883a 	add	r4,r4,r5
 4030a18:	21000037 	ldwio	r4,0(r4)
 4030a1c:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 4030a20:	e13ffd17 	ldw	r4,-12(fp)
 4030a24:	2011883a 	mov	r8,r4
 4030a28:	0013883a 	mov	r9,zero
 4030a2c:	4006983a 	sll	r3,r8,zero
 4030a30:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 4030a34:	e13ffc17 	ldw	r4,-16(fp)
 4030a38:	200d883a 	mov	r6,r4
 4030a3c:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 4030a40:	1188b03a 	or	r4,r2,r6
 4030a44:	e13ffa15 	stw	r4,-24(fp)
 4030a48:	19c4b03a 	or	r2,r3,r7
 4030a4c:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 4030a50:	e0bffa17 	ldw	r2,-24(fp)
 4030a54:	e0fffb17 	ldw	r3,-20(fp)
 4030a58:	1009883a 	mov	r4,r2
 4030a5c:	180b883a 	mov	r5,r3
}
 4030a60:	2005883a 	mov	r2,r4
 4030a64:	2807883a 	mov	r3,r5
 4030a68:	e037883a 	mov	sp,fp
 4030a6c:	df000017 	ldw	fp,0(sp)
 4030a70:	dec00104 	addi	sp,sp,4
 4030a74:	f800283a 	ret

04030a78 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 4030a78:	defffd04 	addi	sp,sp,-12
 4030a7c:	dfc00215 	stw	ra,8(sp)
 4030a80:	df000115 	stw	fp,4(sp)
 4030a84:	df000104 	addi	fp,sp,4
 4030a88:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 4030a8c:	000b883a 	mov	r5,zero
 4030a90:	e13fff17 	ldw	r4,-4(fp)
 4030a94:	40309bc0 	call	40309bc <perf_get_section_time>
 4030a98:	100b883a 	mov	r5,r2
 4030a9c:	180d883a 	mov	r6,r3
 4030aa0:	2807883a 	mov	r3,r5
 4030aa4:	3009883a 	mov	r4,r6
}
 4030aa8:	1805883a 	mov	r2,r3
 4030aac:	2007883a 	mov	r3,r4
 4030ab0:	e037883a 	mov	sp,fp
 4030ab4:	dfc00117 	ldw	ra,4(sp)
 4030ab8:	df000017 	ldw	fp,0(sp)
 4030abc:	dec00204 	addi	sp,sp,8
 4030ac0:	f800283a 	ret

04030ac4 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 4030ac4:	defffd04 	addi	sp,sp,-12
 4030ac8:	df000215 	stw	fp,8(sp)
 4030acc:	df000204 	addi	fp,sp,8
 4030ad0:	e13ffe15 	stw	r4,-8(fp)
 4030ad4:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 4030ad8:	e0bfff17 	ldw	r2,-4(fp)
 4030adc:	1004913a 	slli	r2,r2,4
 4030ae0:	10800204 	addi	r2,r2,8
 4030ae4:	1007883a 	mov	r3,r2
 4030ae8:	e0bffe17 	ldw	r2,-8(fp)
 4030aec:	10c5883a 	add	r2,r2,r3
 4030af0:	10800037 	ldwio	r2,0(r2)
}
 4030af4:	e037883a 	mov	sp,fp
 4030af8:	df000017 	ldw	fp,0(sp)
 4030afc:	dec00104 	addi	sp,sp,4
 4030b00:	f800283a 	ret

04030b04 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 4030b04:	deffff04 	addi	sp,sp,-4
 4030b08:	df000015 	stw	fp,0(sp)
 4030b0c:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
 4030b10:	00810134 	movhi	r2,1028
 4030b14:	10840004 	addi	r2,r2,4096
#else
    return (void*)0;
#endif
}
 4030b18:	e037883a 	mov	sp,fp
 4030b1c:	df000017 	ldw	fp,0(sp)
 4030b20:	dec00104 	addi	sp,sp,4
 4030b24:	f800283a 	ret

04030b28 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 4030b28:	deffff04 	addi	sp,sp,-4
 4030b2c:	df000015 	stw	fp,0(sp)
 4030b30:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 4030b34:	0080bef4 	movhi	r2,763
 4030b38:	10bc2004 	addi	r2,r2,-3968
}
 4030b3c:	e037883a 	mov	sp,fp
 4030b40:	df000017 	ldw	fp,0(sp)
 4030b44:	dec00104 	addi	sp,sp,4
 4030b48:	f800283a 	ret

04030b4c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 4030b4c:	defffc04 	addi	sp,sp,-16
 4030b50:	dfc00315 	stw	ra,12(sp)
 4030b54:	df000215 	stw	fp,8(sp)
 4030b58:	df000204 	addi	fp,sp,8
 4030b5c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 4030b60:	d1600804 	addi	r5,gp,-32736
 4030b64:	e13fff17 	ldw	r4,-4(fp)
 4030b68:	40320940 	call	4032094 <alt_find_dev>
 4030b6c:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 4030b70:	e0bffe17 	ldw	r2,-8(fp)
}
 4030b74:	e037883a 	mov	sp,fp
 4030b78:	dfc00117 	ldw	ra,4(sp)
 4030b7c:	df000017 	ldw	fp,0(sp)
 4030b80:	dec00204 	addi	sp,sp,8
 4030b84:	f800283a 	ret

04030b88 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 4030b88:	defffd04 	addi	sp,sp,-12
 4030b8c:	df000215 	stw	fp,8(sp)
 4030b90:	df000204 	addi	fp,sp,8
 4030b94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030b98:	e0bfff17 	ldw	r2,-4(fp)
 4030b9c:	10800a17 	ldw	r2,40(r2)
 4030ba0:	10800037 	ldwio	r2,0(r2)
 4030ba4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 4030ba8:	e0bffe17 	ldw	r2,-8(fp)
 4030bac:	10800054 	ori	r2,r2,1
 4030bb0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030bb4:	e0bfff17 	ldw	r2,-4(fp)
 4030bb8:	10800a17 	ldw	r2,40(r2)
 4030bbc:	1007883a 	mov	r3,r2
 4030bc0:	e0bffe17 	ldw	r2,-8(fp)
 4030bc4:	18800035 	stwio	r2,0(r3)
}
 4030bc8:	0001883a 	nop
 4030bcc:	e037883a 	mov	sp,fp
 4030bd0:	df000017 	ldw	fp,0(sp)
 4030bd4:	dec00104 	addi	sp,sp,4
 4030bd8:	f800283a 	ret

04030bdc <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 4030bdc:	defffd04 	addi	sp,sp,-12
 4030be0:	df000215 	stw	fp,8(sp)
 4030be4:	df000204 	addi	fp,sp,8
 4030be8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030bec:	e0bfff17 	ldw	r2,-4(fp)
 4030bf0:	10800a17 	ldw	r2,40(r2)
 4030bf4:	10800037 	ldwio	r2,0(r2)
 4030bf8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 4030bfc:	e0fffe17 	ldw	r3,-8(fp)
 4030c00:	00bfff84 	movi	r2,-2
 4030c04:	1884703a 	and	r2,r3,r2
 4030c08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030c0c:	e0bfff17 	ldw	r2,-4(fp)
 4030c10:	10800a17 	ldw	r2,40(r2)
 4030c14:	1007883a 	mov	r3,r2
 4030c18:	e0bffe17 	ldw	r2,-8(fp)
 4030c1c:	18800035 	stwio	r2,0(r3)
}
 4030c20:	0001883a 	nop
 4030c24:	e037883a 	mov	sp,fp
 4030c28:	df000017 	ldw	fp,0(sp)
 4030c2c:	dec00104 	addi	sp,sp,4
 4030c30:	f800283a 	ret

04030c34 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 4030c34:	defffd04 	addi	sp,sp,-12
 4030c38:	df000215 	stw	fp,8(sp)
 4030c3c:	df000204 	addi	fp,sp,8
 4030c40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030c44:	e0bfff17 	ldw	r2,-4(fp)
 4030c48:	10800a17 	ldw	r2,40(r2)
 4030c4c:	10800037 	ldwio	r2,0(r2)
 4030c50:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 4030c54:	e0bffe17 	ldw	r2,-8(fp)
 4030c58:	10800094 	ori	r2,r2,2
 4030c5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030c60:	e0bfff17 	ldw	r2,-4(fp)
 4030c64:	10800a17 	ldw	r2,40(r2)
 4030c68:	1007883a 	mov	r3,r2
 4030c6c:	e0bffe17 	ldw	r2,-8(fp)
 4030c70:	18800035 	stwio	r2,0(r3)
}
 4030c74:	0001883a 	nop
 4030c78:	e037883a 	mov	sp,fp
 4030c7c:	df000017 	ldw	fp,0(sp)
 4030c80:	dec00104 	addi	sp,sp,4
 4030c84:	f800283a 	ret

04030c88 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 4030c88:	defffd04 	addi	sp,sp,-12
 4030c8c:	df000215 	stw	fp,8(sp)
 4030c90:	df000204 	addi	fp,sp,8
 4030c94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030c98:	e0bfff17 	ldw	r2,-4(fp)
 4030c9c:	10800a17 	ldw	r2,40(r2)
 4030ca0:	10800037 	ldwio	r2,0(r2)
 4030ca4:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 4030ca8:	e0fffe17 	ldw	r3,-8(fp)
 4030cac:	00bfff44 	movi	r2,-3
 4030cb0:	1884703a 	and	r2,r3,r2
 4030cb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030cb8:	e0bfff17 	ldw	r2,-4(fp)
 4030cbc:	10800a17 	ldw	r2,40(r2)
 4030cc0:	1007883a 	mov	r3,r2
 4030cc4:	e0bffe17 	ldw	r2,-8(fp)
 4030cc8:	18800035 	stwio	r2,0(r3)
}
 4030ccc:	0001883a 	nop
 4030cd0:	e037883a 	mov	sp,fp
 4030cd4:	df000017 	ldw	fp,0(sp)
 4030cd8:	dec00104 	addi	sp,sp,4
 4030cdc:	f800283a 	ret

04030ce0 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 4030ce0:	defffd04 	addi	sp,sp,-12
 4030ce4:	df000215 	stw	fp,8(sp)
 4030ce8:	df000204 	addi	fp,sp,8
 4030cec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030cf0:	e0bfff17 	ldw	r2,-4(fp)
 4030cf4:	10800a17 	ldw	r2,40(r2)
 4030cf8:	10800037 	ldwio	r2,0(r2)
 4030cfc:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 4030d00:	e0bffe17 	ldw	r2,-8(fp)
 4030d04:	1080400c 	andi	r2,r2,256
 4030d08:	1004c03a 	cmpne	r2,r2,zero
 4030d0c:	10803fcc 	andi	r2,r2,255
}
 4030d10:	e037883a 	mov	sp,fp
 4030d14:	df000017 	ldw	fp,0(sp)
 4030d18:	dec00104 	addi	sp,sp,4
 4030d1c:	f800283a 	ret

04030d20 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 4030d20:	defffd04 	addi	sp,sp,-12
 4030d24:	df000215 	stw	fp,8(sp)
 4030d28:	df000204 	addi	fp,sp,8
 4030d2c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030d30:	e0bfff17 	ldw	r2,-4(fp)
 4030d34:	10800a17 	ldw	r2,40(r2)
 4030d38:	10800037 	ldwio	r2,0(r2)
 4030d3c:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 4030d40:	e0bffe17 	ldw	r2,-8(fp)
 4030d44:	1080800c 	andi	r2,r2,512
 4030d48:	1004c03a 	cmpne	r2,r2,zero
 4030d4c:	10803fcc 	andi	r2,r2,255
}
 4030d50:	e037883a 	mov	sp,fp
 4030d54:	df000017 	ldw	fp,0(sp)
 4030d58:	dec00104 	addi	sp,sp,4
 4030d5c:	f800283a 	ret

04030d60 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 4030d60:	defffd04 	addi	sp,sp,-12
 4030d64:	df000215 	stw	fp,8(sp)
 4030d68:	df000204 	addi	fp,sp,8
 4030d6c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4030d70:	e0bfff17 	ldw	r2,-4(fp)
 4030d74:	10800a17 	ldw	r2,40(r2)
 4030d78:	10800037 	ldwio	r2,0(r2)
 4030d7c:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 4030d80:	e0bffe17 	ldw	r2,-8(fp)
 4030d84:	10800114 	ori	r2,r2,4
 4030d88:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 4030d8c:	e0bffe17 	ldw	r2,-8(fp)
 4030d90:	10800214 	ori	r2,r2,8
 4030d94:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030d98:	e0bfff17 	ldw	r2,-4(fp)
 4030d9c:	10800a17 	ldw	r2,40(r2)
 4030da0:	1007883a 	mov	r3,r2
 4030da4:	e0bffe17 	ldw	r2,-8(fp)
 4030da8:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 4030dac:	e0fffe17 	ldw	r3,-8(fp)
 4030db0:	00bffec4 	movi	r2,-5
 4030db4:	1884703a 	and	r2,r3,r2
 4030db8:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 4030dbc:	e0fffe17 	ldw	r3,-8(fp)
 4030dc0:	00bffdc4 	movi	r2,-9
 4030dc4:	1884703a 	and	r2,r3,r2
 4030dc8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4030dcc:	e0bfff17 	ldw	r2,-4(fp)
 4030dd0:	10800a17 	ldw	r2,40(r2)
 4030dd4:	1007883a 	mov	r3,r2
 4030dd8:	e0bffe17 	ldw	r2,-8(fp)
 4030ddc:	18800035 	stwio	r2,0(r3)
}
 4030de0:	0001883a 	nop
 4030de4:	e037883a 	mov	sp,fp
 4030de8:	df000017 	ldw	fp,0(sp)
 4030dec:	dec00104 	addi	sp,sp,4
 4030df0:	f800283a 	ret

04030df4 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 4030df4:	defffc04 	addi	sp,sp,-16
 4030df8:	df000315 	stw	fp,12(sp)
 4030dfc:	df000304 	addi	fp,sp,12
 4030e00:	e13ffe15 	stw	r4,-8(fp)
 4030e04:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4030e08:	e0bffe17 	ldw	r2,-8(fp)
 4030e0c:	10800a17 	ldw	r2,40(r2)
 4030e10:	10800104 	addi	r2,r2,4
 4030e14:	10800037 	ldwio	r2,0(r2)
 4030e18:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 4030e1c:	e0bfff17 	ldw	r2,-4(fp)
 4030e20:	1000041e 	bne	r2,zero,4030e34 <alt_up_audio_read_fifo_avail+0x40>
 4030e24:	e0bffd17 	ldw	r2,-12(fp)
 4030e28:	10bfc00c 	andi	r2,r2,65280
 4030e2c:	1004d23a 	srli	r2,r2,8
 4030e30:	00000206 	br	4030e3c <alt_up_audio_read_fifo_avail+0x48>
 4030e34:	e0bffd17 	ldw	r2,-12(fp)
 4030e38:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4030e3c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 4030e40:	e0bffd17 	ldw	r2,-12(fp)
}
 4030e44:	e037883a 	mov	sp,fp
 4030e48:	df000017 	ldw	fp,0(sp)
 4030e4c:	dec00104 	addi	sp,sp,4
 4030e50:	f800283a 	ret

04030e54 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4030e54:	defffa04 	addi	sp,sp,-24
 4030e58:	dfc00515 	stw	ra,20(sp)
 4030e5c:	df000415 	stw	fp,16(sp)
 4030e60:	df000404 	addi	fp,sp,16
 4030e64:	e13ffd15 	stw	r4,-12(fp)
 4030e68:	e17ffe15 	stw	r5,-8(fp)
 4030e6c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 4030e70:	01400044 	movi	r5,1
 4030e74:	e13ffd17 	ldw	r4,-12(fp)
 4030e78:	4030df40 	call	4030df4 <alt_up_audio_read_fifo_avail>
 4030e7c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4030e80:	e0bffc17 	ldw	r2,-16(fp)
 4030e84:	10801868 	cmpgeui	r2,r2,97
 4030e88:	1000021e 	bne	r2,zero,4030e94 <alt_up_audio_record_r+0x40>
		return 0;
 4030e8c:	0005883a 	mov	r2,zero
 4030e90:	00000506 	br	4030ea8 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4030e94:	01c00044 	movi	r7,1
 4030e98:	e1bfff17 	ldw	r6,-4(fp)
 4030e9c:	e17ffe17 	ldw	r5,-8(fp)
 4030ea0:	e13ffd17 	ldw	r4,-12(fp)
 4030ea4:	40310540 	call	4031054 <alt_up_audio_read_fifo>
}
 4030ea8:	e037883a 	mov	sp,fp
 4030eac:	dfc00117 	ldw	ra,4(sp)
 4030eb0:	df000017 	ldw	fp,0(sp)
 4030eb4:	dec00204 	addi	sp,sp,8
 4030eb8:	f800283a 	ret

04030ebc <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4030ebc:	defffa04 	addi	sp,sp,-24
 4030ec0:	dfc00515 	stw	ra,20(sp)
 4030ec4:	df000415 	stw	fp,16(sp)
 4030ec8:	df000404 	addi	fp,sp,16
 4030ecc:	e13ffd15 	stw	r4,-12(fp)
 4030ed0:	e17ffe15 	stw	r5,-8(fp)
 4030ed4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 4030ed8:	000b883a 	mov	r5,zero
 4030edc:	e13ffd17 	ldw	r4,-12(fp)
 4030ee0:	4030df40 	call	4030df4 <alt_up_audio_read_fifo_avail>
 4030ee4:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4030ee8:	e0bffc17 	ldw	r2,-16(fp)
 4030eec:	10801868 	cmpgeui	r2,r2,97
 4030ef0:	1000021e 	bne	r2,zero,4030efc <alt_up_audio_record_l+0x40>
		return 0;
 4030ef4:	0005883a 	mov	r2,zero
 4030ef8:	00000506 	br	4030f10 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 4030efc:	000f883a 	mov	r7,zero
 4030f00:	e1bfff17 	ldw	r6,-4(fp)
 4030f04:	e17ffe17 	ldw	r5,-8(fp)
 4030f08:	e13ffd17 	ldw	r4,-12(fp)
 4030f0c:	40310540 	call	4031054 <alt_up_audio_read_fifo>
}
 4030f10:	e037883a 	mov	sp,fp
 4030f14:	dfc00117 	ldw	ra,4(sp)
 4030f18:	df000017 	ldw	fp,0(sp)
 4030f1c:	dec00204 	addi	sp,sp,8
 4030f20:	f800283a 	ret

04030f24 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 4030f24:	defffc04 	addi	sp,sp,-16
 4030f28:	df000315 	stw	fp,12(sp)
 4030f2c:	df000304 	addi	fp,sp,12
 4030f30:	e13ffe15 	stw	r4,-8(fp)
 4030f34:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4030f38:	e0bffe17 	ldw	r2,-8(fp)
 4030f3c:	10800a17 	ldw	r2,40(r2)
 4030f40:	10800104 	addi	r2,r2,4
 4030f44:	10800037 	ldwio	r2,0(r2)
 4030f48:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4030f4c:	e0bfff17 	ldw	r2,-4(fp)
 4030f50:	1000031e 	bne	r2,zero,4030f60 <alt_up_audio_write_fifo_space+0x3c>
 4030f54:	e0bffd17 	ldw	r2,-12(fp)
 4030f58:	1004d63a 	srli	r2,r2,24
 4030f5c:	00000306 	br	4030f6c <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 4030f60:	e0bffd17 	ldw	r2,-12(fp)
 4030f64:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4030f68:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4030f6c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 4030f70:	e0bffd17 	ldw	r2,-12(fp)
}
 4030f74:	e037883a 	mov	sp,fp
 4030f78:	df000017 	ldw	fp,0(sp)
 4030f7c:	dec00104 	addi	sp,sp,4
 4030f80:	f800283a 	ret

04030f84 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4030f84:	defffa04 	addi	sp,sp,-24
 4030f88:	dfc00515 	stw	ra,20(sp)
 4030f8c:	df000415 	stw	fp,16(sp)
 4030f90:	df000404 	addi	fp,sp,16
 4030f94:	e13ffd15 	stw	r4,-12(fp)
 4030f98:	e17ffe15 	stw	r5,-8(fp)
 4030f9c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 4030fa0:	01400044 	movi	r5,1
 4030fa4:	e13ffd17 	ldw	r4,-12(fp)
 4030fa8:	4030f240 	call	4030f24 <alt_up_audio_write_fifo_space>
 4030fac:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 4030fb0:	e0bffc17 	ldw	r2,-16(fp)
 4030fb4:	10801868 	cmpgeui	r2,r2,97
 4030fb8:	1000021e 	bne	r2,zero,4030fc4 <alt_up_audio_play_r+0x40>
		return 0;
 4030fbc:	0005883a 	mov	r2,zero
 4030fc0:	00000506 	br	4030fd8 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4030fc4:	01c00044 	movi	r7,1
 4030fc8:	e1bfff17 	ldw	r6,-4(fp)
 4030fcc:	e17ffe17 	ldw	r5,-8(fp)
 4030fd0:	e13ffd17 	ldw	r4,-12(fp)
 4030fd4:	40311340 	call	4031134 <alt_up_audio_write_fifo>
}
 4030fd8:	e037883a 	mov	sp,fp
 4030fdc:	dfc00117 	ldw	ra,4(sp)
 4030fe0:	df000017 	ldw	fp,0(sp)
 4030fe4:	dec00204 	addi	sp,sp,8
 4030fe8:	f800283a 	ret

04030fec <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4030fec:	defffa04 	addi	sp,sp,-24
 4030ff0:	dfc00515 	stw	ra,20(sp)
 4030ff4:	df000415 	stw	fp,16(sp)
 4030ff8:	df000404 	addi	fp,sp,16
 4030ffc:	e13ffd15 	stw	r4,-12(fp)
 4031000:	e17ffe15 	stw	r5,-8(fp)
 4031004:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 4031008:	000b883a 	mov	r5,zero
 403100c:	e13ffd17 	ldw	r4,-12(fp)
 4031010:	4030f240 	call	4030f24 <alt_up_audio_write_fifo_space>
 4031014:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 4031018:	e0bffc17 	ldw	r2,-16(fp)
 403101c:	10801868 	cmpgeui	r2,r2,97
 4031020:	1000021e 	bne	r2,zero,403102c <alt_up_audio_play_l+0x40>
		return 0;
 4031024:	0005883a 	mov	r2,zero
 4031028:	00000506 	br	4031040 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 403102c:	000f883a 	mov	r7,zero
 4031030:	e1bfff17 	ldw	r6,-4(fp)
 4031034:	e17ffe17 	ldw	r5,-8(fp)
 4031038:	e13ffd17 	ldw	r4,-12(fp)
 403103c:	40311340 	call	4031134 <alt_up_audio_write_fifo>
}
 4031040:	e037883a 	mov	sp,fp
 4031044:	dfc00117 	ldw	ra,4(sp)
 4031048:	df000017 	ldw	fp,0(sp)
 403104c:	dec00204 	addi	sp,sp,8
 4031050:	f800283a 	ret

04031054 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 4031054:	defff904 	addi	sp,sp,-28
 4031058:	df000615 	stw	fp,24(sp)
 403105c:	df000604 	addi	fp,sp,24
 4031060:	e13ffc15 	stw	r4,-16(fp)
 4031064:	e17ffd15 	stw	r5,-12(fp)
 4031068:	e1bffe15 	stw	r6,-8(fp)
 403106c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 4031070:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 4031074:	00002506 	br	403110c <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4031078:	e0bffc17 	ldw	r2,-16(fp)
 403107c:	10800a17 	ldw	r2,40(r2)
 4031080:	10800104 	addi	r2,r2,4
 4031084:	10800037 	ldwio	r2,0(r2)
 4031088:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 403108c:	e0bfff17 	ldw	r2,-4(fp)
 4031090:	1000041e 	bne	r2,zero,40310a4 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 4031094:	e0bffb17 	ldw	r2,-20(fp)
 4031098:	10bfc00c 	andi	r2,r2,65280
			:
 403109c:	1004d23a 	srli	r2,r2,8
 40310a0:	00000206 	br	40310ac <alt_up_audio_read_fifo+0x58>
 40310a4:	e0bffb17 	ldw	r2,-20(fp)
 40310a8:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 40310ac:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 40310b0:	e0bffb17 	ldw	r2,-20(fp)
 40310b4:	10001926 	beq	r2,zero,403111c <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 40310b8:	e0bffa17 	ldw	r2,-24(fp)
 40310bc:	1085883a 	add	r2,r2,r2
 40310c0:	1085883a 	add	r2,r2,r2
 40310c4:	1007883a 	mov	r3,r2
 40310c8:	e0bffd17 	ldw	r2,-12(fp)
 40310cc:	10c5883a 	add	r2,r2,r3
 40310d0:	e0ffff17 	ldw	r3,-4(fp)
 40310d4:	1800051e 	bne	r3,zero,40310ec <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 40310d8:	e0fffc17 	ldw	r3,-16(fp)
 40310dc:	18c00a17 	ldw	r3,40(r3)
 40310e0:	18c00204 	addi	r3,r3,8
 40310e4:	18c00037 	ldwio	r3,0(r3)
 40310e8:	00000406 	br	40310fc <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 40310ec:	e0fffc17 	ldw	r3,-16(fp)
 40310f0:	18c00a17 	ldw	r3,40(r3)
 40310f4:	18c00304 	addi	r3,r3,12
 40310f8:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 40310fc:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 4031100:	e0bffa17 	ldw	r2,-24(fp)
 4031104:	10800044 	addi	r2,r2,1
 4031108:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 403110c:	e0fffa17 	ldw	r3,-24(fp)
 4031110:	e0bffe17 	ldw	r2,-8(fp)
 4031114:	18bfd816 	blt	r3,r2,4031078 <__alt_data_end+0xffff1078>
 4031118:	00000106 	br	4031120 <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 403111c:	0001883a 	nop
		}
	}
	return count;
 4031120:	e0bffa17 	ldw	r2,-24(fp)
}
 4031124:	e037883a 	mov	sp,fp
 4031128:	df000017 	ldw	fp,0(sp)
 403112c:	dec00104 	addi	sp,sp,4
 4031130:	f800283a 	ret

04031134 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 4031134:	defff904 	addi	sp,sp,-28
 4031138:	df000615 	stw	fp,24(sp)
 403113c:	df000604 	addi	fp,sp,24
 4031140:	e13ffc15 	stw	r4,-16(fp)
 4031144:	e17ffd15 	stw	r5,-12(fp)
 4031148:	e1bffe15 	stw	r6,-8(fp)
 403114c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 4031150:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 4031154:	00002f06 	br	4031214 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4031158:	e0bffc17 	ldw	r2,-16(fp)
 403115c:	10800a17 	ldw	r2,40(r2)
 4031160:	10800104 	addi	r2,r2,4
 4031164:	10800037 	ldwio	r2,0(r2)
 4031168:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 403116c:	e0bfff17 	ldw	r2,-4(fp)
 4031170:	1000031e 	bne	r2,zero,4031180 <alt_up_audio_write_fifo+0x4c>
 4031174:	e0bffb17 	ldw	r2,-20(fp)
 4031178:	1004d63a 	srli	r2,r2,24
 403117c:	00000306 	br	403118c <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 4031180:	e0bffb17 	ldw	r2,-20(fp)
 4031184:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4031188:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 403118c:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 4031190:	e0bffb17 	ldw	r2,-20(fp)
 4031194:	10002326 	beq	r2,zero,4031224 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 4031198:	e0bfff17 	ldw	r2,-4(fp)
 403119c:	10000f1e 	bne	r2,zero,40311dc <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 40311a0:	e0bffc17 	ldw	r2,-16(fp)
 40311a4:	10800a17 	ldw	r2,40(r2)
 40311a8:	10800204 	addi	r2,r2,8
 40311ac:	1009883a 	mov	r4,r2
 40311b0:	e0bffa17 	ldw	r2,-24(fp)
 40311b4:	10c00044 	addi	r3,r2,1
 40311b8:	e0fffa15 	stw	r3,-24(fp)
 40311bc:	1085883a 	add	r2,r2,r2
 40311c0:	1085883a 	add	r2,r2,r2
 40311c4:	1007883a 	mov	r3,r2
 40311c8:	e0bffd17 	ldw	r2,-12(fp)
 40311cc:	10c5883a 	add	r2,r2,r3
 40311d0:	10800017 	ldw	r2,0(r2)
 40311d4:	20800035 	stwio	r2,0(r4)
 40311d8:	00000e06 	br	4031214 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 40311dc:	e0bffc17 	ldw	r2,-16(fp)
 40311e0:	10800a17 	ldw	r2,40(r2)
 40311e4:	10800304 	addi	r2,r2,12
 40311e8:	1009883a 	mov	r4,r2
 40311ec:	e0bffa17 	ldw	r2,-24(fp)
 40311f0:	10c00044 	addi	r3,r2,1
 40311f4:	e0fffa15 	stw	r3,-24(fp)
 40311f8:	1085883a 	add	r2,r2,r2
 40311fc:	1085883a 	add	r2,r2,r2
 4031200:	1007883a 	mov	r3,r2
 4031204:	e0bffd17 	ldw	r2,-12(fp)
 4031208:	10c5883a 	add	r2,r2,r3
 403120c:	10800017 	ldw	r2,0(r2)
 4031210:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 4031214:	e0fffa17 	ldw	r3,-24(fp)
 4031218:	e0bffe17 	ldw	r2,-8(fp)
 403121c:	18bfce16 	blt	r3,r2,4031158 <__alt_data_end+0xffff1158>
 4031220:	00000106 	br	4031228 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 4031224:	0001883a 	nop
		}
	}
	return count;
 4031228:	e0bffa17 	ldw	r2,-24(fp)
}
 403122c:	e037883a 	mov	sp,fp
 4031230:	df000017 	ldw	fp,0(sp)
 4031234:	dec00104 	addi	sp,sp,4
 4031238:	f800283a 	ret

0403123c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 403123c:	defffd04 	addi	sp,sp,-12
 4031240:	df000215 	stw	fp,8(sp)
 4031244:	df000204 	addi	fp,sp,8
 4031248:	e13ffe15 	stw	r4,-8(fp)
 403124c:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 4031250:	e0bfff17 	ldw	r2,-4(fp)
 4031254:	1000051e 	bne	r2,zero,403126c <alt_up_audio_read_fifo_head+0x30>
 4031258:	e0bffe17 	ldw	r2,-8(fp)
 403125c:	10800a17 	ldw	r2,40(r2)
 4031260:	10800204 	addi	r2,r2,8
 4031264:	10800037 	ldwio	r2,0(r2)
 4031268:	00000406 	br	403127c <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 403126c:	e0bffe17 	ldw	r2,-8(fp)
 4031270:	10800a17 	ldw	r2,40(r2)
 4031274:	10800304 	addi	r2,r2,12
 4031278:	10800037 	ldwio	r2,0(r2)
}
 403127c:	e037883a 	mov	sp,fp
 4031280:	df000017 	ldw	fp,0(sp)
 4031284:	dec00104 	addi	sp,sp,4
 4031288:	f800283a 	ret

0403128c <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 403128c:	defffc04 	addi	sp,sp,-16
 4031290:	df000315 	stw	fp,12(sp)
 4031294:	df000304 	addi	fp,sp,12
 4031298:	e13ffd15 	stw	r4,-12(fp)
 403129c:	e17ffe15 	stw	r5,-8(fp)
 40312a0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 40312a4:	e0bfff17 	ldw	r2,-4(fp)
 40312a8:	1000071e 	bne	r2,zero,40312c8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 40312ac:	e0bffd17 	ldw	r2,-12(fp)
 40312b0:	10800a17 	ldw	r2,40(r2)
 40312b4:	10800204 	addi	r2,r2,8
 40312b8:	1007883a 	mov	r3,r2
 40312bc:	e0bffe17 	ldw	r2,-8(fp)
 40312c0:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 40312c4:	00000606 	br	40312e0 <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 40312c8:	e0bffd17 	ldw	r2,-12(fp)
 40312cc:	10800a17 	ldw	r2,40(r2)
 40312d0:	10800304 	addi	r2,r2,12
 40312d4:	1007883a 	mov	r3,r2
 40312d8:	e0bffe17 	ldw	r2,-8(fp)
 40312dc:	18800035 	stwio	r2,0(r3)
}
 40312e0:	0001883a 	nop
 40312e4:	e037883a 	mov	sp,fp
 40312e8:	df000017 	ldw	fp,0(sp)
 40312ec:	dec00104 	addi	sp,sp,4
 40312f0:	f800283a 	ret

040312f4 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 40312f4:	defffc04 	addi	sp,sp,-16
 40312f8:	dfc00315 	stw	ra,12(sp)
 40312fc:	df000215 	stw	fp,8(sp)
 4031300:	df000204 	addi	fp,sp,8
 4031304:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 4031308:	d1600804 	addi	r5,gp,-32736
 403130c:	e13fff17 	ldw	r4,-4(fp)
 4031310:	40320940 	call	4032094 <alt_find_dev>
 4031314:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 4031318:	e0bffe17 	ldw	r2,-8(fp)
 403131c:	10800a17 	ldw	r2,40(r2)
 4031320:	10800104 	addi	r2,r2,4
 4031324:	10800037 	ldwio	r2,0(r2)
 4031328:	10803fec 	andhi	r2,r2,255
 403132c:	1005d43a 	srai	r2,r2,16
 4031330:	1007883a 	mov	r3,r2
 4031334:	e0bffe17 	ldw	r2,-8(fp)
 4031338:	10c00b15 	stw	r3,44(r2)

  return dev;
 403133c:	e0bffe17 	ldw	r2,-8(fp)
}
 4031340:	e037883a 	mov	sp,fp
 4031344:	dfc00117 	ldw	ra,4(sp)
 4031348:	df000017 	ldw	fp,0(sp)
 403134c:	dec00204 	addi	sp,sp,8
 4031350:	f800283a 	ret

04031354 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4031354:	defffc04 	addi	sp,sp,-16
 4031358:	df000315 	stw	fp,12(sp)
 403135c:	df000304 	addi	fp,sp,12
 4031360:	e13ffd15 	stw	r4,-12(fp)
 4031364:	e17ffe15 	stw	r5,-8(fp)
 4031368:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 403136c:	e0bffd17 	ldw	r2,-12(fp)
 4031370:	10800a17 	ldw	r2,40(r2)
 4031374:	10800204 	addi	r2,r2,8
 4031378:	1007883a 	mov	r3,r2
 403137c:	e0bffe17 	ldw	r2,-8(fp)
 4031380:	10803fcc 	andi	r2,r2,255
 4031384:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 4031388:	e0bffd17 	ldw	r2,-12(fp)
 403138c:	10800a17 	ldw	r2,40(r2)
 4031390:	10800304 	addi	r2,r2,12
 4031394:	1007883a 	mov	r3,r2
 4031398:	e0bfff17 	ldw	r2,-4(fp)
 403139c:	10bfffcc 	andi	r2,r2,65535
 40313a0:	18800035 	stwio	r2,0(r3)

	return 0;
 40313a4:	0005883a 	mov	r2,zero
}
 40313a8:	e037883a 	mov	sp,fp
 40313ac:	df000017 	ldw	fp,0(sp)
 40313b0:	dec00104 	addi	sp,sp,4
 40313b4:	f800283a 	ret

040313b8 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 40313b8:	defffb04 	addi	sp,sp,-20
 40313bc:	dfc00415 	stw	ra,16(sp)
 40313c0:	df000315 	stw	fp,12(sp)
 40313c4:	df000304 	addi	fp,sp,12
 40313c8:	e13ffd15 	stw	r4,-12(fp)
 40313cc:	e17ffe15 	stw	r5,-8(fp)
 40313d0:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 40313d4:	e0bffd17 	ldw	r2,-12(fp)
 40313d8:	10800a17 	ldw	r2,40(r2)
 40313dc:	10800204 	addi	r2,r2,8
 40313e0:	1007883a 	mov	r3,r2
 40313e4:	e0bffe17 	ldw	r2,-8(fp)
 40313e8:	10803fcc 	andi	r2,r2,255
 40313ec:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 40313f0:	e0bffd17 	ldw	r2,-12(fp)
 40313f4:	10800a17 	ldw	r2,40(r2)
 40313f8:	10800304 	addi	r2,r2,12
 40313fc:	10800037 	ldwio	r2,0(r2)
 4031400:	1007883a 	mov	r3,r2
 4031404:	e0bfff17 	ldw	r2,-4(fp)
 4031408:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 403140c:	e13ffd17 	ldw	r4,-12(fp)
 4031410:	40314dc0 	call	40314dc <alt_up_av_config_read_acknowledge>
 4031414:	10000226 	beq	r2,zero,4031420 <alt_up_av_config_read_data+0x68>
		return -1;
 4031418:	00bfffc4 	movi	r2,-1
 403141c:	00000106 	br	4031424 <alt_up_av_config_read_data+0x6c>

	return 0;
 4031420:	0005883a 	mov	r2,zero
}
 4031424:	e037883a 	mov	sp,fp
 4031428:	dfc00117 	ldw	ra,4(sp)
 403142c:	df000017 	ldw	fp,0(sp)
 4031430:	dec00204 	addi	sp,sp,8
 4031434:	f800283a 	ret

04031438 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 4031438:	defffe04 	addi	sp,sp,-8
 403143c:	df000115 	stw	fp,4(sp)
 4031440:	df000104 	addi	fp,sp,4
 4031444:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 4031448:	e0bfff17 	ldw	r2,-4(fp)
 403144c:	10800a17 	ldw	r2,40(r2)
 4031450:	1007883a 	mov	r3,r2
 4031454:	00800044 	movi	r2,1
 4031458:	18800025 	stbio	r2,0(r3)
	return 0;
 403145c:	0005883a 	mov	r2,zero
}
 4031460:	e037883a 	mov	sp,fp
 4031464:	df000017 	ldw	fp,0(sp)
 4031468:	dec00104 	addi	sp,sp,4
 403146c:	f800283a 	ret

04031470 <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 4031470:	defffe04 	addi	sp,sp,-8
 4031474:	df000115 	stw	fp,4(sp)
 4031478:	df000104 	addi	fp,sp,4
 403147c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 4031480:	e0bfff17 	ldw	r2,-4(fp)
 4031484:	10800a17 	ldw	r2,40(r2)
 4031488:	1007883a 	mov	r3,r2
 403148c:	00800084 	movi	r2,2
 4031490:	18800025 	stbio	r2,0(r3)
	return 0;
 4031494:	0005883a 	mov	r2,zero
}
 4031498:	e037883a 	mov	sp,fp
 403149c:	df000017 	ldw	fp,0(sp)
 40314a0:	dec00104 	addi	sp,sp,4
 40314a4:	f800283a 	ret

040314a8 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 40314a8:	defffe04 	addi	sp,sp,-8
 40314ac:	df000115 	stw	fp,4(sp)
 40314b0:	df000104 	addi	fp,sp,4
 40314b4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 40314b8:	e0bfff17 	ldw	r2,-4(fp)
 40314bc:	10800a17 	ldw	r2,40(r2)
 40314c0:	0007883a 	mov	r3,zero
 40314c4:	10c00025 	stbio	r3,0(r2)
	return 0;
 40314c8:	0005883a 	mov	r2,zero
}
 40314cc:	e037883a 	mov	sp,fp
 40314d0:	df000017 	ldw	fp,0(sp)
 40314d4:	dec00104 	addi	sp,sp,4
 40314d8:	f800283a 	ret

040314dc <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 40314dc:	defffe04 	addi	sp,sp,-8
 40314e0:	df000115 	stw	fp,4(sp)
 40314e4:	df000104 	addi	fp,sp,4
 40314e8:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 40314ec:	e0bfff17 	ldw	r2,-4(fp)
 40314f0:	10800a17 	ldw	r2,40(r2)
 40314f4:	10800104 	addi	r2,r2,4
 40314f8:	10800037 	ldwio	r2,0(r2)
 40314fc:	1080008c 	andi	r2,r2,2
 4031500:	1005d07a 	srai	r2,r2,1
 4031504:	10000626 	beq	r2,zero,4031520 <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 4031508:	e0bfff17 	ldw	r2,-4(fp)
 403150c:	10800a17 	ldw	r2,40(r2)
 4031510:	10800104 	addi	r2,r2,4
 4031514:	10800037 	ldwio	r2,0(r2)
 4031518:	1080004c 	andi	r2,r2,1
 403151c:	00000106 	br	4031524 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 4031520:	00bfffc4 	movi	r2,-1
}
 4031524:	e037883a 	mov	sp,fp
 4031528:	df000017 	ldw	fp,0(sp)
 403152c:	dec00104 	addi	sp,sp,4
 4031530:	f800283a 	ret

04031534 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 4031534:	defffe04 	addi	sp,sp,-8
 4031538:	df000115 	stw	fp,4(sp)
 403153c:	df000104 	addi	fp,sp,4
 4031540:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 4031544:	e0bfff17 	ldw	r2,-4(fp)
 4031548:	10800a17 	ldw	r2,40(r2)
 403154c:	10800104 	addi	r2,r2,4
 4031550:	10800037 	ldwio	r2,0(r2)
 4031554:	1080008c 	andi	r2,r2,2
 4031558:	1005d07a 	srai	r2,r2,1
}
 403155c:	e037883a 	mov	sp,fp
 4031560:	df000017 	ldw	fp,0(sp)
 4031564:	dec00104 	addi	sp,sp,4
 4031568:	f800283a 	ret

0403156c <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 403156c:	defffa04 	addi	sp,sp,-24
 4031570:	dfc00515 	stw	ra,20(sp)
 4031574:	df000415 	stw	fp,16(sp)
 4031578:	df000404 	addi	fp,sp,16
 403157c:	e13ffd15 	stw	r4,-12(fp)
 4031580:	e17ffe15 	stw	r5,-8(fp)
 4031584:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4031588:	e0bffd17 	ldw	r2,-12(fp)
 403158c:	10800b17 	ldw	r2,44(r2)
 4031590:	10800060 	cmpeqi	r2,r2,1
 4031594:	10000e1e 	bne	r2,zero,40315d0 <alt_up_av_config_write_audio_cfg_register+0x64>
 4031598:	e0bffd17 	ldw	r2,-12(fp)
 403159c:	10800b17 	ldw	r2,44(r2)
 40315a0:	108000a0 	cmpeqi	r2,r2,2
 40315a4:	10000a1e 	bne	r2,zero,40315d0 <alt_up_av_config_write_audio_cfg_register+0x64>
 40315a8:	e0bffd17 	ldw	r2,-12(fp)
 40315ac:	10800b17 	ldw	r2,44(r2)
 40315b0:	108000e0 	cmpeqi	r2,r2,3
 40315b4:	1000061e 	bne	r2,zero,40315d0 <alt_up_av_config_write_audio_cfg_register+0x64>
 40315b8:	e0bffd17 	ldw	r2,-12(fp)
 40315bc:	10800b17 	ldw	r2,44(r2)
 40315c0:	10800120 	cmpeqi	r2,r2,4
 40315c4:	1000021e 	bne	r2,zero,40315d0 <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 40315c8:	00bffa84 	movi	r2,-22
 40315cc:	00000b06 	br	40315fc <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 40315d0:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 40315d4:	e0bffd17 	ldw	r2,-12(fp)
 40315d8:	10800a17 	ldw	r2,40(r2)
 40315dc:	10800084 	addi	r2,r2,2
 40315e0:	1007883a 	mov	r3,r2
 40315e4:	e0bffc17 	ldw	r2,-16(fp)
 40315e8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 40315ec:	e1bfff17 	ldw	r6,-4(fp)
 40315f0:	e17ffe17 	ldw	r5,-8(fp)
 40315f4:	e13ffd17 	ldw	r4,-12(fp)
 40315f8:	40313540 	call	4031354 <alt_up_av_config_write_data>
}
 40315fc:	e037883a 	mov	sp,fp
 4031600:	dfc00117 	ldw	ra,4(sp)
 4031604:	df000017 	ldw	fp,0(sp)
 4031608:	dec00204 	addi	sp,sp,8
 403160c:	f800283a 	ret

04031610 <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 4031610:	defffa04 	addi	sp,sp,-24
 4031614:	dfc00515 	stw	ra,20(sp)
 4031618:	df000415 	stw	fp,16(sp)
 403161c:	df000404 	addi	fp,sp,16
 4031620:	e13ffc15 	stw	r4,-16(fp)
 4031624:	e17ffd15 	stw	r5,-12(fp)
 4031628:	e1bffe15 	stw	r6,-8(fp)
 403162c:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4031630:	e0bffc17 	ldw	r2,-16(fp)
 4031634:	10800b17 	ldw	r2,44(r2)
 4031638:	108000a0 	cmpeqi	r2,r2,2
 403163c:	10000a1e 	bne	r2,zero,4031668 <alt_up_av_config_read_video_cfg_register+0x58>
 4031640:	e0bffc17 	ldw	r2,-16(fp)
 4031644:	10800b17 	ldw	r2,44(r2)
 4031648:	108000e0 	cmpeqi	r2,r2,3
 403164c:	1000061e 	bne	r2,zero,4031668 <alt_up_av_config_read_video_cfg_register+0x58>
 4031650:	e0bffc17 	ldw	r2,-16(fp)
 4031654:	10800b17 	ldw	r2,44(r2)
 4031658:	10800120 	cmpeqi	r2,r2,4
 403165c:	1000021e 	bne	r2,zero,4031668 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 4031660:	00bffa84 	movi	r2,-22
 4031664:	00001f06 	br	40316e4 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 4031668:	e0bffc17 	ldw	r2,-16(fp)
 403166c:	10800b17 	ldw	r2,44(r2)
 4031670:	108000a0 	cmpeqi	r2,r2,2
 4031674:	1000041e 	bne	r2,zero,4031688 <alt_up_av_config_read_video_cfg_register+0x78>
 4031678:	e0bffc17 	ldw	r2,-16(fp)
 403167c:	10800b17 	ldw	r2,44(r2)
 4031680:	10800118 	cmpnei	r2,r2,4
 4031684:	1000051e 	bne	r2,zero,403169c <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 4031688:	e0bfff17 	ldw	r2,-4(fp)
 403168c:	10800060 	cmpeqi	r2,r2,1
 4031690:	10000a1e 	bne	r2,zero,40316bc <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4031694:	00bffa84 	movi	r2,-22
 4031698:	00001206 	br	40316e4 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 403169c:	e0bfff17 	ldw	r2,-4(fp)
 40316a0:	10800060 	cmpeqi	r2,r2,1
 40316a4:	1000051e 	bne	r2,zero,40316bc <alt_up_av_config_read_video_cfg_register+0xac>
 40316a8:	e0bfff17 	ldw	r2,-4(fp)
 40316ac:	108000a0 	cmpeqi	r2,r2,2
 40316b0:	1000021e 	bne	r2,zero,40316bc <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 40316b4:	00bffa84 	movi	r2,-22
 40316b8:	00000a06 	br	40316e4 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 40316bc:	e0bffc17 	ldw	r2,-16(fp)
 40316c0:	10800a17 	ldw	r2,40(r2)
 40316c4:	10800084 	addi	r2,r2,2
 40316c8:	1007883a 	mov	r3,r2
 40316cc:	e0bfff17 	ldw	r2,-4(fp)
 40316d0:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 40316d4:	e1bffe17 	ldw	r6,-8(fp)
 40316d8:	e17ffd17 	ldw	r5,-12(fp)
 40316dc:	e13ffc17 	ldw	r4,-16(fp)
 40316e0:	40313b80 	call	40313b8 <alt_up_av_config_read_data>
}
 40316e4:	e037883a 	mov	sp,fp
 40316e8:	dfc00117 	ldw	ra,4(sp)
 40316ec:	df000017 	ldw	fp,0(sp)
 40316f0:	dec00204 	addi	sp,sp,8
 40316f4:	f800283a 	ret

040316f8 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 40316f8:	defffa04 	addi	sp,sp,-24
 40316fc:	dfc00515 	stw	ra,20(sp)
 4031700:	df000415 	stw	fp,16(sp)
 4031704:	df000404 	addi	fp,sp,16
 4031708:	e13ffc15 	stw	r4,-16(fp)
 403170c:	e17ffd15 	stw	r5,-12(fp)
 4031710:	e1bffe15 	stw	r6,-8(fp)
 4031714:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4031718:	e0bffc17 	ldw	r2,-16(fp)
 403171c:	10800b17 	ldw	r2,44(r2)
 4031720:	108000a0 	cmpeqi	r2,r2,2
 4031724:	10000a1e 	bne	r2,zero,4031750 <alt_up_av_config_write_video_cfg_register+0x58>
 4031728:	e0bffc17 	ldw	r2,-16(fp)
 403172c:	10800b17 	ldw	r2,44(r2)
 4031730:	108000e0 	cmpeqi	r2,r2,3
 4031734:	1000061e 	bne	r2,zero,4031750 <alt_up_av_config_write_video_cfg_register+0x58>
 4031738:	e0bffc17 	ldw	r2,-16(fp)
 403173c:	10800b17 	ldw	r2,44(r2)
 4031740:	10800120 	cmpeqi	r2,r2,4
 4031744:	1000021e 	bne	r2,zero,4031750 <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 4031748:	00bffa84 	movi	r2,-22
 403174c:	00001f06 	br	40317cc <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 4031750:	e0bffc17 	ldw	r2,-16(fp)
 4031754:	10800b17 	ldw	r2,44(r2)
 4031758:	108000a0 	cmpeqi	r2,r2,2
 403175c:	1000041e 	bne	r2,zero,4031770 <alt_up_av_config_write_video_cfg_register+0x78>
 4031760:	e0bffc17 	ldw	r2,-16(fp)
 4031764:	10800b17 	ldw	r2,44(r2)
 4031768:	10800118 	cmpnei	r2,r2,4
 403176c:	1000051e 	bne	r2,zero,4031784 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 4031770:	e0bfff17 	ldw	r2,-4(fp)
 4031774:	10800060 	cmpeqi	r2,r2,1
 4031778:	10000a1e 	bne	r2,zero,40317a4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 403177c:	00bffa84 	movi	r2,-22
 4031780:	00001206 	br	40317cc <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 4031784:	e0bfff17 	ldw	r2,-4(fp)
 4031788:	10800060 	cmpeqi	r2,r2,1
 403178c:	1000051e 	bne	r2,zero,40317a4 <alt_up_av_config_write_video_cfg_register+0xac>
 4031790:	e0bfff17 	ldw	r2,-4(fp)
 4031794:	108000a0 	cmpeqi	r2,r2,2
 4031798:	1000021e 	bne	r2,zero,40317a4 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 403179c:	00bffa84 	movi	r2,-22
 40317a0:	00000a06 	br	40317cc <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 40317a4:	e0bffc17 	ldw	r2,-16(fp)
 40317a8:	10800a17 	ldw	r2,40(r2)
 40317ac:	10800084 	addi	r2,r2,2
 40317b0:	1007883a 	mov	r3,r2
 40317b4:	e0bfff17 	ldw	r2,-4(fp)
 40317b8:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 40317bc:	e1bffe17 	ldw	r6,-8(fp)
 40317c0:	e17ffd17 	ldw	r5,-12(fp)
 40317c4:	e13ffc17 	ldw	r4,-16(fp)
 40317c8:	40313540 	call	4031354 <alt_up_av_config_write_data>
}
 40317cc:	e037883a 	mov	sp,fp
 40317d0:	dfc00117 	ldw	ra,4(sp)
 40317d4:	df000017 	ldw	fp,0(sp)
 40317d8:	dec00204 	addi	sp,sp,8
 40317dc:	f800283a 	ret

040317e0 <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 40317e0:	defffb04 	addi	sp,sp,-20
 40317e4:	dfc00415 	stw	ra,16(sp)
 40317e8:	df000315 	stw	fp,12(sp)
 40317ec:	df000304 	addi	fp,sp,12
 40317f0:	e13ffd15 	stw	r4,-12(fp)
 40317f4:	e17ffe15 	stw	r5,-8(fp)
 40317f8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 40317fc:	e0bffd17 	ldw	r2,-12(fp)
 4031800:	10800b17 	ldw	r2,44(r2)
 4031804:	10800220 	cmpeqi	r2,r2,8
 4031808:	1000021e 	bne	r2,zero,4031814 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 403180c:	00bffa84 	movi	r2,-22
 4031810:	00000406 	br	4031824 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 4031814:	e1bfff17 	ldw	r6,-4(fp)
 4031818:	e17ffe17 	ldw	r5,-8(fp)
 403181c:	e13ffd17 	ldw	r4,-12(fp)
 4031820:	40313b80 	call	40313b8 <alt_up_av_config_read_data>
}
 4031824:	e037883a 	mov	sp,fp
 4031828:	dfc00117 	ldw	ra,4(sp)
 403182c:	df000017 	ldw	fp,0(sp)
 4031830:	dec00204 	addi	sp,sp,8
 4031834:	f800283a 	ret

04031838 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4031838:	defffb04 	addi	sp,sp,-20
 403183c:	dfc00415 	stw	ra,16(sp)
 4031840:	df000315 	stw	fp,12(sp)
 4031844:	df000304 	addi	fp,sp,12
 4031848:	e13ffd15 	stw	r4,-12(fp)
 403184c:	e17ffe15 	stw	r5,-8(fp)
 4031850:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 4031854:	e0bffd17 	ldw	r2,-12(fp)
 4031858:	10800b17 	ldw	r2,44(r2)
 403185c:	10800220 	cmpeqi	r2,r2,8
 4031860:	1000021e 	bne	r2,zero,403186c <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 4031864:	00bffa84 	movi	r2,-22
 4031868:	00000406 	br	403187c <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 403186c:	e1bfff17 	ldw	r6,-4(fp)
 4031870:	e17ffe17 	ldw	r5,-8(fp)
 4031874:	e13ffd17 	ldw	r4,-12(fp)
 4031878:	40313540 	call	4031354 <alt_up_av_config_write_data>
}
 403187c:	e037883a 	mov	sp,fp
 4031880:	dfc00117 	ldw	ra,4(sp)
 4031884:	df000017 	ldw	fp,0(sp)
 4031888:	dec00204 	addi	sp,sp,8
 403188c:	f800283a 	ret

04031890 <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4031890:	defffb04 	addi	sp,sp,-20
 4031894:	dfc00415 	stw	ra,16(sp)
 4031898:	df000315 	stw	fp,12(sp)
 403189c:	df000304 	addi	fp,sp,12
 40318a0:	e13ffd15 	stw	r4,-12(fp)
 40318a4:	e17ffe15 	stw	r5,-8(fp)
 40318a8:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 40318ac:	e0bffd17 	ldw	r2,-12(fp)
 40318b0:	10800b17 	ldw	r2,44(r2)
 40318b4:	10800260 	cmpeqi	r2,r2,9
 40318b8:	1000021e 	bne	r2,zero,40318c4 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 40318bc:	00bffa84 	movi	r2,-22
 40318c0:	00000406 	br	40318d4 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 40318c4:	e1bfff17 	ldw	r6,-4(fp)
 40318c8:	e17ffe17 	ldw	r5,-8(fp)
 40318cc:	e13ffd17 	ldw	r4,-12(fp)
 40318d0:	40313b80 	call	40313b8 <alt_up_av_config_read_data>
}
 40318d4:	e037883a 	mov	sp,fp
 40318d8:	dfc00117 	ldw	ra,4(sp)
 40318dc:	df000017 	ldw	fp,0(sp)
 40318e0:	dec00204 	addi	sp,sp,8
 40318e4:	f800283a 	ret

040318e8 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40318e8:	defffb04 	addi	sp,sp,-20
 40318ec:	dfc00415 	stw	ra,16(sp)
 40318f0:	df000315 	stw	fp,12(sp)
 40318f4:	df000304 	addi	fp,sp,12
 40318f8:	e13ffd15 	stw	r4,-12(fp)
 40318fc:	e17ffe15 	stw	r5,-8(fp)
 4031900:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 4031904:	e0bffd17 	ldw	r2,-12(fp)
 4031908:	10800b17 	ldw	r2,44(r2)
 403190c:	10800260 	cmpeqi	r2,r2,9
 4031910:	1000021e 	bne	r2,zero,403191c <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 4031914:	00bffa84 	movi	r2,-22
 4031918:	00000406 	br	403192c <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 403191c:	e1bfff17 	ldw	r6,-4(fp)
 4031920:	e17ffe17 	ldw	r5,-8(fp)
 4031924:	e13ffd17 	ldw	r4,-12(fp)
 4031928:	40313540 	call	4031354 <alt_up_av_config_write_data>
}
 403192c:	e037883a 	mov	sp,fp
 4031930:	dfc00117 	ldw	ra,4(sp)
 4031934:	df000017 	ldw	fp,0(sp)
 4031938:	dec00204 	addi	sp,sp,8
 403193c:	f800283a 	ret

04031940 <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 4031940:	defffb04 	addi	sp,sp,-20
 4031944:	dfc00415 	stw	ra,16(sp)
 4031948:	df000315 	stw	fp,12(sp)
 403194c:	df000304 	addi	fp,sp,12
 4031950:	e13ffd15 	stw	r4,-12(fp)
 4031954:	e17ffe15 	stw	r5,-8(fp)
 4031958:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 403195c:	e0bffd17 	ldw	r2,-12(fp)
 4031960:	10800b17 	ldw	r2,44(r2)
 4031964:	108002a0 	cmpeqi	r2,r2,10
 4031968:	1000021e 	bne	r2,zero,4031974 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 403196c:	00bffa84 	movi	r2,-22
 4031970:	00000406 	br	4031984 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 4031974:	e1bfff17 	ldw	r6,-4(fp)
 4031978:	e17ffe17 	ldw	r5,-8(fp)
 403197c:	e13ffd17 	ldw	r4,-12(fp)
 4031980:	40313b80 	call	40313b8 <alt_up_av_config_read_data>
}
 4031984:	e037883a 	mov	sp,fp
 4031988:	dfc00117 	ldw	ra,4(sp)
 403198c:	df000017 	ldw	fp,0(sp)
 4031990:	dec00204 	addi	sp,sp,8
 4031994:	f800283a 	ret

04031998 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4031998:	defffb04 	addi	sp,sp,-20
 403199c:	dfc00415 	stw	ra,16(sp)
 40319a0:	df000315 	stw	fp,12(sp)
 40319a4:	df000304 	addi	fp,sp,12
 40319a8:	e13ffd15 	stw	r4,-12(fp)
 40319ac:	e17ffe15 	stw	r5,-8(fp)
 40319b0:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 40319b4:	e0bffd17 	ldw	r2,-12(fp)
 40319b8:	10800b17 	ldw	r2,44(r2)
 40319bc:	108002a0 	cmpeqi	r2,r2,10
 40319c0:	1000021e 	bne	r2,zero,40319cc <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 40319c4:	00bffa84 	movi	r2,-22
 40319c8:	00000406 	br	40319dc <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 40319cc:	e1bfff17 	ldw	r6,-4(fp)
 40319d0:	e17ffe17 	ldw	r5,-8(fp)
 40319d4:	e13ffd17 	ldw	r4,-12(fp)
 40319d8:	40313540 	call	4031354 <alt_up_av_config_write_data>
}
 40319dc:	e037883a 	mov	sp,fp
 40319e0:	dfc00117 	ldw	ra,4(sp)
 40319e4:	df000017 	ldw	fp,0(sp)
 40319e8:	dec00204 	addi	sp,sp,8
 40319ec:	f800283a 	ret

040319f0 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 40319f0:	deffe504 	addi	sp,sp,-108
 40319f4:	dfc01915 	stw	ra,100(sp)
 40319f8:	df001815 	stw	fp,96(sp)
 40319fc:	dcc01715 	stw	r19,92(sp)
 4031a00:	dc801615 	stw	r18,88(sp)
 4031a04:	dc401515 	stw	r17,84(sp)
 4031a08:	dc001415 	stw	r16,80(sp)
 4031a0c:	df001804 	addi	fp,sp,96
 4031a10:	e13ff915 	stw	r4,-28(fp)
 4031a14:	e17ffa15 	stw	r5,-24(fp)
 4031a18:	e1bffb15 	stw	r6,-20(fp)
 4031a1c:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 4031a20:	00800044 	movi	r2,1
 4031a24:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
 4031a28:	008100f4 	movhi	r2,1027
 4031a2c:	108e2204 	addi	r2,r2,14472
 4031a30:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
 4031a34:	008100f4 	movhi	r2,1027
 4031a38:	108e3304 	addi	r2,r2,14540
 4031a3c:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
 4031a40:	0007883a 	mov	r3,zero
 4031a44:	e0bff917 	ldw	r2,-28(fp)
 4031a48:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
 4031a4c:	e0800204 	addi	r2,fp,8
 4031a50:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
 4031a54:	e13ff917 	ldw	r4,-28(fp)
 4031a58:	4030a780 	call	4030a78 <perf_get_total_time>
 4031a5c:	e0bff215 	stw	r2,-56(fp)
 4031a60:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 4031a64:	e13ff217 	ldw	r4,-56(fp)
 4031a68:	e17ff317 	ldw	r5,-52(fp)
 4031a6c:	4032e540 	call	4032e54 <__floatundidf>
 4031a70:	1021883a 	mov	r16,r2
 4031a74:	1823883a 	mov	r17,r3
 4031a78:	e13ffa17 	ldw	r4,-24(fp)
 4031a7c:	402e6bc0 	call	402e6bc <__floatunsidf>
 4031a80:	1009883a 	mov	r4,r2
 4031a84:	180b883a 	mov	r5,r3
 4031a88:	200d883a 	mov	r6,r4
 4031a8c:	280f883a 	mov	r7,r5
 4031a90:	8009883a 	mov	r4,r16
 4031a94:	880b883a 	mov	r5,r17
 4031a98:	402ca0c0 	call	402ca0c <__divdf3>
 4031a9c:	1009883a 	mov	r4,r2
 4031aa0:	180b883a 	mov	r5,r3
 4031aa4:	e13ff415 	stw	r4,-48(fp)
 4031aa8:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 4031aac:	e0bff017 	ldw	r2,-64(fp)
 4031ab0:	d8800315 	stw	r2,12(sp)
 4031ab4:	e0bff117 	ldw	r2,-60(fp)
 4031ab8:	d8800215 	stw	r2,8(sp)
 4031abc:	e0bff017 	ldw	r2,-64(fp)
 4031ac0:	d8800115 	stw	r2,4(sp)
 4031ac4:	e0bff317 	ldw	r2,-52(fp)
 4031ac8:	d8800015 	stw	r2,0(sp)
 4031acc:	e1fff217 	ldw	r7,-56(fp)
 4031ad0:	e17ff417 	ldw	r5,-48(fp)
 4031ad4:	e1bff517 	ldw	r6,-44(fp)
 4031ad8:	010100f4 	movhi	r4,1027
 4031adc:	210e4404 	addi	r4,r4,14608
 4031ae0:	4021fac0 	call	4021fac <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 4031ae4:	e0bff817 	ldw	r2,-32(fp)
 4031ae8:	10c00104 	addi	r3,r2,4
 4031aec:	e0fff815 	stw	r3,-32(fp)
 4031af0:	10800017 	ldw	r2,0(r2)
 4031af4:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 4031af8:	00800044 	movi	r2,1
 4031afc:	e0bfef15 	stw	r2,-68(fp)
 4031b00:	00004e06 	br	4031c3c <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 4031b04:	e17fef17 	ldw	r5,-68(fp)
 4031b08:	e13ff917 	ldw	r4,-28(fp)
 4031b0c:	40309bc0 	call	40309bc <perf_get_section_time>
 4031b10:	e0bff615 	stw	r2,-40(fp)
 4031b14:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
 4031b18:	e13ff617 	ldw	r4,-40(fp)
 4031b1c:	e17ff717 	ldw	r5,-36(fp)
 4031b20:	4032e540 	call	4032e54 <__floatundidf>
 4031b24:	1011883a 	mov	r8,r2
 4031b28:	1813883a 	mov	r9,r3
 4031b2c:	000d883a 	mov	r6,zero
 4031b30:	01d01674 	movhi	r7,16473
 4031b34:	4009883a 	mov	r4,r8
 4031b38:	480b883a 	mov	r5,r9
 4031b3c:	402d54c0 	call	402d54c <__muldf3>
 4031b40:	1009883a 	mov	r4,r2
 4031b44:	180b883a 	mov	r5,r3
 4031b48:	2021883a 	mov	r16,r4
 4031b4c:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4031b50:	e13ff217 	ldw	r4,-56(fp)
 4031b54:	e17ff317 	ldw	r5,-52(fp)
 4031b58:	4032e540 	call	4032e54 <__floatundidf>
 4031b5c:	1009883a 	mov	r4,r2
 4031b60:	180b883a 	mov	r5,r3
 4031b64:	200d883a 	mov	r6,r4
 4031b68:	280f883a 	mov	r7,r5
 4031b6c:	8009883a 	mov	r4,r16
 4031b70:	880b883a 	mov	r5,r17
 4031b74:	402ca0c0 	call	402ca0c <__divdf3>
 4031b78:	1009883a 	mov	r4,r2
 4031b7c:	180b883a 	mov	r5,r3
 4031b80:	2025883a 	mov	r18,r4
 4031b84:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
 4031b88:	e13ff617 	ldw	r4,-40(fp)
 4031b8c:	e17ff717 	ldw	r5,-36(fp)
 4031b90:	4032e540 	call	4032e54 <__floatundidf>
 4031b94:	1021883a 	mov	r16,r2
 4031b98:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4031b9c:	e13ffa17 	ldw	r4,-24(fp)
 4031ba0:	402e6bc0 	call	402e6bc <__floatunsidf>
 4031ba4:	1009883a 	mov	r4,r2
 4031ba8:	180b883a 	mov	r5,r3
 4031bac:	200d883a 	mov	r6,r4
 4031bb0:	280f883a 	mov	r7,r5
 4031bb4:	8009883a 	mov	r4,r16
 4031bb8:	880b883a 	mov	r5,r17
 4031bbc:	402ca0c0 	call	402ca0c <__divdf3>
 4031bc0:	1009883a 	mov	r4,r2
 4031bc4:	180b883a 	mov	r5,r3
 4031bc8:	2021883a 	mov	r16,r4
 4031bcc:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
 4031bd0:	e17fef17 	ldw	r5,-68(fp)
 4031bd4:	e13ff917 	ldw	r4,-28(fp)
 4031bd8:	4030ac40 	call	4030ac4 <perf_get_num_starts>
 4031bdc:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 4031be0:	e0bff017 	ldw	r2,-64(fp)
 4031be4:	d8800515 	stw	r2,20(sp)
 4031be8:	d8c00415 	stw	r3,16(sp)
 4031bec:	e0bff617 	ldw	r2,-40(fp)
 4031bf0:	d8800215 	stw	r2,8(sp)
 4031bf4:	e0bff717 	ldw	r2,-36(fp)
 4031bf8:	d8800315 	stw	r2,12(sp)
 4031bfc:	dc000015 	stw	r16,0(sp)
 4031c00:	dc400115 	stw	r17,4(sp)
 4031c04:	900d883a 	mov	r6,r18
 4031c08:	980f883a 	mov	r7,r19
 4031c0c:	e17fee17 	ldw	r5,-72(fp)
 4031c10:	010100f4 	movhi	r4,1027
 4031c14:	210e5904 	addi	r4,r4,14692
 4031c18:	4021fac0 	call	4021fac <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 4031c1c:	e0bff817 	ldw	r2,-32(fp)
 4031c20:	10c00104 	addi	r3,r2,4
 4031c24:	e0fff815 	stw	r3,-32(fp)
 4031c28:	10800017 	ldw	r2,0(r2)
 4031c2c:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 4031c30:	e0bfef17 	ldw	r2,-68(fp)
 4031c34:	10800044 	addi	r2,r2,1
 4031c38:	e0bfef15 	stw	r2,-68(fp)
 4031c3c:	e0bfef17 	ldw	r2,-68(fp)
 4031c40:	e0fffb17 	ldw	r3,-20(fp)
 4031c44:	18bfaf0e 	bge	r3,r2,4031b04 <__alt_data_end+0xffff1b04>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 4031c48:	0005883a 	mov	r2,zero
}
 4031c4c:	e6fffc04 	addi	sp,fp,-16
 4031c50:	dfc00517 	ldw	ra,20(sp)
 4031c54:	df000417 	ldw	fp,16(sp)
 4031c58:	dcc00317 	ldw	r19,12(sp)
 4031c5c:	dc800217 	ldw	r18,8(sp)
 4031c60:	dc400117 	ldw	r17,4(sp)
 4031c64:	dc000017 	ldw	r16,0(sp)
 4031c68:	dec00704 	addi	sp,sp,28
 4031c6c:	f800283a 	ret

04031c70 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4031c70:	defff504 	addi	sp,sp,-44
 4031c74:	df000a15 	stw	fp,40(sp)
 4031c78:	df000a04 	addi	fp,sp,40
 4031c7c:	e13ffc15 	stw	r4,-16(fp)
 4031c80:	e17ffd15 	stw	r5,-12(fp)
 4031c84:	e1bffe15 	stw	r6,-8(fp)
 4031c88:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4031c8c:	e03ff615 	stw	zero,-40(fp)
 4031c90:	d0a73817 	ldw	r2,-25376(gp)
  
  if (alt_ticks_per_second ())
 4031c94:	10003c26 	beq	r2,zero,4031d88 <alt_alarm_start+0x118>
  {
    if (alarm)
 4031c98:	e0bffc17 	ldw	r2,-16(fp)
 4031c9c:	10003826 	beq	r2,zero,4031d80 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4031ca0:	e0bffc17 	ldw	r2,-16(fp)
 4031ca4:	e0fffe17 	ldw	r3,-8(fp)
 4031ca8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4031cac:	e0bffc17 	ldw	r2,-16(fp)
 4031cb0:	e0ffff17 	ldw	r3,-4(fp)
 4031cb4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4031cb8:	0005303a 	rdctl	r2,status
 4031cbc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4031cc0:	e0fff917 	ldw	r3,-28(fp)
 4031cc4:	00bfff84 	movi	r2,-2
 4031cc8:	1884703a 	and	r2,r3,r2
 4031ccc:	1001703a 	wrctl	status,r2
  
  return context;
 4031cd0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4031cd4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4031cd8:	d0a73917 	ldw	r2,-25372(gp)
      
      current_nticks = alt_nticks();
 4031cdc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4031ce0:	e0fffd17 	ldw	r3,-12(fp)
 4031ce4:	e0bff617 	ldw	r2,-40(fp)
 4031ce8:	1885883a 	add	r2,r3,r2
 4031cec:	10c00044 	addi	r3,r2,1
 4031cf0:	e0bffc17 	ldw	r2,-16(fp)
 4031cf4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4031cf8:	e0bffc17 	ldw	r2,-16(fp)
 4031cfc:	10c00217 	ldw	r3,8(r2)
 4031d00:	e0bff617 	ldw	r2,-40(fp)
 4031d04:	1880042e 	bgeu	r3,r2,4031d18 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4031d08:	e0bffc17 	ldw	r2,-16(fp)
 4031d0c:	00c00044 	movi	r3,1
 4031d10:	10c00405 	stb	r3,16(r2)
 4031d14:	00000206 	br	4031d20 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4031d18:	e0bffc17 	ldw	r2,-16(fp)
 4031d1c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4031d20:	e0bffc17 	ldw	r2,-16(fp)
 4031d24:	d0e01004 	addi	r3,gp,-32704
 4031d28:	e0fffa15 	stw	r3,-24(fp)
 4031d2c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4031d30:	e0bffb17 	ldw	r2,-20(fp)
 4031d34:	e0fffa17 	ldw	r3,-24(fp)
 4031d38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4031d3c:	e0bffa17 	ldw	r2,-24(fp)
 4031d40:	10c00017 	ldw	r3,0(r2)
 4031d44:	e0bffb17 	ldw	r2,-20(fp)
 4031d48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4031d4c:	e0bffa17 	ldw	r2,-24(fp)
 4031d50:	10800017 	ldw	r2,0(r2)
 4031d54:	e0fffb17 	ldw	r3,-20(fp)
 4031d58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4031d5c:	e0bffa17 	ldw	r2,-24(fp)
 4031d60:	e0fffb17 	ldw	r3,-20(fp)
 4031d64:	10c00015 	stw	r3,0(r2)
 4031d68:	e0bff817 	ldw	r2,-32(fp)
 4031d6c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4031d70:	e0bff717 	ldw	r2,-36(fp)
 4031d74:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4031d78:	0005883a 	mov	r2,zero
 4031d7c:	00000306 	br	4031d8c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4031d80:	00bffa84 	movi	r2,-22
 4031d84:	00000106 	br	4031d8c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4031d88:	00bfde84 	movi	r2,-134
  }
}
 4031d8c:	e037883a 	mov	sp,fp
 4031d90:	df000017 	ldw	fp,0(sp)
 4031d94:	dec00104 	addi	sp,sp,4
 4031d98:	f800283a 	ret

04031d9c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4031d9c:	defffa04 	addi	sp,sp,-24
 4031da0:	dfc00515 	stw	ra,20(sp)
 4031da4:	df000415 	stw	fp,16(sp)
 4031da8:	df000404 	addi	fp,sp,16
 4031dac:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4031db0:	008000c4 	movi	r2,3
 4031db4:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4031db8:	e0fffd17 	ldw	r3,-12(fp)
 4031dbc:	008003f4 	movhi	r2,15
 4031dc0:	10909004 	addi	r2,r2,16960
 4031dc4:	1885383a 	mul	r2,r3,r2
 4031dc8:	100b883a 	mov	r5,r2
 4031dcc:	0100bef4 	movhi	r4,763
 4031dd0:	213c2004 	addi	r4,r4,-3968
 4031dd4:	402c0a40 	call	402c0a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4031dd8:	100b883a 	mov	r5,r2
 4031ddc:	01200034 	movhi	r4,32768
 4031de0:	213fffc4 	addi	r4,r4,-1
 4031de4:	402c0a40 	call	402c0a4 <__udivsi3>
 4031de8:	100b883a 	mov	r5,r2
 4031dec:	e13fff17 	ldw	r4,-4(fp)
 4031df0:	402c0a40 	call	402c0a4 <__udivsi3>
 4031df4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4031df8:	e0bffe17 	ldw	r2,-8(fp)
 4031dfc:	10002a26 	beq	r2,zero,4031ea8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4031e00:	e03ffc15 	stw	zero,-16(fp)
 4031e04:	00001706 	br	4031e64 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4031e08:	00a00034 	movhi	r2,32768
 4031e0c:	10bfffc4 	addi	r2,r2,-1
 4031e10:	10bfffc4 	addi	r2,r2,-1
 4031e14:	103ffe1e 	bne	r2,zero,4031e10 <__alt_data_end+0xffff1e10>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4031e18:	e0fffd17 	ldw	r3,-12(fp)
 4031e1c:	008003f4 	movhi	r2,15
 4031e20:	10909004 	addi	r2,r2,16960
 4031e24:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4031e28:	100b883a 	mov	r5,r2
 4031e2c:	0100bef4 	movhi	r4,763
 4031e30:	213c2004 	addi	r4,r4,-3968
 4031e34:	402c0a40 	call	402c0a4 <__udivsi3>
 4031e38:	100b883a 	mov	r5,r2
 4031e3c:	01200034 	movhi	r4,32768
 4031e40:	213fffc4 	addi	r4,r4,-1
 4031e44:	402c0a40 	call	402c0a4 <__udivsi3>
 4031e48:	1007883a 	mov	r3,r2
 4031e4c:	e0bfff17 	ldw	r2,-4(fp)
 4031e50:	10c5c83a 	sub	r2,r2,r3
 4031e54:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4031e58:	e0bffc17 	ldw	r2,-16(fp)
 4031e5c:	10800044 	addi	r2,r2,1
 4031e60:	e0bffc15 	stw	r2,-16(fp)
 4031e64:	e0fffc17 	ldw	r3,-16(fp)
 4031e68:	e0bffe17 	ldw	r2,-8(fp)
 4031e6c:	18bfe616 	blt	r3,r2,4031e08 <__alt_data_end+0xffff1e08>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4031e70:	e0fffd17 	ldw	r3,-12(fp)
 4031e74:	008003f4 	movhi	r2,15
 4031e78:	10909004 	addi	r2,r2,16960
 4031e7c:	1885383a 	mul	r2,r3,r2
 4031e80:	100b883a 	mov	r5,r2
 4031e84:	0100bef4 	movhi	r4,763
 4031e88:	213c2004 	addi	r4,r4,-3968
 4031e8c:	402c0a40 	call	402c0a4 <__udivsi3>
 4031e90:	1007883a 	mov	r3,r2
 4031e94:	e0bfff17 	ldw	r2,-4(fp)
 4031e98:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4031e9c:	10bfffc4 	addi	r2,r2,-1
 4031ea0:	103ffe1e 	bne	r2,zero,4031e9c <__alt_data_end+0xffff1e9c>
 4031ea4:	00000d06 	br	4031edc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4031ea8:	e0fffd17 	ldw	r3,-12(fp)
 4031eac:	008003f4 	movhi	r2,15
 4031eb0:	10909004 	addi	r2,r2,16960
 4031eb4:	1885383a 	mul	r2,r3,r2
 4031eb8:	100b883a 	mov	r5,r2
 4031ebc:	0100bef4 	movhi	r4,763
 4031ec0:	213c2004 	addi	r4,r4,-3968
 4031ec4:	402c0a40 	call	402c0a4 <__udivsi3>
 4031ec8:	1007883a 	mov	r3,r2
 4031ecc:	e0bfff17 	ldw	r2,-4(fp)
 4031ed0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4031ed4:	10bfffc4 	addi	r2,r2,-1
 4031ed8:	00bffe16 	blt	zero,r2,4031ed4 <__alt_data_end+0xffff1ed4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4031edc:	0005883a 	mov	r2,zero
}
 4031ee0:	e037883a 	mov	sp,fp
 4031ee4:	dfc00117 	ldw	ra,4(sp)
 4031ee8:	df000017 	ldw	fp,0(sp)
 4031eec:	dec00204 	addi	sp,sp,8
 4031ef0:	f800283a 	ret

04031ef4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4031ef4:	defffe04 	addi	sp,sp,-8
 4031ef8:	dfc00115 	stw	ra,4(sp)
 4031efc:	df000015 	stw	fp,0(sp)
 4031f00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4031f04:	d0a00b17 	ldw	r2,-32724(gp)
 4031f08:	10000326 	beq	r2,zero,4031f18 <alt_get_errno+0x24>
 4031f0c:	d0a00b17 	ldw	r2,-32724(gp)
 4031f10:	103ee83a 	callr	r2
 4031f14:	00000106 	br	4031f1c <alt_get_errno+0x28>
 4031f18:	d0a73304 	addi	r2,gp,-25396
}
 4031f1c:	e037883a 	mov	sp,fp
 4031f20:	dfc00117 	ldw	ra,4(sp)
 4031f24:	df000017 	ldw	fp,0(sp)
 4031f28:	dec00204 	addi	sp,sp,8
 4031f2c:	f800283a 	ret

04031f30 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4031f30:	defffa04 	addi	sp,sp,-24
 4031f34:	dfc00515 	stw	ra,20(sp)
 4031f38:	df000415 	stw	fp,16(sp)
 4031f3c:	df000404 	addi	fp,sp,16
 4031f40:	e13ffe15 	stw	r4,-8(fp)
 4031f44:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4031f48:	e0bffe17 	ldw	r2,-8(fp)
 4031f4c:	10000326 	beq	r2,zero,4031f5c <alt_dev_llist_insert+0x2c>
 4031f50:	e0bffe17 	ldw	r2,-8(fp)
 4031f54:	10800217 	ldw	r2,8(r2)
 4031f58:	1000061e 	bne	r2,zero,4031f74 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4031f5c:	4031ef40 	call	4031ef4 <alt_get_errno>
 4031f60:	1007883a 	mov	r3,r2
 4031f64:	00800584 	movi	r2,22
 4031f68:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4031f6c:	00bffa84 	movi	r2,-22
 4031f70:	00001306 	br	4031fc0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4031f74:	e0bffe17 	ldw	r2,-8(fp)
 4031f78:	e0ffff17 	ldw	r3,-4(fp)
 4031f7c:	e0fffc15 	stw	r3,-16(fp)
 4031f80:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4031f84:	e0bffd17 	ldw	r2,-12(fp)
 4031f88:	e0fffc17 	ldw	r3,-16(fp)
 4031f8c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4031f90:	e0bffc17 	ldw	r2,-16(fp)
 4031f94:	10c00017 	ldw	r3,0(r2)
 4031f98:	e0bffd17 	ldw	r2,-12(fp)
 4031f9c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4031fa0:	e0bffc17 	ldw	r2,-16(fp)
 4031fa4:	10800017 	ldw	r2,0(r2)
 4031fa8:	e0fffd17 	ldw	r3,-12(fp)
 4031fac:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4031fb0:	e0bffc17 	ldw	r2,-16(fp)
 4031fb4:	e0fffd17 	ldw	r3,-12(fp)
 4031fb8:	10c00015 	stw	r3,0(r2)

  return 0;  
 4031fbc:	0005883a 	mov	r2,zero
}
 4031fc0:	e037883a 	mov	sp,fp
 4031fc4:	dfc00117 	ldw	ra,4(sp)
 4031fc8:	df000017 	ldw	fp,0(sp)
 4031fcc:	dec00204 	addi	sp,sp,8
 4031fd0:	f800283a 	ret

04031fd4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4031fd4:	defffd04 	addi	sp,sp,-12
 4031fd8:	dfc00215 	stw	ra,8(sp)
 4031fdc:	df000115 	stw	fp,4(sp)
 4031fe0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4031fe4:	008100f4 	movhi	r2,1027
 4031fe8:	108bbd04 	addi	r2,r2,12020
 4031fec:	e0bfff15 	stw	r2,-4(fp)
 4031ff0:	00000606 	br	403200c <_do_ctors+0x38>
        (*ctor) (); 
 4031ff4:	e0bfff17 	ldw	r2,-4(fp)
 4031ff8:	10800017 	ldw	r2,0(r2)
 4031ffc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4032000:	e0bfff17 	ldw	r2,-4(fp)
 4032004:	10bfff04 	addi	r2,r2,-4
 4032008:	e0bfff15 	stw	r2,-4(fp)
 403200c:	e0ffff17 	ldw	r3,-4(fp)
 4032010:	008100f4 	movhi	r2,1027
 4032014:	108bbe04 	addi	r2,r2,12024
 4032018:	18bff62e 	bgeu	r3,r2,4031ff4 <__alt_data_end+0xffff1ff4>
        (*ctor) (); 
}
 403201c:	0001883a 	nop
 4032020:	e037883a 	mov	sp,fp
 4032024:	dfc00117 	ldw	ra,4(sp)
 4032028:	df000017 	ldw	fp,0(sp)
 403202c:	dec00204 	addi	sp,sp,8
 4032030:	f800283a 	ret

04032034 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4032034:	defffd04 	addi	sp,sp,-12
 4032038:	dfc00215 	stw	ra,8(sp)
 403203c:	df000115 	stw	fp,4(sp)
 4032040:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4032044:	008100f4 	movhi	r2,1027
 4032048:	108bbd04 	addi	r2,r2,12020
 403204c:	e0bfff15 	stw	r2,-4(fp)
 4032050:	00000606 	br	403206c <_do_dtors+0x38>
        (*dtor) (); 
 4032054:	e0bfff17 	ldw	r2,-4(fp)
 4032058:	10800017 	ldw	r2,0(r2)
 403205c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4032060:	e0bfff17 	ldw	r2,-4(fp)
 4032064:	10bfff04 	addi	r2,r2,-4
 4032068:	e0bfff15 	stw	r2,-4(fp)
 403206c:	e0ffff17 	ldw	r3,-4(fp)
 4032070:	008100f4 	movhi	r2,1027
 4032074:	108bbe04 	addi	r2,r2,12024
 4032078:	18bff62e 	bgeu	r3,r2,4032054 <__alt_data_end+0xffff2054>
        (*dtor) (); 
}
 403207c:	0001883a 	nop
 4032080:	e037883a 	mov	sp,fp
 4032084:	dfc00117 	ldw	ra,4(sp)
 4032088:	df000017 	ldw	fp,0(sp)
 403208c:	dec00204 	addi	sp,sp,8
 4032090:	f800283a 	ret

04032094 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4032094:	defffa04 	addi	sp,sp,-24
 4032098:	dfc00515 	stw	ra,20(sp)
 403209c:	df000415 	stw	fp,16(sp)
 40320a0:	df000404 	addi	fp,sp,16
 40320a4:	e13ffe15 	stw	r4,-8(fp)
 40320a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40320ac:	e0bfff17 	ldw	r2,-4(fp)
 40320b0:	10800017 	ldw	r2,0(r2)
 40320b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40320b8:	e13ffe17 	ldw	r4,-8(fp)
 40320bc:	402896c0 	call	402896c <strlen>
 40320c0:	10800044 	addi	r2,r2,1
 40320c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40320c8:	00000d06 	br	4032100 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40320cc:	e0bffc17 	ldw	r2,-16(fp)
 40320d0:	10800217 	ldw	r2,8(r2)
 40320d4:	e0fffd17 	ldw	r3,-12(fp)
 40320d8:	180d883a 	mov	r6,r3
 40320dc:	e17ffe17 	ldw	r5,-8(fp)
 40320e0:	1009883a 	mov	r4,r2
 40320e4:	40329d80 	call	40329d8 <memcmp>
 40320e8:	1000021e 	bne	r2,zero,40320f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40320ec:	e0bffc17 	ldw	r2,-16(fp)
 40320f0:	00000706 	br	4032110 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40320f4:	e0bffc17 	ldw	r2,-16(fp)
 40320f8:	10800017 	ldw	r2,0(r2)
 40320fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4032100:	e0fffc17 	ldw	r3,-16(fp)
 4032104:	e0bfff17 	ldw	r2,-4(fp)
 4032108:	18bff01e 	bne	r3,r2,40320cc <__alt_data_end+0xffff20cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 403210c:	0005883a 	mov	r2,zero
}
 4032110:	e037883a 	mov	sp,fp
 4032114:	dfc00117 	ldw	ra,4(sp)
 4032118:	df000017 	ldw	fp,0(sp)
 403211c:	dec00204 	addi	sp,sp,8
 4032120:	f800283a 	ret

04032124 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4032124:	defffe04 	addi	sp,sp,-8
 4032128:	dfc00115 	stw	ra,4(sp)
 403212c:	df000015 	stw	fp,0(sp)
 4032130:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4032134:	01440004 	movi	r5,4096
 4032138:	0009883a 	mov	r4,zero
 403213c:	40328600 	call	4032860 <alt_icache_flush>
#endif
}
 4032140:	0001883a 	nop
 4032144:	e037883a 	mov	sp,fp
 4032148:	dfc00117 	ldw	ra,4(sp)
 403214c:	df000017 	ldw	fp,0(sp)
 4032150:	dec00204 	addi	sp,sp,8
 4032154:	f800283a 	ret

04032158 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4032158:	defff904 	addi	sp,sp,-28
 403215c:	dfc00615 	stw	ra,24(sp)
 4032160:	df000515 	stw	fp,20(sp)
 4032164:	df000504 	addi	fp,sp,20
 4032168:	e13ffc15 	stw	r4,-16(fp)
 403216c:	e17ffd15 	stw	r5,-12(fp)
 4032170:	e1bffe15 	stw	r6,-8(fp)
 4032174:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4032178:	e1bfff17 	ldw	r6,-4(fp)
 403217c:	e17ffe17 	ldw	r5,-8(fp)
 4032180:	e13ffd17 	ldw	r4,-12(fp)
 4032184:	40323980 	call	4032398 <open>
 4032188:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 403218c:	e0bffb17 	ldw	r2,-20(fp)
 4032190:	10001c16 	blt	r2,zero,4032204 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4032194:	008100f4 	movhi	r2,1027
 4032198:	10909504 	addi	r2,r2,16980
 403219c:	e0fffb17 	ldw	r3,-20(fp)
 40321a0:	18c00324 	muli	r3,r3,12
 40321a4:	10c5883a 	add	r2,r2,r3
 40321a8:	10c00017 	ldw	r3,0(r2)
 40321ac:	e0bffc17 	ldw	r2,-16(fp)
 40321b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40321b4:	008100f4 	movhi	r2,1027
 40321b8:	10909504 	addi	r2,r2,16980
 40321bc:	e0fffb17 	ldw	r3,-20(fp)
 40321c0:	18c00324 	muli	r3,r3,12
 40321c4:	10c5883a 	add	r2,r2,r3
 40321c8:	10800104 	addi	r2,r2,4
 40321cc:	10c00017 	ldw	r3,0(r2)
 40321d0:	e0bffc17 	ldw	r2,-16(fp)
 40321d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40321d8:	008100f4 	movhi	r2,1027
 40321dc:	10909504 	addi	r2,r2,16980
 40321e0:	e0fffb17 	ldw	r3,-20(fp)
 40321e4:	18c00324 	muli	r3,r3,12
 40321e8:	10c5883a 	add	r2,r2,r3
 40321ec:	10800204 	addi	r2,r2,8
 40321f0:	10c00017 	ldw	r3,0(r2)
 40321f4:	e0bffc17 	ldw	r2,-16(fp)
 40321f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40321fc:	e13ffb17 	ldw	r4,-20(fp)
 4032200:	402f2900 	call	402f290 <alt_release_fd>
  }
} 
 4032204:	0001883a 	nop
 4032208:	e037883a 	mov	sp,fp
 403220c:	dfc00117 	ldw	ra,4(sp)
 4032210:	df000017 	ldw	fp,0(sp)
 4032214:	dec00204 	addi	sp,sp,8
 4032218:	f800283a 	ret

0403221c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 403221c:	defffb04 	addi	sp,sp,-20
 4032220:	dfc00415 	stw	ra,16(sp)
 4032224:	df000315 	stw	fp,12(sp)
 4032228:	df000304 	addi	fp,sp,12
 403222c:	e13ffd15 	stw	r4,-12(fp)
 4032230:	e17ffe15 	stw	r5,-8(fp)
 4032234:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4032238:	01c07fc4 	movi	r7,511
 403223c:	01800044 	movi	r6,1
 4032240:	e17ffd17 	ldw	r5,-12(fp)
 4032244:	010100f4 	movhi	r4,1027
 4032248:	21109804 	addi	r4,r4,16992
 403224c:	40321580 	call	4032158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4032250:	01c07fc4 	movi	r7,511
 4032254:	000d883a 	mov	r6,zero
 4032258:	e17ffe17 	ldw	r5,-8(fp)
 403225c:	010100f4 	movhi	r4,1027
 4032260:	21109504 	addi	r4,r4,16980
 4032264:	40321580 	call	4032158 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4032268:	01c07fc4 	movi	r7,511
 403226c:	01800044 	movi	r6,1
 4032270:	e17fff17 	ldw	r5,-4(fp)
 4032274:	010100f4 	movhi	r4,1027
 4032278:	21109b04 	addi	r4,r4,17004
 403227c:	40321580 	call	4032158 <alt_open_fd>
}  
 4032280:	0001883a 	nop
 4032284:	e037883a 	mov	sp,fp
 4032288:	dfc00117 	ldw	ra,4(sp)
 403228c:	df000017 	ldw	fp,0(sp)
 4032290:	dec00204 	addi	sp,sp,8
 4032294:	f800283a 	ret

04032298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4032298:	defffe04 	addi	sp,sp,-8
 403229c:	dfc00115 	stw	ra,4(sp)
 40322a0:	df000015 	stw	fp,0(sp)
 40322a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40322a8:	d0a00b17 	ldw	r2,-32724(gp)
 40322ac:	10000326 	beq	r2,zero,40322bc <alt_get_errno+0x24>
 40322b0:	d0a00b17 	ldw	r2,-32724(gp)
 40322b4:	103ee83a 	callr	r2
 40322b8:	00000106 	br	40322c0 <alt_get_errno+0x28>
 40322bc:	d0a73304 	addi	r2,gp,-25396
}
 40322c0:	e037883a 	mov	sp,fp
 40322c4:	dfc00117 	ldw	ra,4(sp)
 40322c8:	df000017 	ldw	fp,0(sp)
 40322cc:	dec00204 	addi	sp,sp,8
 40322d0:	f800283a 	ret

040322d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40322d4:	defffd04 	addi	sp,sp,-12
 40322d8:	df000215 	stw	fp,8(sp)
 40322dc:	df000204 	addi	fp,sp,8
 40322e0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40322e4:	e0bfff17 	ldw	r2,-4(fp)
 40322e8:	10800217 	ldw	r2,8(r2)
 40322ec:	10d00034 	orhi	r3,r2,16384
 40322f0:	e0bfff17 	ldw	r2,-4(fp)
 40322f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40322f8:	e03ffe15 	stw	zero,-8(fp)
 40322fc:	00001d06 	br	4032374 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4032300:	008100f4 	movhi	r2,1027
 4032304:	10909504 	addi	r2,r2,16980
 4032308:	e0fffe17 	ldw	r3,-8(fp)
 403230c:	18c00324 	muli	r3,r3,12
 4032310:	10c5883a 	add	r2,r2,r3
 4032314:	10c00017 	ldw	r3,0(r2)
 4032318:	e0bfff17 	ldw	r2,-4(fp)
 403231c:	10800017 	ldw	r2,0(r2)
 4032320:	1880111e 	bne	r3,r2,4032368 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4032324:	008100f4 	movhi	r2,1027
 4032328:	10909504 	addi	r2,r2,16980
 403232c:	e0fffe17 	ldw	r3,-8(fp)
 4032330:	18c00324 	muli	r3,r3,12
 4032334:	10c5883a 	add	r2,r2,r3
 4032338:	10800204 	addi	r2,r2,8
 403233c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4032340:	1000090e 	bge	r2,zero,4032368 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4032344:	e0bffe17 	ldw	r2,-8(fp)
 4032348:	10c00324 	muli	r3,r2,12
 403234c:	008100f4 	movhi	r2,1027
 4032350:	10909504 	addi	r2,r2,16980
 4032354:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4032358:	e0bfff17 	ldw	r2,-4(fp)
 403235c:	18800226 	beq	r3,r2,4032368 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4032360:	00bffcc4 	movi	r2,-13
 4032364:	00000806 	br	4032388 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4032368:	e0bffe17 	ldw	r2,-8(fp)
 403236c:	10800044 	addi	r2,r2,1
 4032370:	e0bffe15 	stw	r2,-8(fp)
 4032374:	d0a00a17 	ldw	r2,-32728(gp)
 4032378:	1007883a 	mov	r3,r2
 403237c:	e0bffe17 	ldw	r2,-8(fp)
 4032380:	18bfdf2e 	bgeu	r3,r2,4032300 <__alt_data_end+0xffff2300>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4032384:	0005883a 	mov	r2,zero
}
 4032388:	e037883a 	mov	sp,fp
 403238c:	df000017 	ldw	fp,0(sp)
 4032390:	dec00104 	addi	sp,sp,4
 4032394:	f800283a 	ret

04032398 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4032398:	defff604 	addi	sp,sp,-40
 403239c:	dfc00915 	stw	ra,36(sp)
 40323a0:	df000815 	stw	fp,32(sp)
 40323a4:	df000804 	addi	fp,sp,32
 40323a8:	e13ffd15 	stw	r4,-12(fp)
 40323ac:	e17ffe15 	stw	r5,-8(fp)
 40323b0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40323b4:	00bfffc4 	movi	r2,-1
 40323b8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40323bc:	00bffb44 	movi	r2,-19
 40323c0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40323c4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40323c8:	d1600804 	addi	r5,gp,-32736
 40323cc:	e13ffd17 	ldw	r4,-12(fp)
 40323d0:	40320940 	call	4032094 <alt_find_dev>
 40323d4:	e0bff815 	stw	r2,-32(fp)
 40323d8:	e0bff817 	ldw	r2,-32(fp)
 40323dc:	1000051e 	bne	r2,zero,40323f4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40323e0:	e13ffd17 	ldw	r4,-12(fp)
 40323e4:	40326b40 	call	40326b4 <alt_find_file>
 40323e8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40323ec:	00800044 	movi	r2,1
 40323f0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40323f4:	e0bff817 	ldw	r2,-32(fp)
 40323f8:	10002926 	beq	r2,zero,40324a0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40323fc:	e13ff817 	ldw	r4,-32(fp)
 4032400:	40327bc0 	call	40327bc <alt_get_fd>
 4032404:	e0bff915 	stw	r2,-28(fp)
 4032408:	e0bff917 	ldw	r2,-28(fp)
 403240c:	1000030e 	bge	r2,zero,403241c <open+0x84>
    {
      status = index;
 4032410:	e0bff917 	ldw	r2,-28(fp)
 4032414:	e0bffa15 	stw	r2,-24(fp)
 4032418:	00002306 	br	40324a8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 403241c:	e0bff917 	ldw	r2,-28(fp)
 4032420:	10c00324 	muli	r3,r2,12
 4032424:	008100f4 	movhi	r2,1027
 4032428:	10909504 	addi	r2,r2,16980
 403242c:	1885883a 	add	r2,r3,r2
 4032430:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4032434:	e0fffe17 	ldw	r3,-8(fp)
 4032438:	00900034 	movhi	r2,16384
 403243c:	10bfffc4 	addi	r2,r2,-1
 4032440:	1886703a 	and	r3,r3,r2
 4032444:	e0bffc17 	ldw	r2,-16(fp)
 4032448:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 403244c:	e0bffb17 	ldw	r2,-20(fp)
 4032450:	1000051e 	bne	r2,zero,4032468 <open+0xd0>
 4032454:	e13ffc17 	ldw	r4,-16(fp)
 4032458:	40322d40 	call	40322d4 <alt_file_locked>
 403245c:	e0bffa15 	stw	r2,-24(fp)
 4032460:	e0bffa17 	ldw	r2,-24(fp)
 4032464:	10001016 	blt	r2,zero,40324a8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4032468:	e0bff817 	ldw	r2,-32(fp)
 403246c:	10800317 	ldw	r2,12(r2)
 4032470:	10000826 	beq	r2,zero,4032494 <open+0xfc>
 4032474:	e0bff817 	ldw	r2,-32(fp)
 4032478:	10800317 	ldw	r2,12(r2)
 403247c:	e1ffff17 	ldw	r7,-4(fp)
 4032480:	e1bffe17 	ldw	r6,-8(fp)
 4032484:	e17ffd17 	ldw	r5,-12(fp)
 4032488:	e13ffc17 	ldw	r4,-16(fp)
 403248c:	103ee83a 	callr	r2
 4032490:	00000106 	br	4032498 <open+0x100>
 4032494:	0005883a 	mov	r2,zero
 4032498:	e0bffa15 	stw	r2,-24(fp)
 403249c:	00000206 	br	40324a8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40324a0:	00bffb44 	movi	r2,-19
 40324a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40324a8:	e0bffa17 	ldw	r2,-24(fp)
 40324ac:	1000090e 	bge	r2,zero,40324d4 <open+0x13c>
  {
    alt_release_fd (index);  
 40324b0:	e13ff917 	ldw	r4,-28(fp)
 40324b4:	402f2900 	call	402f290 <alt_release_fd>
    ALT_ERRNO = -status;
 40324b8:	40322980 	call	4032298 <alt_get_errno>
 40324bc:	1007883a 	mov	r3,r2
 40324c0:	e0bffa17 	ldw	r2,-24(fp)
 40324c4:	0085c83a 	sub	r2,zero,r2
 40324c8:	18800015 	stw	r2,0(r3)
    return -1;
 40324cc:	00bfffc4 	movi	r2,-1
 40324d0:	00000106 	br	40324d8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40324d4:	e0bff917 	ldw	r2,-28(fp)
}
 40324d8:	e037883a 	mov	sp,fp
 40324dc:	dfc00117 	ldw	ra,4(sp)
 40324e0:	df000017 	ldw	fp,0(sp)
 40324e4:	dec00204 	addi	sp,sp,8
 40324e8:	f800283a 	ret

040324ec <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40324ec:	defffa04 	addi	sp,sp,-24
 40324f0:	df000515 	stw	fp,20(sp)
 40324f4:	df000504 	addi	fp,sp,20
 40324f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40324fc:	0005303a 	rdctl	r2,status
 4032500:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4032504:	e0fffc17 	ldw	r3,-16(fp)
 4032508:	00bfff84 	movi	r2,-2
 403250c:	1884703a 	and	r2,r3,r2
 4032510:	1001703a 	wrctl	status,r2
  
  return context;
 4032514:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4032518:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 403251c:	e0bfff17 	ldw	r2,-4(fp)
 4032520:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4032524:	e0bffd17 	ldw	r2,-12(fp)
 4032528:	10800017 	ldw	r2,0(r2)
 403252c:	e0fffd17 	ldw	r3,-12(fp)
 4032530:	18c00117 	ldw	r3,4(r3)
 4032534:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4032538:	e0bffd17 	ldw	r2,-12(fp)
 403253c:	10800117 	ldw	r2,4(r2)
 4032540:	e0fffd17 	ldw	r3,-12(fp)
 4032544:	18c00017 	ldw	r3,0(r3)
 4032548:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 403254c:	e0bffd17 	ldw	r2,-12(fp)
 4032550:	e0fffd17 	ldw	r3,-12(fp)
 4032554:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4032558:	e0bffd17 	ldw	r2,-12(fp)
 403255c:	e0fffd17 	ldw	r3,-12(fp)
 4032560:	10c00015 	stw	r3,0(r2)
 4032564:	e0bffb17 	ldw	r2,-20(fp)
 4032568:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 403256c:	e0bffe17 	ldw	r2,-8(fp)
 4032570:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4032574:	0001883a 	nop
 4032578:	e037883a 	mov	sp,fp
 403257c:	df000017 	ldw	fp,0(sp)
 4032580:	dec00104 	addi	sp,sp,4
 4032584:	f800283a 	ret

04032588 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4032588:	defffb04 	addi	sp,sp,-20
 403258c:	dfc00415 	stw	ra,16(sp)
 4032590:	df000315 	stw	fp,12(sp)
 4032594:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4032598:	d0a01017 	ldw	r2,-32704(gp)
 403259c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40325a0:	d0a73917 	ldw	r2,-25372(gp)
 40325a4:	10800044 	addi	r2,r2,1
 40325a8:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40325ac:	00002e06 	br	4032668 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40325b0:	e0bffd17 	ldw	r2,-12(fp)
 40325b4:	10800017 	ldw	r2,0(r2)
 40325b8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40325bc:	e0bffd17 	ldw	r2,-12(fp)
 40325c0:	10800403 	ldbu	r2,16(r2)
 40325c4:	10803fcc 	andi	r2,r2,255
 40325c8:	10000426 	beq	r2,zero,40325dc <alt_tick+0x54>
 40325cc:	d0a73917 	ldw	r2,-25372(gp)
 40325d0:	1000021e 	bne	r2,zero,40325dc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40325d4:	e0bffd17 	ldw	r2,-12(fp)
 40325d8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40325dc:	e0bffd17 	ldw	r2,-12(fp)
 40325e0:	10800217 	ldw	r2,8(r2)
 40325e4:	d0e73917 	ldw	r3,-25372(gp)
 40325e8:	18801d36 	bltu	r3,r2,4032660 <alt_tick+0xd8>
 40325ec:	e0bffd17 	ldw	r2,-12(fp)
 40325f0:	10800403 	ldbu	r2,16(r2)
 40325f4:	10803fcc 	andi	r2,r2,255
 40325f8:	1000191e 	bne	r2,zero,4032660 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40325fc:	e0bffd17 	ldw	r2,-12(fp)
 4032600:	10800317 	ldw	r2,12(r2)
 4032604:	e0fffd17 	ldw	r3,-12(fp)
 4032608:	18c00517 	ldw	r3,20(r3)
 403260c:	1809883a 	mov	r4,r3
 4032610:	103ee83a 	callr	r2
 4032614:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4032618:	e0bfff17 	ldw	r2,-4(fp)
 403261c:	1000031e 	bne	r2,zero,403262c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4032620:	e13ffd17 	ldw	r4,-12(fp)
 4032624:	40324ec0 	call	40324ec <alt_alarm_stop>
 4032628:	00000d06 	br	4032660 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 403262c:	e0bffd17 	ldw	r2,-12(fp)
 4032630:	10c00217 	ldw	r3,8(r2)
 4032634:	e0bfff17 	ldw	r2,-4(fp)
 4032638:	1887883a 	add	r3,r3,r2
 403263c:	e0bffd17 	ldw	r2,-12(fp)
 4032640:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4032644:	e0bffd17 	ldw	r2,-12(fp)
 4032648:	10c00217 	ldw	r3,8(r2)
 403264c:	d0a73917 	ldw	r2,-25372(gp)
 4032650:	1880032e 	bgeu	r3,r2,4032660 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4032654:	e0bffd17 	ldw	r2,-12(fp)
 4032658:	00c00044 	movi	r3,1
 403265c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4032660:	e0bffe17 	ldw	r2,-8(fp)
 4032664:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4032668:	e0fffd17 	ldw	r3,-12(fp)
 403266c:	d0a01004 	addi	r2,gp,-32704
 4032670:	18bfcf1e 	bne	r3,r2,40325b0 <__alt_data_end+0xffff25b0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4032674:	0001883a 	nop
}
 4032678:	0001883a 	nop
 403267c:	e037883a 	mov	sp,fp
 4032680:	dfc00117 	ldw	ra,4(sp)
 4032684:	df000017 	ldw	fp,0(sp)
 4032688:	dec00204 	addi	sp,sp,8
 403268c:	f800283a 	ret

04032690 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4032690:	deffff04 	addi	sp,sp,-4
 4032694:	df000015 	stw	fp,0(sp)
 4032698:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 403269c:	000170fa 	wrctl	ienable,zero
}
 40326a0:	0001883a 	nop
 40326a4:	e037883a 	mov	sp,fp
 40326a8:	df000017 	ldw	fp,0(sp)
 40326ac:	dec00104 	addi	sp,sp,4
 40326b0:	f800283a 	ret

040326b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40326b4:	defffb04 	addi	sp,sp,-20
 40326b8:	dfc00415 	stw	ra,16(sp)
 40326bc:	df000315 	stw	fp,12(sp)
 40326c0:	df000304 	addi	fp,sp,12
 40326c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40326c8:	d0a00617 	ldw	r2,-32744(gp)
 40326cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40326d0:	00003106 	br	4032798 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40326d4:	e0bffd17 	ldw	r2,-12(fp)
 40326d8:	10800217 	ldw	r2,8(r2)
 40326dc:	1009883a 	mov	r4,r2
 40326e0:	402896c0 	call	402896c <strlen>
 40326e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40326e8:	e0bffd17 	ldw	r2,-12(fp)
 40326ec:	10c00217 	ldw	r3,8(r2)
 40326f0:	e0bffe17 	ldw	r2,-8(fp)
 40326f4:	10bfffc4 	addi	r2,r2,-1
 40326f8:	1885883a 	add	r2,r3,r2
 40326fc:	10800003 	ldbu	r2,0(r2)
 4032700:	10803fcc 	andi	r2,r2,255
 4032704:	1080201c 	xori	r2,r2,128
 4032708:	10bfe004 	addi	r2,r2,-128
 403270c:	10800bd8 	cmpnei	r2,r2,47
 4032710:	1000031e 	bne	r2,zero,4032720 <alt_find_file+0x6c>
    {
      len -= 1;
 4032714:	e0bffe17 	ldw	r2,-8(fp)
 4032718:	10bfffc4 	addi	r2,r2,-1
 403271c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4032720:	e0bffe17 	ldw	r2,-8(fp)
 4032724:	e0ffff17 	ldw	r3,-4(fp)
 4032728:	1885883a 	add	r2,r3,r2
 403272c:	10800003 	ldbu	r2,0(r2)
 4032730:	10803fcc 	andi	r2,r2,255
 4032734:	1080201c 	xori	r2,r2,128
 4032738:	10bfe004 	addi	r2,r2,-128
 403273c:	10800be0 	cmpeqi	r2,r2,47
 4032740:	1000081e 	bne	r2,zero,4032764 <alt_find_file+0xb0>
 4032744:	e0bffe17 	ldw	r2,-8(fp)
 4032748:	e0ffff17 	ldw	r3,-4(fp)
 403274c:	1885883a 	add	r2,r3,r2
 4032750:	10800003 	ldbu	r2,0(r2)
 4032754:	10803fcc 	andi	r2,r2,255
 4032758:	1080201c 	xori	r2,r2,128
 403275c:	10bfe004 	addi	r2,r2,-128
 4032760:	10000a1e 	bne	r2,zero,403278c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4032764:	e0bffd17 	ldw	r2,-12(fp)
 4032768:	10800217 	ldw	r2,8(r2)
 403276c:	e0fffe17 	ldw	r3,-8(fp)
 4032770:	180d883a 	mov	r6,r3
 4032774:	e17fff17 	ldw	r5,-4(fp)
 4032778:	1009883a 	mov	r4,r2
 403277c:	40329d80 	call	40329d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4032780:	1000021e 	bne	r2,zero,403278c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4032784:	e0bffd17 	ldw	r2,-12(fp)
 4032788:	00000706 	br	40327a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 403278c:	e0bffd17 	ldw	r2,-12(fp)
 4032790:	10800017 	ldw	r2,0(r2)
 4032794:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4032798:	e0fffd17 	ldw	r3,-12(fp)
 403279c:	d0a00604 	addi	r2,gp,-32744
 40327a0:	18bfcc1e 	bne	r3,r2,40326d4 <__alt_data_end+0xffff26d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40327a4:	0005883a 	mov	r2,zero
}
 40327a8:	e037883a 	mov	sp,fp
 40327ac:	dfc00117 	ldw	ra,4(sp)
 40327b0:	df000017 	ldw	fp,0(sp)
 40327b4:	dec00204 	addi	sp,sp,8
 40327b8:	f800283a 	ret

040327bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40327bc:	defffc04 	addi	sp,sp,-16
 40327c0:	df000315 	stw	fp,12(sp)
 40327c4:	df000304 	addi	fp,sp,12
 40327c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40327cc:	00bffa04 	movi	r2,-24
 40327d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40327d4:	e03ffd15 	stw	zero,-12(fp)
 40327d8:	00001906 	br	4032840 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40327dc:	008100f4 	movhi	r2,1027
 40327e0:	10909504 	addi	r2,r2,16980
 40327e4:	e0fffd17 	ldw	r3,-12(fp)
 40327e8:	18c00324 	muli	r3,r3,12
 40327ec:	10c5883a 	add	r2,r2,r3
 40327f0:	10800017 	ldw	r2,0(r2)
 40327f4:	10000f1e 	bne	r2,zero,4032834 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40327f8:	008100f4 	movhi	r2,1027
 40327fc:	10909504 	addi	r2,r2,16980
 4032800:	e0fffd17 	ldw	r3,-12(fp)
 4032804:	18c00324 	muli	r3,r3,12
 4032808:	10c5883a 	add	r2,r2,r3
 403280c:	e0ffff17 	ldw	r3,-4(fp)
 4032810:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4032814:	d0e00a17 	ldw	r3,-32728(gp)
 4032818:	e0bffd17 	ldw	r2,-12(fp)
 403281c:	1880020e 	bge	r3,r2,4032828 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4032820:	e0bffd17 	ldw	r2,-12(fp)
 4032824:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4032828:	e0bffd17 	ldw	r2,-12(fp)
 403282c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4032830:	00000606 	br	403284c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4032834:	e0bffd17 	ldw	r2,-12(fp)
 4032838:	10800044 	addi	r2,r2,1
 403283c:	e0bffd15 	stw	r2,-12(fp)
 4032840:	e0bffd17 	ldw	r2,-12(fp)
 4032844:	10800810 	cmplti	r2,r2,32
 4032848:	103fe41e 	bne	r2,zero,40327dc <__alt_data_end+0xffff27dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 403284c:	e0bffe17 	ldw	r2,-8(fp)
}
 4032850:	e037883a 	mov	sp,fp
 4032854:	df000017 	ldw	fp,0(sp)
 4032858:	dec00104 	addi	sp,sp,4
 403285c:	f800283a 	ret

04032860 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4032860:	defffb04 	addi	sp,sp,-20
 4032864:	df000415 	stw	fp,16(sp)
 4032868:	df000404 	addi	fp,sp,16
 403286c:	e13ffe15 	stw	r4,-8(fp)
 4032870:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4032874:	e0bfff17 	ldw	r2,-4(fp)
 4032878:	10840070 	cmpltui	r2,r2,4097
 403287c:	1000021e 	bne	r2,zero,4032888 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4032880:	00840004 	movi	r2,4096
 4032884:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4032888:	e0fffe17 	ldw	r3,-8(fp)
 403288c:	e0bfff17 	ldw	r2,-4(fp)
 4032890:	1885883a 	add	r2,r3,r2
 4032894:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4032898:	e0bffe17 	ldw	r2,-8(fp)
 403289c:	e0bffc15 	stw	r2,-16(fp)
 40328a0:	00000506 	br	40328b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40328a4:	e0bffc17 	ldw	r2,-16(fp)
 40328a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40328ac:	e0bffc17 	ldw	r2,-16(fp)
 40328b0:	10800804 	addi	r2,r2,32
 40328b4:	e0bffc15 	stw	r2,-16(fp)
 40328b8:	e0fffc17 	ldw	r3,-16(fp)
 40328bc:	e0bffd17 	ldw	r2,-12(fp)
 40328c0:	18bff836 	bltu	r3,r2,40328a4 <__alt_data_end+0xffff28a4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40328c4:	e0bffe17 	ldw	r2,-8(fp)
 40328c8:	108007cc 	andi	r2,r2,31
 40328cc:	10000226 	beq	r2,zero,40328d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40328d0:	e0bffc17 	ldw	r2,-16(fp)
 40328d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40328d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40328dc:	0001883a 	nop
 40328e0:	e037883a 	mov	sp,fp
 40328e4:	df000017 	ldw	fp,0(sp)
 40328e8:	dec00104 	addi	sp,sp,4
 40328ec:	f800283a 	ret

040328f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40328f0:	defffe04 	addi	sp,sp,-8
 40328f4:	df000115 	stw	fp,4(sp)
 40328f8:	df000104 	addi	fp,sp,4
 40328fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4032900:	e0bfff17 	ldw	r2,-4(fp)
 4032904:	10bffe84 	addi	r2,r2,-6
 4032908:	10c00428 	cmpgeui	r3,r2,16
 403290c:	18001a1e 	bne	r3,zero,4032978 <alt_exception_cause_generated_bad_addr+0x88>
 4032910:	100690ba 	slli	r3,r2,2
 4032914:	008100f4 	movhi	r2,1027
 4032918:	108a4a04 	addi	r2,r2,10536
 403291c:	1885883a 	add	r2,r3,r2
 4032920:	10800017 	ldw	r2,0(r2)
 4032924:	1000683a 	jmp	r2
 4032928:	04032968 	cmpgeui	r16,zero,3237
 403292c:	04032968 	cmpgeui	r16,zero,3237
 4032930:	04032978 	rdprs	r16,zero,3237
 4032934:	04032978 	rdprs	r16,zero,3237
 4032938:	04032978 	rdprs	r16,zero,3237
 403293c:	04032968 	cmpgeui	r16,zero,3237
 4032940:	04032970 	cmpltui	r16,zero,3237
 4032944:	04032978 	rdprs	r16,zero,3237
 4032948:	04032968 	cmpgeui	r16,zero,3237
 403294c:	04032968 	cmpgeui	r16,zero,3237
 4032950:	04032978 	rdprs	r16,zero,3237
 4032954:	04032968 	cmpgeui	r16,zero,3237
 4032958:	04032970 	cmpltui	r16,zero,3237
 403295c:	04032978 	rdprs	r16,zero,3237
 4032960:	04032978 	rdprs	r16,zero,3237
 4032964:	04032968 	cmpgeui	r16,zero,3237
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4032968:	00800044 	movi	r2,1
 403296c:	00000306 	br	403297c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4032970:	0005883a 	mov	r2,zero
 4032974:	00000106 	br	403297c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4032978:	0005883a 	mov	r2,zero
  }
}
 403297c:	e037883a 	mov	sp,fp
 4032980:	df000017 	ldw	fp,0(sp)
 4032984:	dec00104 	addi	sp,sp,4
 4032988:	f800283a 	ret

0403298c <atexit>:
 403298c:	200b883a 	mov	r5,r4
 4032990:	000f883a 	mov	r7,zero
 4032994:	000d883a 	mov	r6,zero
 4032998:	0009883a 	mov	r4,zero
 403299c:	4032bbc1 	jmpi	4032bbc <__register_exitproc>

040329a0 <exit>:
 40329a0:	defffe04 	addi	sp,sp,-8
 40329a4:	000b883a 	mov	r5,zero
 40329a8:	dc000015 	stw	r16,0(sp)
 40329ac:	dfc00115 	stw	ra,4(sp)
 40329b0:	2021883a 	mov	r16,r4
 40329b4:	4032cd40 	call	4032cd4 <__call_exitprocs>
 40329b8:	008100f4 	movhi	r2,1027
 40329bc:	10955f04 	addi	r2,r2,21884
 40329c0:	11000017 	ldw	r4,0(r2)
 40329c4:	20800f17 	ldw	r2,60(r4)
 40329c8:	10000126 	beq	r2,zero,40329d0 <exit+0x30>
 40329cc:	103ee83a 	callr	r2
 40329d0:	8009883a 	mov	r4,r16
 40329d4:	4032ec40 	call	4032ec4 <_exit>

040329d8 <memcmp>:
 40329d8:	01c000c4 	movi	r7,3
 40329dc:	3980192e 	bgeu	r7,r6,4032a44 <memcmp+0x6c>
 40329e0:	2144b03a 	or	r2,r4,r5
 40329e4:	11c4703a 	and	r2,r2,r7
 40329e8:	10000f26 	beq	r2,zero,4032a28 <memcmp+0x50>
 40329ec:	20800003 	ldbu	r2,0(r4)
 40329f0:	28c00003 	ldbu	r3,0(r5)
 40329f4:	10c0151e 	bne	r2,r3,4032a4c <memcmp+0x74>
 40329f8:	31bfff84 	addi	r6,r6,-2
 40329fc:	01ffffc4 	movi	r7,-1
 4032a00:	00000406 	br	4032a14 <memcmp+0x3c>
 4032a04:	20800003 	ldbu	r2,0(r4)
 4032a08:	28c00003 	ldbu	r3,0(r5)
 4032a0c:	31bfffc4 	addi	r6,r6,-1
 4032a10:	10c00e1e 	bne	r2,r3,4032a4c <memcmp+0x74>
 4032a14:	21000044 	addi	r4,r4,1
 4032a18:	29400044 	addi	r5,r5,1
 4032a1c:	31fff91e 	bne	r6,r7,4032a04 <__alt_data_end+0xffff2a04>
 4032a20:	0005883a 	mov	r2,zero
 4032a24:	f800283a 	ret
 4032a28:	20c00017 	ldw	r3,0(r4)
 4032a2c:	28800017 	ldw	r2,0(r5)
 4032a30:	18bfee1e 	bne	r3,r2,40329ec <__alt_data_end+0xffff29ec>
 4032a34:	31bfff04 	addi	r6,r6,-4
 4032a38:	21000104 	addi	r4,r4,4
 4032a3c:	29400104 	addi	r5,r5,4
 4032a40:	39bff936 	bltu	r7,r6,4032a28 <__alt_data_end+0xffff2a28>
 4032a44:	303fe91e 	bne	r6,zero,40329ec <__alt_data_end+0xffff29ec>
 4032a48:	003ff506 	br	4032a20 <__alt_data_end+0xffff2a20>
 4032a4c:	10c5c83a 	sub	r2,r2,r3
 4032a50:	f800283a 	ret

04032a54 <_putc_r>:
 4032a54:	defffc04 	addi	sp,sp,-16
 4032a58:	dc000215 	stw	r16,8(sp)
 4032a5c:	dfc00315 	stw	ra,12(sp)
 4032a60:	2021883a 	mov	r16,r4
 4032a64:	20000226 	beq	r4,zero,4032a70 <_putc_r+0x1c>
 4032a68:	20800e17 	ldw	r2,56(r4)
 4032a6c:	10001b26 	beq	r2,zero,4032adc <_putc_r+0x88>
 4032a70:	30800217 	ldw	r2,8(r6)
 4032a74:	10bfffc4 	addi	r2,r2,-1
 4032a78:	30800215 	stw	r2,8(r6)
 4032a7c:	10000a16 	blt	r2,zero,4032aa8 <_putc_r+0x54>
 4032a80:	30800017 	ldw	r2,0(r6)
 4032a84:	11400005 	stb	r5,0(r2)
 4032a88:	30800017 	ldw	r2,0(r6)
 4032a8c:	10c00044 	addi	r3,r2,1
 4032a90:	30c00015 	stw	r3,0(r6)
 4032a94:	10800003 	ldbu	r2,0(r2)
 4032a98:	dfc00317 	ldw	ra,12(sp)
 4032a9c:	dc000217 	ldw	r16,8(sp)
 4032aa0:	dec00404 	addi	sp,sp,16
 4032aa4:	f800283a 	ret
 4032aa8:	30c00617 	ldw	r3,24(r6)
 4032aac:	10c00616 	blt	r2,r3,4032ac8 <_putc_r+0x74>
 4032ab0:	30800017 	ldw	r2,0(r6)
 4032ab4:	00c00284 	movi	r3,10
 4032ab8:	11400005 	stb	r5,0(r2)
 4032abc:	30800017 	ldw	r2,0(r6)
 4032ac0:	11400003 	ldbu	r5,0(r2)
 4032ac4:	28fff11e 	bne	r5,r3,4032a8c <__alt_data_end+0xffff2a8c>
 4032ac8:	8009883a 	mov	r4,r16
 4032acc:	dfc00317 	ldw	ra,12(sp)
 4032ad0:	dc000217 	ldw	r16,8(sp)
 4032ad4:	dec00404 	addi	sp,sp,16
 4032ad8:	402b1bc1 	jmpi	402b1bc <__swbuf_r>
 4032adc:	d9400015 	stw	r5,0(sp)
 4032ae0:	d9800115 	stw	r6,4(sp)
 4032ae4:	402628c0 	call	402628c <__sinit>
 4032ae8:	d9800117 	ldw	r6,4(sp)
 4032aec:	d9400017 	ldw	r5,0(sp)
 4032af0:	003fdf06 	br	4032a70 <__alt_data_end+0xffff2a70>

04032af4 <putc>:
 4032af4:	008100f4 	movhi	r2,1027
 4032af8:	defffc04 	addi	sp,sp,-16
 4032afc:	10956004 	addi	r2,r2,21888
 4032b00:	dc000115 	stw	r16,4(sp)
 4032b04:	14000017 	ldw	r16,0(r2)
 4032b08:	dc400215 	stw	r17,8(sp)
 4032b0c:	dfc00315 	stw	ra,12(sp)
 4032b10:	2023883a 	mov	r17,r4
 4032b14:	80000226 	beq	r16,zero,4032b20 <putc+0x2c>
 4032b18:	80800e17 	ldw	r2,56(r16)
 4032b1c:	10001a26 	beq	r2,zero,4032b88 <putc+0x94>
 4032b20:	28800217 	ldw	r2,8(r5)
 4032b24:	10bfffc4 	addi	r2,r2,-1
 4032b28:	28800215 	stw	r2,8(r5)
 4032b2c:	10000b16 	blt	r2,zero,4032b5c <putc+0x68>
 4032b30:	28800017 	ldw	r2,0(r5)
 4032b34:	14400005 	stb	r17,0(r2)
 4032b38:	28800017 	ldw	r2,0(r5)
 4032b3c:	10c00044 	addi	r3,r2,1
 4032b40:	28c00015 	stw	r3,0(r5)
 4032b44:	10800003 	ldbu	r2,0(r2)
 4032b48:	dfc00317 	ldw	ra,12(sp)
 4032b4c:	dc400217 	ldw	r17,8(sp)
 4032b50:	dc000117 	ldw	r16,4(sp)
 4032b54:	dec00404 	addi	sp,sp,16
 4032b58:	f800283a 	ret
 4032b5c:	28c00617 	ldw	r3,24(r5)
 4032b60:	10c00e16 	blt	r2,r3,4032b9c <putc+0xa8>
 4032b64:	28800017 	ldw	r2,0(r5)
 4032b68:	01000284 	movi	r4,10
 4032b6c:	14400005 	stb	r17,0(r2)
 4032b70:	28800017 	ldw	r2,0(r5)
 4032b74:	10c00003 	ldbu	r3,0(r2)
 4032b78:	193ff01e 	bne	r3,r4,4032b3c <__alt_data_end+0xffff2b3c>
 4032b7c:	280d883a 	mov	r6,r5
 4032b80:	180b883a 	mov	r5,r3
 4032b84:	00000706 	br	4032ba4 <putc+0xb0>
 4032b88:	8009883a 	mov	r4,r16
 4032b8c:	d9400015 	stw	r5,0(sp)
 4032b90:	402628c0 	call	402628c <__sinit>
 4032b94:	d9400017 	ldw	r5,0(sp)
 4032b98:	003fe106 	br	4032b20 <__alt_data_end+0xffff2b20>
 4032b9c:	280d883a 	mov	r6,r5
 4032ba0:	880b883a 	mov	r5,r17
 4032ba4:	8009883a 	mov	r4,r16
 4032ba8:	dfc00317 	ldw	ra,12(sp)
 4032bac:	dc400217 	ldw	r17,8(sp)
 4032bb0:	dc000117 	ldw	r16,4(sp)
 4032bb4:	dec00404 	addi	sp,sp,16
 4032bb8:	402b1bc1 	jmpi	402b1bc <__swbuf_r>

04032bbc <__register_exitproc>:
 4032bbc:	defffa04 	addi	sp,sp,-24
 4032bc0:	dc000315 	stw	r16,12(sp)
 4032bc4:	040100f4 	movhi	r16,1027
 4032bc8:	84155f04 	addi	r16,r16,21884
 4032bcc:	80c00017 	ldw	r3,0(r16)
 4032bd0:	dc400415 	stw	r17,16(sp)
 4032bd4:	dfc00515 	stw	ra,20(sp)
 4032bd8:	18805217 	ldw	r2,328(r3)
 4032bdc:	2023883a 	mov	r17,r4
 4032be0:	10003726 	beq	r2,zero,4032cc0 <__register_exitproc+0x104>
 4032be4:	10c00117 	ldw	r3,4(r2)
 4032be8:	010007c4 	movi	r4,31
 4032bec:	20c00e16 	blt	r4,r3,4032c28 <__register_exitproc+0x6c>
 4032bf0:	1a000044 	addi	r8,r3,1
 4032bf4:	8800221e 	bne	r17,zero,4032c80 <__register_exitproc+0xc4>
 4032bf8:	18c00084 	addi	r3,r3,2
 4032bfc:	18c7883a 	add	r3,r3,r3
 4032c00:	18c7883a 	add	r3,r3,r3
 4032c04:	12000115 	stw	r8,4(r2)
 4032c08:	10c7883a 	add	r3,r2,r3
 4032c0c:	19400015 	stw	r5,0(r3)
 4032c10:	0005883a 	mov	r2,zero
 4032c14:	dfc00517 	ldw	ra,20(sp)
 4032c18:	dc400417 	ldw	r17,16(sp)
 4032c1c:	dc000317 	ldw	r16,12(sp)
 4032c20:	dec00604 	addi	sp,sp,24
 4032c24:	f800283a 	ret
 4032c28:	00800034 	movhi	r2,0
 4032c2c:	10800004 	addi	r2,r2,0
 4032c30:	10002626 	beq	r2,zero,4032ccc <__register_exitproc+0x110>
 4032c34:	01006404 	movi	r4,400
 4032c38:	d9400015 	stw	r5,0(sp)
 4032c3c:	d9800115 	stw	r6,4(sp)
 4032c40:	d9c00215 	stw	r7,8(sp)
 4032c44:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4032c48:	d9400017 	ldw	r5,0(sp)
 4032c4c:	d9800117 	ldw	r6,4(sp)
 4032c50:	d9c00217 	ldw	r7,8(sp)
 4032c54:	10001d26 	beq	r2,zero,4032ccc <__register_exitproc+0x110>
 4032c58:	81000017 	ldw	r4,0(r16)
 4032c5c:	10000115 	stw	zero,4(r2)
 4032c60:	02000044 	movi	r8,1
 4032c64:	22405217 	ldw	r9,328(r4)
 4032c68:	0007883a 	mov	r3,zero
 4032c6c:	12400015 	stw	r9,0(r2)
 4032c70:	20805215 	stw	r2,328(r4)
 4032c74:	10006215 	stw	zero,392(r2)
 4032c78:	10006315 	stw	zero,396(r2)
 4032c7c:	883fde26 	beq	r17,zero,4032bf8 <__alt_data_end+0xffff2bf8>
 4032c80:	18c9883a 	add	r4,r3,r3
 4032c84:	2109883a 	add	r4,r4,r4
 4032c88:	1109883a 	add	r4,r2,r4
 4032c8c:	21802215 	stw	r6,136(r4)
 4032c90:	01800044 	movi	r6,1
 4032c94:	12406217 	ldw	r9,392(r2)
 4032c98:	30cc983a 	sll	r6,r6,r3
 4032c9c:	4992b03a 	or	r9,r9,r6
 4032ca0:	12406215 	stw	r9,392(r2)
 4032ca4:	21c04215 	stw	r7,264(r4)
 4032ca8:	01000084 	movi	r4,2
 4032cac:	893fd21e 	bne	r17,r4,4032bf8 <__alt_data_end+0xffff2bf8>
 4032cb0:	11006317 	ldw	r4,396(r2)
 4032cb4:	218cb03a 	or	r6,r4,r6
 4032cb8:	11806315 	stw	r6,396(r2)
 4032cbc:	003fce06 	br	4032bf8 <__alt_data_end+0xffff2bf8>
 4032cc0:	18805304 	addi	r2,r3,332
 4032cc4:	18805215 	stw	r2,328(r3)
 4032cc8:	003fc606 	br	4032be4 <__alt_data_end+0xffff2be4>
 4032ccc:	00bfffc4 	movi	r2,-1
 4032cd0:	003fd006 	br	4032c14 <__alt_data_end+0xffff2c14>

04032cd4 <__call_exitprocs>:
 4032cd4:	defff504 	addi	sp,sp,-44
 4032cd8:	df000915 	stw	fp,36(sp)
 4032cdc:	dd400615 	stw	r21,24(sp)
 4032ce0:	dc800315 	stw	r18,12(sp)
 4032ce4:	dfc00a15 	stw	ra,40(sp)
 4032ce8:	ddc00815 	stw	r23,32(sp)
 4032cec:	dd800715 	stw	r22,28(sp)
 4032cf0:	dd000515 	stw	r20,20(sp)
 4032cf4:	dcc00415 	stw	r19,16(sp)
 4032cf8:	dc400215 	stw	r17,8(sp)
 4032cfc:	dc000115 	stw	r16,4(sp)
 4032d00:	d9000015 	stw	r4,0(sp)
 4032d04:	2839883a 	mov	fp,r5
 4032d08:	04800044 	movi	r18,1
 4032d0c:	057fffc4 	movi	r21,-1
 4032d10:	008100f4 	movhi	r2,1027
 4032d14:	10955f04 	addi	r2,r2,21884
 4032d18:	12000017 	ldw	r8,0(r2)
 4032d1c:	45005217 	ldw	r20,328(r8)
 4032d20:	44c05204 	addi	r19,r8,328
 4032d24:	a0001c26 	beq	r20,zero,4032d98 <__call_exitprocs+0xc4>
 4032d28:	a0800117 	ldw	r2,4(r20)
 4032d2c:	15ffffc4 	addi	r23,r2,-1
 4032d30:	b8000d16 	blt	r23,zero,4032d68 <__call_exitprocs+0x94>
 4032d34:	14000044 	addi	r16,r2,1
 4032d38:	8421883a 	add	r16,r16,r16
 4032d3c:	8421883a 	add	r16,r16,r16
 4032d40:	84402004 	addi	r17,r16,128
 4032d44:	a463883a 	add	r17,r20,r17
 4032d48:	a421883a 	add	r16,r20,r16
 4032d4c:	e0001e26 	beq	fp,zero,4032dc8 <__call_exitprocs+0xf4>
 4032d50:	80804017 	ldw	r2,256(r16)
 4032d54:	e0801c26 	beq	fp,r2,4032dc8 <__call_exitprocs+0xf4>
 4032d58:	bdffffc4 	addi	r23,r23,-1
 4032d5c:	843fff04 	addi	r16,r16,-4
 4032d60:	8c7fff04 	addi	r17,r17,-4
 4032d64:	bd7ff91e 	bne	r23,r21,4032d4c <__alt_data_end+0xffff2d4c>
 4032d68:	00800034 	movhi	r2,0
 4032d6c:	10800004 	addi	r2,r2,0
 4032d70:	10000926 	beq	r2,zero,4032d98 <__call_exitprocs+0xc4>
 4032d74:	a0800117 	ldw	r2,4(r20)
 4032d78:	1000301e 	bne	r2,zero,4032e3c <__call_exitprocs+0x168>
 4032d7c:	a0800017 	ldw	r2,0(r20)
 4032d80:	10003226 	beq	r2,zero,4032e4c <__call_exitprocs+0x178>
 4032d84:	a009883a 	mov	r4,r20
 4032d88:	98800015 	stw	r2,0(r19)
 4032d8c:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4032d90:	9d000017 	ldw	r20,0(r19)
 4032d94:	a03fe41e 	bne	r20,zero,4032d28 <__alt_data_end+0xffff2d28>
 4032d98:	dfc00a17 	ldw	ra,40(sp)
 4032d9c:	df000917 	ldw	fp,36(sp)
 4032da0:	ddc00817 	ldw	r23,32(sp)
 4032da4:	dd800717 	ldw	r22,28(sp)
 4032da8:	dd400617 	ldw	r21,24(sp)
 4032dac:	dd000517 	ldw	r20,20(sp)
 4032db0:	dcc00417 	ldw	r19,16(sp)
 4032db4:	dc800317 	ldw	r18,12(sp)
 4032db8:	dc400217 	ldw	r17,8(sp)
 4032dbc:	dc000117 	ldw	r16,4(sp)
 4032dc0:	dec00b04 	addi	sp,sp,44
 4032dc4:	f800283a 	ret
 4032dc8:	a0800117 	ldw	r2,4(r20)
 4032dcc:	80c00017 	ldw	r3,0(r16)
 4032dd0:	10bfffc4 	addi	r2,r2,-1
 4032dd4:	15c01426 	beq	r2,r23,4032e28 <__call_exitprocs+0x154>
 4032dd8:	80000015 	stw	zero,0(r16)
 4032ddc:	183fde26 	beq	r3,zero,4032d58 <__alt_data_end+0xffff2d58>
 4032de0:	95c8983a 	sll	r4,r18,r23
 4032de4:	a0806217 	ldw	r2,392(r20)
 4032de8:	a5800117 	ldw	r22,4(r20)
 4032dec:	2084703a 	and	r2,r4,r2
 4032df0:	10000b26 	beq	r2,zero,4032e20 <__call_exitprocs+0x14c>
 4032df4:	a0806317 	ldw	r2,396(r20)
 4032df8:	2088703a 	and	r4,r4,r2
 4032dfc:	20000c1e 	bne	r4,zero,4032e30 <__call_exitprocs+0x15c>
 4032e00:	89400017 	ldw	r5,0(r17)
 4032e04:	d9000017 	ldw	r4,0(sp)
 4032e08:	183ee83a 	callr	r3
 4032e0c:	a0800117 	ldw	r2,4(r20)
 4032e10:	15bfbf1e 	bne	r2,r22,4032d10 <__alt_data_end+0xffff2d10>
 4032e14:	98800017 	ldw	r2,0(r19)
 4032e18:	153fcf26 	beq	r2,r20,4032d58 <__alt_data_end+0xffff2d58>
 4032e1c:	003fbc06 	br	4032d10 <__alt_data_end+0xffff2d10>
 4032e20:	183ee83a 	callr	r3
 4032e24:	003ff906 	br	4032e0c <__alt_data_end+0xffff2e0c>
 4032e28:	a5c00115 	stw	r23,4(r20)
 4032e2c:	003feb06 	br	4032ddc <__alt_data_end+0xffff2ddc>
 4032e30:	89000017 	ldw	r4,0(r17)
 4032e34:	183ee83a 	callr	r3
 4032e38:	003ff406 	br	4032e0c <__alt_data_end+0xffff2e0c>
 4032e3c:	a0800017 	ldw	r2,0(r20)
 4032e40:	a027883a 	mov	r19,r20
 4032e44:	1029883a 	mov	r20,r2
 4032e48:	003fb606 	br	4032d24 <__alt_data_end+0xffff2d24>
 4032e4c:	0005883a 	mov	r2,zero
 4032e50:	003ffb06 	br	4032e40 <__alt_data_end+0xffff2e40>

04032e54 <__floatundidf>:
 4032e54:	defffc04 	addi	sp,sp,-16
 4032e58:	dc800215 	stw	r18,8(sp)
 4032e5c:	2025883a 	mov	r18,r4
 4032e60:	2809883a 	mov	r4,r5
 4032e64:	dfc00315 	stw	ra,12(sp)
 4032e68:	dc400115 	stw	r17,4(sp)
 4032e6c:	dc000015 	stw	r16,0(sp)
 4032e70:	402e6bc0 	call	402e6bc <__floatunsidf>
 4032e74:	000d883a 	mov	r6,zero
 4032e78:	01d07c34 	movhi	r7,16880
 4032e7c:	180b883a 	mov	r5,r3
 4032e80:	1009883a 	mov	r4,r2
 4032e84:	402d54c0 	call	402d54c <__muldf3>
 4032e88:	9009883a 	mov	r4,r18
 4032e8c:	1023883a 	mov	r17,r2
 4032e90:	1821883a 	mov	r16,r3
 4032e94:	402e6bc0 	call	402e6bc <__floatunsidf>
 4032e98:	880d883a 	mov	r6,r17
 4032e9c:	800f883a 	mov	r7,r16
 4032ea0:	1009883a 	mov	r4,r2
 4032ea4:	180b883a 	mov	r5,r3
 4032ea8:	402c1600 	call	402c160 <__adddf3>
 4032eac:	dfc00317 	ldw	ra,12(sp)
 4032eb0:	dc800217 	ldw	r18,8(sp)
 4032eb4:	dc400117 	ldw	r17,4(sp)
 4032eb8:	dc000017 	ldw	r16,0(sp)
 4032ebc:	dec00404 	addi	sp,sp,16
 4032ec0:	f800283a 	ret

04032ec4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4032ec4:	defffd04 	addi	sp,sp,-12
 4032ec8:	df000215 	stw	fp,8(sp)
 4032ecc:	df000204 	addi	fp,sp,8
 4032ed0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4032ed4:	0001883a 	nop
 4032ed8:	e0bfff17 	ldw	r2,-4(fp)
 4032edc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4032ee0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4032ee4:	10000226 	beq	r2,zero,4032ef0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4032ee8:	002af070 	cmpltui	zero,zero,43969
 4032eec:	00000106 	br	4032ef4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4032ef0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4032ef4:	003fff06 	br	4032ef4 <__alt_data_end+0xffff2ef4>


cpu_0_proj.elf:     file format elf32-littlenios2
cpu_0_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020248

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00007a04 memsz 0x00007a04 flags r-x
    LOAD off    0x00008a24 vaddr 0x04027a24 paddr 0x040295e0 align 2**12
         filesz 0x00001bbc memsz 0x00001bbc flags rw-
    LOAD off    0x0000b19c vaddr 0x0402b19c paddr 0x0402b19c align 2**12
         filesz 0x00000000 memsz 0x0000017c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00007180  04020248  04020248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000065c  040273c8  040273c8  000083c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bbc  04027a24  040295e0  00008a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000017c  0402b19c  0402b19c  0000b19c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00000000  00000000  0000a5e0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0402b318  0402b318  0000a5e0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000a5e0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a78  00000000  00000000  0000a608  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0001805f  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000065d7  00000000  00000000  000230df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00007015  00000000  00000000  000296b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001e14  00000000  00000000  000306cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000318e  00000000  00000000  000324e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000034a7  00000000  00000000  0003566e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00038b18  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000530  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003c1ea  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0003c1ed  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003c1f2  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003c1f3  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0003c1f4  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0003c1ff  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0003c20a  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0003c215  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000020  00000000  00000000  0003c21f  2**0
                  CONTENTS, READONLY
 27 .jdi          0000b01f  00000000  00000000  0003c23f  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c2789  00000000  00000000  0004725e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020248 l    d  .text	00000000 .text
040273c8 l    d  .rodata	00000000 .rodata
04027a24 l    d  .rwdata	00000000 .rwdata
0402b19c l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_2	00000000 .sdram_controller_2
0402b318 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/miniproject_2/sw/nios/cpu_0_proj_bsp//obj/HAL/src/crt0.o
04020290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
04021244 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04021644 l     F .text	00000034 alt_dev_reg
04027a24 l     O .rwdata	00001060 jtag_uart_0
04028a84 l     O .rwdata	00000048 mailbox_simple_0
04028acc l     O .rwdata	00000048 mailbox_simple_1
04028b14 l     O .rwdata	00000030 audio_and_video_config_0
04028b44 l     O .rwdata	00000030 audio_0
04028b74 l     O .rwdata	0000002c parallel_port_0
04028ba0 l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04021978 l     F .text	00000210 altera_avalon_jtag_uart_irq
04021b88 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
040221c0 l     F .text	00000090 altera_avalon_mailbox_identify
04022250 l     F .text	00000078 altera_avalon_mailbox_post
040222c8 l     F .text	0000013c altera_avalon_mailbox_simple_tx_isr
04022404 l     F .text	000000ac altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio_and_video_config.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04023c20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
04023d2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04023d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04023fbc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
040240fc l     F .text	0000003c alt_get_errno
04024138 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
04028d74 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04025450 l     F .text	00000008 __fp_unlock
04025464 l     F .text	0000019c __sinit.part.1
04025600 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
04026d88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
04026e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
04026f54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
040270ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
040295dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
04027294 l     F .text	0000003c alt_get_errno
0402b1dc g     O .bss	00000004 alt_instruction_exception_handler
040233e4 g     F .text	00000038 alt_up_av_config_reset
0402383c g     F .text	00000058 alt_up_av_config_read_D5M_cfg_register
0402286c g     F .text	00000150 altera_avalon_mailbox_send
04026c40 g     F .text	00000054 _isatty_r
04023454 g     F .text	00000034 alt_up_av_config_disable_interrupt
04021330 g     F .text	0000007c alt_main
0402b218 g     O .bss	00000100 alt_irq
04026c94 g     F .text	00000060 _lseek_r
040295e0 g       *ABS*	00000000 __flash_rwdata_start
04022da0 g     F .text	00000060 alt_up_audio_read_fifo_avail
0402b318 g       *ABS*	00000000 __alt_heap_start
04023518 g     F .text	000000a4 alt_up_av_config_write_audio_cfg_register
04020e20 g     F .text	00000054 setup_switch_interrupts
04022e00 g     F .text	00000068 alt_up_audio_record_r
040269c8 g     F .text	0000005c __sseek
040257a0 g     F .text	00000010 __sinit
04024c64 g     F .text	00000140 __swbuf_r
04025608 g     F .text	00000068 __sfmoreglue
04027088 g     F .text	00000024 __malloc_unlock
04022d0c g     F .text	00000094 alt_up_audio_reset_audio_core
04025788 g     F .text	00000018 _cleanup
04024558 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
04026be4 g     F .text	0000005c _fstat_r
0402b1e0 g     O .bss	00000004 errno
04026944 g     F .text	00000008 __seofread
04020370 g     F .text	00000060 receive_callback
04022ccc g     F .text	00000040 alt_up_audio_write_interrupt_pending
0402b1cc g     O .bss	00000004 alt_argv
040315a0 g       *ABS*	00000000 _gp
04021614 g     F .text	00000030 usleep
040229bc g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04028bf4 g     O .rwdata	00000180 alt_fd_list
04023ef8 g     F .text	00000090 alt_find_dev
0402491c g     F .text	00000148 memcpy
04020484 g     F .text	00000190 record_process
04025458 g     F .text	0000000c _cleanup_r
04024080 g     F .text	0000007c alt_io_redirect
040273c8 g       *ABS*	00000000 __DTOR_END__
040247b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04020ae4 g     F .text	00000034 reset_core
040224b0 g     F .text	00000078 altera_avalon_mailbox_simple_init
040231e8 g     F .text	00000050 alt_up_audio_read_fifo_head
04021d80 g     F .text	0000021c altera_avalon_jtag_uart_read
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04020fc0 g     F .text	00000064 .hidden __udivsi3
04026eb0 g     F .text	000000a4 isatty
040227f4 g     F .text	00000078 altera_avalon_mailbox_status
040226ec g     F .text	00000108 altera_avalon_mailbox_close
04020a84 g     F .text	00000060 reset_config_device
04024728 g     F .text	00000090 alt_icache_flush
0402b1ec g     O .bss	00000004 __malloc_top_pad
04023364 g     F .text	00000080 alt_up_av_config_read_data
0402b1a8 g     O .bss	00000004 audio_dev
0402689c g     F .text	00000054 _sbrk_r
04026cf4 g     F .text	00000060 _read_r
040295bc g     O .rwdata	00000004 alt_max_fd
04023238 g     F .text	00000068 alt_up_audio_write_fifo_head
04026ae0 g     F .text	000000f0 _fclose_r
04025420 g     F .text	00000030 fflush
0402b1e8 g     O .bss	00000004 __malloc_max_sbrked_mem
040210c4 g     F .text	00000180 alt_irq_register
04020db8 g     F .text	00000068 isr_switches
04026f90 g     F .text	000000d4 lseek
040295cc g     O .rwdata	00000004 _global_impure_ptr
0402b318 g       *ABS*	00000000 __bss_end
04024450 g     F .text	00000108 alt_tick
04022af8 g     F .text	0000003c alt_up_audio_open_dev
040257c0 g     F .text	00000018 __fp_lock_all
04022f30 g     F .text	00000068 alt_up_audio_play_r
040243b4 g     F .text	0000009c alt_alarm_stop
0402b1c4 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d8 alt_irq_handler
04028bcc g     O .rwdata	00000028 alt_dev_null
0402107c g     F .text	00000048 alt_dcache_flush_all
040295e0 g       *ABS*	00000000 __ram_rwdata_end
040295b4 g     O .rwdata	00000008 alt_dev_list
040272d0 g     F .text	000000f8 write
04024a64 g     F .text	000000a0 _putc_r
04027a24 g       *ABS*	00000000 __ram_rodata_end
04026dc4 g     F .text	000000b0 fstat
04021024 g     F .text	00000058 .hidden __umodsi3
0402b318 g       *ABS*	00000000 end
040218c4 g     F .text	000000b4 altera_avalon_jtag_uart_init
040201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
040273c8 g       *ABS*	00000000 __CTOR_LIST__
04040000 g       *ABS*	00000000 __alt_stack_pointer
04021f9c g     F .text	00000224 altera_avalon_jtag_uart_write
040257b0 g     F .text	00000004 __sfp_lock_acquire
04020b18 g     F .text	000002a0 choose_task
04025914 g     F .text	00000310 _free_r
040213ac g     F .text	0000022c alt_printf
04025028 g     F .text	00000180 __call_exitprocs
040295d4 g     O .rwdata	00000004 __malloc_sbrk_base
04020248 g     F .text	0000004c _start
0402b1d4 g     O .bss	00000004 _alt_tick_rate
040230e0 g     F .text	00000108 alt_up_audio_write_fifo
04023300 g     F .text	00000064 alt_up_av_config_write_data
0402b1d8 g     O .bss	00000004 _alt_nticks
040270e8 g     F .text	000000fc read
040216b0 g     F .text	000000b0 alt_sys_init
04023000 g     F .text	000000e0 alt_up_audio_read_fifo
0402b19c g     O .bss	00000004 audio_ready_flag
04024f10 g     F .text	00000118 __register_exitproc
04023944 g     F .text	00000058 alt_up_av_config_write_LTM_cfg_register
04022c34 g     F .text	00000058 alt_up_audio_disable_write_interrupt
040203d0 g     F .text	00000054 receive_mail
04021c28 g     F .text	00000068 altera_avalon_jtag_uart_close
04027a24 g       *ABS*	00000000 __ram_rwdata_start
040273c8 g       *ABS*	00000000 __ram_rodata_start
0402b1f0 g     O .bss	00000028 __malloc_current_mallinfo
04021760 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04024684 g     F .text	000000a4 alt_get_fd
0402b1a4 g     O .bss	00000004 dataword
04023ac8 g     F .text	00000158 alt_busy_sleep
04026a8c g     F .text	00000054 _close_r
04022be0 g     F .text	00000054 alt_up_audio_enable_write_interrupt
040248a0 g     F .text	0000007c memcmp
04021820 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0402b318 g       *ABS*	00000000 __alt_stack_base
04021870 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04024dbc g     F .text	00000154 __swsetup_r
04022b88 g     F .text	00000058 alt_up_audio_disable_read_interrupt
0402b1ac g     O .bss	00000008 mail_send
04025670 g     F .text	00000118 __sfp
04029198 g     O .rwdata	00000408 __malloc_av_
040257bc g     F .text	00000004 __sinit_lock_release
040268f0 g     F .text	00000054 __sread
040209f4 g     F .text	00000090 check_config_status
0402457c g     F .text	00000108 alt_find_file
04023d94 g     F .text	000000a4 alt_dev_llist_insert
04027064 g     F .text	00000024 __malloc_lock
040271e4 g     F .text	000000b0 sbrk
040253c4 g     F .text	0000005c _fflush_r
0402b1a0 g     O .bss	00000004 choice
0402b19c g       *ABS*	00000000 __bss_start
04026774 g     F .text	00000128 memset
04020e74 g     F .text	00000054 main
04022ed0 g     F .text	00000060 alt_up_audio_write_fifo_space
0402b1d0 g     O .bss	00000004 alt_envp
04020424 g     F .text	00000060 setup_audio
0402b1e4 g     O .bss	00000004 __malloc_max_total_mem
040217c0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04024da4 g     F .text	00000018 __swbuf
04020294 g     F .text	00000064 send_callback
04026a24 g     F .text	00000008 __sclose
04040000 g       *ABS*	00000000 __alt_heap_limit
04026bd0 g     F .text	00000014 fclose
04025f68 g     F .text	0000080c _malloc_r
04020788 g     F .text	00000128 play_audio
040295c0 g     O .rwdata	00000004 alt_errno
04020648 g     F .text	00000140 record_audio_snippet
04025c24 g     F .text	000000c4 _fwalk
04024b04 g     F .text	000000c8 putc
04020ec8 g     F .text	00000084 .hidden __divsi3
040257f0 g     F .text	00000124 _malloc_trim_r
040273c8 g       *ABS*	00000000 __CTOR_END__
040273c8 g       *ABS*	00000000 __flash_rodata_start
040273c8 g       *ABS*	00000000 __DTOR_LIST__
04020614 g     F .text	00000034 min
040232a0 g     F .text	00000060 alt_up_av_config_open_dev
04021678 g     F .text	00000038 alt_irq_init
04024350 g     F .text	00000064 alt_release_fd
04024854 g     F .text	00000014 atexit
04026a2c g     F .text	00000060 _write_r
040234e0 g     F .text	00000038 alt_up_av_config_read_ready
040295d0 g     O .rwdata	00000004 _impure_ptr
0402b1c8 g     O .bss	00000004 alt_argc
040251a8 g     F .text	0000021c __sflush_r
04023e98 g     F .text	00000060 _do_dtors
0402b1b4 g     O .bss	00000008 ready_audio
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
04020020 g       .exceptions	00000000 alt_irq_entry
040257d8 g     F .text	00000018 __fp_unlock_all
0402b1bc g     O .bss	00000008 mail_receive
040295ac g     O .rwdata	00000008 alt_fs_list
04022e68 g     F .text	00000068 alt_up_audio_record_l
04020020 g       *ABS*	00000000 __ram_exceptions_start
0402341c g     F .text	00000038 alt_up_av_config_enable_interrupt
040202f8 g     F .text	00000078 send_mail
04023488 g     F .text	00000058 alt_up_av_config_read_acknowledge
040237e4 g     F .text	00000058 alt_up_av_config_write_DC2_cfg_register
040295e0 g       *ABS*	00000000 _edata
0402b318 g       *ABS*	00000000 _end
04020248 g       *ABS*	00000000 __ram_exceptions_end
04021c90 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04022f98 g     F .text	00000068 alt_up_audio_play_l
040295a4 g     O .rwdata	00000008 alt_mailbox_simple_list
0402694c g     F .text	0000007c __swrite
040295d8 g     O .rwdata	00000004 __malloc_trim_threshold
04024868 g     F .text	00000038 exit
04025ce8 g     F .text	000000c4 _fwalk_reent
040238ec g     F .text	00000058 alt_up_av_config_read_LTM_cfg_register
04020f4c g     F .text	00000074 .hidden __modsi3
04040000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
040257b4 g     F .text	00000004 __sfp_lock_release
04022528 g     F .text	000001c4 altera_avalon_mailbox_open
04026d54 g     F .text	00000034 _exit
0402399c g     F .text	0000012c alt_alarm_start
04025dac g     F .text	000001bc __smakebuf_r
04024bcc g     F .text	00000098 strlen
040208b0 g     F .text	00000144 test_audio
040241fc g     F .text	00000154 open
040215d8 g     F .text	0000003c alt_putchar
040235bc g     F .text	000000e8 alt_up_av_config_read_video_cfg_register
04023f88 g     F .text	00000034 alt_icache_flush_all
040295a0 g     O .rwdata	00000004 alt_priority_mask
04023894 g     F .text	00000058 alt_up_av_config_write_D5M_cfg_register
040295c4 g     O .rwdata	00000008 alt_alarm_list
04023e38 g     F .text	00000060 _do_ctors
04023c5c g     F .text	000000d0 close
040212ac g     F .text	00000084 alt_load
04022b34 g     F .text	00000054 alt_up_audio_enable_read_interrupt
040236a4 g     F .text	000000e8 alt_up_av_config_write_video_cfg_register
040257b8 g     F .text	00000004 __sinit_lock_acquire
0402378c g     F .text	00000058 alt_up_av_config_read_DC2_cfg_register
04022c8c g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409214 	ori	at,at,584
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d40 	call	40201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001526 	beq	r2,zero,4020190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 402013c:	008100f4 	movhi	r2,1027
 4020140:	10ac8604 	addi	r2,r2,-19944
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100f4 	movhi	r2,1027
 4020158:	10ac8604 	addi	r2,r2,-19944
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	e17ffd17 	ldw	r5,-12(fp)
 4020174:	1009883a 	mov	r4,r2
 4020178:	183ee83a 	callr	r3
#endif
        break;
 402017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020180:	0005313a 	rdctl	r2,ipending
 4020184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020188:	e0bfff17 	ldw	r2,-4(fp)
 402018c:	00000706 	br	40201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 4020190:	e0bffc17 	ldw	r2,-16(fp)
 4020194:	1085883a 	add	r2,r2,r2
 4020198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 402019c:	e0bffd17 	ldw	r2,-12(fp)
 40201a0:	10800044 	addi	r2,r2,1
 40201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a8:	003fe006 	br	402012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 40201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201b0:	e0bffb17 	ldw	r2,-20(fp)
 40201b4:	103fda1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b8:	0001883a 	nop
}
 40201bc:	0001883a 	nop
 40201c0:	e037883a 	mov	sp,fp
 40201c4:	dfc00117 	ldw	ra,4(sp)
 40201c8:	df000017 	ldw	fp,0(sp)
 40201cc:	dec00204 	addi	sp,sp,8
 40201d0:	f800283a 	ret

040201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d4:	defffb04 	addi	sp,sp,-20
 40201d8:	dfc00415 	stw	ra,16(sp)
 40201dc:	df000315 	stw	fp,12(sp)
 40201e0:	df000304 	addi	fp,sp,12
 40201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e8:	000531fa 	rdctl	r2,exception
 40201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201f0:	e0bffd17 	ldw	r2,-12(fp)
 40201f4:	10801f0c 	andi	r2,r2,124
 40201f8:	1004d0ba 	srli	r2,r2,2
 40201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4020200:	0005333a 	rdctl	r2,badaddr
 4020204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020208:	d0a70f17 	ldw	r2,-25540(gp)
 402020c:	10000726 	beq	r2,zero,402022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4020210:	d0a70f17 	ldw	r2,-25540(gp)
 4020214:	e0fffd17 	ldw	r3,-12(fp)
 4020218:	e1bffe17 	ldw	r6,-8(fp)
 402021c:	e17fff17 	ldw	r5,-4(fp)
 4020220:	1809883a 	mov	r4,r3
 4020224:	103ee83a 	callr	r2
 4020228:	00000206 	br	4020234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 402022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4020230:	0005883a 	mov	r2,zero
}
 4020234:	e037883a 	mov	sp,fp
 4020238:	dfc00117 	ldw	ra,4(sp)
 402023c:	df000017 	ldw	fp,0(sp)
 4020240:	dec00204 	addi	sp,sp,8
 4020244:	f800283a 	ret

Disassembly of section .text:

04020248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 402024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4020250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020254:	00bffd16 	blt	zero,r2,402024c <__alt_data_end+0xfffe024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020258:	06c10134 	movhi	sp,1028
    ori sp, sp, %lo(__alt_stack_pointer)
 402025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4020260:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4020264:	d6856814 	ori	gp,gp,5536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020268:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 402026c:	10ac6714 	ori	r2,r2,45468

    movhi r3, %hi(__bss_end)
 4020270:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 4020274:	18ecc614 	ori	r3,r3,45848

    beq r2, r3, 1f
 4020278:	10c00326 	beq	r2,r3,4020288 <_start+0x40>

0:
    stw zero, (r2)
 402027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4020280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020284:	10fffd36 	bltu	r2,r3,402027c <__alt_data_end+0xfffe027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020288:	40212ac0 	call	40212ac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 402028c:	40213300 	call	4021330 <alt_main>

04020290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4020290:	003fff06 	br	4020290 <__alt_data_end+0xfffe0290>

04020294 <send_callback>:
void reset_core();

// ----------------- Mailbox functions ----------------------------------------

void send_callback(void* report, int status)
{
 4020294:	defffc04 	addi	sp,sp,-16
 4020298:	dfc00315 	stw	ra,12(sp)
 402029c:	df000215 	stw	fp,8(sp)
 40202a0:	df000204 	addi	fp,sp,8
 40202a4:	e13ffe15 	stw	r4,-8(fp)
 40202a8:	e17fff15 	stw	r5,-4(fp)
	if(!status)
 40202ac:	e0bfff17 	ldw	r2,-4(fp)
 40202b0:	1000081e 	bne	r2,zero,40202d4 <send_callback+0x40>
	{
		alt_printf("Sending completed, contents are %x and %x \n", mail_send[0], mail_send[1]);
 40202b4:	d0a70317 	ldw	r2,-25588(gp)
 40202b8:	d0e70417 	ldw	r3,-25584(gp)
 40202bc:	180d883a 	mov	r6,r3
 40202c0:	100b883a 	mov	r5,r2
 40202c4:	010100b4 	movhi	r4,1026
 40202c8:	211cf204 	addi	r4,r4,29640
 40202cc:	40213ac0 	call	40213ac <alt_printf>
	}
	else
	{
		alt_printf("Sending error.\n");
	}
}
 40202d0:	00000306 	br	40202e0 <send_callback+0x4c>
	{
		alt_printf("Sending completed, contents are %x and %x \n", mail_send[0], mail_send[1]);
	}
	else
	{
		alt_printf("Sending error.\n");
 40202d4:	010100b4 	movhi	r4,1026
 40202d8:	211cfd04 	addi	r4,r4,29684
 40202dc:	40213ac0 	call	40213ac <alt_printf>
	}
}
 40202e0:	0001883a 	nop
 40202e4:	e037883a 	mov	sp,fp
 40202e8:	dfc00117 	ldw	ra,4(sp)
 40202ec:	df000017 	ldw	fp,0(sp)
 40202f0:	dec00204 	addi	sp,sp,8
 40202f4:	f800283a 	ret

040202f8 <send_mail>:

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
 40202f8:	defff904 	addi	sp,sp,-28
 40202fc:	dfc00615 	stw	ra,24(sp)
 4020300:	df000515 	stw	fp,20(sp)
 4020304:	df000504 	addi	fp,sp,20
 4020308:	e13ffe15 	stw	r4,-8(fp)
 402030c:	e17fff15 	stw	r5,-4(fp)
	//alt_printf("-------------- send_mail ------------- \n");
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/mailbox_simple_0", NULL, NULL);
 4020310:	000d883a 	mov	r6,zero
 4020314:	000b883a 	mov	r5,zero
 4020318:	010100b4 	movhi	r4,1026
 402031c:	211d0104 	addi	r4,r4,29700
 4020320:	40225280 	call	4022528 <altera_avalon_mailbox_open>
 4020324:	e0bffb15 	stw	r2,-20(fp)
	// Create mail "envelope"
	alt_u32 mail_send[2] = {start_addr, storage_length};
 4020328:	e0bffe17 	ldw	r2,-8(fp)
 402032c:	e0bffc15 	stw	r2,-16(fp)
 4020330:	e0bfff17 	ldw	r2,-4(fp)
 4020334:	e0bffd15 	stw	r2,-12(fp)
	// Send message
	altera_avalon_mailbox_send(mailbox_AudioToSigProc, mail_send, 0, POLL);
 4020338:	e0bffc04 	addi	r2,fp,-16
 402033c:	01c00044 	movi	r7,1
 4020340:	000d883a 	mov	r6,zero
 4020344:	100b883a 	mov	r5,r2
 4020348:	e13ffb17 	ldw	r4,-20(fp)
 402034c:	402286c0 	call	402286c <altera_avalon_mailbox_send>
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_AudioToSigProc);
 4020350:	e13ffb17 	ldw	r4,-20(fp)
 4020354:	40226ec0 	call	40226ec <altera_avalon_mailbox_close>
}
 4020358:	0001883a 	nop
 402035c:	e037883a 	mov	sp,fp
 4020360:	dfc00117 	ldw	ra,4(sp)
 4020364:	df000017 	ldw	fp,0(sp)
 4020368:	dec00204 	addi	sp,sp,8
 402036c:	f800283a 	ret

04020370 <receive_callback>:

void receive_callback(void* message)
{
 4020370:	defffd04 	addi	sp,sp,-12
 4020374:	dfc00215 	stw	ra,8(sp)
 4020378:	df000115 	stw	fp,4(sp)
 402037c:	df000104 	addi	fp,sp,4
 4020380:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4020384:	e0bfff17 	ldw	r2,-4(fp)
 4020388:	10000826 	beq	r2,zero,40203ac <receive_callback+0x3c>
	{
		alt_printf("Receiving completed, contents are %x and %x \n", mail_receive[0], mail_receive[1]);
 402038c:	d0a70717 	ldw	r2,-25572(gp)
 4020390:	d0e70817 	ldw	r3,-25568(gp)
 4020394:	180d883a 	mov	r6,r3
 4020398:	100b883a 	mov	r5,r2
 402039c:	010100b4 	movhi	r4,1026
 40203a0:	211d0704 	addi	r4,r4,29724
 40203a4:	40213ac0 	call	40213ac <alt_printf>
	}
	else
	{
		alt_printf("Receiving error.\n");
	}
}
 40203a8:	00000306 	br	40203b8 <receive_callback+0x48>
	{
		alt_printf("Receiving completed, contents are %x and %x \n", mail_receive[0], mail_receive[1]);
	}
	else
	{
		alt_printf("Receiving error.\n");
 40203ac:	010100b4 	movhi	r4,1026
 40203b0:	211d1304 	addi	r4,r4,29772
 40203b4:	40213ac0 	call	40213ac <alt_printf>
	}
}
 40203b8:	0001883a 	nop
 40203bc:	e037883a 	mov	sp,fp
 40203c0:	dfc00117 	ldw	ra,4(sp)
 40203c4:	df000017 	ldw	fp,0(sp)
 40203c8:	dec00204 	addi	sp,sp,8
 40203cc:	f800283a 	ret

040203d0 <receive_mail>:

void receive_mail()
{
 40203d0:	defffd04 	addi	sp,sp,-12
 40203d4:	dfc00215 	stw	ra,8(sp)
 40203d8:	df000115 	stw	fp,4(sp)
 40203dc:	df000104 	addi	fp,sp,4
	//alt_printf("-------------- receive_mail ------------- \n");
	// Open mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/mailbox_simple_1", NULL, NULL);
 40203e0:	000d883a 	mov	r6,zero
 40203e4:	000b883a 	mov	r5,zero
 40203e8:	010100b4 	movhi	r4,1026
 40203ec:	211d1804 	addi	r4,r4,29792
 40203f0:	40225280 	call	4022528 <altera_avalon_mailbox_open>
 40203f4:	e0bfff15 	stw	r2,-4(fp)
	// Wait for mail confirming the processing is complete
	altera_avalon_mailbox_retrieve_poll(mailbox_SigProcToAudio, mail_receive, 0);
 40203f8:	000d883a 	mov	r6,zero
 40203fc:	d1670704 	addi	r5,gp,-25572
 4020400:	e13fff17 	ldw	r4,-4(fp)
 4020404:	40229bc0 	call	40229bc <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 4020408:	402107c0 	call	402107c <alt_dcache_flush_all>
	//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0x2);
}
 402040c:	0001883a 	nop
 4020410:	e037883a 	mov	sp,fp
 4020414:	dfc00117 	ldw	ra,4(sp)
 4020418:	df000017 	ldw	fp,0(sp)
 402041c:	dec00204 	addi	sp,sp,8
 4020420:	f800283a 	ret

04020424 <setup_audio>:

// -------------------- Audio functions ---------------------------------------------------

void setup_audio(alt_up_audio_dev * audio_dev)
{
 4020424:	defffd04 	addi	sp,sp,-12
 4020428:	dfc00215 	stw	ra,8(sp)
 402042c:	df000115 	stw	fp,4(sp)
 4020430:	df000104 	addi	fp,sp,4
 4020434:	e13fff15 	stw	r4,-4(fp)
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
 4020438:	010100b4 	movhi	r4,1026
 402043c:	211d1e04 	addi	r4,r4,29816
 4020440:	4022af80 	call	4022af8 <alt_up_audio_open_dev>
 4020444:	e0bfff15 	stw	r2,-4(fp)
	if ( audio_dev == NULL)
 4020448:	e0bfff17 	ldw	r2,-4(fp)
 402044c:	1000041e 	bne	r2,zero,4020460 <setup_audio+0x3c>
		alt_printf ("Error: could not open audio device \n");
 4020450:	010100b4 	movhi	r4,1026
 4020454:	211d2204 	addi	r4,r4,29832
 4020458:	40213ac0 	call	40213ac <alt_printf>
	else
		alt_printf ("Opened audio device \n");
}
 402045c:	00000306 	br	402046c <setup_audio+0x48>
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/audio_0");
	if ( audio_dev == NULL)
		alt_printf ("Error: could not open audio device \n");
	else
		alt_printf ("Opened audio device \n");
 4020460:	010100b4 	movhi	r4,1026
 4020464:	211d2c04 	addi	r4,r4,29872
 4020468:	40213ac0 	call	40213ac <alt_printf>
}
 402046c:	0001883a 	nop
 4020470:	e037883a 	mov	sp,fp
 4020474:	dfc00117 	ldw	ra,4(sp)
 4020478:	df000017 	ldw	fp,0(sp)
 402047c:	dec00204 	addi	sp,sp,8
 4020480:	f800283a 	ret

04020484 <record_process>:

void record_process(int seconds)
{
 4020484:	defff704 	addi	sp,sp,-36
 4020488:	dfc00815 	stw	ra,32(sp)
 402048c:	df000715 	stw	fp,28(sp)
 4020490:	df000704 	addi	fp,sp,28
 4020494:	e13fff15 	stw	r4,-4(fp)
	//alt_printf("------------------ record_process ------------------------------ \n");
	// Lower audio_ready_flag
	audio_ready_flag = 0;
 4020498:	d026ff15 	stw	zero,-25604(gp)
	// Divide the desired recording time into quarter-second snippets
	int snippets = seconds*4;
 402049c:	e0bfff17 	ldw	r2,-4(fp)
 40204a0:	1085883a 	add	r2,r2,r2
 40204a4:	1085883a 	add	r2,r2,r2
 40204a8:	e0bffa15 	stw	r2,-24(fp)
	int snippet_counter = 0;
 40204ac:	e03ff915 	stw	zero,-28(fp)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
 40204b0:	008bb804 	movi	r2,12000
 40204b4:	e0bffb15 	stw	r2,-20(fp)
	// alt_u32 mail[2];
	unsigned int start_address = SDRAM_CONTROLLER_2_BASE;
 40204b8:	e03ffc15 	stw	zero,-16(fp)
	send_mail(start_address, snippets);
 40204bc:	e0bffa17 	ldw	r2,-24(fp)
 40204c0:	100b883a 	mov	r5,r2
 40204c4:	e13ffc17 	ldw	r4,-16(fp)
 40204c8:	40202f80 	call	40202f8 <send_mail>
	//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0x1);

	// Clear FIFO
	//IOWR_32DIRECT(AUDIO_0_BASE, AudioControlReg, 4);
	//IOWR_32DIRECT(AUDIO_0_BASE, AudioControlReg, 0);
	while(snippet_counter < snippets)
 40204cc:	00002806 	br	4020570 <record_process+0xec>
	{
		//alt_printf("In record_process loop... \n");
		current_address = start_address + snippet_counter*words_per_snippet*4;
 40204d0:	e0fff917 	ldw	r3,-28(fp)
 40204d4:	e0bffb17 	ldw	r2,-20(fp)
 40204d8:	1885383a 	mul	r2,r3,r2
 40204dc:	1085883a 	add	r2,r2,r2
 40204e0:	1085883a 	add	r2,r2,r2
 40204e4:	1007883a 	mov	r3,r2
 40204e8:	e0bffc17 	ldw	r2,-16(fp)
 40204ec:	1885883a 	add	r2,r3,r2
 40204f0:	e0bffd15 	stw	r2,-12(fp)
		alt_printf("Current address is %x \n", current_address);
 40204f4:	e17ffd17 	ldw	r5,-12(fp)
 40204f8:	010100b4 	movhi	r4,1026
 40204fc:	211d3204 	addi	r4,r4,29896
 4020500:	40213ac0 	call	40213ac <alt_printf>
		// Record
		record_audio_snippet(current_address, words_per_snippet);
 4020504:	e0bffd17 	ldw	r2,-12(fp)
 4020508:	e17ffb17 	ldw	r5,-20(fp)
 402050c:	1009883a 	mov	r4,r2
 4020510:	40206480 	call	4020648 <record_audio_snippet>
		// Send mail
		alt_printf("Sending snippet info mail with address = %x and words per snippet = %x \n", start_address + snippet_counter*words_per_snippet*4, words_per_snippet);
 4020514:	e0fff917 	ldw	r3,-28(fp)
 4020518:	e0bffb17 	ldw	r2,-20(fp)
 402051c:	1885383a 	mul	r2,r3,r2
 4020520:	1085883a 	add	r2,r2,r2
 4020524:	1085883a 	add	r2,r2,r2
 4020528:	1007883a 	mov	r3,r2
 402052c:	e0bffc17 	ldw	r2,-16(fp)
 4020530:	1885883a 	add	r2,r3,r2
 4020534:	e1bffb17 	ldw	r6,-20(fp)
 4020538:	100b883a 	mov	r5,r2
 402053c:	010100b4 	movhi	r4,1026
 4020540:	211d3804 	addi	r4,r4,29920
 4020544:	40213ac0 	call	40213ac <alt_printf>
		send_mail(current_address, words_per_snippet);
 4020548:	e0bffb17 	ldw	r2,-20(fp)
 402054c:	100b883a 	mov	r5,r2
 4020550:	e13ffd17 	ldw	r4,-12(fp)
 4020554:	40202f80 	call	40202f8 <send_mail>
		alt_printf("record_process loop mail sent \n");
 4020558:	010100b4 	movhi	r4,1026
 402055c:	211d4b04 	addi	r4,r4,29996
 4020560:	40213ac0 	call	40213ac <alt_printf>
		snippet_counter = snippet_counter + 1;
 4020564:	e0bff917 	ldw	r2,-28(fp)
 4020568:	10800044 	addi	r2,r2,1
 402056c:	e0bff915 	stw	r2,-28(fp)
	//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0x1);

	// Clear FIFO
	//IOWR_32DIRECT(AUDIO_0_BASE, AudioControlReg, 4);
	//IOWR_32DIRECT(AUDIO_0_BASE, AudioControlReg, 0);
	while(snippet_counter < snippets)
 4020570:	e0fff917 	ldw	r3,-28(fp)
 4020574:	e0bffa17 	ldw	r2,-24(fp)
 4020578:	18bfd516 	blt	r3,r2,40204d0 <__alt_data_end+0xfffe04d0>
		alt_printf("Sending snippet info mail with address = %x and words per snippet = %x \n", start_address + snippet_counter*words_per_snippet*4, words_per_snippet);
		send_mail(current_address, words_per_snippet);
		alt_printf("record_process loop mail sent \n");
		snippet_counter = snippet_counter + 1;
	}
	alt_printf("Waiting for mail... \n");
 402057c:	010100b4 	movhi	r4,1026
 4020580:	211d5304 	addi	r4,r4,30028
 4020584:	40213ac0 	call	40213ac <alt_printf>
	mail_receive[0] = 0x1;
 4020588:	00800044 	movi	r2,1
 402058c:	d0a70715 	stw	r2,-25572(gp)
	mail_receive[1] = 0x2;
 4020590:	00800084 	movi	r2,2
 4020594:	d0a70815 	stw	r2,-25568(gp)
	// Wait for the Signal Processing subsystem to finish it's task
	receive_mail();
 4020598:	40203d00 	call	40203d0 <receive_mail>
	// Store address and data size of ready audio
	ready_audio[0] = mail_receive[0];
 402059c:	d0a70717 	ldw	r2,-25572(gp)
 40205a0:	d0a70515 	stw	r2,-25580(gp)
	ready_audio[1] = mail_receive[1];
 40205a4:	d0a70817 	ldw	r2,-25568(gp)
 40205a8:	d0a70615 	stw	r2,-25576(gp)
	// Raise flag, enabling playback of processed audio
	audio_ready_flag = 1;
 40205ac:	00800044 	movi	r2,1
 40205b0:	d0a6ff15 	stw	r2,-25604(gp)
	alt_printf("Recording finished. Returned address = %x, memory size = %x \n", ready_audio[0], ready_audio[1]);
 40205b4:	d0a70517 	ldw	r2,-25580(gp)
 40205b8:	d0e70617 	ldw	r3,-25576(gp)
 40205bc:	180d883a 	mov	r6,r3
 40205c0:	100b883a 	mov	r5,r2
 40205c4:	010100b4 	movhi	r4,1026
 40205c8:	211d5904 	addi	r4,r4,30052
 40205cc:	40213ac0 	call	40213ac <alt_printf>
	// Turn off LED 0, signifying that recording is done
	//IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0x0);
	// Test the work
	int errors_found = test_audio(SDRAM_CONTROLLER_2_BASE, ready_audio[0], ready_audio[1]);
 40205d0:	d0a70517 	ldw	r2,-25580(gp)
 40205d4:	d0e70617 	ldw	r3,-25576(gp)
 40205d8:	180d883a 	mov	r6,r3
 40205dc:	100b883a 	mov	r5,r2
 40205e0:	0009883a 	mov	r4,zero
 40205e4:	40208b00 	call	40208b0 <test_audio>
 40205e8:	e0bffe15 	stw	r2,-8(fp)
	alt_printf("A total of %x words were wrong \n", errors_found);
 40205ec:	e17ffe17 	ldw	r5,-8(fp)
 40205f0:	010100b4 	movhi	r4,1026
 40205f4:	211d6904 	addi	r4,r4,30116
 40205f8:	40213ac0 	call	40213ac <alt_printf>
}
 40205fc:	0001883a 	nop
 4020600:	e037883a 	mov	sp,fp
 4020604:	dfc00117 	ldw	ra,4(sp)
 4020608:	df000017 	ldw	fp,0(sp)
 402060c:	dec00204 	addi	sp,sp,8
 4020610:	f800283a 	ret

04020614 <min>:

int min(int a, int b)
{
 4020614:	defffd04 	addi	sp,sp,-12
 4020618:	df000215 	stw	fp,8(sp)
 402061c:	df000204 	addi	fp,sp,8
 4020620:	e13ffe15 	stw	r4,-8(fp)
 4020624:	e17fff15 	stw	r5,-4(fp)
	return (a > b) ? b : a;
 4020628:	e0ffff17 	ldw	r3,-4(fp)
 402062c:	e0bffe17 	ldw	r2,-8(fp)
 4020630:	1880010e 	bge	r3,r2,4020638 <min+0x24>
 4020634:	1805883a 	mov	r2,r3
}
 4020638:	e037883a 	mov	sp,fp
 402063c:	df000017 	ldw	fp,0(sp)
 4020640:	dec00104 	addi	sp,sp,4
 4020644:	f800283a 	ret

04020648 <record_audio_snippet>:

void record_audio_snippet(int start_addr_ptr, int record_words)
{
 4020648:	defff804 	addi	sp,sp,-32
 402064c:	dfc00715 	stw	ra,28(sp)
 4020650:	df000615 	stw	fp,24(sp)
 4020654:	df000604 	addi	fp,sp,24
 4020658:	e13ffe15 	stw	r4,-8(fp)
 402065c:	e17fff15 	stw	r5,-4(fp)
	alt_printf("---------------- record_audio_snippet --------------------- \n");
 4020660:	010100b4 	movhi	r4,1026
 4020664:	211d7204 	addi	r4,r4,30152
 4020668:	40213ac0 	call	40213ac <alt_printf>
	alt_printf("At the beginning, start_addr_ptr = %x and record_words = %x \n", start_addr_ptr, record_words);
 402066c:	e1bfff17 	ldw	r6,-4(fp)
 4020670:	e17ffe17 	ldw	r5,-8(fp)
 4020674:	010100b4 	movhi	r4,1026
 4020678:	211d8204 	addi	r4,r4,30216
 402067c:	40213ac0 	call	40213ac <alt_printf>
	int words_recorded = 0;
 4020680:	e03ffa15 	stw	zero,-24(fp)
	int words_in_fifo = 0;
 4020684:	e03ffc15 	stw	zero,-16(fp)
	int current_words = 0;
 4020688:	e03ffd15 	stw	zero,-12(fp)

	// With dumbword = 0x2, shift up should produce 0x4, and down should give 0x1...
	// alt_u32 dumbword = 0x2;
	// alt_u32 current_address;

	while( words_recorded < record_words)
 402068c:	00003206 	br	4020758 <record_audio_snippet+0x110>
			IOWR_32DIRECT(start_addr_ptr, words_recorded*4, dataword);
			words_recorded += 1;
		}
		*/

		words_in_fifo = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff00) >> 8;
 4020690:	00810134 	movhi	r2,1028
 4020694:	10842904 	addi	r2,r2,4260
 4020698:	10800037 	ldwio	r2,0(r2)
 402069c:	10bfc00c 	andi	r2,r2,65280
 40206a0:	1005d23a 	srai	r2,r2,8
 40206a4:	e0bffc15 	stw	r2,-16(fp)
		current_words = min(words_in_fifo, record_words - words_recorded);
 40206a8:	e0ffff17 	ldw	r3,-4(fp)
 40206ac:	e0bffa17 	ldw	r2,-24(fp)
 40206b0:	1885c83a 	sub	r2,r3,r2
 40206b4:	100b883a 	mov	r5,r2
 40206b8:	e13ffc17 	ldw	r4,-16(fp)
 40206bc:	40206140 	call	4020614 <min>
 40206c0:	e0bffd15 	stw	r2,-12(fp)
		i = 0;
 40206c4:	e03ffb15 	stw	zero,-20(fp)
		while(i < current_words)
 40206c8:	00001106 	br	4020710 <record_audio_snippet+0xc8>
		{
			dataword = IORD_32DIRECT(AUDIO_0_BASE, AudioLData);
 40206cc:	00810134 	movhi	r2,1028
 40206d0:	10842a04 	addi	r2,r2,4264
 40206d4:	10800037 	ldwio	r2,0(r2)
 40206d8:	d0a70115 	stw	r2,-25596(gp)
			IOWR_32DIRECT(start_addr_ptr, (words_recorded + i)*4, dataword);
 40206dc:	e0fffa17 	ldw	r3,-24(fp)
 40206e0:	e0bffb17 	ldw	r2,-20(fp)
 40206e4:	1885883a 	add	r2,r3,r2
 40206e8:	1085883a 	add	r2,r2,r2
 40206ec:	1085883a 	add	r2,r2,r2
 40206f0:	1007883a 	mov	r3,r2
 40206f4:	e0bffe17 	ldw	r2,-8(fp)
 40206f8:	1885883a 	add	r2,r3,r2
 40206fc:	d0e70117 	ldw	r3,-25596(gp)
 4020700:	10c00035 	stwio	r3,0(r2)
			i ++;
 4020704:	e0bffb17 	ldw	r2,-20(fp)
 4020708:	10800044 	addi	r2,r2,1
 402070c:	e0bffb15 	stw	r2,-20(fp)
		*/

		words_in_fifo = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff00) >> 8;
		current_words = min(words_in_fifo, record_words - words_recorded);
		i = 0;
		while(i < current_words)
 4020710:	e0fffb17 	ldw	r3,-20(fp)
 4020714:	e0bffd17 	ldw	r2,-12(fp)
 4020718:	18bfec16 	blt	r3,r2,40206cc <__alt_data_end+0xfffe06cc>
		{
			dataword = IORD_32DIRECT(AUDIO_0_BASE, AudioLData);
			IOWR_32DIRECT(start_addr_ptr, (words_recorded + i)*4, dataword);
			i ++;
		}
		words_recorded += current_words;
 402071c:	e0fffa17 	ldw	r3,-24(fp)
 4020720:	e0bffd17 	ldw	r2,-12(fp)
 4020724:	1885883a 	add	r2,r3,r2
 4020728:	e0bffa15 	stw	r2,-24(fp)
		if(words_recorded % 120 == 0)
 402072c:	e0bffa17 	ldw	r2,-24(fp)
 4020730:	01401e04 	movi	r5,120
 4020734:	1009883a 	mov	r4,r2
 4020738:	4020f4c0 	call	4020f4c <__modsi3>
 402073c:	1000061e 	bne	r2,zero,4020758 <record_audio_snippet+0x110>
		{
			alt_printf("Words_recorded = %x, with the last one being %x \n", words_recorded, dataword);
 4020740:	d0a70117 	ldw	r2,-25596(gp)
 4020744:	100d883a 	mov	r6,r2
 4020748:	e17ffa17 	ldw	r5,-24(fp)
 402074c:	010100b4 	movhi	r4,1026
 4020750:	211d9204 	addi	r4,r4,30280
 4020754:	40213ac0 	call	40213ac <alt_printf>

	// With dumbword = 0x2, shift up should produce 0x4, and down should give 0x1...
	// alt_u32 dumbword = 0x2;
	// alt_u32 current_address;

	while( words_recorded < record_words)
 4020758:	e0fffa17 	ldw	r3,-24(fp)
 402075c:	e0bfff17 	ldw	r2,-4(fp)
 4020760:	18bfcb16 	blt	r3,r2,4020690 <__alt_data_end+0xfffe0690>
		current_address = start_addr_ptr + words_recorded*4;
		IOWR_32DIRECT(SDRAM_CONTROLLER_2_BASE, current_address, dumbword);
		words_recorded = words_recorded + 1;
	}
	*/
	alt_printf("Snippet recorded. \n");
 4020764:	010100b4 	movhi	r4,1026
 4020768:	211d9f04 	addi	r4,r4,30332
 402076c:	40213ac0 	call	40213ac <alt_printf>
}
 4020770:	0001883a 	nop
 4020774:	e037883a 	mov	sp,fp
 4020778:	dfc00117 	ldw	ra,4(sp)
 402077c:	df000017 	ldw	fp,0(sp)
 4020780:	dec00204 	addi	sp,sp,8
 4020784:	f800283a 	ret

04020788 <play_audio>:

void play_audio(int start_addr_ptr, int memory_size)
{
 4020788:	defff404 	addi	sp,sp,-48
 402078c:	dfc00b15 	stw	ra,44(sp)
 4020790:	df000a15 	stw	fp,40(sp)
 4020794:	df000a04 	addi	fp,sp,40
 4020798:	e13ffe15 	stw	r4,-8(fp)
 402079c:	e17fff15 	stw	r5,-4(fp)
	//alt_printf("-------------------- play_audio --------------------- \n");
	//alt_printf("Memory size is %x \n", memory_size);
	int play_words = memory_size/4;
 40207a0:	e0bfff17 	ldw	r2,-4(fp)
 40207a4:	1000010e 	bge	r2,zero,40207ac <play_audio+0x24>
 40207a8:	108000c4 	addi	r2,r2,3
 40207ac:	1005d0ba 	srai	r2,r2,2
 40207b0:	e0bffa15 	stw	r2,-24(fp)
	//alt_printf("amount of words to play is %x \n", play_words);
	int words_played = 0;
 40207b4:	e03ff615 	stw	zero,-40(fp)
	alt_32 current_address = start_addr_ptr;
 40207b8:	e0bffe17 	ldw	r2,-8(fp)
 40207bc:	e0bff715 	stw	r2,-36(fp)
	int free_space = 0;
 40207c0:	e03ffb15 	stw	zero,-20(fp)
	// Also uncomment the actual play stuff below, both in and out of loop...

	// Dumb test of other functionality for when no actual microphone is available...
	// With dumbword = 0x2, shift up should produce 0x4, and down should give 0x1...
	alt_u32 resultword;
	int dumbtest = 1;
 40207c4:	00800044 	movi	r2,1
 40207c8:	e0bffc15 	stw	r2,-16(fp)

	while( words_played < play_words)
 40207cc:	00002b06 	br	402087c <play_audio+0xf4>
	{
		// Check how much space is available
		free_space = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff000000) >> 24;
 40207d0:	00810134 	movhi	r2,1028
 40207d4:	10842904 	addi	r2,r2,4260
 40207d8:	10800037 	ldwio	r2,0(r2)
 40207dc:	1004d63a 	srli	r2,r2,24
 40207e0:	e0bffb15 	stw	r2,-20(fp)
		words_to_buffer = min(free_space, play_words - words_played);
 40207e4:	e0fffa17 	ldw	r3,-24(fp)
 40207e8:	e0bff617 	ldw	r2,-40(fp)
 40207ec:	1885c83a 	sub	r2,r3,r2
 40207f0:	100b883a 	mov	r5,r2
 40207f4:	e13ffb17 	ldw	r4,-20(fp)
 40207f8:	40206140 	call	4020614 <min>
 40207fc:	e0bffd15 	stw	r2,-12(fp)
		i = 0;
 4020800:	e03ff815 	stw	zero,-32(fp)
		while(i < words_to_buffer)
 4020804:	00001106 	br	402084c <play_audio+0xc4>
		{
			current_address += 4;
 4020808:	e0bff717 	ldw	r2,-36(fp)
 402080c:	10800104 	addi	r2,r2,4
 4020810:	e0bff715 	stw	r2,-36(fp)
			resultword = IORD_32DIRECT(SDRAM_CONTROLLER_2_BASE, current_address);
 4020814:	e0bff717 	ldw	r2,-36(fp)
 4020818:	10800037 	ldwio	r2,0(r2)
 402081c:	e0bff915 	stw	r2,-28(fp)
			IOWR_32DIRECT(AUDIO_0_BASE, AudioLData, resultword);
 4020820:	e0fff917 	ldw	r3,-28(fp)
 4020824:	00810134 	movhi	r2,1028
 4020828:	10842a04 	addi	r2,r2,4264
 402082c:	10c00035 	stwio	r3,0(r2)
			IOWR_32DIRECT(AUDIO_0_BASE, AudioRData, resultword);
 4020830:	e0fff917 	ldw	r3,-28(fp)
 4020834:	00810134 	movhi	r2,1028
 4020838:	10842b04 	addi	r2,r2,4268
 402083c:	10c00035 	stwio	r3,0(r2)
			i ++;
 4020840:	e0bff817 	ldw	r2,-32(fp)
 4020844:	10800044 	addi	r2,r2,1
 4020848:	e0bff815 	stw	r2,-32(fp)
	{
		// Check how much space is available
		free_space = (IORD_32DIRECT(AUDIO_0_BASE, AudioFifoSpaceReg) & 0xff000000) >> 24;
		words_to_buffer = min(free_space, play_words - words_played);
		i = 0;
		while(i < words_to_buffer)
 402084c:	e0fff817 	ldw	r3,-32(fp)
 4020850:	e0bffd17 	ldw	r2,-12(fp)
 4020854:	18bfec16 	blt	r3,r2,4020808 <__alt_data_end+0xfffe0808>
			resultword = IORD_32DIRECT(SDRAM_CONTROLLER_2_BASE, current_address);
			IOWR_32DIRECT(AUDIO_0_BASE, AudioLData, resultword);
			IOWR_32DIRECT(AUDIO_0_BASE, AudioRData, resultword);
			i ++;
		}
		words_played += free_space;
 4020858:	e0fff617 	ldw	r3,-40(fp)
 402085c:	e0bffb17 	ldw	r2,-20(fp)
 4020860:	1885883a 	add	r2,r3,r2
 4020864:	e0bff615 	stw	r2,-40(fp)
		alt_printf("Current address = %x has the value dumbwordresult = %x \n", current_address, resultword);
 4020868:	e1bff917 	ldw	r6,-28(fp)
 402086c:	e17ff717 	ldw	r5,-36(fp)
 4020870:	010100b4 	movhi	r4,1026
 4020874:	211da404 	addi	r4,r4,30352
 4020878:	40213ac0 	call	40213ac <alt_printf>
	// Dumb test of other functionality for when no actual microphone is available...
	// With dumbword = 0x2, shift up should produce 0x4, and down should give 0x1...
	alt_u32 resultword;
	int dumbtest = 1;

	while( words_played < play_words)
 402087c:	e0fff617 	ldw	r3,-40(fp)
 4020880:	e0bffa17 	ldw	r2,-24(fp)
 4020884:	18bfd216 	blt	r3,r2,40207d0 <__alt_data_end+0xfffe07d0>
			i ++;
		}
		words_played += free_space;
		alt_printf("Current address = %x has the value dumbwordresult = %x \n", current_address, resultword);
	}
	alt_printf("End of playback, dumbwordresult = %x \n", resultword);
 4020888:	e17ff917 	ldw	r5,-28(fp)
 402088c:	010100b4 	movhi	r4,1026
 4020890:	211db304 	addi	r4,r4,30412
 4020894:	40213ac0 	call	40213ac <alt_printf>
}
 4020898:	0001883a 	nop
 402089c:	e037883a 	mov	sp,fp
 40208a0:	dfc00117 	ldw	ra,4(sp)
 40208a4:	df000017 	ldw	fp,0(sp)
 40208a8:	dec00204 	addi	sp,sp,8
 40208ac:	f800283a 	ret

040208b0 <test_audio>:

int test_audio(alt_u32 start_recorded, alt_u32 start_processed, alt_u32 memspace)
{
 40208b0:	defff504 	addi	sp,sp,-44
 40208b4:	dfc00a15 	stw	ra,40(sp)
 40208b8:	df000915 	stw	fp,36(sp)
 40208bc:	df000904 	addi	fp,sp,36
 40208c0:	e13ffd15 	stw	r4,-12(fp)
 40208c4:	e17ffe15 	stw	r5,-8(fp)
 40208c8:	e1bfff15 	stw	r6,-4(fp)
	int wordcount = memspace/4;
 40208cc:	e0bfff17 	ldw	r2,-4(fp)
 40208d0:	1004d0ba 	srli	r2,r2,2
 40208d4:	e0bffb15 	stw	r2,-20(fp)
	int words_tested = 0;
 40208d8:	e03ff715 	stw	zero,-36(fp)
	int faults_found = 0;
 40208dc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 test1;
	alt_u32 test2;
	int op_type;
	if((IORD_32DIRECT(PIO_2_BASE, 0) & 0x80) == 0)
 40208e0:	00810134 	movhi	r2,1028
 40208e4:	10841004 	addi	r2,r2,4160
 40208e8:	10800037 	ldwio	r2,0(r2)
 40208ec:	1080200c 	andi	r2,r2,128
 40208f0:	1000021e 	bne	r2,zero,40208fc <test_audio+0x4c>
	{
		op_type = 0;
 40208f4:	e03ffa15 	stw	zero,-24(fp)
 40208f8:	00003506 	br	40209d0 <test_audio+0x120>
	}
	else
	{
		op_type = 1;
 40208fc:	00800044 	movi	r2,1
 4020900:	e0bffa15 	stw	r2,-24(fp)
	}
	while(words_tested < wordcount)
 4020904:	00003206 	br	40209d0 <test_audio+0x120>
	{
		// Load both
		test1 = IORD_32DIRECT(start_recorded, words_tested*4);
 4020908:	e0bff717 	ldw	r2,-36(fp)
 402090c:	1085883a 	add	r2,r2,r2
 4020910:	1085883a 	add	r2,r2,r2
 4020914:	1007883a 	mov	r3,r2
 4020918:	e0bffd17 	ldw	r2,-12(fp)
 402091c:	1885883a 	add	r2,r3,r2
 4020920:	10800037 	ldwio	r2,0(r2)
 4020924:	e0bff915 	stw	r2,-28(fp)
		test1 = (signed)test1;
		test2 = IORD_32DIRECT(start_processed, words_tested*4);
 4020928:	e0bff717 	ldw	r2,-36(fp)
 402092c:	1085883a 	add	r2,r2,r2
 4020930:	1085883a 	add	r2,r2,r2
 4020934:	1007883a 	mov	r3,r2
 4020938:	e0bffe17 	ldw	r2,-8(fp)
 402093c:	1885883a 	add	r2,r3,r2
 4020940:	10800037 	ldwio	r2,0(r2)
 4020944:	e0bffc15 	stw	r2,-16(fp)
		// Test
		if(op_type == 0)
 4020948:	e0bffa17 	ldw	r2,-24(fp)
 402094c:	1000071e 	bne	r2,zero,402096c <test_audio+0xbc>
		{
			test1 = (test1 & 0x80000000)+((test1 & 0xfffffffe)>>1);
 4020950:	e0bff917 	ldw	r2,-28(fp)
 4020954:	10e0002c 	andhi	r3,r2,32768
 4020958:	e0bff917 	ldw	r2,-28(fp)
 402095c:	1004d07a 	srli	r2,r2,1
 4020960:	1885883a 	add	r2,r3,r2
 4020964:	e0bff915 	stw	r2,-28(fp)
 4020968:	00000606 	br	4020984 <test_audio+0xd4>
		}
		else if (op_type == 1)
 402096c:	e0bffa17 	ldw	r2,-24(fp)
 4020970:	10800058 	cmpnei	r2,r2,1
 4020974:	1000031e 	bne	r2,zero,4020984 <test_audio+0xd4>
		{
			test1 = (test1 << 1);
 4020978:	e0bff917 	ldw	r2,-28(fp)
 402097c:	1085883a 	add	r2,r2,r2
 4020980:	e0bff915 	stw	r2,-28(fp)
		}
		if (words_tested % 120 == 0)
 4020984:	e0bff717 	ldw	r2,-36(fp)
 4020988:	01401e04 	movi	r5,120
 402098c:	1009883a 	mov	r4,r2
 4020990:	4020f4c0 	call	4020f4c <__modsi3>
 4020994:	1000051e 	bne	r2,zero,40209ac <test_audio+0xfc>
		{
			alt_printf("The current words are %x and %x \n", test1, test2);
 4020998:	e1bffc17 	ldw	r6,-16(fp)
 402099c:	e17ff917 	ldw	r5,-28(fp)
 40209a0:	010100b4 	movhi	r4,1026
 40209a4:	211dbd04 	addi	r4,r4,30452
 40209a8:	40213ac0 	call	40213ac <alt_printf>
		}
		if((int)test1 != (int)test2)
 40209ac:	e0fff917 	ldw	r3,-28(fp)
 40209b0:	e0bffc17 	ldw	r2,-16(fp)
 40209b4:	18800326 	beq	r3,r2,40209c4 <test_audio+0x114>
		{
			faults_found += 1;
 40209b8:	e0bff817 	ldw	r2,-32(fp)
 40209bc:	10800044 	addi	r2,r2,1
 40209c0:	e0bff815 	stw	r2,-32(fp)
		}
		// Increment
		words_tested ++;
 40209c4:	e0bff717 	ldw	r2,-36(fp)
 40209c8:	10800044 	addi	r2,r2,1
 40209cc:	e0bff715 	stw	r2,-36(fp)
	}
	else
	{
		op_type = 1;
	}
	while(words_tested < wordcount)
 40209d0:	e0fff717 	ldw	r3,-36(fp)
 40209d4:	e0bffb17 	ldw	r2,-20(fp)
 40209d8:	18bfcb16 	blt	r3,r2,4020908 <__alt_data_end+0xfffe0908>
			faults_found += 1;
		}
		// Increment
		words_tested ++;
	}
	return faults_found;
 40209dc:	e0bff817 	ldw	r2,-32(fp)
}
 40209e0:	e037883a 	mov	sp,fp
 40209e4:	dfc00117 	ldw	ra,4(sp)
 40209e8:	df000017 	ldw	fp,0(sp)
 40209ec:	dec00204 	addi	sp,sp,8
 40209f0:	f800283a 	ret

040209f4 <check_config_status>:

void check_config_status()
{
 40209f4:	defffa04 	addi	sp,sp,-24
 40209f8:	dfc00515 	stw	ra,20(sp)
 40209fc:	df000415 	stw	fp,16(sp)
 4020a00:	df000404 	addi	fp,sp,16
	alt_up_av_config_dev* config_device = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 4020a04:	010100b4 	movhi	r4,1026
 4020a08:	211dc604 	addi	r4,r4,30488
 4020a0c:	40232a00 	call	40232a0 <alt_up_av_config_open_dev>
 4020a10:	e0bffc15 	stw	r2,-16(fp)
	alt_u32 status = IORD_32DIRECT(AUDIO_AND_VIDEO_CONFIG_0_BASE, 4);
 4020a14:	00810134 	movhi	r2,1028
 4020a18:	10842504 	addi	r2,r2,4244
 4020a1c:	10800037 	ldwio	r2,0(r2)
 4020a20:	e0bffd15 	stw	r2,-12(fp)
	alt_printf("The status register is %x \n", status);
 4020a24:	e17ffd17 	ldw	r5,-12(fp)
 4020a28:	010100b4 	movhi	r4,1026
 4020a2c:	211dce04 	addi	r4,r4,30520
 4020a30:	40213ac0 	call	40213ac <alt_printf>
	int ready = alt_up_av_config_read_ready(config_device);
 4020a34:	e13ffc17 	ldw	r4,-16(fp)
 4020a38:	40234e00 	call	40234e0 <alt_up_av_config_read_ready>
 4020a3c:	e0bffe15 	stw	r2,-8(fp)
	alt_printf("The Ready bit is %x \n", ready);
 4020a40:	e17ffe17 	ldw	r5,-8(fp)
 4020a44:	010100b4 	movhi	r4,1026
 4020a48:	211dd504 	addi	r4,r4,30548
 4020a4c:	40213ac0 	call	40213ac <alt_printf>
	int ackbit = alt_up_av_config_read_acknowledge(config_device);
 4020a50:	e13ffc17 	ldw	r4,-16(fp)
 4020a54:	40234880 	call	4023488 <alt_up_av_config_read_acknowledge>
 4020a58:	e0bfff15 	stw	r2,-4(fp)
	alt_printf("The acknowledge bit is %x \n", ackbit);
 4020a5c:	e17fff17 	ldw	r5,-4(fp)
 4020a60:	010100b4 	movhi	r4,1026
 4020a64:	211ddb04 	addi	r4,r4,30572
 4020a68:	40213ac0 	call	40213ac <alt_printf>
}
 4020a6c:	0001883a 	nop
 4020a70:	e037883a 	mov	sp,fp
 4020a74:	dfc00117 	ldw	ra,4(sp)
 4020a78:	df000017 	ldw	fp,0(sp)
 4020a7c:	dec00204 	addi	sp,sp,8
 4020a80:	f800283a 	ret

04020a84 <reset_config_device>:

void reset_config_device()
{
 4020a84:	defffc04 	addi	sp,sp,-16
 4020a88:	dfc00315 	stw	ra,12(sp)
 4020a8c:	df000215 	stw	fp,8(sp)
 4020a90:	df000204 	addi	fp,sp,8
	alt_up_av_config_dev* config_device = alt_up_av_config_open_dev(AUDIO_AND_VIDEO_CONFIG_0_NAME);
 4020a94:	010100b4 	movhi	r4,1026
 4020a98:	211dc604 	addi	r4,r4,30488
 4020a9c:	40232a00 	call	40232a0 <alt_up_av_config_open_dev>
 4020aa0:	e0bffe15 	stw	r2,-8(fp)
	// Test resetting
	alt_printf("Resetting... \n");
 4020aa4:	010100b4 	movhi	r4,1026
 4020aa8:	211de204 	addi	r4,r4,30600
 4020aac:	40213ac0 	call	40213ac <alt_printf>
	int reset = alt_up_av_config_reset(config_device);
 4020ab0:	e13ffe17 	ldw	r4,-8(fp)
 4020ab4:	40233e40 	call	40233e4 <alt_up_av_config_reset>
 4020ab8:	e0bfff15 	stw	r2,-4(fp)
	alt_printf("It returned %x \n", reset);
 4020abc:	e17fff17 	ldw	r5,-4(fp)
 4020ac0:	010100b4 	movhi	r4,1026
 4020ac4:	211de604 	addi	r4,r4,30616
 4020ac8:	40213ac0 	call	40213ac <alt_printf>
}
 4020acc:	0001883a 	nop
 4020ad0:	e037883a 	mov	sp,fp
 4020ad4:	dfc00117 	ldw	ra,4(sp)
 4020ad8:	df000017 	ldw	fp,0(sp)
 4020adc:	dec00204 	addi	sp,sp,8
 4020ae0:	f800283a 	ret

04020ae4 <reset_core>:

void reset_core()
{
 4020ae4:	defffe04 	addi	sp,sp,-8
 4020ae8:	dfc00115 	stw	ra,4(sp)
 4020aec:	df000015 	stw	fp,0(sp)
 4020af0:	d839883a 	mov	fp,sp
	alt_up_audio_reset_audio_core(audio_dev);
 4020af4:	d0a70217 	ldw	r2,-25592(gp)
 4020af8:	1009883a 	mov	r4,r2
 4020afc:	4022d0c0 	call	4022d0c <alt_up_audio_reset_audio_core>
}
 4020b00:	0001883a 	nop
 4020b04:	e037883a 	mov	sp,fp
 4020b08:	dfc00117 	ldw	ra,4(sp)
 4020b0c:	df000017 	ldw	fp,0(sp)
 4020b10:	dec00204 	addi	sp,sp,8
 4020b14:	f800283a 	ret

04020b18 <choose_task>:

// ----------------- Interrupt and task choosing functions -------------------------

void choose_task(int task)
{
 4020b18:	defff304 	addi	sp,sp,-52
 4020b1c:	dfc00c15 	stw	ra,48(sp)
 4020b20:	df000b15 	stw	fp,44(sp)
 4020b24:	df000b04 	addi	fp,sp,44
 4020b28:	e13fff15 	stw	r4,-4(fp)
	//alt_printf("----------------- choose_task ------------------------- \n");
	alt_printf("Task is %x \n", task);
 4020b2c:	e17fff17 	ldw	r5,-4(fp)
 4020b30:	010100b4 	movhi	r4,1026
 4020b34:	211deb04 	addi	r4,r4,30636
 4020b38:	40213ac0 	call	40213ac <alt_printf>
	if(task == 1)
 4020b3c:	e0bfff17 	ldw	r2,-4(fp)
 4020b40:	10800058 	cmpnei	r2,r2,1
 4020b44:	1000061e 	bne	r2,zero,4020b60 <choose_task+0x48>
	{
		alt_printf("Recording... \n");
 4020b48:	010100b4 	movhi	r4,1026
 4020b4c:	211def04 	addi	r4,r4,30652
 4020b50:	40213ac0 	call	40213ac <alt_printf>
		// First switch (SW0) Record audio for a second
		record_process(1);
 4020b54:	01000044 	movi	r4,1
 4020b58:	40204840 	call	4020484 <record_process>
 4020b5c:	00008c06 	br	4020d90 <choose_task+0x278>
		//printf("Interrupt test on CPU %d\n", NIOS2_CPU_ID_VALUE);
	}
	else if(task == 2)
 4020b60:	e0bfff17 	ldw	r2,-4(fp)
 4020b64:	10800098 	cmpnei	r2,r2,2
 4020b68:	1000101e 	bne	r2,zero,4020bac <choose_task+0x94>
	{
		alt_printf("Playing... \n");
 4020b6c:	010100b4 	movhi	r4,1026
 4020b70:	211df304 	addi	r4,r4,30668
 4020b74:	40213ac0 	call	40213ac <alt_printf>
		// Second switch (SW1): Playback processed audio if ready
		if(audio_ready_flag)
 4020b78:	d0a6ff17 	ldw	r2,-25604(gp)
 4020b7c:	10000726 	beq	r2,zero,4020b9c <choose_task+0x84>
		{
			//alt_printf("Playing audio with parameters ready_audio[0] = %x and ready_audio[1] = %x \n", ready_audio[0], ready_audio[1]);
			play_audio((int)ready_audio[0], (int)ready_audio[1]);
 4020b80:	d0a70517 	ldw	r2,-25580(gp)
 4020b84:	1007883a 	mov	r3,r2
 4020b88:	d0a70617 	ldw	r2,-25576(gp)
 4020b8c:	100b883a 	mov	r5,r2
 4020b90:	1809883a 	mov	r4,r3
 4020b94:	40207880 	call	4020788 <play_audio>
 4020b98:	00007d06 	br	4020d90 <choose_task+0x278>
		}
		else
		{
			alt_printf("No audio is ready! Record first. \n");
 4020b9c:	010100b4 	movhi	r4,1026
 4020ba0:	211df704 	addi	r4,r4,30684
 4020ba4:	40213ac0 	call	40213ac <alt_printf>
 4020ba8:	00007906 	br	4020d90 <choose_task+0x278>
		}
	}
	else if(task == 4)
 4020bac:	e0bfff17 	ldw	r2,-4(fp)
 4020bb0:	10800118 	cmpnei	r2,r2,4
 4020bb4:	10000a1e 	bne	r2,zero,4020be0 <choose_task+0xc8>
	{
		alt_printf("Running profiling... \n");
 4020bb8:	010100b4 	movhi	r4,1026
 4020bbc:	211e0004 	addi	r4,r4,30720
 4020bc0:	40213ac0 	call	40213ac <alt_printf>
		// Third switch (SW2): run with profiling
		// Record for HW accelerator
		record_process(1);
 4020bc4:	01000044 	movi	r4,1
 4020bc8:	40204840 	call	4020484 <record_process>
		// Record for custom instruction
		record_process(1);
 4020bcc:	01000044 	movi	r4,1
 4020bd0:	40204840 	call	4020484 <record_process>
		// Record for c code implementation
		record_process(1);
 4020bd4:	01000044 	movi	r4,1
 4020bd8:	40204840 	call	4020484 <record_process>
 4020bdc:	00006c06 	br	4020d90 <choose_task+0x278>
	}
	else if(task == 8)
 4020be0:	e0bfff17 	ldw	r2,-4(fp)
 4020be4:	10800218 	cmpnei	r2,r2,8
 4020be8:	10000e1e 	bne	r2,zero,4020c24 <choose_task+0x10c>
	{
		alt_printf("Testing audio \n");
 4020bec:	010100b4 	movhi	r4,1026
 4020bf0:	211e0604 	addi	r4,r4,30744
 4020bf4:	40213ac0 	call	40213ac <alt_printf>
		// Fourth switch (SW3): Test audio by immediately playing back what is recorded
		int errors = test_audio(0, 48000*4, 48000);
 4020bf8:	01aee014 	movui	r6,48000
 4020bfc:	014000f4 	movhi	r5,3
 4020c00:	297b8004 	addi	r5,r5,-4608
 4020c04:	0009883a 	mov	r4,zero
 4020c08:	40208b00 	call	40208b0 <test_audio>
 4020c0c:	e0bff515 	stw	r2,-44(fp)
		alt_printf("A total of %x words were wrong \n", errors);
 4020c10:	e17ff517 	ldw	r5,-44(fp)
 4020c14:	010100b4 	movhi	r4,1026
 4020c18:	211d6904 	addi	r4,r4,30116
 4020c1c:	40213ac0 	call	40213ac <alt_printf>
 4020c20:	00005b06 	br	4020d90 <choose_task+0x278>
	}
	else if(task == 16)
 4020c24:	e0bfff17 	ldw	r2,-4(fp)
 4020c28:	10800418 	cmpnei	r2,r2,16
 4020c2c:	1000021e 	bne	r2,zero,4020c38 <choose_task+0x120>
	{
		check_config_status();
 4020c30:	40209f40 	call	40209f4 <check_config_status>
 4020c34:	00005606 	br	4020d90 <choose_task+0x278>
	}
	else if(task == 32)
 4020c38:	e0bfff17 	ldw	r2,-4(fp)
 4020c3c:	10800818 	cmpnei	r2,r2,32
 4020c40:	1000021e 	bne	r2,zero,4020c4c <choose_task+0x134>
	{
		reset_config_device();
 4020c44:	4020a840 	call	4020a84 <reset_config_device>
 4020c48:	00005106 	br	4020d90 <choose_task+0x278>
	}
	else if(task == 64)
 4020c4c:	e0bfff17 	ldw	r2,-4(fp)
 4020c50:	10801018 	cmpnei	r2,r2,64
 4020c54:	10004a1e 	bne	r2,zero,4020d80 <choose_task+0x268>
	{
		alt_u32 fiforeg = IORD_32DIRECT(AUDIO_0_BASE, 4);
 4020c58:	00810134 	movhi	r2,1028
 4020c5c:	10842904 	addi	r2,r2,4260
 4020c60:	10800037 	ldwio	r2,0(r2)
 4020c64:	e0bff615 	stw	r2,-40(fp)
		alt_u32 fiforeg2 = IORD_32DIRECT(AUDIO_0_BASE, 8);
 4020c68:	00810134 	movhi	r2,1028
 4020c6c:	10842a04 	addi	r2,r2,4264
 4020c70:	10800037 	ldwio	r2,0(r2)
 4020c74:	e0bff715 	stw	r2,-36(fp)
		alt_u32 fiforeg3 = IORD_32DIRECT(AUDIO_0_BASE, 4);
 4020c78:	00810134 	movhi	r2,1028
 4020c7c:	10842904 	addi	r2,r2,4260
 4020c80:	10800037 	ldwio	r2,0(r2)
 4020c84:	e0bff815 	stw	r2,-32(fp)
		alt_u32 fiforeg4 = IORD_32DIRECT(AUDIO_0_BASE, 8);
 4020c88:	00810134 	movhi	r2,1028
 4020c8c:	10842a04 	addi	r2,r2,4264
 4020c90:	10800037 	ldwio	r2,0(r2)
 4020c94:	e0bff915 	stw	r2,-28(fp)
		alt_printf("the registers of space are %x and %x \n", fiforeg, fiforeg3);
 4020c98:	e1bff817 	ldw	r6,-32(fp)
 4020c9c:	e17ff617 	ldw	r5,-40(fp)
 4020ca0:	010100b4 	movhi	r4,1026
 4020ca4:	211e0a04 	addi	r4,r4,30760
 4020ca8:	40213ac0 	call	40213ac <alt_printf>
		alt_printf("%x and %x", fiforeg2, fiforeg4);
 4020cac:	e1bff917 	ldw	r6,-28(fp)
 4020cb0:	e17ff717 	ldw	r5,-36(fp)
 4020cb4:	010100b4 	movhi	r4,1026
 4020cb8:	211e1404 	addi	r4,r4,30800
 4020cbc:	40213ac0 	call	40213ac <alt_printf>


		alt_u32 statusreg = IORD_32DIRECT(AUDIO_0_BASE, 0);
 4020cc0:	00810134 	movhi	r2,1028
 4020cc4:	10842804 	addi	r2,r2,4256
 4020cc8:	10800037 	ldwio	r2,0(r2)
 4020ccc:	e0bffa15 	stw	r2,-24(fp)
		alt_printf("The core status register is %x \n", statusreg);
 4020cd0:	e17ffa17 	ldw	r5,-24(fp)
 4020cd4:	010100b4 	movhi	r4,1026
 4020cd8:	211e1704 	addi	r4,r4,30812
 4020cdc:	40213ac0 	call	40213ac <alt_printf>
		fiforeg = IORD_32DIRECT(AUDIO_0_BASE, 4);
 4020ce0:	00810134 	movhi	r2,1028
 4020ce4:	10842904 	addi	r2,r2,4260
 4020ce8:	10800037 	ldwio	r2,0(r2)
 4020cec:	e0bff615 	stw	r2,-40(fp)
		alt_printf("The core fifo register is %x \n", fiforeg);
 4020cf0:	e17ff617 	ldw	r5,-40(fp)
 4020cf4:	010100b4 	movhi	r4,1026
 4020cf8:	211e2004 	addi	r4,r4,30848
 4020cfc:	40213ac0 	call	40213ac <alt_printf>
		alt_u32 ldata = IORD_32DIRECT(AUDIO_0_BASE, 8);
 4020d00:	00810134 	movhi	r2,1028
 4020d04:	10842a04 	addi	r2,r2,4264
 4020d08:	10800037 	ldwio	r2,0(r2)
 4020d0c:	e0bffb15 	stw	r2,-20(fp)
		alt_printf("ldada = %x \n", ldata);
 4020d10:	e17ffb17 	ldw	r5,-20(fp)
 4020d14:	010100b4 	movhi	r4,1026
 4020d18:	211e2804 	addi	r4,r4,30880
 4020d1c:	40213ac0 	call	40213ac <alt_printf>
		alt_u32 rdata = IORD_32DIRECT(AUDIO_0_BASE, 12);
 4020d20:	00810134 	movhi	r2,1028
 4020d24:	10842b04 	addi	r2,r2,4268
 4020d28:	10800037 	ldwio	r2,0(r2)
 4020d2c:	e0bffc15 	stw	r2,-16(fp)
		alt_printf("rdada = %x \n", rdata);
 4020d30:	e17ffc17 	ldw	r5,-16(fp)
 4020d34:	010100b4 	movhi	r4,1026
 4020d38:	211e2c04 	addi	r4,r4,30896
 4020d3c:	40213ac0 	call	40213ac <alt_printf>
		alt_u32 rfifo = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_RIGHT);
 4020d40:	d0a70217 	ldw	r2,-25592(gp)
 4020d44:	01400044 	movi	r5,1
 4020d48:	1009883a 	mov	r4,r2
 4020d4c:	4022da00 	call	4022da0 <alt_up_audio_read_fifo_avail>
 4020d50:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 lfifo = alt_up_audio_read_fifo_avail(audio_dev, ALT_UP_AUDIO_LEFT);
 4020d54:	d0a70217 	ldw	r2,-25592(gp)
 4020d58:	000b883a 	mov	r5,zero
 4020d5c:	1009883a 	mov	r4,r2
 4020d60:	4022da00 	call	4022da0 <alt_up_audio_read_fifo_avail>
 4020d64:	e0bffe15 	stw	r2,-8(fp)
		alt_printf("With their read_avail functions, we get that right = %x and left = %x \n", rfifo, lfifo);
 4020d68:	e1bffe17 	ldw	r6,-8(fp)
 4020d6c:	e17ffd17 	ldw	r5,-12(fp)
 4020d70:	010100b4 	movhi	r4,1026
 4020d74:	211e3004 	addi	r4,r4,30912
 4020d78:	40213ac0 	call	40213ac <alt_printf>
 4020d7c:	00000406 	br	4020d90 <choose_task+0x278>

	}
	else if(task == 128)
 4020d80:	e0bfff17 	ldw	r2,-4(fp)
 4020d84:	10802018 	cmpnei	r2,r2,128
 4020d88:	1000011e 	bne	r2,zero,4020d90 <choose_task+0x278>
	{
		reset_core();
 4020d8c:	4020ae40 	call	4020ae4 <reset_core>
	}
	alt_printf("Task complete. Ready for new task. \n\n", task);
 4020d90:	e17fff17 	ldw	r5,-4(fp)
 4020d94:	010100b4 	movhi	r4,1026
 4020d98:	211e4204 	addi	r4,r4,30984
 4020d9c:	40213ac0 	call	40213ac <alt_printf>
}
 4020da0:	0001883a 	nop
 4020da4:	e037883a 	mov	sp,fp
 4020da8:	dfc00117 	ldw	ra,4(sp)
 4020dac:	df000017 	ldw	fp,0(sp)
 4020db0:	dec00204 	addi	sp,sp,8
 4020db4:	f800283a 	ret

04020db8 <isr_switches>:

void isr_switches(void* context)
{
 4020db8:	defffc04 	addi	sp,sp,-16
 4020dbc:	dfc00315 	stw	ra,12(sp)
 4020dc0:	df000215 	stw	fp,8(sp)
 4020dc4:	df000204 	addi	fp,sp,8
 4020dc8:	e13fff15 	stw	r4,-4(fp)
	//alt_printf("----------------- isr_switches ------------------------- \n");
	// Read interrupt source
	uint8_t pinvals = (IORD_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG) & 0xff);
 4020dcc:	00810134 	movhi	r2,1028
 4020dd0:	10841304 	addi	r2,r2,4172
 4020dd4:	10800023 	ldbuio	r2,0(r2)
 4020dd8:	10803fcc 	andi	r2,r2,255
 4020ddc:	e0bffe05 	stb	r2,-8(fp)
	// Save choice
	choice = (int)pinvals;
 4020de0:	e0bffe03 	ldbu	r2,-8(fp)
 4020de4:	d0a70015 	stw	r2,-25600(gp)
	//alt_printf("Sending flag mail... \n");
	// Send mail to the other CPU, letting it know that the flag can be lowered
	send_mail(choice, 0);
 4020de8:	d0a70017 	ldw	r2,-25600(gp)
 4020dec:	000b883a 	mov	r5,zero
 4020df0:	1009883a 	mov	r4,r2
 4020df4:	40202f80 	call	40202f8 <send_mail>
	//alt_printf("Flag mail sent, with choice = %x \n", choice);
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQFLAG, pinvals);
 4020df8:	e0fffe03 	ldbu	r3,-8(fp)
 4020dfc:	00810134 	movhi	r2,1028
 4020e00:	10841304 	addi	r2,r2,4172
 4020e04:	10c00025 	stbio	r3,0(r2)
}
 4020e08:	0001883a 	nop
 4020e0c:	e037883a 	mov	sp,fp
 4020e10:	dfc00117 	ldw	ra,4(sp)
 4020e14:	df000017 	ldw	fp,0(sp)
 4020e18:	dec00204 	addi	sp,sp,8
 4020e1c:	f800283a 	ret

04020e20 <setup_switch_interrupts>:

void setup_switch_interrupts(uint8_t chosen_switches)
{
 4020e20:	defffd04 	addi	sp,sp,-12
 4020e24:	dfc00215 	stw	ra,8(sp)
 4020e28:	df000115 	stw	fp,4(sp)
 4020e2c:	df000104 	addi	fp,sp,4
 4020e30:	2005883a 	mov	r2,r4
 4020e34:	e0bfff05 	stb	r2,-4(fp)
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_2_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
 4020e38:	e0ffff03 	ldbu	r3,-4(fp)
 4020e3c:	00810134 	movhi	r2,1028
 4020e40:	10841204 	addi	r2,r2,4168
 4020e44:	10c00025 	stbio	r3,0(r2)
	alt_irq_register(PIO_2_IRQ, NULL, isr_switches);
 4020e48:	018100b4 	movhi	r6,1026
 4020e4c:	31836e04 	addi	r6,r6,3512
 4020e50:	000b883a 	mov	r5,zero
 4020e54:	01000104 	movi	r4,4
 4020e58:	40210c40 	call	40210c4 <alt_irq_register>
	return;
 4020e5c:	0001883a 	nop
}
 4020e60:	e037883a 	mov	sp,fp
 4020e64:	dfc00117 	ldw	ra,4(sp)
 4020e68:	df000017 	ldw	fp,0(sp)
 4020e6c:	dec00204 	addi	sp,sp,8
 4020e70:	f800283a 	ret

04020e74 <main>:


// ----------------------- Main function ----------------------------------

int main()
{
 4020e74:	defffe04 	addi	sp,sp,-8
 4020e78:	dfc00115 	stw	ra,4(sp)
 4020e7c:	df000015 	stw	fp,0(sp)
 4020e80:	d839883a 	mov	fp,sp
	setup_audio(audio_dev);
 4020e84:	d0a70217 	ldw	r2,-25592(gp)
 4020e88:	1009883a 	mov	r4,r2
 4020e8c:	40204240 	call	4020424 <setup_audio>
	// Setup interrupts on the first 6 switches
	setup_switch_interrupts(0xff);
 4020e90:	01003fc4 	movi	r4,255
 4020e94:	4020e200 	call	4020e20 <setup_switch_interrupts>
	alt_printf("\n \n \n \n ---------- main --------------- \n");
 4020e98:	010100b4 	movhi	r4,1026
 4020e9c:	211e4c04 	addi	r4,r4,31024
 4020ea0:	40213ac0 	call	40213ac <alt_printf>

	// Wait for switches
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 4020ea4:	0100fa04 	movi	r4,1000
 4020ea8:	40216140 	call	4021614 <usleep>
		if(choice != 0)
 4020eac:	d0a70017 	ldw	r2,-25600(gp)
 4020eb0:	103ffc26 	beq	r2,zero,4020ea4 <__alt_data_end+0xfffe0ea4>
		{
			choose_task(choice);
 4020eb4:	d0a70017 	ldw	r2,-25600(gp)
 4020eb8:	1009883a 	mov	r4,r2
 4020ebc:	4020b180 	call	4020b18 <choose_task>
			choice = 0x0;
 4020ec0:	d0270015 	stw	zero,-25600(gp)
		}
	};
 4020ec4:	003ff706 	br	4020ea4 <__alt_data_end+0xfffe0ea4>

04020ec8 <__divsi3>:
 4020ec8:	20001b16 	blt	r4,zero,4020f38 <__divsi3+0x70>
 4020ecc:	000f883a 	mov	r7,zero
 4020ed0:	28001616 	blt	r5,zero,4020f2c <__divsi3+0x64>
 4020ed4:	200d883a 	mov	r6,r4
 4020ed8:	29001a2e 	bgeu	r5,r4,4020f44 <__divsi3+0x7c>
 4020edc:	00800804 	movi	r2,32
 4020ee0:	00c00044 	movi	r3,1
 4020ee4:	00000106 	br	4020eec <__divsi3+0x24>
 4020ee8:	10000d26 	beq	r2,zero,4020f20 <__divsi3+0x58>
 4020eec:	294b883a 	add	r5,r5,r5
 4020ef0:	10bfffc4 	addi	r2,r2,-1
 4020ef4:	18c7883a 	add	r3,r3,r3
 4020ef8:	293ffb36 	bltu	r5,r4,4020ee8 <__alt_data_end+0xfffe0ee8>
 4020efc:	0005883a 	mov	r2,zero
 4020f00:	18000726 	beq	r3,zero,4020f20 <__divsi3+0x58>
 4020f04:	0005883a 	mov	r2,zero
 4020f08:	31400236 	bltu	r6,r5,4020f14 <__divsi3+0x4c>
 4020f0c:	314dc83a 	sub	r6,r6,r5
 4020f10:	10c4b03a 	or	r2,r2,r3
 4020f14:	1806d07a 	srli	r3,r3,1
 4020f18:	280ad07a 	srli	r5,r5,1
 4020f1c:	183ffa1e 	bne	r3,zero,4020f08 <__alt_data_end+0xfffe0f08>
 4020f20:	38000126 	beq	r7,zero,4020f28 <__divsi3+0x60>
 4020f24:	0085c83a 	sub	r2,zero,r2
 4020f28:	f800283a 	ret
 4020f2c:	014bc83a 	sub	r5,zero,r5
 4020f30:	39c0005c 	xori	r7,r7,1
 4020f34:	003fe706 	br	4020ed4 <__alt_data_end+0xfffe0ed4>
 4020f38:	0109c83a 	sub	r4,zero,r4
 4020f3c:	01c00044 	movi	r7,1
 4020f40:	003fe306 	br	4020ed0 <__alt_data_end+0xfffe0ed0>
 4020f44:	00c00044 	movi	r3,1
 4020f48:	003fee06 	br	4020f04 <__alt_data_end+0xfffe0f04>

04020f4c <__modsi3>:
 4020f4c:	20001716 	blt	r4,zero,4020fac <__modsi3+0x60>
 4020f50:	000f883a 	mov	r7,zero
 4020f54:	2005883a 	mov	r2,r4
 4020f58:	28001216 	blt	r5,zero,4020fa4 <__modsi3+0x58>
 4020f5c:	2900162e 	bgeu	r5,r4,4020fb8 <__modsi3+0x6c>
 4020f60:	01800804 	movi	r6,32
 4020f64:	00c00044 	movi	r3,1
 4020f68:	00000106 	br	4020f70 <__modsi3+0x24>
 4020f6c:	30000a26 	beq	r6,zero,4020f98 <__modsi3+0x4c>
 4020f70:	294b883a 	add	r5,r5,r5
 4020f74:	31bfffc4 	addi	r6,r6,-1
 4020f78:	18c7883a 	add	r3,r3,r3
 4020f7c:	293ffb36 	bltu	r5,r4,4020f6c <__alt_data_end+0xfffe0f6c>
 4020f80:	18000526 	beq	r3,zero,4020f98 <__modsi3+0x4c>
 4020f84:	1806d07a 	srli	r3,r3,1
 4020f88:	11400136 	bltu	r2,r5,4020f90 <__modsi3+0x44>
 4020f8c:	1145c83a 	sub	r2,r2,r5
 4020f90:	280ad07a 	srli	r5,r5,1
 4020f94:	183ffb1e 	bne	r3,zero,4020f84 <__alt_data_end+0xfffe0f84>
 4020f98:	38000126 	beq	r7,zero,4020fa0 <__modsi3+0x54>
 4020f9c:	0085c83a 	sub	r2,zero,r2
 4020fa0:	f800283a 	ret
 4020fa4:	014bc83a 	sub	r5,zero,r5
 4020fa8:	003fec06 	br	4020f5c <__alt_data_end+0xfffe0f5c>
 4020fac:	0109c83a 	sub	r4,zero,r4
 4020fb0:	01c00044 	movi	r7,1
 4020fb4:	003fe706 	br	4020f54 <__alt_data_end+0xfffe0f54>
 4020fb8:	00c00044 	movi	r3,1
 4020fbc:	003ff106 	br	4020f84 <__alt_data_end+0xfffe0f84>

04020fc0 <__udivsi3>:
 4020fc0:	200d883a 	mov	r6,r4
 4020fc4:	2900152e 	bgeu	r5,r4,402101c <__udivsi3+0x5c>
 4020fc8:	28001416 	blt	r5,zero,402101c <__udivsi3+0x5c>
 4020fcc:	00800804 	movi	r2,32
 4020fd0:	00c00044 	movi	r3,1
 4020fd4:	00000206 	br	4020fe0 <__udivsi3+0x20>
 4020fd8:	10000e26 	beq	r2,zero,4021014 <__udivsi3+0x54>
 4020fdc:	28000516 	blt	r5,zero,4020ff4 <__udivsi3+0x34>
 4020fe0:	294b883a 	add	r5,r5,r5
 4020fe4:	10bfffc4 	addi	r2,r2,-1
 4020fe8:	18c7883a 	add	r3,r3,r3
 4020fec:	293ffa36 	bltu	r5,r4,4020fd8 <__alt_data_end+0xfffe0fd8>
 4020ff0:	18000826 	beq	r3,zero,4021014 <__udivsi3+0x54>
 4020ff4:	0005883a 	mov	r2,zero
 4020ff8:	31400236 	bltu	r6,r5,4021004 <__udivsi3+0x44>
 4020ffc:	314dc83a 	sub	r6,r6,r5
 4021000:	10c4b03a 	or	r2,r2,r3
 4021004:	1806d07a 	srli	r3,r3,1
 4021008:	280ad07a 	srli	r5,r5,1
 402100c:	183ffa1e 	bne	r3,zero,4020ff8 <__alt_data_end+0xfffe0ff8>
 4021010:	f800283a 	ret
 4021014:	0005883a 	mov	r2,zero
 4021018:	f800283a 	ret
 402101c:	00c00044 	movi	r3,1
 4021020:	003ff406 	br	4020ff4 <__alt_data_end+0xfffe0ff4>

04021024 <__umodsi3>:
 4021024:	2005883a 	mov	r2,r4
 4021028:	2900122e 	bgeu	r5,r4,4021074 <__umodsi3+0x50>
 402102c:	28001116 	blt	r5,zero,4021074 <__umodsi3+0x50>
 4021030:	01800804 	movi	r6,32
 4021034:	00c00044 	movi	r3,1
 4021038:	00000206 	br	4021044 <__umodsi3+0x20>
 402103c:	30000c26 	beq	r6,zero,4021070 <__umodsi3+0x4c>
 4021040:	28000516 	blt	r5,zero,4021058 <__umodsi3+0x34>
 4021044:	294b883a 	add	r5,r5,r5
 4021048:	31bfffc4 	addi	r6,r6,-1
 402104c:	18c7883a 	add	r3,r3,r3
 4021050:	293ffa36 	bltu	r5,r4,402103c <__alt_data_end+0xfffe103c>
 4021054:	18000626 	beq	r3,zero,4021070 <__umodsi3+0x4c>
 4021058:	1806d07a 	srli	r3,r3,1
 402105c:	11400136 	bltu	r2,r5,4021064 <__umodsi3+0x40>
 4021060:	1145c83a 	sub	r2,r2,r5
 4021064:	280ad07a 	srli	r5,r5,1
 4021068:	183ffb1e 	bne	r3,zero,4021058 <__alt_data_end+0xfffe1058>
 402106c:	f800283a 	ret
 4021070:	f800283a 	ret
 4021074:	00c00044 	movi	r3,1
 4021078:	003ff706 	br	4021058 <__alt_data_end+0xfffe1058>

0402107c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402107c:	defffe04 	addi	sp,sp,-8
 4021080:	df000115 	stw	fp,4(sp)
 4021084:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4021088:	e03fff15 	stw	zero,-4(fp)
 402108c:	00000506 	br	40210a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4021090:	e0bfff17 	ldw	r2,-4(fp)
 4021094:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4021098:	e0bfff17 	ldw	r2,-4(fp)
 402109c:	10800804 	addi	r2,r2,32
 40210a0:	e0bfff15 	stw	r2,-4(fp)
 40210a4:	e0bfff17 	ldw	r2,-4(fp)
 40210a8:	10820030 	cmpltui	r2,r2,2048
 40210ac:	103ff81e 	bne	r2,zero,4021090 <__alt_data_end+0xfffe1090>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40210b0:	0001883a 	nop
 40210b4:	e037883a 	mov	sp,fp
 40210b8:	df000017 	ldw	fp,0(sp)
 40210bc:	dec00104 	addi	sp,sp,4
 40210c0:	f800283a 	ret

040210c4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 40210c4:	defff004 	addi	sp,sp,-64
 40210c8:	df000f15 	stw	fp,60(sp)
 40210cc:	df000f04 	addi	fp,sp,60
 40210d0:	e13ffd15 	stw	r4,-12(fp)
 40210d4:	e17ffe15 	stw	r5,-8(fp)
 40210d8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 40210dc:	00bffa84 	movi	r2,-22
 40210e0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 40210e4:	e0bffd17 	ldw	r2,-12(fp)
 40210e8:	10800828 	cmpgeui	r2,r2,32
 40210ec:	1000501e 	bne	r2,zero,4021230 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40210f0:	0005303a 	rdctl	r2,status
 40210f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40210f8:	e0fff617 	ldw	r3,-40(fp)
 40210fc:	00bfff84 	movi	r2,-2
 4021100:	1884703a 	and	r2,r3,r2
 4021104:	1001703a 	wrctl	status,r2
  
  return context;
 4021108:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 402110c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 4021110:	008100f4 	movhi	r2,1027
 4021114:	10ac8604 	addi	r2,r2,-19944
 4021118:	e0fffd17 	ldw	r3,-12(fp)
 402111c:	180690fa 	slli	r3,r3,3
 4021120:	10c5883a 	add	r2,r2,r3
 4021124:	e0ffff17 	ldw	r3,-4(fp)
 4021128:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 402112c:	008100f4 	movhi	r2,1027
 4021130:	10ac8604 	addi	r2,r2,-19944
 4021134:	e0fffd17 	ldw	r3,-12(fp)
 4021138:	180690fa 	slli	r3,r3,3
 402113c:	10c5883a 	add	r2,r2,r3
 4021140:	10800104 	addi	r2,r2,4
 4021144:	e0fffe17 	ldw	r3,-8(fp)
 4021148:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 402114c:	e0bfff17 	ldw	r2,-4(fp)
 4021150:	10001926 	beq	r2,zero,40211b8 <alt_irq_register+0xf4>
 4021154:	e0bffd17 	ldw	r2,-12(fp)
 4021158:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402115c:	0005303a 	rdctl	r2,status
 4021160:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021164:	e0fff717 	ldw	r3,-36(fp)
 4021168:	00bfff84 	movi	r2,-2
 402116c:	1884703a 	and	r2,r3,r2
 4021170:	1001703a 	wrctl	status,r2
  
  return context;
 4021174:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4021178:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 402117c:	00c00044 	movi	r3,1
 4021180:	e0bff217 	ldw	r2,-56(fp)
 4021184:	1884983a 	sll	r2,r3,r2
 4021188:	1007883a 	mov	r3,r2
 402118c:	d0a70917 	ldw	r2,-25564(gp)
 4021190:	1884b03a 	or	r2,r3,r2
 4021194:	d0a70915 	stw	r2,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4021198:	d0a70917 	ldw	r2,-25564(gp)
 402119c:	100170fa 	wrctl	ienable,r2
 40211a0:	e0bff817 	ldw	r2,-32(fp)
 40211a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40211a8:	e0bff917 	ldw	r2,-28(fp)
 40211ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40211b0:	0005883a 	mov	r2,zero
 40211b4:	00001906 	br	402121c <alt_irq_register+0x158>
 40211b8:	e0bffd17 	ldw	r2,-12(fp)
 40211bc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40211c0:	0005303a 	rdctl	r2,status
 40211c4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40211c8:	e0fffa17 	ldw	r3,-24(fp)
 40211cc:	00bfff84 	movi	r2,-2
 40211d0:	1884703a 	and	r2,r3,r2
 40211d4:	1001703a 	wrctl	status,r2
  
  return context;
 40211d8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40211dc:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 40211e0:	00c00044 	movi	r3,1
 40211e4:	e0bff417 	ldw	r2,-48(fp)
 40211e8:	1884983a 	sll	r2,r3,r2
 40211ec:	0084303a 	nor	r2,zero,r2
 40211f0:	1007883a 	mov	r3,r2
 40211f4:	d0a70917 	ldw	r2,-25564(gp)
 40211f8:	1884703a 	and	r2,r3,r2
 40211fc:	d0a70915 	stw	r2,-25564(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4021200:	d0a70917 	ldw	r2,-25564(gp)
 4021204:	100170fa 	wrctl	ienable,r2
 4021208:	e0bffb17 	ldw	r2,-20(fp)
 402120c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021210:	e0bffc17 	ldw	r2,-16(fp)
 4021214:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4021218:	0005883a 	mov	r2,zero
 402121c:	e0bff115 	stw	r2,-60(fp)
 4021220:	e0bff317 	ldw	r2,-52(fp)
 4021224:	e0bff515 	stw	r2,-44(fp)
 4021228:	e0bff517 	ldw	r2,-44(fp)
 402122c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4021230:	e0bff117 	ldw	r2,-60(fp)
}
 4021234:	e037883a 	mov	sp,fp
 4021238:	df000017 	ldw	fp,0(sp)
 402123c:	dec00104 	addi	sp,sp,4
 4021240:	f800283a 	ret

04021244 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4021244:	defffc04 	addi	sp,sp,-16
 4021248:	df000315 	stw	fp,12(sp)
 402124c:	df000304 	addi	fp,sp,12
 4021250:	e13ffd15 	stw	r4,-12(fp)
 4021254:	e17ffe15 	stw	r5,-8(fp)
 4021258:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402125c:	e0fffe17 	ldw	r3,-8(fp)
 4021260:	e0bffd17 	ldw	r2,-12(fp)
 4021264:	18800c26 	beq	r3,r2,4021298 <alt_load_section+0x54>
  {
    while( to != end )
 4021268:	00000806 	br	402128c <alt_load_section+0x48>
    {
      *to++ = *from++;
 402126c:	e0bffe17 	ldw	r2,-8(fp)
 4021270:	10c00104 	addi	r3,r2,4
 4021274:	e0fffe15 	stw	r3,-8(fp)
 4021278:	e0fffd17 	ldw	r3,-12(fp)
 402127c:	19000104 	addi	r4,r3,4
 4021280:	e13ffd15 	stw	r4,-12(fp)
 4021284:	18c00017 	ldw	r3,0(r3)
 4021288:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402128c:	e0fffe17 	ldw	r3,-8(fp)
 4021290:	e0bfff17 	ldw	r2,-4(fp)
 4021294:	18bff51e 	bne	r3,r2,402126c <__alt_data_end+0xfffe126c>
    {
      *to++ = *from++;
    }
  }
}
 4021298:	0001883a 	nop
 402129c:	e037883a 	mov	sp,fp
 40212a0:	df000017 	ldw	fp,0(sp)
 40212a4:	dec00104 	addi	sp,sp,4
 40212a8:	f800283a 	ret

040212ac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40212ac:	defffe04 	addi	sp,sp,-8
 40212b0:	dfc00115 	stw	ra,4(sp)
 40212b4:	df000015 	stw	fp,0(sp)
 40212b8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 40212bc:	018100f4 	movhi	r6,1027
 40212c0:	31a57804 	addi	r6,r6,-27168
 40212c4:	014100b4 	movhi	r5,1026
 40212c8:	295e8904 	addi	r5,r5,31268
 40212cc:	010100f4 	movhi	r4,1027
 40212d0:	21257804 	addi	r4,r4,-27168
 40212d4:	40212440 	call	4021244 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 40212d8:	018100b4 	movhi	r6,1026
 40212dc:	31809204 	addi	r6,r6,584
 40212e0:	014100b4 	movhi	r5,1026
 40212e4:	29400804 	addi	r5,r5,32
 40212e8:	010100b4 	movhi	r4,1026
 40212ec:	21000804 	addi	r4,r4,32
 40212f0:	40212440 	call	4021244 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 40212f4:	018100b4 	movhi	r6,1026
 40212f8:	319e8904 	addi	r6,r6,31268
 40212fc:	014100b4 	movhi	r5,1026
 4021300:	295cf204 	addi	r5,r5,29640
 4021304:	010100b4 	movhi	r4,1026
 4021308:	211cf204 	addi	r4,r4,29640
 402130c:	40212440 	call	4021244 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4021310:	402107c0 	call	402107c <alt_dcache_flush_all>
  alt_icache_flush_all();
 4021314:	4023f880 	call	4023f88 <alt_icache_flush_all>
}
 4021318:	0001883a 	nop
 402131c:	e037883a 	mov	sp,fp
 4021320:	dfc00117 	ldw	ra,4(sp)
 4021324:	df000017 	ldw	fp,0(sp)
 4021328:	dec00204 	addi	sp,sp,8
 402132c:	f800283a 	ret

04021330 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4021330:	defffd04 	addi	sp,sp,-12
 4021334:	dfc00215 	stw	ra,8(sp)
 4021338:	df000115 	stw	fp,4(sp)
 402133c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4021340:	0009883a 	mov	r4,zero
 4021344:	40216780 	call	4021678 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4021348:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402134c:	40216b00 	call	40216b0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4021350:	018100b4 	movhi	r6,1026
 4021354:	319e5704 	addi	r6,r6,31068
 4021358:	014100b4 	movhi	r5,1026
 402135c:	295e5704 	addi	r5,r5,31068
 4021360:	010100b4 	movhi	r4,1026
 4021364:	211e5704 	addi	r4,r4,31068
 4021368:	40240800 	call	4024080 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402136c:	4023e380 	call	4023e38 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4021370:	010100b4 	movhi	r4,1026
 4021374:	210fa604 	addi	r4,r4,16024
 4021378:	40248540 	call	4024854 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402137c:	d0a70a17 	ldw	r2,-25560(gp)
 4021380:	d0e70b17 	ldw	r3,-25556(gp)
 4021384:	d1270c17 	ldw	r4,-25552(gp)
 4021388:	200d883a 	mov	r6,r4
 402138c:	180b883a 	mov	r5,r3
 4021390:	1009883a 	mov	r4,r2
 4021394:	4020e740 	call	4020e74 <main>
 4021398:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402139c:	01000044 	movi	r4,1
 40213a0:	4023c5c0 	call	4023c5c <close>
  exit (result);
 40213a4:	e13fff17 	ldw	r4,-4(fp)
 40213a8:	40248680 	call	4024868 <exit>

040213ac <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 40213ac:	defff204 	addi	sp,sp,-56
 40213b0:	dfc00a15 	stw	ra,40(sp)
 40213b4:	df000915 	stw	fp,36(sp)
 40213b8:	df000904 	addi	fp,sp,36
 40213bc:	e13fff15 	stw	r4,-4(fp)
 40213c0:	e1400215 	stw	r5,8(fp)
 40213c4:	e1800315 	stw	r6,12(fp)
 40213c8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 40213cc:	e0800204 	addi	r2,fp,8
 40213d0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 40213d4:	e0bfff17 	ldw	r2,-4(fp)
 40213d8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 40213dc:	00006f06 	br	402159c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 40213e0:	e0bff807 	ldb	r2,-32(fp)
 40213e4:	10800960 	cmpeqi	r2,r2,37
 40213e8:	1000041e 	bne	r2,zero,40213fc <alt_printf+0x50>
        {
            alt_putchar(c);
 40213ec:	e0bff807 	ldb	r2,-32(fp)
 40213f0:	1009883a 	mov	r4,r2
 40213f4:	40215d80 	call	40215d8 <alt_putchar>
 40213f8:	00006806 	br	402159c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 40213fc:	e0bff717 	ldw	r2,-36(fp)
 4021400:	10c00044 	addi	r3,r2,1
 4021404:	e0fff715 	stw	r3,-36(fp)
 4021408:	10800003 	ldbu	r2,0(r2)
 402140c:	e0bff805 	stb	r2,-32(fp)
 4021410:	e0bff807 	ldb	r2,-32(fp)
 4021414:	10006926 	beq	r2,zero,40215bc <alt_printf+0x210>
            {
                if (c == '%')
 4021418:	e0bff807 	ldb	r2,-32(fp)
 402141c:	10800958 	cmpnei	r2,r2,37
 4021420:	1000041e 	bne	r2,zero,4021434 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 4021424:	e0bff807 	ldb	r2,-32(fp)
 4021428:	1009883a 	mov	r4,r2
 402142c:	40215d80 	call	40215d8 <alt_putchar>
 4021430:	00005a06 	br	402159c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 4021434:	e0bff807 	ldb	r2,-32(fp)
 4021438:	108018d8 	cmpnei	r2,r2,99
 402143c:	1000081e 	bne	r2,zero,4021460 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 4021440:	e0bffe17 	ldw	r2,-8(fp)
 4021444:	10c00104 	addi	r3,r2,4
 4021448:	e0fffe15 	stw	r3,-8(fp)
 402144c:	10800017 	ldw	r2,0(r2)
 4021450:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 4021454:	e13ffd17 	ldw	r4,-12(fp)
 4021458:	40215d80 	call	40215d8 <alt_putchar>
 402145c:	00004f06 	br	402159c <alt_printf+0x1f0>
                }
                else if (c == 'x')
 4021460:	e0bff807 	ldb	r2,-32(fp)
 4021464:	10801e18 	cmpnei	r2,r2,120
 4021468:	1000341e 	bne	r2,zero,402153c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 402146c:	e0bffe17 	ldw	r2,-8(fp)
 4021470:	10c00104 	addi	r3,r2,4
 4021474:	e0fffe15 	stw	r3,-8(fp)
 4021478:	10800017 	ldw	r2,0(r2)
 402147c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 4021480:	e0bffb17 	ldw	r2,-20(fp)
 4021484:	1000031e 	bne	r2,zero,4021494 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 4021488:	01000c04 	movi	r4,48
 402148c:	40215d80 	call	40215d8 <alt_putchar>
                        continue;
 4021490:	00004206 	br	402159c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 4021494:	00800704 	movi	r2,28
 4021498:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 402149c:	00000306 	br	40214ac <alt_printf+0x100>
                        digit_shift -= 4;
 40214a0:	e0bff917 	ldw	r2,-28(fp)
 40214a4:	10bfff04 	addi	r2,r2,-4
 40214a8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 40214ac:	00c003c4 	movi	r3,15
 40214b0:	e0bff917 	ldw	r2,-28(fp)
 40214b4:	1884983a 	sll	r2,r3,r2
 40214b8:	1007883a 	mov	r3,r2
 40214bc:	e0bffb17 	ldw	r2,-20(fp)
 40214c0:	1884703a 	and	r2,r3,r2
 40214c4:	103ff626 	beq	r2,zero,40214a0 <__alt_data_end+0xfffe14a0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 40214c8:	00001906 	br	4021530 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 40214cc:	00c003c4 	movi	r3,15
 40214d0:	e0bff917 	ldw	r2,-28(fp)
 40214d4:	1884983a 	sll	r2,r3,r2
 40214d8:	1007883a 	mov	r3,r2
 40214dc:	e0bffb17 	ldw	r2,-20(fp)
 40214e0:	1886703a 	and	r3,r3,r2
 40214e4:	e0bff917 	ldw	r2,-28(fp)
 40214e8:	1884d83a 	srl	r2,r3,r2
 40214ec:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 40214f0:	e0bffc17 	ldw	r2,-16(fp)
 40214f4:	108002a8 	cmpgeui	r2,r2,10
 40214f8:	1000041e 	bne	r2,zero,402150c <alt_printf+0x160>
                            c = '0' + digit;
 40214fc:	e0bffc17 	ldw	r2,-16(fp)
 4021500:	10800c04 	addi	r2,r2,48
 4021504:	e0bff805 	stb	r2,-32(fp)
 4021508:	00000306 	br	4021518 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 402150c:	e0bffc17 	ldw	r2,-16(fp)
 4021510:	108015c4 	addi	r2,r2,87
 4021514:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 4021518:	e0bff807 	ldb	r2,-32(fp)
 402151c:	1009883a 	mov	r4,r2
 4021520:	40215d80 	call	40215d8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4021524:	e0bff917 	ldw	r2,-28(fp)
 4021528:	10bfff04 	addi	r2,r2,-4
 402152c:	e0bff915 	stw	r2,-28(fp)
 4021530:	e0bff917 	ldw	r2,-28(fp)
 4021534:	103fe50e 	bge	r2,zero,40214cc <__alt_data_end+0xfffe14cc>
 4021538:	00001806 	br	402159c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 402153c:	e0bff807 	ldb	r2,-32(fp)
 4021540:	10801cd8 	cmpnei	r2,r2,115
 4021544:	1000151e 	bne	r2,zero,402159c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 4021548:	e0bffe17 	ldw	r2,-8(fp)
 402154c:	10c00104 	addi	r3,r2,4
 4021550:	e0fffe15 	stw	r3,-8(fp)
 4021554:	10800017 	ldw	r2,0(r2)
 4021558:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 402155c:	00000906 	br	4021584 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 4021560:	e0bffa17 	ldw	r2,-24(fp)
 4021564:	10c00044 	addi	r3,r2,1
 4021568:	e0fffa15 	stw	r3,-24(fp)
 402156c:	10800003 	ldbu	r2,0(r2)
 4021570:	10803fcc 	andi	r2,r2,255
 4021574:	1080201c 	xori	r2,r2,128
 4021578:	10bfe004 	addi	r2,r2,-128
 402157c:	1009883a 	mov	r4,r2
 4021580:	40215d80 	call	40215d8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 4021584:	e0bffa17 	ldw	r2,-24(fp)
 4021588:	10800003 	ldbu	r2,0(r2)
 402158c:	10803fcc 	andi	r2,r2,255
 4021590:	1080201c 	xori	r2,r2,128
 4021594:	10bfe004 	addi	r2,r2,-128
 4021598:	103ff11e 	bne	r2,zero,4021560 <__alt_data_end+0xfffe1560>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 402159c:	e0bff717 	ldw	r2,-36(fp)
 40215a0:	10c00044 	addi	r3,r2,1
 40215a4:	e0fff715 	stw	r3,-36(fp)
 40215a8:	10800003 	ldbu	r2,0(r2)
 40215ac:	e0bff805 	stb	r2,-32(fp)
 40215b0:	e0bff807 	ldb	r2,-32(fp)
 40215b4:	103f8a1e 	bne	r2,zero,40213e0 <__alt_data_end+0xfffe13e0>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40215b8:	00000106 	br	40215c0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 40215bc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 40215c0:	0001883a 	nop
 40215c4:	e037883a 	mov	sp,fp
 40215c8:	dfc00117 	ldw	ra,4(sp)
 40215cc:	df000017 	ldw	fp,0(sp)
 40215d0:	dec00504 	addi	sp,sp,20
 40215d4:	f800283a 	ret

040215d8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 40215d8:	defffd04 	addi	sp,sp,-12
 40215dc:	dfc00215 	stw	ra,8(sp)
 40215e0:	df000115 	stw	fp,4(sp)
 40215e4:	df000104 	addi	fp,sp,4
 40215e8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 40215ec:	d0a00c17 	ldw	r2,-32720(gp)
 40215f0:	10800217 	ldw	r2,8(r2)
 40215f4:	100b883a 	mov	r5,r2
 40215f8:	e13fff17 	ldw	r4,-4(fp)
 40215fc:	4024b040 	call	4024b04 <putc>
#endif
#endif
}
 4021600:	e037883a 	mov	sp,fp
 4021604:	dfc00117 	ldw	ra,4(sp)
 4021608:	df000017 	ldw	fp,0(sp)
 402160c:	dec00204 	addi	sp,sp,8
 4021610:	f800283a 	ret

04021614 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4021614:	defffd04 	addi	sp,sp,-12
 4021618:	dfc00215 	stw	ra,8(sp)
 402161c:	df000115 	stw	fp,4(sp)
 4021620:	df000104 	addi	fp,sp,4
 4021624:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4021628:	e13fff17 	ldw	r4,-4(fp)
 402162c:	4023ac80 	call	4023ac8 <alt_busy_sleep>
}
 4021630:	e037883a 	mov	sp,fp
 4021634:	dfc00117 	ldw	ra,4(sp)
 4021638:	df000017 	ldw	fp,0(sp)
 402163c:	dec00204 	addi	sp,sp,8
 4021640:	f800283a 	ret

04021644 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4021644:	defffd04 	addi	sp,sp,-12
 4021648:	dfc00215 	stw	ra,8(sp)
 402164c:	df000115 	stw	fp,4(sp)
 4021650:	df000104 	addi	fp,sp,4
 4021654:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4021658:	d1600504 	addi	r5,gp,-32748
 402165c:	e13fff17 	ldw	r4,-4(fp)
 4021660:	4023d940 	call	4023d94 <alt_dev_llist_insert>
}
 4021664:	e037883a 	mov	sp,fp
 4021668:	dfc00117 	ldw	ra,4(sp)
 402166c:	df000017 	ldw	fp,0(sp)
 4021670:	dec00204 	addi	sp,sp,8
 4021674:	f800283a 	ret

04021678 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4021678:	defffd04 	addi	sp,sp,-12
 402167c:	dfc00215 	stw	ra,8(sp)
 4021680:	df000115 	stw	fp,4(sp)
 4021684:	df000104 	addi	fp,sp,4
 4021688:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 402168c:	40245580 	call	4024558 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4021690:	00800044 	movi	r2,1
 4021694:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4021698:	0001883a 	nop
 402169c:	e037883a 	mov	sp,fp
 40216a0:	dfc00117 	ldw	ra,4(sp)
 40216a4:	df000017 	ldw	fp,0(sp)
 40216a8:	dec00204 	addi	sp,sp,8
 40216ac:	f800283a 	ret

040216b0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40216b0:	defffe04 	addi	sp,sp,-8
 40216b4:	dfc00115 	stw	ra,4(sp)
 40216b8:	df000015 	stw	fp,0(sp)
 40216bc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 40216c0:	018000c4 	movi	r6,3
 40216c4:	000b883a 	mov	r5,zero
 40216c8:	010100b4 	movhi	r4,1026
 40216cc:	211e9304 	addi	r4,r4,31308
 40216d0:	40218c40 	call	40218c4 <altera_avalon_jtag_uart_init>
 40216d4:	010100b4 	movhi	r4,1026
 40216d8:	211e8904 	addi	r4,r4,31268
 40216dc:	40216440 	call	4021644 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 40216e0:	01bfffc4 	movi	r6,-1
 40216e4:	000b883a 	mov	r5,zero
 40216e8:	010100f4 	movhi	r4,1027
 40216ec:	2122a104 	addi	r4,r4,-30076
 40216f0:	40224b00 	call	40224b0 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_1, mailbox_simple_1);
 40216f4:	01800044 	movi	r6,1
 40216f8:	000b883a 	mov	r5,zero
 40216fc:	010100f4 	movhi	r4,1027
 4021700:	2122b304 	addi	r4,r4,-30004
 4021704:	40224b00 	call	40224b0 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 4021708:	00c00044 	movi	r3,1
 402170c:	00810134 	movhi	r2,1028
 4021710:	10840004 	addi	r2,r2,4096
 4021714:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG_0, audio_and_video_config_0);
 4021718:	010100f4 	movhi	r4,1027
 402171c:	2122c504 	addi	r4,r4,-29932
 4021720:	40216440 	call	4021644 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO_0, audio_0);
 4021724:	010100f4 	movhi	r4,1027
 4021728:	2122d104 	addi	r4,r4,-29884
 402172c:	40216440 	call	4021644 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 4021730:	010100f4 	movhi	r4,1027
 4021734:	2122dd04 	addi	r4,r4,-29836
 4021738:	40216440 	call	4021644 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 402173c:	010100f4 	movhi	r4,1027
 4021740:	2122e804 	addi	r4,r4,-29792
 4021744:	40216440 	call	4021644 <alt_dev_reg>
}
 4021748:	0001883a 	nop
 402174c:	e037883a 	mov	sp,fp
 4021750:	dfc00117 	ldw	ra,4(sp)
 4021754:	df000017 	ldw	fp,0(sp)
 4021758:	dec00204 	addi	sp,sp,8
 402175c:	f800283a 	ret

04021760 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4021760:	defffa04 	addi	sp,sp,-24
 4021764:	dfc00515 	stw	ra,20(sp)
 4021768:	df000415 	stw	fp,16(sp)
 402176c:	df000404 	addi	fp,sp,16
 4021770:	e13ffd15 	stw	r4,-12(fp)
 4021774:	e17ffe15 	stw	r5,-8(fp)
 4021778:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402177c:	e0bffd17 	ldw	r2,-12(fp)
 4021780:	10800017 	ldw	r2,0(r2)
 4021784:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4021788:	e0bffc17 	ldw	r2,-16(fp)
 402178c:	10c00a04 	addi	r3,r2,40
 4021790:	e0bffd17 	ldw	r2,-12(fp)
 4021794:	10800217 	ldw	r2,8(r2)
 4021798:	100f883a 	mov	r7,r2
 402179c:	e1bfff17 	ldw	r6,-4(fp)
 40217a0:	e17ffe17 	ldw	r5,-8(fp)
 40217a4:	1809883a 	mov	r4,r3
 40217a8:	4021d800 	call	4021d80 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40217ac:	e037883a 	mov	sp,fp
 40217b0:	dfc00117 	ldw	ra,4(sp)
 40217b4:	df000017 	ldw	fp,0(sp)
 40217b8:	dec00204 	addi	sp,sp,8
 40217bc:	f800283a 	ret

040217c0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40217c0:	defffa04 	addi	sp,sp,-24
 40217c4:	dfc00515 	stw	ra,20(sp)
 40217c8:	df000415 	stw	fp,16(sp)
 40217cc:	df000404 	addi	fp,sp,16
 40217d0:	e13ffd15 	stw	r4,-12(fp)
 40217d4:	e17ffe15 	stw	r5,-8(fp)
 40217d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40217dc:	e0bffd17 	ldw	r2,-12(fp)
 40217e0:	10800017 	ldw	r2,0(r2)
 40217e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40217e8:	e0bffc17 	ldw	r2,-16(fp)
 40217ec:	10c00a04 	addi	r3,r2,40
 40217f0:	e0bffd17 	ldw	r2,-12(fp)
 40217f4:	10800217 	ldw	r2,8(r2)
 40217f8:	100f883a 	mov	r7,r2
 40217fc:	e1bfff17 	ldw	r6,-4(fp)
 4021800:	e17ffe17 	ldw	r5,-8(fp)
 4021804:	1809883a 	mov	r4,r3
 4021808:	4021f9c0 	call	4021f9c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402180c:	e037883a 	mov	sp,fp
 4021810:	dfc00117 	ldw	ra,4(sp)
 4021814:	df000017 	ldw	fp,0(sp)
 4021818:	dec00204 	addi	sp,sp,8
 402181c:	f800283a 	ret

04021820 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4021820:	defffc04 	addi	sp,sp,-16
 4021824:	dfc00315 	stw	ra,12(sp)
 4021828:	df000215 	stw	fp,8(sp)
 402182c:	df000204 	addi	fp,sp,8
 4021830:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4021834:	e0bfff17 	ldw	r2,-4(fp)
 4021838:	10800017 	ldw	r2,0(r2)
 402183c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4021840:	e0bffe17 	ldw	r2,-8(fp)
 4021844:	10c00a04 	addi	r3,r2,40
 4021848:	e0bfff17 	ldw	r2,-4(fp)
 402184c:	10800217 	ldw	r2,8(r2)
 4021850:	100b883a 	mov	r5,r2
 4021854:	1809883a 	mov	r4,r3
 4021858:	4021c280 	call	4021c28 <altera_avalon_jtag_uart_close>
}
 402185c:	e037883a 	mov	sp,fp
 4021860:	dfc00117 	ldw	ra,4(sp)
 4021864:	df000017 	ldw	fp,0(sp)
 4021868:	dec00204 	addi	sp,sp,8
 402186c:	f800283a 	ret

04021870 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4021870:	defffa04 	addi	sp,sp,-24
 4021874:	dfc00515 	stw	ra,20(sp)
 4021878:	df000415 	stw	fp,16(sp)
 402187c:	df000404 	addi	fp,sp,16
 4021880:	e13ffd15 	stw	r4,-12(fp)
 4021884:	e17ffe15 	stw	r5,-8(fp)
 4021888:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402188c:	e0bffd17 	ldw	r2,-12(fp)
 4021890:	10800017 	ldw	r2,0(r2)
 4021894:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4021898:	e0bffc17 	ldw	r2,-16(fp)
 402189c:	10800a04 	addi	r2,r2,40
 40218a0:	e1bfff17 	ldw	r6,-4(fp)
 40218a4:	e17ffe17 	ldw	r5,-8(fp)
 40218a8:	1009883a 	mov	r4,r2
 40218ac:	4021c900 	call	4021c90 <altera_avalon_jtag_uart_ioctl>
}
 40218b0:	e037883a 	mov	sp,fp
 40218b4:	dfc00117 	ldw	ra,4(sp)
 40218b8:	df000017 	ldw	fp,0(sp)
 40218bc:	dec00204 	addi	sp,sp,8
 40218c0:	f800283a 	ret

040218c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40218c4:	defffb04 	addi	sp,sp,-20
 40218c8:	dfc00415 	stw	ra,16(sp)
 40218cc:	df000315 	stw	fp,12(sp)
 40218d0:	df000304 	addi	fp,sp,12
 40218d4:	e13ffd15 	stw	r4,-12(fp)
 40218d8:	e17ffe15 	stw	r5,-8(fp)
 40218dc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40218e0:	e0bffd17 	ldw	r2,-12(fp)
 40218e4:	00c00044 	movi	r3,1
 40218e8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 40218ec:	e0bffd17 	ldw	r2,-12(fp)
 40218f0:	10800017 	ldw	r2,0(r2)
 40218f4:	10800104 	addi	r2,r2,4
 40218f8:	1007883a 	mov	r3,r2
 40218fc:	e0bffd17 	ldw	r2,-12(fp)
 4021900:	10800817 	ldw	r2,32(r2)
 4021904:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 4021908:	e0bfff17 	ldw	r2,-4(fp)
 402190c:	018100b4 	movhi	r6,1026
 4021910:	31865e04 	addi	r6,r6,6520
 4021914:	e17ffd17 	ldw	r5,-12(fp)
 4021918:	1009883a 	mov	r4,r2
 402191c:	40210c40 	call	40210c4 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4021920:	e0bffd17 	ldw	r2,-12(fp)
 4021924:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4021928:	e0bffd17 	ldw	r2,-12(fp)
 402192c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4021930:	d0e70d17 	ldw	r3,-25548(gp)
 4021934:	e1fffd17 	ldw	r7,-12(fp)
 4021938:	018100b4 	movhi	r6,1026
 402193c:	3186e204 	addi	r6,r6,7048
 4021940:	180b883a 	mov	r5,r3
 4021944:	1009883a 	mov	r4,r2
 4021948:	402399c0 	call	402399c <alt_alarm_start>
 402194c:	1000040e 	bge	r2,zero,4021960 <altera_avalon_jtag_uart_init+0x9c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4021950:	e0fffd17 	ldw	r3,-12(fp)
 4021954:	00a00034 	movhi	r2,32768
 4021958:	10bfffc4 	addi	r2,r2,-1
 402195c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4021960:	0001883a 	nop
 4021964:	e037883a 	mov	sp,fp
 4021968:	dfc00117 	ldw	ra,4(sp)
 402196c:	df000017 	ldw	fp,0(sp)
 4021970:	dec00204 	addi	sp,sp,8
 4021974:	f800283a 	ret

04021978 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4021978:	defff704 	addi	sp,sp,-36
 402197c:	df000815 	stw	fp,32(sp)
 4021980:	df000804 	addi	fp,sp,32
 4021984:	e13ffe15 	stw	r4,-8(fp)
 4021988:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402198c:	e0bffe17 	ldw	r2,-8(fp)
 4021990:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
 4021994:	e0bffa17 	ldw	r2,-24(fp)
 4021998:	10800017 	ldw	r2,0(r2)
 402199c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 40219a0:	e0bffb17 	ldw	r2,-20(fp)
 40219a4:	10800104 	addi	r2,r2,4
 40219a8:	10800037 	ldwio	r2,0(r2)
 40219ac:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 40219b0:	e0bffc17 	ldw	r2,-16(fp)
 40219b4:	1080c00c 	andi	r2,r2,768
 40219b8:	10006d26 	beq	r2,zero,4021b70 <altera_avalon_jtag_uart_irq+0x1f8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 40219bc:	e0bffc17 	ldw	r2,-16(fp)
 40219c0:	1080400c 	andi	r2,r2,256
 40219c4:	10003526 	beq	r2,zero,4021a9c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 40219c8:	00800074 	movhi	r2,1
 40219cc:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40219d0:	e0bffa17 	ldw	r2,-24(fp)
 40219d4:	10800a17 	ldw	r2,40(r2)
 40219d8:	10800044 	addi	r2,r2,1
 40219dc:	1081ffcc 	andi	r2,r2,2047
 40219e0:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
 40219e4:	e0bffa17 	ldw	r2,-24(fp)
 40219e8:	10c00b17 	ldw	r3,44(r2)
 40219ec:	e0bffd17 	ldw	r2,-12(fp)
 40219f0:	18801526 	beq	r3,r2,4021a48 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 40219f4:	e0bffb17 	ldw	r2,-20(fp)
 40219f8:	10800037 	ldwio	r2,0(r2)
 40219fc:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4021a00:	e0bff817 	ldw	r2,-32(fp)
 4021a04:	10a0000c 	andi	r2,r2,32768
 4021a08:	10001126 	beq	r2,zero,4021a50 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4021a0c:	e0bffa17 	ldw	r2,-24(fp)
 4021a10:	10800a17 	ldw	r2,40(r2)
 4021a14:	e0fff817 	ldw	r3,-32(fp)
 4021a18:	1809883a 	mov	r4,r3
 4021a1c:	e0fffa17 	ldw	r3,-24(fp)
 4021a20:	1885883a 	add	r2,r3,r2
 4021a24:	10800e04 	addi	r2,r2,56
 4021a28:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021a2c:	e0bffa17 	ldw	r2,-24(fp)
 4021a30:	10800a17 	ldw	r2,40(r2)
 4021a34:	10800044 	addi	r2,r2,1
 4021a38:	10c1ffcc 	andi	r3,r2,2047
 4021a3c:	e0bffa17 	ldw	r2,-24(fp)
 4021a40:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 4021a44:	003fe206 	br	40219d0 <__alt_data_end+0xfffe19d0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4021a48:	0001883a 	nop
 4021a4c:	00000106 	br	4021a54 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4021a50:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4021a54:	e0bff817 	ldw	r2,-32(fp)
 4021a58:	10bfffec 	andhi	r2,r2,65535
 4021a5c:	10000f26 	beq	r2,zero,4021a9c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4021a60:	e0bffa17 	ldw	r2,-24(fp)
 4021a64:	10c00817 	ldw	r3,32(r2)
 4021a68:	00bfff84 	movi	r2,-2
 4021a6c:	1886703a 	and	r3,r3,r2
 4021a70:	e0bffa17 	ldw	r2,-24(fp)
 4021a74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4021a78:	e0bffb17 	ldw	r2,-20(fp)
 4021a7c:	10800104 	addi	r2,r2,4
 4021a80:	1007883a 	mov	r3,r2
 4021a84:	e0bffa17 	ldw	r2,-24(fp)
 4021a88:	10800817 	ldw	r2,32(r2)
 4021a8c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4021a90:	e0bffb17 	ldw	r2,-20(fp)
 4021a94:	10800104 	addi	r2,r2,4
 4021a98:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4021a9c:	e0bffc17 	ldw	r2,-16(fp)
 4021aa0:	1080800c 	andi	r2,r2,512
 4021aa4:	103fbe26 	beq	r2,zero,40219a0 <__alt_data_end+0xfffe19a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4021aa8:	e0bffc17 	ldw	r2,-16(fp)
 4021aac:	1004d43a 	srli	r2,r2,16
 4021ab0:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4021ab4:	00001406 	br	4021b08 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4021ab8:	e0bffb17 	ldw	r2,-20(fp)
 4021abc:	e0fffa17 	ldw	r3,-24(fp)
 4021ac0:	18c00d17 	ldw	r3,52(r3)
 4021ac4:	e13ffa17 	ldw	r4,-24(fp)
 4021ac8:	20c7883a 	add	r3,r4,r3
 4021acc:	18c20e04 	addi	r3,r3,2104
 4021ad0:	18c00003 	ldbu	r3,0(r3)
 4021ad4:	18c03fcc 	andi	r3,r3,255
 4021ad8:	18c0201c 	xori	r3,r3,128
 4021adc:	18ffe004 	addi	r3,r3,-128
 4021ae0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021ae4:	e0bffa17 	ldw	r2,-24(fp)
 4021ae8:	10800d17 	ldw	r2,52(r2)
 4021aec:	10800044 	addi	r2,r2,1
 4021af0:	10c1ffcc 	andi	r3,r2,2047
 4021af4:	e0bffa17 	ldw	r2,-24(fp)
 4021af8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4021afc:	e0bff917 	ldw	r2,-28(fp)
 4021b00:	10bfffc4 	addi	r2,r2,-1
 4021b04:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4021b08:	e0bff917 	ldw	r2,-28(fp)
 4021b0c:	10000526 	beq	r2,zero,4021b24 <altera_avalon_jtag_uart_irq+0x1ac>
 4021b10:	e0bffa17 	ldw	r2,-24(fp)
 4021b14:	10c00d17 	ldw	r3,52(r2)
 4021b18:	e0bffa17 	ldw	r2,-24(fp)
 4021b1c:	10800c17 	ldw	r2,48(r2)
 4021b20:	18bfe51e 	bne	r3,r2,4021ab8 <__alt_data_end+0xfffe1ab8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4021b24:	e0bff917 	ldw	r2,-28(fp)
 4021b28:	103f9d26 	beq	r2,zero,40219a0 <__alt_data_end+0xfffe19a0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4021b2c:	e0bffa17 	ldw	r2,-24(fp)
 4021b30:	10c00817 	ldw	r3,32(r2)
 4021b34:	00bfff44 	movi	r2,-3
 4021b38:	1886703a 	and	r3,r3,r2
 4021b3c:	e0bffa17 	ldw	r2,-24(fp)
 4021b40:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4021b44:	e0bffa17 	ldw	r2,-24(fp)
 4021b48:	10800017 	ldw	r2,0(r2)
 4021b4c:	10800104 	addi	r2,r2,4
 4021b50:	1007883a 	mov	r3,r2
 4021b54:	e0bffa17 	ldw	r2,-24(fp)
 4021b58:	10800817 	ldw	r2,32(r2)
 4021b5c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4021b60:	e0bffb17 	ldw	r2,-20(fp)
 4021b64:	10800104 	addi	r2,r2,4
 4021b68:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4021b6c:	003f8c06 	br	40219a0 <__alt_data_end+0xfffe19a0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4021b70:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4021b74:	0001883a 	nop
 4021b78:	e037883a 	mov	sp,fp
 4021b7c:	df000017 	ldw	fp,0(sp)
 4021b80:	dec00104 	addi	sp,sp,4
 4021b84:	f800283a 	ret

04021b88 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4021b88:	defff804 	addi	sp,sp,-32
 4021b8c:	df000715 	stw	fp,28(sp)
 4021b90:	df000704 	addi	fp,sp,28
 4021b94:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4021b98:	e0bffb17 	ldw	r2,-20(fp)
 4021b9c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4021ba0:	e0bff917 	ldw	r2,-28(fp)
 4021ba4:	10800017 	ldw	r2,0(r2)
 4021ba8:	10800104 	addi	r2,r2,4
 4021bac:	10800037 	ldwio	r2,0(r2)
 4021bb0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4021bb4:	e0bffa17 	ldw	r2,-24(fp)
 4021bb8:	1081000c 	andi	r2,r2,1024
 4021bbc:	10000b26 	beq	r2,zero,4021bec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4021bc0:	e0bff917 	ldw	r2,-28(fp)
 4021bc4:	10800017 	ldw	r2,0(r2)
 4021bc8:	10800104 	addi	r2,r2,4
 4021bcc:	1007883a 	mov	r3,r2
 4021bd0:	e0bff917 	ldw	r2,-28(fp)
 4021bd4:	10800817 	ldw	r2,32(r2)
 4021bd8:	10810014 	ori	r2,r2,1024
 4021bdc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4021be0:	e0bff917 	ldw	r2,-28(fp)
 4021be4:	10000915 	stw	zero,36(r2)
 4021be8:	00000a06 	br	4021c14 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4021bec:	e0bff917 	ldw	r2,-28(fp)
 4021bf0:	10c00917 	ldw	r3,36(r2)
 4021bf4:	00a00034 	movhi	r2,32768
 4021bf8:	10bfff04 	addi	r2,r2,-4
 4021bfc:	10c00536 	bltu	r2,r3,4021c14 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4021c00:	e0bff917 	ldw	r2,-28(fp)
 4021c04:	10800917 	ldw	r2,36(r2)
 4021c08:	10c00044 	addi	r3,r2,1
 4021c0c:	e0bff917 	ldw	r2,-28(fp)
 4021c10:	10c00915 	stw	r3,36(r2)
 4021c14:	d0a70d17 	ldw	r2,-25548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4021c18:	e037883a 	mov	sp,fp
 4021c1c:	df000017 	ldw	fp,0(sp)
 4021c20:	dec00104 	addi	sp,sp,4
 4021c24:	f800283a 	ret

04021c28 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4021c28:	defffd04 	addi	sp,sp,-12
 4021c2c:	df000215 	stw	fp,8(sp)
 4021c30:	df000204 	addi	fp,sp,8
 4021c34:	e13ffe15 	stw	r4,-8(fp)
 4021c38:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4021c3c:	00000506 	br	4021c54 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4021c40:	e0bfff17 	ldw	r2,-4(fp)
 4021c44:	1090000c 	andi	r2,r2,16384
 4021c48:	10000226 	beq	r2,zero,4021c54 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4021c4c:	00bffd44 	movi	r2,-11
 4021c50:	00000b06 	br	4021c80 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4021c54:	e0bffe17 	ldw	r2,-8(fp)
 4021c58:	10c00d17 	ldw	r3,52(r2)
 4021c5c:	e0bffe17 	ldw	r2,-8(fp)
 4021c60:	10800c17 	ldw	r2,48(r2)
 4021c64:	18800526 	beq	r3,r2,4021c7c <altera_avalon_jtag_uart_close+0x54>
 4021c68:	e0bffe17 	ldw	r2,-8(fp)
 4021c6c:	10c00917 	ldw	r3,36(r2)
 4021c70:	e0bffe17 	ldw	r2,-8(fp)
 4021c74:	10800117 	ldw	r2,4(r2)
 4021c78:	18bff136 	bltu	r3,r2,4021c40 <__alt_data_end+0xfffe1c40>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4021c7c:	0005883a 	mov	r2,zero
}
 4021c80:	e037883a 	mov	sp,fp
 4021c84:	df000017 	ldw	fp,0(sp)
 4021c88:	dec00104 	addi	sp,sp,4
 4021c8c:	f800283a 	ret

04021c90 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4021c90:	defffa04 	addi	sp,sp,-24
 4021c94:	df000515 	stw	fp,20(sp)
 4021c98:	df000504 	addi	fp,sp,20
 4021c9c:	e13ffd15 	stw	r4,-12(fp)
 4021ca0:	e17ffe15 	stw	r5,-8(fp)
 4021ca4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4021ca8:	00bff9c4 	movi	r2,-25
 4021cac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4021cb0:	e0bffe17 	ldw	r2,-8(fp)
 4021cb4:	10da8060 	cmpeqi	r3,r2,27137
 4021cb8:	1800031e 	bne	r3,zero,4021cc8 <altera_avalon_jtag_uart_ioctl+0x38>
 4021cbc:	109a80a0 	cmpeqi	r2,r2,27138
 4021cc0:	1000181e 	bne	r2,zero,4021d24 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4021cc4:	00002906 	br	4021d6c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4021cc8:	e0bffd17 	ldw	r2,-12(fp)
 4021ccc:	10c00117 	ldw	r3,4(r2)
 4021cd0:	00a00034 	movhi	r2,32768
 4021cd4:	10bfffc4 	addi	r2,r2,-1
 4021cd8:	18802126 	beq	r3,r2,4021d60 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4021cdc:	e0bfff17 	ldw	r2,-4(fp)
 4021ce0:	10800017 	ldw	r2,0(r2)
 4021ce4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4021ce8:	e0bffc17 	ldw	r2,-16(fp)
 4021cec:	10800090 	cmplti	r2,r2,2
 4021cf0:	1000061e 	bne	r2,zero,4021d0c <altera_avalon_jtag_uart_ioctl+0x7c>
 4021cf4:	e0fffc17 	ldw	r3,-16(fp)
 4021cf8:	00a00034 	movhi	r2,32768
 4021cfc:	10bfffc4 	addi	r2,r2,-1
 4021d00:	18800226 	beq	r3,r2,4021d0c <altera_avalon_jtag_uart_ioctl+0x7c>
 4021d04:	e0bffc17 	ldw	r2,-16(fp)
 4021d08:	00000206 	br	4021d14 <altera_avalon_jtag_uart_ioctl+0x84>
 4021d0c:	00a00034 	movhi	r2,32768
 4021d10:	10bfff84 	addi	r2,r2,-2
 4021d14:	e0fffd17 	ldw	r3,-12(fp)
 4021d18:	18800115 	stw	r2,4(r3)
      rc = 0;
 4021d1c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4021d20:	00000f06 	br	4021d60 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4021d24:	e0bffd17 	ldw	r2,-12(fp)
 4021d28:	10c00117 	ldw	r3,4(r2)
 4021d2c:	00a00034 	movhi	r2,32768
 4021d30:	10bfffc4 	addi	r2,r2,-1
 4021d34:	18800c26 	beq	r3,r2,4021d68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4021d38:	e0bffd17 	ldw	r2,-12(fp)
 4021d3c:	10c00917 	ldw	r3,36(r2)
 4021d40:	e0bffd17 	ldw	r2,-12(fp)
 4021d44:	10800117 	ldw	r2,4(r2)
 4021d48:	1885803a 	cmpltu	r2,r3,r2
 4021d4c:	10c03fcc 	andi	r3,r2,255
 4021d50:	e0bfff17 	ldw	r2,-4(fp)
 4021d54:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4021d58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4021d5c:	00000206 	br	4021d68 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4021d60:	0001883a 	nop
 4021d64:	00000106 	br	4021d6c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4021d68:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4021d6c:	e0bffb17 	ldw	r2,-20(fp)
}
 4021d70:	e037883a 	mov	sp,fp
 4021d74:	df000017 	ldw	fp,0(sp)
 4021d78:	dec00104 	addi	sp,sp,4
 4021d7c:	f800283a 	ret

04021d80 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4021d80:	defff304 	addi	sp,sp,-52
 4021d84:	dfc00c15 	stw	ra,48(sp)
 4021d88:	df000b15 	stw	fp,44(sp)
 4021d8c:	df000b04 	addi	fp,sp,44
 4021d90:	e13ffc15 	stw	r4,-16(fp)
 4021d94:	e17ffd15 	stw	r5,-12(fp)
 4021d98:	e1bffe15 	stw	r6,-8(fp)
 4021d9c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4021da0:	e0bffd17 	ldw	r2,-12(fp)
 4021da4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4021da8:	00004706 	br	4021ec8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4021dac:	e0bffc17 	ldw	r2,-16(fp)
 4021db0:	10800a17 	ldw	r2,40(r2)
 4021db4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4021db8:	e0bffc17 	ldw	r2,-16(fp)
 4021dbc:	10800b17 	ldw	r2,44(r2)
 4021dc0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4021dc4:	e0fff717 	ldw	r3,-36(fp)
 4021dc8:	e0bff817 	ldw	r2,-32(fp)
 4021dcc:	18800536 	bltu	r3,r2,4021de4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4021dd0:	e0fff717 	ldw	r3,-36(fp)
 4021dd4:	e0bff817 	ldw	r2,-32(fp)
 4021dd8:	1885c83a 	sub	r2,r3,r2
 4021ddc:	e0bff615 	stw	r2,-40(fp)
 4021de0:	00000406 	br	4021df4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4021de4:	00c20004 	movi	r3,2048
 4021de8:	e0bff817 	ldw	r2,-32(fp)
 4021dec:	1885c83a 	sub	r2,r3,r2
 4021df0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4021df4:	e0bff617 	ldw	r2,-40(fp)
 4021df8:	10001e26 	beq	r2,zero,4021e74 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4021dfc:	e0fffe17 	ldw	r3,-8(fp)
 4021e00:	e0bff617 	ldw	r2,-40(fp)
 4021e04:	1880022e 	bgeu	r3,r2,4021e10 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4021e08:	e0bffe17 	ldw	r2,-8(fp)
 4021e0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4021e10:	e0bffc17 	ldw	r2,-16(fp)
 4021e14:	10c00e04 	addi	r3,r2,56
 4021e18:	e0bff817 	ldw	r2,-32(fp)
 4021e1c:	1885883a 	add	r2,r3,r2
 4021e20:	e1bff617 	ldw	r6,-40(fp)
 4021e24:	100b883a 	mov	r5,r2
 4021e28:	e13ff517 	ldw	r4,-44(fp)
 4021e2c:	402491c0 	call	402491c <memcpy>
      ptr   += n;
 4021e30:	e0fff517 	ldw	r3,-44(fp)
 4021e34:	e0bff617 	ldw	r2,-40(fp)
 4021e38:	1885883a 	add	r2,r3,r2
 4021e3c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4021e40:	e0fffe17 	ldw	r3,-8(fp)
 4021e44:	e0bff617 	ldw	r2,-40(fp)
 4021e48:	1885c83a 	sub	r2,r3,r2
 4021e4c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4021e50:	e0fff817 	ldw	r3,-32(fp)
 4021e54:	e0bff617 	ldw	r2,-40(fp)
 4021e58:	1885883a 	add	r2,r3,r2
 4021e5c:	10c1ffcc 	andi	r3,r2,2047
 4021e60:	e0bffc17 	ldw	r2,-16(fp)
 4021e64:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4021e68:	e0bffe17 	ldw	r2,-8(fp)
 4021e6c:	00bfcf16 	blt	zero,r2,4021dac <__alt_data_end+0xfffe1dac>
 4021e70:	00000106 	br	4021e78 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4021e74:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4021e78:	e0fff517 	ldw	r3,-44(fp)
 4021e7c:	e0bffd17 	ldw	r2,-12(fp)
 4021e80:	1880141e 	bne	r3,r2,4021ed4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4021e84:	e0bfff17 	ldw	r2,-4(fp)
 4021e88:	1090000c 	andi	r2,r2,16384
 4021e8c:	1000131e 	bne	r2,zero,4021edc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4021e90:	0001883a 	nop
 4021e94:	e0bffc17 	ldw	r2,-16(fp)
 4021e98:	10c00a17 	ldw	r3,40(r2)
 4021e9c:	e0bff717 	ldw	r2,-36(fp)
 4021ea0:	1880051e 	bne	r3,r2,4021eb8 <altera_avalon_jtag_uart_read+0x138>
 4021ea4:	e0bffc17 	ldw	r2,-16(fp)
 4021ea8:	10c00917 	ldw	r3,36(r2)
 4021eac:	e0bffc17 	ldw	r2,-16(fp)
 4021eb0:	10800117 	ldw	r2,4(r2)
 4021eb4:	18bff736 	bltu	r3,r2,4021e94 <__alt_data_end+0xfffe1e94>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4021eb8:	e0bffc17 	ldw	r2,-16(fp)
 4021ebc:	10c00a17 	ldw	r3,40(r2)
 4021ec0:	e0bff717 	ldw	r2,-36(fp)
 4021ec4:	18800726 	beq	r3,r2,4021ee4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4021ec8:	e0bffe17 	ldw	r2,-8(fp)
 4021ecc:	00bfb716 	blt	zero,r2,4021dac <__alt_data_end+0xfffe1dac>
 4021ed0:	00000506 	br	4021ee8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4021ed4:	0001883a 	nop
 4021ed8:	00000306 	br	4021ee8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4021edc:	0001883a 	nop
 4021ee0:	00000106 	br	4021ee8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4021ee4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4021ee8:	e0fff517 	ldw	r3,-44(fp)
 4021eec:	e0bffd17 	ldw	r2,-12(fp)
 4021ef0:	18801826 	beq	r3,r2,4021f54 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4021ef4:	0005303a 	rdctl	r2,status
 4021ef8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4021efc:	e0fffb17 	ldw	r3,-20(fp)
 4021f00:	00bfff84 	movi	r2,-2
 4021f04:	1884703a 	and	r2,r3,r2
 4021f08:	1001703a 	wrctl	status,r2
  
  return context;
 4021f0c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4021f10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4021f14:	e0bffc17 	ldw	r2,-16(fp)
 4021f18:	10800817 	ldw	r2,32(r2)
 4021f1c:	10c00054 	ori	r3,r2,1
 4021f20:	e0bffc17 	ldw	r2,-16(fp)
 4021f24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4021f28:	e0bffc17 	ldw	r2,-16(fp)
 4021f2c:	10800017 	ldw	r2,0(r2)
 4021f30:	10800104 	addi	r2,r2,4
 4021f34:	1007883a 	mov	r3,r2
 4021f38:	e0bffc17 	ldw	r2,-16(fp)
 4021f3c:	10800817 	ldw	r2,32(r2)
 4021f40:	18800035 	stwio	r2,0(r3)
 4021f44:	e0bffa17 	ldw	r2,-24(fp)
 4021f48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4021f4c:	e0bff917 	ldw	r2,-28(fp)
 4021f50:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4021f54:	e0fff517 	ldw	r3,-44(fp)
 4021f58:	e0bffd17 	ldw	r2,-12(fp)
 4021f5c:	18800426 	beq	r3,r2,4021f70 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4021f60:	e0fff517 	ldw	r3,-44(fp)
 4021f64:	e0bffd17 	ldw	r2,-12(fp)
 4021f68:	1885c83a 	sub	r2,r3,r2
 4021f6c:	00000606 	br	4021f88 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4021f70:	e0bfff17 	ldw	r2,-4(fp)
 4021f74:	1090000c 	andi	r2,r2,16384
 4021f78:	10000226 	beq	r2,zero,4021f84 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4021f7c:	00bffd44 	movi	r2,-11
 4021f80:	00000106 	br	4021f88 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4021f84:	00bffec4 	movi	r2,-5
}
 4021f88:	e037883a 	mov	sp,fp
 4021f8c:	dfc00117 	ldw	ra,4(sp)
 4021f90:	df000017 	ldw	fp,0(sp)
 4021f94:	dec00204 	addi	sp,sp,8
 4021f98:	f800283a 	ret

04021f9c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4021f9c:	defff304 	addi	sp,sp,-52
 4021fa0:	dfc00c15 	stw	ra,48(sp)
 4021fa4:	df000b15 	stw	fp,44(sp)
 4021fa8:	df000b04 	addi	fp,sp,44
 4021fac:	e13ffc15 	stw	r4,-16(fp)
 4021fb0:	e17ffd15 	stw	r5,-12(fp)
 4021fb4:	e1bffe15 	stw	r6,-8(fp)
 4021fb8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4021fbc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4021fc0:	e0bffd17 	ldw	r2,-12(fp)
 4021fc4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4021fc8:	00003706 	br	40220a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4021fcc:	e0bffc17 	ldw	r2,-16(fp)
 4021fd0:	10800c17 	ldw	r2,48(r2)
 4021fd4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4021fd8:	e0bffc17 	ldw	r2,-16(fp)
 4021fdc:	10800d17 	ldw	r2,52(r2)
 4021fe0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4021fe4:	e0fff917 	ldw	r3,-28(fp)
 4021fe8:	e0bff517 	ldw	r2,-44(fp)
 4021fec:	1880062e 	bgeu	r3,r2,4022008 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4021ff0:	e0fff517 	ldw	r3,-44(fp)
 4021ff4:	e0bff917 	ldw	r2,-28(fp)
 4021ff8:	1885c83a 	sub	r2,r3,r2
 4021ffc:	10bfffc4 	addi	r2,r2,-1
 4022000:	e0bff615 	stw	r2,-40(fp)
 4022004:	00000b06 	br	4022034 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4022008:	e0bff517 	ldw	r2,-44(fp)
 402200c:	10000526 	beq	r2,zero,4022024 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4022010:	00c20004 	movi	r3,2048
 4022014:	e0bff917 	ldw	r2,-28(fp)
 4022018:	1885c83a 	sub	r2,r3,r2
 402201c:	e0bff615 	stw	r2,-40(fp)
 4022020:	00000406 	br	4022034 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4022024:	00c1ffc4 	movi	r3,2047
 4022028:	e0bff917 	ldw	r2,-28(fp)
 402202c:	1885c83a 	sub	r2,r3,r2
 4022030:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4022034:	e0bff617 	ldw	r2,-40(fp)
 4022038:	10001e26 	beq	r2,zero,40220b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402203c:	e0fffe17 	ldw	r3,-8(fp)
 4022040:	e0bff617 	ldw	r2,-40(fp)
 4022044:	1880022e 	bgeu	r3,r2,4022050 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4022048:	e0bffe17 	ldw	r2,-8(fp)
 402204c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4022050:	e0bffc17 	ldw	r2,-16(fp)
 4022054:	10c20e04 	addi	r3,r2,2104
 4022058:	e0bff917 	ldw	r2,-28(fp)
 402205c:	1885883a 	add	r2,r3,r2
 4022060:	e1bff617 	ldw	r6,-40(fp)
 4022064:	e17ffd17 	ldw	r5,-12(fp)
 4022068:	1009883a 	mov	r4,r2
 402206c:	402491c0 	call	402491c <memcpy>
      ptr   += n;
 4022070:	e0fffd17 	ldw	r3,-12(fp)
 4022074:	e0bff617 	ldw	r2,-40(fp)
 4022078:	1885883a 	add	r2,r3,r2
 402207c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4022080:	e0fffe17 	ldw	r3,-8(fp)
 4022084:	e0bff617 	ldw	r2,-40(fp)
 4022088:	1885c83a 	sub	r2,r3,r2
 402208c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4022090:	e0fff917 	ldw	r3,-28(fp)
 4022094:	e0bff617 	ldw	r2,-40(fp)
 4022098:	1885883a 	add	r2,r3,r2
 402209c:	10c1ffcc 	andi	r3,r2,2047
 40220a0:	e0bffc17 	ldw	r2,-16(fp)
 40220a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 40220a8:	e0bffe17 	ldw	r2,-8(fp)
 40220ac:	00bfc716 	blt	zero,r2,4021fcc <__alt_data_end+0xfffe1fcc>
 40220b0:	00000106 	br	40220b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 40220b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40220b8:	0005303a 	rdctl	r2,status
 40220bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40220c0:	e0fffb17 	ldw	r3,-20(fp)
 40220c4:	00bfff84 	movi	r2,-2
 40220c8:	1884703a 	and	r2,r3,r2
 40220cc:	1001703a 	wrctl	status,r2
  
  return context;
 40220d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 40220d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40220d8:	e0bffc17 	ldw	r2,-16(fp)
 40220dc:	10800817 	ldw	r2,32(r2)
 40220e0:	10c00094 	ori	r3,r2,2
 40220e4:	e0bffc17 	ldw	r2,-16(fp)
 40220e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40220ec:	e0bffc17 	ldw	r2,-16(fp)
 40220f0:	10800017 	ldw	r2,0(r2)
 40220f4:	10800104 	addi	r2,r2,4
 40220f8:	1007883a 	mov	r3,r2
 40220fc:	e0bffc17 	ldw	r2,-16(fp)
 4022100:	10800817 	ldw	r2,32(r2)
 4022104:	18800035 	stwio	r2,0(r3)
 4022108:	e0bffa17 	ldw	r2,-24(fp)
 402210c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022110:	e0bff817 	ldw	r2,-32(fp)
 4022114:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4022118:	e0bffe17 	ldw	r2,-8(fp)
 402211c:	0080100e 	bge	zero,r2,4022160 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 4022120:	e0bfff17 	ldw	r2,-4(fp)
 4022124:	1090000c 	andi	r2,r2,16384
 4022128:	1000101e 	bne	r2,zero,402216c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402212c:	0001883a 	nop
 4022130:	e0bffc17 	ldw	r2,-16(fp)
 4022134:	10c00d17 	ldw	r3,52(r2)
 4022138:	e0bff517 	ldw	r2,-44(fp)
 402213c:	1880051e 	bne	r3,r2,4022154 <altera_avalon_jtag_uart_write+0x1b8>
 4022140:	e0bffc17 	ldw	r2,-16(fp)
 4022144:	10c00917 	ldw	r3,36(r2)
 4022148:	e0bffc17 	ldw	r2,-16(fp)
 402214c:	10800117 	ldw	r2,4(r2)
 4022150:	18bff736 	bltu	r3,r2,4022130 <__alt_data_end+0xfffe2130>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4022154:	e0bffc17 	ldw	r2,-16(fp)
 4022158:	10800917 	ldw	r2,36(r2)
 402215c:	1000051e 	bne	r2,zero,4022174 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 4022160:	e0bffe17 	ldw	r2,-8(fp)
 4022164:	00bfd016 	blt	zero,r2,40220a8 <__alt_data_end+0xfffe20a8>
 4022168:	00000306 	br	4022178 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402216c:	0001883a 	nop
 4022170:	00000106 	br	4022178 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4022174:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4022178:	e0fffd17 	ldw	r3,-12(fp)
 402217c:	e0bff717 	ldw	r2,-36(fp)
 4022180:	18800426 	beq	r3,r2,4022194 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4022184:	e0fffd17 	ldw	r3,-12(fp)
 4022188:	e0bff717 	ldw	r2,-36(fp)
 402218c:	1885c83a 	sub	r2,r3,r2
 4022190:	00000606 	br	40221ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4022194:	e0bfff17 	ldw	r2,-4(fp)
 4022198:	1090000c 	andi	r2,r2,16384
 402219c:	10000226 	beq	r2,zero,40221a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 40221a0:	00bffd44 	movi	r2,-11
 40221a4:	00000106 	br	40221ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40221a8:	00bffec4 	movi	r2,-5
}
 40221ac:	e037883a 	mov	sp,fp
 40221b0:	dfc00117 	ldw	ra,4(sp)
 40221b4:	df000017 	ldw	fp,0(sp)
 40221b8:	dec00204 	addi	sp,sp,8
 40221bc:	f800283a 	ret

040221c0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 40221c0:	defffd04 	addi	sp,sp,-12
 40221c4:	df000215 	stw	fp,8(sp)
 40221c8:	df000204 	addi	fp,sp,8
 40221cc:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 40221d0:	008e84b4 	movhi	r2,14866
 40221d4:	10ac1144 	addi	r2,r2,-20411
 40221d8:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 40221dc:	e0bfff17 	ldw	r2,-4(fp)
 40221e0:	10800a17 	ldw	r2,40(r2)
 40221e4:	10800104 	addi	r2,r2,4
 40221e8:	1007883a 	mov	r3,r2
 40221ec:	e0bffe17 	ldw	r2,-8(fp)
 40221f0:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 40221f4:	e0bfff17 	ldw	r2,-4(fp)
 40221f8:	10800a17 	ldw	r2,40(r2)
 40221fc:	10800104 	addi	r2,r2,4
 4022200:	10800037 	ldwio	r2,0(r2)
 4022204:	1007883a 	mov	r3,r2
 4022208:	e0bffe17 	ldw	r2,-8(fp)
 402220c:	1880081e 	bne	r3,r2,4022230 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 4022210:	e0bfff17 	ldw	r2,-4(fp)
 4022214:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 4022218:	e0bfff17 	ldw	r2,-4(fp)
 402221c:	10800a17 	ldw	r2,40(r2)
 4022220:	10800104 	addi	r2,r2,4
 4022224:	0007883a 	mov	r3,zero
 4022228:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 402222c:	00000306 	br	402223c <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 4022230:	e0bfff17 	ldw	r2,-4(fp)
 4022234:	00c00044 	movi	r3,1
 4022238:	10c00f15 	stw	r3,60(r2)
    }
}
 402223c:	0001883a 	nop
 4022240:	e037883a 	mov	sp,fp
 4022244:	df000017 	ldw	fp,0(sp)
 4022248:	dec00104 	addi	sp,sp,4
 402224c:	f800283a 	ret

04022250 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 4022250:	defffc04 	addi	sp,sp,-16
 4022254:	df000315 	stw	fp,12(sp)
 4022258:	df000304 	addi	fp,sp,12
 402225c:	e13ffe15 	stw	r4,-8(fp)
 4022260:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 4022264:	e0bfff17 	ldw	r2,-4(fp)
 4022268:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 402226c:	e0bffd17 	ldw	r2,-12(fp)
 4022270:	10001026 	beq	r2,zero,40222b4 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 4022274:	e0bffe17 	ldw	r2,-8(fp)
 4022278:	10800a17 	ldw	r2,40(r2)
 402227c:	10800104 	addi	r2,r2,4
 4022280:	1007883a 	mov	r3,r2
 4022284:	e0bffd17 	ldw	r2,-12(fp)
 4022288:	10800104 	addi	r2,r2,4
 402228c:	10800017 	ldw	r2,0(r2)
 4022290:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 4022294:	e0bffe17 	ldw	r2,-8(fp)
 4022298:	10800a17 	ldw	r2,40(r2)
 402229c:	1007883a 	mov	r3,r2
 40222a0:	e0bffd17 	ldw	r2,-12(fp)
 40222a4:	10800017 	ldw	r2,0(r2)
 40222a8:	18800035 	stwio	r2,0(r3)
        return 0;
 40222ac:	0005883a 	mov	r2,zero
 40222b0:	00000106 	br	40222b8 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 40222b4:	00bffa84 	movi	r2,-22
}
 40222b8:	e037883a 	mov	sp,fp
 40222bc:	df000017 	ldw	fp,0(sp)
 40222c0:	dec00104 	addi	sp,sp,4
 40222c4:	f800283a 	ret

040222c8 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 40222c8:	defff504 	addi	sp,sp,-44
 40222cc:	dfc00a15 	stw	ra,40(sp)
 40222d0:	df000915 	stw	fp,36(sp)
 40222d4:	df000904 	addi	fp,sp,36
 40222d8:	e13ffe15 	stw	r4,-8(fp)
 40222dc:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 40222e0:	e0bffe17 	ldw	r2,-8(fp)
 40222e4:	e0bff715 	stw	r2,-36(fp)
    int status = 0;
 40222e8:	e03ff815 	stw	zero,-32(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 40222ec:	e0bff717 	ldw	r2,-36(fp)
 40222f0:	10801017 	ldw	r2,64(r2)
 40222f4:	e0bff915 	stw	r2,-28(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 40222f8:	e0bff717 	ldw	r2,-36(fp)
 40222fc:	10800a17 	ldw	r2,40(r2)
 4022300:	10800304 	addi	r2,r2,12
 4022304:	10800037 	ldwio	r2,0(r2)
 4022308:	1007883a 	mov	r3,r2
 402230c:	00bfff44 	movi	r2,-3
 4022310:	1884703a 	and	r2,r3,r2
 4022314:	e0bffa15 	stw	r2,-24(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4022318:	e0bff717 	ldw	r2,-36(fp)
 402231c:	10800a17 	ldw	r2,40(r2)
 4022320:	10800304 	addi	r2,r2,12
 4022324:	1007883a 	mov	r3,r2
 4022328:	e0bffa17 	ldw	r2,-24(fp)
 402232c:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 4022330:	e0bff917 	ldw	r2,-28(fp)
 4022334:	10002d26 	beq	r2,zero,40223ec <altera_avalon_mailbox_simple_tx_isr+0x124>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 4022338:	e0bff717 	ldw	r2,-36(fp)
 402233c:	10800a17 	ldw	r2,40(r2)
 4022340:	10800104 	addi	r2,r2,4
 4022344:	1007883a 	mov	r3,r2
 4022348:	e0bff917 	ldw	r2,-28(fp)
 402234c:	10800104 	addi	r2,r2,4
 4022350:	10800017 	ldw	r2,0(r2)
 4022354:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 4022358:	e0bff717 	ldw	r2,-36(fp)
 402235c:	10800a17 	ldw	r2,40(r2)
 4022360:	1007883a 	mov	r3,r2
 4022364:	e0bff917 	ldw	r2,-28(fp)
 4022368:	10800017 	ldw	r2,0(r2)
 402236c:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4022370:	e0bff717 	ldw	r2,-36(fp)
 4022374:	10800a17 	ldw	r2,40(r2)
 4022378:	10800204 	addi	r2,r2,8
 402237c:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 4022380:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4022384:	1005d07a 	srai	r2,r2,1
 4022388:	e0bff815 	stw	r2,-32(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 402238c:	e0bff717 	ldw	r2,-36(fp)
 4022390:	10800d17 	ldw	r2,52(r2)
 4022394:	10001126 	beq	r2,zero,40223dc <altera_avalon_mailbox_simple_tx_isr+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022398:	0005303a 	rdctl	r2,status
 402239c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40223a0:	e0fffc17 	ldw	r3,-16(fp)
 40223a4:	00bfff84 	movi	r2,-2
 40223a8:	1884703a 	and	r2,r3,r2
 40223ac:	1001703a 	wrctl	status,r2
  
  return context;
 40223b0:	e0bffc17 	ldw	r2,-16(fp)
        {
            cpu_sr = alt_irq_disable_all();
 40223b4:	e0bffb15 	stw	r2,-20(fp)
  	        (dev->tx_cb)(message, status);
 40223b8:	e0bff717 	ldw	r2,-36(fp)
 40223bc:	10800d17 	ldw	r2,52(r2)
 40223c0:	e17ff817 	ldw	r5,-32(fp)
 40223c4:	e13ff917 	ldw	r4,-28(fp)
 40223c8:	103ee83a 	callr	r2
 40223cc:	e0bffb17 	ldw	r2,-20(fp)
 40223d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40223d4:	e0bffd17 	ldw	r2,-12(fp)
 40223d8:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 40223dc:	e0bff717 	ldw	r2,-36(fp)
 40223e0:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 40223e4:	e0bff717 	ldw	r2,-36(fp)
 40223e8:	10001105 	stb	zero,68(r2)
    }
}
 40223ec:	0001883a 	nop
 40223f0:	e037883a 	mov	sp,fp
 40223f4:	dfc00117 	ldw	ra,4(sp)
 40223f8:	df000017 	ldw	fp,0(sp)
 40223fc:	dec00204 	addi	sp,sp,8
 4022400:	f800283a 	ret

04022404 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 4022404:	defff604 	addi	sp,sp,-40
 4022408:	dfc00915 	stw	ra,36(sp)
 402240c:	df000815 	stw	fp,32(sp)
 4022410:	df000804 	addi	fp,sp,32
 4022414:	e13ffe15 	stw	r4,-8(fp)
 4022418:	e17fff15 	stw	r5,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402241c:	e0bffe17 	ldw	r2,-8(fp)
 4022420:	e0bff815 	stw	r2,-32(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4022424:	e0bff817 	ldw	r2,-32(fp)
 4022428:	10800a17 	ldw	r2,40(r2)
 402242c:	10800104 	addi	r2,r2,4
 4022430:	10800037 	ldwio	r2,0(r2)
 4022434:	e0bffd15 	stw	r2,-12(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4022438:	e0bff817 	ldw	r2,-32(fp)
 402243c:	10800a17 	ldw	r2,40(r2)
 4022440:	10800037 	ldwio	r2,0(r2)
 4022444:	e0bffc15 	stw	r2,-16(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 4022448:	e0bff817 	ldw	r2,-32(fp)
 402244c:	10800e17 	ldw	r2,56(r2)
 4022450:	10001126 	beq	r2,zero,4022498 <altera_avalon_mailbox_simple_rx_isr+0x94>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4022454:	0005303a 	rdctl	r2,status
 4022458:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402245c:	e0fffa17 	ldw	r3,-24(fp)
 4022460:	00bfff84 	movi	r2,-2
 4022464:	1884703a 	and	r2,r3,r2
 4022468:	1001703a 	wrctl	status,r2
  
  return context;
 402246c:	e0bffa17 	ldw	r2,-24(fp)
    {
        cpu_sr = alt_irq_disable_all();
 4022470:	e0bff915 	stw	r2,-28(fp)
        (dev->rx_cb)(inbox);
 4022474:	e0bff817 	ldw	r2,-32(fp)
 4022478:	10800e17 	ldw	r2,56(r2)
 402247c:	e0fffc04 	addi	r3,fp,-16
 4022480:	1809883a 	mov	r4,r3
 4022484:	103ee83a 	callr	r2
 4022488:	e0bff917 	ldw	r2,-28(fp)
 402248c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4022490:	e0bffb17 	ldw	r2,-20(fp)
 4022494:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 4022498:	0001883a 	nop
 402249c:	e037883a 	mov	sp,fp
 40224a0:	dfc00117 	ldw	ra,4(sp)
 40224a4:	df000017 	ldw	fp,0(sp)
 40224a8:	dec00204 	addi	sp,sp,8
 40224ac:	f800283a 	ret

040224b0 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 40224b0:	defffb04 	addi	sp,sp,-20
 40224b4:	dfc00415 	stw	ra,16(sp)
 40224b8:	df000315 	stw	fp,12(sp)
 40224bc:	df000304 	addi	fp,sp,12
 40224c0:	e13ffd15 	stw	r4,-12(fp)
 40224c4:	e17ffe15 	stw	r5,-8(fp)
 40224c8:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 40224cc:	d1600104 	addi	r5,gp,-32764
 40224d0:	e13ffd17 	ldw	r4,-12(fp)
 40224d4:	4023d940 	call	4023d94 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 40224d8:	e0ffff17 	ldw	r3,-4(fp)
 40224dc:	e0bffd17 	ldw	r2,-12(fp)
 40224e0:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 40224e4:	e0fffe17 	ldw	r3,-8(fp)
 40224e8:	e0bffd17 	ldw	r2,-12(fp)
 40224ec:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 40224f0:	e0bffd17 	ldw	r2,-12(fp)
 40224f4:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 40224f8:	e0bffd17 	ldw	r2,-12(fp)
 40224fc:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 4022500:	e0bffd17 	ldw	r2,-12(fp)
 4022504:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 4022508:	e13ffd17 	ldw	r4,-12(fp)
 402250c:	40221c00 	call	40221c0 <altera_avalon_mailbox_identify>
}
 4022510:	0001883a 	nop
 4022514:	e037883a 	mov	sp,fp
 4022518:	dfc00117 	ldw	ra,4(sp)
 402251c:	df000017 	ldw	fp,0(sp)
 4022520:	dec00204 	addi	sp,sp,8
 4022524:	f800283a 	ret

04022528 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 4022528:	defff904 	addi	sp,sp,-28
 402252c:	dfc00615 	stw	ra,24(sp)
 4022530:	df000515 	stw	fp,20(sp)
 4022534:	df000504 	addi	fp,sp,20
 4022538:	e13ffd15 	stw	r4,-12(fp)
 402253c:	e17ffe15 	stw	r5,-8(fp)
 4022540:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 4022544:	d1600104 	addi	r5,gp,-32764
 4022548:	e13ffd17 	ldw	r4,-12(fp)
 402254c:	4023ef80 	call	4023ef8 <alt_find_dev>
 4022550:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 4022554:	e0bffb17 	ldw	r2,-20(fp)
 4022558:	1000021e 	bne	r2,zero,4022564 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 402255c:	0005883a 	mov	r2,zero
 4022560:	00005d06 	br	40226d8 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 4022564:	e0bffb17 	ldw	r2,-20(fp)
 4022568:	10800a17 	ldw	r2,40(r2)
 402256c:	10800304 	addi	r2,r2,12
 4022570:	10800037 	ldwio	r2,0(r2)
 4022574:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 4022578:	e0bffb17 	ldw	r2,-20(fp)
 402257c:	10800f17 	ldw	r2,60(r2)
 4022580:	1000081e 	bne	r2,zero,40225a4 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 4022584:	e0bffb17 	ldw	r2,-20(fp)
 4022588:	10800a17 	ldw	r2,40(r2)
 402258c:	10800304 	addi	r2,r2,12
 4022590:	1009883a 	mov	r4,r2
 4022594:	e0fffc17 	ldw	r3,-16(fp)
 4022598:	00bfff44 	movi	r2,-3
 402259c:	1884703a 	and	r2,r3,r2
 40225a0:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 40225a4:	e0bffb17 	ldw	r2,-20(fp)
 40225a8:	10800f17 	ldw	r2,60(r2)
 40225ac:	10800058 	cmpnei	r2,r2,1
 40225b0:	1000081e 	bne	r2,zero,40225d4 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 40225b4:	e0bffb17 	ldw	r2,-20(fp)
 40225b8:	10800a17 	ldw	r2,40(r2)
 40225bc:	10800304 	addi	r2,r2,12
 40225c0:	1009883a 	mov	r4,r2
 40225c4:	e0fffc17 	ldw	r3,-16(fp)
 40225c8:	00bfff84 	movi	r2,-2
 40225cc:	1884703a 	and	r2,r3,r2
 40225d0:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 40225d4:	e0bffb17 	ldw	r2,-20(fp)
 40225d8:	10800b17 	ldw	r2,44(r2)
 40225dc:	10bfffd8 	cmpnei	r2,r2,-1
 40225e0:	1000021e 	bne	r2,zero,40225ec <altera_avalon_mailbox_open+0xc4>
        return dev;
 40225e4:	e0bffb17 	ldw	r2,-20(fp)
 40225e8:	00003b06 	br	40226d8 <altera_avalon_mailbox_open+0x1b0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 40225ec:	e0bffe17 	ldw	r2,-8(fp)
 40225f0:	1000041e 	bne	r2,zero,4022604 <altera_avalon_mailbox_open+0xdc>
 40225f4:	e0bfff17 	ldw	r2,-4(fp)
 40225f8:	1000021e 	bne	r2,zero,4022604 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 40225fc:	e0bffb17 	ldw	r2,-20(fp)
 4022600:	00003506 	br	40226d8 <altera_avalon_mailbox_open+0x1b0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4022604:	e0bffb17 	ldw	r2,-20(fp)
 4022608:	10800f17 	ldw	r2,60(r2)
 402260c:	1000021e 	bne	r2,zero,4022618 <altera_avalon_mailbox_open+0xf0>
 4022610:	e0bfff17 	ldw	r2,-4(fp)
 4022614:	1000061e 	bne	r2,zero,4022630 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4022618:	e0bffb17 	ldw	r2,-20(fp)
 402261c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 4022620:	10800058 	cmpnei	r2,r2,1
 4022624:	1000041e 	bne	r2,zero,4022638 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 4022628:	e0bffe17 	ldw	r2,-8(fp)
 402262c:	10000226 	beq	r2,zero,4022638 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 4022630:	0005883a 	mov	r2,zero
 4022634:	00002806 	br	40226d8 <altera_avalon_mailbox_open+0x1b0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 4022638:	e0bffb17 	ldw	r2,-20(fp)
 402263c:	e0fffe17 	ldw	r3,-8(fp)
 4022640:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 4022644:	e0bffb17 	ldw	r2,-20(fp)
 4022648:	e0ffff17 	ldw	r3,-4(fp)
 402264c:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 4022650:	e0bffb17 	ldw	r2,-20(fp)
 4022654:	10800f17 	ldw	r2,60(r2)
 4022658:	1000071e 	bne	r2,zero,4022678 <altera_avalon_mailbox_open+0x150>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
 402265c:	e0bffb17 	ldw	r2,-20(fp)
 4022660:	10800b17 	ldw	r2,44(r2)
 4022664:	018100b4 	movhi	r6,1026
 4022668:	3188b204 	addi	r6,r6,8904
 402266c:	e17ffb17 	ldw	r5,-20(fp)
 4022670:	1009883a 	mov	r4,r2
 4022674:	40210c40 	call	40210c4 <alt_irq_register>
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 4022678:	e0bffb17 	ldw	r2,-20(fp)
 402267c:	10800f17 	ldw	r2,60(r2)
 4022680:	10800058 	cmpnei	r2,r2,1
 4022684:	1000131e 	bne	r2,zero,40226d4 <altera_avalon_mailbox_open+0x1ac>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
 4022688:	e0bffb17 	ldw	r2,-20(fp)
 402268c:	10800b17 	ldw	r2,44(r2)
 4022690:	018100b4 	movhi	r6,1026
 4022694:	31890104 	addi	r6,r6,9220
 4022698:	e17ffb17 	ldw	r5,-20(fp)
 402269c:	1009883a 	mov	r4,r2
 40226a0:	40210c40 	call	40210c4 <alt_irq_register>
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 40226a4:	e0bffb17 	ldw	r2,-20(fp)
 40226a8:	10800a17 	ldw	r2,40(r2)
 40226ac:	10800304 	addi	r2,r2,12
 40226b0:	10800037 	ldwio	r2,0(r2)
 40226b4:	10800054 	ori	r2,r2,1
 40226b8:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 40226bc:	e0bffb17 	ldw	r2,-20(fp)
 40226c0:	10800a17 	ldw	r2,40(r2)
 40226c4:	10800304 	addi	r2,r2,12
 40226c8:	1007883a 	mov	r3,r2
 40226cc:	e0bffc17 	ldw	r2,-16(fp)
 40226d0:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 40226d4:	e0bffb17 	ldw	r2,-20(fp)
}
 40226d8:	e037883a 	mov	sp,fp
 40226dc:	dfc00117 	ldw	ra,4(sp)
 40226e0:	df000017 	ldw	fp,0(sp)
 40226e4:	dec00204 	addi	sp,sp,8
 40226e8:	f800283a 	ret

040226ec <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 40226ec:	defffc04 	addi	sp,sp,-16
 40226f0:	dfc00315 	stw	ra,12(sp)
 40226f4:	df000215 	stw	fp,8(sp)
 40226f8:	df000204 	addi	fp,sp,8
 40226fc:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 4022700:	e0bfff17 	ldw	r2,-4(fp)
 4022704:	10003526 	beq	r2,zero,40227dc <altera_avalon_mailbox_close+0xf0>
 4022708:	e0bfff17 	ldw	r2,-4(fp)
 402270c:	10800b17 	ldw	r2,44(r2)
 4022710:	10bfffe0 	cmpeqi	r2,r2,-1
 4022714:	1000311e 	bne	r2,zero,40227dc <altera_avalon_mailbox_close+0xf0>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 4022718:	e0bfff17 	ldw	r2,-4(fp)
 402271c:	10800f17 	ldw	r2,60(r2)
 4022720:	10000e1e 	bne	r2,zero,402275c <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 4022724:	e0bfff17 	ldw	r2,-4(fp)
 4022728:	10800a17 	ldw	r2,40(r2)
 402272c:	10800304 	addi	r2,r2,12
 4022730:	10800037 	ldwio	r2,0(r2)
 4022734:	1007883a 	mov	r3,r2
 4022738:	00bfff44 	movi	r2,-3
 402273c:	1884703a 	and	r2,r3,r2
 4022740:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4022744:	e0bfff17 	ldw	r2,-4(fp)
 4022748:	10800a17 	ldw	r2,40(r2)
 402274c:	10800304 	addi	r2,r2,12
 4022750:	1007883a 	mov	r3,r2
 4022754:	e0bffe17 	ldw	r2,-8(fp)
 4022758:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 402275c:	e0bfff17 	ldw	r2,-4(fp)
 4022760:	10800f17 	ldw	r2,60(r2)
 4022764:	10800058 	cmpnei	r2,r2,1
 4022768:	10000e1e 	bne	r2,zero,40227a4 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402276c:	e0bfff17 	ldw	r2,-4(fp)
 4022770:	10800a17 	ldw	r2,40(r2)
 4022774:	10800304 	addi	r2,r2,12
 4022778:	10800037 	ldwio	r2,0(r2)
 402277c:	1007883a 	mov	r3,r2
 4022780:	00bfff84 	movi	r2,-2
 4022784:	1884703a 	and	r2,r3,r2
 4022788:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402278c:	e0bfff17 	ldw	r2,-4(fp)
 4022790:	10800a17 	ldw	r2,40(r2)
 4022794:	10800304 	addi	r2,r2,12
 4022798:	1007883a 	mov	r3,r2
 402279c:	e0bffe17 	ldw	r2,-8(fp)
 40227a0:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 40227a4:	e0bfff17 	ldw	r2,-4(fp)
 40227a8:	10800b17 	ldw	r2,44(r2)
 40227ac:	10bfffe0 	cmpeqi	r2,r2,-1
 40227b0:	1000061e 	bne	r2,zero,40227cc <altera_avalon_mailbox_close+0xe0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
                              dev, NULL);
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
 40227b4:	e0bfff17 	ldw	r2,-4(fp)
 40227b8:	10800b17 	ldw	r2,44(r2)
 40227bc:	000d883a 	mov	r6,zero
 40227c0:	e17fff17 	ldw	r5,-4(fp)
 40227c4:	1009883a 	mov	r4,r2
 40227c8:	40210c40 	call	40210c4 <alt_irq_register>
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 40227cc:	e0bfff17 	ldw	r2,-4(fp)
 40227d0:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 40227d4:	e0bfff17 	ldw	r2,-4(fp)
 40227d8:	10000e15 	stw	zero,56(r2)
    }
}
 40227dc:	0001883a 	nop
 40227e0:	e037883a 	mov	sp,fp
 40227e4:	dfc00117 	ldw	ra,4(sp)
 40227e8:	df000017 	ldw	fp,0(sp)
 40227ec:	dec00204 	addi	sp,sp,8
 40227f0:	f800283a 	ret

040227f4 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 40227f4:	defffd04 	addi	sp,sp,-12
 40227f8:	df000215 	stw	fp,8(sp)
 40227fc:	df000204 	addi	fp,sp,8
 4022800:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 4022804:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 4022808:	e0bfff17 	ldw	r2,-4(fp)
 402280c:	10800a17 	ldw	r2,40(r2)
 4022810:	10800204 	addi	r2,r2,8
 4022814:	10800037 	ldwio	r2,0(r2)
 4022818:	108000cc 	andi	r2,r2,3
 402281c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 4022820:	e0bfff17 	ldw	r2,-4(fp)
 4022824:	10800f17 	ldw	r2,60(r2)
 4022828:	1000041e 	bne	r2,zero,402283c <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402282c:	e0bffe17 	ldw	r2,-8(fp)
 4022830:	1080008c 	andi	r2,r2,2
 4022834:	1004d07a 	srli	r2,r2,1
 4022838:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 402283c:	e0bfff17 	ldw	r2,-4(fp)
 4022840:	10800f17 	ldw	r2,60(r2)
 4022844:	10800058 	cmpnei	r2,r2,1
 4022848:	1000031e 	bne	r2,zero,4022858 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 402284c:	e0bffe17 	ldw	r2,-8(fp)
 4022850:	1080004c 	andi	r2,r2,1
 4022854:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 4022858:	e0bffe17 	ldw	r2,-8(fp)
}
 402285c:	e037883a 	mov	sp,fp
 4022860:	df000017 	ldw	fp,0(sp)
 4022864:	dec00104 	addi	sp,sp,4
 4022868:	f800283a 	ret

0402286c <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 402286c:	defff704 	addi	sp,sp,-36
 4022870:	dfc00815 	stw	ra,32(sp)
 4022874:	df000715 	stw	fp,28(sp)
 4022878:	df000704 	addi	fp,sp,28
 402287c:	e13ffc15 	stw	r4,-16(fp)
 4022880:	e17ffd15 	stw	r5,-12(fp)
 4022884:	e1bffe15 	stw	r6,-8(fp)
 4022888:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 402288c:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 4022890:	e0bffc17 	ldw	r2,-16(fp)
 4022894:	10801103 	ldbu	r2,68(r2)
 4022898:	10803fcc 	andi	r2,r2,255
 402289c:	1000061e 	bne	r2,zero,40228b8 <altera_avalon_mailbox_send+0x4c>
 40228a0:	e0bffc17 	ldw	r2,-16(fp)
 40228a4:	10800a17 	ldw	r2,40(r2)
 40228a8:	10800204 	addi	r2,r2,8
 40228ac:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 40228b0:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 40228b4:	10000226 	beq	r2,zero,40228c0 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 40228b8:	00bfffc4 	movi	r2,-1
 40228bc:	00003a06 	br	40229a8 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 40228c0:	e0bffc17 	ldw	r2,-16(fp)
 40228c4:	e0fffd17 	ldw	r3,-12(fp)
 40228c8:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 40228cc:	e0bffc17 	ldw	r2,-16(fp)
 40228d0:	00c00044 	movi	r3,1
 40228d4:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 40228d8:	e0bffc17 	ldw	r2,-16(fp)
 40228dc:	10800b17 	ldw	r2,44(r2)
 40228e0:	10bfffe0 	cmpeqi	r2,r2,-1
 40228e4:	1000031e 	bne	r2,zero,40228f4 <altera_avalon_mailbox_send+0x88>
 40228e8:	e0bfff17 	ldw	r2,-4(fp)
 40228ec:	10800058 	cmpnei	r2,r2,1
 40228f0:	1000201e 	bne	r2,zero,4022974 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 40228f4:	e0bffe17 	ldw	r2,-8(fp)
 40228f8:	1000061e 	bne	r2,zero,4022914 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 40228fc:	e13ffc17 	ldw	r4,-16(fp)
 4022900:	40227f40 	call	40227f4 <altera_avalon_mailbox_status>
 4022904:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 4022908:	e0bffb17 	ldw	r2,-20(fp)
 402290c:	103ffb1e 	bne	r2,zero,40228fc <__alt_data_end+0xfffe28fc>
 4022910:	00000e06 	br	402294c <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 4022914:	e13ffc17 	ldw	r4,-16(fp)
 4022918:	40227f40 	call	40227f4 <altera_avalon_mailbox_status>
 402291c:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 4022920:	e0bffe17 	ldw	r2,-8(fp)
 4022924:	10bfffc4 	addi	r2,r2,-1
 4022928:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 402292c:	e0bffb17 	ldw	r2,-20(fp)
 4022930:	10000226 	beq	r2,zero,402293c <altera_avalon_mailbox_send+0xd0>
 4022934:	e0bffe17 	ldw	r2,-8(fp)
 4022938:	103ff61e 	bne	r2,zero,4022914 <__alt_data_end+0xfffe2914>
            if (timeout == 0)
 402293c:	e0bffe17 	ldw	r2,-8(fp)
 4022940:	1000021e 	bne	r2,zero,402294c <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 4022944:	00bff084 	movi	r2,-62
 4022948:	00001706 	br	40229a8 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 402294c:	e17ffd17 	ldw	r5,-12(fp)
 4022950:	e13ffc17 	ldw	r4,-16(fp)
 4022954:	40222500 	call	4022250 <altera_avalon_mailbox_post>
 4022958:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402295c:	e0bffc17 	ldw	r2,-16(fp)
 4022960:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 4022964:	e0bffc17 	ldw	r2,-16(fp)
 4022968:	10001105 	stb	zero,68(r2)
        return status;
 402296c:	e0bff917 	ldw	r2,-28(fp)
 4022970:	00000d06 	br	40229a8 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 4022974:	e0bffc17 	ldw	r2,-16(fp)
 4022978:	10800a17 	ldw	r2,40(r2)
 402297c:	10800304 	addi	r2,r2,12
 4022980:	10800037 	ldwio	r2,0(r2)
 4022984:	10800094 	ori	r2,r2,2
 4022988:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402298c:	e0bffc17 	ldw	r2,-16(fp)
 4022990:	10800a17 	ldw	r2,40(r2)
 4022994:	10800304 	addi	r2,r2,12
 4022998:	1007883a 	mov	r3,r2
 402299c:	e0bffa17 	ldw	r2,-24(fp)
 40229a0:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 40229a4:	0005883a 	mov	r2,zero
}
 40229a8:	e037883a 	mov	sp,fp
 40229ac:	dfc00117 	ldw	ra,4(sp)
 40229b0:	df000017 	ldw	fp,0(sp)
 40229b4:	dec00204 	addi	sp,sp,8
 40229b8:	f800283a 	ret

040229bc <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 40229bc:	defff904 	addi	sp,sp,-28
 40229c0:	dfc00615 	stw	ra,24(sp)
 40229c4:	df000515 	stw	fp,20(sp)
 40229c8:	df000504 	addi	fp,sp,20
 40229cc:	e13ffd15 	stw	r4,-12(fp)
 40229d0:	e17ffe15 	stw	r5,-8(fp)
 40229d4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 40229d8:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 40229dc:	e0bffd17 	ldw	r2,-12(fp)
 40229e0:	10003a26 	beq	r2,zero,4022acc <altera_avalon_mailbox_retrieve_poll+0x110>
 40229e4:	e0bffe17 	ldw	r2,-8(fp)
 40229e8:	10003826 	beq	r2,zero,4022acc <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 40229ec:	e0bffd17 	ldw	r2,-12(fp)
 40229f0:	10800a17 	ldw	r2,40(r2)
 40229f4:	10800304 	addi	r2,r2,12
 40229f8:	10800037 	ldwio	r2,0(r2)
 40229fc:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 4022a00:	e0bffd17 	ldw	r2,-12(fp)
 4022a04:	10800a17 	ldw	r2,40(r2)
 4022a08:	10800304 	addi	r2,r2,12
 4022a0c:	1009883a 	mov	r4,r2
 4022a10:	e0fffc17 	ldw	r3,-16(fp)
 4022a14:	00bfff84 	movi	r2,-2
 4022a18:	1884703a 	and	r2,r3,r2
 4022a1c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 4022a20:	e0bfff17 	ldw	r2,-4(fp)
 4022a24:	1000061e 	bne	r2,zero,4022a40 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 4022a28:	e13ffd17 	ldw	r4,-12(fp)
 4022a2c:	40227f40 	call	40227f4 <altera_avalon_mailbox_status>
 4022a30:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 4022a34:	e0bffb17 	ldw	r2,-20(fp)
 4022a38:	103ffb26 	beq	r2,zero,4022a28 <__alt_data_end+0xfffe2a28>
 4022a3c:	00000a06 	br	4022a68 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 4022a40:	e13ffd17 	ldw	r4,-12(fp)
 4022a44:	40227f40 	call	40227f4 <altera_avalon_mailbox_status>
 4022a48:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 4022a4c:	e0bfff17 	ldw	r2,-4(fp)
 4022a50:	10bfffc4 	addi	r2,r2,-1
 4022a54:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 4022a58:	e0bffb17 	ldw	r2,-20(fp)
 4022a5c:	1000021e 	bne	r2,zero,4022a68 <altera_avalon_mailbox_retrieve_poll+0xac>
 4022a60:	e0bfff17 	ldw	r2,-4(fp)
 4022a64:	103ff61e 	bne	r2,zero,4022a40 <__alt_data_end+0xfffe2a40>
        }

        /* if timeout, status remain 0 */
        if (status)
 4022a68:	e0bffb17 	ldw	r2,-20(fp)
 4022a6c:	10000d26 	beq	r2,zero,4022aa4 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 4022a70:	e0bffe17 	ldw	r2,-8(fp)
 4022a74:	10800104 	addi	r2,r2,4
 4022a78:	e0fffd17 	ldw	r3,-12(fp)
 4022a7c:	18c00a17 	ldw	r3,40(r3)
 4022a80:	18c00104 	addi	r3,r3,4
 4022a84:	18c00037 	ldwio	r3,0(r3)
 4022a88:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 4022a8c:	e0bffd17 	ldw	r2,-12(fp)
 4022a90:	10800a17 	ldw	r2,40(r2)
 4022a94:	10800037 	ldwio	r2,0(r2)
 4022a98:	1007883a 	mov	r3,r2
 4022a9c:	e0bffe17 	ldw	r2,-8(fp)
 4022aa0:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 4022aa4:	e0bffd17 	ldw	r2,-12(fp)
 4022aa8:	10800a17 	ldw	r2,40(r2)
 4022aac:	10800304 	addi	r2,r2,12
 4022ab0:	1007883a 	mov	r3,r2
 4022ab4:	e0bffc17 	ldw	r2,-16(fp)
 4022ab8:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 4022abc:	e0bffb17 	ldw	r2,-20(fp)
 4022ac0:	10000226 	beq	r2,zero,4022acc <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 4022ac4:	0005883a 	mov	r2,zero
 4022ac8:	00000606 	br	4022ae4 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 4022acc:	e0bffe17 	ldw	r2,-8(fp)
 4022ad0:	10800104 	addi	r2,r2,4
 4022ad4:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 4022ad8:	e0bffe17 	ldw	r2,-8(fp)
 4022adc:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 4022ae0:	00bffa84 	movi	r2,-22
}
 4022ae4:	e037883a 	mov	sp,fp
 4022ae8:	dfc00117 	ldw	ra,4(sp)
 4022aec:	df000017 	ldw	fp,0(sp)
 4022af0:	dec00204 	addi	sp,sp,8
 4022af4:	f800283a 	ret

04022af8 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 4022af8:	defffc04 	addi	sp,sp,-16
 4022afc:	dfc00315 	stw	ra,12(sp)
 4022b00:	df000215 	stw	fp,8(sp)
 4022b04:	df000204 	addi	fp,sp,8
 4022b08:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 4022b0c:	d1600504 	addi	r5,gp,-32748
 4022b10:	e13fff17 	ldw	r4,-4(fp)
 4022b14:	4023ef80 	call	4023ef8 <alt_find_dev>
 4022b18:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 4022b1c:	e0bffe17 	ldw	r2,-8(fp)
}
 4022b20:	e037883a 	mov	sp,fp
 4022b24:	dfc00117 	ldw	ra,4(sp)
 4022b28:	df000017 	ldw	fp,0(sp)
 4022b2c:	dec00204 	addi	sp,sp,8
 4022b30:	f800283a 	ret

04022b34 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 4022b34:	defffd04 	addi	sp,sp,-12
 4022b38:	df000215 	stw	fp,8(sp)
 4022b3c:	df000204 	addi	fp,sp,8
 4022b40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022b44:	e0bfff17 	ldw	r2,-4(fp)
 4022b48:	10800a17 	ldw	r2,40(r2)
 4022b4c:	10800037 	ldwio	r2,0(r2)
 4022b50:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 4022b54:	e0bffe17 	ldw	r2,-8(fp)
 4022b58:	10800054 	ori	r2,r2,1
 4022b5c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022b60:	e0bfff17 	ldw	r2,-4(fp)
 4022b64:	10800a17 	ldw	r2,40(r2)
 4022b68:	1007883a 	mov	r3,r2
 4022b6c:	e0bffe17 	ldw	r2,-8(fp)
 4022b70:	18800035 	stwio	r2,0(r3)
}
 4022b74:	0001883a 	nop
 4022b78:	e037883a 	mov	sp,fp
 4022b7c:	df000017 	ldw	fp,0(sp)
 4022b80:	dec00104 	addi	sp,sp,4
 4022b84:	f800283a 	ret

04022b88 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 4022b88:	defffd04 	addi	sp,sp,-12
 4022b8c:	df000215 	stw	fp,8(sp)
 4022b90:	df000204 	addi	fp,sp,8
 4022b94:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022b98:	e0bfff17 	ldw	r2,-4(fp)
 4022b9c:	10800a17 	ldw	r2,40(r2)
 4022ba0:	10800037 	ldwio	r2,0(r2)
 4022ba4:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 4022ba8:	e0fffe17 	ldw	r3,-8(fp)
 4022bac:	00bfff84 	movi	r2,-2
 4022bb0:	1884703a 	and	r2,r3,r2
 4022bb4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022bb8:	e0bfff17 	ldw	r2,-4(fp)
 4022bbc:	10800a17 	ldw	r2,40(r2)
 4022bc0:	1007883a 	mov	r3,r2
 4022bc4:	e0bffe17 	ldw	r2,-8(fp)
 4022bc8:	18800035 	stwio	r2,0(r3)
}
 4022bcc:	0001883a 	nop
 4022bd0:	e037883a 	mov	sp,fp
 4022bd4:	df000017 	ldw	fp,0(sp)
 4022bd8:	dec00104 	addi	sp,sp,4
 4022bdc:	f800283a 	ret

04022be0 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 4022be0:	defffd04 	addi	sp,sp,-12
 4022be4:	df000215 	stw	fp,8(sp)
 4022be8:	df000204 	addi	fp,sp,8
 4022bec:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022bf0:	e0bfff17 	ldw	r2,-4(fp)
 4022bf4:	10800a17 	ldw	r2,40(r2)
 4022bf8:	10800037 	ldwio	r2,0(r2)
 4022bfc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 4022c00:	e0bffe17 	ldw	r2,-8(fp)
 4022c04:	10800094 	ori	r2,r2,2
 4022c08:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022c0c:	e0bfff17 	ldw	r2,-4(fp)
 4022c10:	10800a17 	ldw	r2,40(r2)
 4022c14:	1007883a 	mov	r3,r2
 4022c18:	e0bffe17 	ldw	r2,-8(fp)
 4022c1c:	18800035 	stwio	r2,0(r3)
}
 4022c20:	0001883a 	nop
 4022c24:	e037883a 	mov	sp,fp
 4022c28:	df000017 	ldw	fp,0(sp)
 4022c2c:	dec00104 	addi	sp,sp,4
 4022c30:	f800283a 	ret

04022c34 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 4022c34:	defffd04 	addi	sp,sp,-12
 4022c38:	df000215 	stw	fp,8(sp)
 4022c3c:	df000204 	addi	fp,sp,8
 4022c40:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022c44:	e0bfff17 	ldw	r2,-4(fp)
 4022c48:	10800a17 	ldw	r2,40(r2)
 4022c4c:	10800037 	ldwio	r2,0(r2)
 4022c50:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 4022c54:	e0fffe17 	ldw	r3,-8(fp)
 4022c58:	00bfff44 	movi	r2,-3
 4022c5c:	1884703a 	and	r2,r3,r2
 4022c60:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022c64:	e0bfff17 	ldw	r2,-4(fp)
 4022c68:	10800a17 	ldw	r2,40(r2)
 4022c6c:	1007883a 	mov	r3,r2
 4022c70:	e0bffe17 	ldw	r2,-8(fp)
 4022c74:	18800035 	stwio	r2,0(r3)
}
 4022c78:	0001883a 	nop
 4022c7c:	e037883a 	mov	sp,fp
 4022c80:	df000017 	ldw	fp,0(sp)
 4022c84:	dec00104 	addi	sp,sp,4
 4022c88:	f800283a 	ret

04022c8c <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 4022c8c:	defffd04 	addi	sp,sp,-12
 4022c90:	df000215 	stw	fp,8(sp)
 4022c94:	df000204 	addi	fp,sp,8
 4022c98:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022c9c:	e0bfff17 	ldw	r2,-4(fp)
 4022ca0:	10800a17 	ldw	r2,40(r2)
 4022ca4:	10800037 	ldwio	r2,0(r2)
 4022ca8:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 4022cac:	e0bffe17 	ldw	r2,-8(fp)
 4022cb0:	1080400c 	andi	r2,r2,256
 4022cb4:	1004c03a 	cmpne	r2,r2,zero
 4022cb8:	10803fcc 	andi	r2,r2,255
}
 4022cbc:	e037883a 	mov	sp,fp
 4022cc0:	df000017 	ldw	fp,0(sp)
 4022cc4:	dec00104 	addi	sp,sp,4
 4022cc8:	f800283a 	ret

04022ccc <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 4022ccc:	defffd04 	addi	sp,sp,-12
 4022cd0:	df000215 	stw	fp,8(sp)
 4022cd4:	df000204 	addi	fp,sp,8
 4022cd8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022cdc:	e0bfff17 	ldw	r2,-4(fp)
 4022ce0:	10800a17 	ldw	r2,40(r2)
 4022ce4:	10800037 	ldwio	r2,0(r2)
 4022ce8:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 4022cec:	e0bffe17 	ldw	r2,-8(fp)
 4022cf0:	1080800c 	andi	r2,r2,512
 4022cf4:	1004c03a 	cmpne	r2,r2,zero
 4022cf8:	10803fcc 	andi	r2,r2,255
}
 4022cfc:	e037883a 	mov	sp,fp
 4022d00:	df000017 	ldw	fp,0(sp)
 4022d04:	dec00104 	addi	sp,sp,4
 4022d08:	f800283a 	ret

04022d0c <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 4022d0c:	defffd04 	addi	sp,sp,-12
 4022d10:	df000215 	stw	fp,8(sp)
 4022d14:	df000204 	addi	fp,sp,8
 4022d18:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 4022d1c:	e0bfff17 	ldw	r2,-4(fp)
 4022d20:	10800a17 	ldw	r2,40(r2)
 4022d24:	10800037 	ldwio	r2,0(r2)
 4022d28:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 4022d2c:	e0bffe17 	ldw	r2,-8(fp)
 4022d30:	10800114 	ori	r2,r2,4
 4022d34:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 4022d38:	e0bffe17 	ldw	r2,-8(fp)
 4022d3c:	10800214 	ori	r2,r2,8
 4022d40:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022d44:	e0bfff17 	ldw	r2,-4(fp)
 4022d48:	10800a17 	ldw	r2,40(r2)
 4022d4c:	1007883a 	mov	r3,r2
 4022d50:	e0bffe17 	ldw	r2,-8(fp)
 4022d54:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 4022d58:	e0fffe17 	ldw	r3,-8(fp)
 4022d5c:	00bffec4 	movi	r2,-5
 4022d60:	1884703a 	and	r2,r3,r2
 4022d64:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 4022d68:	e0fffe17 	ldw	r3,-8(fp)
 4022d6c:	00bffdc4 	movi	r2,-9
 4022d70:	1884703a 	and	r2,r3,r2
 4022d74:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 4022d78:	e0bfff17 	ldw	r2,-4(fp)
 4022d7c:	10800a17 	ldw	r2,40(r2)
 4022d80:	1007883a 	mov	r3,r2
 4022d84:	e0bffe17 	ldw	r2,-8(fp)
 4022d88:	18800035 	stwio	r2,0(r3)
}
 4022d8c:	0001883a 	nop
 4022d90:	e037883a 	mov	sp,fp
 4022d94:	df000017 	ldw	fp,0(sp)
 4022d98:	dec00104 	addi	sp,sp,4
 4022d9c:	f800283a 	ret

04022da0 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 4022da0:	defffc04 	addi	sp,sp,-16
 4022da4:	df000315 	stw	fp,12(sp)
 4022da8:	df000304 	addi	fp,sp,12
 4022dac:	e13ffe15 	stw	r4,-8(fp)
 4022db0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4022db4:	e0bffe17 	ldw	r2,-8(fp)
 4022db8:	10800a17 	ldw	r2,40(r2)
 4022dbc:	10800104 	addi	r2,r2,4
 4022dc0:	10800037 	ldwio	r2,0(r2)
 4022dc4:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 4022dc8:	e0bfff17 	ldw	r2,-4(fp)
 4022dcc:	1000041e 	bne	r2,zero,4022de0 <alt_up_audio_read_fifo_avail+0x40>
 4022dd0:	e0bffd17 	ldw	r2,-12(fp)
 4022dd4:	10bfc00c 	andi	r2,r2,65280
 4022dd8:	1004d23a 	srli	r2,r2,8
 4022ddc:	00000206 	br	4022de8 <alt_up_audio_read_fifo_avail+0x48>
 4022de0:	e0bffd17 	ldw	r2,-12(fp)
 4022de4:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4022de8:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 4022dec:	e0bffd17 	ldw	r2,-12(fp)
}
 4022df0:	e037883a 	mov	sp,fp
 4022df4:	df000017 	ldw	fp,0(sp)
 4022df8:	dec00104 	addi	sp,sp,4
 4022dfc:	f800283a 	ret

04022e00 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4022e00:	defffa04 	addi	sp,sp,-24
 4022e04:	dfc00515 	stw	ra,20(sp)
 4022e08:	df000415 	stw	fp,16(sp)
 4022e0c:	df000404 	addi	fp,sp,16
 4022e10:	e13ffd15 	stw	r4,-12(fp)
 4022e14:	e17ffe15 	stw	r5,-8(fp)
 4022e18:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 4022e1c:	01400044 	movi	r5,1
 4022e20:	e13ffd17 	ldw	r4,-12(fp)
 4022e24:	4022da00 	call	4022da0 <alt_up_audio_read_fifo_avail>
 4022e28:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4022e2c:	e0bffc17 	ldw	r2,-16(fp)
 4022e30:	10801868 	cmpgeui	r2,r2,97
 4022e34:	1000021e 	bne	r2,zero,4022e40 <alt_up_audio_record_r+0x40>
		return 0;
 4022e38:	0005883a 	mov	r2,zero
 4022e3c:	00000506 	br	4022e54 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4022e40:	01c00044 	movi	r7,1
 4022e44:	e1bfff17 	ldw	r6,-4(fp)
 4022e48:	e17ffe17 	ldw	r5,-8(fp)
 4022e4c:	e13ffd17 	ldw	r4,-12(fp)
 4022e50:	40230000 	call	4023000 <alt_up_audio_read_fifo>
}
 4022e54:	e037883a 	mov	sp,fp
 4022e58:	dfc00117 	ldw	ra,4(sp)
 4022e5c:	df000017 	ldw	fp,0(sp)
 4022e60:	dec00204 	addi	sp,sp,8
 4022e64:	f800283a 	ret

04022e68 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4022e68:	defffa04 	addi	sp,sp,-24
 4022e6c:	dfc00515 	stw	ra,20(sp)
 4022e70:	df000415 	stw	fp,16(sp)
 4022e74:	df000404 	addi	fp,sp,16
 4022e78:	e13ffd15 	stw	r4,-12(fp)
 4022e7c:	e17ffe15 	stw	r5,-8(fp)
 4022e80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 4022e84:	000b883a 	mov	r5,zero
 4022e88:	e13ffd17 	ldw	r4,-12(fp)
 4022e8c:	4022da00 	call	4022da0 <alt_up_audio_read_fifo_avail>
 4022e90:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 4022e94:	e0bffc17 	ldw	r2,-16(fp)
 4022e98:	10801868 	cmpgeui	r2,r2,97
 4022e9c:	1000021e 	bne	r2,zero,4022ea8 <alt_up_audio_record_l+0x40>
		return 0;
 4022ea0:	0005883a 	mov	r2,zero
 4022ea4:	00000506 	br	4022ebc <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 4022ea8:	000f883a 	mov	r7,zero
 4022eac:	e1bfff17 	ldw	r6,-4(fp)
 4022eb0:	e17ffe17 	ldw	r5,-8(fp)
 4022eb4:	e13ffd17 	ldw	r4,-12(fp)
 4022eb8:	40230000 	call	4023000 <alt_up_audio_read_fifo>
}
 4022ebc:	e037883a 	mov	sp,fp
 4022ec0:	dfc00117 	ldw	ra,4(sp)
 4022ec4:	df000017 	ldw	fp,0(sp)
 4022ec8:	dec00204 	addi	sp,sp,8
 4022ecc:	f800283a 	ret

04022ed0 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 4022ed0:	defffc04 	addi	sp,sp,-16
 4022ed4:	df000315 	stw	fp,12(sp)
 4022ed8:	df000304 	addi	fp,sp,12
 4022edc:	e13ffe15 	stw	r4,-8(fp)
 4022ee0:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4022ee4:	e0bffe17 	ldw	r2,-8(fp)
 4022ee8:	10800a17 	ldw	r2,40(r2)
 4022eec:	10800104 	addi	r2,r2,4
 4022ef0:	10800037 	ldwio	r2,0(r2)
 4022ef4:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4022ef8:	e0bfff17 	ldw	r2,-4(fp)
 4022efc:	1000031e 	bne	r2,zero,4022f0c <alt_up_audio_write_fifo_space+0x3c>
 4022f00:	e0bffd17 	ldw	r2,-12(fp)
 4022f04:	1004d63a 	srli	r2,r2,24
 4022f08:	00000306 	br	4022f18 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 4022f0c:	e0bffd17 	ldw	r2,-12(fp)
 4022f10:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4022f14:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4022f18:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 4022f1c:	e0bffd17 	ldw	r2,-12(fp)
}
 4022f20:	e037883a 	mov	sp,fp
 4022f24:	df000017 	ldw	fp,0(sp)
 4022f28:	dec00104 	addi	sp,sp,4
 4022f2c:	f800283a 	ret

04022f30 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4022f30:	defffa04 	addi	sp,sp,-24
 4022f34:	dfc00515 	stw	ra,20(sp)
 4022f38:	df000415 	stw	fp,16(sp)
 4022f3c:	df000404 	addi	fp,sp,16
 4022f40:	e13ffd15 	stw	r4,-12(fp)
 4022f44:	e17ffe15 	stw	r5,-8(fp)
 4022f48:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 4022f4c:	01400044 	movi	r5,1
 4022f50:	e13ffd17 	ldw	r4,-12(fp)
 4022f54:	4022ed00 	call	4022ed0 <alt_up_audio_write_fifo_space>
 4022f58:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 4022f5c:	e0bffc17 	ldw	r2,-16(fp)
 4022f60:	10801868 	cmpgeui	r2,r2,97
 4022f64:	1000021e 	bne	r2,zero,4022f70 <alt_up_audio_play_r+0x40>
		return 0;
 4022f68:	0005883a 	mov	r2,zero
 4022f6c:	00000506 	br	4022f84 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 4022f70:	01c00044 	movi	r7,1
 4022f74:	e1bfff17 	ldw	r6,-4(fp)
 4022f78:	e17ffe17 	ldw	r5,-8(fp)
 4022f7c:	e13ffd17 	ldw	r4,-12(fp)
 4022f80:	40230e00 	call	40230e0 <alt_up_audio_write_fifo>
}
 4022f84:	e037883a 	mov	sp,fp
 4022f88:	dfc00117 	ldw	ra,4(sp)
 4022f8c:	df000017 	ldw	fp,0(sp)
 4022f90:	dec00204 	addi	sp,sp,8
 4022f94:	f800283a 	ret

04022f98 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 4022f98:	defffa04 	addi	sp,sp,-24
 4022f9c:	dfc00515 	stw	ra,20(sp)
 4022fa0:	df000415 	stw	fp,16(sp)
 4022fa4:	df000404 	addi	fp,sp,16
 4022fa8:	e13ffd15 	stw	r4,-12(fp)
 4022fac:	e17ffe15 	stw	r5,-8(fp)
 4022fb0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 4022fb4:	000b883a 	mov	r5,zero
 4022fb8:	e13ffd17 	ldw	r4,-12(fp)
 4022fbc:	4022ed00 	call	4022ed0 <alt_up_audio_write_fifo_space>
 4022fc0:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 4022fc4:	e0bffc17 	ldw	r2,-16(fp)
 4022fc8:	10801868 	cmpgeui	r2,r2,97
 4022fcc:	1000021e 	bne	r2,zero,4022fd8 <alt_up_audio_play_l+0x40>
		return 0;
 4022fd0:	0005883a 	mov	r2,zero
 4022fd4:	00000506 	br	4022fec <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 4022fd8:	000f883a 	mov	r7,zero
 4022fdc:	e1bfff17 	ldw	r6,-4(fp)
 4022fe0:	e17ffe17 	ldw	r5,-8(fp)
 4022fe4:	e13ffd17 	ldw	r4,-12(fp)
 4022fe8:	40230e00 	call	40230e0 <alt_up_audio_write_fifo>
}
 4022fec:	e037883a 	mov	sp,fp
 4022ff0:	dfc00117 	ldw	ra,4(sp)
 4022ff4:	df000017 	ldw	fp,0(sp)
 4022ff8:	dec00204 	addi	sp,sp,8
 4022ffc:	f800283a 	ret

04023000 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 4023000:	defff904 	addi	sp,sp,-28
 4023004:	df000615 	stw	fp,24(sp)
 4023008:	df000604 	addi	fp,sp,24
 402300c:	e13ffc15 	stw	r4,-16(fp)
 4023010:	e17ffd15 	stw	r5,-12(fp)
 4023014:	e1bffe15 	stw	r6,-8(fp)
 4023018:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 402301c:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 4023020:	00002506 	br	40230b8 <alt_up_audio_read_fifo+0xb8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4023024:	e0bffc17 	ldw	r2,-16(fp)
 4023028:	10800a17 	ldw	r2,40(r2)
 402302c:	10800104 	addi	r2,r2,4
 4023030:	10800037 	ldwio	r2,0(r2)
 4023034:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 4023038:	e0bfff17 	ldw	r2,-4(fp)
 402303c:	1000041e 	bne	r2,zero,4023050 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 4023040:	e0bffb17 	ldw	r2,-20(fp)
 4023044:	10bfc00c 	andi	r2,r2,65280
			:
 4023048:	1004d23a 	srli	r2,r2,8
 402304c:	00000206 	br	4023058 <alt_up_audio_read_fifo+0x58>
 4023050:	e0bffb17 	ldw	r2,-20(fp)
 4023054:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4023058:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 402305c:	e0bffb17 	ldw	r2,-20(fp)
 4023060:	10001926 	beq	r2,zero,40230c8 <alt_up_audio_read_fifo+0xc8>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 4023064:	e0bffa17 	ldw	r2,-24(fp)
 4023068:	1085883a 	add	r2,r2,r2
 402306c:	1085883a 	add	r2,r2,r2
 4023070:	1007883a 	mov	r3,r2
 4023074:	e0bffd17 	ldw	r2,-12(fp)
 4023078:	10c5883a 	add	r2,r2,r3
 402307c:	e0ffff17 	ldw	r3,-4(fp)
 4023080:	1800051e 	bne	r3,zero,4023098 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 4023084:	e0fffc17 	ldw	r3,-16(fp)
 4023088:	18c00a17 	ldw	r3,40(r3)
 402308c:	18c00204 	addi	r3,r3,8
 4023090:	18c00037 	ldwio	r3,0(r3)
 4023094:	00000406 	br	40230a8 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 4023098:	e0fffc17 	ldw	r3,-16(fp)
 402309c:	18c00a17 	ldw	r3,40(r3)
 40230a0:	18c00304 	addi	r3,r3,12
 40230a4:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 40230a8:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 40230ac:	e0bffa17 	ldw	r2,-24(fp)
 40230b0:	10800044 	addi	r2,r2,1
 40230b4:	e0bffa15 	stw	r2,-24(fp)

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 40230b8:	e0fffa17 	ldw	r3,-24(fp)
 40230bc:	e0bffe17 	ldw	r2,-8(fp)
 40230c0:	18bfd816 	blt	r3,r2,4023024 <__alt_data_end+0xfffe3024>
 40230c4:	00000106 	br	40230cc <alt_up_audio_read_fifo+0xcc>
			count ++;
		}
		else
		{
			// no more data to read
			break;
 40230c8:	0001883a 	nop
		}
	}
	return count;
 40230cc:	e0bffa17 	ldw	r2,-24(fp)
}
 40230d0:	e037883a 	mov	sp,fp
 40230d4:	df000017 	ldw	fp,0(sp)
 40230d8:	dec00104 	addi	sp,sp,4
 40230dc:	f800283a 	ret

040230e0 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 40230e0:	defff904 	addi	sp,sp,-28
 40230e4:	df000615 	stw	fp,24(sp)
 40230e8:	df000604 	addi	fp,sp,24
 40230ec:	e13ffc15 	stw	r4,-16(fp)
 40230f0:	e17ffd15 	stw	r5,-12(fp)
 40230f4:	e1bffe15 	stw	r6,-8(fp)
 40230f8:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 40230fc:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 4023100:	00002f06 	br	40231c0 <alt_up_audio_write_fifo+0xe0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 4023104:	e0bffc17 	ldw	r2,-16(fp)
 4023108:	10800a17 	ldw	r2,40(r2)
 402310c:	10800104 	addi	r2,r2,4
 4023110:	10800037 	ldwio	r2,0(r2)
 4023114:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4023118:	e0bfff17 	ldw	r2,-4(fp)
 402311c:	1000031e 	bne	r2,zero,402312c <alt_up_audio_write_fifo+0x4c>
 4023120:	e0bffb17 	ldw	r2,-20(fp)
 4023124:	1004d63a 	srli	r2,r2,24
 4023128:	00000306 	br	4023138 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 402312c:	e0bffb17 	ldw	r2,-20(fp)
 4023130:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 4023134:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 4023138:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 402313c:	e0bffb17 	ldw	r2,-20(fp)
 4023140:	10002326 	beq	r2,zero,40231d0 <alt_up_audio_write_fifo+0xf0>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 4023144:	e0bfff17 	ldw	r2,-4(fp)
 4023148:	10000f1e 	bne	r2,zero,4023188 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 402314c:	e0bffc17 	ldw	r2,-16(fp)
 4023150:	10800a17 	ldw	r2,40(r2)
 4023154:	10800204 	addi	r2,r2,8
 4023158:	1009883a 	mov	r4,r2
 402315c:	e0bffa17 	ldw	r2,-24(fp)
 4023160:	10c00044 	addi	r3,r2,1
 4023164:	e0fffa15 	stw	r3,-24(fp)
 4023168:	1085883a 	add	r2,r2,r2
 402316c:	1085883a 	add	r2,r2,r2
 4023170:	1007883a 	mov	r3,r2
 4023174:	e0bffd17 	ldw	r2,-12(fp)
 4023178:	10c5883a 	add	r2,r2,r3
 402317c:	10800017 	ldw	r2,0(r2)
 4023180:	20800035 	stwio	r2,0(r4)
 4023184:	00000e06 	br	40231c0 <alt_up_audio_write_fifo+0xe0>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 4023188:	e0bffc17 	ldw	r2,-16(fp)
 402318c:	10800a17 	ldw	r2,40(r2)
 4023190:	10800304 	addi	r2,r2,12
 4023194:	1009883a 	mov	r4,r2
 4023198:	e0bffa17 	ldw	r2,-24(fp)
 402319c:	10c00044 	addi	r3,r2,1
 40231a0:	e0fffa15 	stw	r3,-24(fp)
 40231a4:	1085883a 	add	r2,r2,r2
 40231a8:	1085883a 	add	r2,r2,r2
 40231ac:	1007883a 	mov	r3,r2
 40231b0:	e0bffd17 	ldw	r2,-12(fp)
 40231b4:	10c5883a 	add	r2,r2,r3
 40231b8:	10800017 	ldw	r2,0(r2)
 40231bc:	20800035 	stwio	r2,0(r4)

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 40231c0:	e0fffa17 	ldw	r3,-24(fp)
 40231c4:	e0bffe17 	ldw	r2,-8(fp)
 40231c8:	18bfce16 	blt	r3,r2,4023104 <__alt_data_end+0xfffe3104>
 40231cc:	00000106 	br	40231d4 <alt_up_audio_write_fifo+0xf4>
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
		}
		else
		{
			// no more space to write
			break;
 40231d0:	0001883a 	nop
		}
	}
	return count;
 40231d4:	e0bffa17 	ldw	r2,-24(fp)
}
 40231d8:	e037883a 	mov	sp,fp
 40231dc:	df000017 	ldw	fp,0(sp)
 40231e0:	dec00104 	addi	sp,sp,4
 40231e4:	f800283a 	ret

040231e8 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 40231e8:	defffd04 	addi	sp,sp,-12
 40231ec:	df000215 	stw	fp,8(sp)
 40231f0:	df000204 	addi	fp,sp,8
 40231f4:	e13ffe15 	stw	r4,-8(fp)
 40231f8:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 40231fc:	e0bfff17 	ldw	r2,-4(fp)
 4023200:	1000051e 	bne	r2,zero,4023218 <alt_up_audio_read_fifo_head+0x30>
 4023204:	e0bffe17 	ldw	r2,-8(fp)
 4023208:	10800a17 	ldw	r2,40(r2)
 402320c:	10800204 	addi	r2,r2,8
 4023210:	10800037 	ldwio	r2,0(r2)
 4023214:	00000406 	br	4023228 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 4023218:	e0bffe17 	ldw	r2,-8(fp)
 402321c:	10800a17 	ldw	r2,40(r2)
 4023220:	10800304 	addi	r2,r2,12
 4023224:	10800037 	ldwio	r2,0(r2)
}
 4023228:	e037883a 	mov	sp,fp
 402322c:	df000017 	ldw	fp,0(sp)
 4023230:	dec00104 	addi	sp,sp,4
 4023234:	f800283a 	ret

04023238 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 4023238:	defffc04 	addi	sp,sp,-16
 402323c:	df000315 	stw	fp,12(sp)
 4023240:	df000304 	addi	fp,sp,12
 4023244:	e13ffd15 	stw	r4,-12(fp)
 4023248:	e17ffe15 	stw	r5,-8(fp)
 402324c:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 4023250:	e0bfff17 	ldw	r2,-4(fp)
 4023254:	1000071e 	bne	r2,zero,4023274 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 4023258:	e0bffd17 	ldw	r2,-12(fp)
 402325c:	10800a17 	ldw	r2,40(r2)
 4023260:	10800204 	addi	r2,r2,8
 4023264:	1007883a 	mov	r3,r2
 4023268:	e0bffe17 	ldw	r2,-8(fp)
 402326c:	18800035 	stwio	r2,0(r3)
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
}
 4023270:	00000606 	br	402328c <alt_up_audio_write_fifo_head+0x54>
void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
	if (channel == ALT_UP_AUDIO_LEFT) 
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 4023274:	e0bffd17 	ldw	r2,-12(fp)
 4023278:	10800a17 	ldw	r2,40(r2)
 402327c:	10800304 	addi	r2,r2,12
 4023280:	1007883a 	mov	r3,r2
 4023284:	e0bffe17 	ldw	r2,-8(fp)
 4023288:	18800035 	stwio	r2,0(r3)
}
 402328c:	0001883a 	nop
 4023290:	e037883a 	mov	sp,fp
 4023294:	df000017 	ldw	fp,0(sp)
 4023298:	dec00104 	addi	sp,sp,4
 402329c:	f800283a 	ret

040232a0 <alt_up_av_config_open_dev>:

#include "altera_up_avalon_audio_and_video_config.h"
#include "altera_up_avalon_audio_and_video_config_regs.h"

alt_up_av_config_dev* alt_up_av_config_open_dev(const char* name)
{
 40232a0:	defffc04 	addi	sp,sp,-16
 40232a4:	dfc00315 	stw	ra,12(sp)
 40232a8:	df000215 	stw	fp,8(sp)
 40232ac:	df000204 	addi	fp,sp,8
 40232b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_av_config_dev *dev = (alt_up_av_config_dev*)alt_find_dev(name, &alt_dev_list);
 40232b4:	d1600504 	addi	r5,gp,-32748
 40232b8:	e13fff17 	ldw	r4,-4(fp)
 40232bc:	4023ef80 	call	4023ef8 <alt_find_dev>
 40232c0:	e0bffe15 	stw	r2,-8(fp)
  dev->type = (IORD_ALT_UP_AV_CONFIG_STATUS(dev->base) & ALT_UP_AV_CONFIG_STATUS_CFG_MSK) >> ALT_UP_AV_CONFIG_STATUS_CFG_OFST;
 40232c4:	e0bffe17 	ldw	r2,-8(fp)
 40232c8:	10800a17 	ldw	r2,40(r2)
 40232cc:	10800104 	addi	r2,r2,4
 40232d0:	10800037 	ldwio	r2,0(r2)
 40232d4:	10803fec 	andhi	r2,r2,255
 40232d8:	1005d43a 	srai	r2,r2,16
 40232dc:	1007883a 	mov	r3,r2
 40232e0:	e0bffe17 	ldw	r2,-8(fp)
 40232e4:	10c00b15 	stw	r3,44(r2)

  return dev;
 40232e8:	e0bffe17 	ldw	r2,-8(fp)
}
 40232ec:	e037883a 	mov	sp,fp
 40232f0:	dfc00117 	ldw	ra,4(sp)
 40232f4:	df000017 	ldw	fp,0(sp)
 40232f8:	dec00204 	addi	sp,sp,8
 40232fc:	f800283a 	ret

04023300 <alt_up_av_config_write_data>:
 * @param data --  the data to be sent
 *
 * @return 0 for success
 **/
int alt_up_av_config_write_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4023300:	defffc04 	addi	sp,sp,-16
 4023304:	df000315 	stw	fp,12(sp)
 4023308:	df000304 	addi	fp,sp,12
 402330c:	e13ffd15 	stw	r4,-12(fp)
 4023310:	e17ffe15 	stw	r5,-8(fp)
 4023314:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 4023318:	e0bffd17 	ldw	r2,-12(fp)
 402331c:	10800a17 	ldw	r2,40(r2)
 4023320:	10800204 	addi	r2,r2,8
 4023324:	1007883a 	mov	r3,r2
 4023328:	e0bffe17 	ldw	r2,-8(fp)
 402332c:	10803fcc 	andi	r2,r2,255
 4023330:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_AV_CONFIG_DATA(av_config->base, data & ALT_UP_AV_CONFIG_DATA_VALID_MSK); 
 4023334:	e0bffd17 	ldw	r2,-12(fp)
 4023338:	10800a17 	ldw	r2,40(r2)
 402333c:	10800304 	addi	r2,r2,12
 4023340:	1007883a 	mov	r3,r2
 4023344:	e0bfff17 	ldw	r2,-4(fp)
 4023348:	10bfffcc 	andi	r2,r2,65535
 402334c:	18800035 	stwio	r2,0(r3)

	return 0;
 4023350:	0005883a 	mov	r2,zero
}
 4023354:	e037883a 	mov	sp,fp
 4023358:	df000017 	ldw	fp,0(sp)
 402335c:	dec00104 	addi	sp,sp,4
 4023360:	f800283a 	ret

04023364 <alt_up_av_config_read_data>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_av_config_read_data(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 * data)
{
 4023364:	defffb04 	addi	sp,sp,-20
 4023368:	dfc00415 	stw	ra,16(sp)
 402336c:	df000315 	stw	fp,12(sp)
 4023370:	df000304 	addi	fp,sp,12
 4023374:	e13ffd15 	stw	r4,-12(fp)
 4023378:	e17ffe15 	stw	r5,-8(fp)
 402337c:	e1bfff15 	stw	r6,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_AV_CONFIG_ADDRESS(av_config->base, addr & ALT_UP_AV_CONFIG_ADDRESS_VALID_MSK); 
 4023380:	e0bffd17 	ldw	r2,-12(fp)
 4023384:	10800a17 	ldw	r2,40(r2)
 4023388:	10800204 	addi	r2,r2,8
 402338c:	1007883a 	mov	r3,r2
 4023390:	e0bffe17 	ldw	r2,-8(fp)
 4023394:	10803fcc 	andi	r2,r2,255
 4023398:	18800035 	stwio	r2,0(r3)

	// write data to the device Data register
	*(data) = IORD_ALT_UP_AV_CONFIG_DATA(av_config->base); 
 402339c:	e0bffd17 	ldw	r2,-12(fp)
 40233a0:	10800a17 	ldw	r2,40(r2)
 40233a4:	10800304 	addi	r2,r2,12
 40233a8:	10800037 	ldwio	r2,0(r2)
 40233ac:	1007883a 	mov	r3,r2
 40233b0:	e0bfff17 	ldw	r2,-4(fp)
 40233b4:	10c00015 	stw	r3,0(r2)

	// check acknowledge is 0
	if (alt_up_av_config_read_acknowledge(av_config))
 40233b8:	e13ffd17 	ldw	r4,-12(fp)
 40233bc:	40234880 	call	4023488 <alt_up_av_config_read_acknowledge>
 40233c0:	10000226 	beq	r2,zero,40233cc <alt_up_av_config_read_data+0x68>
		return -1;
 40233c4:	00bfffc4 	movi	r2,-1
 40233c8:	00000106 	br	40233d0 <alt_up_av_config_read_data+0x6c>

	return 0;
 40233cc:	0005883a 	mov	r2,zero
}
 40233d0:	e037883a 	mov	sp,fp
 40233d4:	dfc00117 	ldw	ra,4(sp)
 40233d8:	df000017 	ldw	fp,0(sp)
 40233dc:	dec00204 	addi	sp,sp,8
 40233e0:	f800283a 	ret

040233e4 <alt_up_av_config_reset>:

int alt_up_av_config_reset(alt_up_av_config_dev *av_config)
{
 40233e4:	defffe04 	addi	sp,sp,-8
 40233e8:	df000115 	stw	fp,4(sp)
 40233ec:	df000104 	addi	fp,sp,4
 40233f0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RESET(av_config->base);
 40233f4:	e0bfff17 	ldw	r2,-4(fp)
 40233f8:	10800a17 	ldw	r2,40(r2)
 40233fc:	1007883a 	mov	r3,r2
 4023400:	00800044 	movi	r2,1
 4023404:	18800025 	stbio	r2,0(r3)
	return 0;
 4023408:	0005883a 	mov	r2,zero
}
 402340c:	e037883a 	mov	sp,fp
 4023410:	df000017 	ldw	fp,0(sp)
 4023414:	dec00104 	addi	sp,sp,4
 4023418:	f800283a 	ret

0402341c <alt_up_av_config_enable_interrupt>:

int alt_up_av_config_enable_interrupt(alt_up_av_config_dev *av_config)
{
 402341c:	defffe04 	addi	sp,sp,-8
 4023420:	df000115 	stw	fp,4(sp)
 4023424:	df000104 	addi	fp,sp,4
 4023428:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_ENABLE(av_config->base);
 402342c:	e0bfff17 	ldw	r2,-4(fp)
 4023430:	10800a17 	ldw	r2,40(r2)
 4023434:	1007883a 	mov	r3,r2
 4023438:	00800084 	movi	r2,2
 402343c:	18800025 	stbio	r2,0(r3)
	return 0;
 4023440:	0005883a 	mov	r2,zero
}
 4023444:	e037883a 	mov	sp,fp
 4023448:	df000017 	ldw	fp,0(sp)
 402344c:	dec00104 	addi	sp,sp,4
 4023450:	f800283a 	ret

04023454 <alt_up_av_config_disable_interrupt>:

int alt_up_av_config_disable_interrupt(alt_up_av_config_dev *av_config)
{
 4023454:	defffe04 	addi	sp,sp,-8
 4023458:	df000115 	stw	fp,4(sp)
 402345c:	df000104 	addi	fp,sp,4
 4023460:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_RIE_DISABLE(av_config->base);
 4023464:	e0bfff17 	ldw	r2,-4(fp)
 4023468:	10800a17 	ldw	r2,40(r2)
 402346c:	0007883a 	mov	r3,zero
 4023470:	10c00025 	stbio	r3,0(r2)
	return 0;
 4023474:	0005883a 	mov	r2,zero
}
 4023478:	e037883a 	mov	sp,fp
 402347c:	df000017 	ldw	fp,0(sp)
 4023480:	dec00104 	addi	sp,sp,4
 4023484:	f800283a 	ret

04023488 <alt_up_av_config_read_acknowledge>:

int alt_up_av_config_read_acknowledge(alt_up_av_config_dev *av_config)
{
 4023488:	defffe04 	addi	sp,sp,-8
 402348c:	df000115 	stw	fp,4(sp)
 4023490:	df000104 	addi	fp,sp,4
 4023494:	e13fff15 	stw	r4,-4(fp)
	if ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST)
 4023498:	e0bfff17 	ldw	r2,-4(fp)
 402349c:	10800a17 	ldw	r2,40(r2)
 40234a0:	10800104 	addi	r2,r2,4
 40234a4:	10800037 	ldwio	r2,0(r2)
 40234a8:	1080008c 	andi	r2,r2,2
 40234ac:	1005d07a 	srai	r2,r2,1
 40234b0:	10000626 	beq	r2,zero,40234cc <alt_up_av_config_read_acknowledge+0x44>
		return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_ACK_MSK) >> ALT_UP_AV_CONFIG_STATUS_ACK_OFST);
 40234b4:	e0bfff17 	ldw	r2,-4(fp)
 40234b8:	10800a17 	ldw	r2,40(r2)
 40234bc:	10800104 	addi	r2,r2,4
 40234c0:	10800037 	ldwio	r2,0(r2)
 40234c4:	1080004c 	andi	r2,r2,1
 40234c8:	00000106 	br	40234d0 <alt_up_av_config_read_acknowledge+0x48>
	return -1;
 40234cc:	00bfffc4 	movi	r2,-1
}
 40234d0:	e037883a 	mov	sp,fp
 40234d4:	df000017 	ldw	fp,0(sp)
 40234d8:	dec00104 	addi	sp,sp,4
 40234dc:	f800283a 	ret

040234e0 <alt_up_av_config_read_ready>:

int alt_up_av_config_read_ready(alt_up_av_config_dev *av_config)
{
 40234e0:	defffe04 	addi	sp,sp,-8
 40234e4:	df000115 	stw	fp,4(sp)
 40234e8:	df000104 	addi	fp,sp,4
 40234ec:	e13fff15 	stw	r4,-4(fp)
	return ((IORD_ALT_UP_AV_CONFIG_STATUS(av_config->base) & ALT_UP_AV_CONFIG_STATUS_RDY_MSK) >> ALT_UP_AV_CONFIG_STATUS_RDY_OFST);
 40234f0:	e0bfff17 	ldw	r2,-4(fp)
 40234f4:	10800a17 	ldw	r2,40(r2)
 40234f8:	10800104 	addi	r2,r2,4
 40234fc:	10800037 	ldwio	r2,0(r2)
 4023500:	1080008c 	andi	r2,r2,2
 4023504:	1005d07a 	srai	r2,r2,1
}
 4023508:	e037883a 	mov	sp,fp
 402350c:	df000017 	ldw	fp,0(sp)
 4023510:	dec00104 	addi	sp,sp,4
 4023514:	f800283a 	ret

04023518 <alt_up_av_config_write_audio_cfg_register>:

int alt_up_av_config_write_audio_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4023518:	defffa04 	addi	sp,sp,-24
 402351c:	dfc00515 	stw	ra,20(sp)
 4023520:	df000415 	stw	fp,16(sp)
 4023524:	df000404 	addi	fp,sp,16
 4023528:	e13ffd15 	stw	r4,-12(fp)
 402352c:	e17ffe15 	stw	r5,-8(fp)
 4023530:	e1bfff15 	stw	r6,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_AUDIO_ONLY_CONFIG && av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 4023534:	e0bffd17 	ldw	r2,-12(fp)
 4023538:	10800b17 	ldw	r2,44(r2)
 402353c:	10800060 	cmpeqi	r2,r2,1
 4023540:	10000e1e 	bne	r2,zero,402357c <alt_up_av_config_write_audio_cfg_register+0x64>
 4023544:	e0bffd17 	ldw	r2,-12(fp)
 4023548:	10800b17 	ldw	r2,44(r2)
 402354c:	108000a0 	cmpeqi	r2,r2,2
 4023550:	10000a1e 	bne	r2,zero,402357c <alt_up_av_config_write_audio_cfg_register+0x64>
 4023554:	e0bffd17 	ldw	r2,-12(fp)
 4023558:	10800b17 	ldw	r2,44(r2)
 402355c:	108000e0 	cmpeqi	r2,r2,3
 4023560:	1000061e 	bne	r2,zero,402357c <alt_up_av_config_write_audio_cfg_register+0x64>
 4023564:	e0bffd17 	ldw	r2,-12(fp)
 4023568:	10800b17 	ldw	r2,44(r2)
 402356c:	10800120 	cmpeqi	r2,r2,4
 4023570:	1000021e 	bne	r2,zero,402357c <alt_up_av_config_write_audio_cfg_register+0x64>
		return -EINVAL;
 4023574:	00bffa84 	movi	r2,-22
 4023578:	00000b06 	br	40235a8 <alt_up_av_config_write_audio_cfg_register+0x90>

	// set the audio device to be configured in the Control register
	SELECTED_ON_BOARD_DEVICE device = AUDIO_DEVICE;
 402357c:	e03ffc15 	stw	zero,-16(fp)
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, device);
 4023580:	e0bffd17 	ldw	r2,-12(fp)
 4023584:	10800a17 	ldw	r2,40(r2)
 4023588:	10800084 	addi	r2,r2,2
 402358c:	1007883a 	mov	r3,r2
 4023590:	e0bffc17 	ldw	r2,-16(fp)
 4023594:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 4023598:	e1bfff17 	ldw	r6,-4(fp)
 402359c:	e17ffe17 	ldw	r5,-8(fp)
 40235a0:	e13ffd17 	ldw	r4,-12(fp)
 40235a4:	40233000 	call	4023300 <alt_up_av_config_write_data>
}
 40235a8:	e037883a 	mov	sp,fp
 40235ac:	dfc00117 	ldw	ra,4(sp)
 40235b0:	df000017 	ldw	fp,0(sp)
 40235b4:	dec00204 	addi	sp,sp,8
 40235b8:	f800283a 	ret

040235bc <alt_up_av_config_read_video_cfg_register>:

int alt_up_av_config_read_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data, SELECTED_ON_BOARD_DEVICE video_port)
{
 40235bc:	defffa04 	addi	sp,sp,-24
 40235c0:	dfc00515 	stw	ra,20(sp)
 40235c4:	df000415 	stw	fp,16(sp)
 40235c8:	df000404 	addi	fp,sp,16
 40235cc:	e13ffc15 	stw	r4,-16(fp)
 40235d0:	e17ffd15 	stw	r5,-12(fp)
 40235d4:	e1bffe15 	stw	r6,-8(fp)
 40235d8:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 40235dc:	e0bffc17 	ldw	r2,-16(fp)
 40235e0:	10800b17 	ldw	r2,44(r2)
 40235e4:	108000a0 	cmpeqi	r2,r2,2
 40235e8:	10000a1e 	bne	r2,zero,4023614 <alt_up_av_config_read_video_cfg_register+0x58>
 40235ec:	e0bffc17 	ldw	r2,-16(fp)
 40235f0:	10800b17 	ldw	r2,44(r2)
 40235f4:	108000e0 	cmpeqi	r2,r2,3
 40235f8:	1000061e 	bne	r2,zero,4023614 <alt_up_av_config_read_video_cfg_register+0x58>
 40235fc:	e0bffc17 	ldw	r2,-16(fp)
 4023600:	10800b17 	ldw	r2,44(r2)
 4023604:	10800120 	cmpeqi	r2,r2,4
 4023608:	1000021e 	bne	r2,zero,4023614 <alt_up_av_config_read_video_cfg_register+0x58>
		return -EINVAL;
 402360c:	00bffa84 	movi	r2,-22
 4023610:	00001f06 	br	4023690 <alt_up_av_config_read_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 4023614:	e0bffc17 	ldw	r2,-16(fp)
 4023618:	10800b17 	ldw	r2,44(r2)
 402361c:	108000a0 	cmpeqi	r2,r2,2
 4023620:	1000041e 	bne	r2,zero,4023634 <alt_up_av_config_read_video_cfg_register+0x78>
 4023624:	e0bffc17 	ldw	r2,-16(fp)
 4023628:	10800b17 	ldw	r2,44(r2)
 402362c:	10800118 	cmpnei	r2,r2,4
 4023630:	1000051e 	bne	r2,zero,4023648 <alt_up_av_config_read_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 4023634:	e0bfff17 	ldw	r2,-4(fp)
 4023638:	10800060 	cmpeqi	r2,r2,1
 402363c:	10000a1e 	bne	r2,zero,4023668 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4023640:	00bffa84 	movi	r2,-22
 4023644:	00001206 	br	4023690 <alt_up_av_config_read_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 4023648:	e0bfff17 	ldw	r2,-4(fp)
 402364c:	10800060 	cmpeqi	r2,r2,1
 4023650:	1000051e 	bne	r2,zero,4023668 <alt_up_av_config_read_video_cfg_register+0xac>
 4023654:	e0bfff17 	ldw	r2,-4(fp)
 4023658:	108000a0 	cmpeqi	r2,r2,2
 402365c:	1000021e 	bne	r2,zero,4023668 <alt_up_av_config_read_video_cfg_register+0xac>
			return -EINVAL;
 4023660:	00bffa84 	movi	r2,-22
 4023664:	00000a06 	br	4023690 <alt_up_av_config_read_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 4023668:	e0bffc17 	ldw	r2,-16(fp)
 402366c:	10800a17 	ldw	r2,40(r2)
 4023670:	10800084 	addi	r2,r2,2
 4023674:	1007883a 	mov	r3,r2
 4023678:	e0bfff17 	ldw	r2,-4(fp)
 402367c:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_read_data(av_config, addr, data);
 4023680:	e1bffe17 	ldw	r6,-8(fp)
 4023684:	e17ffd17 	ldw	r5,-12(fp)
 4023688:	e13ffc17 	ldw	r4,-16(fp)
 402368c:	40233640 	call	4023364 <alt_up_av_config_read_data>
}
 4023690:	e037883a 	mov	sp,fp
 4023694:	dfc00117 	ldw	ra,4(sp)
 4023698:	df000017 	ldw	fp,0(sp)
 402369c:	dec00204 	addi	sp,sp,8
 40236a0:	f800283a 	ret

040236a4 <alt_up_av_config_write_video_cfg_register>:

int alt_up_av_config_write_video_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data, SELECTED_ON_BOARD_DEVICE video_port)
{
 40236a4:	defffa04 	addi	sp,sp,-24
 40236a8:	dfc00515 	stw	ra,20(sp)
 40236ac:	df000415 	stw	fp,16(sp)
 40236b0:	df000404 	addi	fp,sp,16
 40236b4:	e13ffc15 	stw	r4,-16(fp)
 40236b8:	e17ffd15 	stw	r5,-12(fp)
 40236bc:	e1bffe15 	stw	r6,-8(fp)
 40236c0:	e1ffff15 	stw	r7,-4(fp)
	// check the device is indeed audio configuration
	if (av_config->type != ON_BOARD_DE2_CONFIG && av_config->type != ON_BOARD_DE2_70_CONFIG && av_config->type != ON_BOARD_DE2_115_CONFIG)
 40236c4:	e0bffc17 	ldw	r2,-16(fp)
 40236c8:	10800b17 	ldw	r2,44(r2)
 40236cc:	108000a0 	cmpeqi	r2,r2,2
 40236d0:	10000a1e 	bne	r2,zero,40236fc <alt_up_av_config_write_video_cfg_register+0x58>
 40236d4:	e0bffc17 	ldw	r2,-16(fp)
 40236d8:	10800b17 	ldw	r2,44(r2)
 40236dc:	108000e0 	cmpeqi	r2,r2,3
 40236e0:	1000061e 	bne	r2,zero,40236fc <alt_up_av_config_write_video_cfg_register+0x58>
 40236e4:	e0bffc17 	ldw	r2,-16(fp)
 40236e8:	10800b17 	ldw	r2,44(r2)
 40236ec:	10800120 	cmpeqi	r2,r2,4
 40236f0:	1000021e 	bne	r2,zero,40236fc <alt_up_av_config_write_video_cfg_register+0x58>
		return -EINVAL;
 40236f4:	00bffa84 	movi	r2,-22
 40236f8:	00001f06 	br	4023778 <alt_up_av_config_write_video_cfg_register+0xd4>

	if (av_config->type == ON_BOARD_DE2_CONFIG || av_config->type == ON_BOARD_DE2_115_CONFIG)
 40236fc:	e0bffc17 	ldw	r2,-16(fp)
 4023700:	10800b17 	ldw	r2,44(r2)
 4023704:	108000a0 	cmpeqi	r2,r2,2
 4023708:	1000041e 	bne	r2,zero,402371c <alt_up_av_config_write_video_cfg_register+0x78>
 402370c:	e0bffc17 	ldw	r2,-16(fp)
 4023710:	10800b17 	ldw	r2,44(r2)
 4023714:	10800118 	cmpnei	r2,r2,4
 4023718:	1000051e 	bne	r2,zero,4023730 <alt_up_av_config_write_video_cfg_register+0x8c>
	{
		if (video_port != FIRST_VIDEO_DEVICE)
 402371c:	e0bfff17 	ldw	r2,-4(fp)
 4023720:	10800060 	cmpeqi	r2,r2,1
 4023724:	10000a1e 	bne	r2,zero,4023750 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 4023728:	00bffa84 	movi	r2,-22
 402372c:	00001206 	br	4023778 <alt_up_av_config_write_video_cfg_register+0xd4>
	} else {
		if ((video_port != FIRST_VIDEO_DEVICE) && (video_port != SECOND_VIDEO_DEVICE))
 4023730:	e0bfff17 	ldw	r2,-4(fp)
 4023734:	10800060 	cmpeqi	r2,r2,1
 4023738:	1000051e 	bne	r2,zero,4023750 <alt_up_av_config_write_video_cfg_register+0xac>
 402373c:	e0bfff17 	ldw	r2,-4(fp)
 4023740:	108000a0 	cmpeqi	r2,r2,2
 4023744:	1000021e 	bne	r2,zero,4023750 <alt_up_av_config_write_video_cfg_register+0xac>
			return -EINVAL;
 4023748:	00bffa84 	movi	r2,-22
 402374c:	00000a06 	br	4023778 <alt_up_av_config_write_video_cfg_register+0xd4>
	}

	// set the video device to be configured in the Control register
	IOWR_ALT_UP_AV_CONFIG_CONTROL_DEVICE(av_config->base, video_port);
 4023750:	e0bffc17 	ldw	r2,-16(fp)
 4023754:	10800a17 	ldw	r2,40(r2)
 4023758:	10800084 	addi	r2,r2,2
 402375c:	1007883a 	mov	r3,r2
 4023760:	e0bfff17 	ldw	r2,-4(fp)
 4023764:	18800025 	stbio	r2,0(r3)

	return alt_up_av_config_write_data(av_config, addr, data);
 4023768:	e1bffe17 	ldw	r6,-8(fp)
 402376c:	e17ffd17 	ldw	r5,-12(fp)
 4023770:	e13ffc17 	ldw	r4,-16(fp)
 4023774:	40233000 	call	4023300 <alt_up_av_config_write_data>
}
 4023778:	e037883a 	mov	sp,fp
 402377c:	dfc00117 	ldw	ra,4(sp)
 4023780:	df000017 	ldw	fp,0(sp)
 4023784:	dec00204 	addi	sp,sp,8
 4023788:	f800283a 	ret

0402378c <alt_up_av_config_read_DC2_cfg_register>:

int alt_up_av_config_read_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 402378c:	defffb04 	addi	sp,sp,-20
 4023790:	dfc00415 	stw	ra,16(sp)
 4023794:	df000315 	stw	fp,12(sp)
 4023798:	df000304 	addi	fp,sp,12
 402379c:	e13ffd15 	stw	r4,-12(fp)
 40237a0:	e17ffe15 	stw	r5,-8(fp)
 40237a4:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 40237a8:	e0bffd17 	ldw	r2,-12(fp)
 40237ac:	10800b17 	ldw	r2,44(r2)
 40237b0:	10800220 	cmpeqi	r2,r2,8
 40237b4:	1000021e 	bne	r2,zero,40237c0 <alt_up_av_config_read_DC2_cfg_register+0x34>
		return -EINVAL;
 40237b8:	00bffa84 	movi	r2,-22
 40237bc:	00000406 	br	40237d0 <alt_up_av_config_read_DC2_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 40237c0:	e1bfff17 	ldw	r6,-4(fp)
 40237c4:	e17ffe17 	ldw	r5,-8(fp)
 40237c8:	e13ffd17 	ldw	r4,-12(fp)
 40237cc:	40233640 	call	4023364 <alt_up_av_config_read_data>
}
 40237d0:	e037883a 	mov	sp,fp
 40237d4:	dfc00117 	ldw	ra,4(sp)
 40237d8:	df000017 	ldw	fp,0(sp)
 40237dc:	dec00204 	addi	sp,sp,8
 40237e0:	f800283a 	ret

040237e4 <alt_up_av_config_write_DC2_cfg_register>:

int alt_up_av_config_write_DC2_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 40237e4:	defffb04 	addi	sp,sp,-20
 40237e8:	dfc00415 	stw	ra,16(sp)
 40237ec:	df000315 	stw	fp,12(sp)
 40237f0:	df000304 	addi	fp,sp,12
 40237f4:	e13ffd15 	stw	r4,-12(fp)
 40237f8:	e17ffe15 	stw	r5,-8(fp)
 40237fc:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_DC2_CONFIG)
 4023800:	e0bffd17 	ldw	r2,-12(fp)
 4023804:	10800b17 	ldw	r2,44(r2)
 4023808:	10800220 	cmpeqi	r2,r2,8
 402380c:	1000021e 	bne	r2,zero,4023818 <alt_up_av_config_write_DC2_cfg_register+0x34>
		return -EINVAL;
 4023810:	00bffa84 	movi	r2,-22
 4023814:	00000406 	br	4023828 <alt_up_av_config_write_DC2_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 4023818:	e1bfff17 	ldw	r6,-4(fp)
 402381c:	e17ffe17 	ldw	r5,-8(fp)
 4023820:	e13ffd17 	ldw	r4,-12(fp)
 4023824:	40233000 	call	4023300 <alt_up_av_config_write_data>
}
 4023828:	e037883a 	mov	sp,fp
 402382c:	dfc00117 	ldw	ra,4(sp)
 4023830:	df000017 	ldw	fp,0(sp)
 4023834:	dec00204 	addi	sp,sp,8
 4023838:	f800283a 	ret

0402383c <alt_up_av_config_read_D5M_cfg_register>:

int alt_up_av_config_read_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 402383c:	defffb04 	addi	sp,sp,-20
 4023840:	dfc00415 	stw	ra,16(sp)
 4023844:	df000315 	stw	fp,12(sp)
 4023848:	df000304 	addi	fp,sp,12
 402384c:	e13ffd15 	stw	r4,-12(fp)
 4023850:	e17ffe15 	stw	r5,-8(fp)
 4023854:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 4023858:	e0bffd17 	ldw	r2,-12(fp)
 402385c:	10800b17 	ldw	r2,44(r2)
 4023860:	10800260 	cmpeqi	r2,r2,9
 4023864:	1000021e 	bne	r2,zero,4023870 <alt_up_av_config_read_D5M_cfg_register+0x34>
		return -EINVAL;
 4023868:	00bffa84 	movi	r2,-22
 402386c:	00000406 	br	4023880 <alt_up_av_config_read_D5M_cfg_register+0x44>
	
	return alt_up_av_config_read_data(av_config, addr, data);
 4023870:	e1bfff17 	ldw	r6,-4(fp)
 4023874:	e17ffe17 	ldw	r5,-8(fp)
 4023878:	e13ffd17 	ldw	r4,-12(fp)
 402387c:	40233640 	call	4023364 <alt_up_av_config_read_data>
}
 4023880:	e037883a 	mov	sp,fp
 4023884:	dfc00117 	ldw	ra,4(sp)
 4023888:	df000017 	ldw	fp,0(sp)
 402388c:	dec00204 	addi	sp,sp,8
 4023890:	f800283a 	ret

04023894 <alt_up_av_config_write_D5M_cfg_register>:

int alt_up_av_config_write_D5M_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4023894:	defffb04 	addi	sp,sp,-20
 4023898:	dfc00415 	stw	ra,16(sp)
 402389c:	df000315 	stw	fp,12(sp)
 40238a0:	df000304 	addi	fp,sp,12
 40238a4:	e13ffd15 	stw	r4,-12(fp)
 40238a8:	e17ffe15 	stw	r5,-8(fp)
 40238ac:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_D5M_CONFIG)
 40238b0:	e0bffd17 	ldw	r2,-12(fp)
 40238b4:	10800b17 	ldw	r2,44(r2)
 40238b8:	10800260 	cmpeqi	r2,r2,9
 40238bc:	1000021e 	bne	r2,zero,40238c8 <alt_up_av_config_write_D5M_cfg_register+0x34>
		return -EINVAL;
 40238c0:	00bffa84 	movi	r2,-22
 40238c4:	00000406 	br	40238d8 <alt_up_av_config_write_D5M_cfg_register+0x44>
	
	return alt_up_av_config_write_data(av_config, addr, data);
 40238c8:	e1bfff17 	ldw	r6,-4(fp)
 40238cc:	e17ffe17 	ldw	r5,-8(fp)
 40238d0:	e13ffd17 	ldw	r4,-12(fp)
 40238d4:	40233000 	call	4023300 <alt_up_av_config_write_data>
}
 40238d8:	e037883a 	mov	sp,fp
 40238dc:	dfc00117 	ldw	ra,4(sp)
 40238e0:	df000017 	ldw	fp,0(sp)
 40238e4:	dec00204 	addi	sp,sp,8
 40238e8:	f800283a 	ret

040238ec <alt_up_av_config_read_LTM_cfg_register>:

int alt_up_av_config_read_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 *data)
{
 40238ec:	defffb04 	addi	sp,sp,-20
 40238f0:	dfc00415 	stw	ra,16(sp)
 40238f4:	df000315 	stw	fp,12(sp)
 40238f8:	df000304 	addi	fp,sp,12
 40238fc:	e13ffd15 	stw	r4,-12(fp)
 4023900:	e17ffe15 	stw	r5,-8(fp)
 4023904:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 4023908:	e0bffd17 	ldw	r2,-12(fp)
 402390c:	10800b17 	ldw	r2,44(r2)
 4023910:	108002a0 	cmpeqi	r2,r2,10
 4023914:	1000021e 	bne	r2,zero,4023920 <alt_up_av_config_read_LTM_cfg_register+0x34>
		return -EINVAL;
 4023918:	00bffa84 	movi	r2,-22
 402391c:	00000406 	br	4023930 <alt_up_av_config_read_LTM_cfg_register+0x44>

	return alt_up_av_config_read_data(av_config, addr, data);
 4023920:	e1bfff17 	ldw	r6,-4(fp)
 4023924:	e17ffe17 	ldw	r5,-8(fp)
 4023928:	e13ffd17 	ldw	r4,-12(fp)
 402392c:	40233640 	call	4023364 <alt_up_av_config_read_data>
}
 4023930:	e037883a 	mov	sp,fp
 4023934:	dfc00117 	ldw	ra,4(sp)
 4023938:	df000017 	ldw	fp,0(sp)
 402393c:	dec00204 	addi	sp,sp,8
 4023940:	f800283a 	ret

04023944 <alt_up_av_config_write_LTM_cfg_register>:

int alt_up_av_config_write_LTM_cfg_register(alt_up_av_config_dev *av_config, alt_u32 addr, alt_u32 data)
{
 4023944:	defffb04 	addi	sp,sp,-20
 4023948:	dfc00415 	stw	ra,16(sp)
 402394c:	df000315 	stw	fp,12(sp)
 4023950:	df000304 	addi	fp,sp,12
 4023954:	e13ffd15 	stw	r4,-12(fp)
 4023958:	e17ffe15 	stw	r5,-8(fp)
 402395c:	e1bfff15 	stw	r6,-4(fp)
	if (av_config->type != TRDB_LTM_CONFIG)
 4023960:	e0bffd17 	ldw	r2,-12(fp)
 4023964:	10800b17 	ldw	r2,44(r2)
 4023968:	108002a0 	cmpeqi	r2,r2,10
 402396c:	1000021e 	bne	r2,zero,4023978 <alt_up_av_config_write_LTM_cfg_register+0x34>
		return -EINVAL;
 4023970:	00bffa84 	movi	r2,-22
 4023974:	00000406 	br	4023988 <alt_up_av_config_write_LTM_cfg_register+0x44>

	return alt_up_av_config_write_data(av_config, addr, data);
 4023978:	e1bfff17 	ldw	r6,-4(fp)
 402397c:	e17ffe17 	ldw	r5,-8(fp)
 4023980:	e13ffd17 	ldw	r4,-12(fp)
 4023984:	40233000 	call	4023300 <alt_up_av_config_write_data>
}
 4023988:	e037883a 	mov	sp,fp
 402398c:	dfc00117 	ldw	ra,4(sp)
 4023990:	df000017 	ldw	fp,0(sp)
 4023994:	dec00204 	addi	sp,sp,8
 4023998:	f800283a 	ret

0402399c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402399c:	defff504 	addi	sp,sp,-44
 40239a0:	df000a15 	stw	fp,40(sp)
 40239a4:	df000a04 	addi	fp,sp,40
 40239a8:	e13ffc15 	stw	r4,-16(fp)
 40239ac:	e17ffd15 	stw	r5,-12(fp)
 40239b0:	e1bffe15 	stw	r6,-8(fp)
 40239b4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40239b8:	e03ff615 	stw	zero,-40(fp)
 40239bc:	d0a70d17 	ldw	r2,-25548(gp)
  
  if (alt_ticks_per_second ())
 40239c0:	10003c26 	beq	r2,zero,4023ab4 <alt_alarm_start+0x118>
  {
    if (alarm)
 40239c4:	e0bffc17 	ldw	r2,-16(fp)
 40239c8:	10003826 	beq	r2,zero,4023aac <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40239cc:	e0bffc17 	ldw	r2,-16(fp)
 40239d0:	e0fffe17 	ldw	r3,-8(fp)
 40239d4:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40239d8:	e0bffc17 	ldw	r2,-16(fp)
 40239dc:	e0ffff17 	ldw	r3,-4(fp)
 40239e0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40239e4:	0005303a 	rdctl	r2,status
 40239e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40239ec:	e0fff917 	ldw	r3,-28(fp)
 40239f0:	00bfff84 	movi	r2,-2
 40239f4:	1884703a 	and	r2,r3,r2
 40239f8:	1001703a 	wrctl	status,r2
  
  return context;
 40239fc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4023a00:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4023a04:	d0a70e17 	ldw	r2,-25544(gp)
      
      current_nticks = alt_nticks();
 4023a08:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4023a0c:	e0fffd17 	ldw	r3,-12(fp)
 4023a10:	e0bff617 	ldw	r2,-40(fp)
 4023a14:	1885883a 	add	r2,r3,r2
 4023a18:	10c00044 	addi	r3,r2,1
 4023a1c:	e0bffc17 	ldw	r2,-16(fp)
 4023a20:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4023a24:	e0bffc17 	ldw	r2,-16(fp)
 4023a28:	10c00217 	ldw	r3,8(r2)
 4023a2c:	e0bff617 	ldw	r2,-40(fp)
 4023a30:	1880042e 	bgeu	r3,r2,4023a44 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4023a34:	e0bffc17 	ldw	r2,-16(fp)
 4023a38:	00c00044 	movi	r3,1
 4023a3c:	10c00405 	stb	r3,16(r2)
 4023a40:	00000206 	br	4023a4c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4023a44:	e0bffc17 	ldw	r2,-16(fp)
 4023a48:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4023a4c:	e0bffc17 	ldw	r2,-16(fp)
 4023a50:	d0e00904 	addi	r3,gp,-32732
 4023a54:	e0fffa15 	stw	r3,-24(fp)
 4023a58:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4023a5c:	e0bffb17 	ldw	r2,-20(fp)
 4023a60:	e0fffa17 	ldw	r3,-24(fp)
 4023a64:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4023a68:	e0bffa17 	ldw	r2,-24(fp)
 4023a6c:	10c00017 	ldw	r3,0(r2)
 4023a70:	e0bffb17 	ldw	r2,-20(fp)
 4023a74:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4023a78:	e0bffa17 	ldw	r2,-24(fp)
 4023a7c:	10800017 	ldw	r2,0(r2)
 4023a80:	e0fffb17 	ldw	r3,-20(fp)
 4023a84:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4023a88:	e0bffa17 	ldw	r2,-24(fp)
 4023a8c:	e0fffb17 	ldw	r3,-20(fp)
 4023a90:	10c00015 	stw	r3,0(r2)
 4023a94:	e0bff817 	ldw	r2,-32(fp)
 4023a98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4023a9c:	e0bff717 	ldw	r2,-36(fp)
 4023aa0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4023aa4:	0005883a 	mov	r2,zero
 4023aa8:	00000306 	br	4023ab8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4023aac:	00bffa84 	movi	r2,-22
 4023ab0:	00000106 	br	4023ab8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4023ab4:	00bfde84 	movi	r2,-134
  }
}
 4023ab8:	e037883a 	mov	sp,fp
 4023abc:	df000017 	ldw	fp,0(sp)
 4023ac0:	dec00104 	addi	sp,sp,4
 4023ac4:	f800283a 	ret

04023ac8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4023ac8:	defffa04 	addi	sp,sp,-24
 4023acc:	dfc00515 	stw	ra,20(sp)
 4023ad0:	df000415 	stw	fp,16(sp)
 4023ad4:	df000404 	addi	fp,sp,16
 4023ad8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4023adc:	008000c4 	movi	r2,3
 4023ae0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4023ae4:	e0fffd17 	ldw	r3,-12(fp)
 4023ae8:	008003f4 	movhi	r2,15
 4023aec:	10909004 	addi	r2,r2,16960
 4023af0:	1885383a 	mul	r2,r3,r2
 4023af4:	100b883a 	mov	r5,r2
 4023af8:	0100bef4 	movhi	r4,763
 4023afc:	213c2004 	addi	r4,r4,-3968
 4023b00:	4020fc00 	call	4020fc0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4023b04:	100b883a 	mov	r5,r2
 4023b08:	01200034 	movhi	r4,32768
 4023b0c:	213fffc4 	addi	r4,r4,-1
 4023b10:	4020fc00 	call	4020fc0 <__udivsi3>
 4023b14:	100b883a 	mov	r5,r2
 4023b18:	e13fff17 	ldw	r4,-4(fp)
 4023b1c:	4020fc00 	call	4020fc0 <__udivsi3>
 4023b20:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4023b24:	e0bffe17 	ldw	r2,-8(fp)
 4023b28:	10002a26 	beq	r2,zero,4023bd4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4023b2c:	e03ffc15 	stw	zero,-16(fp)
 4023b30:	00001706 	br	4023b90 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4023b34:	00a00034 	movhi	r2,32768
 4023b38:	10bfffc4 	addi	r2,r2,-1
 4023b3c:	10bfffc4 	addi	r2,r2,-1
 4023b40:	103ffe1e 	bne	r2,zero,4023b3c <__alt_data_end+0xfffe3b3c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4023b44:	e0fffd17 	ldw	r3,-12(fp)
 4023b48:	008003f4 	movhi	r2,15
 4023b4c:	10909004 	addi	r2,r2,16960
 4023b50:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4023b54:	100b883a 	mov	r5,r2
 4023b58:	0100bef4 	movhi	r4,763
 4023b5c:	213c2004 	addi	r4,r4,-3968
 4023b60:	4020fc00 	call	4020fc0 <__udivsi3>
 4023b64:	100b883a 	mov	r5,r2
 4023b68:	01200034 	movhi	r4,32768
 4023b6c:	213fffc4 	addi	r4,r4,-1
 4023b70:	4020fc00 	call	4020fc0 <__udivsi3>
 4023b74:	1007883a 	mov	r3,r2
 4023b78:	e0bfff17 	ldw	r2,-4(fp)
 4023b7c:	10c5c83a 	sub	r2,r2,r3
 4023b80:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4023b84:	e0bffc17 	ldw	r2,-16(fp)
 4023b88:	10800044 	addi	r2,r2,1
 4023b8c:	e0bffc15 	stw	r2,-16(fp)
 4023b90:	e0fffc17 	ldw	r3,-16(fp)
 4023b94:	e0bffe17 	ldw	r2,-8(fp)
 4023b98:	18bfe616 	blt	r3,r2,4023b34 <__alt_data_end+0xfffe3b34>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4023b9c:	e0fffd17 	ldw	r3,-12(fp)
 4023ba0:	008003f4 	movhi	r2,15
 4023ba4:	10909004 	addi	r2,r2,16960
 4023ba8:	1885383a 	mul	r2,r3,r2
 4023bac:	100b883a 	mov	r5,r2
 4023bb0:	0100bef4 	movhi	r4,763
 4023bb4:	213c2004 	addi	r4,r4,-3968
 4023bb8:	4020fc00 	call	4020fc0 <__udivsi3>
 4023bbc:	1007883a 	mov	r3,r2
 4023bc0:	e0bfff17 	ldw	r2,-4(fp)
 4023bc4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4023bc8:	10bfffc4 	addi	r2,r2,-1
 4023bcc:	103ffe1e 	bne	r2,zero,4023bc8 <__alt_data_end+0xfffe3bc8>
 4023bd0:	00000d06 	br	4023c08 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4023bd4:	e0fffd17 	ldw	r3,-12(fp)
 4023bd8:	008003f4 	movhi	r2,15
 4023bdc:	10909004 	addi	r2,r2,16960
 4023be0:	1885383a 	mul	r2,r3,r2
 4023be4:	100b883a 	mov	r5,r2
 4023be8:	0100bef4 	movhi	r4,763
 4023bec:	213c2004 	addi	r4,r4,-3968
 4023bf0:	4020fc00 	call	4020fc0 <__udivsi3>
 4023bf4:	1007883a 	mov	r3,r2
 4023bf8:	e0bfff17 	ldw	r2,-4(fp)
 4023bfc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4023c00:	10bfffc4 	addi	r2,r2,-1
 4023c04:	00bffe16 	blt	zero,r2,4023c00 <__alt_data_end+0xfffe3c00>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4023c08:	0005883a 	mov	r2,zero
}
 4023c0c:	e037883a 	mov	sp,fp
 4023c10:	dfc00117 	ldw	ra,4(sp)
 4023c14:	df000017 	ldw	fp,0(sp)
 4023c18:	dec00204 	addi	sp,sp,8
 4023c1c:	f800283a 	ret

04023c20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023c20:	defffe04 	addi	sp,sp,-8
 4023c24:	dfc00115 	stw	ra,4(sp)
 4023c28:	df000015 	stw	fp,0(sp)
 4023c2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023c30:	d0a00817 	ldw	r2,-32736(gp)
 4023c34:	10000326 	beq	r2,zero,4023c44 <alt_get_errno+0x24>
 4023c38:	d0a00817 	ldw	r2,-32736(gp)
 4023c3c:	103ee83a 	callr	r2
 4023c40:	00000106 	br	4023c48 <alt_get_errno+0x28>
 4023c44:	d0a71004 	addi	r2,gp,-25536
}
 4023c48:	e037883a 	mov	sp,fp
 4023c4c:	dfc00117 	ldw	ra,4(sp)
 4023c50:	df000017 	ldw	fp,0(sp)
 4023c54:	dec00204 	addi	sp,sp,8
 4023c58:	f800283a 	ret

04023c5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4023c5c:	defffb04 	addi	sp,sp,-20
 4023c60:	dfc00415 	stw	ra,16(sp)
 4023c64:	df000315 	stw	fp,12(sp)
 4023c68:	df000304 	addi	fp,sp,12
 4023c6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4023c70:	e0bfff17 	ldw	r2,-4(fp)
 4023c74:	10000616 	blt	r2,zero,4023c90 <close+0x34>
 4023c78:	e0bfff17 	ldw	r2,-4(fp)
 4023c7c:	10c00324 	muli	r3,r2,12
 4023c80:	008100f4 	movhi	r2,1027
 4023c84:	10a2fd04 	addi	r2,r2,-29708
 4023c88:	1885883a 	add	r2,r3,r2
 4023c8c:	00000106 	br	4023c94 <close+0x38>
 4023c90:	0005883a 	mov	r2,zero
 4023c94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4023c98:	e0bffd17 	ldw	r2,-12(fp)
 4023c9c:	10001926 	beq	r2,zero,4023d04 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4023ca0:	e0bffd17 	ldw	r2,-12(fp)
 4023ca4:	10800017 	ldw	r2,0(r2)
 4023ca8:	10800417 	ldw	r2,16(r2)
 4023cac:	10000626 	beq	r2,zero,4023cc8 <close+0x6c>
 4023cb0:	e0bffd17 	ldw	r2,-12(fp)
 4023cb4:	10800017 	ldw	r2,0(r2)
 4023cb8:	10800417 	ldw	r2,16(r2)
 4023cbc:	e13ffd17 	ldw	r4,-12(fp)
 4023cc0:	103ee83a 	callr	r2
 4023cc4:	00000106 	br	4023ccc <close+0x70>
 4023cc8:	0005883a 	mov	r2,zero
 4023ccc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4023cd0:	e13fff17 	ldw	r4,-4(fp)
 4023cd4:	40243500 	call	4024350 <alt_release_fd>
    if (rval < 0)
 4023cd8:	e0bffe17 	ldw	r2,-8(fp)
 4023cdc:	1000070e 	bge	r2,zero,4023cfc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4023ce0:	4023c200 	call	4023c20 <alt_get_errno>
 4023ce4:	1007883a 	mov	r3,r2
 4023ce8:	e0bffe17 	ldw	r2,-8(fp)
 4023cec:	0085c83a 	sub	r2,zero,r2
 4023cf0:	18800015 	stw	r2,0(r3)
      return -1;
 4023cf4:	00bfffc4 	movi	r2,-1
 4023cf8:	00000706 	br	4023d18 <close+0xbc>
    }
    return 0;
 4023cfc:	0005883a 	mov	r2,zero
 4023d00:	00000506 	br	4023d18 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4023d04:	4023c200 	call	4023c20 <alt_get_errno>
 4023d08:	1007883a 	mov	r3,r2
 4023d0c:	00801444 	movi	r2,81
 4023d10:	18800015 	stw	r2,0(r3)
    return -1;
 4023d14:	00bfffc4 	movi	r2,-1
  }
}
 4023d18:	e037883a 	mov	sp,fp
 4023d1c:	dfc00117 	ldw	ra,4(sp)
 4023d20:	df000017 	ldw	fp,0(sp)
 4023d24:	dec00204 	addi	sp,sp,8
 4023d28:	f800283a 	ret

04023d2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4023d2c:	defffc04 	addi	sp,sp,-16
 4023d30:	df000315 	stw	fp,12(sp)
 4023d34:	df000304 	addi	fp,sp,12
 4023d38:	e13ffd15 	stw	r4,-12(fp)
 4023d3c:	e17ffe15 	stw	r5,-8(fp)
 4023d40:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4023d44:	e0bfff17 	ldw	r2,-4(fp)
}
 4023d48:	e037883a 	mov	sp,fp
 4023d4c:	df000017 	ldw	fp,0(sp)
 4023d50:	dec00104 	addi	sp,sp,4
 4023d54:	f800283a 	ret

04023d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4023d58:	defffe04 	addi	sp,sp,-8
 4023d5c:	dfc00115 	stw	ra,4(sp)
 4023d60:	df000015 	stw	fp,0(sp)
 4023d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4023d68:	d0a00817 	ldw	r2,-32736(gp)
 4023d6c:	10000326 	beq	r2,zero,4023d7c <alt_get_errno+0x24>
 4023d70:	d0a00817 	ldw	r2,-32736(gp)
 4023d74:	103ee83a 	callr	r2
 4023d78:	00000106 	br	4023d80 <alt_get_errno+0x28>
 4023d7c:	d0a71004 	addi	r2,gp,-25536
}
 4023d80:	e037883a 	mov	sp,fp
 4023d84:	dfc00117 	ldw	ra,4(sp)
 4023d88:	df000017 	ldw	fp,0(sp)
 4023d8c:	dec00204 	addi	sp,sp,8
 4023d90:	f800283a 	ret

04023d94 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4023d94:	defffa04 	addi	sp,sp,-24
 4023d98:	dfc00515 	stw	ra,20(sp)
 4023d9c:	df000415 	stw	fp,16(sp)
 4023da0:	df000404 	addi	fp,sp,16
 4023da4:	e13ffe15 	stw	r4,-8(fp)
 4023da8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4023dac:	e0bffe17 	ldw	r2,-8(fp)
 4023db0:	10000326 	beq	r2,zero,4023dc0 <alt_dev_llist_insert+0x2c>
 4023db4:	e0bffe17 	ldw	r2,-8(fp)
 4023db8:	10800217 	ldw	r2,8(r2)
 4023dbc:	1000061e 	bne	r2,zero,4023dd8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4023dc0:	4023d580 	call	4023d58 <alt_get_errno>
 4023dc4:	1007883a 	mov	r3,r2
 4023dc8:	00800584 	movi	r2,22
 4023dcc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4023dd0:	00bffa84 	movi	r2,-22
 4023dd4:	00001306 	br	4023e24 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4023dd8:	e0bffe17 	ldw	r2,-8(fp)
 4023ddc:	e0ffff17 	ldw	r3,-4(fp)
 4023de0:	e0fffc15 	stw	r3,-16(fp)
 4023de4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4023de8:	e0bffd17 	ldw	r2,-12(fp)
 4023dec:	e0fffc17 	ldw	r3,-16(fp)
 4023df0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4023df4:	e0bffc17 	ldw	r2,-16(fp)
 4023df8:	10c00017 	ldw	r3,0(r2)
 4023dfc:	e0bffd17 	ldw	r2,-12(fp)
 4023e00:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4023e04:	e0bffc17 	ldw	r2,-16(fp)
 4023e08:	10800017 	ldw	r2,0(r2)
 4023e0c:	e0fffd17 	ldw	r3,-12(fp)
 4023e10:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4023e14:	e0bffc17 	ldw	r2,-16(fp)
 4023e18:	e0fffd17 	ldw	r3,-12(fp)
 4023e1c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4023e20:	0005883a 	mov	r2,zero
}
 4023e24:	e037883a 	mov	sp,fp
 4023e28:	dfc00117 	ldw	ra,4(sp)
 4023e2c:	df000017 	ldw	fp,0(sp)
 4023e30:	dec00204 	addi	sp,sp,8
 4023e34:	f800283a 	ret

04023e38 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4023e38:	defffd04 	addi	sp,sp,-12
 4023e3c:	dfc00215 	stw	ra,8(sp)
 4023e40:	df000115 	stw	fp,4(sp)
 4023e44:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4023e48:	008100b4 	movhi	r2,1026
 4023e4c:	109cf104 	addi	r2,r2,29636
 4023e50:	e0bfff15 	stw	r2,-4(fp)
 4023e54:	00000606 	br	4023e70 <_do_ctors+0x38>
        (*ctor) (); 
 4023e58:	e0bfff17 	ldw	r2,-4(fp)
 4023e5c:	10800017 	ldw	r2,0(r2)
 4023e60:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4023e64:	e0bfff17 	ldw	r2,-4(fp)
 4023e68:	10bfff04 	addi	r2,r2,-4
 4023e6c:	e0bfff15 	stw	r2,-4(fp)
 4023e70:	e0ffff17 	ldw	r3,-4(fp)
 4023e74:	008100b4 	movhi	r2,1026
 4023e78:	109cf204 	addi	r2,r2,29640
 4023e7c:	18bff62e 	bgeu	r3,r2,4023e58 <__alt_data_end+0xfffe3e58>
        (*ctor) (); 
}
 4023e80:	0001883a 	nop
 4023e84:	e037883a 	mov	sp,fp
 4023e88:	dfc00117 	ldw	ra,4(sp)
 4023e8c:	df000017 	ldw	fp,0(sp)
 4023e90:	dec00204 	addi	sp,sp,8
 4023e94:	f800283a 	ret

04023e98 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4023e98:	defffd04 	addi	sp,sp,-12
 4023e9c:	dfc00215 	stw	ra,8(sp)
 4023ea0:	df000115 	stw	fp,4(sp)
 4023ea4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4023ea8:	008100b4 	movhi	r2,1026
 4023eac:	109cf104 	addi	r2,r2,29636
 4023eb0:	e0bfff15 	stw	r2,-4(fp)
 4023eb4:	00000606 	br	4023ed0 <_do_dtors+0x38>
        (*dtor) (); 
 4023eb8:	e0bfff17 	ldw	r2,-4(fp)
 4023ebc:	10800017 	ldw	r2,0(r2)
 4023ec0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4023ec4:	e0bfff17 	ldw	r2,-4(fp)
 4023ec8:	10bfff04 	addi	r2,r2,-4
 4023ecc:	e0bfff15 	stw	r2,-4(fp)
 4023ed0:	e0ffff17 	ldw	r3,-4(fp)
 4023ed4:	008100b4 	movhi	r2,1026
 4023ed8:	109cf204 	addi	r2,r2,29640
 4023edc:	18bff62e 	bgeu	r3,r2,4023eb8 <__alt_data_end+0xfffe3eb8>
        (*dtor) (); 
}
 4023ee0:	0001883a 	nop
 4023ee4:	e037883a 	mov	sp,fp
 4023ee8:	dfc00117 	ldw	ra,4(sp)
 4023eec:	df000017 	ldw	fp,0(sp)
 4023ef0:	dec00204 	addi	sp,sp,8
 4023ef4:	f800283a 	ret

04023ef8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4023ef8:	defffa04 	addi	sp,sp,-24
 4023efc:	dfc00515 	stw	ra,20(sp)
 4023f00:	df000415 	stw	fp,16(sp)
 4023f04:	df000404 	addi	fp,sp,16
 4023f08:	e13ffe15 	stw	r4,-8(fp)
 4023f0c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4023f10:	e0bfff17 	ldw	r2,-4(fp)
 4023f14:	10800017 	ldw	r2,0(r2)
 4023f18:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4023f1c:	e13ffe17 	ldw	r4,-8(fp)
 4023f20:	4024bcc0 	call	4024bcc <strlen>
 4023f24:	10800044 	addi	r2,r2,1
 4023f28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4023f2c:	00000d06 	br	4023f64 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4023f30:	e0bffc17 	ldw	r2,-16(fp)
 4023f34:	10800217 	ldw	r2,8(r2)
 4023f38:	e0fffd17 	ldw	r3,-12(fp)
 4023f3c:	180d883a 	mov	r6,r3
 4023f40:	e17ffe17 	ldw	r5,-8(fp)
 4023f44:	1009883a 	mov	r4,r2
 4023f48:	40248a00 	call	40248a0 <memcmp>
 4023f4c:	1000021e 	bne	r2,zero,4023f58 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4023f50:	e0bffc17 	ldw	r2,-16(fp)
 4023f54:	00000706 	br	4023f74 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4023f58:	e0bffc17 	ldw	r2,-16(fp)
 4023f5c:	10800017 	ldw	r2,0(r2)
 4023f60:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4023f64:	e0fffc17 	ldw	r3,-16(fp)
 4023f68:	e0bfff17 	ldw	r2,-4(fp)
 4023f6c:	18bff01e 	bne	r3,r2,4023f30 <__alt_data_end+0xfffe3f30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4023f70:	0005883a 	mov	r2,zero
}
 4023f74:	e037883a 	mov	sp,fp
 4023f78:	dfc00117 	ldw	ra,4(sp)
 4023f7c:	df000017 	ldw	fp,0(sp)
 4023f80:	dec00204 	addi	sp,sp,8
 4023f84:	f800283a 	ret

04023f88 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4023f88:	defffe04 	addi	sp,sp,-8
 4023f8c:	dfc00115 	stw	ra,4(sp)
 4023f90:	df000015 	stw	fp,0(sp)
 4023f94:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4023f98:	01440004 	movi	r5,4096
 4023f9c:	0009883a 	mov	r4,zero
 4023fa0:	40247280 	call	4024728 <alt_icache_flush>
#endif
}
 4023fa4:	0001883a 	nop
 4023fa8:	e037883a 	mov	sp,fp
 4023fac:	dfc00117 	ldw	ra,4(sp)
 4023fb0:	df000017 	ldw	fp,0(sp)
 4023fb4:	dec00204 	addi	sp,sp,8
 4023fb8:	f800283a 	ret

04023fbc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4023fbc:	defff904 	addi	sp,sp,-28
 4023fc0:	dfc00615 	stw	ra,24(sp)
 4023fc4:	df000515 	stw	fp,20(sp)
 4023fc8:	df000504 	addi	fp,sp,20
 4023fcc:	e13ffc15 	stw	r4,-16(fp)
 4023fd0:	e17ffd15 	stw	r5,-12(fp)
 4023fd4:	e1bffe15 	stw	r6,-8(fp)
 4023fd8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4023fdc:	e1bfff17 	ldw	r6,-4(fp)
 4023fe0:	e17ffe17 	ldw	r5,-8(fp)
 4023fe4:	e13ffd17 	ldw	r4,-12(fp)
 4023fe8:	40241fc0 	call	40241fc <open>
 4023fec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4023ff0:	e0bffb17 	ldw	r2,-20(fp)
 4023ff4:	10001c16 	blt	r2,zero,4024068 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4023ff8:	008100f4 	movhi	r2,1027
 4023ffc:	10a2fd04 	addi	r2,r2,-29708
 4024000:	e0fffb17 	ldw	r3,-20(fp)
 4024004:	18c00324 	muli	r3,r3,12
 4024008:	10c5883a 	add	r2,r2,r3
 402400c:	10c00017 	ldw	r3,0(r2)
 4024010:	e0bffc17 	ldw	r2,-16(fp)
 4024014:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4024018:	008100f4 	movhi	r2,1027
 402401c:	10a2fd04 	addi	r2,r2,-29708
 4024020:	e0fffb17 	ldw	r3,-20(fp)
 4024024:	18c00324 	muli	r3,r3,12
 4024028:	10c5883a 	add	r2,r2,r3
 402402c:	10800104 	addi	r2,r2,4
 4024030:	10c00017 	ldw	r3,0(r2)
 4024034:	e0bffc17 	ldw	r2,-16(fp)
 4024038:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 402403c:	008100f4 	movhi	r2,1027
 4024040:	10a2fd04 	addi	r2,r2,-29708
 4024044:	e0fffb17 	ldw	r3,-20(fp)
 4024048:	18c00324 	muli	r3,r3,12
 402404c:	10c5883a 	add	r2,r2,r3
 4024050:	10800204 	addi	r2,r2,8
 4024054:	10c00017 	ldw	r3,0(r2)
 4024058:	e0bffc17 	ldw	r2,-16(fp)
 402405c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4024060:	e13ffb17 	ldw	r4,-20(fp)
 4024064:	40243500 	call	4024350 <alt_release_fd>
  }
} 
 4024068:	0001883a 	nop
 402406c:	e037883a 	mov	sp,fp
 4024070:	dfc00117 	ldw	ra,4(sp)
 4024074:	df000017 	ldw	fp,0(sp)
 4024078:	dec00204 	addi	sp,sp,8
 402407c:	f800283a 	ret

04024080 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4024080:	defffb04 	addi	sp,sp,-20
 4024084:	dfc00415 	stw	ra,16(sp)
 4024088:	df000315 	stw	fp,12(sp)
 402408c:	df000304 	addi	fp,sp,12
 4024090:	e13ffd15 	stw	r4,-12(fp)
 4024094:	e17ffe15 	stw	r5,-8(fp)
 4024098:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402409c:	01c07fc4 	movi	r7,511
 40240a0:	01800044 	movi	r6,1
 40240a4:	e17ffd17 	ldw	r5,-12(fp)
 40240a8:	010100f4 	movhi	r4,1027
 40240ac:	21230004 	addi	r4,r4,-29696
 40240b0:	4023fbc0 	call	4023fbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 40240b4:	01c07fc4 	movi	r7,511
 40240b8:	000d883a 	mov	r6,zero
 40240bc:	e17ffe17 	ldw	r5,-8(fp)
 40240c0:	010100f4 	movhi	r4,1027
 40240c4:	2122fd04 	addi	r4,r4,-29708
 40240c8:	4023fbc0 	call	4023fbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 40240cc:	01c07fc4 	movi	r7,511
 40240d0:	01800044 	movi	r6,1
 40240d4:	e17fff17 	ldw	r5,-4(fp)
 40240d8:	010100f4 	movhi	r4,1027
 40240dc:	21230304 	addi	r4,r4,-29684
 40240e0:	4023fbc0 	call	4023fbc <alt_open_fd>
}  
 40240e4:	0001883a 	nop
 40240e8:	e037883a 	mov	sp,fp
 40240ec:	dfc00117 	ldw	ra,4(sp)
 40240f0:	df000017 	ldw	fp,0(sp)
 40240f4:	dec00204 	addi	sp,sp,8
 40240f8:	f800283a 	ret

040240fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40240fc:	defffe04 	addi	sp,sp,-8
 4024100:	dfc00115 	stw	ra,4(sp)
 4024104:	df000015 	stw	fp,0(sp)
 4024108:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402410c:	d0a00817 	ldw	r2,-32736(gp)
 4024110:	10000326 	beq	r2,zero,4024120 <alt_get_errno+0x24>
 4024114:	d0a00817 	ldw	r2,-32736(gp)
 4024118:	103ee83a 	callr	r2
 402411c:	00000106 	br	4024124 <alt_get_errno+0x28>
 4024120:	d0a71004 	addi	r2,gp,-25536
}
 4024124:	e037883a 	mov	sp,fp
 4024128:	dfc00117 	ldw	ra,4(sp)
 402412c:	df000017 	ldw	fp,0(sp)
 4024130:	dec00204 	addi	sp,sp,8
 4024134:	f800283a 	ret

04024138 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4024138:	defffd04 	addi	sp,sp,-12
 402413c:	df000215 	stw	fp,8(sp)
 4024140:	df000204 	addi	fp,sp,8
 4024144:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4024148:	e0bfff17 	ldw	r2,-4(fp)
 402414c:	10800217 	ldw	r2,8(r2)
 4024150:	10d00034 	orhi	r3,r2,16384
 4024154:	e0bfff17 	ldw	r2,-4(fp)
 4024158:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402415c:	e03ffe15 	stw	zero,-8(fp)
 4024160:	00001d06 	br	40241d8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4024164:	008100f4 	movhi	r2,1027
 4024168:	10a2fd04 	addi	r2,r2,-29708
 402416c:	e0fffe17 	ldw	r3,-8(fp)
 4024170:	18c00324 	muli	r3,r3,12
 4024174:	10c5883a 	add	r2,r2,r3
 4024178:	10c00017 	ldw	r3,0(r2)
 402417c:	e0bfff17 	ldw	r2,-4(fp)
 4024180:	10800017 	ldw	r2,0(r2)
 4024184:	1880111e 	bne	r3,r2,40241cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4024188:	008100f4 	movhi	r2,1027
 402418c:	10a2fd04 	addi	r2,r2,-29708
 4024190:	e0fffe17 	ldw	r3,-8(fp)
 4024194:	18c00324 	muli	r3,r3,12
 4024198:	10c5883a 	add	r2,r2,r3
 402419c:	10800204 	addi	r2,r2,8
 40241a0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40241a4:	1000090e 	bge	r2,zero,40241cc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 40241a8:	e0bffe17 	ldw	r2,-8(fp)
 40241ac:	10c00324 	muli	r3,r2,12
 40241b0:	008100f4 	movhi	r2,1027
 40241b4:	10a2fd04 	addi	r2,r2,-29708
 40241b8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40241bc:	e0bfff17 	ldw	r2,-4(fp)
 40241c0:	18800226 	beq	r3,r2,40241cc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40241c4:	00bffcc4 	movi	r2,-13
 40241c8:	00000806 	br	40241ec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40241cc:	e0bffe17 	ldw	r2,-8(fp)
 40241d0:	10800044 	addi	r2,r2,1
 40241d4:	e0bffe15 	stw	r2,-8(fp)
 40241d8:	d0a00717 	ldw	r2,-32740(gp)
 40241dc:	1007883a 	mov	r3,r2
 40241e0:	e0bffe17 	ldw	r2,-8(fp)
 40241e4:	18bfdf2e 	bgeu	r3,r2,4024164 <__alt_data_end+0xfffe4164>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40241e8:	0005883a 	mov	r2,zero
}
 40241ec:	e037883a 	mov	sp,fp
 40241f0:	df000017 	ldw	fp,0(sp)
 40241f4:	dec00104 	addi	sp,sp,4
 40241f8:	f800283a 	ret

040241fc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40241fc:	defff604 	addi	sp,sp,-40
 4024200:	dfc00915 	stw	ra,36(sp)
 4024204:	df000815 	stw	fp,32(sp)
 4024208:	df000804 	addi	fp,sp,32
 402420c:	e13ffd15 	stw	r4,-12(fp)
 4024210:	e17ffe15 	stw	r5,-8(fp)
 4024214:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4024218:	00bfffc4 	movi	r2,-1
 402421c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4024220:	00bffb44 	movi	r2,-19
 4024224:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4024228:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402422c:	d1600504 	addi	r5,gp,-32748
 4024230:	e13ffd17 	ldw	r4,-12(fp)
 4024234:	4023ef80 	call	4023ef8 <alt_find_dev>
 4024238:	e0bff815 	stw	r2,-32(fp)
 402423c:	e0bff817 	ldw	r2,-32(fp)
 4024240:	1000051e 	bne	r2,zero,4024258 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4024244:	e13ffd17 	ldw	r4,-12(fp)
 4024248:	402457c0 	call	402457c <alt_find_file>
 402424c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4024250:	00800044 	movi	r2,1
 4024254:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4024258:	e0bff817 	ldw	r2,-32(fp)
 402425c:	10002926 	beq	r2,zero,4024304 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4024260:	e13ff817 	ldw	r4,-32(fp)
 4024264:	40246840 	call	4024684 <alt_get_fd>
 4024268:	e0bff915 	stw	r2,-28(fp)
 402426c:	e0bff917 	ldw	r2,-28(fp)
 4024270:	1000030e 	bge	r2,zero,4024280 <open+0x84>
    {
      status = index;
 4024274:	e0bff917 	ldw	r2,-28(fp)
 4024278:	e0bffa15 	stw	r2,-24(fp)
 402427c:	00002306 	br	402430c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4024280:	e0bff917 	ldw	r2,-28(fp)
 4024284:	10c00324 	muli	r3,r2,12
 4024288:	008100f4 	movhi	r2,1027
 402428c:	10a2fd04 	addi	r2,r2,-29708
 4024290:	1885883a 	add	r2,r3,r2
 4024294:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4024298:	e0fffe17 	ldw	r3,-8(fp)
 402429c:	00900034 	movhi	r2,16384
 40242a0:	10bfffc4 	addi	r2,r2,-1
 40242a4:	1886703a 	and	r3,r3,r2
 40242a8:	e0bffc17 	ldw	r2,-16(fp)
 40242ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 40242b0:	e0bffb17 	ldw	r2,-20(fp)
 40242b4:	1000051e 	bne	r2,zero,40242cc <open+0xd0>
 40242b8:	e13ffc17 	ldw	r4,-16(fp)
 40242bc:	40241380 	call	4024138 <alt_file_locked>
 40242c0:	e0bffa15 	stw	r2,-24(fp)
 40242c4:	e0bffa17 	ldw	r2,-24(fp)
 40242c8:	10001016 	blt	r2,zero,402430c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40242cc:	e0bff817 	ldw	r2,-32(fp)
 40242d0:	10800317 	ldw	r2,12(r2)
 40242d4:	10000826 	beq	r2,zero,40242f8 <open+0xfc>
 40242d8:	e0bff817 	ldw	r2,-32(fp)
 40242dc:	10800317 	ldw	r2,12(r2)
 40242e0:	e1ffff17 	ldw	r7,-4(fp)
 40242e4:	e1bffe17 	ldw	r6,-8(fp)
 40242e8:	e17ffd17 	ldw	r5,-12(fp)
 40242ec:	e13ffc17 	ldw	r4,-16(fp)
 40242f0:	103ee83a 	callr	r2
 40242f4:	00000106 	br	40242fc <open+0x100>
 40242f8:	0005883a 	mov	r2,zero
 40242fc:	e0bffa15 	stw	r2,-24(fp)
 4024300:	00000206 	br	402430c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4024304:	00bffb44 	movi	r2,-19
 4024308:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402430c:	e0bffa17 	ldw	r2,-24(fp)
 4024310:	1000090e 	bge	r2,zero,4024338 <open+0x13c>
  {
    alt_release_fd (index);  
 4024314:	e13ff917 	ldw	r4,-28(fp)
 4024318:	40243500 	call	4024350 <alt_release_fd>
    ALT_ERRNO = -status;
 402431c:	40240fc0 	call	40240fc <alt_get_errno>
 4024320:	1007883a 	mov	r3,r2
 4024324:	e0bffa17 	ldw	r2,-24(fp)
 4024328:	0085c83a 	sub	r2,zero,r2
 402432c:	18800015 	stw	r2,0(r3)
    return -1;
 4024330:	00bfffc4 	movi	r2,-1
 4024334:	00000106 	br	402433c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4024338:	e0bff917 	ldw	r2,-28(fp)
}
 402433c:	e037883a 	mov	sp,fp
 4024340:	dfc00117 	ldw	ra,4(sp)
 4024344:	df000017 	ldw	fp,0(sp)
 4024348:	dec00204 	addi	sp,sp,8
 402434c:	f800283a 	ret

04024350 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4024350:	defffe04 	addi	sp,sp,-8
 4024354:	df000115 	stw	fp,4(sp)
 4024358:	df000104 	addi	fp,sp,4
 402435c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 4024360:	e0bfff17 	ldw	r2,-4(fp)
 4024364:	108000d0 	cmplti	r2,r2,3
 4024368:	10000d1e 	bne	r2,zero,40243a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402436c:	008100f4 	movhi	r2,1027
 4024370:	10a2fd04 	addi	r2,r2,-29708
 4024374:	e0ffff17 	ldw	r3,-4(fp)
 4024378:	18c00324 	muli	r3,r3,12
 402437c:	10c5883a 	add	r2,r2,r3
 4024380:	10800204 	addi	r2,r2,8
 4024384:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4024388:	008100f4 	movhi	r2,1027
 402438c:	10a2fd04 	addi	r2,r2,-29708
 4024390:	e0ffff17 	ldw	r3,-4(fp)
 4024394:	18c00324 	muli	r3,r3,12
 4024398:	10c5883a 	add	r2,r2,r3
 402439c:	10000015 	stw	zero,0(r2)
  }
}
 40243a0:	0001883a 	nop
 40243a4:	e037883a 	mov	sp,fp
 40243a8:	df000017 	ldw	fp,0(sp)
 40243ac:	dec00104 	addi	sp,sp,4
 40243b0:	f800283a 	ret

040243b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40243b4:	defffa04 	addi	sp,sp,-24
 40243b8:	df000515 	stw	fp,20(sp)
 40243bc:	df000504 	addi	fp,sp,20
 40243c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40243c4:	0005303a 	rdctl	r2,status
 40243c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40243cc:	e0fffc17 	ldw	r3,-16(fp)
 40243d0:	00bfff84 	movi	r2,-2
 40243d4:	1884703a 	and	r2,r3,r2
 40243d8:	1001703a 	wrctl	status,r2
  
  return context;
 40243dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40243e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40243e4:	e0bfff17 	ldw	r2,-4(fp)
 40243e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40243ec:	e0bffd17 	ldw	r2,-12(fp)
 40243f0:	10800017 	ldw	r2,0(r2)
 40243f4:	e0fffd17 	ldw	r3,-12(fp)
 40243f8:	18c00117 	ldw	r3,4(r3)
 40243fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4024400:	e0bffd17 	ldw	r2,-12(fp)
 4024404:	10800117 	ldw	r2,4(r2)
 4024408:	e0fffd17 	ldw	r3,-12(fp)
 402440c:	18c00017 	ldw	r3,0(r3)
 4024410:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4024414:	e0bffd17 	ldw	r2,-12(fp)
 4024418:	e0fffd17 	ldw	r3,-12(fp)
 402441c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4024420:	e0bffd17 	ldw	r2,-12(fp)
 4024424:	e0fffd17 	ldw	r3,-12(fp)
 4024428:	10c00015 	stw	r3,0(r2)
 402442c:	e0bffb17 	ldw	r2,-20(fp)
 4024430:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4024434:	e0bffe17 	ldw	r2,-8(fp)
 4024438:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402443c:	0001883a 	nop
 4024440:	e037883a 	mov	sp,fp
 4024444:	df000017 	ldw	fp,0(sp)
 4024448:	dec00104 	addi	sp,sp,4
 402444c:	f800283a 	ret

04024450 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4024450:	defffb04 	addi	sp,sp,-20
 4024454:	dfc00415 	stw	ra,16(sp)
 4024458:	df000315 	stw	fp,12(sp)
 402445c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4024460:	d0a00917 	ldw	r2,-32732(gp)
 4024464:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4024468:	d0a70e17 	ldw	r2,-25544(gp)
 402446c:	10800044 	addi	r2,r2,1
 4024470:	d0a70e15 	stw	r2,-25544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4024474:	00002e06 	br	4024530 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4024478:	e0bffd17 	ldw	r2,-12(fp)
 402447c:	10800017 	ldw	r2,0(r2)
 4024480:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4024484:	e0bffd17 	ldw	r2,-12(fp)
 4024488:	10800403 	ldbu	r2,16(r2)
 402448c:	10803fcc 	andi	r2,r2,255
 4024490:	10000426 	beq	r2,zero,40244a4 <alt_tick+0x54>
 4024494:	d0a70e17 	ldw	r2,-25544(gp)
 4024498:	1000021e 	bne	r2,zero,40244a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402449c:	e0bffd17 	ldw	r2,-12(fp)
 40244a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40244a4:	e0bffd17 	ldw	r2,-12(fp)
 40244a8:	10800217 	ldw	r2,8(r2)
 40244ac:	d0e70e17 	ldw	r3,-25544(gp)
 40244b0:	18801d36 	bltu	r3,r2,4024528 <alt_tick+0xd8>
 40244b4:	e0bffd17 	ldw	r2,-12(fp)
 40244b8:	10800403 	ldbu	r2,16(r2)
 40244bc:	10803fcc 	andi	r2,r2,255
 40244c0:	1000191e 	bne	r2,zero,4024528 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40244c4:	e0bffd17 	ldw	r2,-12(fp)
 40244c8:	10800317 	ldw	r2,12(r2)
 40244cc:	e0fffd17 	ldw	r3,-12(fp)
 40244d0:	18c00517 	ldw	r3,20(r3)
 40244d4:	1809883a 	mov	r4,r3
 40244d8:	103ee83a 	callr	r2
 40244dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40244e0:	e0bfff17 	ldw	r2,-4(fp)
 40244e4:	1000031e 	bne	r2,zero,40244f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40244e8:	e13ffd17 	ldw	r4,-12(fp)
 40244ec:	40243b40 	call	40243b4 <alt_alarm_stop>
 40244f0:	00000d06 	br	4024528 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40244f4:	e0bffd17 	ldw	r2,-12(fp)
 40244f8:	10c00217 	ldw	r3,8(r2)
 40244fc:	e0bfff17 	ldw	r2,-4(fp)
 4024500:	1887883a 	add	r3,r3,r2
 4024504:	e0bffd17 	ldw	r2,-12(fp)
 4024508:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402450c:	e0bffd17 	ldw	r2,-12(fp)
 4024510:	10c00217 	ldw	r3,8(r2)
 4024514:	d0a70e17 	ldw	r2,-25544(gp)
 4024518:	1880032e 	bgeu	r3,r2,4024528 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402451c:	e0bffd17 	ldw	r2,-12(fp)
 4024520:	00c00044 	movi	r3,1
 4024524:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4024528:	e0bffe17 	ldw	r2,-8(fp)
 402452c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4024530:	e0fffd17 	ldw	r3,-12(fp)
 4024534:	d0a00904 	addi	r2,gp,-32732
 4024538:	18bfcf1e 	bne	r3,r2,4024478 <__alt_data_end+0xfffe4478>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402453c:	0001883a 	nop
}
 4024540:	0001883a 	nop
 4024544:	e037883a 	mov	sp,fp
 4024548:	dfc00117 	ldw	ra,4(sp)
 402454c:	df000017 	ldw	fp,0(sp)
 4024550:	dec00204 	addi	sp,sp,8
 4024554:	f800283a 	ret

04024558 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4024558:	deffff04 	addi	sp,sp,-4
 402455c:	df000015 	stw	fp,0(sp)
 4024560:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4024564:	000170fa 	wrctl	ienable,zero
}
 4024568:	0001883a 	nop
 402456c:	e037883a 	mov	sp,fp
 4024570:	df000017 	ldw	fp,0(sp)
 4024574:	dec00104 	addi	sp,sp,4
 4024578:	f800283a 	ret

0402457c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402457c:	defffb04 	addi	sp,sp,-20
 4024580:	dfc00415 	stw	ra,16(sp)
 4024584:	df000315 	stw	fp,12(sp)
 4024588:	df000304 	addi	fp,sp,12
 402458c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4024590:	d0a00317 	ldw	r2,-32756(gp)
 4024594:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024598:	00003106 	br	4024660 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402459c:	e0bffd17 	ldw	r2,-12(fp)
 40245a0:	10800217 	ldw	r2,8(r2)
 40245a4:	1009883a 	mov	r4,r2
 40245a8:	4024bcc0 	call	4024bcc <strlen>
 40245ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40245b0:	e0bffd17 	ldw	r2,-12(fp)
 40245b4:	10c00217 	ldw	r3,8(r2)
 40245b8:	e0bffe17 	ldw	r2,-8(fp)
 40245bc:	10bfffc4 	addi	r2,r2,-1
 40245c0:	1885883a 	add	r2,r3,r2
 40245c4:	10800003 	ldbu	r2,0(r2)
 40245c8:	10803fcc 	andi	r2,r2,255
 40245cc:	1080201c 	xori	r2,r2,128
 40245d0:	10bfe004 	addi	r2,r2,-128
 40245d4:	10800bd8 	cmpnei	r2,r2,47
 40245d8:	1000031e 	bne	r2,zero,40245e8 <alt_find_file+0x6c>
    {
      len -= 1;
 40245dc:	e0bffe17 	ldw	r2,-8(fp)
 40245e0:	10bfffc4 	addi	r2,r2,-1
 40245e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40245e8:	e0bffe17 	ldw	r2,-8(fp)
 40245ec:	e0ffff17 	ldw	r3,-4(fp)
 40245f0:	1885883a 	add	r2,r3,r2
 40245f4:	10800003 	ldbu	r2,0(r2)
 40245f8:	10803fcc 	andi	r2,r2,255
 40245fc:	1080201c 	xori	r2,r2,128
 4024600:	10bfe004 	addi	r2,r2,-128
 4024604:	10800be0 	cmpeqi	r2,r2,47
 4024608:	1000081e 	bne	r2,zero,402462c <alt_find_file+0xb0>
 402460c:	e0bffe17 	ldw	r2,-8(fp)
 4024610:	e0ffff17 	ldw	r3,-4(fp)
 4024614:	1885883a 	add	r2,r3,r2
 4024618:	10800003 	ldbu	r2,0(r2)
 402461c:	10803fcc 	andi	r2,r2,255
 4024620:	1080201c 	xori	r2,r2,128
 4024624:	10bfe004 	addi	r2,r2,-128
 4024628:	10000a1e 	bne	r2,zero,4024654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402462c:	e0bffd17 	ldw	r2,-12(fp)
 4024630:	10800217 	ldw	r2,8(r2)
 4024634:	e0fffe17 	ldw	r3,-8(fp)
 4024638:	180d883a 	mov	r6,r3
 402463c:	e17fff17 	ldw	r5,-4(fp)
 4024640:	1009883a 	mov	r4,r2
 4024644:	40248a00 	call	40248a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4024648:	1000021e 	bne	r2,zero,4024654 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402464c:	e0bffd17 	ldw	r2,-12(fp)
 4024650:	00000706 	br	4024670 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4024654:	e0bffd17 	ldw	r2,-12(fp)
 4024658:	10800017 	ldw	r2,0(r2)
 402465c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4024660:	e0fffd17 	ldw	r3,-12(fp)
 4024664:	d0a00304 	addi	r2,gp,-32756
 4024668:	18bfcc1e 	bne	r3,r2,402459c <__alt_data_end+0xfffe459c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402466c:	0005883a 	mov	r2,zero
}
 4024670:	e037883a 	mov	sp,fp
 4024674:	dfc00117 	ldw	ra,4(sp)
 4024678:	df000017 	ldw	fp,0(sp)
 402467c:	dec00204 	addi	sp,sp,8
 4024680:	f800283a 	ret

04024684 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4024684:	defffc04 	addi	sp,sp,-16
 4024688:	df000315 	stw	fp,12(sp)
 402468c:	df000304 	addi	fp,sp,12
 4024690:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4024694:	00bffa04 	movi	r2,-24
 4024698:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402469c:	e03ffd15 	stw	zero,-12(fp)
 40246a0:	00001906 	br	4024708 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40246a4:	008100f4 	movhi	r2,1027
 40246a8:	10a2fd04 	addi	r2,r2,-29708
 40246ac:	e0fffd17 	ldw	r3,-12(fp)
 40246b0:	18c00324 	muli	r3,r3,12
 40246b4:	10c5883a 	add	r2,r2,r3
 40246b8:	10800017 	ldw	r2,0(r2)
 40246bc:	10000f1e 	bne	r2,zero,40246fc <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40246c0:	008100f4 	movhi	r2,1027
 40246c4:	10a2fd04 	addi	r2,r2,-29708
 40246c8:	e0fffd17 	ldw	r3,-12(fp)
 40246cc:	18c00324 	muli	r3,r3,12
 40246d0:	10c5883a 	add	r2,r2,r3
 40246d4:	e0ffff17 	ldw	r3,-4(fp)
 40246d8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40246dc:	d0e00717 	ldw	r3,-32740(gp)
 40246e0:	e0bffd17 	ldw	r2,-12(fp)
 40246e4:	1880020e 	bge	r3,r2,40246f0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 40246e8:	e0bffd17 	ldw	r2,-12(fp)
 40246ec:	d0a00715 	stw	r2,-32740(gp)
      }
      rc = i;
 40246f0:	e0bffd17 	ldw	r2,-12(fp)
 40246f4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 40246f8:	00000606 	br	4024714 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40246fc:	e0bffd17 	ldw	r2,-12(fp)
 4024700:	10800044 	addi	r2,r2,1
 4024704:	e0bffd15 	stw	r2,-12(fp)
 4024708:	e0bffd17 	ldw	r2,-12(fp)
 402470c:	10800810 	cmplti	r2,r2,32
 4024710:	103fe41e 	bne	r2,zero,40246a4 <__alt_data_end+0xfffe46a4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4024714:	e0bffe17 	ldw	r2,-8(fp)
}
 4024718:	e037883a 	mov	sp,fp
 402471c:	df000017 	ldw	fp,0(sp)
 4024720:	dec00104 	addi	sp,sp,4
 4024724:	f800283a 	ret

04024728 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4024728:	defffb04 	addi	sp,sp,-20
 402472c:	df000415 	stw	fp,16(sp)
 4024730:	df000404 	addi	fp,sp,16
 4024734:	e13ffe15 	stw	r4,-8(fp)
 4024738:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 402473c:	e0bfff17 	ldw	r2,-4(fp)
 4024740:	10840070 	cmpltui	r2,r2,4097
 4024744:	1000021e 	bne	r2,zero,4024750 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4024748:	00840004 	movi	r2,4096
 402474c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4024750:	e0fffe17 	ldw	r3,-8(fp)
 4024754:	e0bfff17 	ldw	r2,-4(fp)
 4024758:	1885883a 	add	r2,r3,r2
 402475c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4024760:	e0bffe17 	ldw	r2,-8(fp)
 4024764:	e0bffc15 	stw	r2,-16(fp)
 4024768:	00000506 	br	4024780 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 402476c:	e0bffc17 	ldw	r2,-16(fp)
 4024770:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4024774:	e0bffc17 	ldw	r2,-16(fp)
 4024778:	10800804 	addi	r2,r2,32
 402477c:	e0bffc15 	stw	r2,-16(fp)
 4024780:	e0fffc17 	ldw	r3,-16(fp)
 4024784:	e0bffd17 	ldw	r2,-12(fp)
 4024788:	18bff836 	bltu	r3,r2,402476c <__alt_data_end+0xfffe476c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 402478c:	e0bffe17 	ldw	r2,-8(fp)
 4024790:	108007cc 	andi	r2,r2,31
 4024794:	10000226 	beq	r2,zero,40247a0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4024798:	e0bffc17 	ldw	r2,-16(fp)
 402479c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 40247a0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 40247a4:	0001883a 	nop
 40247a8:	e037883a 	mov	sp,fp
 40247ac:	df000017 	ldw	fp,0(sp)
 40247b0:	dec00104 	addi	sp,sp,4
 40247b4:	f800283a 	ret

040247b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40247b8:	defffe04 	addi	sp,sp,-8
 40247bc:	df000115 	stw	fp,4(sp)
 40247c0:	df000104 	addi	fp,sp,4
 40247c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40247c8:	e0bfff17 	ldw	r2,-4(fp)
 40247cc:	10bffe84 	addi	r2,r2,-6
 40247d0:	10c00428 	cmpgeui	r3,r2,16
 40247d4:	18001a1e 	bne	r3,zero,4024840 <alt_exception_cause_generated_bad_addr+0x88>
 40247d8:	100690ba 	slli	r3,r2,2
 40247dc:	008100b4 	movhi	r2,1026
 40247e0:	1091fc04 	addi	r2,r2,18416
 40247e4:	1885883a 	add	r2,r3,r2
 40247e8:	10800017 	ldw	r2,0(r2)
 40247ec:	1000683a 	jmp	r2
 40247f0:	04024830 	cmpltui	r16,zero,2336
 40247f4:	04024830 	cmpltui	r16,zero,2336
 40247f8:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 40247fc:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 4024800:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 4024804:	04024830 	cmpltui	r16,zero,2336
 4024808:	04024838 	rdprs	r16,zero,2336
 402480c:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 4024810:	04024830 	cmpltui	r16,zero,2336
 4024814:	04024830 	cmpltui	r16,zero,2336
 4024818:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 402481c:	04024830 	cmpltui	r16,zero,2336
 4024820:	04024838 	rdprs	r16,zero,2336
 4024824:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 4024828:	04024840 	call	402484 <__alt_mem_sdram_controller_2+0x402484>
 402482c:	04024830 	cmpltui	r16,zero,2336
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4024830:	00800044 	movi	r2,1
 4024834:	00000306 	br	4024844 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4024838:	0005883a 	mov	r2,zero
 402483c:	00000106 	br	4024844 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4024840:	0005883a 	mov	r2,zero
  }
}
 4024844:	e037883a 	mov	sp,fp
 4024848:	df000017 	ldw	fp,0(sp)
 402484c:	dec00104 	addi	sp,sp,4
 4024850:	f800283a 	ret

04024854 <atexit>:
 4024854:	200b883a 	mov	r5,r4
 4024858:	000f883a 	mov	r7,zero
 402485c:	000d883a 	mov	r6,zero
 4024860:	0009883a 	mov	r4,zero
 4024864:	4024f101 	jmpi	4024f10 <__register_exitproc>

04024868 <exit>:
 4024868:	defffe04 	addi	sp,sp,-8
 402486c:	000b883a 	mov	r5,zero
 4024870:	dc000015 	stw	r16,0(sp)
 4024874:	dfc00115 	stw	ra,4(sp)
 4024878:	2021883a 	mov	r16,r4
 402487c:	40250280 	call	4025028 <__call_exitprocs>
 4024880:	008100f4 	movhi	r2,1027
 4024884:	10a57304 	addi	r2,r2,-27188
 4024888:	11000017 	ldw	r4,0(r2)
 402488c:	20800f17 	ldw	r2,60(r4)
 4024890:	10000126 	beq	r2,zero,4024898 <exit+0x30>
 4024894:	103ee83a 	callr	r2
 4024898:	8009883a 	mov	r4,r16
 402489c:	4026d540 	call	4026d54 <_exit>

040248a0 <memcmp>:
 40248a0:	01c000c4 	movi	r7,3
 40248a4:	3980192e 	bgeu	r7,r6,402490c <memcmp+0x6c>
 40248a8:	2144b03a 	or	r2,r4,r5
 40248ac:	11c4703a 	and	r2,r2,r7
 40248b0:	10000f26 	beq	r2,zero,40248f0 <memcmp+0x50>
 40248b4:	20800003 	ldbu	r2,0(r4)
 40248b8:	28c00003 	ldbu	r3,0(r5)
 40248bc:	10c0151e 	bne	r2,r3,4024914 <memcmp+0x74>
 40248c0:	31bfff84 	addi	r6,r6,-2
 40248c4:	01ffffc4 	movi	r7,-1
 40248c8:	00000406 	br	40248dc <memcmp+0x3c>
 40248cc:	20800003 	ldbu	r2,0(r4)
 40248d0:	28c00003 	ldbu	r3,0(r5)
 40248d4:	31bfffc4 	addi	r6,r6,-1
 40248d8:	10c00e1e 	bne	r2,r3,4024914 <memcmp+0x74>
 40248dc:	21000044 	addi	r4,r4,1
 40248e0:	29400044 	addi	r5,r5,1
 40248e4:	31fff91e 	bne	r6,r7,40248cc <__alt_data_end+0xfffe48cc>
 40248e8:	0005883a 	mov	r2,zero
 40248ec:	f800283a 	ret
 40248f0:	20c00017 	ldw	r3,0(r4)
 40248f4:	28800017 	ldw	r2,0(r5)
 40248f8:	18bfee1e 	bne	r3,r2,40248b4 <__alt_data_end+0xfffe48b4>
 40248fc:	31bfff04 	addi	r6,r6,-4
 4024900:	21000104 	addi	r4,r4,4
 4024904:	29400104 	addi	r5,r5,4
 4024908:	39bff936 	bltu	r7,r6,40248f0 <__alt_data_end+0xfffe48f0>
 402490c:	303fe91e 	bne	r6,zero,40248b4 <__alt_data_end+0xfffe48b4>
 4024910:	003ff506 	br	40248e8 <__alt_data_end+0xfffe48e8>
 4024914:	10c5c83a 	sub	r2,r2,r3
 4024918:	f800283a 	ret

0402491c <memcpy>:
 402491c:	defffd04 	addi	sp,sp,-12
 4024920:	dfc00215 	stw	ra,8(sp)
 4024924:	dc400115 	stw	r17,4(sp)
 4024928:	dc000015 	stw	r16,0(sp)
 402492c:	00c003c4 	movi	r3,15
 4024930:	2005883a 	mov	r2,r4
 4024934:	1980452e 	bgeu	r3,r6,4024a4c <memcpy+0x130>
 4024938:	2906b03a 	or	r3,r5,r4
 402493c:	18c000cc 	andi	r3,r3,3
 4024940:	1800441e 	bne	r3,zero,4024a54 <memcpy+0x138>
 4024944:	347ffc04 	addi	r17,r6,-16
 4024948:	8822d13a 	srli	r17,r17,4
 402494c:	28c00104 	addi	r3,r5,4
 4024950:	23400104 	addi	r13,r4,4
 4024954:	8820913a 	slli	r16,r17,4
 4024958:	2b000204 	addi	r12,r5,8
 402495c:	22c00204 	addi	r11,r4,8
 4024960:	84000504 	addi	r16,r16,20
 4024964:	2a800304 	addi	r10,r5,12
 4024968:	22400304 	addi	r9,r4,12
 402496c:	2c21883a 	add	r16,r5,r16
 4024970:	2811883a 	mov	r8,r5
 4024974:	200f883a 	mov	r7,r4
 4024978:	41000017 	ldw	r4,0(r8)
 402497c:	1fc00017 	ldw	ra,0(r3)
 4024980:	63c00017 	ldw	r15,0(r12)
 4024984:	39000015 	stw	r4,0(r7)
 4024988:	53800017 	ldw	r14,0(r10)
 402498c:	6fc00015 	stw	ra,0(r13)
 4024990:	5bc00015 	stw	r15,0(r11)
 4024994:	4b800015 	stw	r14,0(r9)
 4024998:	18c00404 	addi	r3,r3,16
 402499c:	39c00404 	addi	r7,r7,16
 40249a0:	42000404 	addi	r8,r8,16
 40249a4:	6b400404 	addi	r13,r13,16
 40249a8:	63000404 	addi	r12,r12,16
 40249ac:	5ac00404 	addi	r11,r11,16
 40249b0:	52800404 	addi	r10,r10,16
 40249b4:	4a400404 	addi	r9,r9,16
 40249b8:	1c3fef1e 	bne	r3,r16,4024978 <__alt_data_end+0xfffe4978>
 40249bc:	89c00044 	addi	r7,r17,1
 40249c0:	380e913a 	slli	r7,r7,4
 40249c4:	310003cc 	andi	r4,r6,15
 40249c8:	02c000c4 	movi	r11,3
 40249cc:	11c7883a 	add	r3,r2,r7
 40249d0:	29cb883a 	add	r5,r5,r7
 40249d4:	5900212e 	bgeu	r11,r4,4024a5c <memcpy+0x140>
 40249d8:	1813883a 	mov	r9,r3
 40249dc:	2811883a 	mov	r8,r5
 40249e0:	200f883a 	mov	r7,r4
 40249e4:	42800017 	ldw	r10,0(r8)
 40249e8:	4a400104 	addi	r9,r9,4
 40249ec:	39ffff04 	addi	r7,r7,-4
 40249f0:	4abfff15 	stw	r10,-4(r9)
 40249f4:	42000104 	addi	r8,r8,4
 40249f8:	59fffa36 	bltu	r11,r7,40249e4 <__alt_data_end+0xfffe49e4>
 40249fc:	213fff04 	addi	r4,r4,-4
 4024a00:	2008d0ba 	srli	r4,r4,2
 4024a04:	318000cc 	andi	r6,r6,3
 4024a08:	21000044 	addi	r4,r4,1
 4024a0c:	2109883a 	add	r4,r4,r4
 4024a10:	2109883a 	add	r4,r4,r4
 4024a14:	1907883a 	add	r3,r3,r4
 4024a18:	290b883a 	add	r5,r5,r4
 4024a1c:	30000626 	beq	r6,zero,4024a38 <memcpy+0x11c>
 4024a20:	198d883a 	add	r6,r3,r6
 4024a24:	29c00003 	ldbu	r7,0(r5)
 4024a28:	18c00044 	addi	r3,r3,1
 4024a2c:	29400044 	addi	r5,r5,1
 4024a30:	19ffffc5 	stb	r7,-1(r3)
 4024a34:	19bffb1e 	bne	r3,r6,4024a24 <__alt_data_end+0xfffe4a24>
 4024a38:	dfc00217 	ldw	ra,8(sp)
 4024a3c:	dc400117 	ldw	r17,4(sp)
 4024a40:	dc000017 	ldw	r16,0(sp)
 4024a44:	dec00304 	addi	sp,sp,12
 4024a48:	f800283a 	ret
 4024a4c:	2007883a 	mov	r3,r4
 4024a50:	003ff206 	br	4024a1c <__alt_data_end+0xfffe4a1c>
 4024a54:	2007883a 	mov	r3,r4
 4024a58:	003ff106 	br	4024a20 <__alt_data_end+0xfffe4a20>
 4024a5c:	200d883a 	mov	r6,r4
 4024a60:	003fee06 	br	4024a1c <__alt_data_end+0xfffe4a1c>

04024a64 <_putc_r>:
 4024a64:	defffc04 	addi	sp,sp,-16
 4024a68:	dc000215 	stw	r16,8(sp)
 4024a6c:	dfc00315 	stw	ra,12(sp)
 4024a70:	2021883a 	mov	r16,r4
 4024a74:	20000226 	beq	r4,zero,4024a80 <_putc_r+0x1c>
 4024a78:	20800e17 	ldw	r2,56(r4)
 4024a7c:	10001b26 	beq	r2,zero,4024aec <_putc_r+0x88>
 4024a80:	30800217 	ldw	r2,8(r6)
 4024a84:	10bfffc4 	addi	r2,r2,-1
 4024a88:	30800215 	stw	r2,8(r6)
 4024a8c:	10000a16 	blt	r2,zero,4024ab8 <_putc_r+0x54>
 4024a90:	30800017 	ldw	r2,0(r6)
 4024a94:	11400005 	stb	r5,0(r2)
 4024a98:	30800017 	ldw	r2,0(r6)
 4024a9c:	10c00044 	addi	r3,r2,1
 4024aa0:	30c00015 	stw	r3,0(r6)
 4024aa4:	10800003 	ldbu	r2,0(r2)
 4024aa8:	dfc00317 	ldw	ra,12(sp)
 4024aac:	dc000217 	ldw	r16,8(sp)
 4024ab0:	dec00404 	addi	sp,sp,16
 4024ab4:	f800283a 	ret
 4024ab8:	30c00617 	ldw	r3,24(r6)
 4024abc:	10c00616 	blt	r2,r3,4024ad8 <_putc_r+0x74>
 4024ac0:	30800017 	ldw	r2,0(r6)
 4024ac4:	00c00284 	movi	r3,10
 4024ac8:	11400005 	stb	r5,0(r2)
 4024acc:	30800017 	ldw	r2,0(r6)
 4024ad0:	11400003 	ldbu	r5,0(r2)
 4024ad4:	28fff11e 	bne	r5,r3,4024a9c <__alt_data_end+0xfffe4a9c>
 4024ad8:	8009883a 	mov	r4,r16
 4024adc:	dfc00317 	ldw	ra,12(sp)
 4024ae0:	dc000217 	ldw	r16,8(sp)
 4024ae4:	dec00404 	addi	sp,sp,16
 4024ae8:	4024c641 	jmpi	4024c64 <__swbuf_r>
 4024aec:	d9400015 	stw	r5,0(sp)
 4024af0:	d9800115 	stw	r6,4(sp)
 4024af4:	40257a00 	call	40257a0 <__sinit>
 4024af8:	d9800117 	ldw	r6,4(sp)
 4024afc:	d9400017 	ldw	r5,0(sp)
 4024b00:	003fdf06 	br	4024a80 <__alt_data_end+0xfffe4a80>

04024b04 <putc>:
 4024b04:	008100f4 	movhi	r2,1027
 4024b08:	defffc04 	addi	sp,sp,-16
 4024b0c:	10a57404 	addi	r2,r2,-27184
 4024b10:	dc000115 	stw	r16,4(sp)
 4024b14:	14000017 	ldw	r16,0(r2)
 4024b18:	dc400215 	stw	r17,8(sp)
 4024b1c:	dfc00315 	stw	ra,12(sp)
 4024b20:	2023883a 	mov	r17,r4
 4024b24:	80000226 	beq	r16,zero,4024b30 <putc+0x2c>
 4024b28:	80800e17 	ldw	r2,56(r16)
 4024b2c:	10001a26 	beq	r2,zero,4024b98 <putc+0x94>
 4024b30:	28800217 	ldw	r2,8(r5)
 4024b34:	10bfffc4 	addi	r2,r2,-1
 4024b38:	28800215 	stw	r2,8(r5)
 4024b3c:	10000b16 	blt	r2,zero,4024b6c <putc+0x68>
 4024b40:	28800017 	ldw	r2,0(r5)
 4024b44:	14400005 	stb	r17,0(r2)
 4024b48:	28800017 	ldw	r2,0(r5)
 4024b4c:	10c00044 	addi	r3,r2,1
 4024b50:	28c00015 	stw	r3,0(r5)
 4024b54:	10800003 	ldbu	r2,0(r2)
 4024b58:	dfc00317 	ldw	ra,12(sp)
 4024b5c:	dc400217 	ldw	r17,8(sp)
 4024b60:	dc000117 	ldw	r16,4(sp)
 4024b64:	dec00404 	addi	sp,sp,16
 4024b68:	f800283a 	ret
 4024b6c:	28c00617 	ldw	r3,24(r5)
 4024b70:	10c00e16 	blt	r2,r3,4024bac <putc+0xa8>
 4024b74:	28800017 	ldw	r2,0(r5)
 4024b78:	01000284 	movi	r4,10
 4024b7c:	14400005 	stb	r17,0(r2)
 4024b80:	28800017 	ldw	r2,0(r5)
 4024b84:	10c00003 	ldbu	r3,0(r2)
 4024b88:	193ff01e 	bne	r3,r4,4024b4c <__alt_data_end+0xfffe4b4c>
 4024b8c:	280d883a 	mov	r6,r5
 4024b90:	180b883a 	mov	r5,r3
 4024b94:	00000706 	br	4024bb4 <putc+0xb0>
 4024b98:	8009883a 	mov	r4,r16
 4024b9c:	d9400015 	stw	r5,0(sp)
 4024ba0:	40257a00 	call	40257a0 <__sinit>
 4024ba4:	d9400017 	ldw	r5,0(sp)
 4024ba8:	003fe106 	br	4024b30 <__alt_data_end+0xfffe4b30>
 4024bac:	280d883a 	mov	r6,r5
 4024bb0:	880b883a 	mov	r5,r17
 4024bb4:	8009883a 	mov	r4,r16
 4024bb8:	dfc00317 	ldw	ra,12(sp)
 4024bbc:	dc400217 	ldw	r17,8(sp)
 4024bc0:	dc000117 	ldw	r16,4(sp)
 4024bc4:	dec00404 	addi	sp,sp,16
 4024bc8:	4024c641 	jmpi	4024c64 <__swbuf_r>

04024bcc <strlen>:
 4024bcc:	208000cc 	andi	r2,r4,3
 4024bd0:	10002026 	beq	r2,zero,4024c54 <strlen+0x88>
 4024bd4:	20800007 	ldb	r2,0(r4)
 4024bd8:	10002026 	beq	r2,zero,4024c5c <strlen+0x90>
 4024bdc:	2005883a 	mov	r2,r4
 4024be0:	00000206 	br	4024bec <strlen+0x20>
 4024be4:	10c00007 	ldb	r3,0(r2)
 4024be8:	18001826 	beq	r3,zero,4024c4c <strlen+0x80>
 4024bec:	10800044 	addi	r2,r2,1
 4024bf0:	10c000cc 	andi	r3,r2,3
 4024bf4:	183ffb1e 	bne	r3,zero,4024be4 <__alt_data_end+0xfffe4be4>
 4024bf8:	10c00017 	ldw	r3,0(r2)
 4024bfc:	01ffbff4 	movhi	r7,65279
 4024c00:	39ffbfc4 	addi	r7,r7,-257
 4024c04:	00ca303a 	nor	r5,zero,r3
 4024c08:	01a02074 	movhi	r6,32897
 4024c0c:	19c7883a 	add	r3,r3,r7
 4024c10:	31a02004 	addi	r6,r6,-32640
 4024c14:	1946703a 	and	r3,r3,r5
 4024c18:	1986703a 	and	r3,r3,r6
 4024c1c:	1800091e 	bne	r3,zero,4024c44 <strlen+0x78>
 4024c20:	10800104 	addi	r2,r2,4
 4024c24:	10c00017 	ldw	r3,0(r2)
 4024c28:	19cb883a 	add	r5,r3,r7
 4024c2c:	00c6303a 	nor	r3,zero,r3
 4024c30:	28c6703a 	and	r3,r5,r3
 4024c34:	1986703a 	and	r3,r3,r6
 4024c38:	183ff926 	beq	r3,zero,4024c20 <__alt_data_end+0xfffe4c20>
 4024c3c:	00000106 	br	4024c44 <strlen+0x78>
 4024c40:	10800044 	addi	r2,r2,1
 4024c44:	10c00007 	ldb	r3,0(r2)
 4024c48:	183ffd1e 	bne	r3,zero,4024c40 <__alt_data_end+0xfffe4c40>
 4024c4c:	1105c83a 	sub	r2,r2,r4
 4024c50:	f800283a 	ret
 4024c54:	2005883a 	mov	r2,r4
 4024c58:	003fe706 	br	4024bf8 <__alt_data_end+0xfffe4bf8>
 4024c5c:	0005883a 	mov	r2,zero
 4024c60:	f800283a 	ret

04024c64 <__swbuf_r>:
 4024c64:	defffb04 	addi	sp,sp,-20
 4024c68:	dcc00315 	stw	r19,12(sp)
 4024c6c:	dc800215 	stw	r18,8(sp)
 4024c70:	dc000015 	stw	r16,0(sp)
 4024c74:	dfc00415 	stw	ra,16(sp)
 4024c78:	dc400115 	stw	r17,4(sp)
 4024c7c:	2025883a 	mov	r18,r4
 4024c80:	2827883a 	mov	r19,r5
 4024c84:	3021883a 	mov	r16,r6
 4024c88:	20000226 	beq	r4,zero,4024c94 <__swbuf_r+0x30>
 4024c8c:	20800e17 	ldw	r2,56(r4)
 4024c90:	10004226 	beq	r2,zero,4024d9c <__swbuf_r+0x138>
 4024c94:	80800617 	ldw	r2,24(r16)
 4024c98:	8100030b 	ldhu	r4,12(r16)
 4024c9c:	80800215 	stw	r2,8(r16)
 4024ca0:	2080020c 	andi	r2,r4,8
 4024ca4:	10003626 	beq	r2,zero,4024d80 <__swbuf_r+0x11c>
 4024ca8:	80c00417 	ldw	r3,16(r16)
 4024cac:	18003426 	beq	r3,zero,4024d80 <__swbuf_r+0x11c>
 4024cb0:	2088000c 	andi	r2,r4,8192
 4024cb4:	9c403fcc 	andi	r17,r19,255
 4024cb8:	10001a26 	beq	r2,zero,4024d24 <__swbuf_r+0xc0>
 4024cbc:	80800017 	ldw	r2,0(r16)
 4024cc0:	81000517 	ldw	r4,20(r16)
 4024cc4:	10c7c83a 	sub	r3,r2,r3
 4024cc8:	1900200e 	bge	r3,r4,4024d4c <__swbuf_r+0xe8>
 4024ccc:	18c00044 	addi	r3,r3,1
 4024cd0:	81000217 	ldw	r4,8(r16)
 4024cd4:	11400044 	addi	r5,r2,1
 4024cd8:	81400015 	stw	r5,0(r16)
 4024cdc:	213fffc4 	addi	r4,r4,-1
 4024ce0:	81000215 	stw	r4,8(r16)
 4024ce4:	14c00005 	stb	r19,0(r2)
 4024ce8:	80800517 	ldw	r2,20(r16)
 4024cec:	10c01e26 	beq	r2,r3,4024d68 <__swbuf_r+0x104>
 4024cf0:	8080030b 	ldhu	r2,12(r16)
 4024cf4:	1080004c 	andi	r2,r2,1
 4024cf8:	10000226 	beq	r2,zero,4024d04 <__swbuf_r+0xa0>
 4024cfc:	00800284 	movi	r2,10
 4024d00:	88801926 	beq	r17,r2,4024d68 <__swbuf_r+0x104>
 4024d04:	8805883a 	mov	r2,r17
 4024d08:	dfc00417 	ldw	ra,16(sp)
 4024d0c:	dcc00317 	ldw	r19,12(sp)
 4024d10:	dc800217 	ldw	r18,8(sp)
 4024d14:	dc400117 	ldw	r17,4(sp)
 4024d18:	dc000017 	ldw	r16,0(sp)
 4024d1c:	dec00504 	addi	sp,sp,20
 4024d20:	f800283a 	ret
 4024d24:	81401917 	ldw	r5,100(r16)
 4024d28:	00b7ffc4 	movi	r2,-8193
 4024d2c:	21080014 	ori	r4,r4,8192
 4024d30:	2884703a 	and	r2,r5,r2
 4024d34:	80801915 	stw	r2,100(r16)
 4024d38:	80800017 	ldw	r2,0(r16)
 4024d3c:	8100030d 	sth	r4,12(r16)
 4024d40:	81000517 	ldw	r4,20(r16)
 4024d44:	10c7c83a 	sub	r3,r2,r3
 4024d48:	193fe016 	blt	r3,r4,4024ccc <__alt_data_end+0xfffe4ccc>
 4024d4c:	800b883a 	mov	r5,r16
 4024d50:	9009883a 	mov	r4,r18
 4024d54:	40253c40 	call	40253c4 <_fflush_r>
 4024d58:	1000071e 	bne	r2,zero,4024d78 <__swbuf_r+0x114>
 4024d5c:	80800017 	ldw	r2,0(r16)
 4024d60:	00c00044 	movi	r3,1
 4024d64:	003fda06 	br	4024cd0 <__alt_data_end+0xfffe4cd0>
 4024d68:	800b883a 	mov	r5,r16
 4024d6c:	9009883a 	mov	r4,r18
 4024d70:	40253c40 	call	40253c4 <_fflush_r>
 4024d74:	103fe326 	beq	r2,zero,4024d04 <__alt_data_end+0xfffe4d04>
 4024d78:	00bfffc4 	movi	r2,-1
 4024d7c:	003fe206 	br	4024d08 <__alt_data_end+0xfffe4d08>
 4024d80:	800b883a 	mov	r5,r16
 4024d84:	9009883a 	mov	r4,r18
 4024d88:	4024dbc0 	call	4024dbc <__swsetup_r>
 4024d8c:	103ffa1e 	bne	r2,zero,4024d78 <__alt_data_end+0xfffe4d78>
 4024d90:	8100030b 	ldhu	r4,12(r16)
 4024d94:	80c00417 	ldw	r3,16(r16)
 4024d98:	003fc506 	br	4024cb0 <__alt_data_end+0xfffe4cb0>
 4024d9c:	40257a00 	call	40257a0 <__sinit>
 4024da0:	003fbc06 	br	4024c94 <__alt_data_end+0xfffe4c94>

04024da4 <__swbuf>:
 4024da4:	008100f4 	movhi	r2,1027
 4024da8:	10a57404 	addi	r2,r2,-27184
 4024dac:	280d883a 	mov	r6,r5
 4024db0:	200b883a 	mov	r5,r4
 4024db4:	11000017 	ldw	r4,0(r2)
 4024db8:	4024c641 	jmpi	4024c64 <__swbuf_r>

04024dbc <__swsetup_r>:
 4024dbc:	008100f4 	movhi	r2,1027
 4024dc0:	defffd04 	addi	sp,sp,-12
 4024dc4:	10a57404 	addi	r2,r2,-27184
 4024dc8:	dc400115 	stw	r17,4(sp)
 4024dcc:	2023883a 	mov	r17,r4
 4024dd0:	11000017 	ldw	r4,0(r2)
 4024dd4:	dc000015 	stw	r16,0(sp)
 4024dd8:	dfc00215 	stw	ra,8(sp)
 4024ddc:	2821883a 	mov	r16,r5
 4024de0:	20000226 	beq	r4,zero,4024dec <__swsetup_r+0x30>
 4024de4:	20800e17 	ldw	r2,56(r4)
 4024de8:	10003126 	beq	r2,zero,4024eb0 <__swsetup_r+0xf4>
 4024dec:	8080030b 	ldhu	r2,12(r16)
 4024df0:	10c0020c 	andi	r3,r2,8
 4024df4:	1009883a 	mov	r4,r2
 4024df8:	18000f26 	beq	r3,zero,4024e38 <__swsetup_r+0x7c>
 4024dfc:	80c00417 	ldw	r3,16(r16)
 4024e00:	18001526 	beq	r3,zero,4024e58 <__swsetup_r+0x9c>
 4024e04:	1100004c 	andi	r4,r2,1
 4024e08:	20001c1e 	bne	r4,zero,4024e7c <__swsetup_r+0xc0>
 4024e0c:	1080008c 	andi	r2,r2,2
 4024e10:	1000291e 	bne	r2,zero,4024eb8 <__swsetup_r+0xfc>
 4024e14:	80800517 	ldw	r2,20(r16)
 4024e18:	80800215 	stw	r2,8(r16)
 4024e1c:	18001c26 	beq	r3,zero,4024e90 <__swsetup_r+0xd4>
 4024e20:	0005883a 	mov	r2,zero
 4024e24:	dfc00217 	ldw	ra,8(sp)
 4024e28:	dc400117 	ldw	r17,4(sp)
 4024e2c:	dc000017 	ldw	r16,0(sp)
 4024e30:	dec00304 	addi	sp,sp,12
 4024e34:	f800283a 	ret
 4024e38:	2080040c 	andi	r2,r4,16
 4024e3c:	10002e26 	beq	r2,zero,4024ef8 <__swsetup_r+0x13c>
 4024e40:	2080010c 	andi	r2,r4,4
 4024e44:	10001e1e 	bne	r2,zero,4024ec0 <__swsetup_r+0x104>
 4024e48:	80c00417 	ldw	r3,16(r16)
 4024e4c:	20800214 	ori	r2,r4,8
 4024e50:	8080030d 	sth	r2,12(r16)
 4024e54:	183feb1e 	bne	r3,zero,4024e04 <__alt_data_end+0xfffe4e04>
 4024e58:	1100a00c 	andi	r4,r2,640
 4024e5c:	01408004 	movi	r5,512
 4024e60:	217fe826 	beq	r4,r5,4024e04 <__alt_data_end+0xfffe4e04>
 4024e64:	800b883a 	mov	r5,r16
 4024e68:	8809883a 	mov	r4,r17
 4024e6c:	4025dac0 	call	4025dac <__smakebuf_r>
 4024e70:	8080030b 	ldhu	r2,12(r16)
 4024e74:	80c00417 	ldw	r3,16(r16)
 4024e78:	003fe206 	br	4024e04 <__alt_data_end+0xfffe4e04>
 4024e7c:	80800517 	ldw	r2,20(r16)
 4024e80:	80000215 	stw	zero,8(r16)
 4024e84:	0085c83a 	sub	r2,zero,r2
 4024e88:	80800615 	stw	r2,24(r16)
 4024e8c:	183fe41e 	bne	r3,zero,4024e20 <__alt_data_end+0xfffe4e20>
 4024e90:	80c0030b 	ldhu	r3,12(r16)
 4024e94:	0005883a 	mov	r2,zero
 4024e98:	1900200c 	andi	r4,r3,128
 4024e9c:	203fe126 	beq	r4,zero,4024e24 <__alt_data_end+0xfffe4e24>
 4024ea0:	18c01014 	ori	r3,r3,64
 4024ea4:	80c0030d 	sth	r3,12(r16)
 4024ea8:	00bfffc4 	movi	r2,-1
 4024eac:	003fdd06 	br	4024e24 <__alt_data_end+0xfffe4e24>
 4024eb0:	40257a00 	call	40257a0 <__sinit>
 4024eb4:	003fcd06 	br	4024dec <__alt_data_end+0xfffe4dec>
 4024eb8:	0005883a 	mov	r2,zero
 4024ebc:	003fd606 	br	4024e18 <__alt_data_end+0xfffe4e18>
 4024ec0:	81400c17 	ldw	r5,48(r16)
 4024ec4:	28000626 	beq	r5,zero,4024ee0 <__swsetup_r+0x124>
 4024ec8:	80801004 	addi	r2,r16,64
 4024ecc:	28800326 	beq	r5,r2,4024edc <__swsetup_r+0x120>
 4024ed0:	8809883a 	mov	r4,r17
 4024ed4:	40259140 	call	4025914 <_free_r>
 4024ed8:	8100030b 	ldhu	r4,12(r16)
 4024edc:	80000c15 	stw	zero,48(r16)
 4024ee0:	80c00417 	ldw	r3,16(r16)
 4024ee4:	00bff6c4 	movi	r2,-37
 4024ee8:	1108703a 	and	r4,r2,r4
 4024eec:	80000115 	stw	zero,4(r16)
 4024ef0:	80c00015 	stw	r3,0(r16)
 4024ef4:	003fd506 	br	4024e4c <__alt_data_end+0xfffe4e4c>
 4024ef8:	00800244 	movi	r2,9
 4024efc:	88800015 	stw	r2,0(r17)
 4024f00:	20801014 	ori	r2,r4,64
 4024f04:	8080030d 	sth	r2,12(r16)
 4024f08:	00bfffc4 	movi	r2,-1
 4024f0c:	003fc506 	br	4024e24 <__alt_data_end+0xfffe4e24>

04024f10 <__register_exitproc>:
 4024f10:	defffa04 	addi	sp,sp,-24
 4024f14:	dc000315 	stw	r16,12(sp)
 4024f18:	040100f4 	movhi	r16,1027
 4024f1c:	84257304 	addi	r16,r16,-27188
 4024f20:	80c00017 	ldw	r3,0(r16)
 4024f24:	dc400415 	stw	r17,16(sp)
 4024f28:	dfc00515 	stw	ra,20(sp)
 4024f2c:	18805217 	ldw	r2,328(r3)
 4024f30:	2023883a 	mov	r17,r4
 4024f34:	10003726 	beq	r2,zero,4025014 <__register_exitproc+0x104>
 4024f38:	10c00117 	ldw	r3,4(r2)
 4024f3c:	010007c4 	movi	r4,31
 4024f40:	20c00e16 	blt	r4,r3,4024f7c <__register_exitproc+0x6c>
 4024f44:	1a000044 	addi	r8,r3,1
 4024f48:	8800221e 	bne	r17,zero,4024fd4 <__register_exitproc+0xc4>
 4024f4c:	18c00084 	addi	r3,r3,2
 4024f50:	18c7883a 	add	r3,r3,r3
 4024f54:	18c7883a 	add	r3,r3,r3
 4024f58:	12000115 	stw	r8,4(r2)
 4024f5c:	10c7883a 	add	r3,r2,r3
 4024f60:	19400015 	stw	r5,0(r3)
 4024f64:	0005883a 	mov	r2,zero
 4024f68:	dfc00517 	ldw	ra,20(sp)
 4024f6c:	dc400417 	ldw	r17,16(sp)
 4024f70:	dc000317 	ldw	r16,12(sp)
 4024f74:	dec00604 	addi	sp,sp,24
 4024f78:	f800283a 	ret
 4024f7c:	00800034 	movhi	r2,0
 4024f80:	10800004 	addi	r2,r2,0
 4024f84:	10002626 	beq	r2,zero,4025020 <__register_exitproc+0x110>
 4024f88:	01006404 	movi	r4,400
 4024f8c:	d9400015 	stw	r5,0(sp)
 4024f90:	d9800115 	stw	r6,4(sp)
 4024f94:	d9c00215 	stw	r7,8(sp)
 4024f98:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4024f9c:	d9400017 	ldw	r5,0(sp)
 4024fa0:	d9800117 	ldw	r6,4(sp)
 4024fa4:	d9c00217 	ldw	r7,8(sp)
 4024fa8:	10001d26 	beq	r2,zero,4025020 <__register_exitproc+0x110>
 4024fac:	81000017 	ldw	r4,0(r16)
 4024fb0:	10000115 	stw	zero,4(r2)
 4024fb4:	02000044 	movi	r8,1
 4024fb8:	22405217 	ldw	r9,328(r4)
 4024fbc:	0007883a 	mov	r3,zero
 4024fc0:	12400015 	stw	r9,0(r2)
 4024fc4:	20805215 	stw	r2,328(r4)
 4024fc8:	10006215 	stw	zero,392(r2)
 4024fcc:	10006315 	stw	zero,396(r2)
 4024fd0:	883fde26 	beq	r17,zero,4024f4c <__alt_data_end+0xfffe4f4c>
 4024fd4:	18c9883a 	add	r4,r3,r3
 4024fd8:	2109883a 	add	r4,r4,r4
 4024fdc:	1109883a 	add	r4,r2,r4
 4024fe0:	21802215 	stw	r6,136(r4)
 4024fe4:	01800044 	movi	r6,1
 4024fe8:	12406217 	ldw	r9,392(r2)
 4024fec:	30cc983a 	sll	r6,r6,r3
 4024ff0:	4992b03a 	or	r9,r9,r6
 4024ff4:	12406215 	stw	r9,392(r2)
 4024ff8:	21c04215 	stw	r7,264(r4)
 4024ffc:	01000084 	movi	r4,2
 4025000:	893fd21e 	bne	r17,r4,4024f4c <__alt_data_end+0xfffe4f4c>
 4025004:	11006317 	ldw	r4,396(r2)
 4025008:	218cb03a 	or	r6,r4,r6
 402500c:	11806315 	stw	r6,396(r2)
 4025010:	003fce06 	br	4024f4c <__alt_data_end+0xfffe4f4c>
 4025014:	18805304 	addi	r2,r3,332
 4025018:	18805215 	stw	r2,328(r3)
 402501c:	003fc606 	br	4024f38 <__alt_data_end+0xfffe4f38>
 4025020:	00bfffc4 	movi	r2,-1
 4025024:	003fd006 	br	4024f68 <__alt_data_end+0xfffe4f68>

04025028 <__call_exitprocs>:
 4025028:	defff504 	addi	sp,sp,-44
 402502c:	df000915 	stw	fp,36(sp)
 4025030:	dd400615 	stw	r21,24(sp)
 4025034:	dc800315 	stw	r18,12(sp)
 4025038:	dfc00a15 	stw	ra,40(sp)
 402503c:	ddc00815 	stw	r23,32(sp)
 4025040:	dd800715 	stw	r22,28(sp)
 4025044:	dd000515 	stw	r20,20(sp)
 4025048:	dcc00415 	stw	r19,16(sp)
 402504c:	dc400215 	stw	r17,8(sp)
 4025050:	dc000115 	stw	r16,4(sp)
 4025054:	d9000015 	stw	r4,0(sp)
 4025058:	2839883a 	mov	fp,r5
 402505c:	04800044 	movi	r18,1
 4025060:	057fffc4 	movi	r21,-1
 4025064:	008100f4 	movhi	r2,1027
 4025068:	10a57304 	addi	r2,r2,-27188
 402506c:	12000017 	ldw	r8,0(r2)
 4025070:	45005217 	ldw	r20,328(r8)
 4025074:	44c05204 	addi	r19,r8,328
 4025078:	a0001c26 	beq	r20,zero,40250ec <__call_exitprocs+0xc4>
 402507c:	a0800117 	ldw	r2,4(r20)
 4025080:	15ffffc4 	addi	r23,r2,-1
 4025084:	b8000d16 	blt	r23,zero,40250bc <__call_exitprocs+0x94>
 4025088:	14000044 	addi	r16,r2,1
 402508c:	8421883a 	add	r16,r16,r16
 4025090:	8421883a 	add	r16,r16,r16
 4025094:	84402004 	addi	r17,r16,128
 4025098:	a463883a 	add	r17,r20,r17
 402509c:	a421883a 	add	r16,r20,r16
 40250a0:	e0001e26 	beq	fp,zero,402511c <__call_exitprocs+0xf4>
 40250a4:	80804017 	ldw	r2,256(r16)
 40250a8:	e0801c26 	beq	fp,r2,402511c <__call_exitprocs+0xf4>
 40250ac:	bdffffc4 	addi	r23,r23,-1
 40250b0:	843fff04 	addi	r16,r16,-4
 40250b4:	8c7fff04 	addi	r17,r17,-4
 40250b8:	bd7ff91e 	bne	r23,r21,40250a0 <__alt_data_end+0xfffe50a0>
 40250bc:	00800034 	movhi	r2,0
 40250c0:	10800004 	addi	r2,r2,0
 40250c4:	10000926 	beq	r2,zero,40250ec <__call_exitprocs+0xc4>
 40250c8:	a0800117 	ldw	r2,4(r20)
 40250cc:	1000301e 	bne	r2,zero,4025190 <__call_exitprocs+0x168>
 40250d0:	a0800017 	ldw	r2,0(r20)
 40250d4:	10003226 	beq	r2,zero,40251a0 <__call_exitprocs+0x178>
 40250d8:	a009883a 	mov	r4,r20
 40250dc:	98800015 	stw	r2,0(r19)
 40250e0:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 40250e4:	9d000017 	ldw	r20,0(r19)
 40250e8:	a03fe41e 	bne	r20,zero,402507c <__alt_data_end+0xfffe507c>
 40250ec:	dfc00a17 	ldw	ra,40(sp)
 40250f0:	df000917 	ldw	fp,36(sp)
 40250f4:	ddc00817 	ldw	r23,32(sp)
 40250f8:	dd800717 	ldw	r22,28(sp)
 40250fc:	dd400617 	ldw	r21,24(sp)
 4025100:	dd000517 	ldw	r20,20(sp)
 4025104:	dcc00417 	ldw	r19,16(sp)
 4025108:	dc800317 	ldw	r18,12(sp)
 402510c:	dc400217 	ldw	r17,8(sp)
 4025110:	dc000117 	ldw	r16,4(sp)
 4025114:	dec00b04 	addi	sp,sp,44
 4025118:	f800283a 	ret
 402511c:	a0800117 	ldw	r2,4(r20)
 4025120:	80c00017 	ldw	r3,0(r16)
 4025124:	10bfffc4 	addi	r2,r2,-1
 4025128:	15c01426 	beq	r2,r23,402517c <__call_exitprocs+0x154>
 402512c:	80000015 	stw	zero,0(r16)
 4025130:	183fde26 	beq	r3,zero,40250ac <__alt_data_end+0xfffe50ac>
 4025134:	95c8983a 	sll	r4,r18,r23
 4025138:	a0806217 	ldw	r2,392(r20)
 402513c:	a5800117 	ldw	r22,4(r20)
 4025140:	2084703a 	and	r2,r4,r2
 4025144:	10000b26 	beq	r2,zero,4025174 <__call_exitprocs+0x14c>
 4025148:	a0806317 	ldw	r2,396(r20)
 402514c:	2088703a 	and	r4,r4,r2
 4025150:	20000c1e 	bne	r4,zero,4025184 <__call_exitprocs+0x15c>
 4025154:	89400017 	ldw	r5,0(r17)
 4025158:	d9000017 	ldw	r4,0(sp)
 402515c:	183ee83a 	callr	r3
 4025160:	a0800117 	ldw	r2,4(r20)
 4025164:	15bfbf1e 	bne	r2,r22,4025064 <__alt_data_end+0xfffe5064>
 4025168:	98800017 	ldw	r2,0(r19)
 402516c:	153fcf26 	beq	r2,r20,40250ac <__alt_data_end+0xfffe50ac>
 4025170:	003fbc06 	br	4025064 <__alt_data_end+0xfffe5064>
 4025174:	183ee83a 	callr	r3
 4025178:	003ff906 	br	4025160 <__alt_data_end+0xfffe5160>
 402517c:	a5c00115 	stw	r23,4(r20)
 4025180:	003feb06 	br	4025130 <__alt_data_end+0xfffe5130>
 4025184:	89000017 	ldw	r4,0(r17)
 4025188:	183ee83a 	callr	r3
 402518c:	003ff406 	br	4025160 <__alt_data_end+0xfffe5160>
 4025190:	a0800017 	ldw	r2,0(r20)
 4025194:	a027883a 	mov	r19,r20
 4025198:	1029883a 	mov	r20,r2
 402519c:	003fb606 	br	4025078 <__alt_data_end+0xfffe5078>
 40251a0:	0005883a 	mov	r2,zero
 40251a4:	003ffb06 	br	4025194 <__alt_data_end+0xfffe5194>

040251a8 <__sflush_r>:
 40251a8:	2880030b 	ldhu	r2,12(r5)
 40251ac:	defffb04 	addi	sp,sp,-20
 40251b0:	dcc00315 	stw	r19,12(sp)
 40251b4:	dc400115 	stw	r17,4(sp)
 40251b8:	dfc00415 	stw	ra,16(sp)
 40251bc:	dc800215 	stw	r18,8(sp)
 40251c0:	dc000015 	stw	r16,0(sp)
 40251c4:	10c0020c 	andi	r3,r2,8
 40251c8:	2823883a 	mov	r17,r5
 40251cc:	2027883a 	mov	r19,r4
 40251d0:	1800311e 	bne	r3,zero,4025298 <__sflush_r+0xf0>
 40251d4:	28c00117 	ldw	r3,4(r5)
 40251d8:	10820014 	ori	r2,r2,2048
 40251dc:	2880030d 	sth	r2,12(r5)
 40251e0:	00c04b0e 	bge	zero,r3,4025310 <__sflush_r+0x168>
 40251e4:	8a000a17 	ldw	r8,40(r17)
 40251e8:	40002326 	beq	r8,zero,4025278 <__sflush_r+0xd0>
 40251ec:	9c000017 	ldw	r16,0(r19)
 40251f0:	10c4000c 	andi	r3,r2,4096
 40251f4:	98000015 	stw	zero,0(r19)
 40251f8:	18004826 	beq	r3,zero,402531c <__sflush_r+0x174>
 40251fc:	89801417 	ldw	r6,80(r17)
 4025200:	10c0010c 	andi	r3,r2,4
 4025204:	18000626 	beq	r3,zero,4025220 <__sflush_r+0x78>
 4025208:	88c00117 	ldw	r3,4(r17)
 402520c:	88800c17 	ldw	r2,48(r17)
 4025210:	30cdc83a 	sub	r6,r6,r3
 4025214:	10000226 	beq	r2,zero,4025220 <__sflush_r+0x78>
 4025218:	88800f17 	ldw	r2,60(r17)
 402521c:	308dc83a 	sub	r6,r6,r2
 4025220:	89400717 	ldw	r5,28(r17)
 4025224:	000f883a 	mov	r7,zero
 4025228:	9809883a 	mov	r4,r19
 402522c:	403ee83a 	callr	r8
 4025230:	00ffffc4 	movi	r3,-1
 4025234:	10c04426 	beq	r2,r3,4025348 <__sflush_r+0x1a0>
 4025238:	88c0030b 	ldhu	r3,12(r17)
 402523c:	89000417 	ldw	r4,16(r17)
 4025240:	88000115 	stw	zero,4(r17)
 4025244:	197dffcc 	andi	r5,r3,63487
 4025248:	8940030d 	sth	r5,12(r17)
 402524c:	89000015 	stw	r4,0(r17)
 4025250:	18c4000c 	andi	r3,r3,4096
 4025254:	18002c1e 	bne	r3,zero,4025308 <__sflush_r+0x160>
 4025258:	89400c17 	ldw	r5,48(r17)
 402525c:	9c000015 	stw	r16,0(r19)
 4025260:	28000526 	beq	r5,zero,4025278 <__sflush_r+0xd0>
 4025264:	88801004 	addi	r2,r17,64
 4025268:	28800226 	beq	r5,r2,4025274 <__sflush_r+0xcc>
 402526c:	9809883a 	mov	r4,r19
 4025270:	40259140 	call	4025914 <_free_r>
 4025274:	88000c15 	stw	zero,48(r17)
 4025278:	0005883a 	mov	r2,zero
 402527c:	dfc00417 	ldw	ra,16(sp)
 4025280:	dcc00317 	ldw	r19,12(sp)
 4025284:	dc800217 	ldw	r18,8(sp)
 4025288:	dc400117 	ldw	r17,4(sp)
 402528c:	dc000017 	ldw	r16,0(sp)
 4025290:	dec00504 	addi	sp,sp,20
 4025294:	f800283a 	ret
 4025298:	2c800417 	ldw	r18,16(r5)
 402529c:	903ff626 	beq	r18,zero,4025278 <__alt_data_end+0xfffe5278>
 40252a0:	2c000017 	ldw	r16,0(r5)
 40252a4:	108000cc 	andi	r2,r2,3
 40252a8:	2c800015 	stw	r18,0(r5)
 40252ac:	84a1c83a 	sub	r16,r16,r18
 40252b0:	1000131e 	bne	r2,zero,4025300 <__sflush_r+0x158>
 40252b4:	28800517 	ldw	r2,20(r5)
 40252b8:	88800215 	stw	r2,8(r17)
 40252bc:	04000316 	blt	zero,r16,40252cc <__sflush_r+0x124>
 40252c0:	003fed06 	br	4025278 <__alt_data_end+0xfffe5278>
 40252c4:	90a5883a 	add	r18,r18,r2
 40252c8:	043feb0e 	bge	zero,r16,4025278 <__alt_data_end+0xfffe5278>
 40252cc:	88800917 	ldw	r2,36(r17)
 40252d0:	89400717 	ldw	r5,28(r17)
 40252d4:	800f883a 	mov	r7,r16
 40252d8:	900d883a 	mov	r6,r18
 40252dc:	9809883a 	mov	r4,r19
 40252e0:	103ee83a 	callr	r2
 40252e4:	80a1c83a 	sub	r16,r16,r2
 40252e8:	00bff616 	blt	zero,r2,40252c4 <__alt_data_end+0xfffe52c4>
 40252ec:	88c0030b 	ldhu	r3,12(r17)
 40252f0:	00bfffc4 	movi	r2,-1
 40252f4:	18c01014 	ori	r3,r3,64
 40252f8:	88c0030d 	sth	r3,12(r17)
 40252fc:	003fdf06 	br	402527c <__alt_data_end+0xfffe527c>
 4025300:	0005883a 	mov	r2,zero
 4025304:	003fec06 	br	40252b8 <__alt_data_end+0xfffe52b8>
 4025308:	88801415 	stw	r2,80(r17)
 402530c:	003fd206 	br	4025258 <__alt_data_end+0xfffe5258>
 4025310:	28c00f17 	ldw	r3,60(r5)
 4025314:	00ffb316 	blt	zero,r3,40251e4 <__alt_data_end+0xfffe51e4>
 4025318:	003fd706 	br	4025278 <__alt_data_end+0xfffe5278>
 402531c:	89400717 	ldw	r5,28(r17)
 4025320:	000d883a 	mov	r6,zero
 4025324:	01c00044 	movi	r7,1
 4025328:	9809883a 	mov	r4,r19
 402532c:	403ee83a 	callr	r8
 4025330:	100d883a 	mov	r6,r2
 4025334:	00bfffc4 	movi	r2,-1
 4025338:	30801426 	beq	r6,r2,402538c <__sflush_r+0x1e4>
 402533c:	8880030b 	ldhu	r2,12(r17)
 4025340:	8a000a17 	ldw	r8,40(r17)
 4025344:	003fae06 	br	4025200 <__alt_data_end+0xfffe5200>
 4025348:	98c00017 	ldw	r3,0(r19)
 402534c:	183fba26 	beq	r3,zero,4025238 <__alt_data_end+0xfffe5238>
 4025350:	01000744 	movi	r4,29
 4025354:	19000626 	beq	r3,r4,4025370 <__sflush_r+0x1c8>
 4025358:	01000584 	movi	r4,22
 402535c:	19000426 	beq	r3,r4,4025370 <__sflush_r+0x1c8>
 4025360:	88c0030b 	ldhu	r3,12(r17)
 4025364:	18c01014 	ori	r3,r3,64
 4025368:	88c0030d 	sth	r3,12(r17)
 402536c:	003fc306 	br	402527c <__alt_data_end+0xfffe527c>
 4025370:	8880030b 	ldhu	r2,12(r17)
 4025374:	88c00417 	ldw	r3,16(r17)
 4025378:	88000115 	stw	zero,4(r17)
 402537c:	10bdffcc 	andi	r2,r2,63487
 4025380:	8880030d 	sth	r2,12(r17)
 4025384:	88c00015 	stw	r3,0(r17)
 4025388:	003fb306 	br	4025258 <__alt_data_end+0xfffe5258>
 402538c:	98800017 	ldw	r2,0(r19)
 4025390:	103fea26 	beq	r2,zero,402533c <__alt_data_end+0xfffe533c>
 4025394:	00c00744 	movi	r3,29
 4025398:	10c00226 	beq	r2,r3,40253a4 <__sflush_r+0x1fc>
 402539c:	00c00584 	movi	r3,22
 40253a0:	10c0031e 	bne	r2,r3,40253b0 <__sflush_r+0x208>
 40253a4:	9c000015 	stw	r16,0(r19)
 40253a8:	0005883a 	mov	r2,zero
 40253ac:	003fb306 	br	402527c <__alt_data_end+0xfffe527c>
 40253b0:	88c0030b 	ldhu	r3,12(r17)
 40253b4:	3005883a 	mov	r2,r6
 40253b8:	18c01014 	ori	r3,r3,64
 40253bc:	88c0030d 	sth	r3,12(r17)
 40253c0:	003fae06 	br	402527c <__alt_data_end+0xfffe527c>

040253c4 <_fflush_r>:
 40253c4:	defffd04 	addi	sp,sp,-12
 40253c8:	dc000115 	stw	r16,4(sp)
 40253cc:	dfc00215 	stw	ra,8(sp)
 40253d0:	2021883a 	mov	r16,r4
 40253d4:	20000226 	beq	r4,zero,40253e0 <_fflush_r+0x1c>
 40253d8:	20800e17 	ldw	r2,56(r4)
 40253dc:	10000c26 	beq	r2,zero,4025410 <_fflush_r+0x4c>
 40253e0:	2880030f 	ldh	r2,12(r5)
 40253e4:	1000051e 	bne	r2,zero,40253fc <_fflush_r+0x38>
 40253e8:	0005883a 	mov	r2,zero
 40253ec:	dfc00217 	ldw	ra,8(sp)
 40253f0:	dc000117 	ldw	r16,4(sp)
 40253f4:	dec00304 	addi	sp,sp,12
 40253f8:	f800283a 	ret
 40253fc:	8009883a 	mov	r4,r16
 4025400:	dfc00217 	ldw	ra,8(sp)
 4025404:	dc000117 	ldw	r16,4(sp)
 4025408:	dec00304 	addi	sp,sp,12
 402540c:	40251a81 	jmpi	40251a8 <__sflush_r>
 4025410:	d9400015 	stw	r5,0(sp)
 4025414:	40257a00 	call	40257a0 <__sinit>
 4025418:	d9400017 	ldw	r5,0(sp)
 402541c:	003ff006 	br	40253e0 <__alt_data_end+0xfffe53e0>

04025420 <fflush>:
 4025420:	20000526 	beq	r4,zero,4025438 <fflush+0x18>
 4025424:	008100f4 	movhi	r2,1027
 4025428:	10a57404 	addi	r2,r2,-27184
 402542c:	200b883a 	mov	r5,r4
 4025430:	11000017 	ldw	r4,0(r2)
 4025434:	40253c41 	jmpi	40253c4 <_fflush_r>
 4025438:	008100f4 	movhi	r2,1027
 402543c:	10a57304 	addi	r2,r2,-27188
 4025440:	11000017 	ldw	r4,0(r2)
 4025444:	014100b4 	movhi	r5,1026
 4025448:	2954f104 	addi	r5,r5,21444
 402544c:	4025ce81 	jmpi	4025ce8 <_fwalk_reent>

04025450 <__fp_unlock>:
 4025450:	0005883a 	mov	r2,zero
 4025454:	f800283a 	ret

04025458 <_cleanup_r>:
 4025458:	014100b4 	movhi	r5,1026
 402545c:	295ab804 	addi	r5,r5,27360
 4025460:	4025ce81 	jmpi	4025ce8 <_fwalk_reent>

04025464 <__sinit.part.1>:
 4025464:	defff704 	addi	sp,sp,-36
 4025468:	00c100b4 	movhi	r3,1026
 402546c:	dfc00815 	stw	ra,32(sp)
 4025470:	ddc00715 	stw	r23,28(sp)
 4025474:	dd800615 	stw	r22,24(sp)
 4025478:	dd400515 	stw	r21,20(sp)
 402547c:	dd000415 	stw	r20,16(sp)
 4025480:	dcc00315 	stw	r19,12(sp)
 4025484:	dc800215 	stw	r18,8(sp)
 4025488:	dc400115 	stw	r17,4(sp)
 402548c:	dc000015 	stw	r16,0(sp)
 4025490:	18d51604 	addi	r3,r3,21592
 4025494:	24000117 	ldw	r16,4(r4)
 4025498:	20c00f15 	stw	r3,60(r4)
 402549c:	2080bb04 	addi	r2,r4,748
 40254a0:	00c000c4 	movi	r3,3
 40254a4:	20c0b915 	stw	r3,740(r4)
 40254a8:	2080ba15 	stw	r2,744(r4)
 40254ac:	2000b815 	stw	zero,736(r4)
 40254b0:	05c00204 	movi	r23,8
 40254b4:	00800104 	movi	r2,4
 40254b8:	2025883a 	mov	r18,r4
 40254bc:	b80d883a 	mov	r6,r23
 40254c0:	81001704 	addi	r4,r16,92
 40254c4:	000b883a 	mov	r5,zero
 40254c8:	80000015 	stw	zero,0(r16)
 40254cc:	80000115 	stw	zero,4(r16)
 40254d0:	80000215 	stw	zero,8(r16)
 40254d4:	8080030d 	sth	r2,12(r16)
 40254d8:	80001915 	stw	zero,100(r16)
 40254dc:	8000038d 	sth	zero,14(r16)
 40254e0:	80000415 	stw	zero,16(r16)
 40254e4:	80000515 	stw	zero,20(r16)
 40254e8:	80000615 	stw	zero,24(r16)
 40254ec:	40267740 	call	4026774 <memset>
 40254f0:	058100b4 	movhi	r22,1026
 40254f4:	94400217 	ldw	r17,8(r18)
 40254f8:	054100b4 	movhi	r21,1026
 40254fc:	050100b4 	movhi	r20,1026
 4025500:	04c100b4 	movhi	r19,1026
 4025504:	b59a3c04 	addi	r22,r22,26864
 4025508:	ad5a5304 	addi	r21,r21,26956
 402550c:	a51a7204 	addi	r20,r20,27080
 4025510:	9cda8904 	addi	r19,r19,27172
 4025514:	85800815 	stw	r22,32(r16)
 4025518:	85400915 	stw	r21,36(r16)
 402551c:	85000a15 	stw	r20,40(r16)
 4025520:	84c00b15 	stw	r19,44(r16)
 4025524:	84000715 	stw	r16,28(r16)
 4025528:	00800284 	movi	r2,10
 402552c:	8880030d 	sth	r2,12(r17)
 4025530:	00800044 	movi	r2,1
 4025534:	b80d883a 	mov	r6,r23
 4025538:	89001704 	addi	r4,r17,92
 402553c:	000b883a 	mov	r5,zero
 4025540:	88000015 	stw	zero,0(r17)
 4025544:	88000115 	stw	zero,4(r17)
 4025548:	88000215 	stw	zero,8(r17)
 402554c:	88001915 	stw	zero,100(r17)
 4025550:	8880038d 	sth	r2,14(r17)
 4025554:	88000415 	stw	zero,16(r17)
 4025558:	88000515 	stw	zero,20(r17)
 402555c:	88000615 	stw	zero,24(r17)
 4025560:	40267740 	call	4026774 <memset>
 4025564:	94000317 	ldw	r16,12(r18)
 4025568:	00800484 	movi	r2,18
 402556c:	8c400715 	stw	r17,28(r17)
 4025570:	8d800815 	stw	r22,32(r17)
 4025574:	8d400915 	stw	r21,36(r17)
 4025578:	8d000a15 	stw	r20,40(r17)
 402557c:	8cc00b15 	stw	r19,44(r17)
 4025580:	8080030d 	sth	r2,12(r16)
 4025584:	00800084 	movi	r2,2
 4025588:	80000015 	stw	zero,0(r16)
 402558c:	80000115 	stw	zero,4(r16)
 4025590:	80000215 	stw	zero,8(r16)
 4025594:	80001915 	stw	zero,100(r16)
 4025598:	8080038d 	sth	r2,14(r16)
 402559c:	80000415 	stw	zero,16(r16)
 40255a0:	80000515 	stw	zero,20(r16)
 40255a4:	80000615 	stw	zero,24(r16)
 40255a8:	b80d883a 	mov	r6,r23
 40255ac:	000b883a 	mov	r5,zero
 40255b0:	81001704 	addi	r4,r16,92
 40255b4:	40267740 	call	4026774 <memset>
 40255b8:	00800044 	movi	r2,1
 40255bc:	84000715 	stw	r16,28(r16)
 40255c0:	85800815 	stw	r22,32(r16)
 40255c4:	85400915 	stw	r21,36(r16)
 40255c8:	85000a15 	stw	r20,40(r16)
 40255cc:	84c00b15 	stw	r19,44(r16)
 40255d0:	90800e15 	stw	r2,56(r18)
 40255d4:	dfc00817 	ldw	ra,32(sp)
 40255d8:	ddc00717 	ldw	r23,28(sp)
 40255dc:	dd800617 	ldw	r22,24(sp)
 40255e0:	dd400517 	ldw	r21,20(sp)
 40255e4:	dd000417 	ldw	r20,16(sp)
 40255e8:	dcc00317 	ldw	r19,12(sp)
 40255ec:	dc800217 	ldw	r18,8(sp)
 40255f0:	dc400117 	ldw	r17,4(sp)
 40255f4:	dc000017 	ldw	r16,0(sp)
 40255f8:	dec00904 	addi	sp,sp,36
 40255fc:	f800283a 	ret

04025600 <__fp_lock>:
 4025600:	0005883a 	mov	r2,zero
 4025604:	f800283a 	ret

04025608 <__sfmoreglue>:
 4025608:	defffc04 	addi	sp,sp,-16
 402560c:	dc400115 	stw	r17,4(sp)
 4025610:	2c7fffc4 	addi	r17,r5,-1
 4025614:	8c401a24 	muli	r17,r17,104
 4025618:	dc800215 	stw	r18,8(sp)
 402561c:	2825883a 	mov	r18,r5
 4025620:	89401d04 	addi	r5,r17,116
 4025624:	dc000015 	stw	r16,0(sp)
 4025628:	dfc00315 	stw	ra,12(sp)
 402562c:	4025f680 	call	4025f68 <_malloc_r>
 4025630:	1021883a 	mov	r16,r2
 4025634:	10000726 	beq	r2,zero,4025654 <__sfmoreglue+0x4c>
 4025638:	11000304 	addi	r4,r2,12
 402563c:	10000015 	stw	zero,0(r2)
 4025640:	14800115 	stw	r18,4(r2)
 4025644:	11000215 	stw	r4,8(r2)
 4025648:	89801a04 	addi	r6,r17,104
 402564c:	000b883a 	mov	r5,zero
 4025650:	40267740 	call	4026774 <memset>
 4025654:	8005883a 	mov	r2,r16
 4025658:	dfc00317 	ldw	ra,12(sp)
 402565c:	dc800217 	ldw	r18,8(sp)
 4025660:	dc400117 	ldw	r17,4(sp)
 4025664:	dc000017 	ldw	r16,0(sp)
 4025668:	dec00404 	addi	sp,sp,16
 402566c:	f800283a 	ret

04025670 <__sfp>:
 4025670:	defffb04 	addi	sp,sp,-20
 4025674:	dc000015 	stw	r16,0(sp)
 4025678:	040100f4 	movhi	r16,1027
 402567c:	84257304 	addi	r16,r16,-27188
 4025680:	dcc00315 	stw	r19,12(sp)
 4025684:	2027883a 	mov	r19,r4
 4025688:	81000017 	ldw	r4,0(r16)
 402568c:	dfc00415 	stw	ra,16(sp)
 4025690:	dc800215 	stw	r18,8(sp)
 4025694:	20800e17 	ldw	r2,56(r4)
 4025698:	dc400115 	stw	r17,4(sp)
 402569c:	1000021e 	bne	r2,zero,40256a8 <__sfp+0x38>
 40256a0:	40254640 	call	4025464 <__sinit.part.1>
 40256a4:	81000017 	ldw	r4,0(r16)
 40256a8:	2480b804 	addi	r18,r4,736
 40256ac:	047fffc4 	movi	r17,-1
 40256b0:	91000117 	ldw	r4,4(r18)
 40256b4:	94000217 	ldw	r16,8(r18)
 40256b8:	213fffc4 	addi	r4,r4,-1
 40256bc:	20000a16 	blt	r4,zero,40256e8 <__sfp+0x78>
 40256c0:	8080030f 	ldh	r2,12(r16)
 40256c4:	10000c26 	beq	r2,zero,40256f8 <__sfp+0x88>
 40256c8:	80c01d04 	addi	r3,r16,116
 40256cc:	00000206 	br	40256d8 <__sfp+0x68>
 40256d0:	18bfe60f 	ldh	r2,-104(r3)
 40256d4:	10000826 	beq	r2,zero,40256f8 <__sfp+0x88>
 40256d8:	213fffc4 	addi	r4,r4,-1
 40256dc:	1c3ffd04 	addi	r16,r3,-12
 40256e0:	18c01a04 	addi	r3,r3,104
 40256e4:	247ffa1e 	bne	r4,r17,40256d0 <__alt_data_end+0xfffe56d0>
 40256e8:	90800017 	ldw	r2,0(r18)
 40256ec:	10001d26 	beq	r2,zero,4025764 <__sfp+0xf4>
 40256f0:	1025883a 	mov	r18,r2
 40256f4:	003fee06 	br	40256b0 <__alt_data_end+0xfffe56b0>
 40256f8:	00bfffc4 	movi	r2,-1
 40256fc:	8080038d 	sth	r2,14(r16)
 4025700:	00800044 	movi	r2,1
 4025704:	8080030d 	sth	r2,12(r16)
 4025708:	80001915 	stw	zero,100(r16)
 402570c:	80000015 	stw	zero,0(r16)
 4025710:	80000215 	stw	zero,8(r16)
 4025714:	80000115 	stw	zero,4(r16)
 4025718:	80000415 	stw	zero,16(r16)
 402571c:	80000515 	stw	zero,20(r16)
 4025720:	80000615 	stw	zero,24(r16)
 4025724:	01800204 	movi	r6,8
 4025728:	000b883a 	mov	r5,zero
 402572c:	81001704 	addi	r4,r16,92
 4025730:	40267740 	call	4026774 <memset>
 4025734:	8005883a 	mov	r2,r16
 4025738:	80000c15 	stw	zero,48(r16)
 402573c:	80000d15 	stw	zero,52(r16)
 4025740:	80001115 	stw	zero,68(r16)
 4025744:	80001215 	stw	zero,72(r16)
 4025748:	dfc00417 	ldw	ra,16(sp)
 402574c:	dcc00317 	ldw	r19,12(sp)
 4025750:	dc800217 	ldw	r18,8(sp)
 4025754:	dc400117 	ldw	r17,4(sp)
 4025758:	dc000017 	ldw	r16,0(sp)
 402575c:	dec00504 	addi	sp,sp,20
 4025760:	f800283a 	ret
 4025764:	01400104 	movi	r5,4
 4025768:	9809883a 	mov	r4,r19
 402576c:	40256080 	call	4025608 <__sfmoreglue>
 4025770:	90800015 	stw	r2,0(r18)
 4025774:	103fde1e 	bne	r2,zero,40256f0 <__alt_data_end+0xfffe56f0>
 4025778:	00800304 	movi	r2,12
 402577c:	98800015 	stw	r2,0(r19)
 4025780:	0005883a 	mov	r2,zero
 4025784:	003ff006 	br	4025748 <__alt_data_end+0xfffe5748>

04025788 <_cleanup>:
 4025788:	008100f4 	movhi	r2,1027
 402578c:	10a57304 	addi	r2,r2,-27188
 4025790:	11000017 	ldw	r4,0(r2)
 4025794:	014100b4 	movhi	r5,1026
 4025798:	295ab804 	addi	r5,r5,27360
 402579c:	4025ce81 	jmpi	4025ce8 <_fwalk_reent>

040257a0 <__sinit>:
 40257a0:	20800e17 	ldw	r2,56(r4)
 40257a4:	10000126 	beq	r2,zero,40257ac <__sinit+0xc>
 40257a8:	f800283a 	ret
 40257ac:	40254641 	jmpi	4025464 <__sinit.part.1>

040257b0 <__sfp_lock_acquire>:
 40257b0:	f800283a 	ret

040257b4 <__sfp_lock_release>:
 40257b4:	f800283a 	ret

040257b8 <__sinit_lock_acquire>:
 40257b8:	f800283a 	ret

040257bc <__sinit_lock_release>:
 40257bc:	f800283a 	ret

040257c0 <__fp_lock_all>:
 40257c0:	008100f4 	movhi	r2,1027
 40257c4:	10a57404 	addi	r2,r2,-27184
 40257c8:	11000017 	ldw	r4,0(r2)
 40257cc:	014100b4 	movhi	r5,1026
 40257d0:	29558004 	addi	r5,r5,22016
 40257d4:	4025c241 	jmpi	4025c24 <_fwalk>

040257d8 <__fp_unlock_all>:
 40257d8:	008100f4 	movhi	r2,1027
 40257dc:	10a57404 	addi	r2,r2,-27184
 40257e0:	11000017 	ldw	r4,0(r2)
 40257e4:	014100b4 	movhi	r5,1026
 40257e8:	29551404 	addi	r5,r5,21584
 40257ec:	4025c241 	jmpi	4025c24 <_fwalk>

040257f0 <_malloc_trim_r>:
 40257f0:	defffb04 	addi	sp,sp,-20
 40257f4:	dcc00315 	stw	r19,12(sp)
 40257f8:	04c100f4 	movhi	r19,1027
 40257fc:	dc800215 	stw	r18,8(sp)
 4025800:	dc400115 	stw	r17,4(sp)
 4025804:	dc000015 	stw	r16,0(sp)
 4025808:	dfc00415 	stw	ra,16(sp)
 402580c:	2821883a 	mov	r16,r5
 4025810:	9ce46604 	addi	r19,r19,-28264
 4025814:	2025883a 	mov	r18,r4
 4025818:	40270640 	call	4027064 <__malloc_lock>
 402581c:	98800217 	ldw	r2,8(r19)
 4025820:	14400117 	ldw	r17,4(r2)
 4025824:	00bfff04 	movi	r2,-4
 4025828:	88a2703a 	and	r17,r17,r2
 402582c:	8c21c83a 	sub	r16,r17,r16
 4025830:	8403fbc4 	addi	r16,r16,4079
 4025834:	8020d33a 	srli	r16,r16,12
 4025838:	0083ffc4 	movi	r2,4095
 402583c:	843fffc4 	addi	r16,r16,-1
 4025840:	8020933a 	slli	r16,r16,12
 4025844:	1400060e 	bge	r2,r16,4025860 <_malloc_trim_r+0x70>
 4025848:	000b883a 	mov	r5,zero
 402584c:	9009883a 	mov	r4,r18
 4025850:	402689c0 	call	402689c <_sbrk_r>
 4025854:	98c00217 	ldw	r3,8(r19)
 4025858:	1c47883a 	add	r3,r3,r17
 402585c:	10c00a26 	beq	r2,r3,4025888 <_malloc_trim_r+0x98>
 4025860:	9009883a 	mov	r4,r18
 4025864:	40270880 	call	4027088 <__malloc_unlock>
 4025868:	0005883a 	mov	r2,zero
 402586c:	dfc00417 	ldw	ra,16(sp)
 4025870:	dcc00317 	ldw	r19,12(sp)
 4025874:	dc800217 	ldw	r18,8(sp)
 4025878:	dc400117 	ldw	r17,4(sp)
 402587c:	dc000017 	ldw	r16,0(sp)
 4025880:	dec00504 	addi	sp,sp,20
 4025884:	f800283a 	ret
 4025888:	040bc83a 	sub	r5,zero,r16
 402588c:	9009883a 	mov	r4,r18
 4025890:	402689c0 	call	402689c <_sbrk_r>
 4025894:	00ffffc4 	movi	r3,-1
 4025898:	10c00d26 	beq	r2,r3,40258d0 <_malloc_trim_r+0xe0>
 402589c:	00c100f4 	movhi	r3,1027
 40258a0:	18ec7c04 	addi	r3,r3,-19984
 40258a4:	18800017 	ldw	r2,0(r3)
 40258a8:	99000217 	ldw	r4,8(r19)
 40258ac:	8c23c83a 	sub	r17,r17,r16
 40258b0:	8c400054 	ori	r17,r17,1
 40258b4:	1421c83a 	sub	r16,r2,r16
 40258b8:	24400115 	stw	r17,4(r4)
 40258bc:	9009883a 	mov	r4,r18
 40258c0:	1c000015 	stw	r16,0(r3)
 40258c4:	40270880 	call	4027088 <__malloc_unlock>
 40258c8:	00800044 	movi	r2,1
 40258cc:	003fe706 	br	402586c <__alt_data_end+0xfffe586c>
 40258d0:	000b883a 	mov	r5,zero
 40258d4:	9009883a 	mov	r4,r18
 40258d8:	402689c0 	call	402689c <_sbrk_r>
 40258dc:	99000217 	ldw	r4,8(r19)
 40258e0:	014003c4 	movi	r5,15
 40258e4:	1107c83a 	sub	r3,r2,r4
 40258e8:	28ffdd0e 	bge	r5,r3,4025860 <__alt_data_end+0xfffe5860>
 40258ec:	014100f4 	movhi	r5,1027
 40258f0:	29657504 	addi	r5,r5,-27180
 40258f4:	29400017 	ldw	r5,0(r5)
 40258f8:	18c00054 	ori	r3,r3,1
 40258fc:	20c00115 	stw	r3,4(r4)
 4025900:	00c100f4 	movhi	r3,1027
 4025904:	1145c83a 	sub	r2,r2,r5
 4025908:	18ec7c04 	addi	r3,r3,-19984
 402590c:	18800015 	stw	r2,0(r3)
 4025910:	003fd306 	br	4025860 <__alt_data_end+0xfffe5860>

04025914 <_free_r>:
 4025914:	28004126 	beq	r5,zero,4025a1c <_free_r+0x108>
 4025918:	defffd04 	addi	sp,sp,-12
 402591c:	dc400115 	stw	r17,4(sp)
 4025920:	dc000015 	stw	r16,0(sp)
 4025924:	2023883a 	mov	r17,r4
 4025928:	2821883a 	mov	r16,r5
 402592c:	dfc00215 	stw	ra,8(sp)
 4025930:	40270640 	call	4027064 <__malloc_lock>
 4025934:	81ffff17 	ldw	r7,-4(r16)
 4025938:	00bfff84 	movi	r2,-2
 402593c:	010100f4 	movhi	r4,1027
 4025940:	81bffe04 	addi	r6,r16,-8
 4025944:	3884703a 	and	r2,r7,r2
 4025948:	21246604 	addi	r4,r4,-28264
 402594c:	308b883a 	add	r5,r6,r2
 4025950:	2a400117 	ldw	r9,4(r5)
 4025954:	22000217 	ldw	r8,8(r4)
 4025958:	00ffff04 	movi	r3,-4
 402595c:	48c6703a 	and	r3,r9,r3
 4025960:	2a005726 	beq	r5,r8,4025ac0 <_free_r+0x1ac>
 4025964:	28c00115 	stw	r3,4(r5)
 4025968:	39c0004c 	andi	r7,r7,1
 402596c:	3800091e 	bne	r7,zero,4025994 <_free_r+0x80>
 4025970:	823ffe17 	ldw	r8,-8(r16)
 4025974:	22400204 	addi	r9,r4,8
 4025978:	320dc83a 	sub	r6,r6,r8
 402597c:	31c00217 	ldw	r7,8(r6)
 4025980:	1205883a 	add	r2,r2,r8
 4025984:	3a406526 	beq	r7,r9,4025b1c <_free_r+0x208>
 4025988:	32000317 	ldw	r8,12(r6)
 402598c:	3a000315 	stw	r8,12(r7)
 4025990:	41c00215 	stw	r7,8(r8)
 4025994:	28cf883a 	add	r7,r5,r3
 4025998:	39c00117 	ldw	r7,4(r7)
 402599c:	39c0004c 	andi	r7,r7,1
 40259a0:	38003a26 	beq	r7,zero,4025a8c <_free_r+0x178>
 40259a4:	10c00054 	ori	r3,r2,1
 40259a8:	30c00115 	stw	r3,4(r6)
 40259ac:	3087883a 	add	r3,r6,r2
 40259b0:	18800015 	stw	r2,0(r3)
 40259b4:	00c07fc4 	movi	r3,511
 40259b8:	18801936 	bltu	r3,r2,4025a20 <_free_r+0x10c>
 40259bc:	1004d0fa 	srli	r2,r2,3
 40259c0:	01c00044 	movi	r7,1
 40259c4:	21400117 	ldw	r5,4(r4)
 40259c8:	10c00044 	addi	r3,r2,1
 40259cc:	18c7883a 	add	r3,r3,r3
 40259d0:	1005d0ba 	srai	r2,r2,2
 40259d4:	18c7883a 	add	r3,r3,r3
 40259d8:	18c7883a 	add	r3,r3,r3
 40259dc:	1907883a 	add	r3,r3,r4
 40259e0:	3884983a 	sll	r2,r7,r2
 40259e4:	19c00017 	ldw	r7,0(r3)
 40259e8:	1a3ffe04 	addi	r8,r3,-8
 40259ec:	1144b03a 	or	r2,r2,r5
 40259f0:	32000315 	stw	r8,12(r6)
 40259f4:	31c00215 	stw	r7,8(r6)
 40259f8:	20800115 	stw	r2,4(r4)
 40259fc:	19800015 	stw	r6,0(r3)
 4025a00:	39800315 	stw	r6,12(r7)
 4025a04:	8809883a 	mov	r4,r17
 4025a08:	dfc00217 	ldw	ra,8(sp)
 4025a0c:	dc400117 	ldw	r17,4(sp)
 4025a10:	dc000017 	ldw	r16,0(sp)
 4025a14:	dec00304 	addi	sp,sp,12
 4025a18:	40270881 	jmpi	4027088 <__malloc_unlock>
 4025a1c:	f800283a 	ret
 4025a20:	100ad27a 	srli	r5,r2,9
 4025a24:	00c00104 	movi	r3,4
 4025a28:	19404a36 	bltu	r3,r5,4025b54 <_free_r+0x240>
 4025a2c:	100ad1ba 	srli	r5,r2,6
 4025a30:	28c00e44 	addi	r3,r5,57
 4025a34:	18c7883a 	add	r3,r3,r3
 4025a38:	29400e04 	addi	r5,r5,56
 4025a3c:	18c7883a 	add	r3,r3,r3
 4025a40:	18c7883a 	add	r3,r3,r3
 4025a44:	1909883a 	add	r4,r3,r4
 4025a48:	20c00017 	ldw	r3,0(r4)
 4025a4c:	01c100f4 	movhi	r7,1027
 4025a50:	213ffe04 	addi	r4,r4,-8
 4025a54:	39e46604 	addi	r7,r7,-28264
 4025a58:	20c04426 	beq	r4,r3,4025b6c <_free_r+0x258>
 4025a5c:	01ffff04 	movi	r7,-4
 4025a60:	19400117 	ldw	r5,4(r3)
 4025a64:	29ca703a 	and	r5,r5,r7
 4025a68:	1140022e 	bgeu	r2,r5,4025a74 <_free_r+0x160>
 4025a6c:	18c00217 	ldw	r3,8(r3)
 4025a70:	20fffb1e 	bne	r4,r3,4025a60 <__alt_data_end+0xfffe5a60>
 4025a74:	19000317 	ldw	r4,12(r3)
 4025a78:	31000315 	stw	r4,12(r6)
 4025a7c:	30c00215 	stw	r3,8(r6)
 4025a80:	21800215 	stw	r6,8(r4)
 4025a84:	19800315 	stw	r6,12(r3)
 4025a88:	003fde06 	br	4025a04 <__alt_data_end+0xfffe5a04>
 4025a8c:	29c00217 	ldw	r7,8(r5)
 4025a90:	10c5883a 	add	r2,r2,r3
 4025a94:	00c100f4 	movhi	r3,1027
 4025a98:	18e46804 	addi	r3,r3,-28256
 4025a9c:	38c03b26 	beq	r7,r3,4025b8c <_free_r+0x278>
 4025aa0:	2a000317 	ldw	r8,12(r5)
 4025aa4:	11400054 	ori	r5,r2,1
 4025aa8:	3087883a 	add	r3,r6,r2
 4025aac:	3a000315 	stw	r8,12(r7)
 4025ab0:	41c00215 	stw	r7,8(r8)
 4025ab4:	31400115 	stw	r5,4(r6)
 4025ab8:	18800015 	stw	r2,0(r3)
 4025abc:	003fbd06 	br	40259b4 <__alt_data_end+0xfffe59b4>
 4025ac0:	39c0004c 	andi	r7,r7,1
 4025ac4:	10c5883a 	add	r2,r2,r3
 4025ac8:	3800071e 	bne	r7,zero,4025ae8 <_free_r+0x1d4>
 4025acc:	81fffe17 	ldw	r7,-8(r16)
 4025ad0:	31cdc83a 	sub	r6,r6,r7
 4025ad4:	30c00317 	ldw	r3,12(r6)
 4025ad8:	31400217 	ldw	r5,8(r6)
 4025adc:	11c5883a 	add	r2,r2,r7
 4025ae0:	28c00315 	stw	r3,12(r5)
 4025ae4:	19400215 	stw	r5,8(r3)
 4025ae8:	10c00054 	ori	r3,r2,1
 4025aec:	30c00115 	stw	r3,4(r6)
 4025af0:	00c100f4 	movhi	r3,1027
 4025af4:	18e57604 	addi	r3,r3,-27176
 4025af8:	18c00017 	ldw	r3,0(r3)
 4025afc:	21800215 	stw	r6,8(r4)
 4025b00:	10ffc036 	bltu	r2,r3,4025a04 <__alt_data_end+0xfffe5a04>
 4025b04:	008100f4 	movhi	r2,1027
 4025b08:	10ac7b04 	addi	r2,r2,-19988
 4025b0c:	11400017 	ldw	r5,0(r2)
 4025b10:	8809883a 	mov	r4,r17
 4025b14:	40257f00 	call	40257f0 <_malloc_trim_r>
 4025b18:	003fba06 	br	4025a04 <__alt_data_end+0xfffe5a04>
 4025b1c:	28c9883a 	add	r4,r5,r3
 4025b20:	21000117 	ldw	r4,4(r4)
 4025b24:	2100004c 	andi	r4,r4,1
 4025b28:	2000391e 	bne	r4,zero,4025c10 <_free_r+0x2fc>
 4025b2c:	29c00217 	ldw	r7,8(r5)
 4025b30:	29000317 	ldw	r4,12(r5)
 4025b34:	1885883a 	add	r2,r3,r2
 4025b38:	10c00054 	ori	r3,r2,1
 4025b3c:	39000315 	stw	r4,12(r7)
 4025b40:	21c00215 	stw	r7,8(r4)
 4025b44:	30c00115 	stw	r3,4(r6)
 4025b48:	308d883a 	add	r6,r6,r2
 4025b4c:	30800015 	stw	r2,0(r6)
 4025b50:	003fac06 	br	4025a04 <__alt_data_end+0xfffe5a04>
 4025b54:	00c00504 	movi	r3,20
 4025b58:	19401536 	bltu	r3,r5,4025bb0 <_free_r+0x29c>
 4025b5c:	28c01704 	addi	r3,r5,92
 4025b60:	18c7883a 	add	r3,r3,r3
 4025b64:	294016c4 	addi	r5,r5,91
 4025b68:	003fb406 	br	4025a3c <__alt_data_end+0xfffe5a3c>
 4025b6c:	280bd0ba 	srai	r5,r5,2
 4025b70:	00c00044 	movi	r3,1
 4025b74:	38800117 	ldw	r2,4(r7)
 4025b78:	194a983a 	sll	r5,r3,r5
 4025b7c:	2007883a 	mov	r3,r4
 4025b80:	2884b03a 	or	r2,r5,r2
 4025b84:	38800115 	stw	r2,4(r7)
 4025b88:	003fbb06 	br	4025a78 <__alt_data_end+0xfffe5a78>
 4025b8c:	21800515 	stw	r6,20(r4)
 4025b90:	21800415 	stw	r6,16(r4)
 4025b94:	10c00054 	ori	r3,r2,1
 4025b98:	31c00315 	stw	r7,12(r6)
 4025b9c:	31c00215 	stw	r7,8(r6)
 4025ba0:	30c00115 	stw	r3,4(r6)
 4025ba4:	308d883a 	add	r6,r6,r2
 4025ba8:	30800015 	stw	r2,0(r6)
 4025bac:	003f9506 	br	4025a04 <__alt_data_end+0xfffe5a04>
 4025bb0:	00c01504 	movi	r3,84
 4025bb4:	19400536 	bltu	r3,r5,4025bcc <_free_r+0x2b8>
 4025bb8:	100ad33a 	srli	r5,r2,12
 4025bbc:	28c01bc4 	addi	r3,r5,111
 4025bc0:	18c7883a 	add	r3,r3,r3
 4025bc4:	29401b84 	addi	r5,r5,110
 4025bc8:	003f9c06 	br	4025a3c <__alt_data_end+0xfffe5a3c>
 4025bcc:	00c05504 	movi	r3,340
 4025bd0:	19400536 	bltu	r3,r5,4025be8 <_free_r+0x2d4>
 4025bd4:	100ad3fa 	srli	r5,r2,15
 4025bd8:	28c01e04 	addi	r3,r5,120
 4025bdc:	18c7883a 	add	r3,r3,r3
 4025be0:	29401dc4 	addi	r5,r5,119
 4025be4:	003f9506 	br	4025a3c <__alt_data_end+0xfffe5a3c>
 4025be8:	00c15504 	movi	r3,1364
 4025bec:	19400536 	bltu	r3,r5,4025c04 <_free_r+0x2f0>
 4025bf0:	100ad4ba 	srli	r5,r2,18
 4025bf4:	28c01f44 	addi	r3,r5,125
 4025bf8:	18c7883a 	add	r3,r3,r3
 4025bfc:	29401f04 	addi	r5,r5,124
 4025c00:	003f8e06 	br	4025a3c <__alt_data_end+0xfffe5a3c>
 4025c04:	00c03f84 	movi	r3,254
 4025c08:	01401f84 	movi	r5,126
 4025c0c:	003f8b06 	br	4025a3c <__alt_data_end+0xfffe5a3c>
 4025c10:	10c00054 	ori	r3,r2,1
 4025c14:	30c00115 	stw	r3,4(r6)
 4025c18:	308d883a 	add	r6,r6,r2
 4025c1c:	30800015 	stw	r2,0(r6)
 4025c20:	003f7806 	br	4025a04 <__alt_data_end+0xfffe5a04>

04025c24 <_fwalk>:
 4025c24:	defff704 	addi	sp,sp,-36
 4025c28:	dd000415 	stw	r20,16(sp)
 4025c2c:	dfc00815 	stw	ra,32(sp)
 4025c30:	ddc00715 	stw	r23,28(sp)
 4025c34:	dd800615 	stw	r22,24(sp)
 4025c38:	dd400515 	stw	r21,20(sp)
 4025c3c:	dcc00315 	stw	r19,12(sp)
 4025c40:	dc800215 	stw	r18,8(sp)
 4025c44:	dc400115 	stw	r17,4(sp)
 4025c48:	dc000015 	stw	r16,0(sp)
 4025c4c:	2500b804 	addi	r20,r4,736
 4025c50:	a0002326 	beq	r20,zero,4025ce0 <_fwalk+0xbc>
 4025c54:	282b883a 	mov	r21,r5
 4025c58:	002f883a 	mov	r23,zero
 4025c5c:	05800044 	movi	r22,1
 4025c60:	04ffffc4 	movi	r19,-1
 4025c64:	a4400117 	ldw	r17,4(r20)
 4025c68:	a4800217 	ldw	r18,8(r20)
 4025c6c:	8c7fffc4 	addi	r17,r17,-1
 4025c70:	88000d16 	blt	r17,zero,4025ca8 <_fwalk+0x84>
 4025c74:	94000304 	addi	r16,r18,12
 4025c78:	94800384 	addi	r18,r18,14
 4025c7c:	8080000b 	ldhu	r2,0(r16)
 4025c80:	8c7fffc4 	addi	r17,r17,-1
 4025c84:	813ffd04 	addi	r4,r16,-12
 4025c88:	b080042e 	bgeu	r22,r2,4025c9c <_fwalk+0x78>
 4025c8c:	9080000f 	ldh	r2,0(r18)
 4025c90:	14c00226 	beq	r2,r19,4025c9c <_fwalk+0x78>
 4025c94:	a83ee83a 	callr	r21
 4025c98:	b8aeb03a 	or	r23,r23,r2
 4025c9c:	84001a04 	addi	r16,r16,104
 4025ca0:	94801a04 	addi	r18,r18,104
 4025ca4:	8cfff51e 	bne	r17,r19,4025c7c <__alt_data_end+0xfffe5c7c>
 4025ca8:	a5000017 	ldw	r20,0(r20)
 4025cac:	a03fed1e 	bne	r20,zero,4025c64 <__alt_data_end+0xfffe5c64>
 4025cb0:	b805883a 	mov	r2,r23
 4025cb4:	dfc00817 	ldw	ra,32(sp)
 4025cb8:	ddc00717 	ldw	r23,28(sp)
 4025cbc:	dd800617 	ldw	r22,24(sp)
 4025cc0:	dd400517 	ldw	r21,20(sp)
 4025cc4:	dd000417 	ldw	r20,16(sp)
 4025cc8:	dcc00317 	ldw	r19,12(sp)
 4025ccc:	dc800217 	ldw	r18,8(sp)
 4025cd0:	dc400117 	ldw	r17,4(sp)
 4025cd4:	dc000017 	ldw	r16,0(sp)
 4025cd8:	dec00904 	addi	sp,sp,36
 4025cdc:	f800283a 	ret
 4025ce0:	002f883a 	mov	r23,zero
 4025ce4:	003ff206 	br	4025cb0 <__alt_data_end+0xfffe5cb0>

04025ce8 <_fwalk_reent>:
 4025ce8:	defff704 	addi	sp,sp,-36
 4025cec:	dd000415 	stw	r20,16(sp)
 4025cf0:	dfc00815 	stw	ra,32(sp)
 4025cf4:	ddc00715 	stw	r23,28(sp)
 4025cf8:	dd800615 	stw	r22,24(sp)
 4025cfc:	dd400515 	stw	r21,20(sp)
 4025d00:	dcc00315 	stw	r19,12(sp)
 4025d04:	dc800215 	stw	r18,8(sp)
 4025d08:	dc400115 	stw	r17,4(sp)
 4025d0c:	dc000015 	stw	r16,0(sp)
 4025d10:	2500b804 	addi	r20,r4,736
 4025d14:	a0002326 	beq	r20,zero,4025da4 <_fwalk_reent+0xbc>
 4025d18:	282b883a 	mov	r21,r5
 4025d1c:	2027883a 	mov	r19,r4
 4025d20:	002f883a 	mov	r23,zero
 4025d24:	05800044 	movi	r22,1
 4025d28:	04bfffc4 	movi	r18,-1
 4025d2c:	a4400117 	ldw	r17,4(r20)
 4025d30:	a4000217 	ldw	r16,8(r20)
 4025d34:	8c7fffc4 	addi	r17,r17,-1
 4025d38:	88000c16 	blt	r17,zero,4025d6c <_fwalk_reent+0x84>
 4025d3c:	84000304 	addi	r16,r16,12
 4025d40:	8080000b 	ldhu	r2,0(r16)
 4025d44:	8c7fffc4 	addi	r17,r17,-1
 4025d48:	817ffd04 	addi	r5,r16,-12
 4025d4c:	b080052e 	bgeu	r22,r2,4025d64 <_fwalk_reent+0x7c>
 4025d50:	8080008f 	ldh	r2,2(r16)
 4025d54:	9809883a 	mov	r4,r19
 4025d58:	14800226 	beq	r2,r18,4025d64 <_fwalk_reent+0x7c>
 4025d5c:	a83ee83a 	callr	r21
 4025d60:	b8aeb03a 	or	r23,r23,r2
 4025d64:	84001a04 	addi	r16,r16,104
 4025d68:	8cbff51e 	bne	r17,r18,4025d40 <__alt_data_end+0xfffe5d40>
 4025d6c:	a5000017 	ldw	r20,0(r20)
 4025d70:	a03fee1e 	bne	r20,zero,4025d2c <__alt_data_end+0xfffe5d2c>
 4025d74:	b805883a 	mov	r2,r23
 4025d78:	dfc00817 	ldw	ra,32(sp)
 4025d7c:	ddc00717 	ldw	r23,28(sp)
 4025d80:	dd800617 	ldw	r22,24(sp)
 4025d84:	dd400517 	ldw	r21,20(sp)
 4025d88:	dd000417 	ldw	r20,16(sp)
 4025d8c:	dcc00317 	ldw	r19,12(sp)
 4025d90:	dc800217 	ldw	r18,8(sp)
 4025d94:	dc400117 	ldw	r17,4(sp)
 4025d98:	dc000017 	ldw	r16,0(sp)
 4025d9c:	dec00904 	addi	sp,sp,36
 4025da0:	f800283a 	ret
 4025da4:	002f883a 	mov	r23,zero
 4025da8:	003ff206 	br	4025d74 <__alt_data_end+0xfffe5d74>

04025dac <__smakebuf_r>:
 4025dac:	2880030b 	ldhu	r2,12(r5)
 4025db0:	10c0008c 	andi	r3,r2,2
 4025db4:	1800411e 	bne	r3,zero,4025ebc <__smakebuf_r+0x110>
 4025db8:	deffec04 	addi	sp,sp,-80
 4025dbc:	dc000f15 	stw	r16,60(sp)
 4025dc0:	2821883a 	mov	r16,r5
 4025dc4:	2940038f 	ldh	r5,14(r5)
 4025dc8:	dc401015 	stw	r17,64(sp)
 4025dcc:	dfc01315 	stw	ra,76(sp)
 4025dd0:	dcc01215 	stw	r19,72(sp)
 4025dd4:	dc801115 	stw	r18,68(sp)
 4025dd8:	2023883a 	mov	r17,r4
 4025ddc:	28001c16 	blt	r5,zero,4025e50 <__smakebuf_r+0xa4>
 4025de0:	d80d883a 	mov	r6,sp
 4025de4:	4026be40 	call	4026be4 <_fstat_r>
 4025de8:	10001816 	blt	r2,zero,4025e4c <__smakebuf_r+0xa0>
 4025dec:	d8800117 	ldw	r2,4(sp)
 4025df0:	00e00014 	movui	r3,32768
 4025df4:	10bc000c 	andi	r2,r2,61440
 4025df8:	14c80020 	cmpeqi	r19,r2,8192
 4025dfc:	10c03726 	beq	r2,r3,4025edc <__smakebuf_r+0x130>
 4025e00:	80c0030b 	ldhu	r3,12(r16)
 4025e04:	18c20014 	ori	r3,r3,2048
 4025e08:	80c0030d 	sth	r3,12(r16)
 4025e0c:	00c80004 	movi	r3,8192
 4025e10:	10c0521e 	bne	r2,r3,4025f5c <__smakebuf_r+0x1b0>
 4025e14:	8140038f 	ldh	r5,14(r16)
 4025e18:	8809883a 	mov	r4,r17
 4025e1c:	4026c400 	call	4026c40 <_isatty_r>
 4025e20:	10004c26 	beq	r2,zero,4025f54 <__smakebuf_r+0x1a8>
 4025e24:	8080030b 	ldhu	r2,12(r16)
 4025e28:	80c010c4 	addi	r3,r16,67
 4025e2c:	80c00015 	stw	r3,0(r16)
 4025e30:	10800054 	ori	r2,r2,1
 4025e34:	8080030d 	sth	r2,12(r16)
 4025e38:	00800044 	movi	r2,1
 4025e3c:	80c00415 	stw	r3,16(r16)
 4025e40:	80800515 	stw	r2,20(r16)
 4025e44:	04810004 	movi	r18,1024
 4025e48:	00000706 	br	4025e68 <__smakebuf_r+0xbc>
 4025e4c:	8080030b 	ldhu	r2,12(r16)
 4025e50:	10c0200c 	andi	r3,r2,128
 4025e54:	18001f1e 	bne	r3,zero,4025ed4 <__smakebuf_r+0x128>
 4025e58:	04810004 	movi	r18,1024
 4025e5c:	10820014 	ori	r2,r2,2048
 4025e60:	8080030d 	sth	r2,12(r16)
 4025e64:	0027883a 	mov	r19,zero
 4025e68:	900b883a 	mov	r5,r18
 4025e6c:	8809883a 	mov	r4,r17
 4025e70:	4025f680 	call	4025f68 <_malloc_r>
 4025e74:	10002c26 	beq	r2,zero,4025f28 <__smakebuf_r+0x17c>
 4025e78:	80c0030b 	ldhu	r3,12(r16)
 4025e7c:	010100b4 	movhi	r4,1026
 4025e80:	21151604 	addi	r4,r4,21592
 4025e84:	89000f15 	stw	r4,60(r17)
 4025e88:	18c02014 	ori	r3,r3,128
 4025e8c:	80c0030d 	sth	r3,12(r16)
 4025e90:	80800015 	stw	r2,0(r16)
 4025e94:	80800415 	stw	r2,16(r16)
 4025e98:	84800515 	stw	r18,20(r16)
 4025e9c:	98001a1e 	bne	r19,zero,4025f08 <__smakebuf_r+0x15c>
 4025ea0:	dfc01317 	ldw	ra,76(sp)
 4025ea4:	dcc01217 	ldw	r19,72(sp)
 4025ea8:	dc801117 	ldw	r18,68(sp)
 4025eac:	dc401017 	ldw	r17,64(sp)
 4025eb0:	dc000f17 	ldw	r16,60(sp)
 4025eb4:	dec01404 	addi	sp,sp,80
 4025eb8:	f800283a 	ret
 4025ebc:	288010c4 	addi	r2,r5,67
 4025ec0:	28800015 	stw	r2,0(r5)
 4025ec4:	28800415 	stw	r2,16(r5)
 4025ec8:	00800044 	movi	r2,1
 4025ecc:	28800515 	stw	r2,20(r5)
 4025ed0:	f800283a 	ret
 4025ed4:	04801004 	movi	r18,64
 4025ed8:	003fe006 	br	4025e5c <__alt_data_end+0xfffe5e5c>
 4025edc:	81000a17 	ldw	r4,40(r16)
 4025ee0:	00c100b4 	movhi	r3,1026
 4025ee4:	18da7204 	addi	r3,r3,27080
 4025ee8:	20ffc51e 	bne	r4,r3,4025e00 <__alt_data_end+0xfffe5e00>
 4025eec:	8080030b 	ldhu	r2,12(r16)
 4025ef0:	04810004 	movi	r18,1024
 4025ef4:	84801315 	stw	r18,76(r16)
 4025ef8:	1484b03a 	or	r2,r2,r18
 4025efc:	8080030d 	sth	r2,12(r16)
 4025f00:	0027883a 	mov	r19,zero
 4025f04:	003fd806 	br	4025e68 <__alt_data_end+0xfffe5e68>
 4025f08:	8140038f 	ldh	r5,14(r16)
 4025f0c:	8809883a 	mov	r4,r17
 4025f10:	4026c400 	call	4026c40 <_isatty_r>
 4025f14:	103fe226 	beq	r2,zero,4025ea0 <__alt_data_end+0xfffe5ea0>
 4025f18:	8080030b 	ldhu	r2,12(r16)
 4025f1c:	10800054 	ori	r2,r2,1
 4025f20:	8080030d 	sth	r2,12(r16)
 4025f24:	003fde06 	br	4025ea0 <__alt_data_end+0xfffe5ea0>
 4025f28:	8080030b 	ldhu	r2,12(r16)
 4025f2c:	10c0800c 	andi	r3,r2,512
 4025f30:	183fdb1e 	bne	r3,zero,4025ea0 <__alt_data_end+0xfffe5ea0>
 4025f34:	10800094 	ori	r2,r2,2
 4025f38:	80c010c4 	addi	r3,r16,67
 4025f3c:	8080030d 	sth	r2,12(r16)
 4025f40:	00800044 	movi	r2,1
 4025f44:	80c00015 	stw	r3,0(r16)
 4025f48:	80c00415 	stw	r3,16(r16)
 4025f4c:	80800515 	stw	r2,20(r16)
 4025f50:	003fd306 	br	4025ea0 <__alt_data_end+0xfffe5ea0>
 4025f54:	04810004 	movi	r18,1024
 4025f58:	003fc306 	br	4025e68 <__alt_data_end+0xfffe5e68>
 4025f5c:	0027883a 	mov	r19,zero
 4025f60:	04810004 	movi	r18,1024
 4025f64:	003fc006 	br	4025e68 <__alt_data_end+0xfffe5e68>

04025f68 <_malloc_r>:
 4025f68:	defff504 	addi	sp,sp,-44
 4025f6c:	dc800315 	stw	r18,12(sp)
 4025f70:	dfc00a15 	stw	ra,40(sp)
 4025f74:	df000915 	stw	fp,36(sp)
 4025f78:	ddc00815 	stw	r23,32(sp)
 4025f7c:	dd800715 	stw	r22,28(sp)
 4025f80:	dd400615 	stw	r21,24(sp)
 4025f84:	dd000515 	stw	r20,20(sp)
 4025f88:	dcc00415 	stw	r19,16(sp)
 4025f8c:	dc400215 	stw	r17,8(sp)
 4025f90:	dc000115 	stw	r16,4(sp)
 4025f94:	288002c4 	addi	r2,r5,11
 4025f98:	00c00584 	movi	r3,22
 4025f9c:	2025883a 	mov	r18,r4
 4025fa0:	18807f2e 	bgeu	r3,r2,40261a0 <_malloc_r+0x238>
 4025fa4:	047ffe04 	movi	r17,-8
 4025fa8:	1462703a 	and	r17,r2,r17
 4025fac:	8800a316 	blt	r17,zero,402623c <_malloc_r+0x2d4>
 4025fb0:	8940a236 	bltu	r17,r5,402623c <_malloc_r+0x2d4>
 4025fb4:	40270640 	call	4027064 <__malloc_lock>
 4025fb8:	00807dc4 	movi	r2,503
 4025fbc:	1441e92e 	bgeu	r2,r17,4026764 <_malloc_r+0x7fc>
 4025fc0:	8804d27a 	srli	r2,r17,9
 4025fc4:	1000a126 	beq	r2,zero,402624c <_malloc_r+0x2e4>
 4025fc8:	00c00104 	movi	r3,4
 4025fcc:	18811e36 	bltu	r3,r2,4026448 <_malloc_r+0x4e0>
 4025fd0:	8804d1ba 	srli	r2,r17,6
 4025fd4:	12000e44 	addi	r8,r2,57
 4025fd8:	11c00e04 	addi	r7,r2,56
 4025fdc:	4209883a 	add	r4,r8,r8
 4025fe0:	04c100f4 	movhi	r19,1027
 4025fe4:	2109883a 	add	r4,r4,r4
 4025fe8:	9ce46604 	addi	r19,r19,-28264
 4025fec:	2109883a 	add	r4,r4,r4
 4025ff0:	9909883a 	add	r4,r19,r4
 4025ff4:	24000117 	ldw	r16,4(r4)
 4025ff8:	213ffe04 	addi	r4,r4,-8
 4025ffc:	24009726 	beq	r4,r16,402625c <_malloc_r+0x2f4>
 4026000:	80800117 	ldw	r2,4(r16)
 4026004:	01bfff04 	movi	r6,-4
 4026008:	014003c4 	movi	r5,15
 402600c:	1184703a 	and	r2,r2,r6
 4026010:	1447c83a 	sub	r3,r2,r17
 4026014:	28c00716 	blt	r5,r3,4026034 <_malloc_r+0xcc>
 4026018:	1800920e 	bge	r3,zero,4026264 <_malloc_r+0x2fc>
 402601c:	84000317 	ldw	r16,12(r16)
 4026020:	24008e26 	beq	r4,r16,402625c <_malloc_r+0x2f4>
 4026024:	80800117 	ldw	r2,4(r16)
 4026028:	1184703a 	and	r2,r2,r6
 402602c:	1447c83a 	sub	r3,r2,r17
 4026030:	28fff90e 	bge	r5,r3,4026018 <__alt_data_end+0xfffe6018>
 4026034:	3809883a 	mov	r4,r7
 4026038:	018100f4 	movhi	r6,1027
 402603c:	9c000417 	ldw	r16,16(r19)
 4026040:	31a46604 	addi	r6,r6,-28264
 4026044:	32000204 	addi	r8,r6,8
 4026048:	82013426 	beq	r16,r8,402651c <_malloc_r+0x5b4>
 402604c:	80c00117 	ldw	r3,4(r16)
 4026050:	00bfff04 	movi	r2,-4
 4026054:	188e703a 	and	r7,r3,r2
 4026058:	3c45c83a 	sub	r2,r7,r17
 402605c:	00c003c4 	movi	r3,15
 4026060:	18811f16 	blt	r3,r2,40264e0 <_malloc_r+0x578>
 4026064:	32000515 	stw	r8,20(r6)
 4026068:	32000415 	stw	r8,16(r6)
 402606c:	10007f0e 	bge	r2,zero,402626c <_malloc_r+0x304>
 4026070:	00807fc4 	movi	r2,511
 4026074:	11c0fd36 	bltu	r2,r7,402646c <_malloc_r+0x504>
 4026078:	3806d0fa 	srli	r3,r7,3
 402607c:	01c00044 	movi	r7,1
 4026080:	30800117 	ldw	r2,4(r6)
 4026084:	19400044 	addi	r5,r3,1
 4026088:	294b883a 	add	r5,r5,r5
 402608c:	1807d0ba 	srai	r3,r3,2
 4026090:	294b883a 	add	r5,r5,r5
 4026094:	294b883a 	add	r5,r5,r5
 4026098:	298b883a 	add	r5,r5,r6
 402609c:	38c6983a 	sll	r3,r7,r3
 40260a0:	29c00017 	ldw	r7,0(r5)
 40260a4:	2a7ffe04 	addi	r9,r5,-8
 40260a8:	1886b03a 	or	r3,r3,r2
 40260ac:	82400315 	stw	r9,12(r16)
 40260b0:	81c00215 	stw	r7,8(r16)
 40260b4:	30c00115 	stw	r3,4(r6)
 40260b8:	2c000015 	stw	r16,0(r5)
 40260bc:	3c000315 	stw	r16,12(r7)
 40260c0:	2005d0ba 	srai	r2,r4,2
 40260c4:	01400044 	movi	r5,1
 40260c8:	288a983a 	sll	r5,r5,r2
 40260cc:	19406f36 	bltu	r3,r5,402628c <_malloc_r+0x324>
 40260d0:	28c4703a 	and	r2,r5,r3
 40260d4:	10000a1e 	bne	r2,zero,4026100 <_malloc_r+0x198>
 40260d8:	00bfff04 	movi	r2,-4
 40260dc:	294b883a 	add	r5,r5,r5
 40260e0:	2088703a 	and	r4,r4,r2
 40260e4:	28c4703a 	and	r2,r5,r3
 40260e8:	21000104 	addi	r4,r4,4
 40260ec:	1000041e 	bne	r2,zero,4026100 <_malloc_r+0x198>
 40260f0:	294b883a 	add	r5,r5,r5
 40260f4:	28c4703a 	and	r2,r5,r3
 40260f8:	21000104 	addi	r4,r4,4
 40260fc:	103ffc26 	beq	r2,zero,40260f0 <__alt_data_end+0xfffe60f0>
 4026100:	02bfff04 	movi	r10,-4
 4026104:	024003c4 	movi	r9,15
 4026108:	21800044 	addi	r6,r4,1
 402610c:	318d883a 	add	r6,r6,r6
 4026110:	318d883a 	add	r6,r6,r6
 4026114:	318d883a 	add	r6,r6,r6
 4026118:	998d883a 	add	r6,r19,r6
 402611c:	333ffe04 	addi	r12,r6,-8
 4026120:	2017883a 	mov	r11,r4
 4026124:	31800104 	addi	r6,r6,4
 4026128:	34000017 	ldw	r16,0(r6)
 402612c:	31fffd04 	addi	r7,r6,-12
 4026130:	81c0041e 	bne	r16,r7,4026144 <_malloc_r+0x1dc>
 4026134:	0000fb06 	br	4026524 <_malloc_r+0x5bc>
 4026138:	1801030e 	bge	r3,zero,4026548 <_malloc_r+0x5e0>
 402613c:	84000317 	ldw	r16,12(r16)
 4026140:	81c0f826 	beq	r16,r7,4026524 <_malloc_r+0x5bc>
 4026144:	80800117 	ldw	r2,4(r16)
 4026148:	1284703a 	and	r2,r2,r10
 402614c:	1447c83a 	sub	r3,r2,r17
 4026150:	48fff90e 	bge	r9,r3,4026138 <__alt_data_end+0xfffe6138>
 4026154:	80800317 	ldw	r2,12(r16)
 4026158:	81000217 	ldw	r4,8(r16)
 402615c:	89400054 	ori	r5,r17,1
 4026160:	81400115 	stw	r5,4(r16)
 4026164:	20800315 	stw	r2,12(r4)
 4026168:	11000215 	stw	r4,8(r2)
 402616c:	8463883a 	add	r17,r16,r17
 4026170:	9c400515 	stw	r17,20(r19)
 4026174:	9c400415 	stw	r17,16(r19)
 4026178:	18800054 	ori	r2,r3,1
 402617c:	88800115 	stw	r2,4(r17)
 4026180:	8a000315 	stw	r8,12(r17)
 4026184:	8a000215 	stw	r8,8(r17)
 4026188:	88e3883a 	add	r17,r17,r3
 402618c:	88c00015 	stw	r3,0(r17)
 4026190:	9009883a 	mov	r4,r18
 4026194:	40270880 	call	4027088 <__malloc_unlock>
 4026198:	80800204 	addi	r2,r16,8
 402619c:	00001b06 	br	402620c <_malloc_r+0x2a4>
 40261a0:	04400404 	movi	r17,16
 40261a4:	89402536 	bltu	r17,r5,402623c <_malloc_r+0x2d4>
 40261a8:	40270640 	call	4027064 <__malloc_lock>
 40261ac:	00800184 	movi	r2,6
 40261b0:	01000084 	movi	r4,2
 40261b4:	04c100f4 	movhi	r19,1027
 40261b8:	1085883a 	add	r2,r2,r2
 40261bc:	9ce46604 	addi	r19,r19,-28264
 40261c0:	1085883a 	add	r2,r2,r2
 40261c4:	9885883a 	add	r2,r19,r2
 40261c8:	14000117 	ldw	r16,4(r2)
 40261cc:	10fffe04 	addi	r3,r2,-8
 40261d0:	80c0d926 	beq	r16,r3,4026538 <_malloc_r+0x5d0>
 40261d4:	80c00117 	ldw	r3,4(r16)
 40261d8:	81000317 	ldw	r4,12(r16)
 40261dc:	00bfff04 	movi	r2,-4
 40261e0:	1884703a 	and	r2,r3,r2
 40261e4:	81400217 	ldw	r5,8(r16)
 40261e8:	8085883a 	add	r2,r16,r2
 40261ec:	10c00117 	ldw	r3,4(r2)
 40261f0:	29000315 	stw	r4,12(r5)
 40261f4:	21400215 	stw	r5,8(r4)
 40261f8:	18c00054 	ori	r3,r3,1
 40261fc:	10c00115 	stw	r3,4(r2)
 4026200:	9009883a 	mov	r4,r18
 4026204:	40270880 	call	4027088 <__malloc_unlock>
 4026208:	80800204 	addi	r2,r16,8
 402620c:	dfc00a17 	ldw	ra,40(sp)
 4026210:	df000917 	ldw	fp,36(sp)
 4026214:	ddc00817 	ldw	r23,32(sp)
 4026218:	dd800717 	ldw	r22,28(sp)
 402621c:	dd400617 	ldw	r21,24(sp)
 4026220:	dd000517 	ldw	r20,20(sp)
 4026224:	dcc00417 	ldw	r19,16(sp)
 4026228:	dc800317 	ldw	r18,12(sp)
 402622c:	dc400217 	ldw	r17,8(sp)
 4026230:	dc000117 	ldw	r16,4(sp)
 4026234:	dec00b04 	addi	sp,sp,44
 4026238:	f800283a 	ret
 402623c:	00800304 	movi	r2,12
 4026240:	90800015 	stw	r2,0(r18)
 4026244:	0005883a 	mov	r2,zero
 4026248:	003ff006 	br	402620c <__alt_data_end+0xfffe620c>
 402624c:	01002004 	movi	r4,128
 4026250:	02001004 	movi	r8,64
 4026254:	01c00fc4 	movi	r7,63
 4026258:	003f6106 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 402625c:	4009883a 	mov	r4,r8
 4026260:	003f7506 	br	4026038 <__alt_data_end+0xfffe6038>
 4026264:	81000317 	ldw	r4,12(r16)
 4026268:	003fde06 	br	40261e4 <__alt_data_end+0xfffe61e4>
 402626c:	81c5883a 	add	r2,r16,r7
 4026270:	11400117 	ldw	r5,4(r2)
 4026274:	9009883a 	mov	r4,r18
 4026278:	29400054 	ori	r5,r5,1
 402627c:	11400115 	stw	r5,4(r2)
 4026280:	40270880 	call	4027088 <__malloc_unlock>
 4026284:	80800204 	addi	r2,r16,8
 4026288:	003fe006 	br	402620c <__alt_data_end+0xfffe620c>
 402628c:	9c000217 	ldw	r16,8(r19)
 4026290:	00bfff04 	movi	r2,-4
 4026294:	85800117 	ldw	r22,4(r16)
 4026298:	b0ac703a 	and	r22,r22,r2
 402629c:	b4400336 	bltu	r22,r17,40262ac <_malloc_r+0x344>
 40262a0:	b445c83a 	sub	r2,r22,r17
 40262a4:	00c003c4 	movi	r3,15
 40262a8:	18805d16 	blt	r3,r2,4026420 <_malloc_r+0x4b8>
 40262ac:	05c100f4 	movhi	r23,1027
 40262b0:	008100f4 	movhi	r2,1027
 40262b4:	10ac7b04 	addi	r2,r2,-19988
 40262b8:	bde57504 	addi	r23,r23,-27180
 40262bc:	15400017 	ldw	r21,0(r2)
 40262c0:	b8c00017 	ldw	r3,0(r23)
 40262c4:	00bfffc4 	movi	r2,-1
 40262c8:	858d883a 	add	r6,r16,r22
 40262cc:	8d6b883a 	add	r21,r17,r21
 40262d0:	1880ea26 	beq	r3,r2,402667c <_malloc_r+0x714>
 40262d4:	ad4403c4 	addi	r21,r21,4111
 40262d8:	00bc0004 	movi	r2,-4096
 40262dc:	a8aa703a 	and	r21,r21,r2
 40262e0:	a80b883a 	mov	r5,r21
 40262e4:	9009883a 	mov	r4,r18
 40262e8:	d9800015 	stw	r6,0(sp)
 40262ec:	402689c0 	call	402689c <_sbrk_r>
 40262f0:	1029883a 	mov	r20,r2
 40262f4:	00bfffc4 	movi	r2,-1
 40262f8:	d9800017 	ldw	r6,0(sp)
 40262fc:	a080e826 	beq	r20,r2,40266a0 <_malloc_r+0x738>
 4026300:	a180a636 	bltu	r20,r6,402659c <_malloc_r+0x634>
 4026304:	070100f4 	movhi	fp,1027
 4026308:	e72c7c04 	addi	fp,fp,-19984
 402630c:	e0800017 	ldw	r2,0(fp)
 4026310:	a887883a 	add	r3,r21,r2
 4026314:	e0c00015 	stw	r3,0(fp)
 4026318:	3500e626 	beq	r6,r20,40266b4 <_malloc_r+0x74c>
 402631c:	b9000017 	ldw	r4,0(r23)
 4026320:	00bfffc4 	movi	r2,-1
 4026324:	2080ee26 	beq	r4,r2,40266e0 <_malloc_r+0x778>
 4026328:	a185c83a 	sub	r2,r20,r6
 402632c:	10c5883a 	add	r2,r2,r3
 4026330:	e0800015 	stw	r2,0(fp)
 4026334:	a0c001cc 	andi	r3,r20,7
 4026338:	1800bc26 	beq	r3,zero,402662c <_malloc_r+0x6c4>
 402633c:	a0e9c83a 	sub	r20,r20,r3
 4026340:	00840204 	movi	r2,4104
 4026344:	a5000204 	addi	r20,r20,8
 4026348:	10c7c83a 	sub	r3,r2,r3
 402634c:	a545883a 	add	r2,r20,r21
 4026350:	1083ffcc 	andi	r2,r2,4095
 4026354:	18abc83a 	sub	r21,r3,r2
 4026358:	a80b883a 	mov	r5,r21
 402635c:	9009883a 	mov	r4,r18
 4026360:	402689c0 	call	402689c <_sbrk_r>
 4026364:	00ffffc4 	movi	r3,-1
 4026368:	10c0e126 	beq	r2,r3,40266f0 <_malloc_r+0x788>
 402636c:	1505c83a 	sub	r2,r2,r20
 4026370:	1545883a 	add	r2,r2,r21
 4026374:	10800054 	ori	r2,r2,1
 4026378:	e0c00017 	ldw	r3,0(fp)
 402637c:	9d000215 	stw	r20,8(r19)
 4026380:	a0800115 	stw	r2,4(r20)
 4026384:	a8c7883a 	add	r3,r21,r3
 4026388:	e0c00015 	stw	r3,0(fp)
 402638c:	84c00e26 	beq	r16,r19,40263c8 <_malloc_r+0x460>
 4026390:	018003c4 	movi	r6,15
 4026394:	3580a72e 	bgeu	r6,r22,4026634 <_malloc_r+0x6cc>
 4026398:	81400117 	ldw	r5,4(r16)
 402639c:	013ffe04 	movi	r4,-8
 40263a0:	b0bffd04 	addi	r2,r22,-12
 40263a4:	1104703a 	and	r2,r2,r4
 40263a8:	2900004c 	andi	r4,r5,1
 40263ac:	2088b03a 	or	r4,r4,r2
 40263b0:	81000115 	stw	r4,4(r16)
 40263b4:	01400144 	movi	r5,5
 40263b8:	8089883a 	add	r4,r16,r2
 40263bc:	21400115 	stw	r5,4(r4)
 40263c0:	21400215 	stw	r5,8(r4)
 40263c4:	3080cd36 	bltu	r6,r2,40266fc <_malloc_r+0x794>
 40263c8:	008100f4 	movhi	r2,1027
 40263cc:	10ac7a04 	addi	r2,r2,-19992
 40263d0:	11000017 	ldw	r4,0(r2)
 40263d4:	20c0012e 	bgeu	r4,r3,40263dc <_malloc_r+0x474>
 40263d8:	10c00015 	stw	r3,0(r2)
 40263dc:	008100f4 	movhi	r2,1027
 40263e0:	10ac7904 	addi	r2,r2,-19996
 40263e4:	11000017 	ldw	r4,0(r2)
 40263e8:	9c000217 	ldw	r16,8(r19)
 40263ec:	20c0012e 	bgeu	r4,r3,40263f4 <_malloc_r+0x48c>
 40263f0:	10c00015 	stw	r3,0(r2)
 40263f4:	80c00117 	ldw	r3,4(r16)
 40263f8:	00bfff04 	movi	r2,-4
 40263fc:	1886703a 	and	r3,r3,r2
 4026400:	1c45c83a 	sub	r2,r3,r17
 4026404:	1c400236 	bltu	r3,r17,4026410 <_malloc_r+0x4a8>
 4026408:	00c003c4 	movi	r3,15
 402640c:	18800416 	blt	r3,r2,4026420 <_malloc_r+0x4b8>
 4026410:	9009883a 	mov	r4,r18
 4026414:	40270880 	call	4027088 <__malloc_unlock>
 4026418:	0005883a 	mov	r2,zero
 402641c:	003f7b06 	br	402620c <__alt_data_end+0xfffe620c>
 4026420:	88c00054 	ori	r3,r17,1
 4026424:	80c00115 	stw	r3,4(r16)
 4026428:	8463883a 	add	r17,r16,r17
 402642c:	10800054 	ori	r2,r2,1
 4026430:	9c400215 	stw	r17,8(r19)
 4026434:	88800115 	stw	r2,4(r17)
 4026438:	9009883a 	mov	r4,r18
 402643c:	40270880 	call	4027088 <__malloc_unlock>
 4026440:	80800204 	addi	r2,r16,8
 4026444:	003f7106 	br	402620c <__alt_data_end+0xfffe620c>
 4026448:	00c00504 	movi	r3,20
 402644c:	18804a2e 	bgeu	r3,r2,4026578 <_malloc_r+0x610>
 4026450:	00c01504 	movi	r3,84
 4026454:	18806e36 	bltu	r3,r2,4026610 <_malloc_r+0x6a8>
 4026458:	8804d33a 	srli	r2,r17,12
 402645c:	12001bc4 	addi	r8,r2,111
 4026460:	11c01b84 	addi	r7,r2,110
 4026464:	4209883a 	add	r4,r8,r8
 4026468:	003edd06 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 402646c:	3804d27a 	srli	r2,r7,9
 4026470:	00c00104 	movi	r3,4
 4026474:	1880442e 	bgeu	r3,r2,4026588 <_malloc_r+0x620>
 4026478:	00c00504 	movi	r3,20
 402647c:	18808136 	bltu	r3,r2,4026684 <_malloc_r+0x71c>
 4026480:	11401704 	addi	r5,r2,92
 4026484:	10c016c4 	addi	r3,r2,91
 4026488:	294b883a 	add	r5,r5,r5
 402648c:	294b883a 	add	r5,r5,r5
 4026490:	294b883a 	add	r5,r5,r5
 4026494:	994b883a 	add	r5,r19,r5
 4026498:	28800017 	ldw	r2,0(r5)
 402649c:	018100f4 	movhi	r6,1027
 40264a0:	297ffe04 	addi	r5,r5,-8
 40264a4:	31a46604 	addi	r6,r6,-28264
 40264a8:	28806526 	beq	r5,r2,4026640 <_malloc_r+0x6d8>
 40264ac:	01bfff04 	movi	r6,-4
 40264b0:	10c00117 	ldw	r3,4(r2)
 40264b4:	1986703a 	and	r3,r3,r6
 40264b8:	38c0022e 	bgeu	r7,r3,40264c4 <_malloc_r+0x55c>
 40264bc:	10800217 	ldw	r2,8(r2)
 40264c0:	28bffb1e 	bne	r5,r2,40264b0 <__alt_data_end+0xfffe64b0>
 40264c4:	11400317 	ldw	r5,12(r2)
 40264c8:	98c00117 	ldw	r3,4(r19)
 40264cc:	81400315 	stw	r5,12(r16)
 40264d0:	80800215 	stw	r2,8(r16)
 40264d4:	2c000215 	stw	r16,8(r5)
 40264d8:	14000315 	stw	r16,12(r2)
 40264dc:	003ef806 	br	40260c0 <__alt_data_end+0xfffe60c0>
 40264e0:	88c00054 	ori	r3,r17,1
 40264e4:	80c00115 	stw	r3,4(r16)
 40264e8:	8463883a 	add	r17,r16,r17
 40264ec:	34400515 	stw	r17,20(r6)
 40264f0:	34400415 	stw	r17,16(r6)
 40264f4:	10c00054 	ori	r3,r2,1
 40264f8:	8a000315 	stw	r8,12(r17)
 40264fc:	8a000215 	stw	r8,8(r17)
 4026500:	88c00115 	stw	r3,4(r17)
 4026504:	88a3883a 	add	r17,r17,r2
 4026508:	88800015 	stw	r2,0(r17)
 402650c:	9009883a 	mov	r4,r18
 4026510:	40270880 	call	4027088 <__malloc_unlock>
 4026514:	80800204 	addi	r2,r16,8
 4026518:	003f3c06 	br	402620c <__alt_data_end+0xfffe620c>
 402651c:	30c00117 	ldw	r3,4(r6)
 4026520:	003ee706 	br	40260c0 <__alt_data_end+0xfffe60c0>
 4026524:	5ac00044 	addi	r11,r11,1
 4026528:	588000cc 	andi	r2,r11,3
 402652c:	31800204 	addi	r6,r6,8
 4026530:	103efd1e 	bne	r2,zero,4026128 <__alt_data_end+0xfffe6128>
 4026534:	00002406 	br	40265c8 <_malloc_r+0x660>
 4026538:	14000317 	ldw	r16,12(r2)
 402653c:	143f251e 	bne	r2,r16,40261d4 <__alt_data_end+0xfffe61d4>
 4026540:	21000084 	addi	r4,r4,2
 4026544:	003ebc06 	br	4026038 <__alt_data_end+0xfffe6038>
 4026548:	8085883a 	add	r2,r16,r2
 402654c:	10c00117 	ldw	r3,4(r2)
 4026550:	81000317 	ldw	r4,12(r16)
 4026554:	81400217 	ldw	r5,8(r16)
 4026558:	18c00054 	ori	r3,r3,1
 402655c:	10c00115 	stw	r3,4(r2)
 4026560:	29000315 	stw	r4,12(r5)
 4026564:	21400215 	stw	r5,8(r4)
 4026568:	9009883a 	mov	r4,r18
 402656c:	40270880 	call	4027088 <__malloc_unlock>
 4026570:	80800204 	addi	r2,r16,8
 4026574:	003f2506 	br	402620c <__alt_data_end+0xfffe620c>
 4026578:	12001704 	addi	r8,r2,92
 402657c:	11c016c4 	addi	r7,r2,91
 4026580:	4209883a 	add	r4,r8,r8
 4026584:	003e9606 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 4026588:	3804d1ba 	srli	r2,r7,6
 402658c:	11400e44 	addi	r5,r2,57
 4026590:	10c00e04 	addi	r3,r2,56
 4026594:	294b883a 	add	r5,r5,r5
 4026598:	003fbc06 	br	402648c <__alt_data_end+0xfffe648c>
 402659c:	84ff5926 	beq	r16,r19,4026304 <__alt_data_end+0xfffe6304>
 40265a0:	008100f4 	movhi	r2,1027
 40265a4:	10a46604 	addi	r2,r2,-28264
 40265a8:	14000217 	ldw	r16,8(r2)
 40265ac:	00bfff04 	movi	r2,-4
 40265b0:	80c00117 	ldw	r3,4(r16)
 40265b4:	1886703a 	and	r3,r3,r2
 40265b8:	003f9106 	br	4026400 <__alt_data_end+0xfffe6400>
 40265bc:	60800217 	ldw	r2,8(r12)
 40265c0:	213fffc4 	addi	r4,r4,-1
 40265c4:	1300651e 	bne	r2,r12,402675c <_malloc_r+0x7f4>
 40265c8:	208000cc 	andi	r2,r4,3
 40265cc:	633ffe04 	addi	r12,r12,-8
 40265d0:	103ffa1e 	bne	r2,zero,40265bc <__alt_data_end+0xfffe65bc>
 40265d4:	98800117 	ldw	r2,4(r19)
 40265d8:	0146303a 	nor	r3,zero,r5
 40265dc:	1884703a 	and	r2,r3,r2
 40265e0:	98800115 	stw	r2,4(r19)
 40265e4:	294b883a 	add	r5,r5,r5
 40265e8:	117f2836 	bltu	r2,r5,402628c <__alt_data_end+0xfffe628c>
 40265ec:	283f2726 	beq	r5,zero,402628c <__alt_data_end+0xfffe628c>
 40265f0:	2886703a 	and	r3,r5,r2
 40265f4:	5809883a 	mov	r4,r11
 40265f8:	183ec31e 	bne	r3,zero,4026108 <__alt_data_end+0xfffe6108>
 40265fc:	294b883a 	add	r5,r5,r5
 4026600:	2886703a 	and	r3,r5,r2
 4026604:	21000104 	addi	r4,r4,4
 4026608:	183ffc26 	beq	r3,zero,40265fc <__alt_data_end+0xfffe65fc>
 402660c:	003ebe06 	br	4026108 <__alt_data_end+0xfffe6108>
 4026610:	00c05504 	movi	r3,340
 4026614:	18801236 	bltu	r3,r2,4026660 <_malloc_r+0x6f8>
 4026618:	8804d3fa 	srli	r2,r17,15
 402661c:	12001e04 	addi	r8,r2,120
 4026620:	11c01dc4 	addi	r7,r2,119
 4026624:	4209883a 	add	r4,r8,r8
 4026628:	003e6d06 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 402662c:	00c40004 	movi	r3,4096
 4026630:	003f4606 	br	402634c <__alt_data_end+0xfffe634c>
 4026634:	00800044 	movi	r2,1
 4026638:	a0800115 	stw	r2,4(r20)
 402663c:	003f7406 	br	4026410 <__alt_data_end+0xfffe6410>
 4026640:	1805d0ba 	srai	r2,r3,2
 4026644:	01c00044 	movi	r7,1
 4026648:	30c00117 	ldw	r3,4(r6)
 402664c:	388e983a 	sll	r7,r7,r2
 4026650:	2805883a 	mov	r2,r5
 4026654:	38c6b03a 	or	r3,r7,r3
 4026658:	30c00115 	stw	r3,4(r6)
 402665c:	003f9b06 	br	40264cc <__alt_data_end+0xfffe64cc>
 4026660:	00c15504 	movi	r3,1364
 4026664:	18801a36 	bltu	r3,r2,40266d0 <_malloc_r+0x768>
 4026668:	8804d4ba 	srli	r2,r17,18
 402666c:	12001f44 	addi	r8,r2,125
 4026670:	11c01f04 	addi	r7,r2,124
 4026674:	4209883a 	add	r4,r8,r8
 4026678:	003e5906 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 402667c:	ad400404 	addi	r21,r21,16
 4026680:	003f1706 	br	40262e0 <__alt_data_end+0xfffe62e0>
 4026684:	00c01504 	movi	r3,84
 4026688:	18802336 	bltu	r3,r2,4026718 <_malloc_r+0x7b0>
 402668c:	3804d33a 	srli	r2,r7,12
 4026690:	11401bc4 	addi	r5,r2,111
 4026694:	10c01b84 	addi	r3,r2,110
 4026698:	294b883a 	add	r5,r5,r5
 402669c:	003f7b06 	br	402648c <__alt_data_end+0xfffe648c>
 40266a0:	9c000217 	ldw	r16,8(r19)
 40266a4:	00bfff04 	movi	r2,-4
 40266a8:	80c00117 	ldw	r3,4(r16)
 40266ac:	1886703a 	and	r3,r3,r2
 40266b0:	003f5306 	br	4026400 <__alt_data_end+0xfffe6400>
 40266b4:	3083ffcc 	andi	r2,r6,4095
 40266b8:	103f181e 	bne	r2,zero,402631c <__alt_data_end+0xfffe631c>
 40266bc:	99000217 	ldw	r4,8(r19)
 40266c0:	b545883a 	add	r2,r22,r21
 40266c4:	10800054 	ori	r2,r2,1
 40266c8:	20800115 	stw	r2,4(r4)
 40266cc:	003f3e06 	br	40263c8 <__alt_data_end+0xfffe63c8>
 40266d0:	01003f84 	movi	r4,254
 40266d4:	02001fc4 	movi	r8,127
 40266d8:	01c01f84 	movi	r7,126
 40266dc:	003e4006 	br	4025fe0 <__alt_data_end+0xfffe5fe0>
 40266e0:	008100f4 	movhi	r2,1027
 40266e4:	10a57504 	addi	r2,r2,-27180
 40266e8:	15000015 	stw	r20,0(r2)
 40266ec:	003f1106 	br	4026334 <__alt_data_end+0xfffe6334>
 40266f0:	00800044 	movi	r2,1
 40266f4:	002b883a 	mov	r21,zero
 40266f8:	003f1f06 	br	4026378 <__alt_data_end+0xfffe6378>
 40266fc:	81400204 	addi	r5,r16,8
 4026700:	9009883a 	mov	r4,r18
 4026704:	40259140 	call	4025914 <_free_r>
 4026708:	008100f4 	movhi	r2,1027
 402670c:	10ac7c04 	addi	r2,r2,-19984
 4026710:	10c00017 	ldw	r3,0(r2)
 4026714:	003f2c06 	br	40263c8 <__alt_data_end+0xfffe63c8>
 4026718:	00c05504 	movi	r3,340
 402671c:	18800536 	bltu	r3,r2,4026734 <_malloc_r+0x7cc>
 4026720:	3804d3fa 	srli	r2,r7,15
 4026724:	11401e04 	addi	r5,r2,120
 4026728:	10c01dc4 	addi	r3,r2,119
 402672c:	294b883a 	add	r5,r5,r5
 4026730:	003f5606 	br	402648c <__alt_data_end+0xfffe648c>
 4026734:	00c15504 	movi	r3,1364
 4026738:	18800536 	bltu	r3,r2,4026750 <_malloc_r+0x7e8>
 402673c:	3804d4ba 	srli	r2,r7,18
 4026740:	11401f44 	addi	r5,r2,125
 4026744:	10c01f04 	addi	r3,r2,124
 4026748:	294b883a 	add	r5,r5,r5
 402674c:	003f4f06 	br	402648c <__alt_data_end+0xfffe648c>
 4026750:	01403f84 	movi	r5,254
 4026754:	00c01f84 	movi	r3,126
 4026758:	003f4c06 	br	402648c <__alt_data_end+0xfffe648c>
 402675c:	98800117 	ldw	r2,4(r19)
 4026760:	003fa006 	br	40265e4 <__alt_data_end+0xfffe65e4>
 4026764:	8808d0fa 	srli	r4,r17,3
 4026768:	20800044 	addi	r2,r4,1
 402676c:	1085883a 	add	r2,r2,r2
 4026770:	003e9006 	br	40261b4 <__alt_data_end+0xfffe61b4>

04026774 <memset>:
 4026774:	20c000cc 	andi	r3,r4,3
 4026778:	2005883a 	mov	r2,r4
 402677c:	18004426 	beq	r3,zero,4026890 <memset+0x11c>
 4026780:	31ffffc4 	addi	r7,r6,-1
 4026784:	30004026 	beq	r6,zero,4026888 <memset+0x114>
 4026788:	2813883a 	mov	r9,r5
 402678c:	200d883a 	mov	r6,r4
 4026790:	2007883a 	mov	r3,r4
 4026794:	00000406 	br	40267a8 <memset+0x34>
 4026798:	3a3fffc4 	addi	r8,r7,-1
 402679c:	31800044 	addi	r6,r6,1
 40267a0:	38003926 	beq	r7,zero,4026888 <memset+0x114>
 40267a4:	400f883a 	mov	r7,r8
 40267a8:	18c00044 	addi	r3,r3,1
 40267ac:	32400005 	stb	r9,0(r6)
 40267b0:	1a0000cc 	andi	r8,r3,3
 40267b4:	403ff81e 	bne	r8,zero,4026798 <__alt_data_end+0xfffe6798>
 40267b8:	010000c4 	movi	r4,3
 40267bc:	21c02d2e 	bgeu	r4,r7,4026874 <memset+0x100>
 40267c0:	29003fcc 	andi	r4,r5,255
 40267c4:	200c923a 	slli	r6,r4,8
 40267c8:	3108b03a 	or	r4,r6,r4
 40267cc:	200c943a 	slli	r6,r4,16
 40267d0:	218cb03a 	or	r6,r4,r6
 40267d4:	010003c4 	movi	r4,15
 40267d8:	21c0182e 	bgeu	r4,r7,402683c <memset+0xc8>
 40267dc:	3b3ffc04 	addi	r12,r7,-16
 40267e0:	6018d13a 	srli	r12,r12,4
 40267e4:	1a000104 	addi	r8,r3,4
 40267e8:	1ac00204 	addi	r11,r3,8
 40267ec:	6008913a 	slli	r4,r12,4
 40267f0:	1a800304 	addi	r10,r3,12
 40267f4:	1813883a 	mov	r9,r3
 40267f8:	21000504 	addi	r4,r4,20
 40267fc:	1909883a 	add	r4,r3,r4
 4026800:	49800015 	stw	r6,0(r9)
 4026804:	41800015 	stw	r6,0(r8)
 4026808:	59800015 	stw	r6,0(r11)
 402680c:	51800015 	stw	r6,0(r10)
 4026810:	42000404 	addi	r8,r8,16
 4026814:	4a400404 	addi	r9,r9,16
 4026818:	5ac00404 	addi	r11,r11,16
 402681c:	52800404 	addi	r10,r10,16
 4026820:	413ff71e 	bne	r8,r4,4026800 <__alt_data_end+0xfffe6800>
 4026824:	63000044 	addi	r12,r12,1
 4026828:	6018913a 	slli	r12,r12,4
 402682c:	39c003cc 	andi	r7,r7,15
 4026830:	010000c4 	movi	r4,3
 4026834:	1b07883a 	add	r3,r3,r12
 4026838:	21c00e2e 	bgeu	r4,r7,4026874 <memset+0x100>
 402683c:	1813883a 	mov	r9,r3
 4026840:	3811883a 	mov	r8,r7
 4026844:	010000c4 	movi	r4,3
 4026848:	49800015 	stw	r6,0(r9)
 402684c:	423fff04 	addi	r8,r8,-4
 4026850:	4a400104 	addi	r9,r9,4
 4026854:	223ffc36 	bltu	r4,r8,4026848 <__alt_data_end+0xfffe6848>
 4026858:	393fff04 	addi	r4,r7,-4
 402685c:	2008d0ba 	srli	r4,r4,2
 4026860:	39c000cc 	andi	r7,r7,3
 4026864:	21000044 	addi	r4,r4,1
 4026868:	2109883a 	add	r4,r4,r4
 402686c:	2109883a 	add	r4,r4,r4
 4026870:	1907883a 	add	r3,r3,r4
 4026874:	38000526 	beq	r7,zero,402688c <memset+0x118>
 4026878:	19cf883a 	add	r7,r3,r7
 402687c:	19400005 	stb	r5,0(r3)
 4026880:	18c00044 	addi	r3,r3,1
 4026884:	38fffd1e 	bne	r7,r3,402687c <__alt_data_end+0xfffe687c>
 4026888:	f800283a 	ret
 402688c:	f800283a 	ret
 4026890:	2007883a 	mov	r3,r4
 4026894:	300f883a 	mov	r7,r6
 4026898:	003fc706 	br	40267b8 <__alt_data_end+0xfffe67b8>

0402689c <_sbrk_r>:
 402689c:	defffd04 	addi	sp,sp,-12
 40268a0:	dc000015 	stw	r16,0(sp)
 40268a4:	040100f4 	movhi	r16,1027
 40268a8:	dc400115 	stw	r17,4(sp)
 40268ac:	842c7804 	addi	r16,r16,-20000
 40268b0:	2023883a 	mov	r17,r4
 40268b4:	2809883a 	mov	r4,r5
 40268b8:	dfc00215 	stw	ra,8(sp)
 40268bc:	80000015 	stw	zero,0(r16)
 40268c0:	40271e40 	call	40271e4 <sbrk>
 40268c4:	00ffffc4 	movi	r3,-1
 40268c8:	10c00526 	beq	r2,r3,40268e0 <_sbrk_r+0x44>
 40268cc:	dfc00217 	ldw	ra,8(sp)
 40268d0:	dc400117 	ldw	r17,4(sp)
 40268d4:	dc000017 	ldw	r16,0(sp)
 40268d8:	dec00304 	addi	sp,sp,12
 40268dc:	f800283a 	ret
 40268e0:	80c00017 	ldw	r3,0(r16)
 40268e4:	183ff926 	beq	r3,zero,40268cc <__alt_data_end+0xfffe68cc>
 40268e8:	88c00015 	stw	r3,0(r17)
 40268ec:	003ff706 	br	40268cc <__alt_data_end+0xfffe68cc>

040268f0 <__sread>:
 40268f0:	defffe04 	addi	sp,sp,-8
 40268f4:	dc000015 	stw	r16,0(sp)
 40268f8:	2821883a 	mov	r16,r5
 40268fc:	2940038f 	ldh	r5,14(r5)
 4026900:	dfc00115 	stw	ra,4(sp)
 4026904:	4026cf40 	call	4026cf4 <_read_r>
 4026908:	10000716 	blt	r2,zero,4026928 <__sread+0x38>
 402690c:	80c01417 	ldw	r3,80(r16)
 4026910:	1887883a 	add	r3,r3,r2
 4026914:	80c01415 	stw	r3,80(r16)
 4026918:	dfc00117 	ldw	ra,4(sp)
 402691c:	dc000017 	ldw	r16,0(sp)
 4026920:	dec00204 	addi	sp,sp,8
 4026924:	f800283a 	ret
 4026928:	80c0030b 	ldhu	r3,12(r16)
 402692c:	18fbffcc 	andi	r3,r3,61439
 4026930:	80c0030d 	sth	r3,12(r16)
 4026934:	dfc00117 	ldw	ra,4(sp)
 4026938:	dc000017 	ldw	r16,0(sp)
 402693c:	dec00204 	addi	sp,sp,8
 4026940:	f800283a 	ret

04026944 <__seofread>:
 4026944:	0005883a 	mov	r2,zero
 4026948:	f800283a 	ret

0402694c <__swrite>:
 402694c:	2880030b 	ldhu	r2,12(r5)
 4026950:	defffb04 	addi	sp,sp,-20
 4026954:	dcc00315 	stw	r19,12(sp)
 4026958:	dc800215 	stw	r18,8(sp)
 402695c:	dc400115 	stw	r17,4(sp)
 4026960:	dc000015 	stw	r16,0(sp)
 4026964:	dfc00415 	stw	ra,16(sp)
 4026968:	10c0400c 	andi	r3,r2,256
 402696c:	2821883a 	mov	r16,r5
 4026970:	2023883a 	mov	r17,r4
 4026974:	3025883a 	mov	r18,r6
 4026978:	3827883a 	mov	r19,r7
 402697c:	18000526 	beq	r3,zero,4026994 <__swrite+0x48>
 4026980:	2940038f 	ldh	r5,14(r5)
 4026984:	01c00084 	movi	r7,2
 4026988:	000d883a 	mov	r6,zero
 402698c:	4026c940 	call	4026c94 <_lseek_r>
 4026990:	8080030b 	ldhu	r2,12(r16)
 4026994:	8140038f 	ldh	r5,14(r16)
 4026998:	10bbffcc 	andi	r2,r2,61439
 402699c:	980f883a 	mov	r7,r19
 40269a0:	900d883a 	mov	r6,r18
 40269a4:	8809883a 	mov	r4,r17
 40269a8:	8080030d 	sth	r2,12(r16)
 40269ac:	dfc00417 	ldw	ra,16(sp)
 40269b0:	dcc00317 	ldw	r19,12(sp)
 40269b4:	dc800217 	ldw	r18,8(sp)
 40269b8:	dc400117 	ldw	r17,4(sp)
 40269bc:	dc000017 	ldw	r16,0(sp)
 40269c0:	dec00504 	addi	sp,sp,20
 40269c4:	4026a2c1 	jmpi	4026a2c <_write_r>

040269c8 <__sseek>:
 40269c8:	defffe04 	addi	sp,sp,-8
 40269cc:	dc000015 	stw	r16,0(sp)
 40269d0:	2821883a 	mov	r16,r5
 40269d4:	2940038f 	ldh	r5,14(r5)
 40269d8:	dfc00115 	stw	ra,4(sp)
 40269dc:	4026c940 	call	4026c94 <_lseek_r>
 40269e0:	00ffffc4 	movi	r3,-1
 40269e4:	10c00826 	beq	r2,r3,4026a08 <__sseek+0x40>
 40269e8:	80c0030b 	ldhu	r3,12(r16)
 40269ec:	80801415 	stw	r2,80(r16)
 40269f0:	18c40014 	ori	r3,r3,4096
 40269f4:	80c0030d 	sth	r3,12(r16)
 40269f8:	dfc00117 	ldw	ra,4(sp)
 40269fc:	dc000017 	ldw	r16,0(sp)
 4026a00:	dec00204 	addi	sp,sp,8
 4026a04:	f800283a 	ret
 4026a08:	80c0030b 	ldhu	r3,12(r16)
 4026a0c:	18fbffcc 	andi	r3,r3,61439
 4026a10:	80c0030d 	sth	r3,12(r16)
 4026a14:	dfc00117 	ldw	ra,4(sp)
 4026a18:	dc000017 	ldw	r16,0(sp)
 4026a1c:	dec00204 	addi	sp,sp,8
 4026a20:	f800283a 	ret

04026a24 <__sclose>:
 4026a24:	2940038f 	ldh	r5,14(r5)
 4026a28:	4026a8c1 	jmpi	4026a8c <_close_r>

04026a2c <_write_r>:
 4026a2c:	defffd04 	addi	sp,sp,-12
 4026a30:	2805883a 	mov	r2,r5
 4026a34:	dc000015 	stw	r16,0(sp)
 4026a38:	040100f4 	movhi	r16,1027
 4026a3c:	dc400115 	stw	r17,4(sp)
 4026a40:	300b883a 	mov	r5,r6
 4026a44:	842c7804 	addi	r16,r16,-20000
 4026a48:	2023883a 	mov	r17,r4
 4026a4c:	380d883a 	mov	r6,r7
 4026a50:	1009883a 	mov	r4,r2
 4026a54:	dfc00215 	stw	ra,8(sp)
 4026a58:	80000015 	stw	zero,0(r16)
 4026a5c:	40272d00 	call	40272d0 <write>
 4026a60:	00ffffc4 	movi	r3,-1
 4026a64:	10c00526 	beq	r2,r3,4026a7c <_write_r+0x50>
 4026a68:	dfc00217 	ldw	ra,8(sp)
 4026a6c:	dc400117 	ldw	r17,4(sp)
 4026a70:	dc000017 	ldw	r16,0(sp)
 4026a74:	dec00304 	addi	sp,sp,12
 4026a78:	f800283a 	ret
 4026a7c:	80c00017 	ldw	r3,0(r16)
 4026a80:	183ff926 	beq	r3,zero,4026a68 <__alt_data_end+0xfffe6a68>
 4026a84:	88c00015 	stw	r3,0(r17)
 4026a88:	003ff706 	br	4026a68 <__alt_data_end+0xfffe6a68>

04026a8c <_close_r>:
 4026a8c:	defffd04 	addi	sp,sp,-12
 4026a90:	dc000015 	stw	r16,0(sp)
 4026a94:	040100f4 	movhi	r16,1027
 4026a98:	dc400115 	stw	r17,4(sp)
 4026a9c:	842c7804 	addi	r16,r16,-20000
 4026aa0:	2023883a 	mov	r17,r4
 4026aa4:	2809883a 	mov	r4,r5
 4026aa8:	dfc00215 	stw	ra,8(sp)
 4026aac:	80000015 	stw	zero,0(r16)
 4026ab0:	4023c5c0 	call	4023c5c <close>
 4026ab4:	00ffffc4 	movi	r3,-1
 4026ab8:	10c00526 	beq	r2,r3,4026ad0 <_close_r+0x44>
 4026abc:	dfc00217 	ldw	ra,8(sp)
 4026ac0:	dc400117 	ldw	r17,4(sp)
 4026ac4:	dc000017 	ldw	r16,0(sp)
 4026ac8:	dec00304 	addi	sp,sp,12
 4026acc:	f800283a 	ret
 4026ad0:	80c00017 	ldw	r3,0(r16)
 4026ad4:	183ff926 	beq	r3,zero,4026abc <__alt_data_end+0xfffe6abc>
 4026ad8:	88c00015 	stw	r3,0(r17)
 4026adc:	003ff706 	br	4026abc <__alt_data_end+0xfffe6abc>

04026ae0 <_fclose_r>:
 4026ae0:	28003926 	beq	r5,zero,4026bc8 <_fclose_r+0xe8>
 4026ae4:	defffc04 	addi	sp,sp,-16
 4026ae8:	dc400115 	stw	r17,4(sp)
 4026aec:	dc000015 	stw	r16,0(sp)
 4026af0:	dfc00315 	stw	ra,12(sp)
 4026af4:	dc800215 	stw	r18,8(sp)
 4026af8:	2023883a 	mov	r17,r4
 4026afc:	2821883a 	mov	r16,r5
 4026b00:	20000226 	beq	r4,zero,4026b0c <_fclose_r+0x2c>
 4026b04:	20800e17 	ldw	r2,56(r4)
 4026b08:	10002726 	beq	r2,zero,4026ba8 <_fclose_r+0xc8>
 4026b0c:	8080030f 	ldh	r2,12(r16)
 4026b10:	1000071e 	bne	r2,zero,4026b30 <_fclose_r+0x50>
 4026b14:	0005883a 	mov	r2,zero
 4026b18:	dfc00317 	ldw	ra,12(sp)
 4026b1c:	dc800217 	ldw	r18,8(sp)
 4026b20:	dc400117 	ldw	r17,4(sp)
 4026b24:	dc000017 	ldw	r16,0(sp)
 4026b28:	dec00404 	addi	sp,sp,16
 4026b2c:	f800283a 	ret
 4026b30:	800b883a 	mov	r5,r16
 4026b34:	8809883a 	mov	r4,r17
 4026b38:	40251a80 	call	40251a8 <__sflush_r>
 4026b3c:	1025883a 	mov	r18,r2
 4026b40:	80800b17 	ldw	r2,44(r16)
 4026b44:	10000426 	beq	r2,zero,4026b58 <_fclose_r+0x78>
 4026b48:	81400717 	ldw	r5,28(r16)
 4026b4c:	8809883a 	mov	r4,r17
 4026b50:	103ee83a 	callr	r2
 4026b54:	10001616 	blt	r2,zero,4026bb0 <_fclose_r+0xd0>
 4026b58:	8080030b 	ldhu	r2,12(r16)
 4026b5c:	1080200c 	andi	r2,r2,128
 4026b60:	1000151e 	bne	r2,zero,4026bb8 <_fclose_r+0xd8>
 4026b64:	81400c17 	ldw	r5,48(r16)
 4026b68:	28000526 	beq	r5,zero,4026b80 <_fclose_r+0xa0>
 4026b6c:	80801004 	addi	r2,r16,64
 4026b70:	28800226 	beq	r5,r2,4026b7c <_fclose_r+0x9c>
 4026b74:	8809883a 	mov	r4,r17
 4026b78:	40259140 	call	4025914 <_free_r>
 4026b7c:	80000c15 	stw	zero,48(r16)
 4026b80:	81401117 	ldw	r5,68(r16)
 4026b84:	28000326 	beq	r5,zero,4026b94 <_fclose_r+0xb4>
 4026b88:	8809883a 	mov	r4,r17
 4026b8c:	40259140 	call	4025914 <_free_r>
 4026b90:	80001115 	stw	zero,68(r16)
 4026b94:	40257b00 	call	40257b0 <__sfp_lock_acquire>
 4026b98:	8000030d 	sth	zero,12(r16)
 4026b9c:	40257b40 	call	40257b4 <__sfp_lock_release>
 4026ba0:	9005883a 	mov	r2,r18
 4026ba4:	003fdc06 	br	4026b18 <__alt_data_end+0xfffe6b18>
 4026ba8:	40257a00 	call	40257a0 <__sinit>
 4026bac:	003fd706 	br	4026b0c <__alt_data_end+0xfffe6b0c>
 4026bb0:	04bfffc4 	movi	r18,-1
 4026bb4:	003fe806 	br	4026b58 <__alt_data_end+0xfffe6b58>
 4026bb8:	81400417 	ldw	r5,16(r16)
 4026bbc:	8809883a 	mov	r4,r17
 4026bc0:	40259140 	call	4025914 <_free_r>
 4026bc4:	003fe706 	br	4026b64 <__alt_data_end+0xfffe6b64>
 4026bc8:	0005883a 	mov	r2,zero
 4026bcc:	f800283a 	ret

04026bd0 <fclose>:
 4026bd0:	008100f4 	movhi	r2,1027
 4026bd4:	10a57404 	addi	r2,r2,-27184
 4026bd8:	200b883a 	mov	r5,r4
 4026bdc:	11000017 	ldw	r4,0(r2)
 4026be0:	4026ae01 	jmpi	4026ae0 <_fclose_r>

04026be4 <_fstat_r>:
 4026be4:	defffd04 	addi	sp,sp,-12
 4026be8:	2805883a 	mov	r2,r5
 4026bec:	dc000015 	stw	r16,0(sp)
 4026bf0:	040100f4 	movhi	r16,1027
 4026bf4:	dc400115 	stw	r17,4(sp)
 4026bf8:	842c7804 	addi	r16,r16,-20000
 4026bfc:	2023883a 	mov	r17,r4
 4026c00:	300b883a 	mov	r5,r6
 4026c04:	1009883a 	mov	r4,r2
 4026c08:	dfc00215 	stw	ra,8(sp)
 4026c0c:	80000015 	stw	zero,0(r16)
 4026c10:	4026dc40 	call	4026dc4 <fstat>
 4026c14:	00ffffc4 	movi	r3,-1
 4026c18:	10c00526 	beq	r2,r3,4026c30 <_fstat_r+0x4c>
 4026c1c:	dfc00217 	ldw	ra,8(sp)
 4026c20:	dc400117 	ldw	r17,4(sp)
 4026c24:	dc000017 	ldw	r16,0(sp)
 4026c28:	dec00304 	addi	sp,sp,12
 4026c2c:	f800283a 	ret
 4026c30:	80c00017 	ldw	r3,0(r16)
 4026c34:	183ff926 	beq	r3,zero,4026c1c <__alt_data_end+0xfffe6c1c>
 4026c38:	88c00015 	stw	r3,0(r17)
 4026c3c:	003ff706 	br	4026c1c <__alt_data_end+0xfffe6c1c>

04026c40 <_isatty_r>:
 4026c40:	defffd04 	addi	sp,sp,-12
 4026c44:	dc000015 	stw	r16,0(sp)
 4026c48:	040100f4 	movhi	r16,1027
 4026c4c:	dc400115 	stw	r17,4(sp)
 4026c50:	842c7804 	addi	r16,r16,-20000
 4026c54:	2023883a 	mov	r17,r4
 4026c58:	2809883a 	mov	r4,r5
 4026c5c:	dfc00215 	stw	ra,8(sp)
 4026c60:	80000015 	stw	zero,0(r16)
 4026c64:	4026eb00 	call	4026eb0 <isatty>
 4026c68:	00ffffc4 	movi	r3,-1
 4026c6c:	10c00526 	beq	r2,r3,4026c84 <_isatty_r+0x44>
 4026c70:	dfc00217 	ldw	ra,8(sp)
 4026c74:	dc400117 	ldw	r17,4(sp)
 4026c78:	dc000017 	ldw	r16,0(sp)
 4026c7c:	dec00304 	addi	sp,sp,12
 4026c80:	f800283a 	ret
 4026c84:	80c00017 	ldw	r3,0(r16)
 4026c88:	183ff926 	beq	r3,zero,4026c70 <__alt_data_end+0xfffe6c70>
 4026c8c:	88c00015 	stw	r3,0(r17)
 4026c90:	003ff706 	br	4026c70 <__alt_data_end+0xfffe6c70>

04026c94 <_lseek_r>:
 4026c94:	defffd04 	addi	sp,sp,-12
 4026c98:	2805883a 	mov	r2,r5
 4026c9c:	dc000015 	stw	r16,0(sp)
 4026ca0:	040100f4 	movhi	r16,1027
 4026ca4:	dc400115 	stw	r17,4(sp)
 4026ca8:	300b883a 	mov	r5,r6
 4026cac:	842c7804 	addi	r16,r16,-20000
 4026cb0:	2023883a 	mov	r17,r4
 4026cb4:	380d883a 	mov	r6,r7
 4026cb8:	1009883a 	mov	r4,r2
 4026cbc:	dfc00215 	stw	ra,8(sp)
 4026cc0:	80000015 	stw	zero,0(r16)
 4026cc4:	4026f900 	call	4026f90 <lseek>
 4026cc8:	00ffffc4 	movi	r3,-1
 4026ccc:	10c00526 	beq	r2,r3,4026ce4 <_lseek_r+0x50>
 4026cd0:	dfc00217 	ldw	ra,8(sp)
 4026cd4:	dc400117 	ldw	r17,4(sp)
 4026cd8:	dc000017 	ldw	r16,0(sp)
 4026cdc:	dec00304 	addi	sp,sp,12
 4026ce0:	f800283a 	ret
 4026ce4:	80c00017 	ldw	r3,0(r16)
 4026ce8:	183ff926 	beq	r3,zero,4026cd0 <__alt_data_end+0xfffe6cd0>
 4026cec:	88c00015 	stw	r3,0(r17)
 4026cf0:	003ff706 	br	4026cd0 <__alt_data_end+0xfffe6cd0>

04026cf4 <_read_r>:
 4026cf4:	defffd04 	addi	sp,sp,-12
 4026cf8:	2805883a 	mov	r2,r5
 4026cfc:	dc000015 	stw	r16,0(sp)
 4026d00:	040100f4 	movhi	r16,1027
 4026d04:	dc400115 	stw	r17,4(sp)
 4026d08:	300b883a 	mov	r5,r6
 4026d0c:	842c7804 	addi	r16,r16,-20000
 4026d10:	2023883a 	mov	r17,r4
 4026d14:	380d883a 	mov	r6,r7
 4026d18:	1009883a 	mov	r4,r2
 4026d1c:	dfc00215 	stw	ra,8(sp)
 4026d20:	80000015 	stw	zero,0(r16)
 4026d24:	40270e80 	call	40270e8 <read>
 4026d28:	00ffffc4 	movi	r3,-1
 4026d2c:	10c00526 	beq	r2,r3,4026d44 <_read_r+0x50>
 4026d30:	dfc00217 	ldw	ra,8(sp)
 4026d34:	dc400117 	ldw	r17,4(sp)
 4026d38:	dc000017 	ldw	r16,0(sp)
 4026d3c:	dec00304 	addi	sp,sp,12
 4026d40:	f800283a 	ret
 4026d44:	80c00017 	ldw	r3,0(r16)
 4026d48:	183ff926 	beq	r3,zero,4026d30 <__alt_data_end+0xfffe6d30>
 4026d4c:	88c00015 	stw	r3,0(r17)
 4026d50:	003ff706 	br	4026d30 <__alt_data_end+0xfffe6d30>

04026d54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4026d54:	defffd04 	addi	sp,sp,-12
 4026d58:	df000215 	stw	fp,8(sp)
 4026d5c:	df000204 	addi	fp,sp,8
 4026d60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4026d64:	0001883a 	nop
 4026d68:	e0bfff17 	ldw	r2,-4(fp)
 4026d6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4026d70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4026d74:	10000226 	beq	r2,zero,4026d80 <_exit+0x2c>
    ALT_SIM_FAIL();
 4026d78:	002af070 	cmpltui	zero,zero,43969
 4026d7c:	00000106 	br	4026d84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4026d80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4026d84:	003fff06 	br	4026d84 <__alt_data_end+0xfffe6d84>

04026d88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026d88:	defffe04 	addi	sp,sp,-8
 4026d8c:	dfc00115 	stw	ra,4(sp)
 4026d90:	df000015 	stw	fp,0(sp)
 4026d94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026d98:	d0a00817 	ldw	r2,-32736(gp)
 4026d9c:	10000326 	beq	r2,zero,4026dac <alt_get_errno+0x24>
 4026da0:	d0a00817 	ldw	r2,-32736(gp)
 4026da4:	103ee83a 	callr	r2
 4026da8:	00000106 	br	4026db0 <alt_get_errno+0x28>
 4026dac:	d0a71004 	addi	r2,gp,-25536
}
 4026db0:	e037883a 	mov	sp,fp
 4026db4:	dfc00117 	ldw	ra,4(sp)
 4026db8:	df000017 	ldw	fp,0(sp)
 4026dbc:	dec00204 	addi	sp,sp,8
 4026dc0:	f800283a 	ret

04026dc4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 4026dc4:	defffb04 	addi	sp,sp,-20
 4026dc8:	dfc00415 	stw	ra,16(sp)
 4026dcc:	df000315 	stw	fp,12(sp)
 4026dd0:	df000304 	addi	fp,sp,12
 4026dd4:	e13ffe15 	stw	r4,-8(fp)
 4026dd8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026ddc:	e0bffe17 	ldw	r2,-8(fp)
 4026de0:	10000616 	blt	r2,zero,4026dfc <fstat+0x38>
 4026de4:	e0bffe17 	ldw	r2,-8(fp)
 4026de8:	10c00324 	muli	r3,r2,12
 4026dec:	008100f4 	movhi	r2,1027
 4026df0:	10a2fd04 	addi	r2,r2,-29708
 4026df4:	1885883a 	add	r2,r3,r2
 4026df8:	00000106 	br	4026e00 <fstat+0x3c>
 4026dfc:	0005883a 	mov	r2,zero
 4026e00:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 4026e04:	e0bffd17 	ldw	r2,-12(fp)
 4026e08:	10001026 	beq	r2,zero,4026e4c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4026e0c:	e0bffd17 	ldw	r2,-12(fp)
 4026e10:	10800017 	ldw	r2,0(r2)
 4026e14:	10800817 	ldw	r2,32(r2)
 4026e18:	10000726 	beq	r2,zero,4026e38 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 4026e1c:	e0bffd17 	ldw	r2,-12(fp)
 4026e20:	10800017 	ldw	r2,0(r2)
 4026e24:	10800817 	ldw	r2,32(r2)
 4026e28:	e17fff17 	ldw	r5,-4(fp)
 4026e2c:	e13ffd17 	ldw	r4,-12(fp)
 4026e30:	103ee83a 	callr	r2
 4026e34:	00000a06 	br	4026e60 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4026e38:	e0bfff17 	ldw	r2,-4(fp)
 4026e3c:	00c80004 	movi	r3,8192
 4026e40:	10c00115 	stw	r3,4(r2)
      return 0;
 4026e44:	0005883a 	mov	r2,zero
 4026e48:	00000506 	br	4026e60 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4026e4c:	4026d880 	call	4026d88 <alt_get_errno>
 4026e50:	1007883a 	mov	r3,r2
 4026e54:	00801444 	movi	r2,81
 4026e58:	18800015 	stw	r2,0(r3)
    return -1;
 4026e5c:	00bfffc4 	movi	r2,-1
  }
}
 4026e60:	e037883a 	mov	sp,fp
 4026e64:	dfc00117 	ldw	ra,4(sp)
 4026e68:	df000017 	ldw	fp,0(sp)
 4026e6c:	dec00204 	addi	sp,sp,8
 4026e70:	f800283a 	ret

04026e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026e74:	defffe04 	addi	sp,sp,-8
 4026e78:	dfc00115 	stw	ra,4(sp)
 4026e7c:	df000015 	stw	fp,0(sp)
 4026e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026e84:	d0a00817 	ldw	r2,-32736(gp)
 4026e88:	10000326 	beq	r2,zero,4026e98 <alt_get_errno+0x24>
 4026e8c:	d0a00817 	ldw	r2,-32736(gp)
 4026e90:	103ee83a 	callr	r2
 4026e94:	00000106 	br	4026e9c <alt_get_errno+0x28>
 4026e98:	d0a71004 	addi	r2,gp,-25536
}
 4026e9c:	e037883a 	mov	sp,fp
 4026ea0:	dfc00117 	ldw	ra,4(sp)
 4026ea4:	df000017 	ldw	fp,0(sp)
 4026ea8:	dec00204 	addi	sp,sp,8
 4026eac:	f800283a 	ret

04026eb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4026eb0:	deffed04 	addi	sp,sp,-76
 4026eb4:	dfc01215 	stw	ra,72(sp)
 4026eb8:	df001115 	stw	fp,68(sp)
 4026ebc:	df001104 	addi	fp,sp,68
 4026ec0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026ec4:	e0bfff17 	ldw	r2,-4(fp)
 4026ec8:	10000616 	blt	r2,zero,4026ee4 <isatty+0x34>
 4026ecc:	e0bfff17 	ldw	r2,-4(fp)
 4026ed0:	10c00324 	muli	r3,r2,12
 4026ed4:	008100f4 	movhi	r2,1027
 4026ed8:	10a2fd04 	addi	r2,r2,-29708
 4026edc:	1885883a 	add	r2,r3,r2
 4026ee0:	00000106 	br	4026ee8 <isatty+0x38>
 4026ee4:	0005883a 	mov	r2,zero
 4026ee8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 4026eec:	e0bfef17 	ldw	r2,-68(fp)
 4026ef0:	10000e26 	beq	r2,zero,4026f2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4026ef4:	e0bfef17 	ldw	r2,-68(fp)
 4026ef8:	10800017 	ldw	r2,0(r2)
 4026efc:	10800817 	ldw	r2,32(r2)
 4026f00:	1000021e 	bne	r2,zero,4026f0c <isatty+0x5c>
    {
      return 1;
 4026f04:	00800044 	movi	r2,1
 4026f08:	00000d06 	br	4026f40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 4026f0c:	e0bff004 	addi	r2,fp,-64
 4026f10:	100b883a 	mov	r5,r2
 4026f14:	e13fff17 	ldw	r4,-4(fp)
 4026f18:	4026dc40 	call	4026dc4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 4026f1c:	e0bff117 	ldw	r2,-60(fp)
 4026f20:	10880020 	cmpeqi	r2,r2,8192
 4026f24:	10803fcc 	andi	r2,r2,255
 4026f28:	00000506 	br	4026f40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4026f2c:	4026e740 	call	4026e74 <alt_get_errno>
 4026f30:	1007883a 	mov	r3,r2
 4026f34:	00801444 	movi	r2,81
 4026f38:	18800015 	stw	r2,0(r3)
    return 0;
 4026f3c:	0005883a 	mov	r2,zero
  }
}
 4026f40:	e037883a 	mov	sp,fp
 4026f44:	dfc00117 	ldw	ra,4(sp)
 4026f48:	df000017 	ldw	fp,0(sp)
 4026f4c:	dec00204 	addi	sp,sp,8
 4026f50:	f800283a 	ret

04026f54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4026f54:	defffe04 	addi	sp,sp,-8
 4026f58:	dfc00115 	stw	ra,4(sp)
 4026f5c:	df000015 	stw	fp,0(sp)
 4026f60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4026f64:	d0a00817 	ldw	r2,-32736(gp)
 4026f68:	10000326 	beq	r2,zero,4026f78 <alt_get_errno+0x24>
 4026f6c:	d0a00817 	ldw	r2,-32736(gp)
 4026f70:	103ee83a 	callr	r2
 4026f74:	00000106 	br	4026f7c <alt_get_errno+0x28>
 4026f78:	d0a71004 	addi	r2,gp,-25536
}
 4026f7c:	e037883a 	mov	sp,fp
 4026f80:	dfc00117 	ldw	ra,4(sp)
 4026f84:	df000017 	ldw	fp,0(sp)
 4026f88:	dec00204 	addi	sp,sp,8
 4026f8c:	f800283a 	ret

04026f90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 4026f90:	defff904 	addi	sp,sp,-28
 4026f94:	dfc00615 	stw	ra,24(sp)
 4026f98:	df000515 	stw	fp,20(sp)
 4026f9c:	df000504 	addi	fp,sp,20
 4026fa0:	e13ffd15 	stw	r4,-12(fp)
 4026fa4:	e17ffe15 	stw	r5,-8(fp)
 4026fa8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 4026fac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4026fb0:	e0bffd17 	ldw	r2,-12(fp)
 4026fb4:	10000616 	blt	r2,zero,4026fd0 <lseek+0x40>
 4026fb8:	e0bffd17 	ldw	r2,-12(fp)
 4026fbc:	10c00324 	muli	r3,r2,12
 4026fc0:	008100f4 	movhi	r2,1027
 4026fc4:	10a2fd04 	addi	r2,r2,-29708
 4026fc8:	1885883a 	add	r2,r3,r2
 4026fcc:	00000106 	br	4026fd4 <lseek+0x44>
 4026fd0:	0005883a 	mov	r2,zero
 4026fd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 4026fd8:	e0bffc17 	ldw	r2,-16(fp)
 4026fdc:	10001026 	beq	r2,zero,4027020 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4026fe0:	e0bffc17 	ldw	r2,-16(fp)
 4026fe4:	10800017 	ldw	r2,0(r2)
 4026fe8:	10800717 	ldw	r2,28(r2)
 4026fec:	10000926 	beq	r2,zero,4027014 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4026ff0:	e0bffc17 	ldw	r2,-16(fp)
 4026ff4:	10800017 	ldw	r2,0(r2)
 4026ff8:	10800717 	ldw	r2,28(r2)
 4026ffc:	e1bfff17 	ldw	r6,-4(fp)
 4027000:	e17ffe17 	ldw	r5,-8(fp)
 4027004:	e13ffc17 	ldw	r4,-16(fp)
 4027008:	103ee83a 	callr	r2
 402700c:	e0bffb15 	stw	r2,-20(fp)
 4027010:	00000506 	br	4027028 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 4027014:	00bfde84 	movi	r2,-134
 4027018:	e0bffb15 	stw	r2,-20(fp)
 402701c:	00000206 	br	4027028 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 4027020:	00bfebc4 	movi	r2,-81
 4027024:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 4027028:	e0bffb17 	ldw	r2,-20(fp)
 402702c:	1000070e 	bge	r2,zero,402704c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 4027030:	4026f540 	call	4026f54 <alt_get_errno>
 4027034:	1007883a 	mov	r3,r2
 4027038:	e0bffb17 	ldw	r2,-20(fp)
 402703c:	0085c83a 	sub	r2,zero,r2
 4027040:	18800015 	stw	r2,0(r3)
    rc = -1;
 4027044:	00bfffc4 	movi	r2,-1
 4027048:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402704c:	e0bffb17 	ldw	r2,-20(fp)
}
 4027050:	e037883a 	mov	sp,fp
 4027054:	dfc00117 	ldw	ra,4(sp)
 4027058:	df000017 	ldw	fp,0(sp)
 402705c:	dec00204 	addi	sp,sp,8
 4027060:	f800283a 	ret

04027064 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 4027064:	defffe04 	addi	sp,sp,-8
 4027068:	df000115 	stw	fp,4(sp)
 402706c:	df000104 	addi	fp,sp,4
 4027070:	e13fff15 	stw	r4,-4(fp)
}
 4027074:	0001883a 	nop
 4027078:	e037883a 	mov	sp,fp
 402707c:	df000017 	ldw	fp,0(sp)
 4027080:	dec00104 	addi	sp,sp,4
 4027084:	f800283a 	ret

04027088 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 4027088:	defffe04 	addi	sp,sp,-8
 402708c:	df000115 	stw	fp,4(sp)
 4027090:	df000104 	addi	fp,sp,4
 4027094:	e13fff15 	stw	r4,-4(fp)
}
 4027098:	0001883a 	nop
 402709c:	e037883a 	mov	sp,fp
 40270a0:	df000017 	ldw	fp,0(sp)
 40270a4:	dec00104 	addi	sp,sp,4
 40270a8:	f800283a 	ret

040270ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40270ac:	defffe04 	addi	sp,sp,-8
 40270b0:	dfc00115 	stw	ra,4(sp)
 40270b4:	df000015 	stw	fp,0(sp)
 40270b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40270bc:	d0a00817 	ldw	r2,-32736(gp)
 40270c0:	10000326 	beq	r2,zero,40270d0 <alt_get_errno+0x24>
 40270c4:	d0a00817 	ldw	r2,-32736(gp)
 40270c8:	103ee83a 	callr	r2
 40270cc:	00000106 	br	40270d4 <alt_get_errno+0x28>
 40270d0:	d0a71004 	addi	r2,gp,-25536
}
 40270d4:	e037883a 	mov	sp,fp
 40270d8:	dfc00117 	ldw	ra,4(sp)
 40270dc:	df000017 	ldw	fp,0(sp)
 40270e0:	dec00204 	addi	sp,sp,8
 40270e4:	f800283a 	ret

040270e8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 40270e8:	defff904 	addi	sp,sp,-28
 40270ec:	dfc00615 	stw	ra,24(sp)
 40270f0:	df000515 	stw	fp,20(sp)
 40270f4:	df000504 	addi	fp,sp,20
 40270f8:	e13ffd15 	stw	r4,-12(fp)
 40270fc:	e17ffe15 	stw	r5,-8(fp)
 4027100:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4027104:	e0bffd17 	ldw	r2,-12(fp)
 4027108:	10000616 	blt	r2,zero,4027124 <read+0x3c>
 402710c:	e0bffd17 	ldw	r2,-12(fp)
 4027110:	10c00324 	muli	r3,r2,12
 4027114:	008100f4 	movhi	r2,1027
 4027118:	10a2fd04 	addi	r2,r2,-29708
 402711c:	1885883a 	add	r2,r3,r2
 4027120:	00000106 	br	4027128 <read+0x40>
 4027124:	0005883a 	mov	r2,zero
 4027128:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402712c:	e0bffb17 	ldw	r2,-20(fp)
 4027130:	10002226 	beq	r2,zero,40271bc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4027134:	e0bffb17 	ldw	r2,-20(fp)
 4027138:	10800217 	ldw	r2,8(r2)
 402713c:	108000cc 	andi	r2,r2,3
 4027140:	10800060 	cmpeqi	r2,r2,1
 4027144:	1000181e 	bne	r2,zero,40271a8 <read+0xc0>
        (fd->dev->read))
 4027148:	e0bffb17 	ldw	r2,-20(fp)
 402714c:	10800017 	ldw	r2,0(r2)
 4027150:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 4027154:	10001426 	beq	r2,zero,40271a8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 4027158:	e0bffb17 	ldw	r2,-20(fp)
 402715c:	10800017 	ldw	r2,0(r2)
 4027160:	10800517 	ldw	r2,20(r2)
 4027164:	e0ffff17 	ldw	r3,-4(fp)
 4027168:	180d883a 	mov	r6,r3
 402716c:	e17ffe17 	ldw	r5,-8(fp)
 4027170:	e13ffb17 	ldw	r4,-20(fp)
 4027174:	103ee83a 	callr	r2
 4027178:	e0bffc15 	stw	r2,-16(fp)
 402717c:	e0bffc17 	ldw	r2,-16(fp)
 4027180:	1000070e 	bge	r2,zero,40271a0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 4027184:	40270ac0 	call	40270ac <alt_get_errno>
 4027188:	1007883a 	mov	r3,r2
 402718c:	e0bffc17 	ldw	r2,-16(fp)
 4027190:	0085c83a 	sub	r2,zero,r2
 4027194:	18800015 	stw	r2,0(r3)
          return -1;
 4027198:	00bfffc4 	movi	r2,-1
 402719c:	00000c06 	br	40271d0 <read+0xe8>
        }
        return rval;
 40271a0:	e0bffc17 	ldw	r2,-16(fp)
 40271a4:	00000a06 	br	40271d0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 40271a8:	40270ac0 	call	40270ac <alt_get_errno>
 40271ac:	1007883a 	mov	r3,r2
 40271b0:	00800344 	movi	r2,13
 40271b4:	18800015 	stw	r2,0(r3)
 40271b8:	00000406 	br	40271cc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 40271bc:	40270ac0 	call	40270ac <alt_get_errno>
 40271c0:	1007883a 	mov	r3,r2
 40271c4:	00801444 	movi	r2,81
 40271c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40271cc:	00bfffc4 	movi	r2,-1
}
 40271d0:	e037883a 	mov	sp,fp
 40271d4:	dfc00117 	ldw	ra,4(sp)
 40271d8:	df000017 	ldw	fp,0(sp)
 40271dc:	dec00204 	addi	sp,sp,8
 40271e0:	f800283a 	ret

040271e4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 40271e4:	defff904 	addi	sp,sp,-28
 40271e8:	df000615 	stw	fp,24(sp)
 40271ec:	df000604 	addi	fp,sp,24
 40271f0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40271f4:	0005303a 	rdctl	r2,status
 40271f8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40271fc:	e0fffe17 	ldw	r3,-8(fp)
 4027200:	00bfff84 	movi	r2,-2
 4027204:	1884703a 	and	r2,r3,r2
 4027208:	1001703a 	wrctl	status,r2
  
  return context;
 402720c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 4027210:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4027214:	d0a00f17 	ldw	r2,-32708(gp)
 4027218:	10c000c4 	addi	r3,r2,3
 402721c:	00bfff04 	movi	r2,-4
 4027220:	1884703a 	and	r2,r3,r2
 4027224:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 4027228:	d0e00f17 	ldw	r3,-32708(gp)
 402722c:	e0bfff17 	ldw	r2,-4(fp)
 4027230:	1887883a 	add	r3,r3,r2
 4027234:	00810134 	movhi	r2,1028
 4027238:	10800004 	addi	r2,r2,0
 402723c:	10c0062e 	bgeu	r2,r3,4027258 <sbrk+0x74>
 4027240:	e0bffb17 	ldw	r2,-20(fp)
 4027244:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4027248:	e0bffa17 	ldw	r2,-24(fp)
 402724c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 4027250:	00bfffc4 	movi	r2,-1
 4027254:	00000b06 	br	4027284 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 4027258:	d0a00f17 	ldw	r2,-32708(gp)
 402725c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 4027260:	d0e00f17 	ldw	r3,-32708(gp)
 4027264:	e0bfff17 	ldw	r2,-4(fp)
 4027268:	1885883a 	add	r2,r3,r2
 402726c:	d0a00f15 	stw	r2,-32708(gp)
 4027270:	e0bffb17 	ldw	r2,-20(fp)
 4027274:	e0bffc15 	stw	r2,-16(fp)
 4027278:	e0bffc17 	ldw	r2,-16(fp)
 402727c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 4027280:	e0bffd17 	ldw	r2,-12(fp)
} 
 4027284:	e037883a 	mov	sp,fp
 4027288:	df000017 	ldw	fp,0(sp)
 402728c:	dec00104 	addi	sp,sp,4
 4027290:	f800283a 	ret

04027294 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4027294:	defffe04 	addi	sp,sp,-8
 4027298:	dfc00115 	stw	ra,4(sp)
 402729c:	df000015 	stw	fp,0(sp)
 40272a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40272a4:	d0a00817 	ldw	r2,-32736(gp)
 40272a8:	10000326 	beq	r2,zero,40272b8 <alt_get_errno+0x24>
 40272ac:	d0a00817 	ldw	r2,-32736(gp)
 40272b0:	103ee83a 	callr	r2
 40272b4:	00000106 	br	40272bc <alt_get_errno+0x28>
 40272b8:	d0a71004 	addi	r2,gp,-25536
}
 40272bc:	e037883a 	mov	sp,fp
 40272c0:	dfc00117 	ldw	ra,4(sp)
 40272c4:	df000017 	ldw	fp,0(sp)
 40272c8:	dec00204 	addi	sp,sp,8
 40272cc:	f800283a 	ret

040272d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40272d0:	defff904 	addi	sp,sp,-28
 40272d4:	dfc00615 	stw	ra,24(sp)
 40272d8:	df000515 	stw	fp,20(sp)
 40272dc:	df000504 	addi	fp,sp,20
 40272e0:	e13ffd15 	stw	r4,-12(fp)
 40272e4:	e17ffe15 	stw	r5,-8(fp)
 40272e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40272ec:	e0bffd17 	ldw	r2,-12(fp)
 40272f0:	10000616 	blt	r2,zero,402730c <write+0x3c>
 40272f4:	e0bffd17 	ldw	r2,-12(fp)
 40272f8:	10c00324 	muli	r3,r2,12
 40272fc:	008100f4 	movhi	r2,1027
 4027300:	10a2fd04 	addi	r2,r2,-29708
 4027304:	1885883a 	add	r2,r3,r2
 4027308:	00000106 	br	4027310 <write+0x40>
 402730c:	0005883a 	mov	r2,zero
 4027310:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4027314:	e0bffb17 	ldw	r2,-20(fp)
 4027318:	10002126 	beq	r2,zero,40273a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402731c:	e0bffb17 	ldw	r2,-20(fp)
 4027320:	10800217 	ldw	r2,8(r2)
 4027324:	108000cc 	andi	r2,r2,3
 4027328:	10001826 	beq	r2,zero,402738c <write+0xbc>
 402732c:	e0bffb17 	ldw	r2,-20(fp)
 4027330:	10800017 	ldw	r2,0(r2)
 4027334:	10800617 	ldw	r2,24(r2)
 4027338:	10001426 	beq	r2,zero,402738c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402733c:	e0bffb17 	ldw	r2,-20(fp)
 4027340:	10800017 	ldw	r2,0(r2)
 4027344:	10800617 	ldw	r2,24(r2)
 4027348:	e0ffff17 	ldw	r3,-4(fp)
 402734c:	180d883a 	mov	r6,r3
 4027350:	e17ffe17 	ldw	r5,-8(fp)
 4027354:	e13ffb17 	ldw	r4,-20(fp)
 4027358:	103ee83a 	callr	r2
 402735c:	e0bffc15 	stw	r2,-16(fp)
 4027360:	e0bffc17 	ldw	r2,-16(fp)
 4027364:	1000070e 	bge	r2,zero,4027384 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4027368:	40272940 	call	4027294 <alt_get_errno>
 402736c:	1007883a 	mov	r3,r2
 4027370:	e0bffc17 	ldw	r2,-16(fp)
 4027374:	0085c83a 	sub	r2,zero,r2
 4027378:	18800015 	stw	r2,0(r3)
        return -1;
 402737c:	00bfffc4 	movi	r2,-1
 4027380:	00000c06 	br	40273b4 <write+0xe4>
      }
      return rval;
 4027384:	e0bffc17 	ldw	r2,-16(fp)
 4027388:	00000a06 	br	40273b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402738c:	40272940 	call	4027294 <alt_get_errno>
 4027390:	1007883a 	mov	r3,r2
 4027394:	00800344 	movi	r2,13
 4027398:	18800015 	stw	r2,0(r3)
 402739c:	00000406 	br	40273b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40273a0:	40272940 	call	4027294 <alt_get_errno>
 40273a4:	1007883a 	mov	r3,r2
 40273a8:	00801444 	movi	r2,81
 40273ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40273b0:	00bfffc4 	movi	r2,-1
}
 40273b4:	e037883a 	mov	sp,fp
 40273b8:	dfc00117 	ldw	ra,4(sp)
 40273bc:	df000017 	ldw	fp,0(sp)
 40273c0:	dec00204 	addi	sp,sp,8
 40273c4:	f800283a 	ret

// soc_system.v

// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module soc_system (
		input  wire        audio_0_external_interface_ADCDAT,                //                  audio_0_external_interface.ADCDAT
		input  wire        audio_0_external_interface_ADCLRCK,               //                                            .ADCLRCK
		input  wire        audio_0_external_interface_BCLK,                  //                                            .BCLK
		output wire        audio_0_external_interface_DACDAT,                //                                            .DACDAT
		input  wire        audio_0_external_interface_DACLRCK,               //                                            .DACLRCK
		inout  wire        audio_and_video_config_0_external_interface_SDAT, // audio_and_video_config_0_external_interface.SDAT
		output wire        audio_and_video_config_0_external_interface_SCLK, //                                            .SCLK
		output wire        audio_pll_0_audio_clk_clk,                        //                       audio_pll_0_audio_clk.clk
		input  wire        clk_clk,                                          //                                         clk.clk
		output wire [7:0]  hw_debug_readdata,                                //                                    hw_debug.readdata
		input  wire [7:0]  pio_2_export,                                     //                                       pio_2.export
		output wire        pll_2_outclk2_clk,                                //                               pll_2_outclk2.clk
		output wire [7:0]  pp0_out_export,                                   //                                     pp0_out.export
		output wire [7:0]  pp1_out_export,                                   //                                     pp1_out.export
		output wire [7:0]  pp2_out_export,                                   //                                     pp2_out.export
		input  wire        reset_reset_n,                                    //                                       reset.reset_n
		output wire [12:0] sdram_controller_2_wire_addr,                     //                     sdram_controller_2_wire.addr
		output wire [1:0]  sdram_controller_2_wire_ba,                       //                                            .ba
		output wire        sdram_controller_2_wire_cas_n,                    //                                            .cas_n
		output wire        sdram_controller_2_wire_cke,                      //                                            .cke
		output wire        sdram_controller_2_wire_cs_n,                     //                                            .cs_n
		inout  wire [15:0] sdram_controller_2_wire_dq,                       //                                            .dq
		output wire [1:0]  sdram_controller_2_wire_dqm,                      //                                            .dqm
		output wire        sdram_controller_2_wire_ras_n,                    //                                            .ras_n
		output wire        sdram_controller_2_wire_we_n                      //                                            .we_n
	);

	wire         pll_2_outclk0_clk;                                                             // pll_2:outclk_0 -> [HW_Accelerator_0:Clk, audio_0:clk, audio_and_video_config_0:clk, audio_pll_0:ref_clk_clk, cpu_0:clk, cpu_1:clk, irq_mapper:clk, irq_mapper_001:clk, jtag_uart_0:clk, jtag_uart_1:clk, mailbox_simple_0:clk, mailbox_simple_1:clk, mm_interconnect_0:pll_2_outclk0_clk, onchip_memory2_0:clk, onchip_memory_1:clk, parallel_port_0:clk, parallel_port_1:clk, parallel_port_2:clk, performance_counter_0:clk, performance_counter_1:clk, pio_2:clk, rst_controller:clk, rst_controller_001:clk, rst_controller_003:clk]
	wire         pll_2_outclk1_clk;                                                             // pll_2:outclk_1 -> [mm_interconnect_0:pll_2_outclk1_clk, rst_controller_004:clk, sdram_controller_2:clk]
	wire  [31:0] cpu_1_custom_instruction_master_result;                                        // cpu_1_custom_instruction_master_translator:ci_slave_result -> cpu_1:E_ci_combo_result
	wire         cpu_1_custom_instruction_master_readra;                                        // cpu_1:E_ci_combo_readra -> cpu_1_custom_instruction_master_translator:ci_slave_readra
	wire   [4:0] cpu_1_custom_instruction_master_a;                                             // cpu_1:E_ci_combo_a -> cpu_1_custom_instruction_master_translator:ci_slave_a
	wire   [4:0] cpu_1_custom_instruction_master_b;                                             // cpu_1:E_ci_combo_b -> cpu_1_custom_instruction_master_translator:ci_slave_b
	wire   [4:0] cpu_1_custom_instruction_master_c;                                             // cpu_1:E_ci_combo_c -> cpu_1_custom_instruction_master_translator:ci_slave_c
	wire         cpu_1_custom_instruction_master_readrb;                                        // cpu_1:E_ci_combo_readrb -> cpu_1_custom_instruction_master_translator:ci_slave_readrb
	wire         cpu_1_custom_instruction_master_estatus;                                       // cpu_1:E_ci_combo_estatus -> cpu_1_custom_instruction_master_translator:ci_slave_estatus
	wire  [31:0] cpu_1_custom_instruction_master_ipending;                                      // cpu_1:E_ci_combo_ipending -> cpu_1_custom_instruction_master_translator:ci_slave_ipending
	wire  [31:0] cpu_1_custom_instruction_master_datab;                                         // cpu_1:E_ci_combo_datab -> cpu_1_custom_instruction_master_translator:ci_slave_datab
	wire  [31:0] cpu_1_custom_instruction_master_dataa;                                         // cpu_1:E_ci_combo_dataa -> cpu_1_custom_instruction_master_translator:ci_slave_dataa
	wire         cpu_1_custom_instruction_master_writerc;                                       // cpu_1:E_ci_combo_writerc -> cpu_1_custom_instruction_master_translator:ci_slave_writerc
	wire   [7:0] cpu_1_custom_instruction_master_n;                                             // cpu_1:E_ci_combo_n -> cpu_1_custom_instruction_master_translator:ci_slave_n
	wire  [31:0] cpu_1_custom_instruction_master_translator_comb_ci_master_result;              // cpu_1_custom_instruction_master_comb_xconnect:ci_slave_result -> cpu_1_custom_instruction_master_translator:comb_ci_master_result
	wire         cpu_1_custom_instruction_master_translator_comb_ci_master_readra;              // cpu_1_custom_instruction_master_translator:comb_ci_master_readra -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_readra
	wire   [4:0] cpu_1_custom_instruction_master_translator_comb_ci_master_a;                   // cpu_1_custom_instruction_master_translator:comb_ci_master_a -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_a
	wire   [4:0] cpu_1_custom_instruction_master_translator_comb_ci_master_b;                   // cpu_1_custom_instruction_master_translator:comb_ci_master_b -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_b
	wire         cpu_1_custom_instruction_master_translator_comb_ci_master_readrb;              // cpu_1_custom_instruction_master_translator:comb_ci_master_readrb -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_readrb
	wire   [4:0] cpu_1_custom_instruction_master_translator_comb_ci_master_c;                   // cpu_1_custom_instruction_master_translator:comb_ci_master_c -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_c
	wire         cpu_1_custom_instruction_master_translator_comb_ci_master_estatus;             // cpu_1_custom_instruction_master_translator:comb_ci_master_estatus -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_estatus
	wire  [31:0] cpu_1_custom_instruction_master_translator_comb_ci_master_ipending;            // cpu_1_custom_instruction_master_translator:comb_ci_master_ipending -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_ipending
	wire  [31:0] cpu_1_custom_instruction_master_translator_comb_ci_master_datab;               // cpu_1_custom_instruction_master_translator:comb_ci_master_datab -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_datab
	wire  [31:0] cpu_1_custom_instruction_master_translator_comb_ci_master_dataa;               // cpu_1_custom_instruction_master_translator:comb_ci_master_dataa -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_dataa
	wire         cpu_1_custom_instruction_master_translator_comb_ci_master_writerc;             // cpu_1_custom_instruction_master_translator:comb_ci_master_writerc -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_writerc
	wire   [7:0] cpu_1_custom_instruction_master_translator_comb_ci_master_n;                   // cpu_1_custom_instruction_master_translator:comb_ci_master_n -> cpu_1_custom_instruction_master_comb_xconnect:ci_slave_n
	wire  [31:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_result;               // cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_result -> cpu_1_custom_instruction_master_comb_xconnect:ci_master0_result
	wire         cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readra;               // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_readra -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_readra
	wire   [4:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_a;                    // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_a -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_a
	wire   [4:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_b;                    // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_b -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_b
	wire         cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readrb;               // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_readrb -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_readrb
	wire   [4:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_c;                    // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_c -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_c
	wire         cpu_1_custom_instruction_master_comb_xconnect_ci_master0_estatus;              // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_estatus -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_estatus
	wire  [31:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_ipending;             // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_ipending -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_ipending
	wire  [31:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_datab;                // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_datab -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_datab
	wire  [31:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_dataa;                // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_dataa -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_dataa
	wire         cpu_1_custom_instruction_master_comb_xconnect_ci_master0_writerc;              // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_writerc -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_writerc
	wire   [7:0] cpu_1_custom_instruction_master_comb_xconnect_ci_master0_n;                    // cpu_1_custom_instruction_master_comb_xconnect:ci_master0_n -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_slave_n
	wire  [31:0] cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_result;       // SigProcOperation_0:OutData -> cpu_1_custom_instruction_master_comb_slave_translator0:ci_master_result
	wire  [31:0] cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_datab;        // cpu_1_custom_instruction_master_comb_slave_translator0:ci_master_datab -> SigProcOperation_0:Param
	wire  [31:0] cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_dataa;        // cpu_1_custom_instruction_master_comb_slave_translator0:ci_master_dataa -> SigProcOperation_0:InData
	wire  [31:0] hw_accelerator_0_avalon_master_readdata;                                       // mm_interconnect_0:HW_Accelerator_0_avalon_master_readdata -> HW_Accelerator_0:AM_readdata
	wire         hw_accelerator_0_avalon_master_waitrequest;                                    // mm_interconnect_0:HW_Accelerator_0_avalon_master_waitrequest -> HW_Accelerator_0:AM_waitrequest
	wire  [31:0] hw_accelerator_0_avalon_master_address;                                        // HW_Accelerator_0:AM_address -> mm_interconnect_0:HW_Accelerator_0_avalon_master_address
	wire   [3:0] hw_accelerator_0_avalon_master_byteenable;                                     // HW_Accelerator_0:AM_byteenable -> mm_interconnect_0:HW_Accelerator_0_avalon_master_byteenable
	wire         hw_accelerator_0_avalon_master_read;                                           // HW_Accelerator_0:AM_read -> mm_interconnect_0:HW_Accelerator_0_avalon_master_read
	wire         hw_accelerator_0_avalon_master_write;                                          // HW_Accelerator_0:AM_write -> mm_interconnect_0:HW_Accelerator_0_avalon_master_write
	wire  [31:0] hw_accelerator_0_avalon_master_writedata;                                      // HW_Accelerator_0:AM_writedata -> mm_interconnect_0:HW_Accelerator_0_avalon_master_writedata
	wire  [31:0] cpu_0_data_master_readdata;                                                    // mm_interconnect_0:cpu_0_data_master_readdata -> cpu_0:d_readdata
	wire         cpu_0_data_master_waitrequest;                                                 // mm_interconnect_0:cpu_0_data_master_waitrequest -> cpu_0:d_waitrequest
	wire         cpu_0_data_master_debugaccess;                                                 // cpu_0:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_0_data_master_debugaccess
	wire  [26:0] cpu_0_data_master_address;                                                     // cpu_0:d_address -> mm_interconnect_0:cpu_0_data_master_address
	wire   [3:0] cpu_0_data_master_byteenable;                                                  // cpu_0:d_byteenable -> mm_interconnect_0:cpu_0_data_master_byteenable
	wire         cpu_0_data_master_read;                                                        // cpu_0:d_read -> mm_interconnect_0:cpu_0_data_master_read
	wire         cpu_0_data_master_readdatavalid;                                               // mm_interconnect_0:cpu_0_data_master_readdatavalid -> cpu_0:d_readdatavalid
	wire         cpu_0_data_master_write;                                                       // cpu_0:d_write -> mm_interconnect_0:cpu_0_data_master_write
	wire  [31:0] cpu_0_data_master_writedata;                                                   // cpu_0:d_writedata -> mm_interconnect_0:cpu_0_data_master_writedata
	wire  [31:0] cpu_1_data_master_readdata;                                                    // mm_interconnect_0:cpu_1_data_master_readdata -> cpu_1:d_readdata
	wire         cpu_1_data_master_waitrequest;                                                 // mm_interconnect_0:cpu_1_data_master_waitrequest -> cpu_1:d_waitrequest
	wire         cpu_1_data_master_debugaccess;                                                 // cpu_1:debug_mem_slave_debugaccess_to_roms -> mm_interconnect_0:cpu_1_data_master_debugaccess
	wire  [26:0] cpu_1_data_master_address;                                                     // cpu_1:d_address -> mm_interconnect_0:cpu_1_data_master_address
	wire   [3:0] cpu_1_data_master_byteenable;                                                  // cpu_1:d_byteenable -> mm_interconnect_0:cpu_1_data_master_byteenable
	wire         cpu_1_data_master_read;                                                        // cpu_1:d_read -> mm_interconnect_0:cpu_1_data_master_read
	wire         cpu_1_data_master_readdatavalid;                                               // mm_interconnect_0:cpu_1_data_master_readdatavalid -> cpu_1:d_readdatavalid
	wire         cpu_1_data_master_write;                                                       // cpu_1:d_write -> mm_interconnect_0:cpu_1_data_master_write
	wire  [31:0] cpu_1_data_master_writedata;                                                   // cpu_1:d_writedata -> mm_interconnect_0:cpu_1_data_master_writedata
	wire  [31:0] cpu_0_instruction_master_readdata;                                             // mm_interconnect_0:cpu_0_instruction_master_readdata -> cpu_0:i_readdata
	wire         cpu_0_instruction_master_waitrequest;                                          // mm_interconnect_0:cpu_0_instruction_master_waitrequest -> cpu_0:i_waitrequest
	wire  [26:0] cpu_0_instruction_master_address;                                              // cpu_0:i_address -> mm_interconnect_0:cpu_0_instruction_master_address
	wire         cpu_0_instruction_master_read;                                                 // cpu_0:i_read -> mm_interconnect_0:cpu_0_instruction_master_read
	wire         cpu_0_instruction_master_readdatavalid;                                        // mm_interconnect_0:cpu_0_instruction_master_readdatavalid -> cpu_0:i_readdatavalid
	wire  [31:0] cpu_1_instruction_master_readdata;                                             // mm_interconnect_0:cpu_1_instruction_master_readdata -> cpu_1:i_readdata
	wire         cpu_1_instruction_master_waitrequest;                                          // mm_interconnect_0:cpu_1_instruction_master_waitrequest -> cpu_1:i_waitrequest
	wire  [26:0] cpu_1_instruction_master_address;                                              // cpu_1:i_address -> mm_interconnect_0:cpu_1_instruction_master_address
	wire         cpu_1_instruction_master_read;                                                 // cpu_1:i_read -> mm_interconnect_0:cpu_1_instruction_master_read
	wire         cpu_1_instruction_master_readdatavalid;                                        // mm_interconnect_0:cpu_1_instruction_master_readdatavalid -> cpu_1:i_readdatavalid
	wire         mm_interconnect_0_sdram_controller_2_s1_chipselect;                            // mm_interconnect_0:sdram_controller_2_s1_chipselect -> sdram_controller_2:az_cs
	wire  [15:0] mm_interconnect_0_sdram_controller_2_s1_readdata;                              // sdram_controller_2:za_data -> mm_interconnect_0:sdram_controller_2_s1_readdata
	wire         mm_interconnect_0_sdram_controller_2_s1_waitrequest;                           // sdram_controller_2:za_waitrequest -> mm_interconnect_0:sdram_controller_2_s1_waitrequest
	wire  [24:0] mm_interconnect_0_sdram_controller_2_s1_address;                               // mm_interconnect_0:sdram_controller_2_s1_address -> sdram_controller_2:az_addr
	wire         mm_interconnect_0_sdram_controller_2_s1_read;                                  // mm_interconnect_0:sdram_controller_2_s1_read -> sdram_controller_2:az_rd_n
	wire   [1:0] mm_interconnect_0_sdram_controller_2_s1_byteenable;                            // mm_interconnect_0:sdram_controller_2_s1_byteenable -> sdram_controller_2:az_be_n
	wire         mm_interconnect_0_sdram_controller_2_s1_readdatavalid;                         // sdram_controller_2:za_valid -> mm_interconnect_0:sdram_controller_2_s1_readdatavalid
	wire         mm_interconnect_0_sdram_controller_2_s1_write;                                 // mm_interconnect_0:sdram_controller_2_s1_write -> sdram_controller_2:az_wr_n
	wire  [15:0] mm_interconnect_0_sdram_controller_2_s1_writedata;                             // mm_interconnect_0:sdram_controller_2_s1_writedata -> sdram_controller_2:az_data
	wire  [31:0] mm_interconnect_0_hw_accelerator_0_as_readdata;                                // HW_Accelerator_0:AS_readdata -> mm_interconnect_0:HW_Accelerator_0_as_readdata
	wire   [2:0] mm_interconnect_0_hw_accelerator_0_as_address;                                 // mm_interconnect_0:HW_Accelerator_0_as_address -> HW_Accelerator_0:AS_address
	wire         mm_interconnect_0_hw_accelerator_0_as_read;                                    // mm_interconnect_0:HW_Accelerator_0_as_read -> HW_Accelerator_0:AS_read
	wire         mm_interconnect_0_hw_accelerator_0_as_write;                                   // mm_interconnect_0:HW_Accelerator_0_as_write -> HW_Accelerator_0:AS_write
	wire  [31:0] mm_interconnect_0_hw_accelerator_0_as_writedata;                               // mm_interconnect_0:HW_Accelerator_0_as_writedata -> HW_Accelerator_0:AS_writedata
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect;                    // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_chipselect -> jtag_uart_1:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata;                      // jtag_uart_1:av_readdata -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest;                   // jtag_uart_1:av_waitrequest -> mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address;                       // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_address -> jtag_uart_1:av_address
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read;                          // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_read -> jtag_uart_1:av_read_n
	wire         mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write;                         // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_write -> jtag_uart_1:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata;                     // mm_interconnect_0:jtag_uart_1_avalon_jtag_slave_writedata -> jtag_uart_1:av_writedata
	wire         mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_chipselect;       // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_chipselect -> parallel_port_1:chipselect
	wire  [31:0] mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_readdata;         // parallel_port_1:readdata -> mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_readdata
	wire   [1:0] mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_address;          // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_address -> parallel_port_1:address
	wire         mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_read;             // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_read -> parallel_port_1:read
	wire   [3:0] mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_byteenable;       // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_byteenable -> parallel_port_1:byteenable
	wire         mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_write;            // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_write -> parallel_port_1:write
	wire  [31:0] mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_writedata;        // mm_interconnect_0:parallel_port_1_avalon_parallel_port_slave_writedata -> parallel_port_1:writedata
	wire         mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_chipselect;       // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_chipselect -> parallel_port_2:chipselect
	wire  [31:0] mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_readdata;         // parallel_port_2:readdata -> mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_readdata
	wire   [1:0] mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_address;          // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_address -> parallel_port_2:address
	wire         mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_read;             // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_read -> parallel_port_2:read
	wire   [3:0] mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_byteenable;       // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_byteenable -> parallel_port_2:byteenable
	wire         mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_write;            // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_write -> parallel_port_2:write
	wire  [31:0] mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_writedata;        // mm_interconnect_0:parallel_port_2_avalon_parallel_port_slave_writedata -> parallel_port_2:writedata
	wire  [31:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_readdata;                 // mailbox_simple_0:avmm_rcv_readdata -> mm_interconnect_0:mailbox_simple_0_avmm_msg_receiver_readdata
	wire   [1:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_address;                  // mm_interconnect_0:mailbox_simple_0_avmm_msg_receiver_address -> mailbox_simple_0:avmm_rcv_address
	wire         mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_read;                     // mm_interconnect_0:mailbox_simple_0_avmm_msg_receiver_read -> mailbox_simple_0:avmm_rcv_read
	wire         mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_write;                    // mm_interconnect_0:mailbox_simple_0_avmm_msg_receiver_write -> mailbox_simple_0:avmm_rcv_write
	wire  [31:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_writedata;                // mm_interconnect_0:mailbox_simple_0_avmm_msg_receiver_writedata -> mailbox_simple_0:avmm_rcv_writedata
	wire  [31:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_readdata;                   // mailbox_simple_1:avmm_snd_readdata -> mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_readdata
	wire         mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_waitrequest;                // mailbox_simple_1:avmm_snd_waitrequest -> mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_waitrequest
	wire   [1:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_address;                    // mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_address -> mailbox_simple_1:avmm_snd_address
	wire         mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_read;                       // mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_read -> mailbox_simple_1:avmm_snd_read
	wire         mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_write;                      // mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_write -> mailbox_simple_1:avmm_snd_write
	wire  [31:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_writedata;                  // mm_interconnect_0:mailbox_simple_1_avmm_msg_sender_writedata -> mailbox_simple_1:avmm_snd_writedata
	wire  [31:0] mm_interconnect_0_performance_counter_1_control_slave_readdata;                // performance_counter_1:readdata -> mm_interconnect_0:performance_counter_1_control_slave_readdata
	wire   [4:0] mm_interconnect_0_performance_counter_1_control_slave_address;                 // mm_interconnect_0:performance_counter_1_control_slave_address -> performance_counter_1:address
	wire         mm_interconnect_0_performance_counter_1_control_slave_begintransfer;           // mm_interconnect_0:performance_counter_1_control_slave_begintransfer -> performance_counter_1:begintransfer
	wire         mm_interconnect_0_performance_counter_1_control_slave_write;                   // mm_interconnect_0:performance_counter_1_control_slave_write -> performance_counter_1:write
	wire  [31:0] mm_interconnect_0_performance_counter_1_control_slave_writedata;               // mm_interconnect_0:performance_counter_1_control_slave_writedata -> performance_counter_1:writedata
	wire  [31:0] mm_interconnect_0_cpu_1_debug_mem_slave_readdata;                              // cpu_1:debug_mem_slave_readdata -> mm_interconnect_0:cpu_1_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest;                           // cpu_1:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_1_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess;                           // mm_interconnect_0:cpu_1_debug_mem_slave_debugaccess -> cpu_1:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_1_debug_mem_slave_address;                               // mm_interconnect_0:cpu_1_debug_mem_slave_address -> cpu_1:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_read;                                  // mm_interconnect_0:cpu_1_debug_mem_slave_read -> cpu_1:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_1_debug_mem_slave_byteenable;                            // mm_interconnect_0:cpu_1_debug_mem_slave_byteenable -> cpu_1:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_1_debug_mem_slave_write;                                 // mm_interconnect_0:cpu_1_debug_mem_slave_write -> cpu_1:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_1_debug_mem_slave_writedata;                             // mm_interconnect_0:cpu_1_debug_mem_slave_writedata -> cpu_1:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_memory_1_s1_chipselect;                               // mm_interconnect_0:onchip_memory_1_s1_chipselect -> onchip_memory_1:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory_1_s1_readdata;                                 // onchip_memory_1:readdata -> mm_interconnect_0:onchip_memory_1_s1_readdata
	wire  [14:0] mm_interconnect_0_onchip_memory_1_s1_address;                                  // mm_interconnect_0:onchip_memory_1_s1_address -> onchip_memory_1:address
	wire   [3:0] mm_interconnect_0_onchip_memory_1_s1_byteenable;                               // mm_interconnect_0:onchip_memory_1_s1_byteenable -> onchip_memory_1:byteenable
	wire         mm_interconnect_0_onchip_memory_1_s1_write;                                    // mm_interconnect_0:onchip_memory_1_s1_write -> onchip_memory_1:write
	wire  [31:0] mm_interconnect_0_onchip_memory_1_s1_writedata;                                // mm_interconnect_0:onchip_memory_1_s1_writedata -> onchip_memory_1:writedata
	wire         mm_interconnect_0_onchip_memory_1_s1_clken;                                    // mm_interconnect_0:onchip_memory_1_s1_clken -> onchip_memory_1:clken
	wire         mm_interconnect_0_pio_2_s1_chipselect;                                         // mm_interconnect_0:pio_2_s1_chipselect -> pio_2:chipselect
	wire  [31:0] mm_interconnect_0_pio_2_s1_readdata;                                           // pio_2:readdata -> mm_interconnect_0:pio_2_s1_readdata
	wire   [1:0] mm_interconnect_0_pio_2_s1_address;                                            // mm_interconnect_0:pio_2_s1_address -> pio_2:address
	wire         mm_interconnect_0_pio_2_s1_write;                                              // mm_interconnect_0:pio_2_s1_write -> pio_2:write_n
	wire  [31:0] mm_interconnect_0_pio_2_s1_writedata;                                          // mm_interconnect_0:pio_2_s1_writedata -> pio_2:writedata
	wire         mm_interconnect_0_audio_0_avalon_audio_slave_chipselect;                       // mm_interconnect_0:audio_0_avalon_audio_slave_chipselect -> audio_0:chipselect
	wire  [31:0] mm_interconnect_0_audio_0_avalon_audio_slave_readdata;                         // audio_0:readdata -> mm_interconnect_0:audio_0_avalon_audio_slave_readdata
	wire   [1:0] mm_interconnect_0_audio_0_avalon_audio_slave_address;                          // mm_interconnect_0:audio_0_avalon_audio_slave_address -> audio_0:address
	wire         mm_interconnect_0_audio_0_avalon_audio_slave_read;                             // mm_interconnect_0:audio_0_avalon_audio_slave_read -> audio_0:read
	wire         mm_interconnect_0_audio_0_avalon_audio_slave_write;                            // mm_interconnect_0:audio_0_avalon_audio_slave_write -> audio_0:write
	wire  [31:0] mm_interconnect_0_audio_0_avalon_audio_slave_writedata;                        // mm_interconnect_0:audio_0_avalon_audio_slave_writedata -> audio_0:writedata
	wire  [31:0] mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_readdata;    // audio_and_video_config_0:readdata -> mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_readdata
	wire         mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_waitrequest; // audio_and_video_config_0:waitrequest -> mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_waitrequest
	wire   [1:0] mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_address;     // mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_address -> audio_and_video_config_0:address
	wire         mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_read;        // mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_read -> audio_and_video_config_0:read
	wire   [3:0] mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_byteenable;  // mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_byteenable -> audio_and_video_config_0:byteenable
	wire         mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_write;       // mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_write -> audio_and_video_config_0:write
	wire  [31:0] mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_writedata;   // mm_interconnect_0:audio_and_video_config_0_avalon_av_config_slave_writedata -> audio_and_video_config_0:writedata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect;                    // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_chipselect -> jtag_uart_0:av_chipselect
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata;                      // jtag_uart_0:av_readdata -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_readdata
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest;                   // jtag_uart_0:av_waitrequest -> mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_waitrequest
	wire   [0:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address;                       // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_address -> jtag_uart_0:av_address
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read;                          // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_read -> jtag_uart_0:av_read_n
	wire         mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write;                         // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_write -> jtag_uart_0:av_write_n
	wire  [31:0] mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata;                     // mm_interconnect_0:jtag_uart_0_avalon_jtag_slave_writedata -> jtag_uart_0:av_writedata
	wire         mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_chipselect;       // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_chipselect -> parallel_port_0:chipselect
	wire  [31:0] mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_readdata;         // parallel_port_0:readdata -> mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_readdata
	wire   [1:0] mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_address;          // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_address -> parallel_port_0:address
	wire         mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_read;             // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_read -> parallel_port_0:read
	wire   [3:0] mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_byteenable;       // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_byteenable -> parallel_port_0:byteenable
	wire         mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_write;            // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_write -> parallel_port_0:write
	wire  [31:0] mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_writedata;        // mm_interconnect_0:parallel_port_0_avalon_parallel_port_slave_writedata -> parallel_port_0:writedata
	wire  [31:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_readdata;                 // mailbox_simple_1:avmm_rcv_readdata -> mm_interconnect_0:mailbox_simple_1_avmm_msg_receiver_readdata
	wire   [1:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_address;                  // mm_interconnect_0:mailbox_simple_1_avmm_msg_receiver_address -> mailbox_simple_1:avmm_rcv_address
	wire         mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_read;                     // mm_interconnect_0:mailbox_simple_1_avmm_msg_receiver_read -> mailbox_simple_1:avmm_rcv_read
	wire         mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_write;                    // mm_interconnect_0:mailbox_simple_1_avmm_msg_receiver_write -> mailbox_simple_1:avmm_rcv_write
	wire  [31:0] mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_writedata;                // mm_interconnect_0:mailbox_simple_1_avmm_msg_receiver_writedata -> mailbox_simple_1:avmm_rcv_writedata
	wire  [31:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_readdata;                   // mailbox_simple_0:avmm_snd_readdata -> mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_readdata
	wire         mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_waitrequest;                // mailbox_simple_0:avmm_snd_waitrequest -> mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_waitrequest
	wire   [1:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_address;                    // mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_address -> mailbox_simple_0:avmm_snd_address
	wire         mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_read;                       // mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_read -> mailbox_simple_0:avmm_snd_read
	wire         mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_write;                      // mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_write -> mailbox_simple_0:avmm_snd_write
	wire  [31:0] mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_writedata;                  // mm_interconnect_0:mailbox_simple_0_avmm_msg_sender_writedata -> mailbox_simple_0:avmm_snd_writedata
	wire  [31:0] mm_interconnect_0_performance_counter_0_control_slave_readdata;                // performance_counter_0:readdata -> mm_interconnect_0:performance_counter_0_control_slave_readdata
	wire   [4:0] mm_interconnect_0_performance_counter_0_control_slave_address;                 // mm_interconnect_0:performance_counter_0_control_slave_address -> performance_counter_0:address
	wire         mm_interconnect_0_performance_counter_0_control_slave_begintransfer;           // mm_interconnect_0:performance_counter_0_control_slave_begintransfer -> performance_counter_0:begintransfer
	wire         mm_interconnect_0_performance_counter_0_control_slave_write;                   // mm_interconnect_0:performance_counter_0_control_slave_write -> performance_counter_0:write
	wire  [31:0] mm_interconnect_0_performance_counter_0_control_slave_writedata;               // mm_interconnect_0:performance_counter_0_control_slave_writedata -> performance_counter_0:writedata
	wire  [31:0] mm_interconnect_0_cpu_0_debug_mem_slave_readdata;                              // cpu_0:debug_mem_slave_readdata -> mm_interconnect_0:cpu_0_debug_mem_slave_readdata
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest;                           // cpu_0:debug_mem_slave_waitrequest -> mm_interconnect_0:cpu_0_debug_mem_slave_waitrequest
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess;                           // mm_interconnect_0:cpu_0_debug_mem_slave_debugaccess -> cpu_0:debug_mem_slave_debugaccess
	wire   [8:0] mm_interconnect_0_cpu_0_debug_mem_slave_address;                               // mm_interconnect_0:cpu_0_debug_mem_slave_address -> cpu_0:debug_mem_slave_address
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_read;                                  // mm_interconnect_0:cpu_0_debug_mem_slave_read -> cpu_0:debug_mem_slave_read
	wire   [3:0] mm_interconnect_0_cpu_0_debug_mem_slave_byteenable;                            // mm_interconnect_0:cpu_0_debug_mem_slave_byteenable -> cpu_0:debug_mem_slave_byteenable
	wire         mm_interconnect_0_cpu_0_debug_mem_slave_write;                                 // mm_interconnect_0:cpu_0_debug_mem_slave_write -> cpu_0:debug_mem_slave_write
	wire  [31:0] mm_interconnect_0_cpu_0_debug_mem_slave_writedata;                             // mm_interconnect_0:cpu_0_debug_mem_slave_writedata -> cpu_0:debug_mem_slave_writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_chipselect;                              // mm_interconnect_0:onchip_memory2_0_s1_chipselect -> onchip_memory2_0:chipselect
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_readdata;                                // onchip_memory2_0:readdata -> mm_interconnect_0:onchip_memory2_0_s1_readdata
	wire  [14:0] mm_interconnect_0_onchip_memory2_0_s1_address;                                 // mm_interconnect_0:onchip_memory2_0_s1_address -> onchip_memory2_0:address
	wire   [3:0] mm_interconnect_0_onchip_memory2_0_s1_byteenable;                              // mm_interconnect_0:onchip_memory2_0_s1_byteenable -> onchip_memory2_0:byteenable
	wire         mm_interconnect_0_onchip_memory2_0_s1_write;                                   // mm_interconnect_0:onchip_memory2_0_s1_write -> onchip_memory2_0:write
	wire  [31:0] mm_interconnect_0_onchip_memory2_0_s1_writedata;                               // mm_interconnect_0:onchip_memory2_0_s1_writedata -> onchip_memory2_0:writedata
	wire         mm_interconnect_0_onchip_memory2_0_s1_clken;                                   // mm_interconnect_0:onchip_memory2_0_s1_clken -> onchip_memory2_0:clken
	wire         irq_mapper_receiver0_irq;                                                      // audio_0:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver3_irq;                                                      // jtag_uart_0:av_irq -> irq_mapper:receiver3_irq
	wire  [31:0] cpu_0_irq_irq;                                                                 // irq_mapper:sender_irq -> cpu_0:irq
	wire         irq_mapper_001_receiver2_irq;                                                  // jtag_uart_1:av_irq -> irq_mapper_001:receiver2_irq
	wire  [31:0] cpu_1_irq_irq;                                                                 // irq_mapper_001:sender_irq -> cpu_1:irq
	wire         irq_mapper_receiver1_irq;                                                      // mailbox_simple_0:irq_msg -> [irq_mapper:receiver1_irq, irq_mapper_001:receiver0_irq]
	wire         irq_mapper_receiver2_irq;                                                      // mailbox_simple_1:irq_msg -> [irq_mapper:receiver2_irq, irq_mapper_001:receiver1_irq]
	wire         irq_mapper_receiver4_irq;                                                      // pio_2:irq -> [irq_mapper:receiver4_irq, irq_mapper_001:receiver3_irq]
	wire         rst_controller_reset_out_reset;                                                // rst_controller:reset_out -> [HW_Accelerator_0:nReset, cpu_1:reset_n, irq_mapper_001:reset, jtag_uart_1:rst_n, mm_interconnect_0:HW_Accelerator_0_reset_sink_reset_bridge_in_reset_reset, onchip_memory_1:reset, parallel_port_1:reset, performance_counter_1:reset_n, rst_translator:in_reset]
	wire         rst_controller_reset_out_reset_req;                                            // rst_controller:reset_req -> [cpu_1:reset_req, onchip_memory_1:reset_req, rst_translator:reset_req_in]
	wire         cpu_1_debug_reset_request_reset;                                               // cpu_1:debug_reset_request -> rst_controller:reset_in1
	wire         rst_controller_001_reset_out_reset;                                            // rst_controller_001:reset_out -> [audio_0:reset, audio_and_video_config_0:reset, cpu_0:reset_n, irq_mapper:reset, jtag_uart_0:rst_n, mm_interconnect_0:cpu_0_reset_reset_bridge_in_reset_reset, onchip_memory2_0:reset, parallel_port_0:reset, performance_counter_0:reset_n, rst_translator_001:in_reset]
	wire         rst_controller_001_reset_out_reset_req;                                        // rst_controller_001:reset_req -> [cpu_0:reset_req, onchip_memory2_0:reset_req, rst_translator_001:reset_req_in]
	wire         cpu_0_debug_reset_request_reset;                                               // cpu_0:debug_reset_request -> [rst_controller_001:reset_in1, rst_controller_002:reset_in1]
	wire         rst_controller_002_reset_out_reset;                                            // rst_controller_002:reset_out -> audio_pll_0:ref_reset_reset
	wire         rst_controller_003_reset_out_reset;                                            // rst_controller_003:reset_out -> [mailbox_simple_0:rst_n, mailbox_simple_1:rst_n, mm_interconnect_0:parallel_port_2_reset_reset_bridge_in_reset_reset, parallel_port_2:reset, pio_2:reset_n]
	wire         rst_controller_004_reset_out_reset;                                            // rst_controller_004:reset_out -> [mm_interconnect_0:sdram_controller_2_reset_reset_bridge_in_reset_reset, sdram_controller_2:reset_n]

	HW_accelerator hw_accelerator_0 (
		.Clk            (pll_2_outclk0_clk),                               //         clock.clk
		.AS_address     (mm_interconnect_0_hw_accelerator_0_as_address),   //            as.address
		.AS_read        (mm_interconnect_0_hw_accelerator_0_as_read),      //              .read
		.AS_readdata    (mm_interconnect_0_hw_accelerator_0_as_readdata),  //              .readdata
		.AS_write       (mm_interconnect_0_hw_accelerator_0_as_write),     //              .write
		.AS_writedata   (mm_interconnect_0_hw_accelerator_0_as_writedata), //              .writedata
		.nReset         (~rst_controller_reset_out_reset),                 //    reset_sink.reset_n
		.AM_address     (hw_accelerator_0_avalon_master_address),          // avalon_master.address
		.AM_byteenable  (hw_accelerator_0_avalon_master_byteenable),       //              .byteenable
		.AM_write       (hw_accelerator_0_avalon_master_write),            //              .write
		.AM_writedata   (hw_accelerator_0_avalon_master_writedata),        //              .writedata
		.AM_read        (hw_accelerator_0_avalon_master_read),             //              .read
		.AM_readdata    (hw_accelerator_0_avalon_master_readdata),         //              .readdata
		.AM_waitrequest (hw_accelerator_0_avalon_master_waitrequest),      //              .waitrequest
		.HW_Debug       (hw_debug_readdata)                                //   conduit_end.readdata
	);

	SigProcOperation sigprocoperation_0 (
		.Param   (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_datab),  // nios_custom_instruction_slave.datab
		.InData  (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_dataa),  //                              .dataa
		.OutData (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_result)  //                              .result
	);

	soc_system_audio_0 audio_0 (
		.clk         (pll_2_outclk0_clk),                                       //                clk.clk
		.reset       (rst_controller_001_reset_out_reset),                      //              reset.reset
		.address     (mm_interconnect_0_audio_0_avalon_audio_slave_address),    // avalon_audio_slave.address
		.chipselect  (mm_interconnect_0_audio_0_avalon_audio_slave_chipselect), //                   .chipselect
		.read        (mm_interconnect_0_audio_0_avalon_audio_slave_read),       //                   .read
		.write       (mm_interconnect_0_audio_0_avalon_audio_slave_write),      //                   .write
		.writedata   (mm_interconnect_0_audio_0_avalon_audio_slave_writedata),  //                   .writedata
		.readdata    (mm_interconnect_0_audio_0_avalon_audio_slave_readdata),   //                   .readdata
		.irq         (irq_mapper_receiver0_irq),                                //          interrupt.irq
		.AUD_ADCDAT  (audio_0_external_interface_ADCDAT),                       // external_interface.export
		.AUD_ADCLRCK (audio_0_external_interface_ADCLRCK),                      //                   .export
		.AUD_BCLK    (audio_0_external_interface_BCLK),                         //                   .export
		.AUD_DACDAT  (audio_0_external_interface_DACDAT),                       //                   .export
		.AUD_DACLRCK (audio_0_external_interface_DACLRCK)                       //                   .export
	);

	soc_system_audio_and_video_config_0 audio_and_video_config_0 (
		.clk         (pll_2_outclk0_clk),                                                             //                    clk.clk
		.reset       (rst_controller_001_reset_out_reset),                                            //                  reset.reset
		.address     (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_address),     // avalon_av_config_slave.address
		.byteenable  (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_byteenable),  //                       .byteenable
		.read        (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_read),        //                       .read
		.write       (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_write),       //                       .write
		.writedata   (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_writedata),   //                       .writedata
		.readdata    (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_readdata),    //                       .readdata
		.waitrequest (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_waitrequest), //                       .waitrequest
		.I2C_SDAT    (audio_and_video_config_0_external_interface_SDAT),                              //     external_interface.export
		.I2C_SCLK    (audio_and_video_config_0_external_interface_SCLK)                               //                       .export
	);

	soc_system_audio_pll_0 audio_pll_0 (
		.ref_clk_clk        (pll_2_outclk0_clk),                  //      ref_clk.clk
		.ref_reset_reset    (rst_controller_002_reset_out_reset), //    ref_reset.reset
		.audio_clk_clk      (audio_pll_0_audio_clk_clk),          //    audio_clk.clk
		.reset_source_reset ()                                    // reset_source.reset
	);

	soc_system_cpu_0 cpu_0 (
		.clk                                 (pll_2_outclk0_clk),                                   //                       clk.clk
		.reset_n                             (~rst_controller_001_reset_out_reset),                 //                     reset.reset_n
		.reset_req                           (rst_controller_001_reset_out_reset_req),              //                          .reset_req
		.d_address                           (cpu_0_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_0_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_0_data_master_read),                              //                          .read
		.d_readdata                          (cpu_0_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_0_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_0_data_master_write),                             //                          .write
		.d_writedata                         (cpu_0_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_0_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_0_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_0_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_0_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_0_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_0_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_0_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_0_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_0_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_0_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_0_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_0_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_0_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_0_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_0_debug_mem_slave_writedata),   //                          .writedata
		.dummy_ci_port                       ()                                                     // custom_instruction_master.readra
	);

	soc_system_cpu_1 cpu_1 (
		.clk                                 (pll_2_outclk0_clk),                                   //                       clk.clk
		.reset_n                             (~rst_controller_reset_out_reset),                     //                     reset.reset_n
		.reset_req                           (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                           (cpu_1_data_master_address),                           //               data_master.address
		.d_byteenable                        (cpu_1_data_master_byteenable),                        //                          .byteenable
		.d_read                              (cpu_1_data_master_read),                              //                          .read
		.d_readdata                          (cpu_1_data_master_readdata),                          //                          .readdata
		.d_waitrequest                       (cpu_1_data_master_waitrequest),                       //                          .waitrequest
		.d_write                             (cpu_1_data_master_write),                             //                          .write
		.d_writedata                         (cpu_1_data_master_writedata),                         //                          .writedata
		.d_readdatavalid                     (cpu_1_data_master_readdatavalid),                     //                          .readdatavalid
		.debug_mem_slave_debugaccess_to_roms (cpu_1_data_master_debugaccess),                       //                          .debugaccess
		.i_address                           (cpu_1_instruction_master_address),                    //        instruction_master.address
		.i_read                              (cpu_1_instruction_master_read),                       //                          .read
		.i_readdata                          (cpu_1_instruction_master_readdata),                   //                          .readdata
		.i_waitrequest                       (cpu_1_instruction_master_waitrequest),                //                          .waitrequest
		.i_readdatavalid                     (cpu_1_instruction_master_readdatavalid),              //                          .readdatavalid
		.irq                                 (cpu_1_irq_irq),                                       //                       irq.irq
		.debug_reset_request                 (cpu_1_debug_reset_request_reset),                     //       debug_reset_request.reset
		.debug_mem_slave_address             (mm_interconnect_0_cpu_1_debug_mem_slave_address),     //           debug_mem_slave.address
		.debug_mem_slave_byteenable          (mm_interconnect_0_cpu_1_debug_mem_slave_byteenable),  //                          .byteenable
		.debug_mem_slave_debugaccess         (mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess), //                          .debugaccess
		.debug_mem_slave_read                (mm_interconnect_0_cpu_1_debug_mem_slave_read),        //                          .read
		.debug_mem_slave_readdata            (mm_interconnect_0_cpu_1_debug_mem_slave_readdata),    //                          .readdata
		.debug_mem_slave_waitrequest         (mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest), //                          .waitrequest
		.debug_mem_slave_write               (mm_interconnect_0_cpu_1_debug_mem_slave_write),       //                          .write
		.debug_mem_slave_writedata           (mm_interconnect_0_cpu_1_debug_mem_slave_writedata),   //                          .writedata
		.E_ci_combo_result                   (cpu_1_custom_instruction_master_result),              // custom_instruction_master.result
		.E_ci_combo_a                        (cpu_1_custom_instruction_master_a),                   //                          .a
		.E_ci_combo_b                        (cpu_1_custom_instruction_master_b),                   //                          .b
		.E_ci_combo_c                        (cpu_1_custom_instruction_master_c),                   //                          .c
		.E_ci_combo_dataa                    (cpu_1_custom_instruction_master_dataa),               //                          .dataa
		.E_ci_combo_datab                    (cpu_1_custom_instruction_master_datab),               //                          .datab
		.E_ci_combo_estatus                  (cpu_1_custom_instruction_master_estatus),             //                          .estatus
		.E_ci_combo_ipending                 (cpu_1_custom_instruction_master_ipending),            //                          .ipending
		.E_ci_combo_n                        (cpu_1_custom_instruction_master_n),                   //                          .n
		.E_ci_combo_readra                   (cpu_1_custom_instruction_master_readra),              //                          .readra
		.E_ci_combo_readrb                   (cpu_1_custom_instruction_master_readrb),              //                          .readrb
		.E_ci_combo_writerc                  (cpu_1_custom_instruction_master_writerc)              //                          .writerc
	);

	soc_system_jtag_uart_0 jtag_uart_0 (
		.clk            (pll_2_outclk0_clk),                                           //               clk.clk
		.rst_n          (~rst_controller_001_reset_out_reset),                         //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_receiver3_irq)                                     //               irq.irq
	);

	soc_system_jtag_uart_0 jtag_uart_1 (
		.clk            (pll_2_outclk0_clk),                                           //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                             //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         (irq_mapper_001_receiver2_irq)                                 //               irq.irq
	);

	altera_avalon_mailbox #(
		.DWIDTH (32),
		.AWIDTH (2)
	) mailbox_simple_0 (
		.clk                  (pll_2_outclk0_clk),                                              //                   clk.clk
		.rst_n                (~rst_controller_003_reset_out_reset),                            //                 rst_n.reset_n
		.avmm_snd_address     (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_address),     //       avmm_msg_sender.address
		.avmm_snd_writedata   (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_writedata),   //                      .writedata
		.avmm_snd_write       (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_write),       //                      .write
		.avmm_snd_read        (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_read),        //                      .read
		.avmm_snd_readdata    (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_readdata),    //                      .readdata
		.avmm_snd_waitrequest (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_waitrequest), //                      .waitrequest
		.irq_msg              (irq_mapper_receiver1_irq),                                       // interrupt_msg_pending.irq
		.avmm_rcv_address     (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_address),   //     avmm_msg_receiver.address
		.avmm_rcv_read        (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_read),      //                      .read
		.avmm_rcv_writedata   (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_writedata), //                      .writedata
		.avmm_rcv_write       (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_write),     //                      .write
		.avmm_rcv_readdata    (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_readdata),  //                      .readdata
		.irq_space            ()                                                                //           (terminated)
	);

	altera_avalon_mailbox #(
		.DWIDTH (32),
		.AWIDTH (2)
	) mailbox_simple_1 (
		.clk                  (pll_2_outclk0_clk),                                              //                   clk.clk
		.rst_n                (~rst_controller_003_reset_out_reset),                            //                 rst_n.reset_n
		.avmm_snd_address     (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_address),     //       avmm_msg_sender.address
		.avmm_snd_writedata   (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_writedata),   //                      .writedata
		.avmm_snd_write       (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_write),       //                      .write
		.avmm_snd_read        (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_read),        //                      .read
		.avmm_snd_readdata    (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_readdata),    //                      .readdata
		.avmm_snd_waitrequest (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_waitrequest), //                      .waitrequest
		.irq_msg              (irq_mapper_receiver2_irq),                                       // interrupt_msg_pending.irq
		.avmm_rcv_address     (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_address),   //     avmm_msg_receiver.address
		.avmm_rcv_read        (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_read),      //                      .read
		.avmm_rcv_writedata   (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_writedata), //                      .writedata
		.avmm_rcv_write       (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_write),     //                      .write
		.avmm_rcv_readdata    (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_readdata),  //                      .readdata
		.irq_space            ()                                                                //           (terminated)
	);

	soc_system_onchip_memory2_0 onchip_memory2_0 (
		.clk        (pll_2_outclk0_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory2_0_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory2_0_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory2_0_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory2_0_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory2_0_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory2_0_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory2_0_s1_byteenable), //       .byteenable
		.reset      (rst_controller_001_reset_out_reset),               // reset1.reset
		.reset_req  (rst_controller_001_reset_out_reset_req),           //       .reset_req
		.freeze     (1'b0)                                              // (terminated)
	);

	soc_system_onchip_memory_1 onchip_memory_1 (
		.clk        (pll_2_outclk0_clk),                               //   clk1.clk
		.address    (mm_interconnect_0_onchip_memory_1_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_onchip_memory_1_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_onchip_memory_1_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_onchip_memory_1_s1_write),      //       .write
		.readdata   (mm_interconnect_0_onchip_memory_1_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_onchip_memory_1_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_onchip_memory_1_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),                  // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req),              //       .reset_req
		.freeze     (1'b0)                                             // (terminated)
	);

	soc_system_parallel_port_0 parallel_port_0 (
		.clk        (pll_2_outclk0_clk),                                                       //                        clk.clk
		.reset      (rst_controller_001_reset_out_reset),                                      //                      reset.reset
		.address    (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_address),    // avalon_parallel_port_slave.address
		.byteenable (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_byteenable), //                           .byteenable
		.chipselect (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_chipselect), //                           .chipselect
		.read       (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_read),       //                           .read
		.write      (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_write),      //                           .write
		.writedata  (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_writedata),  //                           .writedata
		.readdata   (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_readdata),   //                           .readdata
		.out_port   (pp0_out_export)                                                           //         external_interface.export
	);

	soc_system_parallel_port_0 parallel_port_1 (
		.clk        (pll_2_outclk0_clk),                                                       //                        clk.clk
		.reset      (rst_controller_reset_out_reset),                                          //                      reset.reset
		.address    (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_address),    // avalon_parallel_port_slave.address
		.byteenable (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_byteenable), //                           .byteenable
		.chipselect (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_chipselect), //                           .chipselect
		.read       (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_read),       //                           .read
		.write      (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_write),      //                           .write
		.writedata  (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_writedata),  //                           .writedata
		.readdata   (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_readdata),   //                           .readdata
		.out_port   (pp1_out_export)                                                           //         external_interface.export
	);

	soc_system_parallel_port_0 parallel_port_2 (
		.clk        (pll_2_outclk0_clk),                                                       //                        clk.clk
		.reset      (rst_controller_003_reset_out_reset),                                      //                      reset.reset
		.address    (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_address),    // avalon_parallel_port_slave.address
		.byteenable (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_byteenable), //                           .byteenable
		.chipselect (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_chipselect), //                           .chipselect
		.read       (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_read),       //                           .read
		.write      (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_write),      //                           .write
		.writedata  (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_writedata),  //                           .writedata
		.readdata   (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_readdata),   //                           .readdata
		.out_port   (pp2_out_export)                                                           //         external_interface.export
	);

	soc_system_performance_counter_0 performance_counter_0 (
		.clk           (pll_2_outclk0_clk),                                                   //           clk.clk
		.reset_n       (~rst_controller_001_reset_out_reset),                                 //         reset.reset_n
		.address       (mm_interconnect_0_performance_counter_0_control_slave_address),       // control_slave.address
		.begintransfer (mm_interconnect_0_performance_counter_0_control_slave_begintransfer), //              .begintransfer
		.readdata      (mm_interconnect_0_performance_counter_0_control_slave_readdata),      //              .readdata
		.write         (mm_interconnect_0_performance_counter_0_control_slave_write),         //              .write
		.writedata     (mm_interconnect_0_performance_counter_0_control_slave_writedata)      //              .writedata
	);

	soc_system_performance_counter_0 performance_counter_1 (
		.clk           (pll_2_outclk0_clk),                                                   //           clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                                     //         reset.reset_n
		.address       (mm_interconnect_0_performance_counter_1_control_slave_address),       // control_slave.address
		.begintransfer (mm_interconnect_0_performance_counter_1_control_slave_begintransfer), //              .begintransfer
		.readdata      (mm_interconnect_0_performance_counter_1_control_slave_readdata),      //              .readdata
		.write         (mm_interconnect_0_performance_counter_1_control_slave_write),         //              .write
		.writedata     (mm_interconnect_0_performance_counter_1_control_slave_writedata)      //              .writedata
	);

	soc_system_pio_2 pio_2 (
		.clk        (pll_2_outclk0_clk),                     //                 clk.clk
		.reset_n    (~rst_controller_003_reset_out_reset),   //               reset.reset_n
		.address    (mm_interconnect_0_pio_2_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_pio_2_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_pio_2_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_pio_2_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_pio_2_s1_readdata),   //                    .readdata
		.in_port    (pio_2_export),                          // external_connection.export
		.irq        (irq_mapper_receiver4_irq)               //                 irq.irq
	);

	soc_system_pll_2 pll_2 (
		.refclk   (clk_clk),           //  refclk.clk
		.rst      (~reset_reset_n),    //   reset.reset
		.outclk_0 (pll_2_outclk0_clk), // outclk0.clk
		.outclk_1 (pll_2_outclk1_clk), // outclk1.clk
		.outclk_2 (pll_2_outclk2_clk), // outclk2.clk
		.locked   ()                   // (terminated)
	);

	soc_system_sdram_controller_2 sdram_controller_2 (
		.clk            (pll_2_outclk1_clk),                                     //   clk.clk
		.reset_n        (~rst_controller_004_reset_out_reset),                   // reset.reset_n
		.az_addr        (mm_interconnect_0_sdram_controller_2_s1_address),       //    s1.address
		.az_be_n        (~mm_interconnect_0_sdram_controller_2_s1_byteenable),   //      .byteenable_n
		.az_cs          (mm_interconnect_0_sdram_controller_2_s1_chipselect),    //      .chipselect
		.az_data        (mm_interconnect_0_sdram_controller_2_s1_writedata),     //      .writedata
		.az_rd_n        (~mm_interconnect_0_sdram_controller_2_s1_read),         //      .read_n
		.az_wr_n        (~mm_interconnect_0_sdram_controller_2_s1_write),        //      .write_n
		.za_data        (mm_interconnect_0_sdram_controller_2_s1_readdata),      //      .readdata
		.za_valid       (mm_interconnect_0_sdram_controller_2_s1_readdatavalid), //      .readdatavalid
		.za_waitrequest (mm_interconnect_0_sdram_controller_2_s1_waitrequest),   //      .waitrequest
		.zs_addr        (sdram_controller_2_wire_addr),                          //  wire.export
		.zs_ba          (sdram_controller_2_wire_ba),                            //      .export
		.zs_cas_n       (sdram_controller_2_wire_cas_n),                         //      .export
		.zs_cke         (sdram_controller_2_wire_cke),                           //      .export
		.zs_cs_n        (sdram_controller_2_wire_cs_n),                          //      .export
		.zs_dq          (sdram_controller_2_wire_dq),                            //      .export
		.zs_dqm         (sdram_controller_2_wire_dqm),                           //      .export
		.zs_ras_n       (sdram_controller_2_wire_ras_n),                         //      .export
		.zs_we_n        (sdram_controller_2_wire_we_n)                           //      .export
	);

	altera_customins_master_translator #(
		.SHARED_COMB_AND_MULTI (0)
	) cpu_1_custom_instruction_master_translator (
		.ci_slave_dataa            (cpu_1_custom_instruction_master_dataa),                              //       ci_slave.dataa
		.ci_slave_datab            (cpu_1_custom_instruction_master_datab),                              //               .datab
		.ci_slave_result           (cpu_1_custom_instruction_master_result),                             //               .result
		.ci_slave_n                (cpu_1_custom_instruction_master_n),                                  //               .n
		.ci_slave_readra           (cpu_1_custom_instruction_master_readra),                             //               .readra
		.ci_slave_readrb           (cpu_1_custom_instruction_master_readrb),                             //               .readrb
		.ci_slave_writerc          (cpu_1_custom_instruction_master_writerc),                            //               .writerc
		.ci_slave_a                (cpu_1_custom_instruction_master_a),                                  //               .a
		.ci_slave_b                (cpu_1_custom_instruction_master_b),                                  //               .b
		.ci_slave_c                (cpu_1_custom_instruction_master_c),                                  //               .c
		.ci_slave_ipending         (cpu_1_custom_instruction_master_ipending),                           //               .ipending
		.ci_slave_estatus          (cpu_1_custom_instruction_master_estatus),                            //               .estatus
		.comb_ci_master_dataa      (cpu_1_custom_instruction_master_translator_comb_ci_master_dataa),    // comb_ci_master.dataa
		.comb_ci_master_datab      (cpu_1_custom_instruction_master_translator_comb_ci_master_datab),    //               .datab
		.comb_ci_master_result     (cpu_1_custom_instruction_master_translator_comb_ci_master_result),   //               .result
		.comb_ci_master_n          (cpu_1_custom_instruction_master_translator_comb_ci_master_n),        //               .n
		.comb_ci_master_readra     (cpu_1_custom_instruction_master_translator_comb_ci_master_readra),   //               .readra
		.comb_ci_master_readrb     (cpu_1_custom_instruction_master_translator_comb_ci_master_readrb),   //               .readrb
		.comb_ci_master_writerc    (cpu_1_custom_instruction_master_translator_comb_ci_master_writerc),  //               .writerc
		.comb_ci_master_a          (cpu_1_custom_instruction_master_translator_comb_ci_master_a),        //               .a
		.comb_ci_master_b          (cpu_1_custom_instruction_master_translator_comb_ci_master_b),        //               .b
		.comb_ci_master_c          (cpu_1_custom_instruction_master_translator_comb_ci_master_c),        //               .c
		.comb_ci_master_ipending   (cpu_1_custom_instruction_master_translator_comb_ci_master_ipending), //               .ipending
		.comb_ci_master_estatus    (cpu_1_custom_instruction_master_translator_comb_ci_master_estatus),  //               .estatus
		.ci_slave_multi_clk        (1'b0),                                                               //    (terminated)
		.ci_slave_multi_reset      (1'b0),                                                               //    (terminated)
		.ci_slave_multi_clken      (1'b0),                                                               //    (terminated)
		.ci_slave_multi_reset_req  (1'b0),                                                               //    (terminated)
		.ci_slave_multi_start      (1'b0),                                                               //    (terminated)
		.ci_slave_multi_done       (),                                                                   //    (terminated)
		.ci_slave_multi_dataa      (32'b00000000000000000000000000000000),                               //    (terminated)
		.ci_slave_multi_datab      (32'b00000000000000000000000000000000),                               //    (terminated)
		.ci_slave_multi_result     (),                                                                   //    (terminated)
		.ci_slave_multi_n          (8'b00000000),                                                        //    (terminated)
		.ci_slave_multi_readra     (1'b0),                                                               //    (terminated)
		.ci_slave_multi_readrb     (1'b0),                                                               //    (terminated)
		.ci_slave_multi_writerc    (1'b0),                                                               //    (terminated)
		.ci_slave_multi_a          (5'b00000),                                                           //    (terminated)
		.ci_slave_multi_b          (5'b00000),                                                           //    (terminated)
		.ci_slave_multi_c          (5'b00000),                                                           //    (terminated)
		.multi_ci_master_clk       (),                                                                   //    (terminated)
		.multi_ci_master_reset     (),                                                                   //    (terminated)
		.multi_ci_master_clken     (),                                                                   //    (terminated)
		.multi_ci_master_reset_req (),                                                                   //    (terminated)
		.multi_ci_master_start     (),                                                                   //    (terminated)
		.multi_ci_master_done      (1'b0),                                                               //    (terminated)
		.multi_ci_master_dataa     (),                                                                   //    (terminated)
		.multi_ci_master_datab     (),                                                                   //    (terminated)
		.multi_ci_master_result    (32'b00000000000000000000000000000000),                               //    (terminated)
		.multi_ci_master_n         (),                                                                   //    (terminated)
		.multi_ci_master_readra    (),                                                                   //    (terminated)
		.multi_ci_master_readrb    (),                                                                   //    (terminated)
		.multi_ci_master_writerc   (),                                                                   //    (terminated)
		.multi_ci_master_a         (),                                                                   //    (terminated)
		.multi_ci_master_b         (),                                                                   //    (terminated)
		.multi_ci_master_c         ()                                                                    //    (terminated)
	);

	soc_system_cpu_1_custom_instruction_master_comb_xconnect cpu_1_custom_instruction_master_comb_xconnect (
		.ci_slave_dataa      (cpu_1_custom_instruction_master_translator_comb_ci_master_dataa),    //   ci_slave.dataa
		.ci_slave_datab      (cpu_1_custom_instruction_master_translator_comb_ci_master_datab),    //           .datab
		.ci_slave_result     (cpu_1_custom_instruction_master_translator_comb_ci_master_result),   //           .result
		.ci_slave_n          (cpu_1_custom_instruction_master_translator_comb_ci_master_n),        //           .n
		.ci_slave_readra     (cpu_1_custom_instruction_master_translator_comb_ci_master_readra),   //           .readra
		.ci_slave_readrb     (cpu_1_custom_instruction_master_translator_comb_ci_master_readrb),   //           .readrb
		.ci_slave_writerc    (cpu_1_custom_instruction_master_translator_comb_ci_master_writerc),  //           .writerc
		.ci_slave_a          (cpu_1_custom_instruction_master_translator_comb_ci_master_a),        //           .a
		.ci_slave_b          (cpu_1_custom_instruction_master_translator_comb_ci_master_b),        //           .b
		.ci_slave_c          (cpu_1_custom_instruction_master_translator_comb_ci_master_c),        //           .c
		.ci_slave_ipending   (cpu_1_custom_instruction_master_translator_comb_ci_master_ipending), //           .ipending
		.ci_slave_estatus    (cpu_1_custom_instruction_master_translator_comb_ci_master_estatus),  //           .estatus
		.ci_master0_dataa    (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_dataa),     // ci_master0.dataa
		.ci_master0_datab    (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_datab),     //           .datab
		.ci_master0_result   (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_result),    //           .result
		.ci_master0_n        (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_n),         //           .n
		.ci_master0_readra   (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readra),    //           .readra
		.ci_master0_readrb   (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readrb),    //           .readrb
		.ci_master0_writerc  (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_writerc),   //           .writerc
		.ci_master0_a        (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_a),         //           .a
		.ci_master0_b        (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_b),         //           .b
		.ci_master0_c        (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_c),         //           .c
		.ci_master0_ipending (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_ipending),  //           .ipending
		.ci_master0_estatus  (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_estatus)    //           .estatus
	);

	altera_customins_slave_translator #(
		.N_WIDTH          (8),
		.USE_DONE         (0),
		.NUM_FIXED_CYCLES (0)
	) cpu_1_custom_instruction_master_comb_slave_translator0 (
		.ci_slave_dataa      (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_dataa),          //  ci_slave.dataa
		.ci_slave_datab      (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_datab),          //          .datab
		.ci_slave_result     (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_result),         //          .result
		.ci_slave_n          (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_n),              //          .n
		.ci_slave_readra     (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readra),         //          .readra
		.ci_slave_readrb     (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_readrb),         //          .readrb
		.ci_slave_writerc    (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_writerc),        //          .writerc
		.ci_slave_a          (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_a),              //          .a
		.ci_slave_b          (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_b),              //          .b
		.ci_slave_c          (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_c),              //          .c
		.ci_slave_ipending   (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_ipending),       //          .ipending
		.ci_slave_estatus    (cpu_1_custom_instruction_master_comb_xconnect_ci_master0_estatus),        //          .estatus
		.ci_master_dataa     (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_dataa),  // ci_master.dataa
		.ci_master_datab     (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_datab),  //          .datab
		.ci_master_result    (cpu_1_custom_instruction_master_comb_slave_translator0_ci_master_result), //          .result
		.ci_master_n         (),                                                                        // (terminated)
		.ci_master_readra    (),                                                                        // (terminated)
		.ci_master_readrb    (),                                                                        // (terminated)
		.ci_master_writerc   (),                                                                        // (terminated)
		.ci_master_a         (),                                                                        // (terminated)
		.ci_master_b         (),                                                                        // (terminated)
		.ci_master_c         (),                                                                        // (terminated)
		.ci_master_ipending  (),                                                                        // (terminated)
		.ci_master_estatus   (),                                                                        // (terminated)
		.ci_master_clk       (),                                                                        // (terminated)
		.ci_master_clken     (),                                                                        // (terminated)
		.ci_master_reset_req (),                                                                        // (terminated)
		.ci_master_reset     (),                                                                        // (terminated)
		.ci_master_start     (),                                                                        // (terminated)
		.ci_master_done      (1'b0),                                                                    // (terminated)
		.ci_slave_clk        (1'b0),                                                                    // (terminated)
		.ci_slave_clken      (1'b0),                                                                    // (terminated)
		.ci_slave_reset_req  (1'b0),                                                                    // (terminated)
		.ci_slave_reset      (1'b0),                                                                    // (terminated)
		.ci_slave_start      (1'b0),                                                                    // (terminated)
		.ci_slave_done       ()                                                                         // (terminated)
	);

	soc_system_mm_interconnect_0 mm_interconnect_0 (
		.pll_2_outclk0_clk                                           (pll_2_outclk0_clk),                                                             //                                     pll_2_outclk0.clk
		.pll_2_outclk1_clk                                           (pll_2_outclk1_clk),                                                             //                                     pll_2_outclk1.clk
		.cpu_0_reset_reset_bridge_in_reset_reset                     (rst_controller_001_reset_out_reset),                                            //                 cpu_0_reset_reset_bridge_in_reset.reset
		.HW_Accelerator_0_reset_sink_reset_bridge_in_reset_reset     (rst_controller_reset_out_reset),                                                // HW_Accelerator_0_reset_sink_reset_bridge_in_reset.reset
		.parallel_port_2_reset_reset_bridge_in_reset_reset           (rst_controller_003_reset_out_reset),                                            //       parallel_port_2_reset_reset_bridge_in_reset.reset
		.sdram_controller_2_reset_reset_bridge_in_reset_reset        (rst_controller_004_reset_out_reset),                                            //    sdram_controller_2_reset_reset_bridge_in_reset.reset
		.cpu_0_data_master_address                                   (cpu_0_data_master_address),                                                     //                                 cpu_0_data_master.address
		.cpu_0_data_master_waitrequest                               (cpu_0_data_master_waitrequest),                                                 //                                                  .waitrequest
		.cpu_0_data_master_byteenable                                (cpu_0_data_master_byteenable),                                                  //                                                  .byteenable
		.cpu_0_data_master_read                                      (cpu_0_data_master_read),                                                        //                                                  .read
		.cpu_0_data_master_readdata                                  (cpu_0_data_master_readdata),                                                    //                                                  .readdata
		.cpu_0_data_master_readdatavalid                             (cpu_0_data_master_readdatavalid),                                               //                                                  .readdatavalid
		.cpu_0_data_master_write                                     (cpu_0_data_master_write),                                                       //                                                  .write
		.cpu_0_data_master_writedata                                 (cpu_0_data_master_writedata),                                                   //                                                  .writedata
		.cpu_0_data_master_debugaccess                               (cpu_0_data_master_debugaccess),                                                 //                                                  .debugaccess
		.cpu_0_instruction_master_address                            (cpu_0_instruction_master_address),                                              //                          cpu_0_instruction_master.address
		.cpu_0_instruction_master_waitrequest                        (cpu_0_instruction_master_waitrequest),                                          //                                                  .waitrequest
		.cpu_0_instruction_master_read                               (cpu_0_instruction_master_read),                                                 //                                                  .read
		.cpu_0_instruction_master_readdata                           (cpu_0_instruction_master_readdata),                                             //                                                  .readdata
		.cpu_0_instruction_master_readdatavalid                      (cpu_0_instruction_master_readdatavalid),                                        //                                                  .readdatavalid
		.cpu_1_data_master_address                                   (cpu_1_data_master_address),                                                     //                                 cpu_1_data_master.address
		.cpu_1_data_master_waitrequest                               (cpu_1_data_master_waitrequest),                                                 //                                                  .waitrequest
		.cpu_1_data_master_byteenable                                (cpu_1_data_master_byteenable),                                                  //                                                  .byteenable
		.cpu_1_data_master_read                                      (cpu_1_data_master_read),                                                        //                                                  .read
		.cpu_1_data_master_readdata                                  (cpu_1_data_master_readdata),                                                    //                                                  .readdata
		.cpu_1_data_master_readdatavalid                             (cpu_1_data_master_readdatavalid),                                               //                                                  .readdatavalid
		.cpu_1_data_master_write                                     (cpu_1_data_master_write),                                                       //                                                  .write
		.cpu_1_data_master_writedata                                 (cpu_1_data_master_writedata),                                                   //                                                  .writedata
		.cpu_1_data_master_debugaccess                               (cpu_1_data_master_debugaccess),                                                 //                                                  .debugaccess
		.cpu_1_instruction_master_address                            (cpu_1_instruction_master_address),                                              //                          cpu_1_instruction_master.address
		.cpu_1_instruction_master_waitrequest                        (cpu_1_instruction_master_waitrequest),                                          //                                                  .waitrequest
		.cpu_1_instruction_master_read                               (cpu_1_instruction_master_read),                                                 //                                                  .read
		.cpu_1_instruction_master_readdata                           (cpu_1_instruction_master_readdata),                                             //                                                  .readdata
		.cpu_1_instruction_master_readdatavalid                      (cpu_1_instruction_master_readdatavalid),                                        //                                                  .readdatavalid
		.HW_Accelerator_0_avalon_master_address                      (hw_accelerator_0_avalon_master_address),                                        //                    HW_Accelerator_0_avalon_master.address
		.HW_Accelerator_0_avalon_master_waitrequest                  (hw_accelerator_0_avalon_master_waitrequest),                                    //                                                  .waitrequest
		.HW_Accelerator_0_avalon_master_byteenable                   (hw_accelerator_0_avalon_master_byteenable),                                     //                                                  .byteenable
		.HW_Accelerator_0_avalon_master_read                         (hw_accelerator_0_avalon_master_read),                                           //                                                  .read
		.HW_Accelerator_0_avalon_master_readdata                     (hw_accelerator_0_avalon_master_readdata),                                       //                                                  .readdata
		.HW_Accelerator_0_avalon_master_write                        (hw_accelerator_0_avalon_master_write),                                          //                                                  .write
		.HW_Accelerator_0_avalon_master_writedata                    (hw_accelerator_0_avalon_master_writedata),                                      //                                                  .writedata
		.audio_0_avalon_audio_slave_address                          (mm_interconnect_0_audio_0_avalon_audio_slave_address),                          //                        audio_0_avalon_audio_slave.address
		.audio_0_avalon_audio_slave_write                            (mm_interconnect_0_audio_0_avalon_audio_slave_write),                            //                                                  .write
		.audio_0_avalon_audio_slave_read                             (mm_interconnect_0_audio_0_avalon_audio_slave_read),                             //                                                  .read
		.audio_0_avalon_audio_slave_readdata                         (mm_interconnect_0_audio_0_avalon_audio_slave_readdata),                         //                                                  .readdata
		.audio_0_avalon_audio_slave_writedata                        (mm_interconnect_0_audio_0_avalon_audio_slave_writedata),                        //                                                  .writedata
		.audio_0_avalon_audio_slave_chipselect                       (mm_interconnect_0_audio_0_avalon_audio_slave_chipselect),                       //                                                  .chipselect
		.audio_and_video_config_0_avalon_av_config_slave_address     (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_address),     //   audio_and_video_config_0_avalon_av_config_slave.address
		.audio_and_video_config_0_avalon_av_config_slave_write       (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_write),       //                                                  .write
		.audio_and_video_config_0_avalon_av_config_slave_read        (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_read),        //                                                  .read
		.audio_and_video_config_0_avalon_av_config_slave_readdata    (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_readdata),    //                                                  .readdata
		.audio_and_video_config_0_avalon_av_config_slave_writedata   (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_writedata),   //                                                  .writedata
		.audio_and_video_config_0_avalon_av_config_slave_byteenable  (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_byteenable),  //                                                  .byteenable
		.audio_and_video_config_0_avalon_av_config_slave_waitrequest (mm_interconnect_0_audio_and_video_config_0_avalon_av_config_slave_waitrequest), //                                                  .waitrequest
		.cpu_0_debug_mem_slave_address                               (mm_interconnect_0_cpu_0_debug_mem_slave_address),                               //                             cpu_0_debug_mem_slave.address
		.cpu_0_debug_mem_slave_write                                 (mm_interconnect_0_cpu_0_debug_mem_slave_write),                                 //                                                  .write
		.cpu_0_debug_mem_slave_read                                  (mm_interconnect_0_cpu_0_debug_mem_slave_read),                                  //                                                  .read
		.cpu_0_debug_mem_slave_readdata                              (mm_interconnect_0_cpu_0_debug_mem_slave_readdata),                              //                                                  .readdata
		.cpu_0_debug_mem_slave_writedata                             (mm_interconnect_0_cpu_0_debug_mem_slave_writedata),                             //                                                  .writedata
		.cpu_0_debug_mem_slave_byteenable                            (mm_interconnect_0_cpu_0_debug_mem_slave_byteenable),                            //                                                  .byteenable
		.cpu_0_debug_mem_slave_waitrequest                           (mm_interconnect_0_cpu_0_debug_mem_slave_waitrequest),                           //                                                  .waitrequest
		.cpu_0_debug_mem_slave_debugaccess                           (mm_interconnect_0_cpu_0_debug_mem_slave_debugaccess),                           //                                                  .debugaccess
		.cpu_1_debug_mem_slave_address                               (mm_interconnect_0_cpu_1_debug_mem_slave_address),                               //                             cpu_1_debug_mem_slave.address
		.cpu_1_debug_mem_slave_write                                 (mm_interconnect_0_cpu_1_debug_mem_slave_write),                                 //                                                  .write
		.cpu_1_debug_mem_slave_read                                  (mm_interconnect_0_cpu_1_debug_mem_slave_read),                                  //                                                  .read
		.cpu_1_debug_mem_slave_readdata                              (mm_interconnect_0_cpu_1_debug_mem_slave_readdata),                              //                                                  .readdata
		.cpu_1_debug_mem_slave_writedata                             (mm_interconnect_0_cpu_1_debug_mem_slave_writedata),                             //                                                  .writedata
		.cpu_1_debug_mem_slave_byteenable                            (mm_interconnect_0_cpu_1_debug_mem_slave_byteenable),                            //                                                  .byteenable
		.cpu_1_debug_mem_slave_waitrequest                           (mm_interconnect_0_cpu_1_debug_mem_slave_waitrequest),                           //                                                  .waitrequest
		.cpu_1_debug_mem_slave_debugaccess                           (mm_interconnect_0_cpu_1_debug_mem_slave_debugaccess),                           //                                                  .debugaccess
		.HW_Accelerator_0_as_address                                 (mm_interconnect_0_hw_accelerator_0_as_address),                                 //                               HW_Accelerator_0_as.address
		.HW_Accelerator_0_as_write                                   (mm_interconnect_0_hw_accelerator_0_as_write),                                   //                                                  .write
		.HW_Accelerator_0_as_read                                    (mm_interconnect_0_hw_accelerator_0_as_read),                                    //                                                  .read
		.HW_Accelerator_0_as_readdata                                (mm_interconnect_0_hw_accelerator_0_as_readdata),                                //                                                  .readdata
		.HW_Accelerator_0_as_writedata                               (mm_interconnect_0_hw_accelerator_0_as_writedata),                               //                                                  .writedata
		.jtag_uart_0_avalon_jtag_slave_address                       (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_address),                       //                     jtag_uart_0_avalon_jtag_slave.address
		.jtag_uart_0_avalon_jtag_slave_write                         (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_write),                         //                                                  .write
		.jtag_uart_0_avalon_jtag_slave_read                          (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_read),                          //                                                  .read
		.jtag_uart_0_avalon_jtag_slave_readdata                      (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_readdata),                      //                                                  .readdata
		.jtag_uart_0_avalon_jtag_slave_writedata                     (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_writedata),                     //                                                  .writedata
		.jtag_uart_0_avalon_jtag_slave_waitrequest                   (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_waitrequest),                   //                                                  .waitrequest
		.jtag_uart_0_avalon_jtag_slave_chipselect                    (mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_chipselect),                    //                                                  .chipselect
		.jtag_uart_1_avalon_jtag_slave_address                       (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_address),                       //                     jtag_uart_1_avalon_jtag_slave.address
		.jtag_uart_1_avalon_jtag_slave_write                         (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_write),                         //                                                  .write
		.jtag_uart_1_avalon_jtag_slave_read                          (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_read),                          //                                                  .read
		.jtag_uart_1_avalon_jtag_slave_readdata                      (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_readdata),                      //                                                  .readdata
		.jtag_uart_1_avalon_jtag_slave_writedata                     (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_writedata),                     //                                                  .writedata
		.jtag_uart_1_avalon_jtag_slave_waitrequest                   (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_waitrequest),                   //                                                  .waitrequest
		.jtag_uart_1_avalon_jtag_slave_chipselect                    (mm_interconnect_0_jtag_uart_1_avalon_jtag_slave_chipselect),                    //                                                  .chipselect
		.mailbox_simple_0_avmm_msg_receiver_address                  (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_address),                  //                mailbox_simple_0_avmm_msg_receiver.address
		.mailbox_simple_0_avmm_msg_receiver_write                    (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_write),                    //                                                  .write
		.mailbox_simple_0_avmm_msg_receiver_read                     (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_read),                     //                                                  .read
		.mailbox_simple_0_avmm_msg_receiver_readdata                 (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_readdata),                 //                                                  .readdata
		.mailbox_simple_0_avmm_msg_receiver_writedata                (mm_interconnect_0_mailbox_simple_0_avmm_msg_receiver_writedata),                //                                                  .writedata
		.mailbox_simple_0_avmm_msg_sender_address                    (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_address),                    //                  mailbox_simple_0_avmm_msg_sender.address
		.mailbox_simple_0_avmm_msg_sender_write                      (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_write),                      //                                                  .write
		.mailbox_simple_0_avmm_msg_sender_read                       (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_read),                       //                                                  .read
		.mailbox_simple_0_avmm_msg_sender_readdata                   (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_readdata),                   //                                                  .readdata
		.mailbox_simple_0_avmm_msg_sender_writedata                  (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_writedata),                  //                                                  .writedata
		.mailbox_simple_0_avmm_msg_sender_waitrequest                (mm_interconnect_0_mailbox_simple_0_avmm_msg_sender_waitrequest),                //                                                  .waitrequest
		.mailbox_simple_1_avmm_msg_receiver_address                  (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_address),                  //                mailbox_simple_1_avmm_msg_receiver.address
		.mailbox_simple_1_avmm_msg_receiver_write                    (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_write),                    //                                                  .write
		.mailbox_simple_1_avmm_msg_receiver_read                     (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_read),                     //                                                  .read
		.mailbox_simple_1_avmm_msg_receiver_readdata                 (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_readdata),                 //                                                  .readdata
		.mailbox_simple_1_avmm_msg_receiver_writedata                (mm_interconnect_0_mailbox_simple_1_avmm_msg_receiver_writedata),                //                                                  .writedata
		.mailbox_simple_1_avmm_msg_sender_address                    (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_address),                    //                  mailbox_simple_1_avmm_msg_sender.address
		.mailbox_simple_1_avmm_msg_sender_write                      (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_write),                      //                                                  .write
		.mailbox_simple_1_avmm_msg_sender_read                       (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_read),                       //                                                  .read
		.mailbox_simple_1_avmm_msg_sender_readdata                   (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_readdata),                   //                                                  .readdata
		.mailbox_simple_1_avmm_msg_sender_writedata                  (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_writedata),                  //                                                  .writedata
		.mailbox_simple_1_avmm_msg_sender_waitrequest                (mm_interconnect_0_mailbox_simple_1_avmm_msg_sender_waitrequest),                //                                                  .waitrequest
		.onchip_memory2_0_s1_address                                 (mm_interconnect_0_onchip_memory2_0_s1_address),                                 //                               onchip_memory2_0_s1.address
		.onchip_memory2_0_s1_write                                   (mm_interconnect_0_onchip_memory2_0_s1_write),                                   //                                                  .write
		.onchip_memory2_0_s1_readdata                                (mm_interconnect_0_onchip_memory2_0_s1_readdata),                                //                                                  .readdata
		.onchip_memory2_0_s1_writedata                               (mm_interconnect_0_onchip_memory2_0_s1_writedata),                               //                                                  .writedata
		.onchip_memory2_0_s1_byteenable                              (mm_interconnect_0_onchip_memory2_0_s1_byteenable),                              //                                                  .byteenable
		.onchip_memory2_0_s1_chipselect                              (mm_interconnect_0_onchip_memory2_0_s1_chipselect),                              //                                                  .chipselect
		.onchip_memory2_0_s1_clken                                   (mm_interconnect_0_onchip_memory2_0_s1_clken),                                   //                                                  .clken
		.onchip_memory_1_s1_address                                  (mm_interconnect_0_onchip_memory_1_s1_address),                                  //                                onchip_memory_1_s1.address
		.onchip_memory_1_s1_write                                    (mm_interconnect_0_onchip_memory_1_s1_write),                                    //                                                  .write
		.onchip_memory_1_s1_readdata                                 (mm_interconnect_0_onchip_memory_1_s1_readdata),                                 //                                                  .readdata
		.onchip_memory_1_s1_writedata                                (mm_interconnect_0_onchip_memory_1_s1_writedata),                                //                                                  .writedata
		.onchip_memory_1_s1_byteenable                               (mm_interconnect_0_onchip_memory_1_s1_byteenable),                               //                                                  .byteenable
		.onchip_memory_1_s1_chipselect                               (mm_interconnect_0_onchip_memory_1_s1_chipselect),                               //                                                  .chipselect
		.onchip_memory_1_s1_clken                                    (mm_interconnect_0_onchip_memory_1_s1_clken),                                    //                                                  .clken
		.parallel_port_0_avalon_parallel_port_slave_address          (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_address),          //        parallel_port_0_avalon_parallel_port_slave.address
		.parallel_port_0_avalon_parallel_port_slave_write            (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_write),            //                                                  .write
		.parallel_port_0_avalon_parallel_port_slave_read             (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_read),             //                                                  .read
		.parallel_port_0_avalon_parallel_port_slave_readdata         (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_readdata),         //                                                  .readdata
		.parallel_port_0_avalon_parallel_port_slave_writedata        (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_writedata),        //                                                  .writedata
		.parallel_port_0_avalon_parallel_port_slave_byteenable       (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_byteenable),       //                                                  .byteenable
		.parallel_port_0_avalon_parallel_port_slave_chipselect       (mm_interconnect_0_parallel_port_0_avalon_parallel_port_slave_chipselect),       //                                                  .chipselect
		.parallel_port_1_avalon_parallel_port_slave_address          (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_address),          //        parallel_port_1_avalon_parallel_port_slave.address
		.parallel_port_1_avalon_parallel_port_slave_write            (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_write),            //                                                  .write
		.parallel_port_1_avalon_parallel_port_slave_read             (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_read),             //                                                  .read
		.parallel_port_1_avalon_parallel_port_slave_readdata         (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_readdata),         //                                                  .readdata
		.parallel_port_1_avalon_parallel_port_slave_writedata        (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_writedata),        //                                                  .writedata
		.parallel_port_1_avalon_parallel_port_slave_byteenable       (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_byteenable),       //                                                  .byteenable
		.parallel_port_1_avalon_parallel_port_slave_chipselect       (mm_interconnect_0_parallel_port_1_avalon_parallel_port_slave_chipselect),       //                                                  .chipselect
		.parallel_port_2_avalon_parallel_port_slave_address          (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_address),          //        parallel_port_2_avalon_parallel_port_slave.address
		.parallel_port_2_avalon_parallel_port_slave_write            (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_write),            //                                                  .write
		.parallel_port_2_avalon_parallel_port_slave_read             (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_read),             //                                                  .read
		.parallel_port_2_avalon_parallel_port_slave_readdata         (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_readdata),         //                                                  .readdata
		.parallel_port_2_avalon_parallel_port_slave_writedata        (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_writedata),        //                                                  .writedata
		.parallel_port_2_avalon_parallel_port_slave_byteenable       (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_byteenable),       //                                                  .byteenable
		.parallel_port_2_avalon_parallel_port_slave_chipselect       (mm_interconnect_0_parallel_port_2_avalon_parallel_port_slave_chipselect),       //                                                  .chipselect
		.performance_counter_0_control_slave_address                 (mm_interconnect_0_performance_counter_0_control_slave_address),                 //               performance_counter_0_control_slave.address
		.performance_counter_0_control_slave_write                   (mm_interconnect_0_performance_counter_0_control_slave_write),                   //                                                  .write
		.performance_counter_0_control_slave_readdata                (mm_interconnect_0_performance_counter_0_control_slave_readdata),                //                                                  .readdata
		.performance_counter_0_control_slave_writedata               (mm_interconnect_0_performance_counter_0_control_slave_writedata),               //                                                  .writedata
		.performance_counter_0_control_slave_begintransfer           (mm_interconnect_0_performance_counter_0_control_slave_begintransfer),           //                                                  .begintransfer
		.performance_counter_1_control_slave_address                 (mm_interconnect_0_performance_counter_1_control_slave_address),                 //               performance_counter_1_control_slave.address
		.performance_counter_1_control_slave_write                   (mm_interconnect_0_performance_counter_1_control_slave_write),                   //                                                  .write
		.performance_counter_1_control_slave_readdata                (mm_interconnect_0_performance_counter_1_control_slave_readdata),                //                                                  .readdata
		.performance_counter_1_control_slave_writedata               (mm_interconnect_0_performance_counter_1_control_slave_writedata),               //                                                  .writedata
		.performance_counter_1_control_slave_begintransfer           (mm_interconnect_0_performance_counter_1_control_slave_begintransfer),           //                                                  .begintransfer
		.pio_2_s1_address                                            (mm_interconnect_0_pio_2_s1_address),                                            //                                          pio_2_s1.address
		.pio_2_s1_write                                              (mm_interconnect_0_pio_2_s1_write),                                              //                                                  .write
		.pio_2_s1_readdata                                           (mm_interconnect_0_pio_2_s1_readdata),                                           //                                                  .readdata
		.pio_2_s1_writedata                                          (mm_interconnect_0_pio_2_s1_writedata),                                          //                                                  .writedata
		.pio_2_s1_chipselect                                         (mm_interconnect_0_pio_2_s1_chipselect),                                         //                                                  .chipselect
		.sdram_controller_2_s1_address                               (mm_interconnect_0_sdram_controller_2_s1_address),                               //                             sdram_controller_2_s1.address
		.sdram_controller_2_s1_write                                 (mm_interconnect_0_sdram_controller_2_s1_write),                                 //                                                  .write
		.sdram_controller_2_s1_read                                  (mm_interconnect_0_sdram_controller_2_s1_read),                                  //                                                  .read
		.sdram_controller_2_s1_readdata                              (mm_interconnect_0_sdram_controller_2_s1_readdata),                              //                                                  .readdata
		.sdram_controller_2_s1_writedata                             (mm_interconnect_0_sdram_controller_2_s1_writedata),                             //                                                  .writedata
		.sdram_controller_2_s1_byteenable                            (mm_interconnect_0_sdram_controller_2_s1_byteenable),                            //                                                  .byteenable
		.sdram_controller_2_s1_readdatavalid                         (mm_interconnect_0_sdram_controller_2_s1_readdatavalid),                         //                                                  .readdatavalid
		.sdram_controller_2_s1_waitrequest                           (mm_interconnect_0_sdram_controller_2_s1_waitrequest),                           //                                                  .waitrequest
		.sdram_controller_2_s1_chipselect                            (mm_interconnect_0_sdram_controller_2_s1_chipselect)                             //                                                  .chipselect
	);

	soc_system_irq_mapper irq_mapper (
		.clk           (pll_2_outclk0_clk),                  //       clk.clk
		.reset         (rst_controller_001_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),           // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),           // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),           // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),           // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),           // receiver4.irq
		.sender_irq    (cpu_0_irq_irq)                       //    sender.irq
	);

	soc_system_irq_mapper_001 irq_mapper_001 (
		.clk           (pll_2_outclk0_clk),              //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver1_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver2_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_001_receiver2_irq),   // receiver2.irq
		.receiver3_irq (irq_mapper_receiver4_irq),       // receiver3.irq
		.sender_irq    (cpu_1_irq_irq)                   //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_1_debug_reset_request_reset),    // reset_in1.reset
		.clk            (pll_2_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~reset_reset_n),                         // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),        // reset_in1.reset
		.clk            (pll_2_outclk0_clk),                      //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_001_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                                   // (terminated)
		.reset_req_in1  (1'b0),                                   // (terminated)
		.reset_in2      (1'b0),                                   // (terminated)
		.reset_req_in2  (1'b0),                                   // (terminated)
		.reset_in3      (1'b0),                                   // (terminated)
		.reset_req_in3  (1'b0),                                   // (terminated)
		.reset_in4      (1'b0),                                   // (terminated)
		.reset_req_in4  (1'b0),                                   // (terminated)
		.reset_in5      (1'b0),                                   // (terminated)
		.reset_req_in5  (1'b0),                                   // (terminated)
		.reset_in6      (1'b0),                                   // (terminated)
		.reset_req_in6  (1'b0),                                   // (terminated)
		.reset_in7      (1'b0),                                   // (terminated)
		.reset_req_in7  (1'b0),                                   // (terminated)
		.reset_in8      (1'b0),                                   // (terminated)
		.reset_req_in8  (1'b0),                                   // (terminated)
		.reset_in9      (1'b0),                                   // (terminated)
		.reset_req_in9  (1'b0),                                   // (terminated)
		.reset_in10     (1'b0),                                   // (terminated)
		.reset_req_in10 (1'b0),                                   // (terminated)
		.reset_in11     (1'b0),                                   // (terminated)
		.reset_req_in11 (1'b0),                                   // (terminated)
		.reset_in12     (1'b0),                                   // (terminated)
		.reset_req_in12 (1'b0),                                   // (terminated)
		.reset_in13     (1'b0),                                   // (terminated)
		.reset_req_in13 (1'b0),                                   // (terminated)
		.reset_in14     (1'b0),                                   // (terminated)
		.reset_req_in14 (1'b0),                                   // (terminated)
		.reset_in15     (1'b0),                                   // (terminated)
		.reset_req_in15 (1'b0)                                    // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("none"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_0_debug_reset_request_reset),    // reset_in1.reset
		.clk            (),                                   //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (pll_2_outclk0_clk),                  //       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.clk            (pll_2_outclk1_clk),                  //       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
